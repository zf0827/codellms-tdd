{"input": "inline bool EnumValid(Model model) {\n  for (Model m : kAllModels) {\n    if (m == model) return true;\n  }\n  return false;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.h", "function_name": "EnumValid", "index": 0, "label": 0}
{"input": "int GRender::setVideoParam(int width,int height){\n    m_width = width;\n    m_height = height;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::setVideoParam", "index": 1, "label": 0}
{"input": "size_t AfeWakeWord::GetFeedSize() {\n    if (afe_data_ == nullptr) {\n        return 0;\n    }\n    return afe_iface_->get_feed_chunksize(afe_data_) * codec_->input_channels();\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::GetFeedSize", "index": 2, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline SegmentReturnType segment(Index start, Index n)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return SegmentReturnType(derived(), start, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "SegmentReturnType segment", "index": 3, "label": 0}
{"input": "EIGEN_DEVICE_FUNC \ninline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)\n{\n  enum {\n    i1 = (i+1) % 3,\n    i2 = (i+2) % 3,\n    j1 = (j+1) % 3,\n    j2 = (j+2) % 3\n  };\n  return m.coeff(i1, j1) * m.coeff(i2, j2)\n       - m.coeff(i1, j2) * m.coeff(i2, j1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/InverseImpl.h", "function_name": "cofactor_3x3", "index": 4, "label": 0}
{"input": "EIGEN_DEVICE_FUNC \ninline void throw_std_bad_alloc()\n{\n  #ifdef EIGEN_EXCEPTIONS\n    throw std::bad_alloc();\n  #else\n    std::size_t huge = static_cast<std::size_t>(-1);\n    ::operator new(huge);\n  #endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "throw_std_bad_alloc", "index": 5, "label": 0}
{"input": "NdArray<bool> isclose(const NdArray<dtype>& inArray1,\n                          const NdArray<dtype>& inArray2,\n                          double                inRtol = 1e-05,\n                          double                inAtol = 1e-08)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        if (inArray1.shape() != inArray2.shape())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"input array shapes are not consistant.\");\n        }\n\n        NdArray<bool> returnArray(inArray1.shape());\n        stl_algorithms::transform(inArray1.cbegin(),\n                                  inArray1.cend(),\n                                  inArray2.cbegin(),\n                                  returnArray.begin(),\n                                  [inRtol, inAtol](dtype inValueA, dtype inValueB) noexcept -> bool\n                                  { return std::abs(inValueA - inValueB) <= (inAtol + inRtol * std::abs(inValueB)); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/isclose.hpp", "function_name": "isclose", "index": 6, "label": 0}
{"input": "void FrameSource::reset() {\n    audioPacketQueue->reset();\n    videoPacketQueue->reset();\n    videoRecyleQueue->reset();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/FrameSource.cpp", "function_name": "FrameSource::reset", "index": 7, "label": 0}
{"input": "inline Quat<T> Quat<T>::sin() const\n{\n    Vec<T, 3> v{x, y ,z};\n    T vNorm = std::sqrt(v.dot(v));\n    T k = vNorm < CV_QUAT_EPS ? 1 : std::cos(w) * std::sinh(vNorm) / vNorm;\n    return Quat<T>(std::sin(w) * std::cosh(vNorm), v[0] * k, v[1] * k, v[2] * k);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::sin", "index": 8, "label": 0}
{"input": "inline int64_t NowTime()\n{\n\treturn std::chrono::time_point_cast<T>(std::chrono::system_clock::now()).time_since_epoch().count();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/sas_util.h", "function_name": "NowTime", "index": 9, "label": 0}
{"input": "static GProtoOutputArgs getGOut_impl(const std::tuple<Ts...>& ts, detail::Seq<Indexes...>)\n    {\n        return GProtoOutputArgs{ detail::packArgs(std::get<Indexes>(ts)...)};\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gproto.hpp", "function_name": "getGOut_impl", "index": 10, "label": 0}
{"input": "void test_forward_adolc()\n{\n  adtl::setNumDir(NUMBER_DIRECTIONS);\n\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST(( adolc_forward_jacobian(TestFunc1<double,2,2>()) ));\n    CALL_SUBTEST(( adolc_forward_jacobian(TestFunc1<double,2,3>()) ));\n    CALL_SUBTEST(( adolc_forward_jacobian(TestFunc1<double,3,2>()) ));\n    CALL_SUBTEST(( adolc_forward_jacobian(TestFunc1<double,3,3>()) ));\n    CALL_SUBTEST(( adolc_forward_jacobian(TestFunc1<double>(3,3)) ));\n  }\n\n  {\n    \n    Matrix<adtl::adouble,2,1> x;\n    foo(x);\n    Matrix<adtl::adouble,Dynamic,Dynamic> A(4,4);;\n    A.selfadjointView<Lower>().eigenvalues();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/forward_adolc.cpp", "function_name": "test_forward_adolc", "index": 11, "label": 0}
{"input": "void ListLayoutManager::SendScrollEvents(float scroll_delta,\n                                         float original_offset,\n                                         list::EventSource event_source) {\n  list_container_->list_event_manager()->OnScroll(scroll_delta, event_source);\n  list_container_->list_event_manager()->DetectScrollToThresholdAndSend(\n      scroll_delta, original_offset, event_source);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "a0dcde9c711d8fb582d9df9920816808b9a1f177", "file_path": "core/renderer/ui_component/list/list_layout_manager.cc", "function_name": "ListLayoutManager::SendScrollEvents", "index": 12, "label": 0}
{"input": "EmojiWidget::EmojiWidget(esp_lcd_panel_handle_t panel, esp_lcd_panel_io_handle_t panel_io)\n{\n    InitializePlayer(panel, panel_io);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/emoji_display.cc", "function_name": "EmojiWidget::EmojiWidget", "index": 13, "label": 0}
{"input": "JNIEXPORT jint JNICALL Java_com_btows_ncnntest_SCRFDNcnn_mskrstpic(JNIEnv* env, jobject thiz,jstring picfile, jstring mskfile,jintArray arrbox, jint index,jstring fgfile){\n        std::string s_pic = getStringUTF(env,picfile);\n        std::string s_msk = getStringUTF(env,mskfile);\n        std::string s_fg = getStringUTF(env,fgfile);\n        jint *boxData = (jint*) env->GetIntArrayElements( arrbox, NULL);\n        int rst =  g_digit->mskrstpic(index,s_pic.c_str(),(int*)boxData,s_msk.c_str(),s_fg.c_str());\n        env->ReleaseIntArrayElements( arrbox, boxData, 0);\n        return rst;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_mskrstpic", "index": 14, "label": 0}
{"input": "EIGEN_STRONG_INLINE void        vst1_f32 (float* to, float32x2_t from) { ::vst1_f32 ((float32_t*)to,from); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h", "function_name": "vst1_f32", "index": 15, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Homogeneous<ExpressionType,Direction>\nVectorwiseOp<ExpressionType,Direction>::homogeneous() const\n{\n  return HomogeneousReturnType(_expression());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "Homogeneous<ExpressionType,Direction>\nVectorwiseOp<ExpressionType,Direction>::homogeneous", "index": 16, "label": 0}
{"input": "inline void v_rshr_pack_u_store(ushort* ptr, const v_int32x4& a)\n{\n    v128_t delta = wasm_i32x4_splat(((int)1 << (n-1)));\n    v128_t a1 = wasm_i32x4_shr(wasm_i32x4_add(a.val, delta), n);\n    v128_t maxval = wasm_i32x4_splat(65535);\n    v128_t minval = wasm_i32x4_splat(0);\n    v128_t a2 = wasm_v128_bitselect(maxval, a1, wasm_i32x4_gt(a1, maxval));\n    v128_t a3 = wasm_v128_bitselect(minval, a2, wasm_i32x4_lt(a1, minval));\n    v128_t r = wasm_v8x16_shuffle(a3, a3, 0,1,4,5,8,9,12,13,0,1,4,5,8,9,12,13);\n    ushort t_ptr[8];\n    wasm_v128_store(t_ptr, r);\n    for (int i=0; i<4; ++i) {\n        ptr[i] = t_ptr[i];\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_rshr_pack_u_store", "index": 17, "label": 0}
{"input": "inline\nvoid FisheyeProjector::mapBackward(float u, float v, float &x, float &y)\n{\n    u /= scale;\n    v /= scale;\n\n    float u_ = atan2f(v, u);\n    float v_ = sqrtf(u*u + v*v);\n\n    float sinv = sinf((float)CV_PI - v_);\n    float x_ = sinv * sinf(u_);\n    float y_ = cosf((float)CV_PI - v_);\n    float z_ = sinv * cosf(u_);\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "FisheyeProjector::mapBackward", "index": 18, "label": 0}
{"input": "void NoAudioProcessor::OnVadStateChange(std::function<void(bool speaking)> callback) {\n    vad_state_change_callback_ = callback;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/no_audio_processor.cc", "function_name": "NoAudioProcessor::OnVadStateChange", "index": 19, "label": 0}
{"input": "inline void IoBinding::BindInput(const char* name, const Value& value) {\n  ThrowOnError(GetApi().BindInput(p_, name, value));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "IoBinding::BindInput", "index": 20, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE PlainObjectBase(const EigenBase<OtherDerived> &other)\n      : m_storage()\n    {\n      _check_template_params();\n      resizeLike(other);\n      *this = other.derived();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "m_storage", "index": 21, "label": 0}
{"input": "void GenerateSingleT(const ModelWeightsStorage& model,\n                     const RuntimeConfig& runtime_config,\n                     const PromptTokens& prompt, size_t pos, size_t prefix_end,\n                     KVCache& kv_cache, MatMulEnv* env,\n                     TimingInfo& timing_info) {\n  constexpr size_t kNumQueries = 1;\n  const size_t qbatch_start = 0;\n\n  \n  Activations activations(model.Config());\n  activations.Allocate(kNumQueries, env);\n\n  const QueriesPromptTokens queries_prompt(&prompt, kNumQueries);\n  QueriesPos queries_pos(&pos, kNumQueries);\n  const QueriesPos queries_prefix_end(&prefix_end, kNumQueries);\n  const KVCaches kv_caches{&kv_cache, kNumQueries};\n\n  GenerateT<T>(model, activations, runtime_config, queries_prompt, queries_pos,\n               queries_prefix_end, qbatch_start, kv_caches, timing_info);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "gemma/gemma-inl.h", "function_name": "GenerateSingleT", "index": 22, "label": 0}
{"input": "inline Quat<T> Quat<T>::inv(QuatAssumeType assumeUnit) const\n{\n    if (assumeUnit)\n    {\n        return conjugate();\n    }\n    T norm2 = dot(*this);\n    if (norm2 < CV_QUAT_EPS)\n    {\n        CV_Error(Error::StsBadArg, \"This quaternion do not have inverse quaternion\");\n    }\n    return conjugate() / norm2;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::inv", "index": 23, "label": 0}
{"input": "void test_cxx11_tensor_symmetry()\n{\n  CALL_SUBTEST(test_symgroups_static());\n  CALL_SUBTEST(test_symgroups_dynamic());\n  CALL_SUBTEST(test_symgroups_selection());\n  CALL_SUBTEST(test_tensor_epsilon());\n  CALL_SUBTEST(test_tensor_sym());\n  CALL_SUBTEST(test_tensor_asym());\n  CALL_SUBTEST(test_tensor_dynsym());\n  CALL_SUBTEST(test_tensor_randacc());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_symmetry.cpp", "function_name": "test_cxx11_tensor_symmetry", "index": 24, "label": 0}
{"input": "EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketType& dest) const\n  {\n    dest = pset1<RhsPacketType>(*b);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "loadRhs", "index": 25, "label": 0}
{"input": "inline void IoBindingImpl<T>::SynchronizeInputs() {\n  ThrowOnError(GetApi().SynchronizeBoundInputs(this->p_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "IoBindingImpl<T>::SynchronizeInputs", "index": 26, "label": 0}
{"input": "static GMetaArgs getOutMeta(const GMetaArgs &in_meta,\n                                    const GArgs &in_args)\n        {\n            return getOutMeta_impl(in_meta,\n                                   in_args,\n                                   typename detail::MkSeq<sizeof...(Ins)>::type());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gkernel.hpp", "function_name": "in_meta", "index": 27, "label": 0}
{"input": "EIGEN_STRONG_INLINE const CwiseAbsReturnType\ncwiseAbs() const { return CwiseAbsReturnType(derived()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h", "function_name": "CwiseAbsReturnType\ncwiseAbs", "index": 28, "label": 0}
{"input": "void OffscreenCanvasRenderingContext2D::put_image_data(ImageData&, float, float)\n\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::put_image_data()\");\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::put_image_data", "index": 29, "label": 0}
{"input": "double spherical_harmonic_r(uint32 n, int32 m, dtype1 theta, dtype2 phi)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype1);\n        STATIC_ASSERT_ARITHMETIC(dtype2);\n\n        return boost::math::spherical_harmonic_r(m, n, static_cast<double>(phi), static_cast<double>(theta));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/spherical_harmonic.hpp", "function_name": "spherical_harmonic_r", "index": 30, "label": 0}
{"input": "void test_levenberg_marquardt()\n{\n    \n    CALL_SUBTEST(testLmder1());\n    CALL_SUBTEST(testLmder());\n    CALL_SUBTEST(testLmdif1());\n\n\n    CALL_SUBTEST(testLmdif());\n\n    \n    CALL_SUBTEST(testNistMisra1a());\n    CALL_SUBTEST(testNistChwirut2());\n\n    \n    CALL_SUBTEST(testNistHahn1());\n    CALL_SUBTEST(testNistMisra1d());\n    CALL_SUBTEST(testNistMGH17());\n    CALL_SUBTEST(testNistLanczos1());\n\n\n    CALL_SUBTEST(testNistRat42());\n    CALL_SUBTEST(testNistMGH10());\n    CALL_SUBTEST(testNistBoxBOD());\n\n    CALL_SUBTEST(testNistBennett5());\n    CALL_SUBTEST(testNistThurber());\n    CALL_SUBTEST(testNistRat43());\n    CALL_SUBTEST(testNistEckerle4());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/levenberg_marquardt.cpp", "function_name": "test_levenberg_marquardt", "index": 31, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorBroadcastingOp<const Broadcast, const Derived>\n    broadcast(const Broadcast& broadcast) const {\n      return TensorBroadcastingOp<const Broadcast, const Derived>(derived(), broadcast);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorBroadcastingOp<const Broadcast, const Derived>\n    broadcast", "index": 32, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nEIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_quotient_op<Scalar>, const Derived, const OtherDerived>\ncwiseQuotient(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const\n{\n  return CwiseBinaryOp<internal::scalar_quotient_op<Scalar>, const Derived, const OtherDerived>(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h", "function_name": "EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_quotient_op<Scalar>, const Derived, const OtherDerived>\ncwiseQuotient", "index": 33, "label": 0}
{"input": "[[nodiscard]] self_type at(const Slice& inRowSlice, index_type inColIndex) const\n        {\n            const NdArray<index_type> colIndices = { inColIndex };\n            return at(toIndices(inRowSlice, Axis::ROW), colIndices);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inColIndex", "index": 34, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half ceilh(const Eigen::half& a) {\n  return Eigen::half(::ceilf(float(a)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/Half.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half ceilh", "index": 35, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_difference_op<Scalar>, const Derived, const OtherDerived>\n    operator-(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_difference_op<Scalar>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_difference_op<Scalar>, const Derived, const OtherDerived>\n    operator-", "index": 36, "label": 0}
{"input": "void FrameSource::popVidFrame(MediaData *frame) {\n    LOGD(TAG, \"popVidFrame %lld\", frame->pts);\n    videoPacketQueue->pop();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/FrameSource.cpp", "function_name": "FrameSource::popVidFrame", "index": 37, "label": 0}
{"input": "JNIEXPORT jint JNICALL Java_com_btows_ncnntest_SCRFDNcnn_releasedigit(JNIEnv *env, jobject thiz,jint taskid){\n        if(g_taskid==taskid){\n            g_digit->stop();\n            g_digit->recyle();\n        }\n        return 0;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_releasedigit", "index": 38, "label": 0}
{"input": "inline\nT poly_eval( const Polynomials& poly, const T& x )\n{\n  typedef typename NumTraits<T>::Real Real;\n\n  if( numext::abs2( x ) <= Real(1) ){\n    return poly_eval_horner( poly, x ); }\n  else\n  {\n    T val=poly[0];\n    T inv_x = T(1)/x;\n    for( DenseIndex i=1; i<poly.size(); ++i ){\n      val = val*inv_x + poly[i]; }\n\n    return numext::pow(x,(T)(poly.size()-1)) * val;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h", "function_name": "poly_eval", "index": 39, "label": 0}
{"input": "jobject JniHelper::callObjectMethod(jobject obj, jmethodID methodId) {\n    if (sJavaVM == nullptr) {\n        LOGE(TAG, \"sJavaVM is nullptr\");\n        return nullptr;\n    }\n\n    JNIEnv *env = nullptr;\n    bool attached = false;\n    switch (sJavaVM->GetEnv((void **) &env, JNI_VERSION_1_4)) {\n        case JNI_OK:\n            break;\n        case JNI_EDETACHED:\n            if (sJavaVM->AttachCurrentThread(&env, nullptr) != 0) {\n                LOGE(TAG, \"Could not attach current thread\");\n            }\n            attached = true;\n            break;\n        case JNI_EVERSION:\n            LOGE(TAG, \"Invalid java version\");\n            break;\n        default:\n            break;\n    }\n\n    jobject ret = nullptr;\n    if (env != nullptr) {\n        ret = env->CallObjectMethod(obj, methodId);\n    }\n\n    if (attached) {\n        sJavaVM->DetachCurrentThread();\n    }\n\n    return ret;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/JniHelper.cpp", "function_name": "JniHelper::callObjectMethod", "index": 40, "label": 0}
{"input": "__device__ inline void atomicReduce(float* output, float accum, SumReducer<float>&) {\n#if __CUDA_ARCH__ >= 300\n  atomicAdd(output, accum);\n#else\n  assert(0 && \"Shouldn't be called on unsupported device\");\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "atomicReduce", "index": 41, "label": 0}
{"input": "void evalProduct(Scalar* buffer) const {\n    if (this->m_j_size == 1) {\n      this->template evalGemv<lhs_inner_dim_contiguous, rhs_inner_dim_contiguous, rhs_inner_dim_reordered, Alignment>(buffer);\n      return;\n    }\n\n    evalGemm<lhs_inner_dim_contiguous, rhs_inner_dim_contiguous, rhs_inner_dim_reordered, Alignment>(buffer);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h", "function_name": "evalProduct", "index": 42, "label": 0}
{"input": "inline\nvoid TransverseMercatorProjector::mapBackward(float u, float v, float &x, float &y)\n{\n    u /= scale;\n    v /= scale;\n\n    float v_ = asinf( sinf(v) / coshf(u) );\n    float u_ = atan2f( sinhf(u), std::cos(v) );\n\n    float cosv = cosf(v_);\n    float x_ = cosv * sinf(u_);\n    float y_ = sinf(v_);\n    float z_ = cosv * cosf(u_);\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "TransverseMercatorProjector::mapBackward", "index": 43, "label": 0}
{"input": "void SparseLUImpl<Scalar,StorageIndex>::countnz(const Index n, Index& nnzL, Index& nnzU, GlobalLU_t& glu)\n{\n nnzL = 0; \n nnzU = (glu.xusub)(n); \n Index nsuper = (glu.supno)(n); \n Index jlen; \n Index i, j, fsupc;\n if (n <= 0 ) return; \n \n for (i = 0; i <= nsuper; i++)\n {\n   fsupc = glu.xsup(i); \n   jlen = glu.xlsub(fsupc+1) - glu.xlsub(fsupc); \n   \n   for (j = fsupc; j < glu.xsup(i+1); j++)\n   {\n     nnzL += jlen; \n     nnzU += j - fsupc + 1; \n     jlen--; \n   }\n }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_Utils.h", "function_name": "SparseLUImpl<Scalar,StorageIndex>::countnz", "index": 44, "label": 0}
{"input": "QuickjsRuntimeInstance::~QuickjsRuntimeInstance() {\n  LOGE(\"LYNX free quickjs runtime start\");\n  if (rt_) {\n    LEPUS_SetGCObserver(rt_, nullptr);\n    LEPUS_FreeRuntime(rt_);\n  }\n  GetFunctionIdContainer().erase(rt_);\n  GetObjectIdContainer().erase(rt_);\n\n  LOGI(\"LYNX free quickjs runtime end. \" << this << \" LEPUSRuntime: \" << rt_);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/jsi/quickjs/quickjs_runtime_wrapper.cc", "function_name": "QuickjsRuntimeInstance::~QuickjsRuntimeInstance", "index": 45, "label": 0}
{"input": "inline Value Value::CreateOpaque(const char* domain, const char* type_name, const T& data_container) {\n  OrtValue* out;\n  ThrowOnError(GetApi().CreateOpaqueValue(domain, type_name, &data_container, sizeof(T), &out));\n  return Value{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Value::CreateOpaque", "index": 46, "label": 0}
{"input": "inline cl_int clEnqueueWaitForEvents(cl_command_queue p0, cl_uint p1, const cl_event* p2) { return clEnqueueWaitForEvents_pfn(p0, p1, p2); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueWaitForEvents", "index": 47, "label": 0}
{"input": "void setMinute(int minute)\n        {\n            if (minute < 0)\n            {\n                throw std::invalid_argument(\"input minute must be greater than zero\");\n            }\n            if (minute > MAX_MINUTE)\n            {\n                throw std::invalid_argument(\"input minute must be less than DateTime::MAX_MINUTE\");\n            }\n            minute_ = minute;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/DateTime/DateTime.hpp", "function_name": "minute", "index": 48, "label": 0}
{"input": "HybridNonLinearSolverSpace::Status\nHybridNonLinearSolver<FunctorType,Scalar>::solveNumericalDiff(FVectorType  &x)\n{\n    HybridNonLinearSolverSpace::Status status = solveNumericalDiffInit(x);\n    if (status==HybridNonLinearSolverSpace::ImproperInputParameters)\n        return status;\n    while (status==HybridNonLinearSolverSpace::Running)\n        status = solveNumericalDiffOneStep(x);\n    return status;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h", "function_name": "HybridNonLinearSolver<FunctorType,Scalar>::solveNumericalDiff", "index": 49, "label": 0}
{"input": "int NcnnModel::doInitModel(){\n    net.clear();\n    net.load_param(m_modelparam.c_str());\n    net.load_model(m_modelbin.c_str());\n    return 0;    \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/aimodel.cpp", "function_name": "NcnnModel::doInitModel", "index": 50, "label": 0}
{"input": "CV_INLINE CvMat cvMat(const CvMat& m)\n{\n#if !defined(CV__ENABLE_C_API_CTORS)\n    CvMat self = CV_STRUCT_INITIALIZER; memcpy(&self, &m, sizeof(self)); return self;\n#else\n    return CvMat(m);\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvMat", "index": 51, "label": 0}
{"input": "void Camera::setPosition(const Vector3f& p)\n{\n    mFrame.position = p;\n    mViewIsUptodate = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::setPosition", "index": 52, "label": 0}
{"input": "inline void SSLClient::load_ca_cert_store(const char *ca_cert,\n                                          std::size_t size) {\n  set_ca_cert_store(ClientImpl::create_ca_cert_store(ca_cert, size));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::load_ca_cert_store", "index": 53, "label": 0}
{"input": "inline void Response::set_content_provider(\n    const std::string &content_type, ContentProviderWithoutLength provider,\n    ContentProviderResourceReleaser resource_releaser) {\n  set_header(\"Content-Type\", content_type);\n  content_length_ = 0;\n  content_provider_ = detail::ContentProviderAdapter(std::move(provider));\n  content_provider_resource_releaser_ = resource_releaser;\n  is_chunked_content_provider_ = false;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Response::set_content_provider", "index": 54, "label": 0}
{"input": "auto createTupleOfAccessors(cl::sycl::handler& cgh, const Evaluator& expr)\n-> decltype(ExtractAccessor<Evaluator>::getTuple(cgh, expr)) {\n  return ExtractAccessor<Evaluator>::getTuple(cgh, expr);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorSyclExtractAccessor.h", "function_name": "createTupleOfAccessors", "index": 55, "label": 0}
{"input": "AutotunedIndexParams(float target_precision = 0.8, float build_weight = 0.01, float memory_weight = 0, float sample_fraction = 0.1)\n    {\n        (*this)[\"algorithm\"] = FLANN_INDEX_AUTOTUNED;\n        \n        (*this)[\"target_precision\"] = target_precision;\n        \n        (*this)[\"build_weight\"] = build_weight;\n        \n        (*this)[\"memory_weight\"] = memory_weight;\n        \n        (*this)[\"sample_fraction\"] = sample_fraction;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/autotuned_index.h", "function_name": "AutotunedIndexParams", "index": 56, "label": 0}
{"input": "__device__ EIGEN_STRONG_INLINE half2 plog1p<half2>(const half2& a) {\n  float a1 = __low2float(a);\n  float a2 = __high2float(a);\n  float r1 = log1pf(a1);\n  float r2 = log1pf(a2);\n  return __floats2half2_rn(r1, r2);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "plog1p", "index": 57, "label": 0}
{"input": "void UIBaseInput::Focus(\n    const lepus::Value& args,\n    base::MoveOnlyClosure<void, int32_t, const lepus::Value&> callback) {\n  NodeManager::Instance().SetAttributeWithNumberValue(\n      input_node_, GetEditingAttributeType(), 1);\n  NodeManager::Instance().SetAttributeWithNumberValue(input_node_,\n                                                      NODE_FOCUS_STATUS, 1);\n  callback(LynxGetUIResult::SUCCESS, lepus::Value());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::Focus", "index": 58, "label": 0}
{"input": "explicit NAPIHandleScope(LEPUSContext *ctx)\n      : env_(nullptr),\n        ctx_(ctx),\n        handle_tail_(nullptr),\n        reset_napi_env(nullptr) {\n    is_gc = ctx_ == nullptr ? false : LEPUS_IsGCMode(ctx_);\n    if (is_gc) {\n      prev_ = reinterpret_cast<NAPIHandleScope *>(GetNapiScope(ctx_));\n      SetNapiScope(ctx_, this);\n    }\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "third_party/quickjs/include/trace-gc.h", "function_name": "NAPIHandleScope", "index": 59, "label": 0}
{"input": "GeneralizedSelfAdjointEigenSolver(const MatrixType& matA, const MatrixType& matB,\n                                      int options = ComputeEigenvectors|Ax_lBx)\n      : Base(matA.cols())\n    {\n      compute(matA, matB, options);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h", "function_name": "GeneralizedSelfAdjointEigenSolver", "index": 60, "label": 0}
{"input": "void StopBenchmarkTiming() {\n  if (g_benchmark_start_time_ns != 0) {\n    g_benchmark_total_time_ns += NanoTime() - g_benchmark_start_time_ns;\n  }\n  g_benchmark_start_time_ns = 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/benchmark_main.cc", "function_name": "StopBenchmarkTiming", "index": 61, "label": 0}
{"input": "void  exColorBlend_LinearBurn(uint8* T,uint8* A,uint8* B)    { ColorBlend_Buffer(T,A,B,LinearBurn);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "exColorBlend_LinearBurn", "index": 62, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline const typename VectorwiseOp<ExpressionType,Direction>::HNormalizedReturnType\nVectorwiseOp<ExpressionType,Direction>::hnormalized() const\n{\n  return HNormalized_Block(_expression(),0,0,\n      Direction==Vertical   ? _expression().rows()-1 : _expression().rows(),\n      Direction==Horizontal ? _expression().cols()-1 : _expression().cols()).cwiseQuotient(\n      Replicate<HNormalized_Factors,\n                Direction==Vertical   ? HNormalized_SizeMinusOne : 1,\n                Direction==Horizontal ? HNormalized_SizeMinusOne : 1>\n        (HNormalized_Factors(_expression(),\n          Direction==Vertical    ? _expression().rows()-1:0,\n          Direction==Horizontal  ? _expression().cols()-1:0,\n          Direction==Vertical    ? 1 : _expression().rows(),\n          Direction==Horizontal  ? 1 : _expression().cols()),\n         Direction==Vertical   ? _expression().rows()-1 : 1,\n         Direction==Horizontal ? _expression().cols()-1 : 1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "VectorwiseOp<ExpressionType,Direction>::hnormalized", "index": 63, "label": 0}
{"input": "void ConcurrentQueue<T>::flush() {\n    queueLock.lock();\n    while (size() > 0) {\n        T data = queue.front();\n        deleteItem(data);\n        queue.pop_front();\n    }\n    queueLock.unlock();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/ConcurrentQueue.h", "function_name": "ConcurrentQueue<T>::flush", "index": 64, "label": 0}
{"input": "inline\ntypename NumTraits<typename Polynomial::Scalar>::Real cauchy_max_bound( const Polynomial& poly )\n{\n  using std::abs;\n  typedef typename Polynomial::Scalar Scalar;\n  typedef typename NumTraits<Scalar>::Real Real;\n\n  eigen_assert( Scalar(0) != poly[poly.size()-1] );\n  const Scalar inv_leading_coeff = Scalar(1)/poly[poly.size()-1];\n  Real cb(0);\n\n  for( DenseIndex i=0; i<poly.size()-1; ++i ){\n    cb += abs(poly[i]*inv_leading_coeff); }\n  return cb + Real(1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h", "function_name": "cauchy_max_bound", "index": 65, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseScalarEqualReturnType\ncwiseEqual(const Scalar& s) const\n{\n  return CwiseScalarEqualReturnType(derived(), Derived::Constant(rows(), cols(), s), internal::scalar_cmp_op<Scalar,Scalar,internal::cmp_EQ>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h", "function_name": "CwiseScalarEqualReturnType\ncwiseEqual", "index": 66, "label": 0}
{"input": "inline AllocatedStringPtr ModelMetadata::GetDomainAllocated(OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().ModelMetadataGetDomain(p_, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ModelMetadata::GetDomainAllocated", "index": 67, "label": 0}
{"input": "static inline std::unique_ptr<Gemma> AllocateGemma(const LoaderArgs& loader,\n                                                   NestedPools& pools) {\n  if (Type::kUnknown == loader.Info().weight ||\n      Model::UNKNOWN == loader.Info().model || loader.tokenizer.path.empty()) {\n    \n    \n    return std::make_unique<Gemma>(loader.weights, pools);\n  }\n  return std::make_unique<Gemma>(loader.tokenizer, loader.weights,\n                                 loader.Info(), pools);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "util/app.h", "function_name": "AllocateGemma", "index": 68, "label": 0}
{"input": "bool WaitForWork(EventCount::Waiter* waiter, Task* t) {\n    eigen_assert(!t->f);\n    \n    \n    ec_.Prewait(waiter);\n    \n    int victim = NonEmptyQueueIndex();\n    if (victim != -1) {\n      ec_.CancelWait(waiter);\n      *t = queues_[victim]->PopBack();\n      return true;\n    }\n    \n    \n    \n      \n      if (NonEmptyQueueIndex() != -1) {\n        \n        \n        \n        \n        \n        \n        blocked_--;\n        return true;\n      }\n      \n      ec_.Notify(true);\n      return false;\n    }\n    ec_.CommitWait(waiter);\n    blocked_--;\n    return true;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h", "function_name": "EventCount::Waiter", "index": 69, "label": 0}
{"input": "NdArray<dtype> normal(const Shape& inShape, dtype inMean = 0, dtype inSigma = 1)\n    {\n        return detail::normal(generator_, inShape, inMean, inSigma);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/normal.hpp", "function_name": "normal", "index": 70, "label": 0}
{"input": "void DGMRES<_MatrixType, _Preconditioner>::dgmres(const MatrixType& mat,const Rhs& rhs, Dest& x,\n              const Preconditioner& precond) const\n{\n  \n  Index n = mat.rows(); \n  DenseVector r0(n); \n  Index nbIts = 0; \n  m_H.resize(m_restart+1, m_restart);\n  m_Hes.resize(m_restart, m_restart);\n  m_V.resize(n,m_restart+1);\n  \n  x = precond.solve(x);\n  r0 = rhs - mat * x; \n  RealScalar beta = r0.norm(); \n  RealScalar normRhs = rhs.norm();\n  m_error = beta/normRhs; \n  if(m_error < m_tolerance)\n    m_info = Success; \n  else\n    m_info = NoConvergence;\n  \n  \n  while (nbIts < m_iterations && m_info == NoConvergence)\n  {\n    dgmresCycle(mat, precond, x, r0, beta, normRhs, nbIts); \n    \n    \n    if (nbIts < m_iterations && m_info == NoConvergence)\n      r0 = rhs - mat * x; \n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/IterativeSolvers/DGMRES.h", "function_name": "DGMRES<_MatrixType, _Preconditioner>::dgmres", "index": 71, "label": 0}
{"input": "uint64_t computeMultiplier(const int log_div, const T divider) {\n#if defined(__SIZEOF_INT128__) && !defined(__CUDA_ARCH__)\n      return static_cast<uint64_t>((static_cast<__uint128_t>(1) << (64+log_div)) / static_cast<__uint128_t>(divider) - (static_cast<__uint128_t>(1) << 64) + 1);\n#else\n      const uint64_t shift = 1ULL << log_div;\n      TensorUInt128<uint64_t, uint64_t> result = TensorUInt128<uint64_t, static_val<0> >(shift, 0) / TensorUInt128<static_val<0>, uint64_t>(divider)\n                                               - TensorUInt128<static_val<1>, static_val<0> >(1, 0)\n                                               + TensorUInt128<static_val<0>, static_val<1> >(1);\n      return static_cast<uint64_t>(result);\n#endif\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIntDiv.h", "function_name": "log_div", "index": 72, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet4cf>(const Packet4cf& a)\n{\n  return pfirst(Packet2cf(_mm256_castps256_ps128(a.v)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/Complex.h", "function_name": "std::complex<float>  pfirst<Packet4cf>", "index": 73, "label": 0}
{"input": "inline void umfpack_report_status(double control[UMFPACK_CONTROL], int status, std::complex<double>)\n{ umfpack_zi_report_status(control, status);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_report_status", "index": 74, "label": 0}
{"input": "void AllocateWithShape(const std::string& name,\n                         absl::Span<const float> weights,\n                         const TensorInfo& tensor_info, float scale) {\n    MatPtrT<Packed> storage(name, &tensor_info);\n    storage.set_scale(scale);\n    storage.SetNumElements(CompressedArrayElements<Packed>(weights.size()));\n    model_memory_.push_back(storage);\n    if (mode_ == CompressorMode::kTEST_ONLY) return;\n    model_memory_.back().Allocate();\n    storage.SetPtr(model_memory_.back());\n    std::string decorated_name = storage.CacheName();\n    compressor_(&storage, decorated_name.c_str(), weights.data());\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "e69bc3bc1c5e9b478662437a3bf7c9a0d9d2eace", "file_path": "compression/python/compression_clif_aux.cc", "function_name": "AllocateWithShape", "index": 75, "label": 0}
{"input": "void UITextArea::FrameDidChanged() {\n  UIBaseInput::FrameDidChanged();\n  NodeManager::Instance().SetAttributeWithNumberValue(input_node_,\n                                                      NODE_POSITION, 0, 0);\n  NodeManager::Instance().SetAttributeWithNumberValue(input_node_, NODE_WIDTH,\n                                                      width_);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_textarea.cc", "function_name": "UITextArea::FrameDidChanged", "index": 76, "label": 0}
{"input": "inline stream_line_reader::stream_line_reader(Stream &strm, char *fixed_buffer,\n                                              size_t fixed_buffer_size)\n    : strm_(strm), fixed_buffer_(fixed_buffer),\n      fixed_buffer_size_(fixed_buffer_size) {}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "stream_line_reader::stream_line_reader", "index": 77, "label": 0}
{"input": "size_t Node(size_t pkg_idx, size_t cluster_idx) const {\n    return topology_.GetCluster(pkg_idx, cluster_idx).Node();\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/threading.h", "function_name": "pkg_idx", "index": 78, "label": 0}
{"input": "bool essentiallyEqual(const std::complex<dtype>& inValue1, const std::complex<dtype>& inValue2) noexcept\n    {\n        return essentiallyEqual(inValue1, inValue2, DtypeInfo<std::complex<dtype>>::epsilon());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Utils/essentiallyEqualComplex.hpp", "function_name": "essentiallyEqual", "index": 79, "label": 0}
{"input": "inline cl_int clEnqueueCopyBuffer(cl_command_queue p0, cl_mem p1, cl_mem p2, size_t p3, size_t p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueCopyBuffer", "index": 80, "label": 0}
{"input": "EIGEN_DEVICE_FUNC \ninline void compute_inverse_size2_helper(\n    const MatrixType& matrix, const typename ResultType::Scalar& invdet,\n    ResultType& result)\n{\n  result.coeffRef(0,0) =  matrix.coeff(1,1) * invdet;\n  result.coeffRef(1,0) = -matrix.coeff(1,0) * invdet;\n  result.coeffRef(0,1) = -matrix.coeff(0,1) * invdet;\n  result.coeffRef(1,1) =  matrix.coeff(0,0) * invdet;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/InverseImpl.h", "function_name": "compute_inverse_size2_helper", "index": 81, "label": 0}
{"input": "NdArray<dtype> randN(const Shape& inShape)\n    {\n        return detail::randN<dtype>(generator_, inShape);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/randN.hpp", "function_name": "randN", "index": 82, "label": 0}
{"input": "inline void Op::Invoke(const OrtKernelContext* context,\n                       const OrtValue* const* input_values,\n                       size_t input_count,\n                       OrtValue* const* output_values,\n                       size_t output_count) {\n  Ort::ThrowOnError(GetApi().InvokeOp(context, p_, input_values, static_cast<int>(input_count),\n                                      output_values, static_cast<int>(output_count)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Op::Invoke", "index": 83, "label": 0}
{"input": "inline\nbool companion<_Scalar,_Deg>::balanced( Scalar colNorm, Scalar rowNorm,\n    bool& isBalanced, Scalar& colB, Scalar& rowB )\n{\n  if( Scalar(0) == colNorm || Scalar(0) == rowNorm ){ return true; }\n  else\n  {\n    \n    \n    \n    \n    \n    rowB = rowNorm / radix<Scalar>();\n    colB = Scalar(1);\n    const Scalar s = colNorm + rowNorm;\n\n    while (colNorm < rowB)\n    {\n      colB *= radix<Scalar>();\n      colNorm *= radix2<Scalar>();\n    }\n\n    rowB = rowNorm * radix<Scalar>();\n\n    while (colNorm >= rowB)\n    {\n      colB /= radix<Scalar>();\n      colNorm /= radix2<Scalar>();\n    }\n\n    \n    if ((rowNorm + colNorm) < Scalar(0.95) * s * colB)\n    {\n      isBalanced = false;\n      rowB = Scalar(1) / colB;\n      return false;\n    }\n    else{\n      return true; }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/Companion.h", "function_name": "companion<_Scalar,_Deg>::balanced", "index": 84, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const SquareReturnType\nsquare() const\n{\n  return SquareReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "SquareReturnType\nsquare", "index": 85, "label": 0}
{"input": "static HWY_INLINE void FillC(const IndexRange& range_mc,\n                               const IndexRange& range_nc, const MMArgs& args,\n                               const RowPtr<TC>& C) {\n    size_t row_c = range_mc.begin();\n    if (args.add) {\n      constexpr bool kAdd = true;\n      if (range_mc.Num() >= 4) {\n        for (; row_c <= range_mc.end() - 4; row_c += 4) {\n          Do4Rows<kAdd>(row_c, range_nc, args, C);\n        }\n      }\n      for (; row_c < range_mc.end(); ++row_c) {\n        Do1Row<kAdd>(row_c, range_nc, args, C);\n      }\n    } else {\n      constexpr bool kAdd = false;\n      if (range_mc.Num() >= 4) {\n        for (; row_c <= range_mc.end() - 4; row_c += 4) {\n          Do4Rows<kAdd>(row_c, range_nc, args, C);\n        }\n      }\n      for (; row_c < range_mc.end(); ++row_c) {\n        Do1Row<kAdd>(row_c, range_nc, args, C);\n      }\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "2bdf26d81d1a414faeeaa330f21f0d21fa0abefb", "file_path": "ops/matmul-inl.h", "function_name": "FillC", "index": 86, "label": 0}
{"input": "inline cv::String findFileOrKeep(const cv::String& relative_path, bool silentMode)\n{\n    cv::String res = findFile(relative_path, false, silentMode);\n    if (res.empty())\n        return relative_path;\n    return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/utility.hpp", "function_name": "findFileOrKeep", "index": 87, "label": 0}
{"input": "inline void manage_caching_sizes(Action action, std::ptrdiff_t* l1, std::ptrdiff_t* l2, std::ptrdiff_t* l3)\n{\n  static CacheSizes m_cacheSizes;\n\n  if(action==SetAction)\n  {\n    \n    eigen_internal_assert(l1!=0 && l2!=0);\n    m_cacheSizes.m_l1 = *l1;\n    m_cacheSizes.m_l2 = *l2;\n    m_cacheSizes.m_l3 = *l3;\n  }\n  else if(action==GetAction)\n  {\n    eigen_internal_assert(l1!=0 && l2!=0);\n    *l1 = m_cacheSizes.m_l1;\n    *l2 = m_cacheSizes.m_l2;\n    *l3 = m_cacheSizes.m_l3;\n  }\n  else\n  {\n    eigen_internal_assert(false);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "manage_caching_sizes", "index": 88, "label": 0}
{"input": "static void test_resize()\n{\n  Tensor<int, 3> epsilon;\n  epsilon.resize(2,3,7);\n  VERIFY_IS_EQUAL(epsilon.dimension(0), 2);\n  VERIFY_IS_EQUAL(epsilon.dimension(1), 3);\n  VERIFY_IS_EQUAL(epsilon.dimension(2), 7);\n  VERIFY_IS_EQUAL(epsilon.size(), 2*3*7);\n\n  const int* old_data = epsilon.data();\n  epsilon.resize(3,2,7);\n  VERIFY_IS_EQUAL(epsilon.dimension(0), 3);\n  VERIFY_IS_EQUAL(epsilon.dimension(1), 2);\n  VERIFY_IS_EQUAL(epsilon.dimension(2), 7);\n  VERIFY_IS_EQUAL(epsilon.size(), 2*3*7);\n  VERIFY_IS_EQUAL(epsilon.data(), old_data);\n\n  epsilon.resize(3,5,7);\n  VERIFY_IS_EQUAL(epsilon.dimension(0), 3);\n  VERIFY_IS_EQUAL(epsilon.dimension(1), 5);\n  VERIFY_IS_EQUAL(epsilon.dimension(2), 7);\n  VERIFY_IS_EQUAL(epsilon.size(), 3*5*7);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_simple.cpp", "function_name": "test_resize", "index": 89, "label": 0}
{"input": "Napi::Object LepusComponent::GetData() {\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, LEPUS_COMPONENT_GET_DATA);\n  if (tasm_ == nullptr) {\n    LOGE(\"LepusComponent::GetData failed since tasm is null.\");\n    return Napi::Object::New(NapiEnv());\n  }\n\n  auto* component = GetComponentWithID(tasm_, component_id_);\n  if (component == nullptr) {\n    LOGE(\"LepusComponent::GetData failed since can not find component.\");\n    return Napi::Object::New(NapiEnv());\n  }\n\n  return ValueConverter::ConvertLepusValueToNapiObject(NapiEnv(),\n                                                       component->GetData());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/renderer/worklet/lepus_component.cc", "function_name": "LepusComponent::GetData", "index": 90, "label": 0}
{"input": "inline Index RealQZ<MatrixType>::findSmallSubdiagEntry(Index iu)\n    {\n      using std::abs;\n      Index res = iu;\n      while (res > 0)\n      {\n        Scalar s = abs(m_S.coeff(res-1,res-1)) + abs(m_S.coeff(res,res));\n        if (s == Scalar(0.0))\n          s = m_normOfS;\n        if (abs(m_S.coeff(res,res-1)) < NumTraits<Scalar>::epsilon() * s)\n          break;\n        res--;\n      }\n      return res;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealQZ.h", "function_name": "RealQZ<MatrixType>::findSmallSubdiagEntry", "index": 91, "label": 0}
{"input": "void ListAnchorManager::AdjustAnchorInfoAfterLayout(AnchorInfo& anchor_info) {\n  if (IsValidInitialScrollIndex()) {\n    \n    \n    float start =\n        list_orientation_helper_->GetDecoratedStart(anchor_info.item_holder_);\n    list_layout_manager_->SetContentOffset(start, false);\n    anchor_info.start_offset_ = start;\n  } else if (scrolling_info_.IsValidNonSmoothScrollTarget()) {\n    \n    \n    float start =\n        list_orientation_helper_->GetDecoratedStart(anchor_info.item_holder_);\n    list_layout_manager_->SetContentOffset(start, false);\n    anchor_info.start_offset_ = start;\n  } else {\n    \n    \n    \n    \n    \n    float coordinate =\n        list_orientation_helper_->GetDecoratedStart(anchor_info.item_holder_);\n    float content_offset = list_layout_manager_->content_offset();\n    list_layout_manager_->SetContentOffset(\n        content_offset + coordinate - anchor_info.start_offset_, false);\n    \n    anchor_info.start_offset_ = coordinate;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "1434d50165e4c184f12997d6b58367438238f5e6", "file_path": "core/renderer/ui_component/list/list_anchor_manager.cc", "function_name": "ListAnchorManager::AdjustAnchorInfoAfterLayout", "index": 92, "label": 0}
{"input": "void map_static_methods(const VectorType& m)\n{\n  typedef typename VectorType::Scalar Scalar;\n\n  Index size = m.size();\n\n  Scalar* array1 = internal::aligned_new<Scalar>(size);\n  Scalar* array2 = internal::aligned_new<Scalar>(size);\n  Scalar* array3 = new Scalar[size+1];\n  Scalar* array3unaligned = internal::UIntPtr(array3)%EIGEN_MAX_ALIGN_BYTES == 0 ? array3+1 : array3;\n\n  VectorType::MapAligned(array1, size) = VectorType::Random(size);\n  VectorType::Map(array2, size) = VectorType::Map(array1, size);\n  VectorType::Map(array3unaligned, size) = VectorType::Map(array1, size);\n  VectorType ma1 = VectorType::Map(array1, size);\n  VectorType ma2 = VectorType::MapAligned(array2, size);\n  VectorType ma3 = VectorType::Map(array3unaligned, size);\n  VERIFY_IS_EQUAL(ma1, ma2);\n  VERIFY_IS_EQUAL(ma1, ma3);\n\n  internal::aligned_delete(array1, size);\n  internal::aligned_delete(array2, size);\n  delete[] array3;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/mapped_matrix.cpp", "function_name": "map_static_methods", "index": 93, "label": 0}
{"input": "static void test_assign_of_const_tensor()\n{\n  Tensor<int, 3> random(2,3,7);\n  random.setRandom();\n\n  TensorMap<Tensor<const int, 3> > constant1(random.data(), 2, 3, 7);\n  TensorMap<const Tensor<int, 3> > constant2(random.data(), 2, 3, 7);\n  const TensorMap<Tensor<int, 3> > constant3(random.data(), 2, 3, 7);\n\n  Tensor<int, 2> result1 = constant1.chip(0, 2);\n  Tensor<int, 2> result2 = constant2.chip(0, 2);\n  Tensor<int, 2> result3 = constant3.chip(0, 2);\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      VERIFY_IS_EQUAL((result1(i,j)), random(i,j,0));\n      VERIFY_IS_EQUAL((result2(i,j)), random(i,j,0));\n      VERIFY_IS_EQUAL((result3(i,j)), random(i,j,0));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_const.cpp", "function_name": "test_assign_of_const_tensor", "index": 94, "label": 0}
{"input": "inline int umfpack_solve( int sys, const int Ap[], const int Ai[], const std::complex<double> Ax[],\n                          std::complex<double> X[], const std::complex<double> B[], void *Numeric,\n                          const double Control[UMFPACK_CONTROL], double Info[UMFPACK_INFO])\n{\n  return umfpack_zi_solve(sys,Ap,Ai,&numext::real_ref(Ax[0]),0,&numext::real_ref(X[0]),0,&numext::real_ref(B[0]),0,Numeric,Control,Info);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_solve", "index": 95, "label": 0}
{"input": "void JsCacheManager::RequestCacheGeneration(\n    const std::string &template_url,\n    std::vector<std::unique_ptr<CacheGenerator>> &&generators, bool force,\n    std::unique_ptr<BytecodeGenerateCallback> callback) {\n  LOGI(\"RequestCacheGeneration template_url: '\" << template_url);\n  if (!IsCacheEnabledForTemplate(template_url)) {\n    LOGI(\"bytecode disabled\");\n    if (callback) {\n      (*callback)(\"disabled\", {});\n    }\n    return;\n  }\n\n  PostTaskBackground(TaskInfo(\n      force ? TaskInfo::TaskType::GENERATE_CACHE\n            : TaskInfo::TaskType::GENERATE_CACHE_IF_NEEDED,\n      template_url, std::nullopt, std::move(generators), std::move(callback)));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/js_cache_manager.cc", "function_name": "JsCacheManager::RequestCacheGeneration", "index": 96, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet8i pcast<Packet8f, Packet8i>(const Packet8f& a) {\n  return _mm256_cvtps_epi32(a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/TypeCasting.h", "function_name": "Packet8i", "index": 97, "label": 0}
{"input": "inline void Value::FillStringTensor(const char* const* s, size_t s_len) {\n  ThrowOnError(GetApi().FillStringTensor(p_, s, s_len));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::FillStringTensor", "index": 98, "label": 0}
{"input": "inline bool test_isApproxWithRef(const Scalar& a, const Scalar& b, const ScalarRef& ref)\n{\n  return test_isApprox(a+ref, b+ref);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "test_isApproxWithRef", "index": 99, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet2d vec_splat_dbl<1>(Packet2d& a)\n{\n  return reinterpret_cast<Packet2d>(vec_perm(a, a, p16uc_PSET64_LO));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h", "function_name": "vec_splat_dbl", "index": 100, "label": 0}
{"input": "inline v_float64x2 v_reinterpret_as_f64(const v_float32x4& a) {return v_float64x2(_mm_castps_pd(a.val)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse.hpp", "function_name": "v_reinterpret_as_f64", "index": 101, "label": 0}
{"input": "static void test_basic_eventcount()\n{\n  MaxSizeVector<EventCount::Waiter> waiters(1);\n  waiters.resize(1);\n  EventCount ec(waiters);\n  EventCount::Waiter& w = waiters[0];\n  ec.Notify(false);\n  ec.Prewait(&w);\n  ec.Notify(true);\n  ec.CommitWait(&w);\n  ec.Prewait(&w);\n  ec.CancelWait(&w);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_eventcount.cpp", "function_name": "test_basic_eventcount", "index": 102, "label": 0}
{"input": "static HWY_INLINE void FillC(const IndexRange& range_mc,\n                               const IndexRange& range_nc, const MMArgs& args) {\n    size_t row_c = range_mc.begin();\n    if (args.add) {\n      constexpr bool kAdd = true;\n      if (range_mc.Num() >= 4) {\n        for (; row_c <= range_mc.end() - 4; row_c += 4) {\n          Do4Rows<kAdd>(row_c, range_nc, args);\n        }\n      }\n      for (; row_c < range_mc.end(); ++row_c) {\n        Do1Row<kAdd>(row_c, range_nc, args);\n      }\n    } else {\n      constexpr bool kAdd = false;\n      if (range_mc.Num() >= 4) {\n        for (; row_c <= range_mc.end() - 4; row_c += 4) {\n          Do4Rows<kAdd>(row_c, range_nc, args);\n        }\n      }\n      for (; row_c < range_mc.end(); ++row_c) {\n        Do1Row<kAdd>(row_c, range_nc, args);\n      }\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "range_mc", "index": 103, "label": 0}
{"input": "void ValueImpl<T>::FillSparseTensorBlockSparse(const OrtMemoryInfo* data_mem_info,\n                                               const OrtSparseValuesParam& values,\n                                               const Shape& indices_shape,\n                                               const int32_t* indices_data) {\n  ThrowOnError(GetApi().FillSparseTensorBlockSparse(this->p_, data_mem_info, values.values_shape, values.values_shape_len, values.data.p_data,\n                                                    indices_shape.shape, indices_shape.shape_len,\n                                                    indices_data));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ValueImpl<T>::FillSparseTensorBlockSparse", "index": 104, "label": 0}
{"input": "NdArray<std::complex<dtype>> multiply(dtype value, const NdArray<std::complex<dtype>>& inArray)\n    {\n        return value * inArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/multiply.hpp", "function_name": "multiply", "index": 105, "label": 0}
{"input": "void mem_expand(IndexVector& lsub, Index& nextl, Index chmark)\n  {\n    if (nextl >= m_glu.nzlmax)\n      m_luImpl.memXpand(lsub, m_glu.nzlmax, nextl, LSUB, m_glu.num_expansions); \n    if (chmark != (m_jcol-1)) m_jsuper_ref = emptyIdxLU;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_column_dfs.h", "function_name": "chmark", "index": 106, "label": 0}
{"input": "void Image::Map(const std::string_view& name, size_t base, uint32_t size, uint8_t flags, uint8_t* data)\n{\n    sections.insert({ std::string(name), this->base + base,\n        size, static_cast<SectionFlags>(flags), data });\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "847842cd28a2427b9db520d2aaa7416e5dec3822", "file_path": "PowerUtils/image.cpp", "function_name": "Image::Map", "index": 107, "label": 0}
{"input": "static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename LuType::Scalar> &)\n  {\n    dst = src.nestedExpression().solve(MatrixType::Identity(src.rows(), src.cols()));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/PartialPivLU.h", "function_name": "internal::assign_op<typename DstXprType::Scalar,typename LuType::Scalar>", "index": 108, "label": 0}
{"input": "inline void IoBinding::BindOutput(const char* name, const MemoryInfo& mem_info) {\n  ThrowOnError(GetApi().BindOutputToDevice(p_, name, mem_info));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "IoBinding::BindOutput", "index": 109, "label": 0}
{"input": "inline cl_int clSetKernelArg(cl_kernel p0, cl_uint p1, size_t p2, const void* p3) { return clSetKernelArg_pfn(p0, p1, p2, p3); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clSetKernelArg", "index": 110, "label": 0}
{"input": "inline Index nonZeros() const {\n        return m_data.diagSize() + m_data.upperSize() + m_data.lowerSize();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "nonZeros", "index": 111, "label": 0}
{"input": "DistIndex(DistanceType dist, unsigned int index) :\n            dist_(dist), index_(index)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "DistIndex", "index": 112, "label": 0}
{"input": "inline mpreal copysign(const mpreal& x, const  mpreal& y, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal rop(0, mpfr_get_prec(x.mpfr_ptr()));\n    mpfr_setsign(rop.mpfr_ptr(), x.mpfr_srcptr(), mpfr_signbit(y.mpfr_srcptr()), rnd_mode);\n    return rop;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "copysign", "index": 113, "label": 0}
{"input": "T get_param(const IndexParams& params, cv::String name)\n{\n    IndexParams::const_iterator it = params.find(name);\n    if (it != params.end()) {\n        return it->second.cast<T>();\n    }\n    else {\n        FLANN_THROW(cv::Error::StsBadArg, cv::String(\"Missing parameter '\")+name+cv::String(\"' in the parameters given\"));\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/params.h", "function_name": "get_param", "index": 114, "label": 0}
{"input": "static void test_vectorized_cast()\n{\n  Tensor<int, 2> itensor(20,30);\n  itensor = itensor.random() / 1000;\n  Tensor<float, 2> ftensor(20,30);\n  ftensor.setRandom();\n  Tensor<double, 2> dtensor(20,30);\n  dtensor.setRandom();\n\n  ftensor = itensor.cast<float>();\n  dtensor = itensor.cast<double>();\n\n  for (int i = 0; i < 20; ++i) {\n    for (int j = 0; j < 30; ++j) {\n      VERIFY_IS_EQUAL(itensor(i,j), static_cast<int>(ftensor(i,j)));\n      VERIFY_IS_EQUAL(dtensor(i,j), static_cast<double>(ftensor(i,j)));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_casts.cpp", "function_name": "test_vectorized_cast", "index": 115, "label": 0}
{"input": "Tuple<Args1..., Args2...> append_base(Tuple<Args1...> t1, Tuple<Args2...> t2, IndexList<I1...>, IndexList<I2...>) {\n  return utility::tuple::make_tuple(get<I1>(t1)...,get<I2>(t2)...);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorSyclTuple.h", "function_name": "append_base", "index": 116, "label": 0}
{"input": "linspaced_op(const Scalar& low, const Scalar& high, Index num_steps)\n    : impl((num_steps==1 ? high : low),high,num_steps)\n  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/functors/NullaryFunctors.h", "function_name": "linspaced_op", "index": 117, "label": 0}
{"input": "int decode(std::bitset<EncodedBits> encodedBits, std::bitset<DataBits>& decodedBits)\n    {\n        const auto numParityBits = detail::checkBitsConsistent<DataBits, EncodedBits>();\n\n        \n        decodedBits = detail::extractData<DataBits>(encodedBits);\n\n        \n        const auto overallExpected = detail::calculateParity(encodedBits);\n        const auto overallActual   = encodedBits[EncodedBits - 1];\n        const auto overallCorrect  = overallExpected == overallActual;\n\n        \n            encodedBits.flip(indexOfError - 1);\n            decodedBits = detail::extractData<DataBits>(encodedBits);\n            return 1;\n        }\n\n        return 0;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/hammingEncode.hpp", "function_name": "decode", "index": 118, "label": 0}
{"input": "vuint8mf2_t(const uchar* ptr)\n    {\n        for (int i = 0; i < 8; ++i)\n        {\n            val[i] = ptr[i];\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv.hpp", "function_name": "vuint8mf2_t", "index": 119, "label": 0}
{"input": "DualQuat<T> DualQuat<T>::createFromAffine3(const Affine3<T> &R)\n{\n    return createFromMat(R.matrix);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::createFromAffine3", "index": 120, "label": 0}
{"input": "void wav_read_close(void* obj) {\n\tstruct wav_reader* wr = (struct wav_reader*) obj;\n\tif (wr->wav != stdin)\n\t\tfclose(wr->wav);\n\tfree(wr);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wavreader.cpp", "function_name": "wav_read_close", "index": 121, "label": 0}
{"input": "void Animation::CreateEventAndSend(const base::String& event) {\n  if (element_->event_map().find(event) == element_->event_map().end() &&\n      element_->lepus_event_map().find(event) ==\n          element_->lepus_event_map().end() &&\n      element_->global_bind_event_map().find(event) ==\n          element_->global_bind_event_map().end()) {\n    return;\n  }\n  auto dict = lepus::Dictionary::Create();\n  BASE_STATIC_STRING_DECL(kNewAnimator, \"new_animator\");\n  BASE_STATIC_STRING_DECL(kAnimationType, \"animation_type\");\n  BASE_STATIC_STRING_DECL(kAnimationName, \"animation_name\");\n  dict->SetValue(kNewAnimator, true);\n  dict->SetValue(kAnimationType,\n                 is_transition_ ? BASE_STATIC_STRING(kTransitionAnimationName)\n                                : BASE_STATIC_STRING(kKeyframeAnimationName));\n  dict->SetValue(kAnimationName, this->animation_data()->name);\n  element_->element_manager()->SendAnimationEvent(\n      event.str(), element_->impl_id(), lepus::Value(std::move(dict)));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b03d25564e4fc065d5b8e568dc8c0009a570d83b", "file_path": "core/animation/animation.cc", "function_name": "Animation::CreateEventAndSend", "index": 122, "label": 0}
{"input": "int GDigit::drawpic(const char* picfn){\n    if(!m_status)return -1000;\n    std::string picfile(picfn);\n    JMat* mat_pic = NULL;\n    frameSource->popVidRecyle(&mat_pic);\n    if(!mat_pic)mat_pic = new JMat();\n    int rst = mat_pic->load(picfn);\n    if(rst){\n        delete mat_pic;\n        return rst*10000;\n    }\n\n    MediaData md(mat_pic);\n    frameSource->pushVidFrame(&md);\n\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::drawpic", "index": 123, "label": 0}
{"input": "auto det(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        const Shape inShape = inArray.shape();\n        if (!inShape.issquare())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"input array must be square.\");\n        }\n\n        return detail::det(inArray, inShape.rows);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Linalg/det.hpp", "function_name": "det", "index": 124, "label": 0}
{"input": "inline bool\nprocess_client_socket_ssl(SSL *ssl, socket_t sock, time_t read_timeout_sec,\n                          time_t read_timeout_usec, time_t write_timeout_sec,\n                          time_t write_timeout_usec, T callback) {\n  SSLSocketStream strm(sock, ssl, read_timeout_sec, read_timeout_usec,\n                       write_timeout_sec, write_timeout_usec);\n  return callback(strm);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "process_client_socket_ssl", "index": 125, "label": 0}
{"input": "inline std::vector<T> list2vector(const boost::python::list& inList)\n        {\n            return std::vector<T>(boost::python::stl_input_iterator<T>(inList), boost::python::stl_input_iterator<T>());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/BoostInterface.hpp", "function_name": "list2vector", "index": 126, "label": 0}
{"input": "void test_gmres()\n{\n  CALL_SUBTEST_1(test_gmres_T<double>());\n  CALL_SUBTEST_2(test_gmres_T<std::complex<double> >());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/gmres.cpp", "function_name": "test_gmres", "index": 127, "label": 0}
{"input": "copy_through_move_t<util::decay_t<T>> copy_through_move(T&& t){\n        return std::forward<T>(t);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/copy_through_move.hpp", "function_name": "copy_through_move", "index": 128, "label": 0}
{"input": "lynx_api_status lynx_value_get_named_property(lynx_api_env env,\n                                              lynx_value object,\n                                              const char* utf8name,\n                                              lynx_value* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_get_named_property", "index": 129, "label": 0}
{"input": "inline RandomSetter(SparseMatrixType& target)\n      : mp_target(&target)\n    {\n      const Index outerSize = SwapStorage ? target.innerSize() : target.outerSize();\n      const Index innerSize = SwapStorage ? target.outerSize() : target.innerSize();\n      m_outerPackets = outerSize >> OuterPacketBits;\n      if (outerSize&OuterPacketMask)\n        m_outerPackets += 1;\n      m_hashmaps = new HashMapType[m_outerPackets];\n      \n      Index aux = innerSize - 1;\n      m_keyBitsOffset = 0;\n      while (aux)\n      {\n        ++m_keyBitsOffset;\n        aux = aux >> 1;\n      }\n      KeyType ik = (1<<(OuterPacketBits+m_keyBitsOffset));\n      for (Index k=0; k<m_outerPackets; ++k)\n        MapTraits<ScalarWrapper>::setInvalidKey(m_hashmaps[k],ik);\n\n      \n      for (Index j=0; j<mp_target->outerSize(); ++j)\n        for (typename SparseMatrixType::InnerIterator it(*mp_target,j); it; ++it)\n          (*this)(TargetRowMajor?j:it.index(), TargetRowMajor?it.index():j) = it.value();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h", "function_name": "RandomSetter", "index": 130, "label": 0}
{"input": "InnerLowerIterator(const SkylineMatrix& mat, Index outer)\n    : m_matrix(mat),\n    m_outer(outer),\n    m_id(_Options == RowMajor ? mat.m_rowStartIndex[outer] : mat.m_colStartIndex[outer] + 1),\n    m_start(m_id),\n    m_end(_Options == RowMajor ? mat.m_rowStartIndex[outer + 1] : mat.m_colStartIndex[outer + 1] + 1) {\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "InnerLowerIterator", "index": 131, "label": 0}
{"input": "GAPI_EXPORTS_W cv::Ptr<IStreamSource> inline make_onevpl_src(Args&&... args)\n{\n    return make_src<onevpl::GSource>(std::forward<Args>(args)...);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/onevpl/source.hpp", "function_name": "cv::Ptr<IStreamSource> inline make_onevpl_src", "index": 132, "label": 0}
{"input": "CV_WRAP static inline\nString dumpSizeT(size_t argument)\n{\n    std::ostringstream oss(\"size_t: \", std::ios::ate);\n    oss << argument;\n    return oss.str();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpSizeT", "index": 133, "label": 0}
{"input": "inline\nVec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, _T2 alpha, Matx_ScaleOp op)\n    : Matx<_Tp, cn, 1>(a, alpha, op) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Vec<_Tp, cn>::Vec", "index": 134, "label": 0}
{"input": "typename MatrixType::RealScalar\nCompleteOrthogonalDecomposition<MatrixType>::logAbsDeterminant() const {\n  return m_cpqr.logAbsDeterminant();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/CompleteOrthogonalDecomposition.h", "function_name": "CompleteOrthogonalDecomposition<MatrixType>::logAbsDeterminant", "index": 135, "label": 0}
{"input": "CV_INLINE CvTermCriteria cvTermCriteria(const cv::TermCriteria& t) { return cvTermCriteria(t.type, t.maxCount, t.epsilon); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvTermCriteria cvTermCriteria", "index": 136, "label": 0}
{"input": "SensecapWatcher() {\n        ESP_LOGI(TAG, \"Initialize Sensecap Watcher\");\n        InitializePowerSaveTimer();\n        InitializeI2c();\n        InitializeSpi();\n        InitializeExpander();\n        InitializeCmd();  \n        InitializeButton();\n        InitializeKnob();\n        Initializespd2010Display();\n        InitializeCamera();\n        InitializeIot();\n        GetBacklight()->RestoreBrightness();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "5c51fbc2f874fbe686a6eed841bb5c972a51ce16", "file_path": "main/boards/sensecap-watcher/sensecap_watcher.cc", "function_name": "SensecapWatcher", "index": 137, "label": 0}
{"input": "int NetCurl::checkwav(){\n    int rst = m_wavmat->isready();\n    if(rst){\n        LOGD(\"====tooken gogogo %d \\n\",rst);\n        if(m_loop) m_loop->post(rst,m_wavmat);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/netcurl.cpp", "function_name": "NetCurl::checkwav", "index": 138, "label": 0}
{"input": "inline cl_int clGetDeviceIDs(cl_platform_id p0, cl_device_type p1, cl_uint p2, cl_device_id* p3, cl_uint* p4) { return clGetDeviceIDs_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetDeviceIDs", "index": 139, "label": 0}
{"input": "inline void umfpack_defaults(double control[UMFPACK_CONTROL], std::complex<double>)\n{ umfpack_zi_defaults(control); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_defaults", "index": 140, "label": 0}
{"input": "MMPerKey(size_t max_packages, size_t N, size_t nr, MMParallel& parallel)\n      : ranges_np(parallel.RangesOfNP(max_packages, N, nr)) {}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "MMPerKey", "index": 141, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<Reducer, const Dims, const Derived>\n    reduce(const Dims& dims, const Reducer& reducer) const {\n      return TensorReductionOp<Reducer, const Dims, const Derived>(derived(), dims, reducer);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<Reducer, const Dims, const Derived>\n    reduce", "index": 142, "label": 0}
{"input": "void GRender::onRenderingChanged(int state) {\n    LOGI(TAG, \"onRenderingChanged %d\", state);\n    if (state == NOTIFY_END) {\n        if (isEof) {\n            messageSource->pushMessage(MSG_DOMAIN_COMPLETE, 0, 0);\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::onRenderingChanged", "index": 143, "label": 0}
{"input": "void Camera::localRotate(const Quaternionf& q)\n{\n    float dist = (position() - mTarget).norm();\n    setOrientation(orientation() * q);\n    mTarget = position() + dist * direction();\n    mViewIsUptodate = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::localRotate", "index": 144, "label": 0}
{"input": "inline const mpreal urandom (gmp_randstate_t& state, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal x;\n    mpfr_urandom(x.mpfr_ptr(), state, rnd_mode);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "urandom", "index": 145, "label": 0}
{"input": "NdArray<bool> operator!(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        NdArray<bool> returnArray(inArray.shape());\n\n        const auto function = [](dtype value) -> dtype { return !value; };\n\n        stl_algorithms::transform(inArray.cbegin(), inArray.cend(), returnArray.begin(), function);\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayOperators.hpp", "function_name": "operator!", "index": 146, "label": 0}
{"input": "inline AllocatedStringPtr ModelMetadata::GetGraphDescriptionAllocated(OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().ModelMetadataGetGraphDescription(p_, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ModelMetadata::GetGraphDescriptionAllocated", "index": 147, "label": 0}
{"input": "WebIDL::ExceptionOr<void> OffscreenCanvas::set_height(WebIDL::UnsignedLong value)\n{\n    Gfx::IntSize current_size = bitmap_size_for_canvas();\n    current_size.set_height(value);\n\n    set_new_bitmap_size(current_size);\n    reset_context_to_default_state();\n    return {};\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::set_height", "index": 148, "label": 0}
{"input": "const SparseView<Derived> MatrixBase<Derived>::sparseView(const Scalar& reference,\n                                                          const typename NumTraits<Scalar>::Real& epsilon) const\n{\n  return SparseView<Derived>(derived(), reference, epsilon);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseView.h", "function_name": "MatrixBase<Derived>::sparseView", "index": 149, "label": 0}
{"input": "inline _Tpvec v_rotate_left(const _Tpvec &a, const _Tpvec &b)\n{\n    using namespace hal_wasm_internal;\n    enum { imm2 = ((_Tpvec::nlanes - imm) * sizeof(typename _Tpvec::lane_type)) };\n    return _Tpvec(v_wasm_palignr_u8<imm2>(b.val, a.val));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_rotate_left", "index": 150, "label": 0}
{"input": "const CoeffReturnType coeff(Index rowId, Index colId) const\n    {\n      return m_xpr.coeff(rowId + m_startRow.value(), colId + m_startCol.value());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Block.h", "function_name": "rowId", "index": 151, "label": 0}
{"input": "v_int16x8(short v0, short v1, short v2, short v3, short v4, short v5, short v6, short v7)\n    {\n        short v[] = {v0, v1, v2, v3, v4, v5, v6, v7};\n        val = wasm_v128_load(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_int16x8", "index": 152, "label": 0}
{"input": "int  GhMat::upzero(GpMat mat ,void* stream){\n    if(m_dev!=mat->m_dev)return -1;\n    if((m_height!=mat->m_height)||(m_width!=mat->m_width))return -2;\n    ppl::cv::cuda::ConvertTo<float,float,3>((cudaStream_t)stream,m_height,m_width,m_stride,(const float*)m_buf, mat->m_stride,(float*)mat->m_buf, 0.5f,0.5f);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/cuda/kmatcuda.cpp", "function_name": "GhMat::upzero", "index": 153, "label": 0}
{"input": "inline size_t ClientImpl::is_socket_open() const {\n  std::lock_guard<std::mutex> guard(socket_mutex_);\n  return socket_.is_open();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::is_socket_open", "index": 154, "label": 0}
{"input": "void print_size(const EigenBase<Derived>& b)\n{\n  std::cout << \"size (rows, cols): \" << b.size() << \" (\" << b.rows()\n            << \", \" << b.cols() << \")\" << std::endl;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/function_taking_eigenbase.cpp", "function_name": "print_size", "index": 155, "label": 0}
{"input": "HWY_NOINLINE void SumHeads(const size_t num_interleaved) {\n    PROFILER_ZONE(\"Gen.Attention.SumHeads\");\n    \n    \n    \n    \n    \n    HWY_DASSERT(layer_config_.model_dim > 0);\n    HWY_DASSERT(layer_config_.heads > 0);\n    HWY_DASSERT(layer_config_.qkv_dim > 0);\n    HWY_DASSERT(layer_weights_.att_weights.data() != nullptr);\n    HWY_DASSERT(activations_.att_out.All() != nullptr);\n    HWY_DASSERT(activations_.att_sums.All() != nullptr);\n\n    const float* add =\n        layer_weights_.layer_config.softmax_attn_output_biases\n            ? layer_weights_.attention_output_biases.data_scale1()\n            : nullptr;\n    MatMul(ConstMatFromBatch(num_interleaved, activations_.att_out),\n           ConstMatFromWeights(layer_weights_.att_weights), add,\n           *activations_.env, RowPtrFromBatch(activations_.att_sums));\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "gemma/gemma-inl.h", "function_name": "num_interleaved", "index": 156, "label": 0}
{"input": "MMPerPackage(const ConstMat<TA>& A, const MMArgs& args,\n               const MMConfig& config, size_t pkg_idx,\n               const IndexRange& range_np)\n      : args_(args),\n        pkg_idx_(pkg_idx),\n        range_np_(range_np),\n        mr_(config.MR()),\n        ranges_mc_(config.RangesOfMC(A.Extents().rows)),\n        ranges_kc_(config.RangesOfKC(A.Extents().cols)),\n        ranges_nc_(config.RangesOfNC(range_np)),\n        order_(config.Order()),\n        inner_tasks_(config.InnerTasks()),\n        out_(config.Out()) {\n    \n    A_ = args_.env->storage.A(pkg_idx, A.Extents());\n    {\n      MMZone zone;\n      zone.MaybeEnter(\"MM.DecompressA\", args_);\n      A_ = DecompressA(A);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "MMPerPackage", "index": 157, "label": 0}
{"input": "inline std::string trim_double_quotes_copy(const std::string &s) {\n  if (s.length() >= 2 && s.front() == '\"' && s.back() == '\"') {\n    return s.substr(1, s.size() - 2);\n  }\n  return s;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "trim_double_quotes_copy", "index": 158, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE PlainObjectBase(const ReturnByValue<OtherDerived>& other)\n    {\n      _check_template_params();\n      \n      resize(other.rows(), other.cols());\n      other.evalTo(this->derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "EIGEN_STRONG_INLINE PlainObjectBase", "index": 159, "label": 0}
{"input": "static HWY_INLINE HWY_MAYBE_UNUSED void Softmax(float* HWY_RESTRICT x,\n                                                const size_t size,\n                                                float temperature = 1.0f) {\n  Softmax(x, size, size, temperature);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "0e5b59d24defa48d9d57d8a3225040130d9536b8", "file_path": "ops/ops-inl.h", "function_name": "Softmax", "index": 160, "label": 0}
{"input": "const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::sinh() const\n{\n  eigen_assert(rows() == cols());\n  typedef typename internal::stem_function<Scalar>::ComplexScalar ComplexScalar;\n  return MatrixFunctionReturnValue<Derived>(derived(), internal::stem_function_sinh<ComplexScalar>);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "MatrixBase<Derived>::sinh", "index": 161, "label": 0}
{"input": "NdArray<dtype> discrete(const Shape& inShape, const NdArray<double>& inWeights)\n    {\n        return detail::discrete<dtype>(generator_, inShape, inWeights);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/discrete.hpp", "function_name": "discrete", "index": 162, "label": 0}
{"input": "inline cl_int clUnloadPlatformCompiler(cl_platform_id p0) { return clUnloadPlatformCompiler_pfn(p0); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clUnloadPlatformCompiler", "index": 163, "label": 0}
{"input": "inline uint32x2_t cv_vrnd_u32_f32(float32x2_t v)\n{\n    static float32x2_t v_05 = vdup_n_f32(0.5f);\n    return vcvt_u32_f32(vadd_f32(v, v_05));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/neon_utils.hpp", "function_name": "cv_vrnd_u32_f32", "index": 164, "label": 0}
{"input": "[[nodiscard]] static MatchResult port_part_matches(Optional<StringView> input, URL::URL const& url)\n{\n    \n\n    \n    if (input == \"*\"sv)\n        return MatchResult::Matches;\n\n    \n    Optional<u16> normalized_input;\n    if (input.has_value()) {\n        VERIFY(!input.value().is_empty());\n        auto maybe_port = input.value().to_number<u16>(TrimWhitespace::No);\n\n        \n        \n        if (!maybe_port.has_value())\n            return MatchResult::DoesNotMatch;\n\n        normalized_input = maybe_port.value();\n    }\n\n    \n    if (normalized_input == url.port())\n        return MatchResult::Matches;\n\n    \n    if (!url.port().has_value()) {\n        \n        auto default_port = URL::default_port_for_scheme(url.scheme());\n\n        \n        if (normalized_input == default_port)\n            return MatchResult::Matches;\n    }\n\n    \n    return MatchResult::DoesNotMatch;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "1edf7a8aa2a9a78bab95711573df05d9cd7b8aab", "file_path": "Libraries/LibWeb/ContentSecurityPolicy/Directives/DirectiveOperations.cpp", "function_name": "port_part_matches", "index": 165, "label": 0}
{"input": "CV_WRAP static inline\nbool imwritemulti(const String& filename, InputArrayOfArrays img,\n                  const std::vector<int>& params = std::vector<int>())\n{\n    return imwrite(filename, img, params);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgcodecs.hpp", "function_name": "imwritemulti", "index": 166, "label": 0}
{"input": "void resizeLikeTest()\n{\n  MatrixXf A(rows, cols);\n  MatrixXf B;\n  Matrix<double, rows, cols> C;\n  B.resizeLike(A);\n  C.resizeLike(B);  \n  VERIFY(B.rows() == rows && B.cols() == cols);\n\n  VectorXf x(rows);\n  RowVectorXf y;\n  y.resizeLike(x);\n  VERIFY(y.rows() == 1 && y.cols() == rows);\n\n  y.resize(cols);\n  x.resizeLike(y);\n  VERIFY(x.rows() == cols && x.cols() == 1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/resize.cpp", "function_name": "resizeLikeTest", "index": 167, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmplt4(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetlt4(a, b);\n        c = r << 8;         \n        r = c - r;          \n    #else\n        asm(\"not.b32 %0, %0;\" : \"+r\"(a));\n        c = vavg4(a, b);    \n        c = c & 0x80808080; \n        r = c >> 7;         \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmplt4", "index": 168, "label": 0}
{"input": "void Otto::OscillateServos(int amplitude[SERVO_COUNT], int offset[SERVO_COUNT], int period,\n                           double phase_diff[SERVO_COUNT], float cycle = 1) {\n    for (int i = 0; i < SERVO_COUNT; i++) {\n        if (servo_pins_[i] != -1) {\n            servo_[i].SetO(offset[i]);\n            servo_[i].SetA(amplitude[i]);\n            servo_[i].SetT(period);\n            servo_[i].SetPh(phase_diff[i]);\n        }\n    }\n\n    double ref = millis();\n    double end_time = period * cycle + ref;\n\n    while (millis() < end_time) {\n        for (int i = 0; i < SERVO_COUNT; i++) {\n            if (servo_pins_[i] != -1) {\n                servo_[i].Refresh();\n            }\n        }\n        vTaskDelay(5);\n    }\n    vTaskDelay(pdMS_TO_TICKS(10));\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::OscillateServos", "index": 169, "label": 0}
{"input": "int GRender::processMessage(int arg1, long arg2) {\n    Message *message;\n    if (messageSource->readMessage(&message) > 0) {\n        if (message->from == MSG_DOMAIN_ERROR) {\n            messageHelper->handleErrorMessage(message);\n        } else if (message->from == MSG_DOMAIN_STATE) {\n            onPlayStateChanged(message->type, message->extra);\n        } else if (message->from == MSG_DOMAIN_BUFFER) {\n            onBufferStateChanged(message->type);\n        } else if (message->from == MSG_DOMAIN_DEMUXING) {\n            isEof = message->type == MSG_DEMUXING_EOF;\n        } else if (message->from == MSG_DOMAIN_SEEK) {\n            \n        } else {\n            messageHelper->notifyObj(message->from, message->type, message->extra, nullptr, nullptr);\n        }\n        messageSource->popMessage();\n    } else {\n        std::this_thread::sleep_for(std::chrono::milliseconds(5));\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::processMessage", "index": 170, "label": 0}
{"input": "inline GroupElement mul(Generator g1, Generator g2) const\n    {\n      return mul(ge(g1), ge(g2));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/DynamicSymmetry.h", "function_name": "g1", "index": 171, "label": 0}
{"input": "void bug_1225()\n{\n  Matrix3d m1, m2;\n  m1.setRandom();\n  m1 = m1*m1.transpose();\n  m2 = m1.triangularView<Upper>();\n  SelfAdjointEigenSolver<Matrix3d> eig1(m1);\n  SelfAdjointEigenSolver<Matrix3d> eig2(m2.selfadjointView<Upper>());\n  VERIFY_IS_APPROX(eig1.eigenvalues(), eig2.eigenvalues());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigensolver_selfadjoint.cpp", "function_name": "bug_1225", "index": 172, "label": 0}
{"input": "EIGEN_DEVICE_FUNC const typename Transform<Scalar,Dim,Mode,Options>::LinearMatrixType\nTransform<Scalar,Dim,Mode,Options>::rotation() const\n{\n  LinearMatrixType result;\n  computeRotationScaling(&result, (LinearMatrixType*)0);\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options>::rotation", "index": 173, "label": 0}
{"input": "MockReplayerComponentLoader::MockReplayerComponentLoader(\n    std::weak_ptr<shell::LynxActor<shell::LynxEngine>> engine_actor)\n    : weak_engine_actor_(engine_actor) {\n  list_header_ = require_info_list_.begin();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "testing/lynx/tasm/databinding/mock_replayer_component_loader.cc", "function_name": "MockReplayerComponentLoader::MockReplayerComponentLoader", "index": 174, "label": 0}
{"input": "void MatrixBase<Derived>::applyHouseholderOnTheLeft(\n  const EssentialPart& essential,\n  const Scalar& tau,\n  Scalar* workspace)\n{\n  if(rows() == 1)\n  {\n    *this *= Scalar(1)-tau;\n  }\n  else if(tau!=Scalar(0))\n  {\n    Map<typename internal::plain_row_type<PlainObject>::type> tmp(workspace,cols());\n    Block<Derived, EssentialPart::SizeAtCompileTime, Derived::ColsAtCompileTime> bottom(derived(), 1, 0, rows()-1, cols());\n    tmp.noalias() = essential.adjoint() * bottom;\n    tmp += this->row(0);\n    this->row(0) -= tau * tmp;\n    bottom.noalias() -= tau * essential * tmp;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Householder/Householder.h", "function_name": "MatrixBase<Derived>::applyHouseholderOnTheLeft", "index": 175, "label": 0}
{"input": "inline void Value::FillStringTensorElement(const char* s, size_t index) {\n  ThrowOnError(GetApi().FillStringTensorElement(p_, s, index));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::FillStringTensorElement", "index": 176, "label": 0}
{"input": "static ModelConfig ConfigGemma7B() {\n  ModelConfig config = ConfigBaseGemmaV1();\n  config.model_name = \"Gemma7B\";\n  config.model = Model::GEMMA_7B;\n  config.model_dim = 3072;\n  config.vocab_size = kVocabSize;\n  config.seq_len = kSeqLen;\n  LayerConfig layer_config = LayerConfigGemma7B(config.model_dim);\n  config.layer_configs = {28, layer_config};\n  config.num_tensor_scales = 4 * config.layer_configs.size();\n  config.query_scale = QueryScaleType::SqrtKeySize;\n  config.attention_window_sizes = FixedAttentionWindowSizes<28>(kSeqLen);\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.cc", "function_name": "ConfigGemma7B", "index": 177, "label": 0}
{"input": "void IIR_I::resp(double data_in[], int M, double data_out[], int N)\n{\n    int i, k, il;\n    for(k = 0; k < N; k++)\n    {\n        data_out[k] = 0.0;\n        for(i = 0; i <= m_num_order; i++)\n        {\n            if( k - i >= 0)\n            {\n                il = ((k - i) < M) ? (k - i) : (M - 1);\n                data_out[k] = data_out[k] + m_pNum[i] * data_in[il];\n            }\n        }\n        for(i = 1; i <= m_den_order; i++)\n        {\n            if( k - i >= 0)\n            {\n                data_out[k] = data_out[k] - m_pDen[i] * data_out[k - i];\n            }\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/iir_filter.hpp", "function_name": "IIR_I::resp", "index": 178, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vsetge2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vset2.u32.u32.ge %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int c;\n        asm(\"not.b32 %0, %0;\" : \"+r\"(b));\n        c = vavrg2(a, b);   \n        c = c & 0x80008000; \n        r = c >> 15;        \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vsetge2", "index": 179, "label": 0}
{"input": "void UIBaseInput::SendFocusEvent() const {\n  const std::string& value = NodeManager::Instance().GetAttribute<std::string>(\n      input_node_, GetTextAttributeType());\n  const auto param = lepus::Dictionary::Create();\n  param->SetValue(\"value\", value);\n  CustomEvent event{Sign(), \"focus\", \"detail\", lepus_value(param)};\n  context_->SendEvent(event);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SendFocusEvent", "index": 180, "label": 0}
{"input": "inline cl_mem clCreateImage2D(cl_context p0, cl_mem_flags p1, const cl_image_format* p2, size_t p3, size_t p4, size_t p5, void* p6, cl_int* p7) { return clCreateImage2D_pfn(p0, p1, p2, p3, p4, p5, p6, p7); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateImage2D", "index": 181, "label": 0}
{"input": "NdArray<dtype> wrap1d(const NdArray<dtype>& inImage, uint32 inBoundarySize)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        const uint32 outSize = inImage.size() + inBoundarySize * 2;\n\n        NdArray<dtype> outArray(1, outSize);\n        outArray.put(Slice(inBoundarySize, inBoundarySize + inImage.size()), inImage);\n\n        \n        outArray.put(Slice(0, inBoundarySize), inImage[Slice(inImage.size() - inBoundarySize, inImage.size())]);\n\n        \n        outArray.put(Slice(inImage.size() + inBoundarySize, outSize), inImage[Slice(0, inBoundarySize)]);\n\n        return outArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Boundaries/Boundaries1d/wrap1d.hpp", "function_name": "wrap1d", "index": 182, "label": 0}
{"input": "auto arccos(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(arccos(dtype{ 0 }))> returnArray(inArray.shape());\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) noexcept -> auto{ return arccos(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/arccos.hpp", "function_name": "arccos", "index": 183, "label": 0}
{"input": "inline\nMat::Mat(const MatCommaInitializer_<_Tp>& commaInitializer)\n    : flags(MAGIC_VAL + traits::Type<_Tp>::value + CV_MAT_CONT_FLAG), dims(0), rows(0), cols(0), data(0),\n      datastart(0), dataend(0), allocator(0), u(0), size(&rows)\n{\n    *this = commaInitializer.operator Mat_<_Tp>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat::Mat", "index": 184, "label": 0}
{"input": "inline\n_Tp Size_<_Tp>::area() const\n{\n    const _Tp result = width * height;\n    CV_DbgAssert(!std::numeric_limits<_Tp>::is_integer\n        || width == 0 || result / width == height); \n    return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Size_<_Tp>::area", "index": 185, "label": 0}
{"input": "Newton(const double                  epsilon,\n               const uint32                  maxNumIterations,\n               std::function<double(double)> f,\n               std::function<double(double)> fPrime) noexcept :\n            Iteration(epsilon, maxNumIterations),\n            f_(std::move(f)),\n            fPrime_(std::move(fPrime))\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Roots/Newton.hpp", "function_name": "Newton", "index": 186, "label": 0}
{"input": "bool update_segrep(Index krep, StorageIndex jj)\n  {\n    if(m_marker[krep]<m_jcol)\n    {\n      m_marker[krep] = jj; \n      return true;\n    }\n    return false;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_panel_dfs.h", "function_name": "krep", "index": 187, "label": 0}
{"input": "inline\nMatx<_Tp,m,n> Matx<_Tp,m,n>::diag(const typename Matx<_Tp,m,n>::diag_type& d)\n{\n    Matx<_Tp,m,n> M;\n    for(int i = 0; i < shortdim; i++)\n        M(i,i) = d(i, 0);\n    return M;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp,m,n>::diag", "index": 188, "label": 0}
{"input": "inline void ClientImpl::set_read_timeout(time_t sec, time_t usec) {\n  read_timeout_sec_ = sec;\n  read_timeout_usec_ = usec;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_read_timeout", "index": 189, "label": 0}
{"input": "void testPascal(double tol)\n{\n  for (int size=1; size<20; size++)\n  {\n    Matrix<T,Dynamic,Dynamic> A(size,size), B(size,size), C(size,size);\n    A.setZero();\n    for (int i=0; i<size-1; i++)\n      A(i+1,i) = static_cast<T>(i+1);\n    B.setZero();\n    for (int i=0; i<size; i++)\n      for (int j=0; j<=i; j++)\n    B(i,j) = static_cast<T>(binom(i,j));\n\n    C = A.matrixFunction(expfn);\n    std::cout << \"testPascal: size = \" << size << \"   error funm = \" << relerr(C, B);\n    VERIFY(C.isApprox(B, static_cast<T>(tol)));\n\n    C = A.exp();\n    std::cout << \"   error expm = \" << relerr(C, B) << \"\\n\";\n    VERIFY(C.isApprox(B, static_cast<T>(tol)));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_exponential.cpp", "function_name": "testPascal", "index": 190, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet1cd pxor   <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(vec_xor(a.v,b.v)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/Complex.h", "function_name": "Packet1cd", "index": 191, "label": 0}
{"input": "inline cl_int clSetUserEventStatus(cl_event p0, cl_int p1) { return clSetUserEventStatus_pfn(p0, p1); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clSetUserEventStatus", "index": 192, "label": 0}
{"input": "EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar\nDenseBase<Derived>::redux(const Func& func) const\n{\n  eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\");\n\n  typedef typename internal::redux_evaluator<Derived> ThisEvaluator;\n  ThisEvaluator thisEval(derived());\n  \n  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Redux.h", "function_name": "DenseBase<Derived>::redux", "index": 193, "label": 0}
{"input": "void transform_associativity2(const A1& a1, const A2& a2, const P& p, const Q& q, const V& v, const H& h)\n{\n  VERIFY_IS_APPROX( a1*(q*v), (a1*q)*v );\n  VERIFY_IS_APPROX( a2*(q*v), (a2*q)*v );\n  VERIFY_IS_APPROX( p *(q*v).homogeneous(), (p *q)*v.homogeneous() );\n\n  transform_associativity_left(a1, a2,p, q, v, h);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_transformations.cpp", "function_name": "transform_associativity2", "index": 194, "label": 0}
{"input": "static void test_fixed_size_broadcasting()\n{\n  \n#if 0\n  Tensor<float, 1, DataLayout> t1(10);\n  t1.setRandom();\n  TensorFixedSize<float, Sizes<1>, DataLayout> t2;\n  t2 = t2.constant(20.0f);\n\n  Tensor<float, 1, DataLayout> t3 = t1 + t2.broadcast(Eigen::array<int, 1>{{10}});\n  for (int i = 0; i < 10; ++i) {\n    VERIFY_IS_APPROX(t3(i), t1(i) + t2(0));\n  }\n\n  TensorMap<TensorFixedSize<float, Sizes<1>, DataLayout> > t4(t2.data(), {{1}});\n  Tensor<float, 1, DataLayout> t5 = t1 + t4.broadcast(Eigen::array<int, 1>{{10}});\n  for (int i = 0; i < 10; ++i) {\n    VERIFY_IS_APPROX(t5(i), t1(i) + t2(0));\n  }\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_broadcasting.cpp", "function_name": "test_fixed_size_broadcasting", "index": 195, "label": 0}
{"input": "void matrix_function_compute_block_atomic(const MatrixType& T, AtomicType& atomic, const VectorType& blockStart, const VectorType& clusterSize, MatrixType& fT)\n{ \n  fT.setZero(T.rows(), T.cols());\n  for (typename VectorType::Index i = 0; i < clusterSize.rows(); ++i) {\n    fT.block(blockStart(i), blockStart(i), clusterSize(i), clusterSize(i))\n      = atomic.compute(T.block(blockStart(i), blockStart(i), clusterSize(i), clusterSize(i)));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "matrix_function_compute_block_atomic", "index": 196, "label": 0}
{"input": "static Matrixf spectrogram(Matrixcf &X, float power = 1.f){\n  return X.cwiseAbs().array().pow(power);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/librosa.h", "function_name": "spectrogram", "index": 197, "label": 0}
{"input": "__extension__ extern __inline v2f64\n__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\nmsa_mlaq_f64(v2f64 __a, v2f64 __b, v2f64 __c)\n{\n  __asm__ volatile(\"fmadd.d %w[__a], %w[__b], %w[__c]\\n\"\n               \n               : [__a] \"+f\"(__a)\n               \n               : [__b] \"f\"(__b), [__c] \"f\"(__c));\n  return __a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/msa_macros.h", "function_name": "msa_mlaq_f64", "index": 198, "label": 0}
{"input": "inline AllocatedStringPtr ConstSessionImpl<T>::GetInputNameAllocated(size_t index, OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().SessionGetInputName(this->p_, index, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionImpl<T>::GetInputNameAllocated", "index": 199, "label": 0}
{"input": "std::complex<Out> complex_cast(const std::complex<In>& value) noexcept\n    {\n        STATIC_ASSERT_ARITHMETIC(Out);\n\n        return std::complex<Out>(static_cast<Out>(value.real()), static_cast<Out>(value.imag()));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StdComplexOperators.hpp", "function_name": "complex_cast", "index": 200, "label": 0}
{"input": "static inline  void order_children\n(\n  \n\n  IndexType n_col,      \n  colamd_col<IndexType> Col [],    \n  IndexType p []      \n  )\n{\n  \n\n  IndexType i ;     \n  IndexType c ;     \n  IndexType parent ;    \n\n  \n\n  for (i = 0 ; i < n_col ; i++)\n  {\n    \n    COLAMD_ASSERT (COL_IS_DEAD (i)) ;\n    if (!COL_IS_DEAD_PRINCIPAL (i) && Col [i].shared2.order == COLAMD_EMPTY)\n    {\n      parent = i ;\n      \n      do\n      {\n\tparent = Col [parent].shared1.parent ;\n      } while (!COL_IS_DEAD_PRINCIPAL (parent)) ;\n\n      \n      \n      c = i ;\n      \n      order = Col [parent].shared2.order ;\n\n      do\n      {\n\tCOLAMD_ASSERT (Col [c].shared2.order == COLAMD_EMPTY) ;\n\n\t\n\tCol [c].shared2.order = order++ ;\n\t\n\tCol [c].shared1.parent = parent ;\n\n\t\n\tc = Col [c].shared1.parent ;\n\n\t\n\t\n\t\n      } while (Col [c].shared2.order == COLAMD_EMPTY) ;\n\n      \n      Col [parent].shared2.order = order ;\n    }\n  }\n\n  \n\n  for (c = 0 ; c < n_col ; c++)\n  {\n    p [Col [c].shared2.order] = c ;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/OrderingMethods/Eigen_Colamd.h", "function_name": "order_children", "index": 201, "label": 0}
{"input": "aligned_stack_memory_handler(T* ptr, std::size_t size, bool dealloc)\n      : m_ptr(ptr), m_size(size), m_deallocate(dealloc)\n    {\n      if(NumTraits<T>::RequireInitialization && m_ptr)\n        Eigen::internal::construct_elements_of_array(m_ptr, size);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "aligned_stack_memory_handler", "index": 202, "label": 0}
{"input": "lynx_api_status lynx_value_iterate_value(lynx_api_env env, lynx_value object,\n                                         lynx_value_iterator_callback callback,\n                                         void* pfunc, void* raw_data) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_iterate_value", "index": 203, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_EQ>, const Derived, const OtherDerived>\n    operator==(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_EQ>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_EQ>, const Derived, const OtherDerived>\n    operator==", "index": 204, "label": 0}
{"input": "OttoEmojiDisplay::OttoEmojiDisplay(esp_lcd_panel_io_handle_t panel_io, esp_lcd_panel_handle_t panel,\n                                   int width, int height, int offset_x, int offset_y, bool mirror_x,\n                                   bool mirror_y, bool swap_xy, DisplayFonts fonts)\n    : SpiLcdDisplay(panel_io, panel, width, height, offset_x, offset_y, mirror_x, mirror_y, swap_xy,\n                    fonts),\n      emotion_gif_(nullptr) {\n    SetupGifContainer();\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_emoji_display.cc", "function_name": "OttoEmojiDisplay::OttoEmojiDisplay", "index": 205, "label": 0}
{"input": "bool holds() const\n        {\n            if (!m_ref) return false;\n            using U = typename std::decay<T>::type;\n            return dynamic_cast<VectorRefT<U>*>(m_ref.get()) != nullptr;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/garray.hpp", "function_name": "holds", "index": 206, "label": 0}
{"input": "CV_INLINE  CvPoint3D32f  cvPoint3D32f( double x, double y, double z )\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvPoint3D32f p = { (float)x, (float)y, (float)z };\n#else\n    CvPoint3D32f p((float)x, (float)y, (float)z);\n#endif\n    return p;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvPoint3D32f  cvPoint3D32f", "index": 207, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    MatrixType operatorSqrt() const\n    {\n      eigen_assert(m_isInitialized && \"SelfAdjointEigenSolver is not initialized.\");\n      eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\");\n      return m_eivec * m_eivalues.cwiseSqrt().asDiagonal() * m_eivec.adjoint();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h", "function_name": "operatorSqrt", "index": 208, "label": 0}
{"input": "explicit GCompileArg(T &&t)\n        : tag(detail::CompileArgTag<typename std::decay<T>::type>::tag())\n        , serializeF(cv::gapi::s11n::detail::has_S11N_spec<T>::value ?\n                     &cv::gapi::s11n::detail::wrap_serialize<T>::serialize :\n                     nullptr)\n        , arg(t)\n    {\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gcommon.hpp", "function_name": "GCompileArg", "index": 209, "label": 0}
{"input": "DistanceType getDistanceToBorder(DistanceType* p, DistanceType* c, DistanceType* q)\n    {\n        DistanceType sum = 0;\n        DistanceType sum2 = 0;\n\n        for (int i=0; i<veclen_; ++i) {\n            DistanceType t = c[i]-p[i];\n            sum += t*(q[i]-(c[i]+p[i])/2);\n            sum2 += t*t;\n        }\n\n        return sum*sum/sum2;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kmeans_index.h", "function_name": "p", "index": 210, "label": 0}
{"input": "bool OffscreenCanvasRenderingContext2D::image_smoothing_enabled() const\n{\n    return drawing_state().image_smoothing_enabled;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::image_smoothing_enabled", "index": 211, "label": 0}
{"input": "ArkUI_TextAreaType UITextArea::ParseTextAreaType(const lepus::Value& value) {\n  ArkUI_TextAreaType type = ARKUI_TEXTAREA_TYPE_NORMAL;\n  if (value.IsString()) {\n    const auto& val = value.StdString();\n    if (val == \"text\") {\n      type = ARKUI_TEXTAREA_TYPE_NORMAL;\n    } else if (val == \"number\" || val == \"digit\") {\n      type = ARKUI_TEXTAREA_TYPE_NUMBER;\n    } else if (val == \"tel\") {\n      type = ARKUI_TEXTAREA_TYPE_PHONE_NUMBER;\n    } else if (val == \"email\") {\n      type = ARKUI_TEXTAREA_TYPE_EMAIL;\n    } else {\n      LOGE(\"x-textarea-ng can not recognize a undefined type\")\n    }\n  }\n  return type;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_textarea.cc", "function_name": "UITextArea::ParseTextAreaType", "index": 212, "label": 0}
{"input": "inline void Client::set_socket_options(SocketOptions socket_options) {\n  cli_->set_socket_options(std::move(socket_options));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_socket_options", "index": 213, "label": 0}
{"input": "std::unique_ptr<StyleObject*, StyleObjectArrayDeleter> CreateStyleObjectArray(\n    int capacity) {\n  auto* array =\n      static_cast<StyleObject**>(malloc(capacity * sizeof(StyleObject*)));\n  return std::unique_ptr<StyleObject*, StyleObjectArrayDeleter>(array);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "af91be4e86f1918250dc41ea96c1430acbb38233", "file_path": "core/renderer/simple_styling/style_object.cc", "function_name": "CreateStyleObjectArray", "index": 214, "label": 0}
{"input": "inline void RealQZ<MatrixType>::computeNorms()\n    {\n      const Index size = m_S.cols();\n      m_normOfS = Scalar(0.0);\n      m_normOfT = Scalar(0.0);\n      for (Index j = 0; j < size; ++j)\n      {\n        m_normOfS += m_S.col(j).segment(0, (std::min)(size,j+2)).cwiseAbs().sum();\n        m_normOfT += m_T.row(j).segment(j, size - j).cwiseAbs().sum();\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealQZ.h", "function_name": "RealQZ<MatrixType>::computeNorms", "index": 215, "label": 0}
{"input": "V8CacheGenerator::V8CacheGenerator(const std::string &origin_url,\n                                   std::shared_ptr<const Buffer> src_buffer)\n    : CacheGenerator(origin_url, std::move(src_buffer)) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/v8/v8_cache_generator.cc", "function_name": "V8CacheGenerator::V8CacheGenerator", "index": 216, "label": 0}
{"input": "void MockScrollAndLayoutState(int list_main_axis_size, int content_offset) {\n    LinearLayoutManager* linear_layout_manager =\n        static_cast<LinearLayoutManager*>(list_layout_manager_);\n    \n    linear_layout_manager->LayoutInvalidItemHolder(0);\n    \n    linear_layout_manager->content_size_ =\n        linear_layout_manager->GetTargetContentSize();\n    linear_layout_manager->content_offset_ = content_offset;\n    list_element_ref_->height_ = list_main_axis_size;\n    list_children_helper_->UpdateOnScreenChildren(\n        linear_layout_manager->list_orientation_helper_.get(), content_offset);\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "a0dcde9c711d8fb582d9df9920816808b9a1f177", "file_path": "core/renderer/ui_component/list/list_event_manager_unittest.cc", "function_name": "list_main_axis_size", "index": 217, "label": 0}
{"input": "void check_stdlist_transform(const TransformType&)\n{\n  typedef typename TransformType::MatrixType MatrixType;\n  TransformType x(MatrixType::Random()), y(MatrixType::Random());\n  std::list<TransformType> v(10), w(20, y);\n  typename std::list<TransformType>::iterator itv = get(v, 5);\n  typename std::list<TransformType>::iterator itw = get(w, 6);\n  *itv = x;\n  *itw = *itv;\n  VERIFY_IS_APPROX(*itw, *itv);\n  v = w;\n  itv = v.begin();\n  itw = w.begin();\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(*itw, *itv);\n    ++itv;\n    ++itw;\n  }\n\n  v.resize(21);\n  set(v, 20, x);\n  VERIFY_IS_APPROX(*get(v, 20), x);\n  v.resize(22,y);\n  VERIFY_IS_APPROX(*get(v, 21), y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(*get(v, 22), x);\n\n  \n  \n  TransformType* ref = &(*get(w, 0));\n  for(int i=0; i<30 || ((ref==&(*get(w, 0))) && i<300); ++i)\n    v.push_back(*get(w, i%w.size()));\n  for(unsigned int i=23; i<v.size(); ++i)\n  {\n    VERIFY(get(v, i)->matrix()==get(w, (i-23)%w.size())->matrix());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stdlist_overload.cpp", "function_name": "check_stdlist_transform", "index": 218, "label": 0}
{"input": "ArkUI_NodeAttributeType UIInput::GetPlaceholderTextType() const {\n  return NODE_TEXT_INPUT_PLACEHOLDER;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_input.cc", "function_name": "UIInput::GetPlaceholderTextType", "index": 219, "label": 0}
{"input": "static v128_t wasm_unpacklo_i8x16(v128_t a, v128_t b) {\n    return wasm_v8x16_shuffle(a, b, 0,16,1,17,2,18,3,19,4,20,5,21,6,22,7,23);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "wasm_unpacklo_i8x16", "index": 220, "label": 0}
{"input": "inline explicit UniformScaling(const UniformScaling<OtherScalarType>& other)\n  { m_factor = Scalar(other.factor()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Scaling.h", "function_name": "UniformScaling", "index": 221, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseInverseReturnType\ncwiseInverse() const { return CwiseInverseReturnType(derived()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h", "function_name": "CwiseInverseReturnType\ncwiseInverse", "index": 222, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vabsdiff2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vabsdiff2.u32.u32.u32.sat %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vabsdiff.u32.u32.u32.sat %0.h0, %1.h0, %2.h0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s, t, u, v;\n        s = a & 0x0000ffff; \n        r = b & 0x0000ffff; \n        u = ::max(r, s);    \n        v = ::min(r, s);    \n        s = a & 0xffff0000; \n        r = b & 0xffff0000; \n        t = ::max(r, s);    \n        s = ::min(r, s);    \n        r = u | t;          \n        s = v | s;          \n        r = r - s;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vabsdiff2", "index": 223, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC float half_to_float(__half_raw h) {\n#if defined(EIGEN_HAS_CUDA_FP16) && defined(EIGEN_CUDA_ARCH) && EIGEN_CUDA_ARCH >= 300\n  return __half2float(h);\n\n#elif defined(EIGEN_HAS_FP16_C)\n  return _cvtsh_ss(h.x);\n\n#else\n  const float32_bits magic = { 113 << 23 };\n  const unsigned int shifted_exp = 0x7c00 << 13; \n  float32_bits o;\n\n  o.u = (h.x & 0x7fff) << 13;             \n  unsigned int exp = shifted_exp & o.u;   \n  o.u += (127 - 15) << 23;                \n\n  \n  if (exp == shifted_exp) {     \n    o.u += (128 - 16) << 23;    \n  } else if (exp == 0) {        \n    o.u += 1 << 23;             \n    o.f -= magic.f;             \n  }\n\n  o.u |= (h.x & 0x8000) << 16;    \n  return o.f;\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/Half.h", "function_name": "half_to_float", "index": 224, "label": 0}
{"input": "static ModelConfig ConfigGemma3_12B_LM() {\n  ModelConfig config = ConfigBaseGemmaV3();\n  config.model_name = \"Gemma3_12B\";\n  config.model = Model::GEMMA3_12B;\n  config.model_dim = 3840;\n  config.vocab_size = 262144;  \n  config.seq_len = 32 * 1024;\n  LayerConfig layer_config = LayerConfigGemma3_12B_LM(config.model_dim);\n  config.layer_configs = {48, layer_config};\n  config.num_tensor_scales = 4 * config.layer_configs.size();\n  config.query_scale = QueryScaleType::SqrtKeySize;\n  \n  config.attention_window_sizes = RepeatedAttentionWindowSizes<48, 6>(\n      {1024, 1024, 1024, 1024, 1024, config.seq_len});\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "4ab601da1089ea74eb9e84e22657a240d8182be6", "file_path": "gemma/configs.cc", "function_name": "ConfigGemma3_12B_LM", "index": 225, "label": 0}
{"input": "NdArray<double> corrcoef(const NdArray<dtype>& x)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        const auto covariance           = cov(x);\n        auto       normalizedCovariance = empty_like(covariance);\n        for (decltype(covariance.numRows()) i = 0; i < covariance.numRows(); ++i)\n        {\n            for (decltype(covariance.numCols()) j = 0; j < covariance.numCols(); ++j)\n            {\n                normalizedCovariance(i, j) = covariance(i, j) / sqrt(covariance(i, i) * covariance(j, j));\n            }\n        }\n\n        return normalizedCovariance;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/corrcoef.hpp", "function_name": "corrcoef", "index": 226, "label": 0}
{"input": "inline __m256i _v256_set_w(int v0, int v1, int v2, int v3, int v4, int v5, int v6, int v7)\n{\n    return (__m256i)v8i32{ v7, v6, v5, v4, v3, v2, v1, v0 };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_set_w", "index": 227, "label": 0}
{"input": "int GenericIndex<Distance>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)\n{\n    CV_Assert(query.type() == CvType<ElementType>::type());\n    CV_Assert(query.isContinuous());\n    ::cvflann::Matrix<ElementType> m_query((ElementType*)query.ptr<ElementType>(0), query.rows, query.cols);\n\n    CV_Assert(indices.type() == CV_32S);\n    CV_Assert(indices.isContinuous());\n    ::cvflann::Matrix<int> m_indices((int*)indices.ptr<int>(0), indices.rows, indices.cols);\n\n    CV_Assert(dists.type() == CvType<DistanceType>::type());\n    CV_Assert(dists.isContinuous());\n    ::cvflann::Matrix<DistanceType> m_dists((DistanceType*)dists.ptr<DistanceType>(0), dists.rows, dists.cols);\n\n    FLANN_DISTANCE_CHECK\n\n    return nnIndex->radiusSearch(m_query,m_indices,m_dists,radius,searchParams);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann.hpp", "function_name": "GenericIndex<Distance>::radiusSearch", "index": 228, "label": 0}
{"input": "inline SeqIterator<_Tp> SeqIterator<_Tp>::operator --(int) const\n{\n    SeqIterator<_Tp> it = *this;\n    --*this;\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "SeqIterator<_Tp>::operator --", "index": 229, "label": 0}
{"input": "explicit IterativeSolverBase(const EigenBase<MatrixDerived>& A)\n    : m_matrixWrapper(A.derived())\n  {\n    init();\n    compute(matrix());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h", "function_name": "IterativeSolverBase", "index": 230, "label": 0}
{"input": "inline\nvoid GpuMat::swap(GpuMat& b)\n{\n    std::swap(flags, b.flags);\n    std::swap(rows, b.rows);\n    std::swap(cols, b.cols);\n    std::swap(step, b.step);\n    std::swap(data, b.data);\n    std::swap(datastart, b.datastart);\n    std::swap(dataend, b.dataend);\n    std::swap(refcount, b.refcount);\n    std::swap(allocator, b.allocator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "GpuMat::swap", "index": 231, "label": 0}
{"input": "static void test_1D_fft_ifft_invariant(int sequence_length) {\n  Tensor<double, 1, DataLayout> tensor(sequence_length);\n  tensor.setRandom();\n\n  array<int, 1> fft;\n  fft[0] = 0;\n\n  Tensor<std::complex<double>, 1, DataLayout> tensor_after_fft;\n  Tensor<std::complex<double>, 1, DataLayout> tensor_after_fft_ifft;\n\n  tensor_after_fft = tensor.template fft<Eigen::BothParts, Eigen::FFT_FORWARD>(fft);\n  tensor_after_fft_ifft = tensor_after_fft.template fft<Eigen::BothParts, Eigen::FFT_REVERSE>(fft);\n\n  VERIFY_IS_EQUAL(tensor_after_fft.dimension(0), sequence_length);\n  VERIFY_IS_EQUAL(tensor_after_fft_ifft.dimension(0), sequence_length);\n\n  for (int i = 0; i < sequence_length; ++i) {\n    VERIFY_IS_APPROX(static_cast<float>(tensor(i)), static_cast<float>(std::real(tensor_after_fft_ifft(i))));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ifft.cpp", "function_name": "test_1D_fft_ifft_invariant", "index": 232, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline void pscatter<double, Packet2d>(double* to, const Packet2d& from, Index stride)\n{\n  double EIGEN_ALIGN16 af[2];\n  pstore<double>(af, from);\n  to[0*stride] = af[0];\n  to[1*stride] = af[1];\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pscatter", "index": 233, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_onepic(JNIEnv *env, jobject thiz, jstring picfn,jstring dumpfn){\n            std::string s_pic = getStringUTF(env,picfn);\n            std::string s_dump = getStringUTF(env,dumpfn);\n            return g_digit->newpic(s_pic.c_str(),s_dump.c_str());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_onepic", "index": 234, "label": 0}
{"input": "MsgcbJni::MsgcbJni(jobject obj) {\n    LOGI(TAG, \"create MsgcbJni\");\n    JNIEnv *env = JniHelper::getJNIEnv();\n    msgcbJObj = env->NewGlobalRef(obj);\n    jclass sourceClass = env->GetObjectClass(obj);\n    onMessageCallbackMethod = env->GetMethodID(sourceClass, \"onMessageCallback\",\n                                               \"(IIJLjava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/MsgcbJni.cpp", "function_name": "MsgcbJni::MsgcbJni", "index": 235, "label": 0}
{"input": "inline const mpreal besselj0(const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(j0     );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "besselj0", "index": 236, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool index_pair_first_statically_eq(DenseIndex i, DenseIndex value) {\n  return index_pair_first_statically_eq_impl<T>::run(i, value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "index_pair_first_statically_eq", "index": 237, "label": 0}
{"input": "inline bool test_isApprox_abs(const Type1& a, const Type2& b)\n{\n  return ((a-b).array().abs() < test_precision<typename Type1::RealScalar>()).all();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_function.cpp", "function_name": "test_isApprox_abs", "index": 238, "label": 0}
{"input": "static void test_simple_slice()\n{\n  Tensor<float, 5, DataLayout> tensor(2,3,5,7,11);\n  tensor.setRandom();\n\n  Tensor<float, 5, DataLayout> slice1(1,1,1,1,1);\n  Eigen::DSizes<ptrdiff_t, 5> indices(1,2,3,4,5);\n  Eigen::DSizes<ptrdiff_t, 5> sizes(1,1,1,1,1);\n  slice1 = tensor.slice(indices, sizes);\n  VERIFY_IS_EQUAL(slice1(0,0,0,0,0), tensor(1,2,3,4,5));\n\n  Tensor<float, 5, DataLayout> slice2(1,1,2,2,3);\n  Eigen::DSizes<ptrdiff_t, 5> indices2(1,1,3,4,5);\n  Eigen::DSizes<ptrdiff_t, 5> sizes2(1,1,2,2,3);\n  slice2 = tensor.slice(indices2, sizes2);\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 2; ++j) {\n      for (int k = 0; k < 3; ++k) {\n        VERIFY_IS_EQUAL(slice2(0,0,i,j,k), tensor(1,1,3+i,4+j,5+k));\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_morphing.cpp", "function_name": "test_simple_slice", "index": 239, "label": 0}
{"input": "inline\ncv::Affine3<T> cv::Affine3<T>::rotate(const Vec3& _rvec) const\n{\n    return rotate(Affine3f(_rvec).rotation());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/affine.hpp", "function_name": "cv::Affine3<T>::rotate", "index": 240, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::IsLongPressMenuEnabled(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return GetSwitch(tasm::LynxEnv::kLynxEnableLongPressMenu);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::IsLongPressMenuEnabled", "index": 241, "label": 0}
{"input": "MyVideo::MyVideo(const char* videofile){\n    int len = strlen(videofile);\n    memcpy(filename,videofile,len+1);\n    reset();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/ndkvid.cpp", "function_name": "MyVideo::MyVideo", "index": 242, "label": 0}
{"input": "void DataBindingShell::UpdateComponentData(const std::string& component_id,\n                                           const lepus::Value& table) {\n  auto pipeline_options = std::make_shared<PipelineOptions>();\n  runtime::UpdateDataTask task(false, component_id, table, piper::ApiCallBack(),\n                               runtime::UpdateDataType(), pipeline_options);\n  tasm_->UpdateComponentData(task, task.pipeline_options_);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f5af09cfaebbb370993f8bebb2111431112543a7", "file_path": "testing/lynx/tasm/databinding/databinding_test.cc", "function_name": "DataBindingShell::UpdateComponentData", "index": 243, "label": 0}
{"input": "static void test_map_as_index()\n{\n#ifdef EIGEN_HAS_SFINAE\n  Tensor<float, 4, DataLayout> tensor(2, 3, 5, 7);\n  tensor.setRandom();\n\n  using NormalIndex = DSizes<ptrdiff_t, 4>;\n  using CustomIndex = std::map<ptrdiff_t, ptrdiff_t>;\n  CustomIndex coeffC;\n  coeffC[0] = 1;\n  coeffC[1] = 2;\n  coeffC[2] = 4;\n  coeffC[3] = 1;\n  NormalIndex coeff(1,2,4,1);\n\n  VERIFY_IS_EQUAL(tensor.coeff(coeffC), tensor.coeff(coeff));\n  VERIFY_IS_EQUAL(tensor.coeffRef(coeffC), tensor.coeffRef(coeff));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_custom_index.cpp", "function_name": "test_map_as_index", "index": 244, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::MeanReducer<CoeffReturnType>, const Dims, const Derived>\n    mean(const Dims& dims) const {\n      return TensorReductionOp<internal::MeanReducer<CoeffReturnType>, const Dims, const Derived>(derived(), dims, internal::MeanReducer<CoeffReturnType>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::MeanReducer<CoeffReturnType>, const Dims, const Derived>\n    mean", "index": 245, "label": 0}
{"input": "int GDigit::drawonebuf(const char* picfn,char* dstbuf,int size){\n    \n    std::string picfile(picfn);\n\n    JMat* mat_pic = NULL;\n    frameSource->popVidRecyle(&mat_pic);\n    if(!mat_pic)mat_pic = new JMat();\n    int rst = 0;\n    while(1){\n        rst = mat_pic->load(picfile);\n        if(rst)break;\n        break;\n    }\n    if(rst){\n        delete mat_pic;\n        return rst*1000;\n    }\n    memcpy(dstbuf,mat_pic->data(),size);\n    frameSource->pushVidRecyle(mat_pic);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::drawonebuf", "index": 246, "label": 0}
{"input": "PastixBase() : m_initisOk(false), m_analysisIsOk(false), m_factorizationIsOk(false), m_pastixdata(0), m_size(0)\n    {\n      init();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "PastixBase", "index": 247, "label": 0}
{"input": "EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS\nPacket ptan(const Packet& a) { using std::tan; return tan(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "ptan", "index": 248, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline double2 pgather<double, double2>(const double* from, Index stride) {\n  return make_double2(from[0*stride], from[1*stride]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMath.h", "function_name": "pgather", "index": 249, "label": 0}
{"input": "inline cl_int clEnqueueWriteBuffer(cl_command_queue p0, cl_mem p1, cl_bool p2, size_t p3, size_t p4, const void* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueWriteBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueWriteBuffer", "index": 250, "label": 0}
{"input": "inline std::vector<std::string> ConstIoBindingImpl<T>::GetOutputNames(OrtAllocator* allocator) const {\n  return binding_utils::GetOutputNamesHelper(this->p_, allocator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstIoBindingImpl<T>::GetOutputNames", "index": 251, "label": 0}
{"input": "inline const mpreal ldexp(const mpreal& v, mp_exp_t exp)\n{\n    mpreal x(v);\n\n    \n    mpfr_mul_2si(x.mpfr_ptr(), x.mpfr_srcptr(), exp, mpreal::get_default_rnd());\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "ldexp", "index": 252, "label": 0}
{"input": "Block(size_t base, size_t size, size_t projectedSize) \n            : base(base), size(size), projectedSize(projectedSize)\n        {\n        }", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "847842cd28a2427b9db520d2aaa7416e5dec3822", "file_path": "PowerAnalyse/function.h", "function_name": "Block", "index": 253, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Index first_aligned(const Scalar* array, Index size)\n{\n  const Index ScalarSize = sizeof(Scalar);\n  const Index AlignmentSize = Alignment / ScalarSize;\n  const Index AlignmentMask = AlignmentSize-1;\n\n  if(AlignmentSize<=1)\n  {\n    \n    \n    return 0;\n  }\n  else if( (UIntPtr(array) & (sizeof(Scalar)-1)) || (Alignment%ScalarSize)!=0)\n  {\n    \n    \n    return size;\n  }\n  else\n  {\n    Index first = (AlignmentSize - (Index((UIntPtr(array)/sizeof(Scalar))) & AlignmentMask)) & AlignmentMask;\n    return (first < size) ? first : size;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "first_aligned", "index": 254, "label": 0}
{"input": "GemmaEnv::GemmaEnv(int argc, char** argv, bool model_type_required)\n    : GemmaEnv(LoaderArgs(argc, argv, model_type_required),\n               InferenceArgs(argc, argv), MakeAppArgs(argc, argv)) {}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "evals/benchmark_helper.cc", "function_name": "GemmaEnv::GemmaEnv", "index": 255, "label": 0}
{"input": "inline float Float16Impl<Derived>::ToFloatImpl() const noexcept {\n  constexpr detail::float32_bits magic = {113 << 23};\n  constexpr unsigned int shifted_exp = 0x7c00 << 13;  \n  detail::float32_bits o{};\n\n  o.u = (val & 0x7fff) << 13;            \n  unsigned int exp = shifted_exp & o.u;  \n  o.u += (127 - 15) << 23;               \n\n  \n  if (exp == shifted_exp) {   \n    o.u += (128 - 16) << 23;  \n  } else if (exp == 0) {      \n    o.u += 1 << 23;           \n    o.f -= magic.f;           \n  }\n\n  \n  \n#if (defined _MSC_VER) && (defined _M_ARM || defined _M_ARM64 || defined _M_ARM64EC)\n  if (IsNegative()) {\n    return -o.f;\n  }\n#else\n  \n  o.u |= (val & 0x8000U) << 16U;  \n#endif\n  return o.f;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_float16.h", "function_name": "Float16Impl<Derived>::ToFloatImpl", "index": 256, "label": 0}
{"input": "void manageErrorCode(Index error) const\n    {\n      switch(error)\n      {\n        case 0:\n          m_info = Success;\n          break;\n        case -4:\n        case -7:\n          m_info = NumericalIssue;\n          break;\n        default:\n          m_info = InvalidInput;\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PardisoSupport/PardisoSupport.h", "function_name": "error", "index": 257, "label": 0}
{"input": "static int hf3fs_usrbio_close(struct thread_data *td, struct fio_file *f) {\n    hf3fs_dereg_fd(f->fd);\n    close(f->fd);\n    f->fd = -1;\n    return 0;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_close", "index": 258, "label": 0}
{"input": "GlesProgram::~GlesProgram() {\n    delete[] SQUARE_VERTICES;\n    delete[] COORD_VERTICES;\n    delete[] MVP_MATRIX;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/GlesProgram.cpp", "function_name": "GlesProgram::~GlesProgram", "index": 259, "label": 0}
{"input": "static inline\nRect_<_Tp> operator | (const Rect_<_Tp>& a, const Rect_<_Tp>& b)\n{\n    Rect_<_Tp> c = a;\n    return c |= b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "operator |", "index": 260, "label": 0}
{"input": "int  KMat::upzero(KMat* mat ){\n    if(m_dev!=mat->m_dev)return -1;\n    if((m_height!=mat->m_height)||(m_width!=mat->m_width))return -2;\n    if(!mat){\n        float* dst = (float*)m_buf;\n        for(int k=0;k< m_height;k++){\n            float* line = dst;\n            for(int m=0;m<m_width*m_channel;m++){\n                *line = (*line+1.0f) /2.0f;\n                line++;\n            }\n            dst+=m_stride;\n        }\n    }else{\n        float* src = (float*)m_buf;\n        float* dst = (float*)mat->m_buf;\n        for(int k=0;k< m_height;k++){\n            float* ls = src;\n            float* ld = dst;\n            for(int m=0;m<m_width*m_channel;m++){\n                *ld++ = (*ls++ +1.0f) /2.0f;\n            }\n            src+= m_stride;\n            dst+= mat->m_stride;\n        }\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/src/kmatx86.cpp", "function_name": "KMat::upzero", "index": 261, "label": 0}
{"input": "bool DevToolEnvHarmony::NeedPersistent(const std::string &key) {\n  if (s_persistent_default_value_.find(key) !=\n      s_persistent_default_value_.end()) {\n    return true;\n  }\n  return false;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::NeedPersistent", "index": 262, "label": 0}
{"input": "inline cl_int clGetGLObjectInfo(cl_mem p0, cl_gl_object_type* p1, cl_GLuint* p2) { return clGetGLObjectInfo_pfn(p0, p1, p2); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_gl_wrappers.hpp", "function_name": "clGetGLObjectInfo", "index": 263, "label": 0}
{"input": "void Application::StartListening() {\n    if (device_state_ == kDeviceStateActivating) {\n        SetDeviceState(kDeviceStateIdle);\n        return;\n    } else if (device_state_ == kDeviceStateWifiConfiguring) {\n        EnterAudioTestingMode();\n        return;\n    }\n\n    if (!protocol_) {\n        ESP_LOGE(TAG, \"Protocol not initialized\");\n        return;\n    }\n    \n    if (device_state_ == kDeviceStateIdle) {\n        Schedule([this]() {\n            if (!protocol_->IsAudioChannelOpened()) {\n                SetDeviceState(kDeviceStateConnecting);\n                if (!protocol_->OpenAudioChannel()) {\n                    return;\n                }\n            }\n\n            SetListeningMode(kListeningModeManualStop);\n        });\n    } else if (device_state_ == kDeviceStateSpeaking) {\n        Schedule([this]() {\n            AbortSpeaking(kAbortReasonNone);\n            SetListeningMode(kListeningModeManualStop);\n        });\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "bf125446b3f48802a99a133ad4e7ca0e11a65d5d", "file_path": "main/application.cc", "function_name": "Application::StartListening", "index": 264, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_bgpic(JNIEnv *env, jobject thiz, jstring picfn){\n            std::string s_pic = getStringUTF(env,picfn);\n            return g_digit->bgpic(s_pic.c_str());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_bgpic", "index": 265, "label": 0}
{"input": "static inline Quaternion<double> run(const QuaternionBase<Derived>& q)\n  {\n    Quaternion<double> res;\n    const __m128d mask0 = _mm_setr_pd(-0.,-0.);\n    const __m128d mask2 = _mm_setr_pd(-0.,0.);\n    pstoret<double,Packet2d,ResAlignment>(&res.x(), _mm_xor_pd(mask0, q.coeffs().template packet<traits<Derived>::Alignment>(0)));\n    pstoret<double,Packet2d,ResAlignment>(&res.z(), _mm_xor_pd(mask2, q.coeffs().template packet<traits<Derived>::Alignment>(2)));\n    return res;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h", "function_name": "q", "index": 266, "label": 0}
{"input": "auto airy_ai(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(airy_ai(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return airy_ai(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/airy_ai.hpp", "function_name": "airy_ai", "index": 267, "label": 0}
{"input": "void test_cxx11_tensor_forced_eval_sycl() {\n  cl::sycl::gpu_selector s;\n  Eigen::SyclDevice sycl_device(s);\n  CALL_SUBTEST(test_forced_eval_sycl(sycl_device));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_forced_eval_sycl.cpp", "function_name": "test_cxx11_tensor_forced_eval_sycl", "index": 268, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vavrg2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vavrg2.u32.u32.u32 %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        \n        \n        unsigned int s;\n        s = a ^ b;\n        r = a | b;\n        s = s & 0xfffefffe; \n        s = s >> 1;\n        r = r - s;\n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vavrg2", "index": 269, "label": 0}
{"input": "static __device__ __forceinline__ T atomicAdd(T* address, T val)\n            {\n#if defined (__CUDA_ARCH__) && (__CUDA_ARCH__ < 120)\n                T count;\n                unsigned int tag = threadIdx.x << ( (sizeof(unsigned int) << 3) - 5U);\n                do\n                {\n                    count = *address & TAG_MASK;\n                    count = tag | (count + val);\n                    *address = count;\n                } while (*address != count);\n\n                return (count & TAG_MASK) - val;\n#else\n                return ::atomicAdd(address, val);\n#endif\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/emulation.hpp", "function_name": "atomicAdd", "index": 270, "label": 0}
{"input": "static inline\nbool operator <= (const MatConstIterator& a, const MatConstIterator& b)\n{\n    return a.ptr <= b.ptr;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "operator <=", "index": 271, "label": 0}
{"input": "static void test_simple_assign()\n{\n  Tensor<int, 3> epsilon(3,3,3);\n  epsilon.setZero();\n  epsilon(0,1,2) = epsilon(2,0,1) = epsilon(1,2,0) = 1;\n  epsilon(2,1,0) = epsilon(0,2,1) = epsilon(1,0,2) = -1;\n\n  Tensor<int, 3> e2(3,3,3);\n  e2.setZero();\n  VERIFY_IS_EQUAL((e2(1,2,0)), 0);\n\n  e2 = epsilon;\n  VERIFY_IS_EQUAL((e2(1,2,0)), 1);\n  VERIFY_IS_EQUAL((e2(0,1,2)), 1);\n  VERIFY_IS_EQUAL((e2(2,0,1)), 1);\n  VERIFY_IS_EQUAL((e2(2,1,0)), -1);\n  VERIFY_IS_EQUAL((e2(0,2,1)), -1);\n  VERIFY_IS_EQUAL((e2(1,0,2)), -1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_simple.cpp", "function_name": "test_simple_assign", "index": 272, "label": 0}
{"input": "void StyleObject::DecodeImmediately() {\n  \n  if (!creator_) {\n    return;\n  }\n\n  if (const auto decoder = creator_(data_, length_); decoder) {\n    decoder->DecodeStyleObject(style_map_, range_);\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "af91be4e86f1918250dc41ea96c1430acbb38233", "file_path": "core/renderer/simple_styling/style_object.cc", "function_name": "StyleObject::DecodeImmediately", "index": 273, "label": 0}
{"input": "Brent(const double epsilon, const uint32 maxNumIterations, std::function<double(double)> f) noexcept :\n            Iteration(epsilon, maxNumIterations),\n            f_(std::move(f))\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Roots/Brent.hpp", "function_name": "Brent", "index": 274, "label": 0}
{"input": "LevenbergMarquardtSpace::Status\nLevenbergMarquardt<FunctorType,Scalar>::minimizeOptimumStorage(FVectorType  &x)\n{\n    LevenbergMarquardtSpace::Status status = minimizeOptimumStorageInit(x);\n    if (status==LevenbergMarquardtSpace::ImproperInputParameters)\n        return status;\n    do {\n        status = minimizeOptimumStorageOneStep(x);\n    } while (status==LevenbergMarquardtSpace::Running);\n    return status;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h", "function_name": "LevenbergMarquardt<FunctorType,Scalar>::minimizeOptimumStorage", "index": 275, "label": 0}
{"input": "GC::Ref<OffscreenCanvas> OffscreenCanvas::create(JS::Realm& realm, WebIDL::UnsignedLong width,\n    WebIDL::UnsignedLong height)\n{\n    return MUST(OffscreenCanvas::construct_impl(realm, width, height));\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::create", "index": 276, "label": 0}
{"input": "std::complex<T> RandomCpx() { return std::complex<T>( (T)(rand()/(T)RAND_MAX - .5), (T)(rand()/(T)RAND_MAX - .5) ); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/FFTW.cpp", "function_name": "RandomCpx", "index": 277, "label": 0}
{"input": "void SparseLUImpl<Scalar,StorageIndex>::relax_snode (const Index n, IndexVector& et, const Index relax_columns, IndexVector& descendants, IndexVector& relax_end)\n{\n  \n  \n  Index parent; \n  relax_end.setConstant(emptyIdxLU);\n  descendants.setZero();\n  for (Index j = 0; j < n; j++) \n  {\n    parent = et(j);\n    if (parent != n) \n      descendants(parent) += descendants(j) + 1;\n  }\n  \n  Index snode_start; \n  for (Index j = 0; j < n; )\n  {\n    parent = et(j);\n    snode_start = j; \n    while ( parent != n && descendants(parent) < relax_columns ) \n    {\n      j = parent; \n      parent = et(j);\n    }\n    \n    relax_end(snode_start) = StorageIndex(j); \n    j++;\n    \n    while (descendants(j) != 0 && j < n) j++;\n  } \n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_relax_snode.h", "function_name": "SparseLUImpl<Scalar,StorageIndex>::relax_snode", "index": 278, "label": 0}
{"input": "inline ConstSequenceTypeInfo TypeInfoImpl<T>::GetSequenceTypeInfo() const {\n  const OrtSequenceTypeInfo* out;\n  ThrowOnError(GetApi().CastTypeInfoToSequenceTypeInfo(this->p_, &out));\n  return ConstSequenceTypeInfo{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TypeInfoImpl<T>::GetSequenceTypeInfo", "index": 279, "label": 0}
{"input": "static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){\n    int N = B_stl.size();\n    for (int i=0;i<N;i++)\n      B_stl[i] = B[i];\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/libs/BLAS/c_interface_base.h", "function_name": "B", "index": 280, "label": 0}
{"input": "void test2dHyperbolicRotation(const T& tol)\n{\n  Matrix<std::complex<T>,2,2> A, B, C;\n  T angle, ch = std::cosh((T)1);\n  std::complex<T> ish(0, std::sinh((T)1));\n\n  A << ch, ish, -ish, ch;\n  MatrixPower<Matrix<std::complex<T>,2,2> > Apow(A);\n\n  for (int i=0; i<=20; ++i) {\n    angle = std::ldexp(static_cast<T>(i-10), -1);\n    ch = std::cosh(angle);\n    ish = std::complex<T>(0, std::sinh(angle));\n    B << ch, ish, -ish, ch;\n\n    C = Apow(angle);\n    std::cout << \"test2dHyperbolicRotation: i = \" << i << \"   error powerm = \" << relerr(C,B) << '\\n';\n    VERIFY(C.isApprox(B, tol));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_power.cpp", "function_name": "test2dHyperbolicRotation", "index": 281, "label": 0}
{"input": "CV_INLINE CvScalar cvScalar(const cv::Scalar& s)\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvScalar scalar = CV_STRUCT_INITIALIZER;\n#else\n    CvScalar scalar;\n#endif\n    scalar.val[0] = s.val[0];\n    scalar.val[1] = s.val[1];\n    scalar.val[2] = s.val[2];\n    scalar.val[3] = s.val[3];\n    return scalar;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvScalar", "index": 282, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmple2(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetle2(a, b);\n        c = r << 16;        \n        r = c - r;          \n    #else\n        asm(\"not.b32 %0, %0;\" : \"+r\"(a));\n        c = vavrg2(a, b);   \n        c = c & 0x80008000; \n        r = c >> 15;        \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmple2", "index": 283, "label": 0}
{"input": "[[nodiscard]] Slice rSlice(index_type inStartIdx = 0, size_type inStepSize = 1) const\n        {\n            return Slice(inStartIdx, shape_.rows, inStepSize); \n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inStartIdx", "index": 284, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet2d plset<Packet2d>(const double& a) { return padd<Packet2d>(pset1<Packet2d>(a), p2d_COUNTDOWN); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "plset", "index": 285, "label": 0}
{"input": "void RenderingWidget::keyPressEvent(QKeyEvent * e)\n{\n    switch(e->key())\n    {\n      case Qt::Key_Up:\n        mCamera.zoom(2);\n        break;\n      case Qt::Key_Down:\n        mCamera.zoom(-2);\n        break;\n      \n      case Qt::Key_G:\n        grabFrame();\n        break;\n      \n      case Qt::Key_C:\n        m_timeline.clear();\n        break;\n      \n      case Qt::Key_R:\n        resetCamera();\n        break;\n      \n      case Qt::Key_A:\n        if (mAnimate)\n        {\n          stopAnimation();\n        }\n        else\n        {\n          m_alpha = 0;\n          connect(&m_timer, SIGNAL(timeout()), this, SLOT(animate()));\n          m_timer.start(1000/30);\n          mAnimate = true;\n        }\n        break;\n      default:\n        break;\n    }\n\n    updateGL();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "RenderingWidget::keyPressEvent", "index": 286, "label": 0}
{"input": "EIGEN_STRONG_INLINE Eigen::half pfirst<Packet4h>(const Packet4h& from) {\n  return half_impl::raw_uint16_to_half(static_cast<unsigned short>(_mm_cvtsi64_si32(from.x)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "Eigen::half pfirst<Packet4h>", "index": 287, "label": 0}
{"input": "void StyleObject::ResetStylesInElement(SimpleStyleNode* element) const {\n  for (const auto& pair : style_map_) {\n    element->ResetSimpleStyle(pair.first);\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "af91be4e86f1918250dc41ea96c1430acbb38233", "file_path": "core/renderer/simple_styling/style_object.cc", "function_name": "StyleObject::ResetStylesInElement", "index": 288, "label": 0}
{"input": "Index(const Matrix<ElementType>& features, const IndexParams& params, Distance distance = Distance() )\n        :index_params_(params)\n    {\n        flann_algorithm_t index_type = get_param<flann_algorithm_t>(params,\"algorithm\");\n        loaded_ = false;\n\n        if (index_type == FLANN_INDEX_SAVED) {\n            nnIndex_ = load_saved_index<Distance>(features, get_param<cv::String>(params,\"filename\"), distance);\n            loaded_ = true;\n        }\n        else {\n            nnIndex_ = create_index_by_type<Distance>(features, params, distance);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/flann_base.hpp", "function_name": "Index", "index": 289, "label": 0}
{"input": "inline void\nSVD::backSubst( const Matx<_Tp, nm, 1>& w, const Matx<_Tp, m, nm>& u,\n                const Matx<_Tp, n, nm>& vt, const Matx<_Tp, m, nb>& rhs,\n                Matx<_Tp, n, nb>& dst )\n{\n    CV_StaticAssert( nm == MIN(m, n), \"Invalid size of output vector.\");\n    Mat _u(u, false), _w(w, false), _vt(vt, false), _rhs(rhs, false), _dst(dst, false);\n    SVD::backSubst(_w, _u, _vt, _rhs, _dst);\n    CV_Assert(_dst.data == (uchar*)&dst.val[0]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/operations.hpp", "function_name": "SVD::backSubst", "index": 290, "label": 0}
{"input": "std::shared_ptr<Buffer> QuickjsRuntime::GetBytecode(\n    const std::shared_ptr<const Buffer> &buffer,\n    const std::string &source_url) const {\n  std::shared_ptr<Buffer> cache;\n#if !defined(LYNX_UNIT_TEST) || !LYNX_UNIT_TEST || \\\n    defined(QUICKJS_CACHE_UNITTEST)\n  if (runtime::IsKernelJs(source_url) || enable_user_bytecode_) {\n    LOGI(\"using new bytecode\");\n    auto &instance = cache::JsCacheManager::GetQuickjsInstance();\n    auto generator =\n        std::make_unique<cache::QuickjsCacheGenerator>(source_url, buffer);\n    cache = instance.TryGetCache(source_url, bytecode_source_url_,\n                                 getRuntimeId(), buffer, std::move(generator),\n                                 bytecode_getter_.get());\n  } else if (!enable_user_bytecode_) {\n    cache::JsCacheTracker::OnGetBytecodeDisable(\n        getRuntimeId(), JSRuntimeType::quickjs, source_url, false, false);\n  }\n#endif\n  return cache;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5419d4c4cd7795fd30d486e3a515d918055bcbb0", "file_path": "core/runtime/jsi/quickjs/quickjs_runtime.cc", "function_name": "QuickjsRuntime::GetBytecode", "index": 291, "label": 0}
{"input": "void jacobisvd_verify_assert(const MatrixType& m)\n{\n  svd_verify_assert<JacobiSVD<MatrixType> >(m);\n  Index rows = m.rows();\n  Index cols = m.cols();\n\n  enum {\n    ColsAtCompileTime = MatrixType::ColsAtCompileTime\n  };\n\n\n  MatrixType a = MatrixType::Zero(rows, cols);\n  a.setZero();\n\n  if (ColsAtCompileTime == Dynamic)\n  {\n    JacobiSVD<MatrixType, FullPivHouseholderQRPreconditioner> svd_fullqr;\n    VERIFY_RAISES_ASSERT(svd_fullqr.compute(a, ComputeFullU|ComputeThinV))\n    VERIFY_RAISES_ASSERT(svd_fullqr.compute(a, ComputeThinU|ComputeThinV))\n    VERIFY_RAISES_ASSERT(svd_fullqr.compute(a, ComputeThinU|ComputeFullV))\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/jacobisvd.cpp", "function_name": "jacobisvd_verify_assert", "index": 292, "label": 0}
{"input": "InspectorTasmExecutor::InspectorTasmExecutor(\n    const std::shared_ptr<LynxDevToolMediator>& devtool_mediator,\n    tasm::TemplateAssembler* tasm)\n    : dom_use_compression_(false),\n      dom_compression_threshold_(10240),\n      element_root_(nullptr),\n      tasm_(tasm),\n      devtool_mediator_wp_(devtool_mediator) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "devtool/lynx_devtool/agent/inspector_tasm_executor.cc", "function_name": "InspectorTasmExecutor::InspectorTasmExecutor", "index": 293, "label": 0}
{"input": "napi_value DevToolEnvHarmony::Init(napi_env env, napi_value exports) {\n#define DECLARE_NAPI_STATIC_FUNCTION(name, func) \\\n  {(name), nullptr, (func), nullptr, nullptr, nullptr, napi_static, nullptr}\n\n  napi_property_descriptor properties[] = {\n      DECLARE_NAPI_STATIC_FUNCTION(\"setSwitch\", SetSwitchNAPI),\n      DECLARE_NAPI_STATIC_FUNCTION(\"getSwitch\", GetSwitchNAPI),\n      DECLARE_NAPI_STATIC_FUNCTION(\"setAppInfo\", SetAppInfo),\n      DECLARE_NAPI_STATIC_FUNCTION(\"initDevToolSetModule\",\n                                   InitDevToolSetModule),\n  };\n#undef DECLARE_NAPI_STATIC_FUNCTION\n  constexpr size_t size = std::size(properties);\n  napi_value cons;\n  napi_status status =\n      napi_define_class(env, \"LynxDevToolEnvHarmony\", NAPI_AUTO_LENGTH,\n                        Constructor, nullptr, size, properties, &cons);\n  assert(status == napi_ok);\n  status = napi_set_named_property(env, exports, \"LynxDevToolEnvHarmony\", cons);\n  assert(status == napi_ok);\n  return exports;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::Init", "index": 294, "label": 0}
{"input": "void addPoint(DistanceType dist, int index) CV_OVERRIDE\n    {\n        if (dist <= radius_) dist_indices_.insert(DistIndex(dist, index));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "dist", "index": 295, "label": 0}
{"input": "inline void bindTexture(const textureReference* tex, const PtrStepSz<T>& img)\n        {\n            cudaChannelFormatDesc desc = cudaCreateChannelDesc<T>();\n            cudaSafeCall( cudaBindTexture2D(0, tex, img.ptr(), &desc, img.cols, img.rows, img.step) );\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/common.hpp", "function_name": "bindTexture", "index": 296, "label": 0}
{"input": "inline v_float64x4 v256_lut(const double* tab, const int* idx)\n{\n    return v_float64x4(_v256_setr_pd(tab[idx[0]], tab[idx[1]], tab[idx[2]], tab[idx[3]]));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "v256_lut", "index": 297, "label": 0}
{"input": "inline float32x4_t cv_vsqrtq_f32(float32x4_t val)\n{\n    return cv_vrecpq_f32(cv_vrsqrtq_f32(val));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/neon_utils.hpp", "function_name": "cv_vsqrtq_f32", "index": 298, "label": 0}
{"input": "static inline Rect_<_Tp> operator|(const Rect_<_Tp>& a, const Rect_<_Tp>& b)\n{\n    Rect_<_Tp> c = a;\n    return c |= b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/simpleocv.h", "function_name": "operator|", "index": 299, "label": 0}
{"input": "void SyncPackageExternalPath(JNIEnv* env, jclass jcaller, jlong ptr,\n                             jstring path) {\n  auto* shell = reinterpret_cast<LynxShell*>(ptr);\n  lynx::tasm::TemplateAssembler* tasm =\n      shell->GetEngineActor()->Impl()->GetTasm();\n  tasm->SyncAndroidPackageExternalPath(\n      JNIConvertHelper::ConvertToString(env, path));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/shell/android/lynx_template_render_android.cc", "function_name": "SyncPackageExternalPath", "index": 300, "label": 0}
{"input": "v_int32x4(int v0, int v1, int v2, int v3)\n    {\n        int v[] = {v0, v1, v2, v3};\n        val = wasm_v128_load(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_int32x4", "index": 301, "label": 0}
{"input": "void BlendGramSimp(unsigned char *Src,unsigned char* Mask, unsigned char *Dest, int Width, int Height, int Mode)\r\n{\r\n\tif(Mode<1)return;\r\n\tif(Mode>=MAX_FUNC)return;\r\n\tBlendFunc func=blendfuncs[Mode];\r\n\tunsigned char *LinePS, *LinePD,*LinePM;\r\n\tfor (int Y = 0; Y < Height; Y += 1)\r\n\t{\r\n\t\tLinePS = Src + Y * Width * 4;\r\n\t\tLinePM = Mask + Y * Width * 4;\r\n\t\tLinePD = Dest + Y * Width * 4;\r\n\t\tfor (int X = 0; X < Width; X += 1)\r\n\t\t{\r\n\t\t\tfunc(LinePD,LinePS,LinePM);\r\n\t\t\tLinePS += 4;\r\n\t\t\tLinePM += 4;\r\n\t\t\tLinePD += 4;\r\n\t\t}\r\n\t}\r\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "BlendGramSimp", "index": 302, "label": 0}
{"input": "EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::PlainObject\nMatrixBase<Derived>::normalized() const\n{\n  typedef typename internal::nested_eval<Derived,2>::type _Nested;\n  _Nested n(derived());\n  RealScalar z = n.squaredNorm();\n  \n  if(z>RealScalar(0))\n    return n / numext::sqrt(z);\n  else\n    return n;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Dot.h", "function_name": "MatrixBase<Derived>::normalized", "index": 303, "label": 0}
{"input": "void UIBaseInput::OnNodeEvent(ArkUI_NodeEvent* event) {\n  UIView::OnNodeEvent(event);\n  auto type = OH_ArkUI_NodeEvent_GetEventType(event);\n  if (type == NODE_EVENT_ON_APPEAR) {\n  } else if (type == NODE_EVENT_ON_AREA_CHANGE) {\n  } else if (type == NODE_ON_FOCUS) {\n    SendFocusEvent();\n    context_->SetFocusedTarget(weak_from_this());\n  } else if (type == NODE_ON_BLUR) {\n    SendBlurEvent();\n    context_->UnsetFocusedTarget(weak_from_this());\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::OnNodeEvent", "index": 304, "label": 0}
{"input": "void prep(const std::map<int, double> &properties)\n    {\n        for (const auto &it : properties) {\n            cap.set(it.first, it.second);\n        }\n\n        \n        \n        GAPI_Assert(first.empty());\n        cv::Mat tmp;\n        if (!cap.read(tmp))\n        {\n            GAPI_Error(\"Couldn't grab the very first frame\");\n        }\n        \n        \n        \n        \n        first = tmp.clone();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/cap.hpp", "function_name": "std::map<int, double>", "index": 305, "label": 0}
{"input": "LayoutResult InputShadowNode::Measure(float width, MeasureMode width_mode,\n                                      float height, MeasureMode height_mode,\n                                      bool final_measure) {\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, INPUT_SHADOW_NODE_MEASURE);\n  AppendToParagraph(*paragraph_builder_, 0, 0);\n  paragraph_ = paragraph_builder_->CreateParagraph(font_collection_, width);\n  paragraph_->Layout(width * ScaleDensity());\n\n  LayoutResult result{width, height, 0};\n\n  if (base::FloatsNotEqual(ui_height_,\n                           INPUT_SHADOW_NODE_UNMEASURED_UI_HEIGHT)) {\n    result.height_ = ui_height_;\n  } else {\n    result.height_ =\n        paragraph_->GetHeight() * ScaleDensity() - INPUT_DEFAULT_FONT_SIZE;\n  }\n  if (height_mode == MeasureMode::Definite) {\n    result.height_ = height;\n  }\n  if (height_mode == MeasureMode::AtMost &&\n      base::FloatsLarger(result.height_, height)) {\n    result.height_ = height;\n  }\n\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/input_shadow_node.cc", "function_name": "InputShadowNode::Measure", "index": 306, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline _Scalar ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersection(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane) const\n{\n  return intersectionParameter(hyperplane);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/ParametrizedLine.h", "function_name": "ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersection", "index": 307, "label": 0}
{"input": "void test_device_sycl(const Eigen::SyclDevice &sycl_device) {\n  std::cout <<\"Helo from ComputeCpp: the requested device exists and the device name is : \"\n    << sycl_device.m_queue.get_device(). template get_info<cl::sycl::info::device::name>() <<std::endl;;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_device_sycl.cpp", "function_name": "test_device_sycl", "index": 308, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::LLA geocentricToLLA(const reference_frames::Geocentric& point) noexcept\n    {\n        constexpr auto flatteningFactor =\n            (reference_frames::constants::EARTH_EQUATORIAL_RADIUS - reference_frames::constants::EARTH_POLAR_RADIUS) /\n            reference_frames::constants::EARTH_EQUATORIAL_RADIUS;\n\n        const auto geodeticLatitude = std::atan((1. / utils::sqr(1. - flatteningFactor)) * std::tan(point.latitude));\n        auto       geodetic         = reference_frames::LLA{ geodeticLatitude, point.longitude, 0. };\n        geodetic.altitude           = point.radius - geocentricRadius(geodetic);\n        return geodetic;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/geocentricToLLA.hpp", "function_name": "geocentricToLLA", "index": 309, "label": 0}
{"input": "void cv2objc(std::vector<CV>& vector, NSMutableArray<OBJC*>* _Nonnull array, OBJC* _Nonnull (* _Nonnull converter)(CV&)) {\n    [array removeAllObjects];\n    for (size_t index = 0; index < vector.size(); index++) {\n        [array addObject:converter(vector[index])];\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/CVObjcUtil.h", "function_name": "cv2objc", "index": 310, "label": 0}
{"input": "void partial_lu_inplace(MatrixType& lu, TranspositionType& row_transpositions, typename TranspositionType::StorageIndex& nb_transpositions)\n{\n  eigen_assert(lu.cols() == row_transpositions.size());\n  eigen_assert((&row_transpositions.coeffRef(1)-&row_transpositions.coeffRef(0)) == 1);\n\n  partial_lu_impl\n    <typename MatrixType::Scalar, MatrixType::Flags&RowMajorBit?RowMajor:ColMajor, typename TranspositionType::StorageIndex>\n    ::blocked_lu(lu.rows(), lu.cols(), &lu.coeffRef(0,0), lu.outerStride(), &row_transpositions.coeffRef(0), nb_transpositions);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/PartialPivLU.h", "function_name": "partial_lu_inplace", "index": 311, "label": 0}
{"input": "inline void log_verbosity(int level)\n{\n    if (level >= 0) {\n        Logger::setLevel(level);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/flann_base.hpp", "function_name": "log_verbosity", "index": 312, "label": 0}
{"input": "inline cv::util::optional<GCompileArg> tryDeserializeCompArg(const std::string& tag,\n                                                             const std::vector<char>& sArg) {\n    std::unique_ptr<cv::gapi::s11n::IIStream> pArgIs = cv::gapi::s11n::detail::getInStream(sArg);\n    return try_deserialize_comparg<std::tuple<Types...>>::exec(tag, *pArgIs);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/s11n.hpp", "function_name": "tryDeserializeCompArg", "index": 313, "label": 0}
{"input": "bool JSVMRuntime::hasProperty(const piper::Object& obj,\n                              const piper::PropNameID& name) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n\n  JSVM_Value name_value = nullptr;\n  JSVMHelper::stringRef(name, &name_value);\n\n  bool result;\n  JSVM_CALL(OH_JSVM_HasProperty(getEnv(), obj_value, name_value, &result));\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::hasProperty", "index": 314, "label": 0}
{"input": "inline bool SocketStream::is_writable() const {\n  return select_write(sock_, write_timeout_sec_, write_timeout_usec_) > 0 &&\n         is_socket_alive(sock_);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SocketStream::is_writable", "index": 315, "label": 0}
{"input": "int JMat::loadgpg(std::string gpgfile){\n    FILE *gpgFile = NULL;\n    const char* fn = gpgfile.c_str();\n    if ((gpgFile = fopen(fn, \"rb\")) == NULL)return -1;\n    int rst = 0;\n    while(1){\n        gpg_hdr ghead;\n        memset(&ghead,0,sizeof(gpg_hdr));\n        fread(&ghead,sizeof(gpg_hdr),1,gpgFile);\n        char* arr=ghead.head;\n        if((arr[0]=='g')&&\n            (arr[1]=='p')&&\n            (arr[2]=='g')){\n\n            int imgSize  = ghead.size[0];\n            if(m_size<imgSize){\n                if((!m_ref)&&m_buf)free(m_buf);\n                m_buf = malloc(imgSize);\n            }\n            m_size = imgSize;\n            m_width = ghead.width[0];\n            m_height = ghead.height[0];\n            m_channel = ghead.channel[0];\n            m_bit = ghead.bit[0];\n            fread(m_buf, m_size, 1, gpgFile);\n        }else{\n            rst = -11;\n        }\n        break;\n    }\n    fclose(gpgFile);\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/jmat.cpp", "function_name": "JMat::loadgpg", "index": 316, "label": 0}
{"input": "static void test_tensor_dynsym()\n{\n  DynamicSGroup sym;\n  sym.addSymmetry(0,1);\n  sym.addSymmetry(2,3);\n  Tensor<int, 4> t(10,10,10,10);\n\n  t.setZero();\n\n  for (int l = 0; l < 10; l++) {\n    for (int k = l; k < 10; k++) {\n      for (int j = 0; j < 10; j++) {\n        for (int i = j; i < 10; i++) {\n          sym(t, i, j, k, l) = (i + j) * (k + l);\n        }\n      }\n    }\n  }\n\n  for (int l = 0; l < 10; l++) {\n    for (int k = 0; k < 10; k++) {\n      for (int j = 0; j < 10; j++) {\n        for (int i = 0; i < 10; i++) {\n          VERIFY_IS_EQUAL((t(i, j, k, l)), ((i + j) * (k + l)));\n        }\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_symmetry.cpp", "function_name": "test_tensor_dynsym", "index": 317, "label": 0}
{"input": "inline void seed_random(unsigned int seed)\n{\n#ifndef OPENCV_FLANN_USE_STD_RAND\n    cv::theRNG() = cv::RNG(seed);\n#else\n    std::srand(seed);\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/random.h", "function_name": "seed_random", "index": 318, "label": 0}
{"input": "inline void Value::UseCooIndices(int64_t* indices_data, size_t indices_num) {\n  ThrowOnError(GetApi().UseCooIndices(p_, indices_data, indices_num));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::UseCooIndices", "index": 319, "label": 0}
{"input": "inline\nSparseMatConstIterator_<_Tp> SparseMat::begin() const\n{\n    return SparseMatConstIterator_<_Tp>(this);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat::begin", "index": 320, "label": 0}
{"input": "void raise_assertion(Index size = SizeAtCompileType)\n{\n  \n  Matrix<float, SizeAtCompileType, 1> vf; vf.setRandom(size);\n  Matrix<double, SizeAtCompileType, 1> vd; vd.setRandom(size);\n  VERIFY_RAISES_ASSERT(vf=vd);\n  VERIFY_RAISES_ASSERT(vf+=vd);\n  VERIFY_RAISES_ASSERT(vf-=vd);\n  VERIFY_RAISES_ASSERT(vd=vf);\n  VERIFY_RAISES_ASSERT(vd+=vf);\n  VERIFY_RAISES_ASSERT(vd-=vf);\n\n  \n  \n\n#if 0 \n  VERIFY_RAISES_ASSERT(vd.dot(vf));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/mixingtypes.cpp", "function_name": "raise_assertion", "index": 321, "label": 0}
{"input": "void SparseMatrix<Scalar,_Options,_StorageIndex>::setFromTriplets(const InputIterators& begin, const InputIterators& end, DupFunctor dup_func)\n{\n  internal::set_from_triplets<InputIterators, SparseMatrix<Scalar,_Options,_StorageIndex>, DupFunctor>(begin, end, *this, dup_func);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseMatrix.h", "function_name": "SparseMatrix<Scalar,_Options,_StorageIndex>::setFromTriplets", "index": 322, "label": 0}
{"input": "triangular_solve_retval(const TriangularType& tri, const Rhs& rhs)\n    : m_triangularMatrix(tri), m_rhs(rhs)\n  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/SolveTriangular.h", "function_name": "triangular_solve_retval", "index": 323, "label": 0}
{"input": "void test_lscg()\n{\n  CALL_SUBTEST_1(test_lscg_T<double>());\n  CALL_SUBTEST_2(test_lscg_T<std::complex<double> >());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/lscg.cpp", "function_name": "test_lscg", "index": 324, "label": 0}
{"input": "linearExt() const\n  { return m_matrix.template block<int(Mode)==int(Projective)?HDim:Dim,Dim>(0,0); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "linearExt", "index": 325, "label": 0}
{"input": "void SparseQR<MatrixType,OrderingType>::analyzePattern(const MatrixType& mat)\n{\n  eigen_assert(mat.isCompressed() && \"SparseQR requires a sparse matrix in compressed mode. Call .makeCompressed() before passing it to SparseQR\");\n  \n  typename internal::conditional<MatrixType::IsRowMajor,QRMatrixType,const MatrixType&>::type matCpy(mat);\n  \n  OrderingType ord; \n  ord(matCpy, m_perm_c); \n  Index n = mat.cols();\n  Index m = mat.rows();\n  Index diagSize = (std::min)(m,n);\n  \n  if (!m_perm_c.size())\n  {\n    m_perm_c.resize(n);\n    m_perm_c.indices().setLinSpaced(n, 0,StorageIndex(n-1));\n  }\n  \n  \n  m_outputPerm_c = m_perm_c.inverse();\n  internal::coletree(matCpy, m_etree, m_firstRowElt, m_outputPerm_c.indices().data());\n  m_isEtreeOk = true;\n  \n  m_R.resize(m, n);\n  m_Q.resize(m, diagSize);\n  \n  \n  m_R.reserve(2*mat.nonZeros()); \n  m_Q.reserve(2*mat.nonZeros());\n  m_hcoeffs.resize(diagSize);\n  m_analysisIsok = true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseQR/SparseQR.h", "function_name": "SparseQR<MatrixType,OrderingType>::analyzePattern", "index": 326, "label": 0}
{"input": "void test_cxx11_eventcount()\n{\n  CALL_SUBTEST(test_basic_eventcount());\n  CALL_SUBTEST(test_stress_eventcount());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_eventcount.cpp", "function_name": "test_cxx11_eventcount", "index": 327, "label": 0}
{"input": "NdArray<dtype> bitwise_xor(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        return inArray1 ^ inArray2;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/bitwise_xor.hpp", "function_name": "bitwise_xor", "index": 328, "label": 0}
{"input": "void regression_bug_654()\n{\n  ArrayXf a = RowVectorXf(3);\n  VectorXf v = Array<float,1,Dynamic>(3);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/array_for_matrix.cpp", "function_name": "regression_bug_654", "index": 329, "label": 0}
{"input": "inline std::string ConstValueImpl<T>::GetStringTensorElement(size_t element_index) const {\n  size_t buffer_length;\n  ThrowOnError(GetApi().GetStringTensorElementLength(this->p_, element_index, &buffer_length));\n\n  std::string s;\n  s.resize(buffer_length);\n  ThrowOnError(GetApi().GetStringTensorElement(this->p_, buffer_length, element_index, &s[0]));\n  return s;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetStringTensorElement", "index": 330, "label": 0}
{"input": "void test_miscmatrices()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( miscMatrices(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( miscMatrices(Matrix4d()) );\n    CALL_SUBTEST_3( miscMatrices(MatrixXcf(3, 3)) );\n    CALL_SUBTEST_4( miscMatrices(MatrixXi(8, 12)) );\n    CALL_SUBTEST_5( miscMatrices(MatrixXcd(20, 20)) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/miscmatrices.cpp", "function_name": "test_miscmatrices", "index": 331, "label": 0}
{"input": "CoTryTask<Dispatcher::OutputTable> handle(IEnv &ienv,\n                                          const argparse::ArgumentParser &parser,\n                                          const Dispatcher::Args &args) {\n  auto &env = dynamic_cast<AdminEnv &>(ienv);\n  ENSURE_USAGE(args.empty());\n  Dispatcher::OutputTable table;\n\n  auto cid = flat::ChainId(parser.get<uint32_t>(\"chainId\"));\n  auto targetIds = parser.get<std::vector<uint64_t>>(\"targetIds\");\n  auto tids = transformTo<std::vector>(std::span{targetIds.begin(), targetIds.size()},\n                                       [](uint64_t id) { return flat::TargetId(id); });\n  auto res = co_await env.mgmtdClientGetter()->setPreferredTargetOrder(env.userInfo, cid, tids);\n  CO_RETURN_ON_ERROR(res);\n\n  statChainInfo(table, *res);\n  co_return table;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "fe4b26a64f431e6ba26cfa88a036c486850ecc55", "file_path": "src/client/cli/admin/SetPreferredTargetOrder.cc", "function_name": "handle", "index": 332, "label": 0}
{"input": "Optional<CalculatedStyleValue::CalculationResult> HypotCalculationNode::run_operation_if_possible(CalculationContext const& context, CalculationResolutionContext const& resolution_context) const\n{\n    \n    \n    \n    \n    \n\n    Optional<CSSNumericType> consistent_type;\n    double value = 0;\n\n    for (auto const& child : m_values) {\n        auto canonical_child = try_get_value_with_canonical_unit(child, context, resolution_context);\n        if (!canonical_child.has_value())\n            return {};\n\n        if (!consistent_type.has_value())\n            consistent_type = canonical_child->type();\n        else\n            consistent_type = consistent_type->consistent_type(canonical_child->type().value());\n\n        if (!consistent_type.has_value())\n            return {};\n\n        value += canonical_child->value() * canonical_child->value();\n    }\n\n    if (!consistent_type.has_value())\n        return {};\n\n    return CalculatedStyleValue::CalculationResult { sqrt(value), consistent_type };\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "8e9753eadbba3d3aa665566e357160aecf3a9482", "file_path": "Libraries/LibWeb/CSS/StyleValues/CalculatedStyleValue.cpp", "function_name": "HypotCalculationNode::run_operation_if_possible", "index": 333, "label": 0}
{"input": "void ValueImpl<T>::UseCsrIndices(int64_t* inner_data, size_t inner_num, int64_t* outer_data, size_t outer_num) {\n  ThrowOnError(GetApi().UseCsrIndices(this->p_, inner_data, inner_num, outer_data, outer_num));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ValueImpl<T>::UseCsrIndices", "index": 334, "label": 0}
{"input": "inline TypeInfo Session::GetOutputTypeInfo(size_t index) const {\n  OrtTypeInfo* out;\n  ThrowOnError(GetApi().SessionGetOutputTypeInfo(p_, index, &out));\n  return TypeInfo{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Session::GetOutputTypeInfo", "index": 335, "label": 0}
{"input": "void AudioTrack::start(int sampleRate, int sampleFormat, int channels, int bytesPerSample) {\n    LOGI(TAG, \"start %d %d %d %d\", sampleRate, sampleFormat, channels, bytesPerSample);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/AudioTrack.cpp", "function_name": "AudioTrack::start", "index": 336, "label": 0}
{"input": "TagRef<ValueRecorder> getRecorderWithTag(const TagSet &tag) { return Recorder::getRecorderWithTag<ValueRecorder>(tag); }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/common/monitor/Recorder.h", "function_name": "tag", "index": 337, "label": 0}
{"input": "inline cl_int clGetKernelInfo(cl_kernel p0, cl_kernel_info p1, size_t p2, void* p3, size_t* p4) { return clGetKernelInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetKernelInfo", "index": 338, "label": 0}
{"input": "static inline\nScalar_<_Tp> operator - (const Scalar_<_Tp>& a)\n{\n    return Scalar_<_Tp>(saturate_cast<_Tp>(-a.val[0]),\n                        saturate_cast<_Tp>(-a.val[1]),\n                        saturate_cast<_Tp>(-a.val[2]),\n                        saturate_cast<_Tp>(-a.val[3]));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "operator -", "index": 339, "label": 0}
{"input": "inline v_float32x8 v256_load_expand(const float16_t* ptr)\n{\n#if CV_FP16\n    \n   return v_float32x8(__lasx_xvfcvtl_s_h(__lasx_xvpermi_d(__lsx_vld((const __m128i*)ptr, 0), 0x10)));\n#else\n    float CV_DECL_ALIGNED(32) buf[8];\n    for (int i = 0; i < 8; i++)\n        buf[i] = (float)ptr[i];\n    return v256_load_aligned(buf);\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "v256_load_expand", "index": 340, "label": 0}
{"input": "SSLInit() {\n    OPENSSL_init_ssl(\n        OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);\n  }", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLInit", "index": 341, "label": 0}
{"input": "constexpr dtype cube(dtype inValue) noexcept\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        return inValue * inValue * inValue;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Utils/cube.hpp", "function_name": "cube", "index": 342, "label": 0}
{"input": "Index run(array<Index, NumIndices> const& indices, std::vector<DenseIndex> const&)\n  {\n    return array_get<RowMajor ? 0 : NumIndices - 1>(indices);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDimensions.h", "function_name": "std::vector<DenseIndex>", "index": 343, "label": 0}
{"input": "void UIBaseInput::SendInputEvent() const {\n  const auto value = NodeManager::Instance().GetAttribute<std::string>(\n      input_node_, GetTextAttributeType());\n\n  bool focused = NodeManager::Instance().GetAttribute<int>(\n                     input_node_, NODE_FOCUS_STATUS) == 1;\n\n  auto cursor = NodeManager::Instance().GetAttribute(\n      input_node_, GetSelectionAttributeType());\n\n  auto selectionStart = focused ? cursor->value[0].i32 : -1;\n  auto selectionEnd = focused ? cursor->value[1].i32 : -1;\n\n  const auto param = lepus::Dictionary::Create();\n  param->SetValue(\"value\", value);\n  param->SetValue(\"selectionStart\", selectionStart);\n  param->SetValue(\"selectionEnd\", selectionEnd);\n  param->SetValue(\"isComposing\", false);\n  CustomEvent event{Sign(), \"input\", \"detail\", lepus_value(param)};\n  context_->SendEvent(event);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SendInputEvent", "index": 344, "label": 0}
{"input": "typename internal::traits<MatrixType>::Scalar FullPivLU<MatrixType>::determinant() const\n{\n  eigen_assert(m_isInitialized && \"LU is not initialized.\");\n  eigen_assert(m_lu.rows() == m_lu.cols() && \"You can't take the determinant of a non-square matrix!\");\n  return Scalar(m_det_pq) * Scalar(m_lu.diagonal().prod());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/FullPivLU.h", "function_name": "FullPivLU<MatrixType>::determinant", "index": 345, "label": 0}
{"input": "inline\n    void bfly_generic(\n        Complex * Fout,\n        const size_t fstride,\n        int m,\n        int p\n        )\n    {\n      int u,k,q1,q;\n      Complex * twiddles = &m_twiddles[0];\n      Complex t;\n      int Norig = static_cast<int>(m_twiddles.size());\n      Complex * scratchbuf = &m_scratchBuf[0];\n\n      for ( u=0; u<m; ++u ) {\n        k=u;\n        for ( q1=0 ; q1<p ; ++q1 ) {\n          scratchbuf[q1] = Fout[ k  ];\n          k += m;\n        }\n\n        k=u;\n        for ( q1=0 ; q1<p ; ++q1 ) {\n          int twidx=0;\n          Fout[ k ] = scratchbuf[0];\n          for (q=1;q<p;++q ) {\n            twidx += static_cast<int>(fstride) * k;\n            if (twidx>=Norig) twidx-=Norig;\n            t=scratchbuf[q] * twiddles[twidx];\n            Fout[ k ] += t;\n          }\n          k += m;\n        }\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h", "function_name": "fstride", "index": 346, "label": 0}
{"input": "void centered_smooth_curve(const vector<double> & tab_mflops, vector<double> & smooth_tab_mflops,int window_half_width){\n  \n  int max_window_width=2*window_half_width+1;\n\n  int size=tab_mflops.size();\n\n  \n  for (int i=0 ; i < size ; i++){\n\n    deque<double> sample;\n\n    \n    sample.push_back(tab_mflops[i]);\n\n    for ( int j=1 ; j <= window_half_width ; j++ ){\n      \n      int before=i-j;\n      int after=i+j;\n      \n      if ((before>=0)&&(after<size)) \n\t{ \n\t  sample.push_front(tab_mflops[before]);\n\t  sample.push_back(tab_mflops[after]);\n\t}\n    }\n    \n    smooth_tab_mflops.push_back(weighted_mean(sample));\n    \n  }\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/data/smooth.cxx", "function_name": "centered_smooth_curve", "index": 347, "label": 0}
{"input": "NdArray<dtype> operator~(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_INTEGER(dtype);\n\n        const auto function = [](dtype value) -> dtype { return ~value; };\n\n        NdArray<dtype> returnArray(inArray.shape());\n\n        stl_algorithms::transform(inArray.cbegin(), inArray.cend(), returnArray.begin(), function);\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayOperators.hpp", "function_name": "operator~", "index": 348, "label": 0}
{"input": "static Matrixf melspectrogram(Vectorf &x, int sr, int n_fft, int n_hop,\n                        const std::string &win, bool center,\n                        const std::string &mode, float power,\n                        int n_mels, int fmin, int fmax){\n  Matrixcf X = stft(x, n_fft, n_hop, win, center, mode);\n  printf(\"x %d X rows %d cols %d\\n\",x.size(),X.rows(),X.cols());\n  Matrixf mel_basis = melfilter(sr, n_fft, n_mels, fmin, fmax);\n  Matrixf sp = spectrogram(X, power);\n  printf(\"sp rows %d cols %d\\n\",sp.rows(),sp.cols());\n  Matrixf mel = mel_basis*sp.transpose();\n  return mel;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/librosa.h", "function_name": "melspectrogram", "index": 349, "label": 0}
{"input": "static inline void write(FileStorage& fs, const std::vector<DMatch>& vec)\n{\n    cv::internal::VecWriterProxy<DMatch, 0> w(&fs);\n    w(vec);\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/persistence.hpp", "function_name": "write", "index": 350, "label": 0}
{"input": "typename MatrixType::RealScalar matrix_l1_norm(const MatrixType& m) {\n  return m.cwiseAbs().colwise().sum().maxCoeff();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/lu.cpp", "function_name": "matrix_l1_norm", "index": 351, "label": 0}
{"input": "inline bool is_connection_error() {\n#ifdef _WIN32\n  return WSAGetLastError() != WSAEWOULDBLOCK;\n#else\n  return errno != EINPROGRESS;\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "is_connection_error", "index": 352, "label": 0}
{"input": "inline\nMatx<_Tp, m, n> MatxCommaInitializer<_Tp, m, n>::operator *() const\n{\n    CV_DbgAssert( idx == n*m );\n    return *dst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "MatxCommaInitializer<_Tp, m, n>::operator *", "index": 353, "label": 0}
{"input": "float OffscreenCanvasRenderingContext2D::shadow_offset_x() const\n{\n    return drawing_state().shadow_offset_x;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::shadow_offset_x", "index": 354, "label": 0}
{"input": "CvSize(const cv::Size_<_Tp>& sz): width(cv::saturate_cast<int>(sz.width)), height(cv::saturate_cast<int>(sz.height)) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvSize", "index": 355, "label": 0}
{"input": "EIGEN_DONT_INLINE Scalar foo(const Scalar& x, const Scalar& y)\n{\n  using namespace std;\n\n  EIGEN_ASM_COMMENT(\"mybegin\");\n  \n  return x*2 - 1 + static_cast<Scalar>(pow(1+x,2)) + 2*sqrt(y*y+0) - 4 * sin(0+x) + 2 * cos(y+0) - exp(Scalar(-0.5)*x*x+0);\n  \n  EIGEN_ASM_COMMENT(\"myend\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "foo", "index": 356, "label": 0}
{"input": "MessageHelper::MessageHelper(MessageSource *messageSource, MessageCb* obj) {\n    this->messageSource = messageSource;\n    msgobj = obj;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/MessageHelper.cpp", "function_name": "MessageHelper::MessageHelper", "index": 357, "label": 0}
{"input": "NdArray<dtype> extract(const NdArray<bool>& condition, const NdArray<dtype>& arr)\n    {\n        if (condition.size() != arr.size())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"Input arguments 'condition' and 'arr' must have the same size.\");\n        }\n\n        std::vector<dtype> values;\n        for (decltype(arr.size()) i = 0; i < arr.size(); ++i)\n        {\n            if (condition[i])\n            {\n                values.push_back(arr[i]);\n            }\n        }\n\n        return NdArray<dtype>(values.begin(), values.end());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/extract.hpp", "function_name": "extract", "index": 358, "label": 0}
{"input": "std::vector<uint32_t> FixedAttentionWindowSizes(uint32_t window_size) {\n  return std::vector<uint32_t>(kNum, window_size);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.h", "function_name": "FixedAttentionWindowSizes", "index": 359, "label": 0}
{"input": "inline\nVec<_Tp, cn> normalize(const Vec<_Tp, cn>& v)\n{\n    double nv = norm(v);\n    return v * (nv ? 1./nv : 0.);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "normalize", "index": 360, "label": 0}
{"input": "int GhMat::cvtfloat(GpMat dst,void* stream) {\n    ppl::cv::cuda::ConvertTo<uint8_t,float,3>((cudaStream_t)stream,m_height,m_width,m_width*m_channel,(uint8_t*)m_buf, dst->m_stride,(float*)dst->m_buf, 1.0/255.0f,0.f);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/cuda/kmatcuda.cpp", "function_name": "GhMat::cvtfloat", "index": 361, "label": 0}
{"input": "~MMZone() {\n    if (used_) {\n      Zone* zone = reinterpret_cast<Zone*>(&data_);\n      zone->~Zone();\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "~MMZone", "index": 362, "label": 0}
{"input": "void SbsWriter::Insert(std::string name, absl::Span<const float> weights,\n                       Type type, const TensorInfo& tensor_info, float scale) {\n  impl_->Insert(name, weights, type, tensor_info, scale);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "e69bc3bc1c5e9b478662437a3bf7c9a0d9d2eace", "file_path": "compression/python/compression_clif_aux.cc", "function_name": "SbsWriter::Insert", "index": 363, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const ConstBlockXpr bottomLeftCorner(Index cRows, Index cCols) const\n{\n  return ConstBlockXpr(derived(), rows() - cRows, 0, cRows, cCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstBlockXpr bottomLeftCorner", "index": 364, "label": 0}
{"input": "double benchBasic(const MatrixType& mat, int iterations, int tries)\n{\n  const int rows = mat.rows();\n  const int cols = mat.cols();\n\n  MatrixType I(rows,cols);\n  MatrixType m(rows,cols);\n\n  initMatrix_identity(I);\n\n  Eigen::BenchTimer timer;\n  for(uint t=0; t<tries; ++t)\n  {\n    initMatrix_random(m);\n    timer.start();\n    benchBasic_loop<Mode>(I, m, iterations);\n    timer.stop();\n    cerr << m;\n  }\n  return timer.value();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/basicbenchmark.h", "function_name": "benchBasic", "index": 365, "label": 0}
{"input": "void operator()() {\n      for (;;) {\n        std::function<void()> fn;\n        {\n          std::unique_lock<std::mutex> lock(pool_.mutex_);\n\n          pool_.cond_.wait(\n              lock, [&] { return !pool_.jobs_.empty() || pool_.shutdown_; });\n\n          if (pool_.shutdown_ && pool_.jobs_.empty()) { break; }\n\n          fn = std::move(pool_.jobs_.front());\n          pool_.jobs_.pop_front();\n        }\n\n        assert(true == static_cast<bool>(fn));\n        fn();\n      }\n    }", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "operator()", "index": 366, "label": 0}
{"input": "inline Packet8f pshiftright(Packet8f v, int n)\n{\n#ifdef EIGEN_VECTORIZE_AVX2\n  return _mm256_cvtepi32_ps(_mm256_srli_epi32(_mm256_castps_si256(v), n));\n#else\n  __m128i lo = _mm_srli_epi32(_mm256_extractf128_si256(_mm256_castps_si256(v), 0), n);\n  __m128i hi = _mm_srli_epi32(_mm256_extractf128_si256(_mm256_castps_si256(v), 1), n);\n  return _mm256_cvtepi32_ps(_mm256_insertf128_si256(_mm256_castsi128_si256(lo), (hi), 1));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/MathFunctions.h", "function_name": "pshiftright", "index": 367, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    TensorReverseOp<const ReverseDimensions, Derived>\n    reverse(const ReverseDimensions& rev) {\n      return TensorReverseOp<const ReverseDimensions, Derived>(derived(), rev);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    TensorReverseOp<const ReverseDimensions, Derived>\n    reverse", "index": 368, "label": 0}
{"input": "Vec<_Tp, 4> inline conjugate(const Vec<_Tp, 4>& v)\n{\n    return Vec<_Tp, 4>(v[0], -v[1], -v[2], -v[3]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "conjugate", "index": 369, "label": 0}
{"input": "inline Index LUnumTempV(Index& m, Index& w, Index& t, Index& b)\n{\n  return (std::max)(m, (t+b)*w);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_Memory.h", "function_name": "LUnumTempV", "index": 370, "label": 0}
{"input": "inline typename _Tp::lane_type v_extract_n(const _Tp& a)\n{\n    return v_rotate_right<i>(a).get0();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_extract_n", "index": 371, "label": 0}
{"input": "MMArgs(MatMulEnv& env, MMPerKey& per_key, double scale,\n         const float* HWY_RESTRICT add, const RowPtrD& partial,\n         const RowPtrF& C)\n      : env(&env),\n        per_key(&per_key),\n        scale(scale),\n        add(add),\n        partial(partial),\n        C(C) {}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "MMArgs", "index": 372, "label": 0}
{"input": "explicit CompleteOrthogonalDecomposition(EigenBase<InputType>& matrix)\n    : m_cpqr(matrix.derived()),\n      m_zCoeffs((std::min)(matrix.rows(), matrix.cols())),\n      m_temp(matrix.cols())\n  {\n    computeInPlace();\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/CompleteOrthogonalDecomposition.h", "function_name": "CompleteOrthogonalDecomposition", "index": 373, "label": 0}
{"input": "void DevToolEnvHarmony::SetSwitch(const std::string &key, bool value,\n                                  bool is_persistent) {\n  tasm::LynxEnv::GetInstance().SetBoolLocalEnv(key, value);\n  if (is_persistent) {\n    SetPersistentSwitch(key, value);\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::SetSwitch", "index": 374, "label": 0}
{"input": "static std::string getStringUTF(JNIEnv *env, jstring obj) {\n        char *c_str = (char *) env->GetStringUTFChars(obj, nullptr);\n        std::string tmpString = std::string(c_str);\n        env->ReleaseStringUTFChars(obj, c_str);\n        return tmpString;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "getStringUTF", "index": 375, "label": 0}
{"input": "void check_ffmpeg_availibility() {\n    int result = system(\"ffmpeg -version\");\n\n    if (result == 0) {\n        std::cout << \"ffmpeg is available.\" << std::endl;\n    } else {\n        \n        std::cout << \"ffmpeg is not found. Please ensure that ffmpeg is installed \";\n        std::cout << \"and that its executable is included in your system's PATH. \";\n        exit(0);\n    }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/server.cpp", "function_name": "check_ffmpeg_availibility", "index": 376, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ntypename CastXpr<NewType>::Type\ncast() const\n{\n  return typename CastXpr<NewType>::Type(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h", "function_name": "typename CastXpr<NewType>::Type\ncast", "index": 377, "label": 0}
{"input": "void LynxRuntime::Destroy() {\n  LOGI(\"LynxRuntime::Destroy, runtime_id: \" << GetRuntimeId()\n                                            << \" this: \" << this);\n  if (state_ == State::kNotStarted) {\n    return;\n  }\n  cached_tasks_.clear();\n  ssr_global_event_cached_tasks_.clear();\n  callbacks_.clear();\n  DestroyAppAndNapi(!destroy_js_app_early_);\n\n  js_executor_->SetObserver(nullptr);\n  js_executor_->Destroy();\n  js_executor_ = nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/piper/js/lynx_runtime.cc", "function_name": "LynxRuntime::Destroy", "index": 378, "label": 0}
{"input": "static Tuple<FlyString, Optional<double>> options_convert_or_default(Optional<ImageEncodeOptions> options)\n{\n\n    if (!options.has_value()) {\n        return { \"image/png\"_fly_string, {} };\n    }\n\n    return { options->type, options->quality };\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "options_convert_or_default", "index": 379, "label": 0}
{"input": "void zeroSizedVector()\n{\n  VectorType t1;\n\n  if (VectorType::SizeAtCompileTime == Dynamic || VectorType::SizeAtCompileTime==0)\n  {\n    zeroReduction(t1);\n    VERIFY(t1.size() == 0);\n    VectorType t2(DenseIndex(0)); \n    VERIFY(t2.size() == 0);\n    zeroReduction(t2);\n\n    VERIFY(t1==t2);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/zerosized.cpp", "function_name": "zeroSizedVector", "index": 380, "label": 0}
{"input": "NdArray<dtype> bitwise_or(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        return inArray1 | inArray2;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/bitwise_or.hpp", "function_name": "bitwise_or", "index": 381, "label": 0}
{"input": "explicit inline SparseSelfAdjointView(MatrixType& matrix) : m_matrix(matrix)\n    {\n      eigen_assert(rows()==cols() && \"SelfAdjointView is only for squared matrices\");\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseSelfAdjointView.h", "function_name": "SparseSelfAdjointView", "index": 382, "label": 0}
{"input": "MatStoragePtr<MatT> GenerateMat(const Extents2D extents,\n                                hwy::ThreadPool& pool) {\n  gcpp::CompressWorkingSet ws;\n  auto mat =\n      std::make_unique<MatStorageT<MatT>>(\"mat\", extents.rows, extents.cols);\n  FloatPtr content = hwy::AllocateAligned<float>(mat->NumElements());\n  HWY_ASSERT(content);\n  const float scale =\n      SfpStream::kMax / (mat->NumElements() + hwy::Unpredictable1() - 1);\n  pool.Run(0, extents.rows, [&](const size_t r, size_t ) {\n    for (size_t c = 0; c < extents.cols; c++) {\n      float f = static_cast<float>(r * extents.cols + c) * scale;\n      if ((r + c) & 1) f = -f;  \n      content[r * extents.cols + c] = f;\n    }\n  });\n\n  CompressScaled(content.get(), mat->NumElements(), ws, *mat, pool);\n  mat->set_scale(0.6f);  \n  return mat;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "ops/bench_matmul.cc", "function_name": "GenerateMat", "index": 383, "label": 0}
{"input": "void AudioRenderer::release() {\n    audioTrack->stop();\n    delete audioTrack;\n    audioTrack = nullptr;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/AudioRenderer.cpp", "function_name": "AudioRenderer::release", "index": 384, "label": 0}
{"input": "CV_INLINE unsigned cvRandInt( CvRNG* rng )\n{\n    uint64 temp = *rng;\n    temp = (uint64)(unsigned)temp*CV_RNG_COEFF + (temp >> 32);\n    *rng = temp;\n    return (unsigned)temp;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvRandInt", "index": 385, "label": 0}
{"input": "inline int mpreal::set_exp (mp_exp_t e)\n{\n    int x = mpfr_set_exp(mpfr_ptr(), e);\n    MPREAL_MSVC_DEBUGVIEW_CODE;\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::set_exp", "index": 386, "label": 0}
{"input": "inline bool MemoryInfo::operator==(const MemoryInfo& o) const {\n  int comp_result = 0;\n  ThrowOnError(Ort::GetApi().CompareMemoryInfo(*this, o, &comp_result));\n  return comp_result == 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "MemoryInfo::operator==", "index": 387, "label": 0}
{"input": "Optional<String> Host::registrable_domain() const\n{\n    \n    auto public_suffix = this->public_suffix();\n    if (!public_suffix.has_value() || public_suffix == m_value.get<String>())\n        return OptionalNone {};\n\n    \n    auto const& host_string = m_value.get<String>();\n\n    \n    auto trailing_dot = host_string.ends_with('.') ? \".\"sv : \"\"sv;\n\n    \n    \n    auto registrable_domain = get_registrable_domain(host_string).value_or(\"*\"_string);\n\n    \n    VERIFY(registrable_domain.is_ascii());\n    VERIFY(!registrable_domain.ends_with('.'));\n\n    \n    return MUST(String::formatted(\"{}{}\", registrable_domain, trailing_dot));\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "b49b1b35e4d19c4171004b7eddb6eeac91f00a97", "file_path": "Libraries/LibURL/Host.cpp", "function_name": "Host::registrable_domain", "index": 388, "label": 0}
{"input": "void BindC(size_t M, const RowPtr<T>& C, MMParallel& parallel) {\n  if (!Allocator::ShouldBind()) return;\n\n  const IndexRangePartition ranges_np =\n      parallel.RangesOfNP(MMParallel::kMaxPackages, C.Cols(), kNR);\n  const size_t quantum = Allocator::QuantumBytes() / sizeof(T);\n  bool ok = true;\n  for (size_t pkg_idx = 0; pkg_idx < ranges_np.NumTasks(); ++pkg_idx) {\n    const IndexRange& cols_c = ranges_np.Range(pkg_idx);\n    const size_t node = parallel.Node(pkg_idx);\n    for (size_t im = 0; im < M; ++im) {\n      \n      const size_t begin = hwy::RoundUpTo(cols_c.begin(), quantum);\n      const size_t end = hwy::RoundDownTo(cols_c.end(), quantum);\n      ok &= Allocator::BindMemory(C.Row(im) + begin, (end - begin) * sizeof(T),\n                                  node);\n    }\n  }\n  if (HWY_UNLIKELY(!ok)) {\n    HWY_WARN(\"Failed to bind C (%zux%zu), %zu packages.\", M, C.Cols(),\n             ranges_np.NumTasks());\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "BindC", "index": 389, "label": 0}
{"input": "static int hf3fs_usrbio_open(struct thread_data *td, struct fio_file *f) {\n    int flags = 0;\n    if (td_write(td)) {\n        if (!read_only) {\n            flags = O_RDWR;\n        }\n    } else if (td_read(td)) {\n        if (!read_only) {\n            flags = O_RDWR;\n        } else {\n            flags = O_RDONLY;\n        }\n    }\n\n    f->fd = open(f->file_name, flags);\n    hf3fs_reg_fd(f->fd, 0);\n    td->o.open_files++;\n    return 0;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_open", "index": 390, "label": 0}
{"input": "void tofile(const NdArray<dtype>& inArray, const std::string& inFilename, const char inSep)\n    {\n        return inArray.tofile(inFilename, inSep);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/tofile.hpp", "function_name": "tofile", "index": 391, "label": 0}
{"input": "inline Quat<T> Quat<T>::asinh() const\n{\n    return cv::log(*this + cv::power(*this * *this + Quat<T>(1, 0, 0, 0), 0.5));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::asinh", "index": 392, "label": 0}
{"input": "void JSVMHelper::ThrowJsException(JSVM_Env env,\n                                  const std::string& error_message,\n                                  const std::string& error_stack) {\n  JSVM_CALL(\n      OH_JSVM_ThrowError(env, error_stack.c_str(), error_message.c_str()));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_helper.cc", "function_name": "JSVMHelper::ThrowJsException", "index": 393, "label": 0}
{"input": "static void CalcEulerAngles(\n      EulerAngles<Scalar, EulerSystem>& res,\n      const typename EulerAngles<Scalar, EulerSystem>::Matrix3& mat,\n      bool PositiveRangeAlpha,\n      bool PositiveRangeBeta,\n      bool PositiveRangeGamma)\n    {\n      CalcEulerAngles_imp(\n        res.angles(), mat,\n        typename internal::conditional<IsTaitBryan, internal::true_type, internal::false_type>::type());\n\n      if (IsAlphaOpposite == IsOdd)\n        res.alpha() = -res.alpha();\n        \n      if (IsBetaOpposite == IsOdd)\n        res.beta() = -res.beta();\n        \n      if (IsGammaOpposite == IsOdd)\n        res.gamma() = -res.gamma();\n      \n      \n      if (PositiveRangeAlpha && (res.alpha() < 0))\n        res.alpha() += Scalar(2 * EIGEN_PI);\n      \n      if (PositiveRangeBeta && (res.beta() < 0))\n        res.beta() += Scalar(2 * EIGEN_PI);\n      \n      if (PositiveRangeGamma && (res.gamma() < 0))\n        res.gamma() += Scalar(2 * EIGEN_PI);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/EulerAngles/EulerSystem.h", "function_name": "CalcEulerAngles", "index": 394, "label": 0}
{"input": "LshIndexParams(int table_number = 12, int key_size = 20, int multi_probe_level = 2)\n    {\n        (*this)[\"algorithm\"] = FLANN_INDEX_LSH;\n        \n        (*this)[\"table_number\"] = table_number;\n        \n        (*this)[\"key_size\"] = key_size;\n        \n        (*this)[\"multi_probe_level\"] = multi_probe_level;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/lsh_index.h", "function_name": "LshIndexParams", "index": 395, "label": 0}
{"input": "CV_INLINE CvMatND cvMatND()\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvMatND self = CV_STRUCT_INITIALIZER; return self;\n#else\n    return CvMatND();\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvMatND", "index": 396, "label": 0}
{"input": "NdArray<dtype> square(const NdArray<dtype>& inArray)\n    {\n        NdArray<dtype> returnArray(inArray.shape());\n        stl_algorithms::transform(inArray.cbegin(),\n                                  inArray.cend(),\n                                  returnArray.begin(),\n                                  [](dtype inValue) noexcept -> dtype { return square(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/square.hpp", "function_name": "square", "index": 397, "label": 0}
{"input": "inline const mpreal asec  (const mpreal& v, mp_rnd_t r = mpreal::get_default_rnd()) {   return acos (1/v, r);                      }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "asec", "index": 398, "label": 0}
{"input": "bool allclose(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2, double inTolerance = 1e-5)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        if (inArray1.shape() != inArray2.shape())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"input array dimensions are not consistant.\");\n        }\n\n        for (uint32 i = 0; i < inArray1.size(); ++i)\n        {\n            if (std::abs(inArray1[i] - inArray2[i]) > inTolerance)\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/allclose.hpp", "function_name": "allclose", "index": 399, "label": 0}
{"input": "bool JSVMRuntime::strictEquals(const piper::Object& a,\n                               const piper::Object& b) const {\n  JSVM_Value lhs = nullptr;\n  JSVMHelper::objectRef(a, &lhs);\n  JSVM_Value rhs = nullptr;\n  JSVMHelper::objectRef(b, &rhs);\n\n  bool result = false;\n  JSVM_CALL_RETURN(OH_JSVM_StrictEquals(getEnv(), lhs, rhs, &result), false);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::strictEquals", "index": 400, "label": 0}
{"input": "void divide_assign_using_evaluator(const DstXprType& dst, const SrcXprType& src)\n  {\n    typedef typename DstXprType::Scalar Scalar;\n    call_assignment(dst.const_cast_derived(), src.derived(), internal::div_assign_op<Scalar,typename SrcXprType::Scalar>());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/evaluators.cpp", "function_name": "divide_assign_using_evaluator", "index": 401, "label": 0}
{"input": "void WorkerLoop(int thread_id) {\n    std::unique_lock<std::mutex> l(mu_);\n    PerThread* pt = GetPerThread();\n    pt->pool = this;\n    pt->thread_id = thread_id;\n    Waiter w;\n    Task t;\n    while (!exiting_) {\n      if (pending_.empty()) {\n        \n        w.ready = false;\n        waiters_.push_back(&w);\n        while (!w.ready) {\n          w.cv.wait(l);\n        }\n        t = w.task;\n        w.task.f = nullptr;\n      } else {\n        \n        t = std::move(pending_.front());\n        pending_.pop_front();\n        if (pending_.empty()) {\n          empty_.notify_all();\n        }\n      }\n      if (t.f) {\n        mu_.unlock();\n        env_.ExecuteTask(t);\n        t.f = nullptr;\n        mu_.lock();\n      }\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/ThreadPool/SimpleThreadPool.h", "function_name": "thread_id", "index": 402, "label": 0}
{"input": "bool JSVMRuntime::setPropertyValue(piper::Object& object,\n                                   const piper::String& name,\n                                   const piper::Value& value) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(object, &obj_value);\n\n  JSVM_Value name_value = nullptr;\n  JSVMHelper::stringRef(name, &name_value);\n\n  JSVM_Value value_value = nullptr;\n  valueRef(value, &value_value);\n  JSVM_CALL_RETURN(\n      OH_JSVM_SetNamedProperty(getEnv(), obj_value, name.utf8(*this).c_str(),\n                               value_value),\n      false);\n  return true;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::setPropertyValue", "index": 403, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nstd::complex<float> RandomToTypeUniform<std::complex<float> >(uint64_t* state) {\n  return std::complex<float>(RandomToTypeUniform<float>(state),\n                             RandomToTypeUniform<float>(state));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "EIGEN_STRONG_INLINE\nstd::complex<float> RandomToTypeUniform<std::complex<float> >", "index": 404, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Packet2cd pgather<std::complex<double>, Packet2cd>(const std::complex<double>* from, Index stride)\n{\n  return Packet2cd(_mm256_set_pd(std::imag(from[1*stride]), std::real(from[1*stride]),\n\t\t\t\t std::imag(from[0*stride]), std::real(from[0*stride])));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/Complex.h", "function_name": "Packet2cd", "index": 405, "label": 0}
{"input": "PardisoImpl()\n    {\n      eigen_assert((sizeof(StorageIndex) >= sizeof(_INTEGER_t) && sizeof(StorageIndex) <= 8) && \"Non-supported index type\");\n      m_iparm.setZero();\n      m_msglvl = 0; \n      m_isInitialized = false;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PardisoSupport/PardisoSupport.h", "function_name": "PardisoImpl", "index": 406, "label": 0}
{"input": "void LoopThread::setUpdateFunc(std::function<int(int, long)> func) {\n    updateFunc = std::move(func);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/LoopThread.cpp", "function_name": "LoopThread::setUpdateFunc", "index": 407, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool indices_statically_known_to_increase() {\n  return indices_statically_known_to_increase_impl<T>::run();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "indices_statically_known_to_increase", "index": 408, "label": 0}
{"input": "CvMoments(const cv::Moments& m)\n    {\n        m00 = m.m00; m10 = m.m10; m01 = m.m01;\n        m20 = m.m20; m11 = m.m11; m02 = m.m02;\n        m30 = m.m30; m21 = m.m21; m12 = m.m12; m03 = m.m03;\n        mu20 = m.mu20; mu11 = m.mu11; mu02 = m.mu02;\n        mu30 = m.mu30; mu21 = m.mu21; mu12 = m.mu12; mu03 = m.mu03;\n        double am00 = std::abs(m.m00);\n        inv_sqrt_m00 = am00 > DBL_EPSILON ? 1./std::sqrt(am00) : 0;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/types_c.h", "function_name": "CvMoments", "index": 409, "label": 0}
{"input": "inline bool SSLClient::load_certs() {\n  auto ret = true;\n\n  std::call_once(initialize_cert_, [&]() {\n    std::lock_guard<std::mutex> guard(ctx_mutex_);\n    if (!ca_cert_file_path_.empty()) {\n      if (!SSL_CTX_load_verify_locations(ctx_, ca_cert_file_path_.c_str(),\n                                         nullptr)) {\n        ret = false;\n      }\n    } else if (!ca_cert_dir_path_.empty()) {\n      if (!SSL_CTX_load_verify_locations(ctx_, nullptr,\n                                         ca_cert_dir_path_.c_str())) {\n        ret = false;\n      }\n    } else {\n      auto loaded = false;\n#ifdef _WIN32\n      loaded =\n          detail::load_system_certs_on_windows(SSL_CTX_get_cert_store(ctx_));\n#elif defined(CPPHTTPLIB_USE_CERTS_FROM_MACOSX_KEYCHAIN) && defined(__APPLE__)\n#if TARGET_OS_OSX\n      loaded = detail::load_system_certs_on_macos(SSL_CTX_get_cert_store(ctx_));\n#endif \n#endif \n      if (!loaded) { SSL_CTX_set_default_verify_paths(ctx_); }\n    }\n  });\n\n  return ret;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::load_certs", "index": 410, "label": 0}
{"input": "NdArray(self_type&& inOtherArray) noexcept :\n            shape_(inOtherArray.shape_),\n            size_(inOtherArray.size_),\n            endianess_(inOtherArray.endianess_),\n            array_(inOtherArray.array_),\n            ownsPtr_(inOtherArray.ownsPtr_)\n        {\n            inOtherArray.shape_.rows = inOtherArray.shape_.cols = 0;\n            inOtherArray.size_                                  = 0;\n            inOtherArray.ownsPtr_                               = false;\n            inOtherArray.array_                                 = nullptr;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "NdArray", "index": 411, "label": 0}
{"input": "EIGEN_DEVICE_FUNC Quaternion<typename internal::traits<Derived>::Scalar>\nQuaternionBase<Derived>::slerp(const Scalar& t, const QuaternionBase<OtherDerived>& other) const\n{\n  EIGEN_USING_STD_MATH(acos)\n  EIGEN_USING_STD_MATH(sin)\n  const Scalar one = Scalar(1) - NumTraits<Scalar>::epsilon();\n  Scalar d = this->dot(other);\n  Scalar absD = numext::abs(d);\n\n  Scalar scale0;\n  Scalar scale1;\n\n  if(absD>=one)\n  {\n    scale0 = Scalar(1) - t;\n    scale1 = t;\n  }\n  else\n  {\n    \n    Scalar theta = acos(absD);\n    Scalar sinTheta = sin(theta);\n\n    scale0 = sin( ( Scalar(1) - t ) * theta) / sinTheta;\n    scale1 = sin( ( t * theta) ) / sinTheta;\n  }\n  if(d<Scalar(0)) scale1 = -scale1;\n\n  return Quaternion<Scalar>(scale0 * coeffs() + scale1 * other.coeffs());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "Quaternion<typename internal::traits<Derived>::Scalar>\nQuaternionBase<Derived>::slerp", "index": 412, "label": 0}
{"input": "NdArray<dtype> nonCentralChiSquared(const Shape& inShape, dtype inK = 1, dtype inLambda = 1)\n    {\n        return detail::nonCentralChiSquared(generator_, inShape, inK, inLambda);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/nonCentralChiSquared.hpp", "function_name": "nonCentralChiSquared", "index": 413, "label": 0}
{"input": "EIGEN_STRONG_INLINE void assignPacket(DstScalar* a, const Packet& b) const\n  { internal::pstoret<DstScalar,Packet,Alignment>(a,internal::pdiv(internal::ploadt<Packet,Alignment>(a),b)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/functors/AssignmentFunctors.h", "function_name": "assignPacket", "index": 414, "label": 0}
{"input": "static void test_conjugate()\n{\n  Tensor<std::complex<float>, 1> data1(3);\n  Tensor<std::complex<double>, 1> data2(3);\n  Tensor<int, 1> data3(3);\n  data1.setRandom();\n  data2.setRandom();\n  data3.setRandom();\n\n  Tensor<std::complex<float>, 1> conj1 = data1.conjugate();\n  Tensor<std::complex<double>, 1> conj2 = data2.conjugate();\n  Tensor<int, 1> conj3 = data3.conjugate();\n  for (int i = 0; i < 3; ++i) {\n    VERIFY_IS_APPROX(conj1(i), std::conj(data1(i)));\n    VERIFY_IS_APPROX(conj2(i), std::conj(data2(i)));\n    VERIFY_IS_APPROX(conj3(i), data3(i));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_of_complex.cpp", "function_name": "test_conjugate", "index": 415, "label": 0}
{"input": "void AfeWakeWord::Feed(const std::vector<int16_t>& data) {\n    if (afe_data_ == nullptr) {\n        return;\n    }\n    afe_iface_->feed(afe_data_, data.data());\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::Feed", "index": 416, "label": 0}
{"input": "inline CommaInitializer<Derived>\nDenseBase<Derived>::operator<<(const DenseBase<OtherDerived>& other)\n{\n  return CommaInitializer<Derived>(*static_cast<Derived *>(this), other);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CommaInitializer.h", "function_name": "DenseBase<Derived>::operator<<", "index": 417, "label": 0}
{"input": "void test_umeyama()\n{\n  for (int i=0; i<g_repeat; ++i)\n  {\n    const int num_elements = internal::random<int>(40,500);\n\n    \n    for (int dim=2; dim<8; ++dim)\n    {\n      CALL_SUBTEST_1(run_test<MatrixXd>(dim, num_elements));\n      CALL_SUBTEST_2(run_test<MatrixXf>(dim, num_elements));\n    }\n\n    CALL_SUBTEST_3((run_fixed_size_test<float, 2>(num_elements)));\n    CALL_SUBTEST_4((run_fixed_size_test<float, 3>(num_elements)));\n    CALL_SUBTEST_5((run_fixed_size_test<float, 4>(num_elements)));\n\n    CALL_SUBTEST_6((run_fixed_size_test<double, 2>(num_elements)));\n    CALL_SUBTEST_7((run_fixed_size_test<double, 3>(num_elements)));\n    CALL_SUBTEST_8((run_fixed_size_test<double, 4>(num_elements)));\n  }\n\n  \n  \n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/umeyama.cpp", "function_name": "test_umeyama", "index": 418, "label": 0}
{"input": "static void test_notification_single()\n{\n  ThreadPool thread_pool(1);\n\n  int counter = 0;\n  Eigen::Notification n;\n  std::function<void()> func = std::bind(&WaitAndAdd, &n, &counter);\n  thread_pool.Schedule(func);\n  sleep(1);\n\n  \n  VERIFY_IS_EQUAL(counter, 0);\n\n  \n  n.Notify();\n\n  sleep(1);\n\n  \n  VERIFY_IS_EQUAL(counter, 1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_notification.cpp", "function_name": "test_notification_single", "index": 419, "label": 0}
{"input": "void ordering_helper_at_plus_a(const MatrixType& A, MatrixType& symmat)\n{\n  MatrixType C;\n  C = A.transpose(); \n  for (int i = 0; i < C.rows(); i++) \n  {\n      for (typename MatrixType::InnerIterator it(C, i); it; ++it)\n        it.valueRef() = 0.0;\n  }\n  symmat = C + A;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/OrderingMethods/Ordering.h", "function_name": "ordering_helper_at_plus_a", "index": 420, "label": 0}
{"input": "IndexRangePartition RangesOfKC(size_t K) const {\n    return MaxSizePartition(IndexRange(0, K), kc_, kc_multiple_);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "K", "index": 421, "label": 0}
{"input": "NdArray<double> legendre_p(uint32 m, uint32 n, const NdArray<dtype>& inArrayX)\n    {\n        NdArray<double> returnArray(inArrayX.shape());\n\n        const auto function = [m, n](dtype x) -> double { return legendre_p(m, n, x); };\n\n        stl_algorithms::transform(inArrayX.cbegin(), inArrayX.cend(), returnArray.begin(), function);\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/legendre_p.hpp", "function_name": "legendre_p", "index": 422, "label": 0}
{"input": "void GDigit::asyncNetwav(int act,KWav* netwav){\n    if(act){\n        wenetThread->post(-11,netwav);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::asyncNetwav", "index": 423, "label": 0}
{"input": "inline Index blockInnerSize(Index bi) const\n    {\n      return (m_blockSize == Dynamic) ? (m_innerOffset[bi+1] - m_innerOffset[bi]) : m_blockSize;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "bi", "index": 424, "label": 0}
{"input": "std::string JSVMRuntime::utf8(const piper::String& str) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value str_value = nullptr;\n  JSVMHelper::stringRef(str, &str_value);\n  return JSVMHelper::JSStringToSTLString(str_value, getEnv());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::utf8", "index": 425, "label": 0}
{"input": "CV_INLINE  int  cvIncRefData( CvArr* arr )\n{\n    int refcount = 0;\n    if( CV_IS_MAT( arr ))\n    {\n        CvMat* mat = (CvMat*)arr;\n        if( mat->refcount != NULL )\n            refcount = ++*mat->refcount;\n    }\n    else if( CV_IS_MATND( arr ))\n    {\n        CvMatND* mat = (CvMatND*)arr;\n        if( mat->refcount != NULL )\n            refcount = ++*mat->refcount;\n    }\n    return refcount;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvIncRefData", "index": 426, "label": 0}
{"input": "inline\n  void pack(Scalar* blockA, const const_blas_data_mapper<Scalar,Index,StorageOrder>& lhs, Index cols, Index i, Index& count)\n  {\n    \n    for(Index k=0; k<i; k++)\n      for(Index w=0; w<BlockRows; w++)\n        blockA[count++] = lhs(i+w,k);           \n    \n    Index h = 0;\n    for(Index k=i; k<i+BlockRows; k++)\n    {\n      for(Index w=0; w<h; w++)\n        blockA[count++] = numext::conj(lhs(k, i+w)); \n\n      blockA[count++] = numext::real(lhs(k,k));   \n\n      for(Index w=h+1; w<BlockRows; w++)\n        blockA[count++] = lhs(i+w, k);          \n      ++h;\n    }\n    \n    for(Index k=i+BlockRows; k<cols; k++)\n      for(Index w=0; w<BlockRows; w++)\n        blockA[count++] = numext::conj(lhs(k, i+w)); \n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h", "function_name": "pack", "index": 427, "label": 0}
{"input": "static void run(DenseBase<Derived>& _this, const DenseBase<OtherDerived>& other)\n  {\n    if (_this.rows() == other.rows() && _this.cols() == other.cols()) return;\n\n    const Index num_new_elements = other.size() - _this.size();\n\n    const Index new_rows = Derived::RowsAtCompileTime==1 ? 1 : other.rows();\n    const Index new_cols = Derived::RowsAtCompileTime==1 ? other.cols() : 1;\n    _this.derived().m_storage.conservativeResize(other.size(),new_rows,new_cols);\n\n    if (num_new_elements > 0)\n      _this.tail(num_new_elements) = other.tail(num_new_elements);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "_this", "index": 428, "label": 0}
{"input": "inline UnownedValue KernelContext::GetOutput(size_t index, const std::vector<int64_t>& dims) const {\n  OrtValue* out = nullptr;\n  Ort::ThrowOnError(GetApi().KernelContext_GetOutput(ctx_, index, dims.data(), dims.size(), &out));\n  return UnownedValue(out);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelContext::GetOutput", "index": 429, "label": 0}
{"input": "bool evalSubExprsIfNeeded(DevicePointer scalar) {\n    EIGEN_UNUSED_VARIABLE(scalar);\n    eigen_assert(scalar == NULL);\n    return m_impl.evalSubExprsIfNeeded(m_buffer);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorEvalTo.h", "function_name": "scalar", "index": 430, "label": 0}
{"input": "void test_dense_storage()\n{\n  dense_storage_copy<int,Dynamic,Dynamic>();  \n  dense_storage_copy<int,Dynamic,3>();\n  dense_storage_copy<int,4,Dynamic>();\n  dense_storage_copy<int,4,3>();\n\n  dense_storage_copy<float,Dynamic,Dynamic>();\n  dense_storage_copy<float,Dynamic,3>();\n  dense_storage_copy<float,4,Dynamic>();  \n  dense_storage_copy<float,4,3>();\n  \n  dense_storage_assignment<int,Dynamic,Dynamic>();  \n  dense_storage_assignment<int,Dynamic,3>();\n  dense_storage_assignment<int,4,Dynamic>();\n  dense_storage_assignment<int,4,3>();\n\n  dense_storage_assignment<float,Dynamic,Dynamic>();\n  dense_storage_assignment<float,Dynamic,3>();\n  dense_storage_assignment<float,4,Dynamic>();  \n  dense_storage_assignment<float,4,3>();  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/dense_storage.cpp", "function_name": "test_dense_storage", "index": 431, "label": 0}
{"input": "MatrixType EigenSolver<MatrixType>::pseudoEigenvalueMatrix() const\n{\n  eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\");\n  const RealScalar precision = RealScalar(2)*NumTraits<RealScalar>::epsilon();\n  Index n = m_eivalues.rows();\n  MatrixType matD = MatrixType::Zero(n,n);\n  for (Index i=0; i<n; ++i)\n  {\n    if (internal::isMuchSmallerThan(numext::imag(m_eivalues.coeff(i)), numext::real(m_eivalues.coeff(i)), precision))\n      matD.coeffRef(i,i) = numext::real(m_eivalues.coeff(i));\n    else\n    {\n      matD.template block<2,2>(i,i) <<  numext::real(m_eivalues.coeff(i)), numext::imag(m_eivalues.coeff(i)),\n                                       -numext::imag(m_eivalues.coeff(i)), numext::real(m_eivalues.coeff(i));\n      ++i;\n    }\n  }\n  return matD;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/EigenSolver.h", "function_name": "EigenSolver<MatrixType>::pseudoEigenvalueMatrix", "index": 432, "label": 0}
{"input": "getSubMapper(Index i, Index j) const {\n    return const_blas_data_mapper<Scalar, Index, StorageOrder>(&(this->operator()(i, j)), this->m_stride);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/BlasUtil.h", "function_name": "getSubMapper", "index": 433, "label": 0}
{"input": "EspHi() : boot_button_(BOOT_BUTTON_GPIO),\n        audio_wake_button_(AUDIO_WAKE_BUTTON_GPIO),\n        move_wake_button_(MOVE_WAKE_BUTTON_GPIO)\n    {\n\n        InitializeButtons();\n        InitializeIot();\n        InitializeSpi();\n        InitializeLcdDisplay();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/esp_hi.cc", "function_name": "EspHi", "index": 434, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void pstoret(Scalar* to, const Packet& from)\n{\n  if(Alignment >= unpacket_traits<Packet>::alignment)\n    pstore(to, from);\n  else\n    pstoreu(to, from);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "pstoret", "index": 435, "label": 0}
{"input": "static void test_auto_resize()\n{\n  Tensor<int, 1> tensor1;\n  Tensor<int, 1> tensor2(3);\n  Tensor<int, 1> tensor3(5);\n  Tensor<int, 1> tensor4(7);\n\n  Tensor<int, 1> new_tensor(5);\n  new_tensor.setRandom();\n\n  tensor1 = tensor2 = tensor3 = tensor4 = new_tensor;\n\n  VERIFY_IS_EQUAL(tensor1.dimension(0), new_tensor.dimension(0));\n  VERIFY_IS_EQUAL(tensor2.dimension(0), new_tensor.dimension(0));\n  VERIFY_IS_EQUAL(tensor3.dimension(0), new_tensor.dimension(0));\n  VERIFY_IS_EQUAL(tensor4.dimension(0), new_tensor.dimension(0));\n  for (int i = 0; i < new_tensor.dimension(0); ++i) {\n    VERIFY_IS_EQUAL(tensor1(i), new_tensor(i));\n    VERIFY_IS_EQUAL(tensor2(i), new_tensor(i));\n    VERIFY_IS_EQUAL(tensor3(i), new_tensor(i));\n    VERIFY_IS_EQUAL(tensor4(i), new_tensor(i));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_assign.cpp", "function_name": "test_auto_resize", "index": 436, "label": 0}
{"input": "void generate_sparse_leastsquare_problem(Solver&, typename Solver::MatrixType& A, DenseMat& dA, int maxSize = 300, int options = ForceNonZeroDiag)\n{\n  typedef typename Solver::MatrixType Mat;\n  typedef typename Mat::Scalar Scalar;\n\n  int rows = internal::random<int>(1,maxSize);\n  int cols = internal::random<int>(1,rows);\n  double density = (std::max)(8./(rows*cols), 0.01);\n  \n  A.resize(rows,cols);\n  dA.resize(rows,cols);\n\n  initSparse<Scalar>(density, dA, A, options);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "generate_sparse_leastsquare_problem", "index": 437, "label": 0}
{"input": "void fillMatrix(float density, int rows, int cols,  EigenSparseTriMatrix& dst)\n{\n  dst.startFill(rows*cols*density);\n  for(int j = 0; j < cols; j++)\n  {\n    for(int i = 0; i < j; i++)\n    {\n      Scalar v = (internal::random<float>(0,1) < density) ? internal::random<Scalar>() : 0;\n      if (v!=0)\n        dst.fill(i,j) = v;\n    }\n    dst.fill(j,j) = internal::random<Scalar>();\n  }\n  dst.endFill();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/sparse_trisolver.cpp", "function_name": "fillMatrix", "index": 438, "label": 0}
{"input": "void UIBaseInput::InvokeMethod(\n    const std::string& method, const lepus::Value& args,\n    base::MoveOnlyClosure<void, int32_t, const lepus::Value&> callback) {\n  if (auto it = input_base_ui_method_map_.find(method);\n      it != input_base_ui_method_map_.end()) {\n    (this->*it->second)(args, std::move(callback));\n  } else {\n    UIBase::InvokeMethod(method, args, std::move(callback));\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::InvokeMethod", "index": 439, "label": 0}
{"input": "void eiToMtl(const EigenSparseMatrix& src, MtlSparse& dst)\n{\n  mtl::matrix::inserter<MtlSparse> ins(dst);\n  for (int j=0; j<src.cols(); ++j)\n    for (EigenSparseMatrix::InnerIterator it(src.derived(), j); it; ++it)\n      ins[it.index()][j] = it.value();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchSparseUtil.h", "function_name": "eiToMtl", "index": 440, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void compute_1D_Butterfly(\n      ComplexScalar* data, Index n, Index n_power_of_2) {\n    eigen_assert(isPowerOfTwo(n));\n    if (n > 8) {\n      compute_1D_Butterfly<Dir>(data, n / 2, n_power_of_2 - 1);\n      compute_1D_Butterfly<Dir>(data + n / 2, n / 2, n_power_of_2 - 1);\n      butterfly_1D_merge<Dir>(data, n, n_power_of_2);\n    } else if (n == 8) {\n      butterfly_8<Dir>(data);\n    } else if (n == 4) {\n      butterfly_4<Dir>(data);\n    } else if (n == 2) {\n      butterfly_2<Dir>(data);\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h", "function_name": "compute_1D_Butterfly", "index": 441, "label": 0}
{"input": "static inline uint64x2_t vmvnq_u64(uint64x2_t a)\n{\n    uint64x2_t vx = vreinterpretq_u64_u32(vdupq_n_u32(0xFFFFFFFF));\n    return veorq_u64(a, vx);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_neon.hpp", "function_name": "vmvnq_u64", "index": 442, "label": 0}
{"input": "static void test_small_to_big_type_cast()\n{\n  Tensor<float, 2> ftensor(20, 30);\n  ftensor.setRandom();\n  Tensor<double, 2> dtensor(20, 30);\n  dtensor = ftensor.cast<double>();\n\n  for (int i = 0; i < 20; ++i) {\n    for (int j = 0; j < 30; ++j) {\n      VERIFY_IS_APPROX(dtensor(i,j), static_cast<double>(ftensor(i,j)));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_casts.cpp", "function_name": "test_small_to_big_type_cast", "index": 443, "label": 0}
{"input": "static LayerConfig LayerConfigGemmaTiny(size_t model_dim) {\n  LayerConfig config;\n  config.model_dim = model_dim;\n  config.ff_hidden_dim = 256;\n  config.heads = 4;\n  config.kv_heads = 1;\n  config.qkv_dim = 16;\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.cc", "function_name": "LayerConfigGemmaTiny", "index": 444, "label": 0}
{"input": "void check_stdvector_quaternion(const QuaternionType&)\n{\n  typedef typename QuaternionType::Coefficients Coefficients;\n  QuaternionType x(Coefficients::Random()), y(Coefficients::Random());\n  std::vector<QuaternionType> v(10), w(20, y);\n  v[5] = x;\n  w[6] = v[5];\n  VERIFY_IS_APPROX(w[6], v[5]);\n  v = w;\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(w[i], v[i]);\n  }\n\n  v.resize(21);\n  v[20] = x;\n  VERIFY_IS_APPROX(v[20], x);\n  v.resize(22,y);\n  VERIFY_IS_APPROX(v[21], y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(v[22], x);\n  VERIFY((internal::UIntPtr)&(v[22]) == (internal::UIntPtr)&(v[21]) + sizeof(QuaternionType));\n\n  \n  \n  QuaternionType* ref = &w[0];\n  for(int i=0; i<30 || ((ref==&w[0]) && i<300); ++i)\n    v.push_back(w[i%w.size()]);\n  for(unsigned int i=23; i<v.size(); ++i)\n  {\n    VERIFY(v[i].coeffs()==w[(i-23)%w.size()].coeffs());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stdvector_overload.cpp", "function_name": "check_stdvector_quaternion", "index": 445, "label": 0}
{"input": "int AdcPdmAudioCodec::Read(int16_t* dest, int samples) {\n    if (input_enabled_) {\n        ESP_ERROR_CHECK_WITHOUT_ABORT(esp_codec_dev_read(input_dev_, (void*)dest, samples * sizeof(int16_t)));\n    }\n    return samples;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_codecs/adc_pdm_audio_codec.cc", "function_name": "AdcPdmAudioCodec::Read", "index": 446, "label": 0}
{"input": "static inline\ndouble norm(const Point3_<_Tp>& pt)\n{\n    return std::sqrt((double)pt.x*pt.x + (double)pt.y*pt.y + (double)pt.z*pt.z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "norm", "index": 447, "label": 0}
{"input": "inline const Product<Derived,OtherDerived,AliasFreeProduct>\nSparseMatrixBase<Derived>::operator*(const SparseMatrixBase<OtherDerived> &other) const\n{\n  return Product<Derived,OtherDerived,AliasFreeProduct>(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseProduct.h", "function_name": "SparseMatrixBase<Derived>::operator*", "index": 448, "label": 0}
{"input": "explicit inline BandMatrixWrapper(const CoefficientsType& coeffs, Index rows=_Rows, Index cols=_Cols, Index supers=_Supers, Index subs=_Subs)\n      : m_coeffs(coeffs),\n        m_rows(rows), m_supers(supers), m_subs(subs)\n    {\n      EIGEN_UNUSED_VARIABLE(cols);\n      \n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/BandMatrix.h", "function_name": "BandMatrixWrapper", "index": 449, "label": 0}
{"input": "void save_tree(FILE* stream, NodePtr tree)\n    {\n        save_value(stream, *tree);\n        if (tree->child1!=NULL) {\n            save_tree(stream, tree->child1);\n        }\n        if (tree->child2!=NULL) {\n            save_tree(stream, tree->child2);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kdtree_single_index.h", "function_name": "tree", "index": 450, "label": 0}
{"input": "const TensorCwiseBinaryOp<internal::scalar_min_op<Scalar>, const Derived, const TensorCwiseNullaryOp<internal::scalar_constant_op<Scalar>, const Derived> >\n    cwiseMin(Scalar threshold) const {\n      return cwiseMin(constant(threshold));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "threshold", "index": 451, "label": 0}
{"input": "void JSVMRuntime::valueRef(const piper::Value& value, JSVM_Value* result) {\n  JSVM_Env env = getEnv();\n\n  switch (value.kind()) {\n    case Value::ValueKind::UndefinedKind:\n      JSVM_CALL(OH_JSVM_GetUndefined(env, result));\n      break;\n    case Value::ValueKind::NullKind:\n      JSVM_CALL(OH_JSVM_GetNull(env, result));\n      break;\n    case Value::ValueKind::BooleanKind:\n      JSVM_CALL(OH_JSVM_GetBoolean(env, value.getBool(), result));\n      break;\n    case Value::ValueKind::NumberKind:\n      JSVM_CALL(OH_JSVM_CreateDouble(env, value.getNumber(), result));\n      break;\n    case Value::ValueKind::SymbolKind:\n      JSVMHelper::symbolRef(value.getSymbol(*this), result);\n      break;\n    case Value::ValueKind::StringKind:\n      JSVMHelper::stringRef(value.getString(*this), result);\n      break;\n    case Value::ValueKind::ObjectKind:\n      JSVMHelper::objectRef(value.getObject(*this), result);\n      break;\n    default:\n      abort();\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::valueRef", "index": 452, "label": 0}
{"input": "GDigit::~GDigit() {\n    if(m_status)stop();\n    recyle();\n    usleep(1000);\n    if(1){\n        curlThread->quit();\n        delete curlThread;\n        curlThread = nullptr;\n    }\n    if(1){\n        wenetThread->quit();\n        delete wenetThread;\n        wenetThread = nullptr;\n    }\n    if(1){\n        dispThread->removePending();\n        delete dispThread;\n        dispThread = nullptr;\n    }\n    if(1){\n        if(bnf_cache ){\n            delete bnf_cache ;\n            bnf_cache = nullptr;\n        }\n    }\n    if(1){\n        lock_munet->lock();\n        lock_munet->unlock();\n        delete lock_munet;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::~GDigit", "index": 453, "label": 0}
{"input": "bool optional<T>::has_value() const noexcept\n    {\n        return util::holds_alternative<T>(m_holder);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/optional.hpp", "function_name": "optional<T>::has_value", "index": 454, "label": 0}
{"input": "inline const mpreal nextbelow  (const mpreal& x)\n{\n    mpreal a(x);\n    mpfr_nextbelow(a.mp);\n    return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "nextbelow", "index": 455, "label": 0}
{"input": "EIGEN_STRONG_INLINE void preloadKernel() {\n    \n    \n    const Scalar* in_place = m_kernelImpl.data();\n    if (in_place) {\n      m_kernel = in_place;\n      m_local_kernel = false;\n    } else {\n      size_t kernel_sz = m_kernelImpl.dimensions().TotalSize() * sizeof(Scalar);\n      Scalar* local = (Scalar*)m_device.allocate(kernel_sz);\n      typedef TensorEvalToOp<const KernelArgType> EvalTo;\n      EvalTo evalToTmp(local, m_kernelArg);\n      const bool PacketAccess = internal::IsVectorizable<GpuDevice, KernelArgType>::value;\n      internal::TensorExecutor<const EvalTo, GpuDevice, PacketAccess>::run(evalToTmp, m_device);\n\n      m_kernel = local;\n      m_local_kernel = true;\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorConvolution.h", "function_name": "preloadKernel", "index": 456, "label": 0}
{"input": "inline void ClientImpl::set_default_headers(Headers headers) {\n  default_headers_ = std::move(headers);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_default_headers", "index": 457, "label": 0}
{"input": "void realRoots_to_monicPolynomial_scalar()\n{\n  CALL_SUBTEST_2( (realRoots_to_monicPolynomial_test<_Scalar,2>(2)) );\n  CALL_SUBTEST_3( (realRoots_to_monicPolynomial_test<_Scalar,3>(3)) );\n  CALL_SUBTEST_4( (realRoots_to_monicPolynomial_test<_Scalar,4>(4)) );\n  CALL_SUBTEST_5( (realRoots_to_monicPolynomial_test<_Scalar,5>(5)) );\n  CALL_SUBTEST_6( (realRoots_to_monicPolynomial_test<_Scalar,6>(6)) );\n  CALL_SUBTEST_7( (realRoots_to_monicPolynomial_test<_Scalar,7>(7)) );\n  CALL_SUBTEST_8( (realRoots_to_monicPolynomial_test<_Scalar,17>(17)) );\n\n  CALL_SUBTEST_9( (realRoots_to_monicPolynomial_test<_Scalar,Dynamic>(\n          internal::random<int>(18,26) )) );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/polynomialutils.cpp", "function_name": "realRoots_to_monicPolynomial_scalar", "index": 458, "label": 0}
{"input": "inline __m128i _v128_blendv_epi8(const __m128i& a, const __m128i& b, const __m128i& mask)\n{ return _mm_xor_si128(a, _mm_and_si128(_mm_xor_si128(b, a), mask)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_blendv_epi8", "index": 459, "label": 0}
{"input": "constexpr AER(double inAz, double inEl, double inRange = 1.) noexcept :\n            az(inAz),\n            el(inEl),\n            range(inRange)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/ReferenceFrames/AER.hpp", "function_name": "AER", "index": 460, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half lgamma(const Eigen::half& a) {\n  return Eigen::half(Eigen::numext::lgamma(static_cast<float>(a)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half lgamma", "index": 461, "label": 0}
{"input": "int hierarchicalClustering(const Matrix<typename Distance::ElementType>& points, Matrix<typename Distance::CentersType>& centers,\n                           const KMeansIndexParams& params, Distance d = Distance())\n{\n    KMeansIndex<Distance> kmeans(points, params, d);\n    kmeans.buildIndex();\n\n    int clusterNum = kmeans.getClusterCenters(centers);\n    return clusterNum;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/flann_base.hpp", "function_name": "hierarchicalClustering", "index": 462, "label": 0}
{"input": "EIGEN_STRONG_INLINE void pstoreu<double>(double*  to, const Packet2d& from) { pstore<double>(to, from); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pstoreu", "index": 463, "label": 0}
{"input": "BDCSVD<typename MatrixBase<Derived>::PlainObject>\nMatrixBase<Derived>::bdcSvd(unsigned int computationOptions) const\n{\n  return BDCSVD<PlainObject>(*this, computationOptions);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/BDCSVD.h", "function_name": "MatrixBase<Derived>::bdcSvd", "index": 464, "label": 0}
{"input": "std::shared_ptr<Context> Context::CreateContext(bool use_lepusng,\n                                                bool disable_tracing_gc,\n                                                int runtime_mode) {\n  if (use_lepusng) {\n    TRACE_EVENT(LYNX_TRACE_CATEGORY, CONTEXT_CREATE_QUICK_CONTEXT);\n    return std::make_shared<QuickContext>(disable_tracing_gc, runtime_mode);\n  } else {\n    TRACE_EVENT(LYNX_TRACE_CATEGORY, CONTEXT_CREATE_VM_CONTEXT);\n#if !ENABLE_JUST_LEPUSNG\n    return std::make_shared<VMContext>();\n#else\n    LOGE(\"lepusng sdk do not support vm context\");\n    assert(false);\n    return NULL;\n#endif\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/vm/lepus/context.cc", "function_name": "Context::CreateContext", "index": 465, "label": 0}
{"input": "void test_polynomialsolver()\n{\n  for(int i = 0; i < g_repeat; i++)\n  {\n    CALL_SUBTEST_1( (polynomialsolver<float,1>(1)) );\n    CALL_SUBTEST_2( (polynomialsolver<double,2>(2)) );\n    CALL_SUBTEST_3( (polynomialsolver<double,3>(3)) );\n    CALL_SUBTEST_4( (polynomialsolver<float,4>(4)) );\n    CALL_SUBTEST_5( (polynomialsolver<double,5>(5)) );\n    CALL_SUBTEST_6( (polynomialsolver<float,6>(6)) );\n    CALL_SUBTEST_7( (polynomialsolver<float,7>(7)) );\n    CALL_SUBTEST_8( (polynomialsolver<double,8>(8)) );\n\n    CALL_SUBTEST_9( (polynomialsolver<float,Dynamic>(\n            internal::random<int>(9,13)\n            )) );\n    CALL_SUBTEST_10((polynomialsolver<double,Dynamic>(\n            internal::random<int>(9,13)\n            )) );\n    CALL_SUBTEST_11((polynomialsolver<float,Dynamic>(1)) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/polynomialsolver.cpp", "function_name": "test_polynomialsolver", "index": 466, "label": 0}
{"input": "void Parser::parse_stringifier(HashMap<ByteString, ByteString>& extended_attributes, Interface& interface)\n{\n    assert_string(\"stringifier\"sv);\n    consume_whitespace();\n    interface.has_stringifier = true;\n    if (lexer.next_is(\"attribute\"sv) || lexer.next_is(\"inherit\"sv) || lexer.next_is(\"readonly\"sv)) {\n        parse_attribute(extended_attributes, interface);\n        interface.stringifier_attribute = interface.attributes.last();\n        interface.stringifier_extended_attributes = interface.stringifier_attribute->extended_attributes;\n    } else {\n        interface.stringifier_extended_attributes = move(extended_attributes);\n        assert_specific(';');\n    }\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "41a6ebfba2ff35631c31ded447bc7772af1d6367", "file_path": "Libraries/LibIDL/IDLParser.cpp", "function_name": "Parser::parse_stringifier", "index": 467, "label": 0}
{"input": "inline\nMatIterator_<_Tp> Mat::end()\n{\n    if (empty())\n        return MatIterator_<_Tp>();\n    CV_DbgAssert( elemSize() == sizeof(_Tp) );\n    MatIterator_<_Tp> it((Mat_<_Tp>*)this);\n    it += total();\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat::end", "index": 468, "label": 0}
{"input": "inline cl_int clGetProgramInfo(cl_program p0, cl_program_info p1, size_t p2, void* p3, size_t* p4) { return clGetProgramInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetProgramInfo", "index": 469, "label": 0}
{"input": "inline void MatrixBase<Derived>::applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>& j)\n{\n  ColXpr x(this->col(p));\n  ColXpr y(this->col(q));\n  internal::apply_rotation_in_the_plane(x, y, j.transpose());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Jacobi/Jacobi.h", "function_name": "MatrixBase<Derived>::applyOnTheRight", "index": 470, "label": 0}
{"input": "~EventCount() {\n    \n    eigen_assert((state_.load() & (kStackMask | kWaiterMask)) == kStackMask);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/ThreadPool/EventCount.h", "function_name": "~EventCount", "index": 471, "label": 0}
{"input": "inline const mpreal bessely0(const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(y0     );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "bessely0", "index": 472, "label": 0}
{"input": "void UIBaseInput::SetSelectionRange(\n    const lepus::Value& args,\n    base::MoveOnlyClosure<void, int32_t, const lepus::Value&> callback) {\n  if (args.IsTable()) {\n    const auto params = args.Table();\n    const auto& start = params->GetValue(\"selectionStart\");\n    const auto& end = params->GetValue(\"selectionEnd\");\n    if (start.IsNumber() && end.IsNumber()) {\n      NodeManager::Instance().SetAttributeWithNumberValue(\n          input_node_, GetSelectionAttributeType(),\n          static_cast<int32_t>(start.Number()),\n          static_cast<int32_t>(end.Number()));\n\n      callback(LynxGetUIResult::SUCCESS, lepus::Value());\n      return;\n    }\n  }\n  const auto ret = lepus::Dictionary::Create();\n  ret->SetValue(\"err\", \"selection is not assigned\");\n  callback(LynxGetUIResult::PARAM_INVALID, lepus::Value(ret));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SetSelectionRange", "index": 473, "label": 0}
{"input": "void test_stddeque()\n{\n  \n  CALL_SUBTEST_1(check_stddeque_matrix(Vector2f()));\n  CALL_SUBTEST_1(check_stddeque_matrix(Matrix3f()));\n  CALL_SUBTEST_2(check_stddeque_matrix(Matrix3d()));\n\n  \n  CALL_SUBTEST_1(check_stddeque_matrix(Matrix2f()));\n  CALL_SUBTEST_1(check_stddeque_matrix(Vector4f()));\n  CALL_SUBTEST_1(check_stddeque_matrix(Matrix4f()));\n  CALL_SUBTEST_2(check_stddeque_matrix(Matrix4d()));\n\n  \n  CALL_SUBTEST_3(check_stddeque_matrix(MatrixXd(1,1)));\n  CALL_SUBTEST_3(check_stddeque_matrix(VectorXd(20)));\n  CALL_SUBTEST_3(check_stddeque_matrix(RowVectorXf(20)));\n  CALL_SUBTEST_3(check_stddeque_matrix(MatrixXcf(10,10)));\n\n  \n  CALL_SUBTEST_4(check_stddeque_transform(Affine2f()));\n  CALL_SUBTEST_4(check_stddeque_transform(Affine3f()));\n  CALL_SUBTEST_4(check_stddeque_transform(Affine3d()));\n\n  \n  CALL_SUBTEST_5(check_stddeque_quaternion(Quaternionf()));\n  CALL_SUBTEST_5(check_stddeque_quaternion(Quaterniond()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stddeque.cpp", "function_name": "test_stddeque", "index": 474, "label": 0}
{"input": "void msvc_workaround()\n{\n  const Foo::Bar a;\n  const Foo::Bar b;\n  std::max EIGEN_NOT_A_MACRO (a,b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/jacobisvd.cpp", "function_name": "msvc_workaround", "index": 475, "label": 0}
{"input": "void setDay(int day)\n        {\n            if (day < 1)\n            {\n                throw std::invalid_argument(\"input day must be greater than one\");\n            }\n            if (day > MAX_DAY)\n            {\n                throw std::invalid_argument(\"input day must be less than DateTime::MAX_DAY\");\n            }\n            day_ = day;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/DateTime/DateTime.hpp", "function_name": "day", "index": 476, "label": 0}
{"input": "void test_array_replicate()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( replicate(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( replicate(Vector2f()) );\n    CALL_SUBTEST_3( replicate(Vector3d()) );\n    CALL_SUBTEST_4( replicate(Vector4f()) );\n    CALL_SUBTEST_5( replicate(VectorXf(16)) );\n    CALL_SUBTEST_6( replicate(VectorXcd(10)) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/array_replicate.cpp", "function_name": "test_array_replicate", "index": 477, "label": 0}
{"input": "v_reg<_Tp2, n2> reinterpret_as() const\n    {\n        size_t bytes = std::min(sizeof(_Tp2)*n2, sizeof(_Tp)*n);\n        v_reg<_Tp2, n2> c;\n        std::memcpy(&c.s[0], &s[0], bytes);\n        return c;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_cpp.hpp", "function_name": "reinterpret_as", "index": 478, "label": 0}
{"input": "void alignedboxCastTests(const BoxType& _box)\n{\n  \n  typedef typename BoxType::Scalar Scalar;\n  typedef Matrix<Scalar, BoxType::AmbientDimAtCompileTime, 1> VectorType;\n\n  const Index dim = _box.dim();\n\n  VectorType p0 = VectorType::Random(dim);\n  VectorType p1 = VectorType::Random(dim);\n\n  BoxType b0(dim);\n\n  b0.extend(p0);\n  b0.extend(p1);\n\n  const int Dim = BoxType::AmbientDimAtCompileTime;\n  typedef typename GetDifferentType<Scalar>::type OtherScalar;\n  AlignedBox<OtherScalar,Dim> hp1f = b0.template cast<OtherScalar>();\n  VERIFY_IS_APPROX(hp1f.template cast<Scalar>(),b0);\n  AlignedBox<Scalar,Dim> hp1d = b0.template cast<Scalar>();\n  VERIFY_IS_APPROX(hp1d.template cast<Scalar>(),b0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_alignedbox.cpp", "function_name": "alignedboxCastTests", "index": 479, "label": 0}
{"input": "void test_powers_32bit() {\n  for (int expon = 1; expon < 31; expon++) {\n    int32_t div = (1 << expon);\n    for (int num_expon = 0; num_expon < 32; num_expon++) {\n      int32_t start_num = (1 << num_expon) - 100;\n      int32_t end_num = (1 << num_expon) + 100;\n      if (start_num < 0)\n        start_num = 0;\n      for (int32_t num = start_num; num < end_num; num++) {\n        Eigen::internal::TensorIntDivisor<int32_t> divider =\n          Eigen::internal::TensorIntDivisor<int32_t>(div);\n        int32_t result = num/div;\n        int32_t result_op = divider.divide(num);\n        VERIFY_IS_EQUAL(result_op, result);\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_intdiv.cpp", "function_name": "test_powers_32bit", "index": 480, "label": 0}
{"input": "typename Eigen::internal::enable_if<(T::Flags&RowMajorBit)==0, typename T::ColXpr>::type\ninnervec(T& A, Index i)\n{\n  return A.col(i);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_block.cpp", "function_name": "innervec", "index": 481, "label": 0}
{"input": "static void test_strides() {\n  Tensor<float, 1, DataLayout> input(13);\n  Tensor<float, 1, DataLayout> kernel(3);\n  input.setRandom();\n  kernel.setRandom();\n\n  Eigen::array<ptrdiff_t, 1> dims;\n  dims[0] = 0;\n  Eigen::array<ptrdiff_t, 1> stride_of_3;\n  stride_of_3[0] = 3;\n  Eigen::array<ptrdiff_t, 1> stride_of_2;\n  stride_of_2[0] = 2;\n\n  Tensor<float, 1, DataLayout> result;\n  result = input.stride(stride_of_3).convolve(kernel, dims).stride(stride_of_2);\n\n  VERIFY_IS_EQUAL(result.dimension(0), 2);\n  VERIFY_IS_APPROX(result(0), (input(0)*kernel(0) + input(3)*kernel(1) +\n                               input(6)*kernel(2)));\n  VERIFY_IS_APPROX(result(1), (input(6)*kernel(0) + input(9)*kernel(1) +\n                               input(12)*kernel(2)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_convolution.cpp", "function_name": "test_strides", "index": 482, "label": 0}
{"input": "inline void GpuHelper::draw(GLenum mode, uint start, uint end)\n{\n    glDrawArrays(mode, start, end-start);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/gpuhelper.h", "function_name": "GpuHelper::draw", "index": 483, "label": 0}
{"input": "CvPoint3D64f(const std::initializer_list<_Tp> list)\n    {\n        CV_Assert(list.size() == 0 || list.size() == 3);\n        x = y = z = 0;\n        if (list.size() == 3)\n        {\n            x = list.begin()[0]; y = list.begin()[1]; z = list.begin()[2];\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvPoint3D64f", "index": 484, "label": 0}
{"input": "NdArray<dtype> laplace(const Shape& inShape, dtype inLoc = 0, dtype inScale = 1)\n    {\n        return detail::laplace(generator_, inShape, inLoc, inScale);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/laplace.hpp", "function_name": "laplace", "index": 485, "label": 0}
{"input": "EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS\nPacket patan(const Packet& a) { using std::atan; return atan(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "patan", "index": 486, "label": 0}
{"input": "void VERIFY_EQUAL(TensorUInt128<uint64_t, uint64_t> actual, uint128_t expected) {\n  bool matchl = actual.lower() == static_cast<uint64_t>(expected);\n  bool matchh = actual.upper() == static_cast<uint64_t>(expected >> 64);\n  if (!matchl || !matchh) {\n    const char* testname = g_test_stack.back().c_str();\n    std::cerr << \"Test \" << testname << \" failed in \" << __FILE__\n              << \" (\" << __LINE__ << \")\"\n              << std::endl;\n    abort();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_uint128.cpp", "function_name": "VERIFY_EQUAL", "index": 487, "label": 0}
{"input": "LevenbergMarquardtSpace::Status\nLevenbergMarquardt<FunctorType,Scalar>::lmdif1(\n        FunctorType &functor,\n        FVectorType  &x,\n        Index *nfev,\n        const Scalar tol\n        )\n{\n    Index n = x.size();\n    Index m = functor.values();\n\n    \n    if (n <= 0 || m < n || tol < 0.)\n        return LevenbergMarquardtSpace::ImproperInputParameters;\n\n    NumericalDiff<FunctorType> numDiff(functor);\n    \n    LevenbergMarquardt<NumericalDiff<FunctorType>, Scalar > lm(numDiff);\n    lm.parameters.ftol = tol;\n    lm.parameters.xtol = tol;\n    lm.parameters.maxfev = 200*(n+1);\n\n    LevenbergMarquardtSpace::Status info = LevenbergMarquardtSpace::Status(lm.minimize(x));\n    if (nfev)\n        * nfev = lm.nfev;\n    return info;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h", "function_name": "LevenbergMarquardt<FunctorType,Scalar>::lmdif1", "index": 488, "label": 0}
{"input": "void LLT<_MatrixType,_UpLo>::_solve_impl(const RhsType &rhs, DstType &dst) const\n{\n  dst = rhs;\n  solveInPlace(dst);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "LLT<_MatrixType,_UpLo>::_solve_impl", "index": 489, "label": 0}
{"input": "inline size_t CustomOpApi::KernelContext_GetOutputCount(const OrtKernelContext* context) {\n  size_t out;\n  ThrowOnError(api_.KernelContext_GetOutputCount(context, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::KernelContext_GetOutputCount", "index": 490, "label": 0}
{"input": "void compare_bdc_jacobi(const MatrixType& a = MatrixType(), unsigned int computationOptions = 0)\n{\n  MatrixType m = MatrixType::Random(a.rows(), a.cols());\n  BDCSVD<MatrixType> bdc_svd(m);\n  JacobiSVD<MatrixType> jacobi_svd(m);\n  VERIFY_IS_APPROX(bdc_svd.singularValues(), jacobi_svd.singularValues());\n  if(computationOptions & ComputeFullU) VERIFY_IS_APPROX(bdc_svd.matrixU(), jacobi_svd.matrixU());\n  if(computationOptions & ComputeThinU) VERIFY_IS_APPROX(bdc_svd.matrixU(), jacobi_svd.matrixU());\n  if(computationOptions & ComputeFullV) VERIFY_IS_APPROX(bdc_svd.matrixV(), jacobi_svd.matrixV());\n  if(computationOptions & ComputeThinV) VERIFY_IS_APPROX(bdc_svd.matrixV(), jacobi_svd.matrixV());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/bdcsvd.cpp", "function_name": "compare_bdc_jacobi", "index": 491, "label": 0}
{"input": "static void test_simple()\n{\n  Tensor<float, 1, ColMajor> vec1(6);\n  Tensor<float, 1, ColMajor, int> vec2(6);\n\n  vec1(0) = 4.0;  vec2(0) = 0.0;\n  vec1(1) = 8.0;  vec2(1) = 1.0;\n  vec1(2) = 15.0; vec2(2) = 2.0;\n  vec1(3) = 16.0; vec2(3) = 3.0;\n  vec1(4) = 23.0; vec2(4) = 4.0;\n  vec1(5) = 42.0; vec2(5) = 5.0;\n\n  float data3[6];\n  TensorMap<Tensor<float, 1, ColMajor>> vec3(data3, 6);\n  vec3 = vec1.sqrt();\n  float data4[6];\n  TensorMap<Tensor<float, 1, ColMajor, int>> vec4(data4, 6);\n  vec4 = vec2.square();\n\n  VERIFY_IS_APPROX(vec3(0), sqrtf(4.0));\n  VERIFY_IS_APPROX(vec3(1), sqrtf(8.0));\n  VERIFY_IS_APPROX(vec3(2), sqrtf(15.0));\n  VERIFY_IS_APPROX(vec3(3), sqrtf(16.0));\n  VERIFY_IS_APPROX(vec3(4), sqrtf(23.0));\n  VERIFY_IS_APPROX(vec3(5), sqrtf(42.0));\n\n  VERIFY_IS_APPROX(vec4(0), 0.0f);\n  VERIFY_IS_APPROX(vec4(1), 1.0f);\n  VERIFY_IS_APPROX(vec4(2), 2.0f * 2.0f);\n  VERIFY_IS_APPROX(vec4(3), 3.0f * 3.0f);\n  VERIFY_IS_APPROX(vec4(4), 4.0f * 4.0f);\n  VERIFY_IS_APPROX(vec4(5), 5.0f * 5.0f);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_mixed_indices.cpp", "function_name": "test_simple", "index": 492, "label": 0}
{"input": "static\nQuat<T> createFromAxisRot(int axis, const T theta)\n{\n    if (axis == 0)\n        return Quat<T>::createFromXRot(theta);\n    if (axis == 1)\n        return Quat<T>::createFromYRot(theta);\n    if (axis == 2)\n        return Quat<T>::createFromZRot(theta);\n    CV_Assert(0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "createFromAxisRot", "index": 493, "label": 0}
{"input": "[[nodiscard]] static MatchResult scheme_part_matches(StringView a, StringView b)\n{\n    \n    \n    if (a.equals_ignoring_ascii_case(b))\n        return MatchResult::Matches;\n\n    \n    if (a.equals_ignoring_ascii_case(\"http\"sv) && b.equals_ignoring_ascii_case(\"https\"sv))\n        return MatchResult::Matches;\n\n    \n    if (a.equals_ignoring_ascii_case(\"ws\"sv)\n        && (b.equals_ignoring_ascii_case(\"wss\"sv)\n            || b.equals_ignoring_ascii_case(\"http\"sv)\n            || b.equals_ignoring_ascii_case(\"https\"sv))) {\n        return MatchResult::Matches;\n    }\n\n    \n    if (a.equals_ignoring_ascii_case(\"wss\"sv) && b.equals_ignoring_ascii_case(\"https\"sv))\n        return MatchResult::Matches;\n\n    \n    return MatchResult::DoesNotMatch;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "1edf7a8aa2a9a78bab95711573df05d9cd7b8aab", "file_path": "Libraries/LibWeb/ContentSecurityPolicy/Directives/DirectiveOperations.cpp", "function_name": "scheme_part_matches", "index": 494, "label": 0}
{"input": "__global__\nvoid run_on_cuda_meta_kernel(const Kernel ker, int n, const Input* in, Output* out)\n{\n  int i = threadIdx.x + blockIdx.x*blockDim.x;\n  if(i<n) {\n    ker(i, in, out);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/cuda_common.h", "function_name": "run_on_cuda_meta_kernel", "index": 495, "label": 0}
{"input": "EIGEN_DONT_INLINE Q slerp_gael(const Q& a, const Q& b, typename Q::Scalar t)\n{\n  typedef typename Q::Scalar Scalar;\n  \n  Scalar d = a.dot(b);\n  Scalar theta;\n\n\n\n  \n  if (d<0.0)\n    theta =  Scalar(2)*std::asin( (-a.coeffs()-b.coeffs()).norm()/2 );\n  else\n    theta = Scalar(2)*std::asin( (a.coeffs()-b.coeffs()).norm()/2 );\n  \n  \n  Scalar scale0;\n  Scalar scale1;\n  if(theta*theta-Scalar(6)==-Scalar(6))\n  {\n    scale0 = Scalar(1) - t;\n    scale1 = t;\n  }\n  else\n  {\n    Scalar sinTheta = std::sin(theta);\n    scale0 = internal::sin( ( Scalar(1) - t ) * theta) / sinTheta;\n    scale1 = internal::sin( ( t * theta) ) / sinTheta;\n    if (d<0)\n      scale1 = -scale1;\n  }\n\n  return Quaternion<Scalar>(scale0 * a.coeffs() + scale1 * b.coeffs());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/quat_slerp.cpp", "function_name": "slerp_gael", "index": 496, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<double> pfirst<Packet2cd>(const Packet2cd& a)\n{\n  __m128d low = _mm256_extractf128_pd(a.v, 0);\n  EIGEN_ALIGN16 double res[2];\n  _mm_store_pd(res, low);\n  return std::complex<double>(res[0],res[1]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/Complex.h", "function_name": "std::complex<double> pfirst<Packet2cd>", "index": 497, "label": 0}
{"input": "inline const mpreal acsc  (const mpreal& v, mp_rnd_t r = mpreal::get_default_rnd()) {   return asin (1/v, r);                      }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "acsc", "index": 498, "label": 0}
{"input": "typename Distance::ResultType computeDistanceRaport(const Matrix<typename Distance::ElementType>& inputData, typename Distance::ElementType* target,\n                                                    int* neighbors, int* groundTruth, int veclen, int n, const Distance& distance)\n{\n    typedef typename Distance::ResultType DistanceType;\n\n    DistanceType ret = 0;\n    for (int i=0; i<n; ++i) {\n        DistanceType den = distance(inputData[groundTruth[i]], target, veclen);\n        DistanceType num = distance(inputData[neighbors[i]], target, veclen);\n\n        if ((den==0)&&(num==0)) {\n            ret += 1;\n        }\n        else {\n            ret += num/den;\n        }\n    }\n\n    return ret;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/index_testing.h", "function_name": "computeDistanceRaport", "index": 499, "label": 0}
{"input": "void check_qtvector_quaternion(const QuaternionType&)\n{\n  typedef typename QuaternionType::Coefficients Coefficients;\n  QuaternionType x(Coefficients::Random()), y(Coefficients::Random());\n  QVector<QuaternionType> v(10), w(20, y);\n  v[5] = x;\n  w[6] = v[5];\n  VERIFY_IS_APPROX(w[6], v[5]);\n  v = w;\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(w[i], v[i]);\n  }\n\n  v.resize(21);\n  v[20] = x;\n  VERIFY_IS_APPROX(v[20], x);\n  v.fill(y,22);\n  VERIFY_IS_APPROX(v[21], y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(v[22], x);\n  VERIFY((size_t)&(v[22]) == (size_t)&(v[21]) + sizeof(QuaternionType));\n\n  \n  \n  QuaternionType* ref = &w[0];\n  for(int i=0; i<30 || ((ref==&w[0]) && i<300); ++i)\n    v.push_back(w[i%w.size()]);\n  for(unsigned int i=23; int(i)<v.size(); ++i)\n  {\n    VERIFY(v[i].coeffs()==w[(i-23)%w.size()].coeffs());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/qtvector.cpp", "function_name": "check_qtvector_quaternion", "index": 500, "label": 0}
{"input": "NCNN_FORCEINLINE void VkImageMat::release()\n{\n    if (refcount && NCNN_XADD(refcount, -1) == 1)\n    {\n        if (allocator && data)\n        {\n            allocator->fastFree(data);\n        }\n    }\n\n    data = 0;\n\n    elemsize = 0;\n    elempack = 0;\n\n    dims = 0;\n    w = 0;\n    h = 0;\n    d = 0;\n    c = 0;\n\n    refcount = 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "VkImageMat::release", "index": 501, "label": 0}
{"input": "inline bool write_data(Stream &strm, const char *d, size_t l) {\n  size_t offset = 0;\n  while (offset < l) {\n    auto length = strm.write(d + offset, l - offset);\n    if (length < 0) { return false; }\n    offset += static_cast<size_t>(length);\n  }\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "write_data", "index": 502, "label": 0}
{"input": "void EglRenderer::destroy() {\n    LOGI(TAG, \"Destroying context\");\n\n    eglMakeCurrent(_display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);\n    eglDestroyContext(_display, _context);\n    eglDestroySurface(_display, _surface);\n    eglTerminate(_display);\n\n    _display = EGL_NO_DISPLAY;\n    _surface = EGL_NO_SURFACE;\n    _context = EGL_NO_CONTEXT;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/EglRenderer.cpp", "function_name": "EglRenderer::destroy", "index": 503, "label": 0}
{"input": "static inline\nbool operator < (const FileNodeIterator& it1, const FileNodeIterator& it2)\n{\n    return it1.remaining() > it2.remaining();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/persistence.hpp", "function_name": "operator <", "index": 504, "label": 0}
{"input": "inline __m128i v_sse_palignr_u8(const __m128i& a, const __m128i& b)\n    {\n        CV_StaticAssert((imm >= 0) && (imm <= 16), \"Invalid imm for v_sse_palignr_u8.\");\n        return v_sse_palignr_u8_class<imm>()(a, b);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse.hpp", "function_name": "v_sse_palignr_u8", "index": 505, "label": 0}
{"input": "inline\nvoid GpuMat::convertTo(OutputArray dst, int rtype, double alpha, Stream& stream) const\n{\n    convertTo(dst, rtype, alpha, 0.0, stream);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "GpuMat::convertTo", "index": 506, "label": 0}
{"input": "auto gamma1pm1(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(gamma1pm1(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return gamma1pm1(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/gamma1pm1.hpp", "function_name": "gamma1pm1", "index": 507, "label": 0}
{"input": "void AudioFFT::init(size_t size)\n    {\n      assert(detail::IsPowerOf2(size));\n      _impl->init(size);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "AudioFFT::init", "index": 508, "label": 0}
{"input": "float measure_clock_speed()\n{\n  cerr << \"Measuring clock speed...                              \\r\" << flush;\n          \n  vector<float> all_gflops;\n  for (int i = 0; i < 8; i++) {\n    benchmark_t b(1024, 1024, 1024);\n    b.run();\n    all_gflops.push_back(b.gflops);\n  }\n\n  sort(all_gflops.begin(), all_gflops.end());\n  float stable_estimate = all_gflops[2] + all_gflops[3] + all_gflops[4] + all_gflops[5];\n\n  \n  \n  float result = stable_estimate * 123.456f;\n\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchmark-blocking-sizes.cpp", "function_name": "measure_clock_speed", "index": 509, "label": 0}
{"input": "inline v128_t v128_cvti8x16_i32x4(const v128_t& a)\n{\n    v128_t r = wasm_unpacklo_i8x16(a, a);\n    r = wasm_unpacklo_i8x16(r, r);\n    return wasm_i32x4_shr(r, 24);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvti8x16_i32x4", "index": 510, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost\n  costPerCoeff(bool vectorized) const {\n    return m_condImpl.costPerCoeff(vectorized) +\n           m_thenImpl.costPerCoeff(vectorized)\n        .cwiseMax(m_elseImpl.costPerCoeff(vectorized));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h", "function_name": "costPerCoeff", "index": 511, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_drawmskpic(JNIEnv *env, jobject thiz, jstring picfn,jstring mskfn){\n            std::string s_pic = getStringUTF(env,picfn);\n            std::string s_dump = getStringUTF(env,mskfn);\n            return g_digit->drawmskpic(s_pic.c_str(),s_dump.c_str());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_drawmskpic", "index": 512, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline typename ParametrizedLine<_Scalar, _AmbientDim,_Options>::VectorType\nParametrizedLine<_Scalar, _AmbientDim,_Options>::pointAt(const _Scalar& t) const\n{\n  return origin() + (direction()*t); \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/ParametrizedLine.h", "function_name": "ParametrizedLine<_Scalar, _AmbientDim,_Options>::pointAt", "index": 513, "label": 0}
{"input": "void hyperplane_alignment()\n{\n  typedef Hyperplane<Scalar,3,AutoAlign> Plane3a;\n  typedef Hyperplane<Scalar,3,DontAlign> Plane3u;\n\n  EIGEN_ALIGN_MAX Scalar array1[4];\n  EIGEN_ALIGN_MAX Scalar array2[4];\n  EIGEN_ALIGN_MAX Scalar array3[4+1];\n  Scalar* array3u = array3+1;\n\n  Plane3a *p1 = ::new(reinterpret_cast<void*>(array1)) Plane3a;\n  Plane3u *p2 = ::new(reinterpret_cast<void*>(array2)) Plane3u;\n  Plane3u *p3 = ::new(reinterpret_cast<void*>(array3u)) Plane3u;\n  \n  p1->coeffs().setRandom();\n  *p2 = *p1;\n  *p3 = *p1;\n\n  VERIFY_IS_APPROX(p1->coeffs(), p2->coeffs());\n  VERIFY_IS_APPROX(p1->coeffs(), p3->coeffs());\n  \n  #if defined(EIGEN_VECTORIZE) && EIGEN_MAX_STATIC_ALIGN_BYTES > 0\n  if(internal::packet_traits<Scalar>::Vectorizable && internal::packet_traits<Scalar>::size<=4)\n    VERIFY_RAISES_ASSERT((::new(reinterpret_cast<void*>(array3u)) Plane3a));\n  #endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_hyperplane.cpp", "function_name": "hyperplane_alignment", "index": 514, "label": 0}
{"input": "void BoundedTopology::InitFromLPs(const LPS& enabled_lps) {\n  packages_.push_back(Package(enabled_lps));\n\n  snprintf(topology_string_, sizeof(topology_string_), \"LPs=%zu\",\n           GetCluster(0, 0).Size());\n\n  \n  nodes_.Set(0);\n  HWY_ASSERT(NumNodes() == 1);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a248f7624546eb6be80e52eaee5d03e03bded7a6", "file_path": "util/threading.cc", "function_name": "BoundedTopology::InitFromLPs", "index": 515, "label": 0}
{"input": "EIGEN_DEVICE_FUNC \n    EIGEN_STRONG_INLINE void _resize_to_match(const EigenBase<OtherDerived>& other)\n    {\n      #ifdef EIGEN_NO_AUTOMATIC_RESIZING\n      eigen_assert((this->size()==0 || (IsVectorAtCompileTime ? (this->size() == other.size())\n                 : (rows() == other.rows() && cols() == other.cols())))\n        && \"Size mismatch. Automatic resizing is disabled because EIGEN_NO_AUTOMATIC_RESIZING is defined\");\n      EIGEN_ONLY_USED_FOR_DEBUG(other);\n      #else\n      resizeLike(other);\n      #endif\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "_resize_to_match", "index": 516, "label": 0}
{"input": "NdArray<dtype> select(const std::vector<NdArray<bool>>&  condList,\n                          const std::vector<NdArray<dtype>>& choiceList,\n                          dtype                              defaultValue = dtype{ 0 })\n    {\n        std::vector<const NdArray<bool>*> condVec(condList.size());\n        stl_algorithms::transform(condList.begin(),\n                                  condList.end(),\n                                  condVec.begin(),\n                                  [](auto& cond) noexcept -> const NdArray<bool>* { return &cond; });\n\n        std::vector<const NdArray<dtype>*> choiceVec(choiceList.size());\n        stl_algorithms::transform(choiceList.begin(),\n                                  choiceList.end(),\n                                  choiceVec.begin(),\n                                  [](auto& choice) noexcept -> const NdArray<dtype>* { return &choice; });\n\n        return select(condVec, choiceVec, defaultValue);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/select.hpp", "function_name": "select", "index": 517, "label": 0}
{"input": "void AfeWakeWord::StartDetection() {\n    xEventGroupSetBits(event_group_, DETECTION_RUNNING_EVENT);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::StartDetection", "index": 518, "label": 0}
{"input": "void ListElement::AttachToElementManager(\n    ElementManager* manager,\n    const std::shared_ptr<CSSStyleSheetManager>& style_manager,\n    bool keep_element_id) {\n  FiberElement::AttachToElementManager(manager, style_manager, keep_element_id);\n  auto batch_render_strategy =\n      ResolveBatchRenderStrategyFromPipelineSchedulerConfig(\n          manager->GetConfig()->GetPipelineSchedulerConfig(),\n          manager->GetEnableParallelElement());\n  if (list_container_delegate()) {\n    list_container_delegate()->OnAttachToElementManager(manager);\n    list_container_delegate()->UpdateBatchRenderStrategy(batch_render_strategy);\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "4895fb1cca537816577d98fa40f0aa440d139672", "file_path": "core/renderer/dom/fiber/list_element.cc", "function_name": "ListElement::AttachToElementManager", "index": 519, "label": 0}
{"input": "size_t DetectPageSize() {\n#if HWY_OS_LINUX\n  size_t page_bytes = static_cast<size_t>(sysconf(_SC_PAGESIZE));\n  HWY_ASSERT(page_bytes <= (4 << 20));\n  return page_bytes;\n#else\n  return 0;\n#endif\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/allocator.cc", "function_name": "DetectPageSize", "index": 520, "label": 0}
{"input": "inline\nbool DeviceInfo::supports(FeatureSet feature_set) const\n{\n    int version = majorVersion() * 10 + minorVersion();\n    return version >= feature_set;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "DeviceInfo::supports", "index": 521, "label": 0}
{"input": "void CountRecorderWithTLSTag<ThreadLocalTag>::addSample(int64_t val, const TagSet &tag) {\n  getRecorderWithTag(tag)->addSample(val);\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/common/monitor/Recorder.cc", "function_name": "CountRecorderWithTLSTag<ThreadLocalTag>::addSample", "index": 522, "label": 0}
{"input": "inline TypeInfo SequenceTypeInfoImpl<T>::GetSequenceElementType() const {\n  OrtTypeInfo* output;\n  ThrowOnError(GetApi().GetSequenceElementType(this->p_, &output));\n  return TypeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "SequenceTypeInfoImpl<T>::GetSequenceElementType", "index": 523, "label": 0}
{"input": "static void test_reductions_in_expr() {\n  Tensor<float, 4, DataLayout> tensor(2, 3, 5, 7);\n  tensor.setRandom();\n  array<ptrdiff_t, 2> reduction_axis2;\n  reduction_axis2[0] = 1;\n  reduction_axis2[1] = 3;\n\n  Tensor<float, 2, DataLayout> result(2, 5);\n  result = result.constant(1.0f) - tensor.sum(reduction_axis2);\n  VERIFY_IS_EQUAL(result.dimension(0), 2);\n  VERIFY_IS_EQUAL(result.dimension(1), 5);\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 5; ++j) {\n      float sum = 0.0f;\n      for (int k = 0; k < 3; ++k) {\n        for (int l = 0; l < 7; ++l) {\n          sum += tensor(i, k, j, l);\n        }\n      }\n      VERIFY_IS_APPROX(result(i, j), 1.0f - sum);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_reduction.cpp", "function_name": "test_reductions_in_expr", "index": 524, "label": 0}
{"input": "static inline\nRange normalize_axis_range(const Range& r, int axisSize)\n{\n    if (r == Range::all())\n        return Range(0, axisSize);\n    CV_CheckGE(r.start, 0, \"\");\n    Range clamped(r.start,\n                  r.end > 0 ? std::min(r.end, axisSize) : axisSize + r.end + 1);\n    CV_DbgCheckGE(clamped.start, 0, \"\");\n    CV_CheckLT(clamped.start, clamped.end, \"\");\n    CV_CheckLE(clamped.end, axisSize, \"\");\n    return clamped;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/shape_utils.hpp", "function_name": "normalize_axis_range", "index": 525, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/MapBase.h", "function_name": "checkSanity", "index": 526, "label": 0}
{"input": "inline void PutMatrixElt(std::complex<Scalar> value, int row, int col, std::ofstream& out)\n  {\n    out << row << \" \" << col << \" \" << value.real() << \" \" << value.imag() << \"\\n\";\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MarketIO.h", "function_name": "PutMatrixElt", "index": 527, "label": 0}
{"input": "DualQuat<T> DualQuat<T>::normalize() const\n{\n    Quat<T> p = getRealPart();\n    Quat<T> q = getDualPart();\n    T p_norm = p.norm();\n    if (p_norm < CV_DUAL_QUAT_EPS)\n    {\n        CV_Error(Error::StsBadArg, \"Cannot normalize this dual quaternion: the norm is too small.\");\n    }\n    Quat<T> p_nr = p / p_norm;\n    Quat<T> q_nr = q / p_norm;\n    return createFromQuat(p_nr, q_nr - p_nr * p_nr.dot(q_nr));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::normalize", "index": 528, "label": 0}
{"input": "static void test_big_to_small_type_cast()\n{\n  Tensor<double, 2> dtensor(20, 30);\n  dtensor.setRandom();\n  Tensor<float, 2> ftensor(20, 30);\n  ftensor = dtensor.cast<float>();\n\n  for (int i = 0; i < 20; ++i) {\n    for (int j = 0; j < 30; ++j) {\n      VERIFY_IS_APPROX(dtensor(i,j), static_cast<double>(ftensor(i,j)));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_casts.cpp", "function_name": "test_big_to_small_type_cast", "index": 529, "label": 0}
{"input": "inline typename internal::traits<Derived>::Scalar MatrixBase<Derived>::determinant() const\n{\n  eigen_assert(rows() == cols());\n  typedef typename internal::nested_eval<Derived,Base::RowsAtCompileTime>::type Nested;\n  return internal::determinant_impl<typename internal::remove_all<Nested>::type>::run(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/Determinant.h", "function_name": "MatrixBase<Derived>::determinant", "index": 530, "label": 0}
{"input": "NdArray<dtype> setdiff1d(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        const auto comp = [](const dtype lhs, const dtype rhs) noexcept -> bool { return lhs < rhs; };\n\n        const auto set1 = unique(inArray1);\n        const auto set2 = unique(inArray2);\n\n        std::vector<dtype> res(set1.size());\n        const auto         last =\n            stl_algorithms::set_difference(set1.begin(), set1.end(), set2.begin(), set2.end(), res.begin(), comp);\n\n        return NdArray<dtype>(res.begin(), last);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/setdiff1d.hpp", "function_name": "setdiff1d", "index": 531, "label": 0}
{"input": "WebIDL::ExceptionOr<void> OffscreenCanvasRenderingContext2D::draw_image_internal(CanvasImageSource const&, float, float, float, float, float, float, float, float)\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::draw_image_internal()\");\n    return {};\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::draw_image_internal", "index": 532, "label": 0}
{"input": "int GhMat::clamp(float minval,float maxval,GpMat mat,void* stream ){\n    if(!mat)return -1;\n    return  caclamp((cudaStream_t)stream,m_height,m_width,m_stride,(float*)m_buf,  mat->m_stride,  (float*)mat->m_buf,minval,maxval);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/cuda/kmatcuda.cpp", "function_name": "GhMat::clamp", "index": 533, "label": 0}
{"input": "void test_matrix_square_root()\n{\n  for (int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1(testMatrixSqrt(Matrix3cf()));\n    CALL_SUBTEST_2(testMatrixSqrt(MatrixXcd(12,12)));\n    CALL_SUBTEST_3(testMatrixSqrt(Matrix4f()));\n    CALL_SUBTEST_4(testMatrixSqrt(Matrix<double,Dynamic,Dynamic,RowMajor>(9, 9)));\n    CALL_SUBTEST_5(testMatrixSqrt(Matrix<float,1,1>()));\n    CALL_SUBTEST_5(testMatrixSqrt(Matrix<std::complex<float>,1,1>()));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_square_root.cpp", "function_name": "test_matrix_square_root", "index": 534, "label": 0}
{"input": "EIGEN_STRONG_INLINE void punpackp(Packet4f* vecs)\n{\n  vecs[1] = _mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0x55));\n  vecs[2] = _mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0xAA));\n  vecs[3] = _mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0xFF));\n  vecs[0] = _mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0x00));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h", "function_name": "punpackp", "index": 535, "label": 0}
{"input": "CholmodDecomposition(const MatrixType& matrix) : Base()\n    {\n      init();\n      this->compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "CholmodDecomposition", "index": 536, "label": 0}
{"input": "inline Type2Vec512_Traits<double>::vec_type v512_setall<double>(const double& a) { return v512_setall_f64(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/simd_utils.impl.hpp", "function_name": "v512_setall", "index": 537, "label": 0}
{"input": "NCNN_FORCEINLINE void VkMat::release()\n{\n    if (refcount && NCNN_XADD(refcount, -1) == 1)\n    {\n        if (allocator && data)\n        {\n            allocator->fastFree(data);\n        }\n    }\n\n    data = 0;\n\n    elemsize = 0;\n    elempack = 0;\n\n    dims = 0;\n    w = 0;\n    h = 0;\n    d = 0;\n    c = 0;\n\n    cstep = 0;\n\n    refcount = 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "VkMat::release", "index": 538, "label": 0}
{"input": "napi_value DevToolEnvHarmony::Constructor(napi_env env,\n                                          napi_callback_info info) {\n  napi_value js_this;\n  napi_get_cb_info(env, info, nullptr, nullptr, &js_this, nullptr);\n  return js_this;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::Constructor", "index": 539, "label": 0}
{"input": "inline LogTagAuto(const char* _name, LogLevel _level)\n        : LogTag(_name, _level)\n    {\n        registerLogTag(this);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/utils/logger.hpp", "function_name": "LogTagAuto", "index": 540, "label": 0}
{"input": "explicit PastixLLT(const MatrixType& matrix):Base()\n    {\n      init();\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "PastixLLT", "index": 541, "label": 0}
{"input": "static __device__ __forceinline__ OutIt copy(InIt beg, InIt end, OutIt out)\n        {\n            for(InIt t = beg + laneId(); t < end; t += STRIDE, out += STRIDE)\n                *out = *t;\n            return out;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/warp.hpp", "function_name": "copy", "index": 542, "label": 0}
{"input": "inline Value ConstValueImpl<T>::GetValue(int index, OrtAllocator* allocator) const {\n  OrtValue* out;\n  ThrowOnError(GetApi().GetValue(this->p_, index, allocator, &out));\n  return Value{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetValue", "index": 543, "label": 0}
{"input": "NdArray<uint32> digitize(const NdArray<dtype1>& x, const NdArray<dtype2>& bins)\n    {\n        const auto uniqueBins = unique(bins);\n        auto       result     = NdArray<uint32>(1, x.size());\n        result.fill(0);\n\n        typename decltype(result)::size_type idx{ 0 };\n        std::for_each(x.begin(),\n                      x.end(),\n                      [&uniqueBins, &result, &idx](const auto value)\n                      {\n                          const auto upperBin = std::upper_bound(uniqueBins.begin(), uniqueBins.end(), value);\n                          result[idx++]       = static_cast<uint32>(std::distance(uniqueBins.begin(), upperBin));\n                      });\n\n        return result;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/digitize.hpp", "function_name": "digitize", "index": 544, "label": 0}
{"input": "NCNN_FORCEINLINE int VkMat::elembits() const\n{\n    return elempack ? static_cast<int>(elemsize) * 8 / elempack : 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "VkMat::elembits", "index": 545, "label": 0}
{"input": "inline OpenCLExecutionContextScope(const OpenCLExecutionContext& ctx)\n    {\n        CV_Assert(!ctx.empty());\n        ctx_ = OpenCLExecutionContext::getCurrentRef();\n        ctx.bind();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/ocl.hpp", "function_name": "OpenCLExecutionContextScope", "index": 546, "label": 0}
{"input": "int GCGraph<TWeight>::addVtx()\n{\n    Vtx v;\n    memset( &v, 0, sizeof(Vtx));\n    vtcs.push_back(v);\n    return (int)vtcs.size() - 1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/detail/gcgraph.hpp", "function_name": "GCGraph<TWeight>::addVtx", "index": 547, "label": 0}
{"input": "bool equalsIdentity(const MatrixType& A)\n{\n  typedef typename MatrixType::Scalar Scalar;\n  Scalar zero = static_cast<Scalar>(0);\n\n  bool offDiagOK = true;\n  for (Index i = 0; i < A.rows(); ++i) {\n    for (Index j = i+1; j < A.cols(); ++j) {\n      offDiagOK = offDiagOK && (A(i,j) == zero);\n    }\n  }\n  for (Index i = 0; i < A.rows(); ++i) {\n    for (Index j = 0; j < (std::min)(i, A.cols()); ++j) {\n      offDiagOK = offDiagOK && (A(i,j) == zero);\n    }\n  }\n\n  bool diagOK = (A.diagonal().array() == 1).all();\n  return offDiagOK && diagOK;\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/nullary.cpp", "function_name": "equalsIdentity", "index": 548, "label": 0}
{"input": "void checkGlError(const char *op) {\n    for (GLint error = glGetError(); error; error = glGetError()) {\n        LOGE(TAG, \"after %s() glError (0x%x)\\n\", op, error);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/GlesProgram.cpp", "function_name": "checkGlError", "index": 549, "label": 0}
{"input": "inline void v_pack_u_store(ushort* ptr, const v_int32x4& a)\n{\n    v128_t maxval = wasm_i32x4_splat(65535);\n    v128_t minval = wasm_i32x4_splat(0);\n    v128_t a1 = wasm_v128_bitselect(maxval, a.val, wasm_i32x4_gt(a.val, maxval));\n    v128_t a2 = wasm_v128_bitselect(minval, a1, wasm_i32x4_lt(a1, minval));\n    v128_t r = wasm_v8x16_shuffle(a2, a2, 0,1,4,5,8,9,12,13,0,1,4,5,8,9,12,13);\n    ushort t_ptr[8];\n    wasm_v128_store(t_ptr, r);\n    for (int i=0; i<4; ++i) {\n        ptr[i] = t_ptr[i];\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_pack_u_store", "index": 550, "label": 0}
{"input": "inline double             mpreal::toDouble (mp_rnd_t mode)  const    {    return  mpfr_get_d  (mpfr_srcptr(), mode);    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::toDouble", "index": 551, "label": 0}
{"input": "inline\nvoid SphericalProjector::mapForward(float x, float y, float &u, float &v)\n{\n    float x_ = r_kinv[0] * x + r_kinv[1] * y + r_kinv[2];\n    float y_ = r_kinv[3] * x + r_kinv[4] * y + r_kinv[5];\n    float z_ = r_kinv[6] * x + r_kinv[7] * y + r_kinv[8];\n\n    u = scale * atan2f(x_, z_);\n    float w = y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_);\n    v = scale * (static_cast<float>(CV_PI) - acosf(w == w ? w : 0));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "SphericalProjector::mapForward", "index": 552, "label": 0}
{"input": "std::vector<R> GetAttributes(const char* name) const {\n    std::vector<R> result;\n    attr_utils::GetAttrs(this->p_, name, result);\n    return result;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_api.h", "function_name": "GetAttributes", "index": 553, "label": 0}
{"input": "NdArray<double> laguerre(uint32 n, uint32 m, const NdArray<dtype>& inArrayX)\n    {\n        NdArray<double> returnArray(inArrayX.shape());\n\n        const auto function = [n, m](dtype x) -> double { return laguerre(n, m, x); };\n\n        stl_algorithms::transform(inArrayX.cbegin(), inArrayX.cend(), returnArray.begin(), function);\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/laguerre.hpp", "function_name": "laguerre", "index": 554, "label": 0}
{"input": "inline\nbool TargetArchs::hasEqualOrGreater(int major, int minor)\n{\n    return hasEqualOrGreaterPtx(major, minor) || hasEqualOrGreaterBin(major, minor);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "TargetArchs::hasEqualOrGreater", "index": 555, "label": 0}
{"input": "inline Env::Env(const OrtThreadingOptions* tp_options, OrtLoggingFunction logging_function, void* logger_param,\n                OrtLoggingLevel logging_level, _In_ const char* logid) {\n  ThrowOnError(GetApi().CreateEnvWithCustomLoggerAndGlobalThreadPools(logging_function, logger_param, logging_level, logid, tp_options, &p_));\n  if (strcmp(logid, \"onnxruntime-node\") == 0) {\n    ThrowOnError(GetApi().SetLanguageProjection(p_, OrtLanguageProjection::ORT_PROJECTION_NODEJS));\n  } else {\n    ThrowOnError(GetApi().SetLanguageProjection(p_, OrtLanguageProjection::ORT_PROJECTION_CPLUSPLUS));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Env::Env", "index": 556, "label": 0}
{"input": "inline void sparse_time_dense_product(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const AlphaType& alpha)\n{\n  sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType, AlphaType>::run(lhs, rhs, res, alpha);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseDenseProduct.h", "function_name": "sparse_time_dense_product", "index": 557, "label": 0}
{"input": "StorageIndex cs_tdfs(StorageIndex j, StorageIndex k, StorageIndex *head, const StorageIndex *next, StorageIndex *post, StorageIndex *stack)\n{\n  StorageIndex i, p, top = 0;\n  if(!head || !next || !post || !stack) return (-1);    \n  stack[0] = j;                 \n  while (top >= 0)                \n  {\n    p = stack[top];           \n    i = head[p];              \n    if(i == -1)\n    {\n      top--;                 \n      post[k++] = p;        \n    }\n    else\n    {\n      head[p] = next[i];   \n      stack[++top] = i;     \n    }\n  }\n  return k;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/OrderingMethods/Amd.h", "function_name": "cs_tdfs", "index": 558, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseBinaryOp<std::not_equal_to<Scalar>, const Derived, const OtherDerived>\ncwiseNotEqual(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const\n{\n  return CwiseBinaryOp<std::not_equal_to<Scalar>, const Derived, const OtherDerived>(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h", "function_name": "CwiseBinaryOp<std::not_equal_to<Scalar>, const Derived, const OtherDerived>\ncwiseNotEqual", "index": 559, "label": 0}
{"input": "inline\nMat_<_Tp> Mat_<_Tp>::col(int x) const\n{\n    return Mat_(*this, Range::all(), Range(x, x+1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::col", "index": 560, "label": 0}
{"input": "__device__ __forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*, volatile T4*, volatile T5*, volatile T6*, volatile T7*, volatile T8*, volatile T9*>\n    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8, T9* t9)\n    {\n        return thrust::make_tuple((volatile T0*) t0, (volatile T1*) t1, (volatile T2*) t2, (volatile T3*) t3, (volatile T4*) t4, (volatile T5*) t5, (volatile T6*) t6, (volatile T7*) t7, (volatile T8*) t8, (volatile T9*) t9);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/reduce.hpp", "function_name": "__forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*, volatile T4*, volatile T5*, volatile T6*, volatile T7*, volatile T8*, volatile T9*>\n    smem_tuple", "index": 561, "label": 0}
{"input": "QTransform Transform<Scalar,Dim,Mode,Options>::toQTransform(void) const\n{\n  EIGEN_STATIC_ASSERT(Dim==2, YOU_MADE_A_PROGRAMMING_MISTAKE)\n  if (Mode == int(AffineCompact))\n    return QTransform(m_matrix.coeff(0,0), m_matrix.coeff(1,0),\n                      m_matrix.coeff(0,1), m_matrix.coeff(1,1),\n                      m_matrix.coeff(0,2), m_matrix.coeff(1,2));\n  else\n    return QTransform(m_matrix.coeff(0,0), m_matrix.coeff(1,0), m_matrix.coeff(2,0),\n                      m_matrix.coeff(0,1), m_matrix.coeff(1,1), m_matrix.coeff(2,1),\n                      m_matrix.coeff(0,2), m_matrix.coeff(1,2), m_matrix.coeff(2,2));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options>::toQTransform", "index": 562, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstColsBlockXpr middleCols(Index startCol, Index numCols) const\n{\n  return ConstColsBlockXpr(derived(), 0, startCol, rows(), numCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstColsBlockXpr middleCols", "index": 563, "label": 0}
{"input": "int gjdigit_initWenet(gjdigit_t* dg,char* fnwenet){\n    dg->lock_wenet->lock();\n    if(dg->ai_wenet){\n        delete dg->ai_wenet;\n        dg->ai_wenet = NULL;\n    }\n    dg->ai_wenet = new Wenet(fnwenet);\n    dg->lock_wenet->unlock();\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_initWenet", "index": 564, "label": 0}
{"input": "int maindec(int argc,char** argv){\n    std::string filename(argv[1]);\n    \n    GaesIStream fin(filename);\n    \n    std::string fn2(argv[2]);\n    std::ofstream fout(fn2,std::ios::binary);\n\n    char buf[1024];\n    int rd = 0;\n    while(!fin.eof()){\n    \n        \n        fin.read(buf,16);\n        fout.write(buf,16);\n\n    }\n    \n    \n        \n        \n    \n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aes/gaes_stream.cc", "function_name": "maindec", "index": 565, "label": 0}
{"input": "double bench_t(int t)\n{\n  if(t)\n    return bench<m,n,k,RowMajor>();\n  else\n    return bench<m,n,k,0>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/perf_monitoring/gemm/lazy_gemm.cpp", "function_name": "bench_t", "index": 566, "label": 0}
{"input": "void cvt(uint src, uint& dst)\n            {\n                dst = 0xffu << 24;\n\n                dst |= (0xffu & (src << 3)) << (bidx * 8);\n                dst |= (0xffu &((src >> 3) & ~3)) << 8;\n                dst |= (0xffu & ((src >> 8) & ~7)) << ((bidx ^ 2) * 8);\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "src", "index": 567, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const ConstBlockXpr topLeftCorner(Index cRows, Index cCols) const\n{\n  return ConstBlockXpr(derived(), 0, 0, cRows, cCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstBlockXpr topLeftCorner", "index": 568, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_zeta_op<Scalar>, const Derived, const OtherDerived>\n    zeta(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_zeta_op<Scalar>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_zeta_op<Scalar>, const Derived, const OtherDerived>\n    zeta", "index": 569, "label": 0}
{"input": "void unaligned_objects()\n{\n  \n  \n  \n  \n  \n  for(int m=450;m<460;++m)\n  {\n    for(int n=8;n<12;++n)\n    {\n      MatrixXf M(m, n);\n      VectorXf v1(n), r1(500);\n      RowVectorXf v2(m), r2(16);\n\n      M.setRandom();\n      v1.setRandom();\n      v2.setRandom();\n      for(int o=0; o<4; ++o)\n      {\n        r1.segment(o,m).noalias() = M * v1;\n        VERIFY_IS_APPROX(r1.segment(o,m), M * MatrixXf(v1));\n        r2.segment(o,n).noalias() = v2 * M;\n        VERIFY_IS_APPROX(r2.segment(o,n), MatrixXf(v2) * M);\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_extra.cpp", "function_name": "unaligned_objects", "index": 570, "label": 0}
{"input": "inline cl_mem clCreateFromGLTexture3D(cl_context p0, cl_mem_flags p1, cl_GLenum p2, cl_GLint p3, cl_GLuint p4, cl_int* p5) { return clCreateFromGLTexture3D_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_gl_wrappers.hpp", "function_name": "clCreateFromGLTexture3D", "index": 571, "label": 0}
{"input": "inline int Color_HueToRgb(float64 M1, float64 M2, float64 Hue, float64 *Channel)\n{\n    if (Hue < 0.0)\n        Hue += 1.0;\n    else if (Hue > 1.0)\n        Hue -= 1.0;\n\n    if ((6.0 * Hue) < 1.0)\n        *Channel = (M1 + (M2 - M1) * Hue * 6.0);\n    else if ((2.0 * Hue) < 1.0)\n        *Channel = (M2);\n    else if ((3.0 * Hue) < 2.0)\n        *Channel = (M1 + (M2 - M1) * ((2.0F / 3.0F) - Hue) * 6.0);\n    else\n        *Channel = (M1);\n\n    return TRUE;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.h", "function_name": "Color_HueToRgb", "index": 572, "label": 0}
{"input": "BlobVec ReserveMemory(BlobReader& reader, BytePtr& all_blobs, size_t& pos) {\n  BlobVec blobs;\n  for (const hwy::uint128_t key : reader.Keys()) {\n    const size_t bytes = reader.BlobSize(key);\n    blobs.push_back(ByteSpan(all_blobs.get() + pos, bytes));\n    pos += bytes;\n  }\n  return blobs;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "b0fe9a43e60121b567b8bb398b98b6319aee7a78", "file_path": "compression/blob_compare.cc", "function_name": "ReserveMemory", "index": 573, "label": 0}
{"input": "NdArray<dtype> zeros(const Shape& inShape)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        return full(inShape, dtype{ 0 });\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/zeros.hpp", "function_name": "zeros", "index": 574, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline VectorType corner(CornerType corner) const\n  {\n    EIGEN_STATIC_ASSERT(_AmbientDim <= 3, THIS_METHOD_IS_ONLY_FOR_VECTORS_OF_A_SPECIFIC_SIZE);\n\n    VectorType res;\n\n    Index mult = 1;\n    for(Index d=0; d<dim(); ++d)\n    {\n      if( mult & corner ) res[d] = m_max[d];\n      else                res[d] = m_min[d];\n      mult *= 2;\n    }\n    return res;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/AlignedBox.h", "function_name": "corner", "index": 575, "label": 0}
{"input": "Map<const BlockScalar> coeff(Index brow, Index bcol) const\n    {\n      eigen_assert(brow < blockRows() && \"BLOCK ROW INDEX OUT OF BOUNDS\");\n      eigen_assert(bcol < blockCols() && \"BLOCK COLUMN OUT OF BOUNDS\");\n\n      StorageIndex rsize = IsColMajor ? blockInnerSize(brow): blockOuterSize(bcol);\n      StorageIndex csize = IsColMajor ? blockOuterSize(bcol) : blockInnerSize(brow);\n      StorageIndex inner = IsColMajor ? brow : bcol;\n      StorageIndex outer = IsColMajor ? bcol : brow;\n      StorageIndex offset = m_outerIndex[outer];\n      while(offset < m_outerIndex[outer+1] && m_indices[offset] != inner) offset++;\n      if(m_indices[offset] == inner)\n      {\n        return Map<const BlockScalar> (&(m_values[blockPtr(offset)]), rsize, csize);\n      }\n      else\n\n        eigen_assert(\"NOT YET SUPPORTED\");\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "brow", "index": 576, "label": 0}
{"input": "inline double trapazoidal(const double                         low,\n                              const double                         high,\n                              const uint32                         n,\n                              const std::function<double(double)>& f) noexcept\n    {\n        const double width = (high - low) / static_cast<double>(n);\n\n        double trapezoidal_integral = 0.;\n        for (uint32 step = 0; step < n; ++step)\n        {\n            const double x1 = low + static_cast<double>(step) * width;\n            const double x2 = low + static_cast<double>(step + 1) * width;\n\n            trapezoidal_integral += 0.5 * (x2 - x1) * (f(x1) + f(x2));\n        }\n\n        return trapezoidal_integral;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Integrate/trapazoidal.hpp", "function_name": "trapazoidal", "index": 577, "label": 0}
{"input": "static inline\nbool operator > (const MatConstIterator& a, const MatConstIterator& b)\n{\n    return a.ptr > b.ptr;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "operator >", "index": 578, "label": 0}
{"input": "lynx_api_status lynx_value_deep_copy_value(lynx_api_env env, lynx_value src,\n                                           lynx_value* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_deep_copy_value", "index": 579, "label": 0}
{"input": "static void test_tensor_maps() {\n  int inputs[20];\n  TensorMap<Tensor<int, 1, DataLayout> > tensor_map(inputs, 20);\n  tensor_map.setRandom();\n\n  Tensor<int, 1, DataLayout> result = tensor_map.cumsum(0);\n\n  int accum = 0;\n  for (int i = 0; i < 20; ++i) {\n    accum += tensor_map(i);\n    VERIFY_IS_EQUAL(result(i), accum);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_scan.cpp", "function_name": "test_tensor_maps", "index": 580, "label": 0}
{"input": "void test_cxx11_tensor_index_list()\n{\n#ifdef EIGEN_HAS_INDEX_LIST\n  CALL_SUBTEST(test_static_index_list());\n  CALL_SUBTEST(test_type2index_list());\n  CALL_SUBTEST(test_type2indexpair_list());\n  CALL_SUBTEST(test_dynamic_index_list());\n  CALL_SUBTEST(test_mixed_index_list());\n  CALL_SUBTEST(test_dim_check());\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_index_list.cpp", "function_name": "test_cxx11_tensor_index_list", "index": 581, "label": 0}
{"input": "void check_stdvector_matrix(const MatrixType& m)\n{\n  typename MatrixType::Index rows = m.rows();\n  typename MatrixType::Index cols = m.cols();\n  MatrixType x = MatrixType::Random(rows,cols), y = MatrixType::Random(rows,cols);\n  std::vector<MatrixType> v(10, MatrixType(rows,cols)), w(20, y);\n  v[5] = x;\n  w[6] = v[5];\n  VERIFY_IS_APPROX(w[6], v[5]);\n  v = w;\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(w[i], v[i]);\n  }\n\n  v.resize(21);\n  v[20] = x;\n  VERIFY_IS_APPROX(v[20], x);\n  v.resize(22,y);\n  VERIFY_IS_APPROX(v[21], y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(v[22], x);\n  VERIFY((internal::UIntPtr)&(v[22]) == (internal::UIntPtr)&(v[21]) + sizeof(MatrixType));\n\n  \n  \n  MatrixType* ref = &w[0];\n  for(int i=0; i<30 || ((ref==&w[0]) && i<300); ++i)\n    v.push_back(w[i%w.size()]);\n  for(unsigned int i=23; i<v.size(); ++i)\n  {\n    VERIFY(v[i]==w[(i-23)%w.size()]);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stdvector_overload.cpp", "function_name": "check_stdvector_matrix", "index": 582, "label": 0}
{"input": "ParallelForBackend()\n    {\n        CV_LOG_INFO(NULL, \"Initializing TBB parallel backend: TBB_INTERFACE_VERSION=\" << TBB_INTERFACE_VERSION);\n        numThreads = 0;\n#if TBB_INTERFACE_VERSION >= 8000\n        (void)getArena();\n#else\n        (void)getScheduler();\n#endif\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/parallel/backend/parallel_for.tbb.hpp", "function_name": "ParallelForBackend", "index": 583, "label": 0}
{"input": "void getCenterOrdering(KMeansNodePtr node, const ElementType* q, int* sort_indices)\n    {\n        DistanceType* domain_distances = new DistanceType[branching_];\n        for (int i=0; i<branching_; ++i) {\n            DistanceType dist = distance_(q, node->childs[i]->pivot, veclen_);\n\n            int j=0;\n            while (domain_distances[j]<dist && j<i)\n                j++;\n            for (int k=i; k>j; --k) {\n                domain_distances[k] = domain_distances[k-1];\n                sort_indices[k] = sort_indices[k-1];\n            }\n            domain_distances[j] = dist;\n            sort_indices[j] = i;\n        }\n        delete[] domain_distances;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kmeans_index.h", "function_name": "node", "index": 584, "label": 0}
{"input": "static void test_multiple_dims()\n{\n  Tensor<float, 3> input(3,5,7);\n  input.setRandom();\n\n  TensorRef<Tensor<float, 3>> ref(input);\n  VERIFY_IS_EQUAL(ref.data(), input.data());\n  VERIFY_IS_EQUAL(ref.dimension(0), 3);\n  VERIFY_IS_EQUAL(ref.dimension(1), 5);\n  VERIFY_IS_EQUAL(ref.dimension(2), 7);\n\n  for (int i = 0; i < 3; ++i) {\n    for (int j = 0; j < 5; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_EQUAL(ref(i,j,k), input(i,j,k));\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_multiple_dims", "index": 585, "label": 0}
{"input": "lynx_api_status lynx_value_get_number(lynx_api_env env, lynx_value value,\n                                      double* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_get_number", "index": 586, "label": 0}
{"input": "bool MatrixBase<Derived>::isLowerTriangular(const RealScalar& prec) const\n{\n  RealScalar maxAbsOnLowerPart = static_cast<RealScalar>(-1);\n  for(Index j = 0; j < cols(); ++j)\n    for(Index i = j; i < rows(); ++i)\n    {\n      RealScalar absValue = numext::abs(coeff(i,j));\n      if(absValue > maxAbsOnLowerPart) maxAbsOnLowerPart = absValue;\n    }\n  RealScalar threshold = maxAbsOnLowerPart * prec;\n  for(Index j = 1; j < cols(); ++j)\n  {\n    Index maxi = numext::mini(j, rows()-1);\n    for(Index i = 0; i < maxi; ++i)\n      if(numext::abs(coeff(i, j)) > threshold) return false;\n  }\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "MatrixBase<Derived>::isLowerTriangular", "index": 587, "label": 0}
{"input": "void test_multithread_random()\n{\n  Eigen::ThreadPool tp(2);\n  Eigen::ThreadPoolDevice device(&tp, 2);\n  Tensor<float, 1> t(1 << 20);\n  t.device(device) = t.random<Eigen::internal::NormalRandomGenerator<float>>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_thread_pool.cpp", "function_name": "test_multithread_random", "index": 588, "label": 0}
{"input": "T mag2(const std::vector<std::complex<T> > & vec)\n{\n    T out=0;\n    for (size_t k=0;k<vec.size();++k)\n        out += mag2(vec[k]);\n    return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/doc/examples/FFT.cpp", "function_name": "mag2", "index": 589, "label": 0}
{"input": "void init(int* indices_, DistanceType* dists_)\n    {\n        indices = indices_;\n        dists = dists_;\n        count = 0;\n        worst_distance_ = (std::numeric_limits<DistanceType>::max)();\n        dists[capacity-1] = worst_distance_;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "indices_", "index": 590, "label": 0}
{"input": "void Otto::Execute(int amplitude[SERVO_COUNT], int offset[SERVO_COUNT], int period,\n                   double phase_diff[SERVO_COUNT], float steps = 1.0) {\n    if (GetRestState() == true) {\n        SetRestState(false);\n    }\n\n    int cycles = (int)steps;\n\n    \n    if (cycles >= 1)\n        for (int i = 0; i < cycles; i++)\n            OscillateServos(amplitude, offset, period, phase_diff);\n\n    \n    OscillateServos(amplitude, offset, period, phase_diff, (float)steps - cycles);\n    vTaskDelay(pdMS_TO_TICKS(10));\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::Execute", "index": 591, "label": 0}
{"input": "static inline\nbool isAllOnes(const MatShape &inputShape, int startPos, int endPos)\n{\n    CV_Assert(!inputShape.empty());\n\n    CV_CheckGE((int) inputShape.size(), startPos, \"\");\n    CV_CheckGE(startPos, 0, \"\");\n    CV_CheckLE(startPos, endPos, \"\");\n    CV_CheckLE((size_t)endPos, inputShape.size(), \"\");\n\n    for (size_t i = startPos; i < endPos; i++)\n    {\n        if (inputShape[i] != 1)\n            return false;\n    }\n    return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/shape_utils.hpp", "function_name": "isAllOnes", "index": 592, "label": 0}
{"input": "SkylineInplaceLU(MatrixType& matrix, int flags = 0)\n    :  m_flags(flags), m_status(0), m_lu(matrix) {\n        m_precision = RealScalar(0.1) * Eigen::dummy_precision<RealScalar > ();\n        m_lu.IsRowMajor ? computeRowMajor() : compute();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h", "function_name": "SkylineInplaceLU", "index": 593, "label": 0}
{"input": "static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 4>::vec_type& vec, T val)\n        {\n            vec.w = val;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "setAlpha", "index": 594, "label": 0}
{"input": "void OffscreenCanvasRenderingContext2D::fill_text(StringView, float, float, Optional<double>)\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::fill_text()\");\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::fill_text", "index": 595, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet finalizePacket(const Packet& vaccum) const {\n    return vaccum;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFunctors.h", "function_name": "finalizePacket", "index": 596, "label": 0}
{"input": "CwiseNullaryOp<circulant_functor<ArgType>, typename circulant_helper<ArgType>::MatrixType>\nmakeCirculant(const Eigen::MatrixBase<ArgType>& arg)\n{\n  typedef typename circulant_helper<ArgType>::MatrixType MatrixType;\n  return MatrixType::NullaryExpr(arg.size(), arg.size(), circulant_functor<ArgType>(arg.derived()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/make_circulant2.cpp", "function_name": "makeCirculant", "index": 597, "label": 0}
{"input": "void demo_all_types(int nfft)\n{\n    cout << \"nfft=\" << nfft << endl;\n    cout << \"   float\" << endl;\n    two_demos<float>(nfft);\n    cout << \"   double\" << endl;\n    two_demos<double>(nfft);\n    cout << \"   long double\" << endl;\n    two_demos<long double>(nfft);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/doc/examples/FFT.cpp", "function_name": "demo_all_types", "index": 598, "label": 0}
{"input": "static void test_tensor_epsilon()\n{\n  SGroup<AntiSymmetry<0,1>, AntiSymmetry<1,2>> sym;\n  Tensor<int, 3> epsilon(3,3,3);\n\n  epsilon.setZero();\n  sym(epsilon, 0, 1, 2) = 1;\n\n  for (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n      for (int k = 0; k < 3; k++) {\n        VERIFY_IS_EQUAL((epsilon(i,j,k)), (- (j - i) * (k - j) * (i - k) / 2) );\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_symmetry.cpp", "function_name": "test_tensor_epsilon", "index": 599, "label": 0}
{"input": "inline cl_int clGetProgramBuildInfo(cl_program p0, cl_device_id p1, cl_program_build_info p2, size_t p3, void* p4, size_t* p5) { return clGetProgramBuildInfo_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetProgramBuildInfo", "index": 600, "label": 0}
{"input": "inline Quat<T> Quat<T>::acos() const\n{\n    Quat<T> v(0, x, y, z);\n    T vNorm = v.norm();\n    T k = vNorm < CV_QUAT_EPS ? 1 : vNorm;\n    return -v / k * acosh();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::acos", "index": 601, "label": 0}
{"input": "EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacketType& dest) const\n  {\n    dest = pload<LhsPacketType>(a);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "loadLhs", "index": 602, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vsetle4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vset4.u32.u32.le %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int c;\n        asm(\"not.b32 %0, %0;\" : \"+r\"(a));\n        c = vavrg4(a, b);   \n        c = c & 0x80808080; \n        r = c >> 7;         \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vsetle4", "index": 603, "label": 0}
{"input": "inline std::ptrdiff_t manage_caching_sizes_helper(std::ptrdiff_t a, std::ptrdiff_t b)\n{\n  return a<=0 ? b : a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "manage_caching_sizes_helper", "index": 604, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline typename ConstNRowsBlockXpr<N>::Type topRows(Index n = N) const\n{\n  return typename ConstNRowsBlockXpr<N>::Type(derived(), 0, 0, n, cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "topRows", "index": 605, "label": 0}
{"input": "void evalSolver( const POLYNOMIAL& pols )\n{\n  typedef typename POLYNOMIAL::Scalar Scalar;\n\n  typedef PolynomialSolver<Scalar, Deg >              PolynomialSolverType;\n\n  PolynomialSolverType psolve;\n  aux_evalSolver<Deg, POLYNOMIAL, PolynomialSolverType>( pols, psolve );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/polynomialsolver.cpp", "function_name": "evalSolver", "index": 606, "label": 0}
{"input": "inline bool SSLClient::create_and_connect_socket(Socket &socket, Error &error) {\n  return is_valid() && ClientImpl::create_and_connect_socket(socket, error);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::create_and_connect_socket", "index": 607, "label": 0}
{"input": "esp_err_t bsp_led_rgb_set(uint8_t r, uint8_t g, uint8_t b)\n{\n    esp_err_t ret = ESP_OK;\n\n    ret |= led_strip_set_pixel(led_strip, 0, r, g, b);\n    ret |= led_strip_set_pixel(led_strip, 1, r, g, b);\n    ret |= led_strip_set_pixel(led_strip, 2, r, g, b);\n    ret |= led_strip_set_pixel(led_strip, 3, r, g, b);\n    ret |= led_strip_refresh(led_strip);\n    return ret;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/dog_light.cc", "function_name": "bsp_led_rgb_set", "index": 608, "label": 0}
{"input": "SplineType SplineFitting<SplineType>::Interpolate(const PointArrayType& pts, DenseIndex degree)\n  {\n    KnotVectorType chord_lengths; \n    ChordLengths(pts, chord_lengths);\n    return Interpolate(pts, degree, chord_lengths);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/SplineFitting.h", "function_name": "SplineFitting<SplineType>::Interpolate", "index": 609, "label": 0}
{"input": "const TensorCwiseUnaryOp<internal::bind2nd_op<internal::scalar_pow_op<Scalar,Scalar> >, const Derived>\n    pow(Scalar exponent) const {\n      return unaryExpr(internal::bind2nd_op<internal::scalar_pow_op<Scalar,Scalar> >(exponent));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "exponent", "index": 610, "label": 0}
{"input": "static void test_rank_zero()\n{\n  Eigen::Sizes<> scalar;\n  VERIFY_IS_EQUAL((int)scalar.TotalSize(), 1);\n  VERIFY_IS_EQUAL((int)scalar.rank(), 0);\n  VERIFY_IS_EQUAL((int)internal::array_prod(scalar), 1);\n\n  Eigen::DSizes<ptrdiff_t, 0> dscalar;\n  VERIFY_IS_EQUAL((int)dscalar.TotalSize(), 1);\n  VERIFY_IS_EQUAL((int)dscalar.rank(), 0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_dimension.cpp", "function_name": "test_rank_zero", "index": 611, "label": 0}
{"input": "HWY_INLINE void PositionalEncodingQK(const U* qk, size_t pos, size_t layer,\n                                       const float mul, U* qk_out) {\n    \n    const size_t qkv_dim = layer_config_.qkv_dim;\n    const float* inv_timescale = activations_.inv_timescale.Const();\n    \n    (void)layer;\n    if (layer_weights_.layer_config.post_qk == PostQKType::HalfRope) {\n      hwy::CopyBytes(qk, qk_out, qkv_dim * sizeof(*qk));\n      Rope(qk_out, qkv_dim / 2, inv_timescale, pos);\n      MulByConst(mul, qk_out, qkv_dim);\n    } else {\n      RopeAndMulBy(mul, qk, qkv_dim, inv_timescale, pos, qk_out);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f37402da57cc5c2d1e467168a40689ce2571fd49", "file_path": "gemma/gemma-inl.h", "function_name": "PositionalEncodingQK", "index": 612, "label": 0}
{"input": "static inline\ncv::Vec3d cv::operator*(const cv::Affine3d& affine, const cv::Vec3d& v)\n{\n    const cv::Matx44d& m = affine.matrix;\n    cv::Vec3d r;\n    r.val[0] = m.val[0] * v[0] + m.val[1] * v[1] + m.val[ 2] * v[2] + m.val[ 3];\n    r.val[1] = m.val[4] * v[0] + m.val[5] * v[1] + m.val[ 6] * v[2] + m.val[ 7];\n    r.val[2] = m.val[8] * v[0] + m.val[9] * v[1] + m.val[10] * v[2] + m.val[11];\n    return r;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/affine.hpp", "function_name": "cv::operator*", "index": 613, "label": 0}
{"input": "NdArray<dtype> amax(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        return inArray.max(inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/amax.hpp", "function_name": "amax", "index": 614, "label": 0}
{"input": "static Ret get_mempolicy(int* mode, UL* nodes, UL max_node, void* addr,\n                           unsigned flags) {\n    return syscall(__NR_get_mempolicy, mode, nodes, max_node, addr, flags);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/allocator.cc", "function_name": "max_node", "index": 615, "label": 0}
{"input": "void NoWakeWord::OnWakeWordDetected(std::function<void(const std::string& wake_word)> callback) {\n    \n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/no_wake_word.cc", "function_name": "NoWakeWord::OnWakeWordDetected", "index": 616, "label": 0}
{"input": "EIGEN_DONT_INLINE typename Vector::Scalar foo(const Vector& p)\n{\n  typedef typename Vector::Scalar Scalar;\n  return (p-Vector(Scalar(-1),Scalar(1.))).norm() + (p.array().sqrt().abs() * p.array().sin()).sum() + p.dot(p);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/forward_adolc.cpp", "function_name": "typename Vector::Scalar foo", "index": 617, "label": 0}
{"input": "inline Unowned<MapTypeInfo> TypeInfo::GetMapTypeInfo() const {\n  const OrtMapTypeInfo* out;\n  ThrowOnError(GetApi().CastTypeInfoToMapTypeInfo(p_, &out));\n  return Unowned<MapTypeInfo>{const_cast<OrtMapTypeInfo*>(out)};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TypeInfo::GetMapTypeInfo", "index": 618, "label": 0}
{"input": "AdcPdmAudioCodec::~AdcPdmAudioCodec() {\n    ESP_ERROR_CHECK(esp_codec_dev_close(output_dev_));\n    esp_codec_dev_delete(output_dev_);\n    ESP_ERROR_CHECK(esp_codec_dev_close(input_dev_));\n    esp_codec_dev_delete(input_dev_);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_codecs/adc_pdm_audio_codec.cc", "function_name": "AdcPdmAudioCodec::~AdcPdmAudioCodec", "index": 619, "label": 0}
{"input": "constexpr bool IsPowerOf2(size_t val)\n        {\n          return (val == 1 || (val & (val-1)) == 0);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "IsPowerOf2", "index": 620, "label": 0}
{"input": "inline int mpreal::check_range (int t, mp_rnd_t rnd_mode)\n{\n    return mpfr_check_range(mpfr_ptr(),t,rnd_mode);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::check_range", "index": 621, "label": 0}
{"input": "inline const mpreal fmin(const mpreal& x, const mpreal& y,  mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal a;\n    mpfr_min(a.mp,x.mp,y.mp,rnd_mode);\n    return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "fmin", "index": 622, "label": 0}
{"input": "inline std::string KernelInfoImpl<T>::GetNodeName() const {\n  size_t size = 0;\n\n  \n  Ort::ThrowOnError(GetApi().KernelInfo_GetNodeName(this->p_, nullptr, &size));\n\n  std::string out;\n  out.resize(size);\n  Ort::ThrowOnError(GetApi().KernelInfo_GetNodeName(this->p_, &out[0], &size));\n  out.resize(size - 1);  \n\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::GetNodeName", "index": 623, "label": 0}
{"input": "typename DenseBase<Derived>::ConstantReturnType\nDenseBase<Derived>::Ones()\n{\n  return Constant(Scalar(1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::Ones", "index": 624, "label": 0}
{"input": "cv::GOpaque<T> meta(G g, const std::string &tag) {\n    using O = cv::GOpaque<T>;\n    cv::GKernel k{\n          detail::GMeta::id()                    \n        , tag                                    \n        , &detail::GMeta::getOutMeta             \n        , {cv::detail::GTypeTraits<O>::shape}    \n        , {cv::detail::GTypeTraits<G>::op_kind}  \n        , {cv::detail::GObtainCtor<O>::get()}    \n        , {cv::detail::GTypeTraits<O>::op_kind}  \n    };\n    cv::GCall call(std::move(k));\n    call.pass(g);\n    return std::get<0>(detail::GMeta::yield<O>(call, cv::detail::MkSeq<1>::type()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/meta.hpp", "function_name": "meta", "index": 625, "label": 0}
{"input": "inline void reserve(Index reserveSize, Index reserveUpperSize, Index reserveLowerSize) {\n        m_data.reserve(reserveSize, reserveUpperSize, reserveLowerSize);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "reserve", "index": 626, "label": 0}
{"input": "size_t MemoryMappedFile::size() const\n{\n#if defined(_WIN32)\n    return fileSize.QuadPart;\n#else\n    return static_cast<size_t>(fileSize);\n#endif\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "cd6fcb33bdcaff37c8c9d2083c7951e1d73ae9da", "file_path": "XenonUtils/memory_mapped_file.cpp", "function_name": "MemoryMappedFile::size", "index": 627, "label": 0}
{"input": "void check_sparse_abs_determinant(Solver& solver, const typename Solver::MatrixType& A, const DenseMat& dA)\n{\n  using std::abs;\n  typedef typename Solver::MatrixType Mat;\n  typedef typename Mat::Scalar Scalar;\n  \n  solver.compute(A);\n  if (solver.info() != Success)\n  {\n    std::cerr << \"WARNING | sparse solver testing: factorization failed (check_sparse_abs_determinant)\\n\";\n    return;\n  }\n\n  Scalar refDet = abs(dA.determinant());\n  VERIFY_IS_APPROX(refDet,solver.absDeterminant());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "check_sparse_abs_determinant", "index": 628, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)\n{\n  std::complex<float> res;\n  Packet1cd b = padd<Packet1cd>(a.cd[0], a.cd[1]);\n  vec_st2f(b.v, (float*)&res);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/Complex.h", "function_name": "std::complex<float> predux<Packet2cf>", "index": 629, "label": 0}
{"input": "inline void TensorTypeAndShapeInfoImpl<T>::GetSymbolicDimensions(const char** values, size_t values_count) const {\n  ThrowOnError(GetApi().GetSymbolicDimensions(this->p_, values, values_count));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfoImpl<T>::GetSymbolicDimensions", "index": 630, "label": 0}
{"input": "void test_sparse_product()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( (sparse_product<SparseMatrix<double,ColMajor> >()) );\n    CALL_SUBTEST_1( (sparse_product<SparseMatrix<double,RowMajor> >()) );\n    CALL_SUBTEST_1( (bug_942<double>()) );\n    CALL_SUBTEST_2( (sparse_product<SparseMatrix<std::complex<double>, ColMajor > >()) );\n    CALL_SUBTEST_2( (sparse_product<SparseMatrix<std::complex<double>, RowMajor > >()) );\n    CALL_SUBTEST_3( (sparse_product<SparseMatrix<float,ColMajor,long int> >()) );\n    CALL_SUBTEST_4( (sparse_product_regression_test<SparseMatrix<double,RowMajor>, Matrix<double, Dynamic, Dynamic, RowMajor> >()) );\n\n    CALL_SUBTEST_5( (test_mixing_types<float>()) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_product.cpp", "function_name": "test_sparse_product", "index": 631, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_boolean_xor_op, const Derived, const OtherDerived>\n    operator^(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_boolean_xor_op());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_boolean_xor_op, const Derived, const OtherDerived>\n    operator^", "index": 632, "label": 0}
{"input": "RadiusUniqueResultSet(DistanceType radius) :\n        radius_(radius)\n    {\n        is_full_ = true;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "RadiusUniqueResultSet", "index": 633, "label": 0}
{"input": "EIGEN_STRONG_INLINE const CwiseAbs2ReturnType\ncwiseAbs2() const { return CwiseAbs2ReturnType(derived()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h", "function_name": "CwiseAbs2ReturnType\ncwiseAbs2", "index": 634, "label": 0}
{"input": "void test_dgmres_T()\n{\n  DGMRES<SparseMatrix<T>, DiagonalPreconditioner<T> > dgmres_colmajor_diag;\n  DGMRES<SparseMatrix<T>, IdentityPreconditioner    > dgmres_colmajor_I;\n  DGMRES<SparseMatrix<T>, IncompleteLUT<T> >           dgmres_colmajor_ilut;\n  \n\n  CALL_SUBTEST( check_sparse_square_solving(dgmres_colmajor_diag)  );\n\n  CALL_SUBTEST( check_sparse_square_solving(dgmres_colmajor_ilut)     );\n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/dgmres.cpp", "function_name": "test_dgmres_T", "index": 635, "label": 0}
{"input": "typename MatrixType::RealScalar FullPivHouseholderQR<MatrixType>::absDeterminant() const\n{\n  using std::abs;\n  eigen_assert(m_isInitialized && \"FullPivHouseholderQR is not initialized.\");\n  eigen_assert(m_qr.rows() == m_qr.cols() && \"You can't take the determinant of a non-square matrix!\");\n  return abs(m_qr.diagonal().prod());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h", "function_name": "FullPivHouseholderQR<MatrixType>::absDeterminant", "index": 636, "label": 0}
{"input": "int JMat::load(std::string picfile){\n    const char* fn = picfile.c_str();\n    int len = strlen(fn);\n    if(len<4)return -1;\n    fn+= len-3;\n    int gpg = (fn[0]=='g')&&(fn[1]=='p')&&(fn[2]=='g');\n    if(gpg){\n        return loadgpg(picfile);\n    }else{\n        return loadjpg(picfile);\n    }\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/jmat.cpp", "function_name": "JMat::load", "index": 637, "label": 0}
{"input": "explicit OriginalClassName(const OriginalClassName::Params& params = OriginalClassName::Params())\n    {\n        params_ = params;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "OriginalClassName", "index": 638, "label": 0}
{"input": "void Otto::MoveSingle(int position, int servo_number) {\n    if (position > 180)\n        position = 90;\n    if (position < 0)\n        position = 90;\n\n    if (GetRestState() == true) {\n        SetRestState(false);\n    }\n\n    if (servo_number >= 0 && servo_number < SERVO_COUNT && servo_pins_[servo_number] != -1) {\n        servo_[servo_number].SetPosition(position);\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::MoveSingle", "index": 639, "label": 0}
{"input": "void BindB(size_t N, const ConstMat<TB>& B, MMParallel& parallel) {\n  if (!Allocator::ShouldBind()) return;\n\n  const IndexRangePartition ranges_np =\n      parallel.RangesOfNP(MMParallel::kMaxPackages, N, kNR);\n  const size_t quantum = Allocator::QuantumBytes() / sizeof(TB);\n  for (size_t pkg_idx = 0; pkg_idx < ranges_np.NumTasks(); ++pkg_idx) {\n    const IndexRange& rows_b = ranges_np.Range(pkg_idx);\n    const size_t node = parallel.Node(pkg_idx);\n    uintptr_t begin =\n        reinterpret_cast<uintptr_t>(B.ptr + B.Row(rows_b.begin()));\n    uintptr_t end = begin + rows_b.Num() * B.Stride() * sizeof(TB);\n    \n    \n    begin = hwy::RoundUpTo(begin, quantum);\n    end = hwy::RoundDownTo(end, quantum);\n    if (HWY_LIKELY(begin != end)) {\n      Allocator::BindMemory(reinterpret_cast<void*>(begin), end - begin, node);\n    }\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "BindB", "index": 640, "label": 0}
{"input": "void HarmonySessionHandler::OnSessionDestroy(int session_id) {\n  auto ui_task_runner =\n      fml::MessageLoop::EnsureInitializedForCurrentThread(loop_)\n          .GetTaskRunner();\n  ui_task_runner->PostTask([weak_ptr = weak_from_this(), session_id]() {\n    napi_value js_this;\n    auto handler = weak_ptr.lock();\n    if (!handler) {\n      return;\n    }\n    napi_get_reference_value(handler->env_, handler->js_this_ref_, &js_this);\n    napi_value onSessionDestroy;\n    auto status = napi_get_named_property(\n        handler->env_, js_this, \"onSessionDestroy\", &onSessionDestroy);\n    napi_value args[1];\n    napi_create_int32(handler->env_, session_id, &args[0]);\n    napi_value result;\n    status = napi_call_function(handler->env_, js_this, onSessionDestroy, 1,\n                                args, &result);\n  });\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/harmony_session_handler.cc", "function_name": "HarmonySessionHandler::OnSessionDestroy", "index": 641, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE\ndouble loadConstant(const double* address) {\n  return __ldg(address);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h", "function_name": "loadConstant", "index": 642, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline void conditional_aligned_delete(T *ptr, std::size_t size)\n{\n  destruct_elements_of_array<T>(ptr, size);\n  conditional_aligned_free<Align>(ptr);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "conditional_aligned_delete", "index": 643, "label": 0}
{"input": "void UIBaseInput::OnFocusChange(bool has_focus, bool is_focus_transition) {\n  if (!has_focus) {\n    if (!is_focus_transition) {\n      NodeManager::Instance().SetAttributeWithNumberValue(\n          input_node_, GetEditingAttributeType(), 0);\n      NodeManager::Instance().SetAttributeWithNumberValue(input_node_,\n                                                          NODE_FOCUS_STATUS, 0);\n    }\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::OnFocusChange", "index": 644, "label": 0}
{"input": "bool JSVMRuntime::isFunction(const piper::Object& obj) const {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value func_value = nullptr;\n  JSVMHelper::objectRef(obj, &func_value);\n\n  bool result;\n  JSVM_CALL_RETURN(OH_JSVM_IsFunction(getEnv(), func_value, &result), false);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::isFunction", "index": 645, "label": 0}
{"input": "bool ListEventManager::NotAtBouncesArea(float original_offset,\n                                        float content_size, float list_size) {\n  \n  if (base::FloatsLarger(0, original_offset)) {\n    return false;\n  }\n  \n  if (base::FloatsLargerOrEqual(list_size, content_size) &&\n      base::FloatsLarger(original_offset, 0)) {\n    return false;\n  }\n  \n  if (base::FloatsLarger(content_size, list_size) &&\n      base::FloatsLarger(original_offset + list_size, content_size)) {\n    return false;\n  }\n  return true;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "a0dcde9c711d8fb582d9df9920816808b9a1f177", "file_path": "core/renderer/ui_component/list/list_event_manager.cc", "function_name": "ListEventManager::NotAtBouncesArea", "index": 646, "label": 0}
{"input": "void assign_row(void* ptr, int cols, Scalar const& s)\n        {\n            auto p = static_cast<T*>(ptr);\n            for (int c = 0; c < cols; c++)\n            {\n                for (int ch = 0; ch < channels; ch++)\n                {\n                    p[c * channels + ch] = saturate<T>(s[ch], roundd);\n                }\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/own/mat.hpp", "function_name": "assign_row", "index": 647, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE void _init1(const Index& val0,\n                                    typename internal::enable_if<    (!internal::is_same<Index,Scalar>::value)\n                                                                  && (internal::is_same<Index,T>::value)\n                                                                  && Base::SizeAtCompileTime!=Dynamic\n                                                                  && Base::SizeAtCompileTime!=1\n                                                                  && internal::is_convertible<T, Scalar>::value\n                                                                  && internal::is_same<typename internal::traits<Derived>::XprKind,ArrayXpr>::value,T*>::type* = 0)\n    {\n      Base::setConstant(val0);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "_init1", "index": 648, "label": 0}
{"input": "void Oscillator::SetT(unsigned int T) {\n    period_ = T;\n\n    number_samples_ = period_ / sampling_period_;\n    inc_ = 2 * M_PI / number_samples_;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/oscillator.cc", "function_name": "Oscillator::SetT", "index": 649, "label": 0}
{"input": "Result(const double val, const double deriv) noexcept :\n                value(val),\n                derivative(deriv)\n            {\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Integrate/gauss_legendre.hpp", "function_name": "Result", "index": 650, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline const TransformTimeDiagonalReturnType\n    operator * (const DiagonalBase<DiagonalDerived> &b) const\n  {\n    TransformTimeDiagonalReturnType res(*this);\n    res.linearExt() *= b;\n    return res;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "TransformTimeDiagonalReturnType\n    operator *", "index": 651, "label": 0}
{"input": "NdArray<dtype> convolve1d(const NdArray<dtype>& inImageArray,\n                              const NdArray<dtype>& inWeights,\n                              Boundary              inBoundaryType  = Boundary::REFLECT,\n                              dtype                 inConstantValue = 0)\n    {\n        const uint32   boundarySize = inWeights.size() / 2; \n        NdArray<dtype> arrayWithBoundary =\n            boundary::addBoundary1d(inImageArray, inBoundaryType, inWeights.size(), inConstantValue);\n        NdArray<dtype> output(1, inImageArray.size());\n\n        NdArray<dtype> weightsFlat = fliplr(inWeights.flatten());\n\n        const uint32 endPointRow = boundarySize + inImageArray.size();\n\n        for (uint32 i = boundarySize; i < endPointRow; ++i)\n        {\n            NdArray<dtype> window = arrayWithBoundary[Slice(i - boundarySize, i + boundarySize + 1)].flatten();\n\n            output[i - boundarySize] = dot(window, weightsFlat).item();\n        }\n\n        return output;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Filters/Filters1d/convolve1d.hpp", "function_name": "convolve1d", "index": 652, "label": 0}
{"input": "static inline\nGpuMat createContinuous(Size size, int type)\n{\n    GpuMat m;\n    createContinuous(size, type, m);\n    return m;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "createContinuous", "index": 653, "label": 0}
{"input": "int NetCurl::docurl(){\n    int rst = 0;\n    CURLcode res = CURLE_OK;\n    CURL    *curl = curl_easy_init();\n    if(!curl)return -997;\n    \n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 1L); \n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 2L);\n    \n    \n    curl_easy_setopt(curl, CURLOPT_CAINFO, curl_certpath);\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n\n    curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);\n    curl_easy_setopt(curl, CURLOPT_TIMEOUT_MS, m_timeoutms);\n    curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT_MS, m_timeoutms);\n    curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n    curl_easy_setopt(curl, CURLOPT_POST, 0);\n        \n    res = curl_easy_perform(curl);\n    if(curl) curl_easy_cleanup(curl);\n    if (res == CURLE_OK) {\n        \n        rst = 0;\n        if(m_loop) m_loop->post(9999,m_wavmat);\n    }else{\n        m_status = -1;\n        rst= 0 - res;\n    }\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/netcurl.cpp", "function_name": "NetCurl::docurl", "index": 654, "label": 0}
{"input": "inline Unowned<TensorTypeAndShapeInfo> TypeInfo::GetTensorTypeAndShapeInfo() const {\n  const OrtTensorTypeAndShapeInfo* out;\n  ThrowOnError(GetApi().CastTypeInfoToTensorInfo(p_, &out));\n  return Unowned<TensorTypeAndShapeInfo>(const_cast<OrtTensorTypeAndShapeInfo*>(out));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TypeInfo::GetTensorTypeAndShapeInfo", "index": 655, "label": 0}
{"input": "inline uint32x4_t p4ui_CONJ_XOR() {\n\n#if EIGEN_COMP_CLANG\n  uint32x4_t ret = { 0x00000000, 0x80000000, 0x00000000, 0x80000000 };\n  return ret;\n#else\n  static const uint32_t conj_XOR_DATA[] = { 0x00000000, 0x80000000, 0x00000000, 0x80000000 };\n  return vld1q_u32( conj_XOR_DATA );\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/NEON/Complex.h", "function_name": "p4ui_CONJ_XOR", "index": 656, "label": 0}
{"input": "Point2f RotationWarperBase<P>::warpPointBackward(const Point2f& pt, InputArray K, InputArray R)\n{\n    projector_.setCameraParams(K, R);\n    Point2f xy;\n    projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);\n    return xy;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "RotationWarperBase<P>::warpPointBackward", "index": 657, "label": 0}
{"input": "explicit AmbiVector(Index size)\n      : m_buffer(0), m_zero(0), m_size(0), m_allocatedSize(0), m_allocatedElements(0), m_mode(-1)\n    {\n      resize(size);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/AmbiVector.h", "function_name": "AmbiVector", "index": 658, "label": 0}
{"input": "static inline void saupd(int *ido, char *bmat, int *n, char *which,\n      int *nev, double *tol, double *resid, int *ncv,\n      double *v, int *ldv, int *iparam, int *ipntr,\n      double *workd, double *workl, int *lworkl, int *info)\n  {\n    dsaupd_(ido, bmat, n, which, nev, tol, resid, ncv, v, ldv, iparam, ipntr, workd, workl, lworkl, info);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Eigenvalues/ArpackSelfAdjointEigenSolver.h", "function_name": "ido", "index": 659, "label": 0}
{"input": "auto bessel_yn_prime(dtype1 inV, const NdArray<dtype2>& inArrayX)\n    {\n        NdArray<decltype(bessel_yn_prime(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArrayX.shape());\n\n        stl_algorithms::transform(\n            inArrayX.cbegin(),\n            inArrayX.cend(),\n            returnArray.begin(),\n            [inV](dtype2 inX) -> auto{ return bessel_yn_prime(inV, inX); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/bessel_yn_prime.hpp", "function_name": "bessel_yn_prime", "index": 660, "label": 0}
{"input": "void SetCandidates(std::vector<TConfig> candidates) {\n    HWY_DASSERT(!HasCandidates());\n    candidates_.swap(candidates);\n    HWY_DASSERT(HasCandidates());\n    min_ticks_.resize(candidates_.size(), ~uint64_t{0});\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "std::vector<TConfig>", "index": 661, "label": 0}
{"input": "NdArray<dtype> studentT(const Shape& inShape, dtype inDof)\n    {\n        return detail::studentT(generator_, inShape, inDof);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/studentT.hpp", "function_name": "studentT", "index": 662, "label": 0}
{"input": "void quaternionAlignment(void){\n  typedef Quaternion<Scalar,AutoAlign> QuaternionA;\n  typedef Quaternion<Scalar,DontAlign> QuaternionUA;\n\n  EIGEN_ALIGN_MAX Scalar array1[4];\n  EIGEN_ALIGN_MAX Scalar array2[4];\n  EIGEN_ALIGN_MAX Scalar array3[4+1];\n  Scalar* arrayunaligned = array3+1;\n\n  QuaternionA *q1 = ::new(reinterpret_cast<void*>(array1)) QuaternionA;\n  QuaternionUA *q2 = ::new(reinterpret_cast<void*>(array2)) QuaternionUA;\n  QuaternionUA *q3 = ::new(reinterpret_cast<void*>(arrayunaligned)) QuaternionUA;\n\n  q1->coeffs().setRandom();\n  *q2 = *q1;\n  *q3 = *q1;\n\n  VERIFY_IS_APPROX(q1->coeffs(), q2->coeffs());\n  VERIFY_IS_APPROX(q1->coeffs(), q3->coeffs());\n  #if defined(EIGEN_VECTORIZE) && EIGEN_MAX_STATIC_ALIGN_BYTES>0\n  if(internal::packet_traits<Scalar>::Vectorizable && internal::packet_traits<Scalar>::size<=4)\n    VERIFY_RAISES_ASSERT((::new(reinterpret_cast<void*>(arrayunaligned)) QuaternionA));\n  #endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_quaternion.cpp", "function_name": "quaternionAlignment", "index": 663, "label": 0}
{"input": "inline void mmap::close() {\n#if defined(_WIN32)\n  if (addr_) {\n    ::UnmapViewOfFile(addr_);\n    addr_ = nullptr;\n  }\n\n  if (hMapping_) {\n    ::CloseHandle(hMapping_);\n    hMapping_ = NULL;\n  }\n\n  if (hFile_ != INVALID_HANDLE_VALUE) {\n    ::CloseHandle(hFile_);\n    hFile_ = INVALID_HANDLE_VALUE;\n  }\n#else\n  if (addr_ != nullptr) {\n    munmap(addr_, size_);\n    addr_ = nullptr;\n  }\n\n  if (fd_ != -1) {\n    ::close(fd_);\n    fd_ = -1;\n  }\n#endif\n  size_ = 0;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "mmap::close", "index": 664, "label": 0}
{"input": "bool isSquareDistance()\n{\n    typedef typename Distance::ElementType ElementType;\n\n    isSquareDist<Distance, ElementType> dummy;\n    return dummy();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/dist.h", "function_name": "isSquareDistance", "index": 665, "label": 0}
{"input": "void EspWakeWord::StartDetection() {\n    ESP_LOGI(TAG, \"Start wake word detection\");\n    xEventGroupSetBits(event_group_, DETECTION_RUNNING_EVENT);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/esp_wake_word.cc", "function_name": "EspWakeWord::StartDetection", "index": 666, "label": 0}
{"input": "void transform_products()\n{\n  typedef Matrix<Scalar,Dim+1,Dim+1> Mat;\n  typedef Transform<Scalar,Dim,Projective,Options> Proj;\n  typedef Transform<Scalar,Dim,Affine,Options> Aff;\n  typedef Transform<Scalar,Dim,AffineCompact,Options> AffC;\n\n  Proj p; p.matrix().setRandom();\n  Aff a; a.linear().setRandom(); a.translation().setRandom();\n  AffC ac = a;\n\n  Mat p_m(p.matrix()), a_m(a.matrix());\n\n  VERIFY_IS_APPROX((p*p).matrix(), p_m*p_m);\n  VERIFY_IS_APPROX((a*a).matrix(), a_m*a_m);\n  VERIFY_IS_APPROX((p*a).matrix(), p_m*a_m);\n  VERIFY_IS_APPROX((a*p).matrix(), a_m*p_m);\n  VERIFY_IS_APPROX((ac*a).matrix(), a_m*a_m);\n  VERIFY_IS_APPROX((a*ac).matrix(), a_m*a_m);\n  VERIFY_IS_APPROX((p*ac).matrix(), p_m*a_m);\n  VERIFY_IS_APPROX((ac*p).matrix(), a_m*p_m);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_transformations.cpp", "function_name": "transform_products", "index": 667, "label": 0}
{"input": "float Normalize(float value, float max_value = 255.0f) {\n  return 2.0f * (value / max_value) - 1.0f;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "331d2ccc025e379f880a4eaa017b5f1db35ab24c", "file_path": "paligemma/image_test.cc", "function_name": "Normalize", "index": 668, "label": 0}
{"input": "explicit MatrixPower(const MatrixType& A) :\n      m_A(A),\n      m_conditionNumber(0),\n      m_rank(A.cols()),\n      m_nulls(0)\n    { eigen_assert(A.rows() == A.cols()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixPower.h", "function_name": "MatrixPower", "index": 669, "label": 0}
{"input": "static void test_apply_op()\n{\n  typedef type_list<dummy_a, dummy_b, dummy_c> tl;\n  VERIFY((!!is_same<typename apply_op_from_left<dummy_op, dummy_a, tl>::type, type_list<dummy_e, dummy_c, dummy_d>>::value));\n  VERIFY((!!is_same<typename apply_op_from_right<dummy_op, dummy_a, tl>::type, type_list<dummy_e, dummy_d, dummy_b>>::value));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_meta.cpp", "function_name": "test_apply_op", "index": 670, "label": 0}
{"input": "EIGEN_STRONG_INLINE PacketScalar packet(Index index) const\n    {\n      return internal::ploadt<PacketScalar, LoadMode>(m_storage.data() + index);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "PacketScalar packet", "index": 671, "label": 0}
{"input": "CoTryTask<void> FDBTransaction::setVersionstampedValue(std::string_view key, std::string_view value, uint32_t offset) {\n  if (offset + sizeof(kv::Versionstamp) > value.size()) {\n    co_return makeError(\n        StatusCode::kInvalidArg,\n        fmt::format(\"setVersionstampedValue: {} + sizeof(kv::Versionstamp) > value.size {}\", offset, value.size()));\n  }\n  co_return co_await OpWrapper<Op::SetVersionstampedValue>::run([&](Op) -> CoTryTask<void> {\n    tr_.atomicOp(key, appendOffset(value, offset), FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_VALUE);\n    co_return Void{};\n  });\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "c69d46e7914b07dae9a14e79895da4f848d8a045", "file_path": "src/fdb/FDBTransaction.cc", "function_name": "FDBTransaction::setVersionstampedValue", "index": 672, "label": 0}
{"input": "void grab(const EigenBase<MatrixDerived> &A)\n    {\n      mp_matrix.~UmfpackMatrixRef();\n      ::new (&mp_matrix) UmfpackMatrixRef(A.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "grab", "index": 673, "label": 0}
{"input": "unsigned long FrameSource::readVidFrame(MediaData **frame) {\n    unsigned long size = videoPacketQueue->front(frame);\n    if (size > 0) {\n        LOGD(TAG, \"readVidFrame %lld\", (*frame)->pts);\n    }\n    return size;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/FrameSource.cpp", "function_name": "FrameSource::readVidFrame", "index": 674, "label": 0}
{"input": "void data_and_stride(const MatrixType& m)\n{\n  Index rows = m.rows();\n  Index cols = m.cols();\n\n  Index r1 = internal::random<Index>(0,rows-1);\n  Index r2 = internal::random<Index>(r1,rows-1);\n  Index c1 = internal::random<Index>(0,cols-1);\n  Index c2 = internal::random<Index>(c1,cols-1);\n\n  MatrixType m1 = MatrixType::Random(rows, cols);\n  compare_using_data_and_stride(m1.block(r1, c1, r2-r1+1, c2-c1+1));\n  compare_using_data_and_stride(m1.transpose().block(c1, r1, c2-c1+1, r2-r1+1));\n  compare_using_data_and_stride(m1.row(r1));\n  compare_using_data_and_stride(m1.col(c1));\n  compare_using_data_and_stride(m1.row(r1).transpose());\n  compare_using_data_and_stride(m1.col(c1).transpose());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/block.cpp", "function_name": "data_and_stride", "index": 675, "label": 0}
{"input": "void Foreach(const char* name, size_t detected, const Func& func) {\n    if (Begin() >= detected) {\n      HWY_ABORT(\"Invalid skip=%zu for %s, detected=%zu\", skip_, name, detected);\n    }\n    for (size_t i = Begin(); i < End(detected); ++i) {\n      func(i);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/topology.h", "function_name": "Foreach", "index": 676, "label": 0}
{"input": "inline void Value::GetOpaqueData(const char* domain, const char* type_name, T& out) const {\n  ThrowOnError(GetApi().GetOpaqueValue(domain, type_name, p_, &out, sizeof(T)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetOpaqueData", "index": 677, "label": 0}
{"input": "size_t JSVMRuntime::copyData(const ArrayBuffer& obj, uint8_t* dest_buf,\n                             size_t dest_len) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n\n  size_t src_len;\n  void* src_buf;\n  JSVM_CALL_RETURN(\n      OH_JSVM_GetArraybufferInfo(getEnv(), obj_value, &src_buf, &src_len), 0);\n\n  memcpy(dest_buf, src_buf, src_len);\n  return src_len;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::copyData", "index": 678, "label": 0}
{"input": "inline cl::sycl::accessor<T, 1, AcMd, cl::sycl::access::target::global_buffer>\n  get_sycl_accessor(size_t num_bytes, cl::sycl::handler &cgh, const T * ptr) const {\n    return (get_sycl_buffer<T>(num_bytes, ptr)->template get_access<AcMd, cl::sycl::access::target::global_buffer>(cgh));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h", "function_name": "get_sycl_accessor", "index": 679, "label": 0}
{"input": "inline cl_mem clCreateImage3D(cl_context p0, cl_mem_flags p1, const cl_image_format* p2, size_t p3, size_t p4, size_t p5, size_t p6, size_t p7, void* p8, cl_int* p9) { return clCreateImage3D_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateImage3D", "index": 680, "label": 0}
{"input": "void ParallelRead(BlobReader& reader, BlobMap& blobs, hwy::ThreadPool& pool) {\n  hwy::Span<const hwy::uint128_t> keys = reader.Keys();\n  for (const hwy::uint128_t key : keys) {\n    const auto ib = blobs.insert({key, {}});\n    HWY_ASSERT(ib.second);  \n    const size_t bytes = reader.BlobSize(key);\n    \n    ib.first->second.resize(bytes);\n    reader.Enqueue(key, ib.first->second.data(), bytes);\n  }\n  const BlobError err = reader.ReadAll(pool);\n  if (err != 0) {\n    HWY_ABORT(\"Parallel read failed: %d\\n\", err);\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f31e12e63b01ccc69280b14c46bc88774d359d27", "file_path": "compression/blob_compare.cc", "function_name": "ParallelRead", "index": 681, "label": 0}
{"input": "Index DGMRES<_MatrixType, _Preconditioner>::dgmresApplyDeflation(const RhsType &x, DestType &y) const\n{\n  DenseVector x1 = m_U.leftCols(m_r).transpose() * x; \n  y = x + m_U.leftCols(m_r) * ( m_lambdaN * m_luT.solve(x1) - x1);\n  return 0; \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/IterativeSolvers/DGMRES.h", "function_name": "DGMRES<_MatrixType, _Preconditioner>::dgmresApplyDeflation", "index": 682, "label": 0}
{"input": "void UIBaseInput::SendSelectionChangeEvent(const int32_t start,\n                                           const int32_t end) const {\n  const auto param = lepus::Dictionary::Create();\n  param->SetValue(\"selectionStart\", start);\n  param->SetValue(\"selectionEnd\", end);\n  \n  CustomEvent event{Sign(), \"selection\", \"detail\", lepus_value(param)};\n  context_->SendEvent(event);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SendSelectionChangeEvent", "index": 683, "label": 0}
{"input": "inline void BufferStream::get_remote_ip_and_port(std::string & ,\n                                                 int & ) const {}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "BufferStream::get_remote_ip_and_port", "index": 684, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReverseOp<const ReverseDimensions, const Derived>\n    reverse(const ReverseDimensions& rev) const {\n      return TensorReverseOp<const ReverseDimensions, const Derived>(derived(), rev);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReverseOp<const ReverseDimensions, const Derived>\n    reverse", "index": 685, "label": 0}
{"input": "~PowerManager() {\n        if (timer_handle_) {\n            esp_timer_stop(timer_handle_);\n            esp_timer_delete(timer_handle_);\n        }\n        if (adc_handle_) {\n            adc_oneshot_del_unit(adc_handle_);\n        }\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "02abd715884472ac6ed2b91f023f1f3c32379582", "file_path": "main/boards/esp32-cgc-144/power_manager_lite.h", "function_name": "~PowerManager", "index": 686, "label": 0}
{"input": "bool GOpaqueU::holds() const{\n        GAPI_Assert(m_hint != nullptr);\n        using U = util::decay_t<T>;\n        return dynamic_cast<TypeHint<U>*>(m_hint.get()) != nullptr;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gopaque.hpp", "function_name": "GOpaqueU::holds", "index": 687, "label": 0}
{"input": "__device__ void calcVecDiffGlobal(const T1* vec1, const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid)\n    {\n        for (int i = tid; i < len; i += THREAD_DIM)\n        {\n            T1 val1;\n            ForceGlob<T1>::Load(vec1, i, val1);\n\n            T2 val2;\n            ForceGlob<T2>::Load(vec2, i, val2);\n\n            dist.reduceIter(val1, val2);\n        }\n\n        dist.reduceAll<THREAD_DIM>(smem, tid);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_distance.hpp", "function_name": "calcVecDiffGlobal", "index": 688, "label": 0}
{"input": "static __forceinline unsigned __int64 _re_atomic_fetch_xor(\n\tsize_t size, void *a, unsigned __int64 v)\n{\n\tunsigned __int64 prev_val;\n\tassert(size == 1u || size == 2u || size == 4u || size == 8u);\n\tswitch (size) {\n\tcase 1u:\n\t\tprev_val = _InterlockedXor8((char*)a, (char)v);\n\t\tbreak;\n\tcase 2u:\n\t\tprev_val = _InterlockedXor16((short*)a, (short)v);\n\t\tbreak;\n\tcase 4u:\n\t\tprev_val = _InterlockedXor((long*)a, (long)v);\n\t\tbreak;\n\tdefault:\n#if defined(_M_IX86)\n\t\t{\n\t\t\t_ReadWriteBarrier();\n\t\t\tprev_val = *(const volatile __int64*)(a);\n\t\t\twhile (1) {\n\t\t\t\t__int64 new_val = prev_val ^ v;\n\t\t\t\t__int64 prev_val2 =\n\t\t\t\t\t_InterlockedCompareExchange64(\n\t\t\t\t\t\t(__int64*)a,\n\t\t\t\t\t\t(__int64)new_val,\n\t\t\t\t\t\t(__int64)prev_val);\n\t\t\t\tif (prev_val2 == prev_val)\n\t\t\t\t\tbreak;\n\t\t\t\tprev_val = prev_val2;\n\t\t\t}\n\t\t\t_ReadWriteBarrier();\n\t\t}\n#else\n\t\tprev_val = _InterlockedXor64((__int64*)a, (__int64)v);\n#endif\n\t\tbreak;\n\t}\n\n\treturn prev_val;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/dh_atomic.h", "function_name": "_re_atomic_fetch_xor", "index": 689, "label": 0}
{"input": "inline const mpreal const_infinity (int sign = 1, mp_prec_t p = mpreal::get_default_prec())\n{\n    mpreal x(0, p);\n    mpfr_set_inf(x.mpfr_ptr(), sign);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "const_infinity", "index": 690, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE\nTensorUInt128<uint64_t, uint64_t> operator + (const TensorUInt128<HL, LL>& lhs, const TensorUInt128<HR, LR>& rhs)\n{\n  TensorUInt128<uint64_t, uint64_t> result(lhs.high + rhs.high, lhs.low + rhs.low);\n  if (result.low < rhs.low) {\n    result.high += 1;\n  }\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorUInt128.h", "function_name": "EIGEN_ALWAYS_INLINE\nTensorUInt128<uint64_t, uint64_t> operator +", "index": 691, "label": 0}
{"input": "inline Status Logger::LogMessage(OrtLoggingLevel log_severity_level, const ORTCHAR_T* file_path, int line_number,\n                                 const char* func_name, const char* message) const noexcept {\n  OrtStatus* status = GetApi().Logger_LogMessage(logger_, log_severity_level, message, file_path, line_number,\n                                                 func_name);\n  return Status{status};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Logger::LogMessage", "index": 692, "label": 0}
{"input": "inline NdArray<double> hat(const Vec3& inVec)\n    {\n        return hat(inVec.x, inVec.y, inVec.z);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Linalg/hat.hpp", "function_name": "hat", "index": 693, "label": 0}
{"input": "inline static int max_digits10(mp_prec_t precision = mpfr::mpreal::get_default_prec())\n        {\n            return digits10(precision);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "precision", "index": 694, "label": 0}
{"input": "EIGEN_NOEXCEPT_IF(std::is_nothrow_move_assignable<Scalar>::value)\n    {\n      other.swap(*this);\n      return *this;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Matrix.h", "function_name": "EIGEN_NOEXCEPT_IF", "index": 695, "label": 0}
{"input": "inline\nint Mat_<_Tp>::depth() const\n{\n    CV_DbgAssert( Mat::depth() == traits::Depth<_Tp>::value );\n    return traits::Depth<_Tp>::value;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::depth", "index": 696, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const RoundReturnType\nround() const\n{\n  return RoundReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "RoundReturnType\nround", "index": 697, "label": 0}
{"input": "inline cl_int clGetPlatformInfo(cl_platform_id p0, cl_platform_info p1, size_t p2, void* p3, size_t* p4) { return clGetPlatformInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetPlatformInfo", "index": 698, "label": 0}
{"input": "__device__ __forceinline__\n    thrust::tuple<volatile T0*>\n    smem_tuple(T0* t0)\n    {\n        return thrust::make_tuple((volatile T0*) t0);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/reduce.hpp", "function_name": "__forceinline__\n    thrust::tuple<volatile T0*>\n    smem_tuple", "index": 699, "label": 0}
{"input": "NCNN_FORCEINLINE Mat VkImageMat::mapped() const\n{\n    if (!allocator->mappable || !data->mapped_ptr)\n        return Mat();\n\n    if (dims == 1)\n        return Mat(w, mapped_ptr(), elemsize, elempack, 0);\n\n    if (dims == 2)\n        return Mat(w, h, mapped_ptr(), elemsize, elempack, 0);\n\n    if (dims == 3)\n        return Mat(w, h, c, mapped_ptr(), elemsize, elempack, 0);\n\n    if (dims == 4)\n        return Mat(w, h, d, c, mapped_ptr(), elemsize, elempack, 0);\n\n    return Mat();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "VkImageMat::mapped", "index": 700, "label": 0}
{"input": "void printInfoLog(GLuint objectID)\n{\n    int infologLength, charsWritten;\n    GLchar *infoLog;\n    glGetProgramiv(objectID,GL_INFO_LOG_LENGTH, &infologLength);\n    if(infologLength > 0)\n    {\n        infoLog = new GLchar[infologLength];\n        glGetProgramInfoLog(objectID, infologLength, &charsWritten, infoLog);\n        if (charsWritten>0)\n          std::cerr << \"Shader info : \\n\" << infoLog << std::endl;\n        delete[] infoLog;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/openglsupport.cpp", "function_name": "printInfoLog", "index": 701, "label": 0}
{"input": "static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){\n    int N = A_stl.size();\n    for (int j=0;j<N;j++){\n      A_stl[j].resize(N);\n      for (int i=0;i<N;i++)\n        A_stl[j][i] = A[i+N*j];\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/libs/BLAS/c_interface_base.h", "function_name": "A", "index": 702, "label": 0}
{"input": "void test_qtvector()\n{\n  \n  CALL_SUBTEST(check_qtvector_matrix(Vector2f()));\n  CALL_SUBTEST(check_qtvector_matrix(Matrix3f()));\n  CALL_SUBTEST(check_qtvector_matrix(Matrix3d()));\n\n  \n  CALL_SUBTEST(check_qtvector_matrix(Matrix2f()));\n  CALL_SUBTEST(check_qtvector_matrix(Vector4f()));\n  CALL_SUBTEST(check_qtvector_matrix(Matrix4f()));\n  CALL_SUBTEST(check_qtvector_matrix(Matrix4d()));\n\n  \n  CALL_SUBTEST(check_qtvector_matrix(MatrixXd(1,1)));\n  CALL_SUBTEST(check_qtvector_matrix(VectorXd(20)));\n  CALL_SUBTEST(check_qtvector_matrix(RowVectorXf(20)));\n  CALL_SUBTEST(check_qtvector_matrix(MatrixXcf(10,10)));\n\n  \n  CALL_SUBTEST(check_qtvector_transform(Affine2f()));\n  CALL_SUBTEST(check_qtvector_transform(Affine3f()));\n  CALL_SUBTEST(check_qtvector_transform(Affine3d()));\n  \n\n  \n  CALL_SUBTEST(check_qtvector_quaternion(Quaternionf()));\n  CALL_SUBTEST(check_qtvector_quaternion(Quaternionf()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/qtvector.cpp", "function_name": "test_qtvector", "index": 703, "label": 0}
{"input": "inline const Inverse<Derived> MatrixBase<Derived>::inverse() const\n{\n  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)\n  eigen_assert(rows() == cols());\n  return Inverse<Derived>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/InverseImpl.h", "function_name": "MatrixBase<Derived>::inverse", "index": 704, "label": 0}
{"input": "cv::Mat_<double> cvlinspace(double min_, double max_, int length) {\n    auto cvmat = cv::Mat_<double>(1, length);\n    for (int i = 0; i < length; i++) {\n        cvmat(0, i) = ((max_ - min_) / (length - 1) * i) + min_;\n    }\n    return cvmat;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/mfcc.hpp", "function_name": "cvlinspace", "index": 705, "label": 0}
{"input": "void eiToDense(const EigenSparseMatrix& src, DenseMatrix& dst)\n{\n  dst.setZero();\n  for (int j=0; j<src.cols(); ++j)\n    for (EigenSparseMatrix::InnerIterator it(src.derived(), j); it; ++it)\n      dst(it.index(),j) = it.value();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchSparseUtil.h", "function_name": "eiToDense", "index": 706, "label": 0}
{"input": "inline std::string ConstSessionOptionsImpl<T>::GetConfigEntry(const char* config_key) const {\n  size_t size = 0;\n  \n  Ort::ThrowOnError(GetApi().GetSessionConfigEntry(this->p_, config_key, nullptr, &size));\n\n  std::string out;\n  out.resize(size);\n  Ort::ThrowOnError(GetApi().GetSessionConfigEntry(this->p_, config_key, &out[0], &size));\n  out.resize(size - 1);  \n\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionOptionsImpl<T>::GetConfigEntry", "index": 707, "label": 0}
{"input": "const typename Derived::Scalar bruteforce_det4_helper\n(const MatrixBase<Derived>& matrix, int j, int k, int m, int n)\n{\n  return (matrix.coeff(j,0) * matrix.coeff(k,1) - matrix.coeff(k,0) * matrix.coeff(j,1))\n       * (matrix.coeff(m,2) * matrix.coeff(n,3) - matrix.coeff(n,2) * matrix.coeff(m,3));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/Determinant.h", "function_name": "bruteforce_det4_helper", "index": 708, "label": 0}
{"input": "inline Result ClientImpl::Get(const std::string &path, const Params &params,\n                              const Headers &headers,\n                              ResponseHandler response_handler,\n                              ContentReceiver content_receiver,\n                              Progress progress) {\n  if (params.empty()) {\n    return Get(path, headers, response_handler, content_receiver, progress);\n  }\n\n  std::string path_with_query = append_query_params(path, params);\n  return Get(path_with_query.c_str(), headers, response_handler,\n             content_receiver, progress);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::Get", "index": 709, "label": 0}
{"input": "static inline\nfloat initWideAngleProjMap(InputArray cameraMatrix, InputArray distCoeffs,\n                           Size imageSize, int destImageWidth,\n                           int m1type, OutputArray map1, OutputArray map2,\n                           int projType, double alpha = 0)\n{\n    return initWideAngleProjMap(cameraMatrix, distCoeffs, imageSize, destImageWidth,\n                                m1type, map1, map2, (UndistortTypes)projType, alpha);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/calib3d.hpp", "function_name": "initWideAngleProjMap", "index": 710, "label": 0}
{"input": "inline bool SSLSocketStream::is_writable() const {\n  return select_write(sock_, write_timeout_sec_, write_timeout_usec_) > 0 &&\n         is_socket_alive(sock_);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLSocketStream::is_writable", "index": 711, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE const TensorCwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>\n    binaryExpr(const OtherDerived& other, const CustomBinaryOp& func) const {\n      return TensorCwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other, func);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "binaryExpr", "index": 712, "label": 0}
{"input": "size_t WakeWordDetect::GetFeedSize() {\n\n    return wakenet_iface_->get_samp_chunksize(wakenet_data_) * codec_->input_channels();\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_processing/wake_word_no_afe.cc", "function_name": "WakeWordDetect::GetFeedSize", "index": 713, "label": 0}
{"input": "optional<typename std::decay<T>::type> make_optional(T&& value)\n    {\n        return optional<typename std::decay<T>::type>(std::forward<T>(value));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/optional.hpp", "function_name": "make_optional", "index": 714, "label": 0}
{"input": "void test_selfadjoint()\n{\n  for(int i = 0; i < g_repeat ; i++)\n  {\n    int s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n\n    CALL_SUBTEST_1( selfadjoint(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( selfadjoint(Matrix<float, 2, 2>()) );\n    CALL_SUBTEST_3( selfadjoint(Matrix3cf()) );\n    CALL_SUBTEST_4( selfadjoint(MatrixXcd(s,s)) );\n    CALL_SUBTEST_5( selfadjoint(Matrix<float,Dynamic,Dynamic,RowMajor>(s, s)) );\n    \n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n  \n  CALL_SUBTEST_1( bug_159() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/selfadjoint.cpp", "function_name": "test_selfadjoint", "index": 715, "label": 0}
{"input": "EIGEN_DEVICE_FUNC bool DenseBase<Derived>::isOnes\n(const RealScalar& prec) const\n{\n  return isApproxToConstant(Scalar(1), prec);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::isOnes", "index": 716, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vsub4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vsub4.u32.u32.u32.sat %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vsub.u32.u32.u32.sat %0.b0, %1.b0, %2.b0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"5 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s, t;\n        s = a ^ ~b;         \n        r = a | 0x80808080; \n        t = b & 0x7f7f7f7f; \n        s = s & 0x80808080; \n        r = r - t;          \n        r = r ^ s;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vsub4", "index": 717, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<double> predux<Packet1cd>(const Packet1cd& a)\n{\n  return pfirst(a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/Complex.h", "function_name": "std::complex<double> predux<Packet1cd>", "index": 718, "label": 0}
{"input": "void initialize_tensor(TensorEvaluator<Derived, DefaultDevice>& tensor,\n                       const typename Initializer<Derived, traits<Derived>::NumDimensions>::InitList& vals) {\n  Eigen::array<typename traits<Derived>::Index, traits<Derived>::NumDimensions> indices;\n  Initializer<Derived, traits<Derived>::NumDimensions>::run(tensor, &indices, vals);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorInitializer.h", "function_name": "initialize_tensor", "index": 719, "label": 0}
{"input": "ReverseInnerIterator(const DynamicSparseMatrix& mat, Index outer)\n      : Base(mat.m_data[outer]), m_outer(outer)\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/DynamicSparseMatrix.h", "function_name": "ReverseInnerIterator", "index": 720, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorConcatenationOp<Axis, const Derived, const OtherDerived>\n    concatenate(const OtherDerived& other, Axis axis) const {\n      return TensorConcatenationOp<Axis, const Derived, const OtherDerived>(derived(), other.derived(), axis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorConcatenationOp<Axis, const Derived, const OtherDerived>\n    concatenate", "index": 721, "label": 0}
{"input": "BenchTimer()\n  {\n#if defined(_WIN32) || defined(__CYGWIN__)\n    LARGE_INTEGER freq;\n    QueryPerformanceFrequency(&freq);\n    m_frequency = (double)freq.QuadPart;\n#endif\n    reset();\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchTimer.h", "function_name": "BenchTimer", "index": 722, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseBinaryOp<internal::scalar_boolean_and_op, const Derived, const OtherDerived>\noperator&&(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const\n{\n  EIGEN_STATIC_ASSERT((internal::is_same<bool,Scalar>::value && internal::is_same<bool,typename OtherDerived::Scalar>::value),\n                      THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_OF_BOOL);\n  return CwiseBinaryOp<internal::scalar_boolean_and_op, const Derived, const OtherDerived>(derived(),other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/CommonCwiseBinaryOps.h", "function_name": "CwiseBinaryOp<internal::scalar_boolean_and_op, const Derived, const OtherDerived>\noperator&&", "index": 723, "label": 0}
{"input": "CV_INLINE  CvScalar  cvRealScalar( double val0 )\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvScalar scalar = CV_STRUCT_INITIALIZER;\n#else\n    CvScalar scalar;\n#endif\n    scalar.val[0] = val0;\n    scalar.val[1] = scalar.val[2] = scalar.val[3] = 0;\n    return scalar;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvRealScalar", "index": 724, "label": 0}
{"input": "bool is_public_suffix(StringView host)\n{\n    return PublicSuffixData::the()->is_public_suffix(host);\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "c3618b891fbf787eb371cbe966b37d39850bb149", "file_path": "Libraries/LibURL/URL.cpp", "function_name": "is_public_suffix", "index": 725, "label": 0}
{"input": "inline v128_t v128_cvti32x4_i64x2_high(const v128_t& a)\n{ return wasm_unpackhi_i32x4(a, wasm_i32x4_shr(a, 31)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvti32x4_i64x2_high", "index": 726, "label": 0}
{"input": "EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)\n{\n  Packet2d b, res;\n  b   = pmin<Packet2d>(a.v4f[0], a.v4f[1]);\n  res = pmin<Packet2d>(b, reinterpret_cast<Packet2d>(vec_sld(reinterpret_cast<Packet4i>(b), reinterpret_cast<Packet4i>(b), 8)));\n  return static_cast<float>(pfirst(res));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "predux_min", "index": 727, "label": 0}
{"input": "static HWY_INLINE void MaybeScaleAndStore(D4 d4, V4 sum, V4 vscale, V4 vadd,\n                                            const RowPtrF& C,\n                                            const size_t row_c,\n                                            const size_t col_c) {\n    if constexpr (kRow < kRowsAC) {\n      float* HWY_RESTRICT pos = C.Row(row_c + kRow) + col_c;\n      hn::Store(hn::MulAdd(sum, vscale, vadd), d4, pos);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "MaybeScaleAndStore", "index": 728, "label": 0}
{"input": "HouseholderSequence<VectorsType,CoeffsType,OnTheRight> rightHouseholderSequence(const VectorsType& v, const CoeffsType& h)\n{\n  return HouseholderSequence<VectorsType,CoeffsType,OnTheRight>(v, h);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Householder/HouseholderSequence.h", "function_name": "rightHouseholderSequence", "index": 729, "label": 0}
{"input": "inline void set_nonblocking(socket_t sock, bool nonblocking) {\n#ifdef _WIN32\n  auto flags = nonblocking ? 1UL : 0UL;\n  ioctlsocket(sock, FIONBIO, &flags);\n#else\n  auto flags = fcntl(sock, F_GETFL, 0);\n  fcntl(sock, F_SETFL,\n        nonblocking ? (flags | O_NONBLOCK) : (flags & (~O_NONBLOCK)));\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "set_nonblocking", "index": 730, "label": 0}
{"input": "inline std::pair<std::string, std::string>\nmake_basic_authentication_header(const std::string &username,\n                                 const std::string &password, bool is_proxy) {\n  auto field = \"Basic \" + detail::base64_encode(username + \":\" + password);\n  auto key = is_proxy ? \"Proxy-Authorization\" : \"Authorization\";\n  return std::make_pair(key, std::move(field));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "make_basic_authentication_header", "index": 731, "label": 0}
{"input": "CV_INLINE CvBox2D cvBox2D(const cv::RotatedRect& rr)\n{\n    CvBox2D self;\n    self.center = cvPoint2D32f(rr.center);\n    self.size = cvSize2D32f(rr.size);\n    self.angle = rr.angle;\n    return self;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvBox2D", "index": 732, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline AffineTransformType operator*(const EigenBase<OtherDerived>& linear, const Translation& t)\n  {\n    AffineTransformType res;\n    res.matrix().setZero();\n    res.linear() = linear.derived();\n    res.translation() = linear.derived() * t.m_coeffs;\n    res.matrix().row(Dim).setZero();\n    res(Dim,Dim) = Scalar(1);\n    return res;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Translation.h", "function_name": "AffineTransformType operator*", "index": 733, "label": 0}
{"input": "explicit __host__ __device__ __forceinline__ BrdColConstant(int height_, const D& val_ = VecTraits<D>::all(0)) : height(height_), val(val_) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/border_interpolate.hpp", "function_name": "BrdColConstant", "index": 734, "label": 0}
{"input": "static __host__ __device__ __forceinline__ uchar8 make_uchar8(uchar a0, uchar a1, uchar a2, uchar a3, uchar a4, uchar a5, uchar a6, uchar a7)\n    {\n        uchar8 val = {a0, a1, a2, a3, a4, a5, a6, a7};\n        return val;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_traits.hpp", "function_name": "make_uchar8", "index": 735, "label": 0}
{"input": "inline OrtMemType MemoryInfoImpl<T>::GetMemoryType() const {\n  OrtMemType type;\n  ThrowOnError(GetApi().MemoryInfoGetMemType(this->p_, &type));\n  return type;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MemoryInfoImpl<T>::GetMemoryType", "index": 736, "label": 0}
{"input": "void Application::MainEventLoop() {\n    \n    vTaskPrioritySet(NULL, 3);\n\n    while (true) {\n        auto bits = xEventGroupWaitBits(event_group_, SCHEDULE_EVENT | SEND_AUDIO_EVENT, pdTRUE, pdFALSE, portMAX_DELAY);\n\n        if (bits & SEND_AUDIO_EVENT) {\n            std::unique_lock<std::mutex> lock(mutex_);\n            auto packets = std::move(audio_send_queue_);\n            lock.unlock();\n            for (auto& packet : packets) {\n                if (!protocol_->SendAudio(packet)) {\n                    break;\n                }\n            }\n        }\n\n        if (bits & SCHEDULE_EVENT) {\n            std::unique_lock<std::mutex> lock(mutex_);\n            auto tasks = std::move(main_tasks_);\n            lock.unlock();\n            for (auto& task : tasks) {\n                task();\n            }\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "8729fad9a845d99a980afc40c7e0c3a4bbcda5bf", "file_path": "main/application.cc", "function_name": "Application::MainEventLoop", "index": 737, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_stop(JNIEnv *env, jobject thiz){\n            g_digit->stop();\n            return 0;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_stop", "index": 738, "label": 0}
{"input": "Vector3f Camera::unProject(const Vector2f& uv, float depth, const Matrix4f& invModelview) const\n{\n    updateViewMatrix();\n    updateProjectionMatrix();\n    \n    Vector3f a(2.*uv.x()/float(mVpWidth)-1., 2.*uv.y()/float(mVpHeight)-1., 1.);\n    a.x() *= depth/mProjectionMatrix(0,0);\n    a.y() *= depth/mProjectionMatrix(1,1);\n    a.z() = -depth;\n    \n    Vector4f b = invModelview * Vector4f(a.x(), a.y(), a.z(), 1.);\n    return Vector3f(b.x(), b.y(), b.z());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::unProject", "index": 739, "label": 0}
{"input": "gemm_functor(const Lhs& lhs, const Rhs& rhs, Dest& dest, const Scalar& actualAlpha, BlockingType& blocking)\n    : m_lhs(lhs), m_rhs(rhs), m_dest(dest), m_actualAlpha(actualAlpha), m_blocking(blocking)\n  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h", "function_name": "gemm_functor", "index": 740, "label": 0}
{"input": "static int getWindow(const GMetaArgs &metas, const cv::GArgs &in_args)\n    {\n        constexpr bool callCustomGetWindow = !(has_Window<Impl, const int>::value);\n        return get_window_helper<callCustomGetWindow, Impl, Ins...>::help(metas, in_args);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/fluid/gfluidkernel.hpp", "function_name": "cv::GArgs", "index": 741, "label": 0}
{"input": "inline bool JacobiRotation<Scalar>::makeJacobi(const MatrixBase<Derived>& m, Index p, Index q)\n{\n  return makeJacobi(numext::real(m.coeff(p,p)), m.coeff(p,q), numext::real(m.coeff(q,q)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Jacobi/Jacobi.h", "function_name": "JacobiRotation<Scalar>::makeJacobi", "index": 742, "label": 0}
{"input": "void check_handmade_aligned_malloc()\n{\n  for(int i = 1; i < 1000; i++)\n  {\n    char *p = (char*)internal::handmade_aligned_malloc(i);\n    VERIFY(internal::UIntPtr(p)%ALIGNMENT==0);\n    \n    for(int j = 0; j < i; j++) p[j]=0;\n    internal::handmade_aligned_free(p);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/dynalloc.cpp", "function_name": "check_handmade_aligned_malloc", "index": 743, "label": 0}
{"input": "static EulerAngles FromRotation(const RotationBase<Derived, 3>& rot)\n      {\n        return FromRotation<PositiveRangeAlpha, PositiveRangeBeta, PositiveRangeGamma>(rot.toRotationMatrix());\n      }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/EulerAngles/EulerAngles.h", "function_name": "FromRotation", "index": 744, "label": 0}
{"input": "CV_WRAP inline void fastNlMeansDenoisingColored(const GpuMat& src, CV_OUT GpuMat& dst,\n                                            float h_luminance, float photo_render,\n                                            int search_window = 21,\n                                            int block_size = 7,\n                                            Stream& stream = Stream::Null())\n{\n    fastNlMeansDenoisingColored(InputArray(src), OutputArray(dst), h_luminance, photo_render, search_window, block_size, stream);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/photo/cuda.hpp", "function_name": "fastNlMeansDenoisingColored", "index": 745, "label": 0}
{"input": "CvPoint2D32f cvPoint2D32f(const cv::Point_<_Tp>& pt)\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvPoint2D32f p = { (float)pt.x, (float)pt.y };\n#else\n    CvPoint2D32f p((float)pt.x, (float)pt.y);\n#endif\n    return p;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvPoint2D32f", "index": 746, "label": 0}
{"input": "inline float32x2_t cv_vrsqrt_f32(float32x2_t val)\n{\n    float32x2_t e = vrsqrte_f32(val);\n    e = vmul_f32(vrsqrts_f32(vmul_f32(e, e), val), e);\n    e = vmul_f32(vrsqrts_f32(vmul_f32(e, e), val), e);\n    return e;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/neon_utils.hpp", "function_name": "cv_vrsqrt_f32", "index": 747, "label": 0}
{"input": "EIGEN_DEVICE_FUNC TensorEvaluator(const XprType& op, const Device& device) :\n      Base(op, device) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionCuda.h", "function_name": "op", "index": 748, "label": 0}
{"input": "inline void mpreal::clear(::mpfr_ptr x)\n{\n#ifdef MPREAL_HAVE_MOVE_SUPPORT\n    if(mpfr_is_initialized(x))\n#endif\n    mpfr_clear(x);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::clear", "index": 749, "label": 0}
{"input": "inline Result Client::Get(const std::string &path, const Params &params,\n                          const Headers &headers,\n                          ResponseHandler response_handler,\n                          ContentReceiver content_receiver, Progress progress) {\n  return cli_->Get(path, params, headers, response_handler, content_receiver,\n                   progress);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::Get", "index": 750, "label": 0}
{"input": "void test_stdlist_overload()\n{\n  \n  CALL_SUBTEST_1(check_stdlist_matrix(Vector2f()));\n  CALL_SUBTEST_1(check_stdlist_matrix(Matrix3f()));\n  CALL_SUBTEST_2(check_stdlist_matrix(Matrix3d()));\n\n  \n  CALL_SUBTEST_1(check_stdlist_matrix(Matrix2f()));\n  CALL_SUBTEST_1(check_stdlist_matrix(Vector4f()));\n  CALL_SUBTEST_1(check_stdlist_matrix(Matrix4f()));\n  CALL_SUBTEST_2(check_stdlist_matrix(Matrix4d()));\n\n  \n  CALL_SUBTEST_3(check_stdlist_matrix(MatrixXd(1,1)));\n  CALL_SUBTEST_3(check_stdlist_matrix(VectorXd(20)));\n  CALL_SUBTEST_3(check_stdlist_matrix(RowVectorXf(20)));\n  CALL_SUBTEST_3(check_stdlist_matrix(MatrixXcf(10,10)));\n\n  \n  CALL_SUBTEST_4(check_stdlist_transform(Affine2f())); \n  CALL_SUBTEST_4(check_stdlist_transform(Affine3f()));\n  CALL_SUBTEST_4(check_stdlist_transform(Affine3d()));\n\n  \n  CALL_SUBTEST_5(check_stdlist_quaternion(Quaternionf()));\n  CALL_SUBTEST_5(check_stdlist_quaternion(Quaterniond()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stdlist_overload.cpp", "function_name": "test_stdlist_overload", "index": 751, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T finalizeBoth(const T saccum, const Packet& vaccum) const {\n    internal::scalar_product_op<T> prod_op;\n    return prod_op(saccum, predux_mul(vaccum));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFunctors.h", "function_name": "finalizeBoth", "index": 752, "label": 0}
{"input": "inline AllocatedStringPtr ModelMetadata::LookupCustomMetadataMapAllocated(const char* key, OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().ModelMetadataLookupCustomMetadataMap(p_, allocator, key, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ModelMetadata::LookupCustomMetadataMapAllocated", "index": 753, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const DigammaReturnType\ndigamma() const\n{\n  return DigammaReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "DigammaReturnType\ndigamma", "index": 754, "label": 0}
{"input": "void test_eigen2support()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( eigen2support(Matrix<double,1,1>()) );\n    CALL_SUBTEST_2( eigen2support(MatrixXd(1,1)) );\n    CALL_SUBTEST_4( eigen2support(Matrix3f()) );\n    CALL_SUBTEST_5( eigen2support(Matrix4d()) );\n    CALL_SUBTEST_2( eigen2support(MatrixXf(200,200)) );\n    CALL_SUBTEST_6( eigen2support(MatrixXcd(100,100)) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigen2support.cpp", "function_name": "test_eigen2support", "index": 755, "label": 0}
{"input": "void MaybeEnter(const char* name, const MMArgs& args) {\n    if (args.per_key->WantProfile()) {\n      new (&data_) Zone(name);\n      used_ = true;\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "name", "index": 756, "label": 0}
{"input": "explicit Tridiagonalization(const EigenBase<InputType>& matrix)\n      : m_matrix(matrix.derived()),\n        m_hCoeffs(matrix.cols() > 1 ? matrix.cols()-1 : 1),\n        m_isInitialized(false)\n    {\n      internal::tridiagonalization_inplace(m_matrix, m_hCoeffs);\n      m_isInitialized = true;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h", "function_name": "Tridiagonalization", "index": 757, "label": 0}
{"input": "dtype byteSwap(dtype value) noexcept\n    {\n        STATIC_ASSERT_INTEGER(dtype);\n        static_assert(CHAR_BIT == 8, \"CHAR_BIT != 8\"); \n\n        union\n        {\n            dtype                            value;\n            std::array<uint8, sizeof(dtype)> value8;\n        } source, dest;\n\n        source.value = value;\n\n        for (std::size_t k = 0; k < sizeof(dtype); ++k)\n        {\n            dest.value8[k] = source.value8[sizeof(dtype) - k - 1];\n        }\n\n        return dest.value;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/Endian.hpp", "function_name": "byteSwap", "index": 758, "label": 0}
{"input": "EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED\nPacket2d psqrt<Packet2d>(const Packet2d& x) { return _mm_sqrt_pd(x); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h", "function_name": "psqrt", "index": 759, "label": 0}
{"input": "void GenerateImageTokens(  \n    GEMMA_TYPE, const ModelWeightsStorage& model,\n    const RuntimeConfig& runtime_config, const Image& image,\n    ImageTokens& image_tokens, MatMulEnv* env) {\n  HWY_EXPORT_AND_DYNAMIC_DISPATCH_T(GenerateImageTokensT<GEMMA_TYPE>)\n  (model, runtime_config, image, image_tokens, env);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "gemma/gemma-inl.h", "function_name": "GenerateImageTokens", "index": 760, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::ENU NEDtoENU(const reference_frames::NED& point) noexcept\n    {\n        return { point.east(), point.north(), -point.down() };\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/NEDtoENU.hpp", "function_name": "NEDtoENU", "index": 761, "label": 0}
{"input": "inline cl_int clEnqueueReadImage(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, size_t p5, size_t p6, void* p7, cl_uint p8, const cl_event* p9, cl_event* p10) { return clEnqueueReadImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueReadImage", "index": 762, "label": 0}
{"input": "bool MatrixBase<Derived>::isDiagonal(const RealScalar& prec) const\n{\n  if(cols() != rows()) return false;\n  RealScalar maxAbsOnDiagonal = static_cast<RealScalar>(-1);\n  for(Index j = 0; j < cols(); ++j)\n  {\n    RealScalar absOnDiagonal = numext::abs(coeff(j,j));\n    if(absOnDiagonal > maxAbsOnDiagonal) maxAbsOnDiagonal = absOnDiagonal;\n  }\n  for(Index j = 0; j < cols(); ++j)\n    for(Index i = 0; i < j; ++i)\n    {\n      if(!internal::isMuchSmallerThan(coeff(i, j), maxAbsOnDiagonal, prec)) return false;\n      if(!internal::isMuchSmallerThan(coeff(j, i), maxAbsOnDiagonal, prec)) return false;\n    }\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/DiagonalMatrix.h", "function_name": "MatrixBase<Derived>::isDiagonal", "index": 763, "label": 0}
{"input": "inline void Client::set_bearer_token_auth(const std::string &token) {\n  cli_->set_bearer_token_auth(token);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_bearer_token_auth", "index": 764, "label": 0}
{"input": "__device__ EIGEN_STRONG_INLINE Eigen::half predux_mul<half2>(const half2& a) {\n#if __CUDA_ARCH__ >= 530\n  return __hmul(__low2half(a), __high2half(a));\n#else\n  float a1 = __low2float(a);\n  float a2 = __high2float(a);\n  return Eigen::half(half_impl::raw_uint16_to_half(__float2half_rn(a1 * a2)));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "EIGEN_STRONG_INLINE Eigen::half predux_mul<half2>", "index": 765, "label": 0}
{"input": "__device__ __forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*, volatile T4*, volatile T5*, volatile T6*>\n    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6)\n    {\n        return thrust::make_tuple((volatile T0*) t0, (volatile T1*) t1, (volatile T2*) t2, (volatile T3*) t3, (volatile T4*) t4, (volatile T5*) t5, (volatile T6*) t6);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/reduce.hpp", "function_name": "__forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*, volatile T4*, volatile T5*, volatile T6*>\n    smem_tuple", "index": 766, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const NegativeReturnType\noperator-() const { return NegativeReturnType(derived()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h", "function_name": "NegativeReturnType\noperator-", "index": 767, "label": 0}
{"input": "inline\nMatIterator_<_Tp> MatIterator_<_Tp>::operator ++(int)\n{\n    MatIterator_ b = *this;\n    MatConstIterator::operator ++();\n    return b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "MatIterator_<_Tp>::operator ++", "index": 768, "label": 0}
{"input": "EIGEN_DONT_INLINE typename T::Scalar twopassNorm(T& v)\n{\n  typedef typename T::Scalar Scalar;\n  Scalar s = v.array().abs().maxCoeff();\n  return s*(v/s).norm();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/bench_norm.cpp", "function_name": "typename T::Scalar twopassNorm", "index": 769, "label": 0}
{"input": "ConcurrentQueue<T>::ConcurrentQueue(int maxSize, std::string tag,int simp) {\n    this->maxSize = maxSize > 1 ? maxSize : 1;\n    this->tag = tag;\n    this->m_simp = simp;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/ConcurrentQueue.h", "function_name": "ConcurrentQueue<T>::ConcurrentQueue", "index": 770, "label": 0}
{"input": "IOFormat(int _precision = StreamPrecision, int _flags = 0,\n    const std::string& _coeffSeparator = \" \",\n    const std::string& _rowSeparator = \"\\n\", const std::string& _rowPrefix=\"\", const std::string& _rowSuffix=\"\",\n    const std::string& _matPrefix=\"\", const std::string& _matSuffix=\"\")\n  : matPrefix(_matPrefix), matSuffix(_matSuffix), rowPrefix(_rowPrefix), rowSuffix(_rowSuffix), rowSeparator(_rowSeparator),\n    rowSpacer(\"\"), coeffSeparator(_coeffSeparator), precision(_precision), flags(_flags)\n  {\n    \n    \n      i--;\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/IO.h", "function_name": "IOFormat", "index": 771, "label": 0}
{"input": "inline static Frame lerpFrame(float alpha, const Frame& a, const Frame& b)\n{\n  return Frame(lerp(alpha,a.position,b.position),\n               Quaternionf(lerp(alpha,OrientationType(a.orientation),OrientationType(b.orientation))));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "lerpFrame", "index": 772, "label": 0}
{"input": "explicit EigenSolver(const EigenBase<InputType>& matrix, bool computeEigenvectors = true)\n      : m_eivec(matrix.rows(), matrix.cols()),\n        m_eivalues(matrix.cols()),\n        m_isInitialized(false),\n        m_eigenvectorsOk(false),\n        m_realSchur(matrix.cols()),\n        m_matT(matrix.rows(), matrix.cols()), \n        m_tmp(matrix.cols())\n    {\n      compute(matrix.derived(), computeEigenvectors);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/EigenSolver.h", "function_name": "EigenSolver", "index": 773, "label": 0}
{"input": "EIGEN_DEVICE_FUNC  ~TensorStorage() { internal::conditional_aligned_delete_auto<T,(Options_&DontAlign)==0>(m_data, internal::array_prod(m_dimensions)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorStorage.h", "function_name": "~TensorStorage", "index": 774, "label": 0}
{"input": "inline ssize_t select_write(socket_t sock, time_t sec, time_t usec) {\n#ifdef CPPHTTPLIB_USE_POLL\n  struct pollfd pfd_read;\n  pfd_read.fd = sock;\n  pfd_read.events = POLLOUT;\n\n  auto timeout = static_cast<int>(sec * 1000 + usec / 1000);\n\n  return handle_EINTR([&]() { return poll(&pfd_read, 1, timeout); });\n#else\n#ifndef _WIN32\n  if (sock >= FD_SETSIZE) { return 1; }\n#endif\n\n  fd_set fds;\n  FD_ZERO(&fds);\n  FD_SET(sock, &fds);\n\n  timeval tv;\n  tv.tv_sec = static_cast<long>(sec);\n  tv.tv_usec = static_cast<decltype(tv.tv_usec)>(usec);\n\n  return handle_EINTR([&]() {\n    return select(static_cast<int>(sock + 1), nullptr, &fds, nullptr, &tv);\n  });\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "select_write", "index": 775, "label": 0}
{"input": "typename NumTraits<T>::Real get_test_precision(const T&,typename internal::enable_if<internal::is_arithmetic<typename NumTraits<T>::Real>::value, T>::type* = 0)\n{\n  return test_precision<typename NumTraits<T>::Real>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "get_test_precision", "index": 776, "label": 0}
{"input": "void Otto::SetTrims(int left_leg, int right_leg, int left_foot, int right_foot, int left_hand,\n                    int right_hand) {\n    servo_trim_[LEFT_LEG] = left_leg;\n    servo_trim_[RIGHT_LEG] = right_leg;\n    servo_trim_[LEFT_FOOT] = left_foot;\n    servo_trim_[RIGHT_FOOT] = right_foot;\n\n    if (has_hands_) {\n        servo_trim_[LEFT_HAND] = left_hand;\n        servo_trim_[RIGHT_HAND] = right_hand;\n    }\n\n    for (int i = 0; i < SERVO_COUNT; i++) {\n        if (servo_pins_[i] != -1) {\n            servo_[i].SetTrim(servo_trim_[i]);\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::SetTrims", "index": 777, "label": 0}
{"input": "static void call(GPlaidMLContext& ctx)\n    {\n        call_impl(ctx,\n                  typename detail::MkSeq<sizeof...(Ins)>::type(),\n                  typename detail::MkSeq<sizeof...(Outs)>::type());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/plaidml/gplaidmlkernel.hpp", "function_name": "ctx", "index": 778, "label": 0}
{"input": "NdArray<dtype> medianFilter1d(const NdArray<dtype>& inImageArray,\n                                  uint32                inSize,\n                                  Boundary              inBoundaryType  = Boundary::REFLECT,\n                                  dtype                 inConstantValue = 0)\n    {\n        NdArray<dtype> arrayWithBoundary =\n            boundary::addBoundary1d(inImageArray, inBoundaryType, inSize, inConstantValue);\n        NdArray<dtype> output(1, inImageArray.size());\n\n        const uint32 boundarySize = inSize / 2; \n        const uint32 endPoint     = boundarySize + inImageArray.size();\n\n        for (uint32 i = boundarySize; i < endPoint; ++i)\n        {\n            NdArray<dtype> window = arrayWithBoundary[Slice(i - boundarySize, i + boundarySize + 1)];\n\n            output[i - boundarySize] = window.median().item();\n        }\n\n        return output;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Filters/Filters1d/medianFilter1d.hpp", "function_name": "medianFilter1d", "index": 779, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline typename ConstNColsBlockXpr<N>::Type rightCols(Index n = N) const\n{\n  return typename ConstNColsBlockXpr<N>::Type(derived(), 0, cols() - n, rows(), n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "rightCols", "index": 780, "label": 0}
{"input": "static inline LEPUSValue LEPUS_DupValue(LEPUSContext *ctx, LEPUSValueConst v) {\n  if (LEPUS_VALUE_HAS_REF_COUNT(v)) {\n    LEPUSRefCountHeader *p = (LEPUSRefCountHeader *)LEPUS_VALUE_GET_PTR(v);\n    p->ref_count++;\n#ifdef ENABLE_CHECK_TOOLS\n    CheckObjectCtx(ctx, v);\n#endif\n  }\n  return (LEPUSValue)v;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "third_party/quickjs/include/quickjs.h", "function_name": "LEPUS_DupValue", "index": 781, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::SetSwitch(\n    std::unique_ptr<pub::Value> args, const std::string &key) {\n  auto lepus_args = pub::ValueUtils::ConvertValueToLepusValue(*(args.get()));\n  if (lepus_args.Array()->size() != 1) {\n    return std::unique_ptr<pub::Value>(nullptr);\n  }\n\n  bool switch_value = lepus_args.Array()->get(0).Bool();\n  DevToolEnvHarmony::GetInstance().SetSwitch(\n      key, switch_value, DevToolEnvHarmony::NeedPersistent(key));\n  return std::unique_ptr<pub::Value>(nullptr);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::SetSwitch", "index": 782, "label": 0}
{"input": "CV_INLINE  CvPoint2D32f  cvPoint2D32f( double x, double y )\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvPoint2D32f p = { (float)x, (float)y };\n#else\n    CvPoint2D32f p((float)x, (float)y);\n#endif\n    return p;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvPoint2D32f  cvPoint2D32f", "index": 783, "label": 0}
{"input": "void Map_MatrixXd_copy_matrix(C_Map_MatrixXd *dst, const C_MatrixXd *src)\n{\n  c_to_eigen(dst) = c_to_eigen(src);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mix_eigen_and_c/binary_library.cpp", "function_name": "Map_MatrixXd_copy_matrix", "index": 784, "label": 0}
{"input": "void refineAndSplitClustering(\n            KMeansNodePtr node, int* indices, int indices_length, int branching,\n            int level, CentersType** centers, std::vector<DistanceType>& radiuses,\n            int* belongs_to, int* count, const DistType* identifier)\n    {\n        (void)identifier;\n        refineClustering(indices, indices_length, branching, centers, radiuses, belongs_to, count);\n\n        computeSubClustering(node, indices, indices_length, branching,\n                             level, centers, radiuses, belongs_to, count);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kmeans_index.h", "function_name": "refineAndSplitClustering", "index": 785, "label": 0}
{"input": "static __host__ __device__ __forceinline__ char8 make_char8(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7)\n    {\n        char8 val = {a0, a1, a2, a3, a4, a5, a6, a7};\n        return val;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_traits.hpp", "function_name": "make_char8", "index": 786, "label": 0}
{"input": "void __log_print(int lv, const char *tag, const char *funame, int line, const char *fmt, ...) {\n    char log_info[2040];\n    char *buf = log_info;\n    int ret, len = sizeof(log_info);\n\n\n#ifndef __ANDROID__\n    \n\n    if (lv <= LogLevel::LOG_WARN) {    \n        ret = sprintf(buf, \"%s line:%-4d \", funame, line);\n        buf += ret;\n        len -= ret;\n    }\n#endif\n\n    va_list arglist;\n    va_start(arglist, fmt);\n\n    int itemLen = buf - log_info;\n#if defined( WIN32 )\n    ret = _vsnprintf(buf, len - 1, fmt, arglist);\n#else\n    ret = vsnprintf(buf, len - 1, fmt, arglist);\n#endif\n    if (ret < 0) {\n        buf[len - 1] = 0;\n        buf[len - 2] = '\\n';\n        itemLen += len - 1;\n    } else\n        itemLen += ret;\n\n    va_end(arglist);\n\n#if defined(__ANDROID__)\n    __android_log_print(s_android_logprio[lv], tag, log_info, \"\");\n#else\n    \n    \n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/Log.cpp", "function_name": "__log_print", "index": 787, "label": 0}
{"input": "virtual void SetPowerSaveMode(bool enabled) override {\n        if (!enabled) {\n            power_save_timer_->WakeUp();\n        }\n        WifiBoard::SetPowerSaveMode(enabled);\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "34a77f75dfc1135c48acf5f95440a79dea4a4e72", "file_path": "main/boards/sp-esp32-s3-1.54-muma/sp-esp32-s3-1.54-muma.cc", "function_name": "enabled", "index": 788, "label": 0}
{"input": "double mean_calc(const vector<int> & tab_sizes, const vector<double> & tab_mflops, const int size_min, const int size_max){\n  \n  int size=tab_sizes.size();\n  int nb_sample=0;\n  double mean=0.0;\n\n  for (int i=0;i<size;i++){\n    \n    \n    if ((tab_sizes[i]>=size_min)&&(tab_sizes[i]<=size_max)){\n      \n      nb_sample++;\n      mean+=tab_mflops[i];\n\n    }\n\n    \n  }\n\n  if (nb_sample==0){\n    INFOS(\"no data for mean calculation\");\n    return 0.0;\n  }\n\n  return mean/nb_sample;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/data/mean.cxx", "function_name": "mean_calc", "index": 789, "label": 0}
{"input": "CV_WRAP static inline\nString dumpRange(const Range& argument)\n{\n    if (argument == Range::all())\n    {\n        return \"range: all\";\n    }\n    else\n    {\n        return format(\"range: (s=%d, e=%d)\", argument.start, argument.end);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpRange", "index": 790, "label": 0}
{"input": "__device__ __forceinline__ float splineInterpolate(float x, const float* tab, int n)\n        {\n            int ix = ::min(::max(int(x), 0), n-1);\n            x -= ix;\n            tab += ix * 4;\n            return ((tab[3] * x + tab[2]) * x + tab[1]) * x + tab[0];\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "splineInterpolate", "index": 791, "label": 0}
{"input": "int gjdigit_matrst(gjdigit_t* dg,uint8_t* buf,int width,int height,int* box,int index){\n    if(!dg->ai_munet)return -999;\n    \n    if(index<0)return -2;\n    if(index>=dg->cnt_wenet)return -3;\n    \n    JMat* feat = dg->bnf_cache->inxBuf(index);\n\n    JMat* mat_pic = new JMat(width,height,buf);\n    \n    dg->lock_munet->lock();\n    dg->ai_munet->process(mat_pic, box, feat);\n    dg->lock_munet->unlock();\n    delete mat_pic;\n    delete feat;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_matrst", "index": 792, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReshapingOp<const NewDimensions, const Derived>\n    reshape(const NewDimensions& newDimensions) const {\n      return TensorReshapingOp<const NewDimensions, const Derived>(derived(), newDimensions);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReshapingOp<const NewDimensions, const Derived>\n    reshape", "index": 793, "label": 0}
{"input": "inline Diagonal(MatrixType& matrix, Index a_index = DiagIndex) : m_matrix(matrix), m_index(a_index)\n    {\n      eigen_assert( a_index <= m_matrix.cols() && -a_index <= m_matrix.rows() );\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Diagonal.h", "function_name": "Diagonal", "index": 794, "label": 0}
{"input": "void EnvEmbedder::SetSwitch(const std::string &key, bool value) {\n  devtool::DevToolEnvHarmony::GetInstance().SetSwitch(\n      key, value, devtool::DevToolEnvHarmony::NeedPersistent(key));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "EnvEmbedder::SetSwitch", "index": 795, "label": 0}
{"input": "void FullPivHouseholderQR<_MatrixType>::_solve_impl(const RhsType &rhs, DstType &dst) const\n{\n  eigen_assert(rhs.rows() == rows());\n  const Index l_rank = rank();\n\n  \n  \n  if(l_rank==0)\n  {\n    dst.setZero();\n    return;\n  }\n\n  typename RhsType::PlainObject c(rhs);\n\n  Matrix<Scalar,1,RhsType::ColsAtCompileTime> temp(rhs.cols());\n  for (Index k = 0; k < l_rank; ++k)\n  {\n    Index remainingSize = rows()-k;\n    c.row(k).swap(c.row(m_rows_transpositions.coeff(k)));\n    c.bottomRightCorner(remainingSize, rhs.cols())\n      .applyHouseholderOnTheLeft(m_qr.col(k).tail(remainingSize-1),\n                               m_hCoeffs.coeff(k), &temp.coeffRef(0));\n  }\n\n  m_qr.topLeftCorner(l_rank, l_rank)\n      .template triangularView<Upper>()\n      .solveInPlace(c.topRows(l_rank));\n\n  for(Index i = 0; i < l_rank; ++i) dst.row(m_cols_permutation.indices().coeff(i)) = c.row(i);\n  for(Index i = l_rank; i < cols(); ++i) dst.row(m_cols_permutation.indices().coeff(i)).setZero();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h", "function_name": "FullPivHouseholderQR<_MatrixType>::_solve_impl", "index": 796, "label": 0}
{"input": "__device__ __forceinline__ void YCrCb2RGBConvert(const T& src, float* dst)\n        {\n            dst[bidx] = src.x + (src.z - ColorChannel<float>::half()) * c_YCrCb2RGBCoeffs_f[3];\n            dst[1] = src.x + (src.z - ColorChannel<float>::half()) * c_YCrCb2RGBCoeffs_f[2] + (src.y - ColorChannel<float>::half()) * c_YCrCb2RGBCoeffs_f[1];\n            dst[bidx^2] = src.x + (src.y - ColorChannel<float>::half()) * c_YCrCb2RGBCoeffs_f[0];\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "YCrCb2RGBConvert", "index": 797, "label": 0}
{"input": "int guiji_curl_init(const char* certpath){\n    if(!curl_inited){\n        curl_inited = 1;\n        curl_global_init(CURL_GLOBAL_ALL);\n        \n        sprintf(curl_certpath,\"%s\",certpath);\n        \n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/netcurl.cpp", "function_name": "guiji_curl_init", "index": 798, "label": 0}
{"input": "void FiberElement::RequestLayout() {\n  if (EnableLayoutInElementMode()) {\n    HandleBeforeFlushActionsTask([manager = element_manager(), this]() {\n      MarkLayoutDirty();\n      manager->SetNeedsLayout();\n    });\n    return;\n  }\n\n  HandleDelayTask(\n      [manager = element_manager()]() { manager->SetNeedsLayout(); });\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "540e6dc7bda21ee7ea26c634443a8ece4a7512ca", "file_path": "core/renderer/dom/fiber/fiber_element.cc", "function_name": "FiberElement::RequestLayout", "index": 799, "label": 0}
{"input": "static void test_static_dimension_failure()\n{\n  Tensor<int, 2, DataLayout> left(2, 3);\n  Tensor<int, 3, DataLayout> right(2, 3, 1);\n\n#ifdef CXX11_TENSOR_CONCATENATION_STATIC_DIMENSION_FAILURE\n  \n  \n  Tensor<int, 3, DataLayout> concatenation = left.concatenate(right, 0);\n#endif\n\n  \n  Tensor<int, 3, DataLayout> concatenation = left\n      .reshape(Tensor<int, 3>::Dimensions(2, 3, 1))\n      .concatenate(right, 0);\n  Tensor<int, 2, DataLayout> alternative = left\n      .concatenate(right.reshape(Tensor<int, 2>::Dimensions{{{2, 3}}}), 0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_concatenation.cpp", "function_name": "test_static_dimension_failure", "index": 800, "label": 0}
{"input": "__forceinline__ char8 make(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7) {return make_char8(a0, a1, a2, a3, a4, a5, a6, a7);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_traits.hpp", "function_name": "a0", "index": 801, "label": 0}
{"input": "void get_ioengine(struct ioengine_ops **ioengine_ptr) {\n    *ioengine_ptr = &ioengine;\n\n    ioengine.name = \"hf3fs_usrbio\",\n    ioengine.version = FIO_IOOPS_VERSION;\n    ioengine.flags = FIO_SYNCIO | FIO_NODISKUTIL;\n    ioengine.init = hf3fs_usrbio_init;\n    ioengine.queue = hf3fs_usrbio_queue;\n    ioengine.commit = hf3fs_usrbio_commit;\n    ioengine.getevents = hf3fs_usrbio_getevents;\n    ioengine.event = hf3fs_usrbio_event;\n    ioengine.cleanup = hf3fs_usrbio_cleanup;\n    ioengine.open_file = hf3fs_usrbio_open;\n    ioengine.close_file = hf3fs_usrbio_close;\n    ioengine.invalidate = hf3fs_invalidate;\n    ioengine.get_file_size = generic_get_file_size;\n    ioengine.iomem_alloc = hf3fs_usrbio_alloc;\n    ioengine.iomem_free = hf3fs_usrbio_free;\n    ioengine.option_struct_size = sizeof(struct hf3fs_usrbio_options);\n    ioengine.options = options;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "get_ioengine", "index": 802, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::IsDomTreeEnabled(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return GetSwitch(tasm::LynxEnv::kLynxEnableDomTree);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::IsDomTreeEnabled", "index": 803, "label": 0}
{"input": "void findNeighborXcds(const Pixel<dtype>& inPixel, std::vector<uint32>& outNeighbors)\n        {\n            std::set<Pixel<dtype>> neighbors;\n            findNeighbors(inPixel, neighbors);\n            std::vector<Pixel<dtype>> neighborXcds;\n\n            \n            for (auto& pixel : neighbors)\n            {\n                if (xcds_->operator()(pixel.row, pixel.col))\n                {\n                    neighborXcds.push_back(pixel);\n                }\n            }\n\n            \n            for (auto& pixel : neighborXcds)\n            {\n                auto theExceedanceIter = std::find(xcdsVec_.begin(), xcdsVec_.end(), pixel);\n                outNeighbors.push_back(static_cast<uint32>(theExceedanceIter - xcdsVec_.begin()));\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/ImageProcessing/ClusterMaker.hpp", "function_name": "std::vector<uint32>", "index": 804, "label": 0}
{"input": "static inline\ndouble trace(const Matx<_Tp, m, n>& a)\n{\n    _Tp s = 0;\n    for( int i = 0; i < std::min(m, n); i++ )\n        s += a(i,i);\n    return s;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "trace", "index": 805, "label": 0}
{"input": "inline ModelMetadata Session::GetModelMetadata() const {\n  OrtModelMetadata* out;\n  ThrowOnError(GetApi().SessionGetModelMetadata(p_, &out));\n  return ModelMetadata{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Session::GetModelMetadata", "index": 806, "label": 0}
{"input": "inline\nvoid PlaneProjector::mapForward(float x, float y, float &u, float &v)\n{\n    float x_ = r_kinv[0] * x + r_kinv[1] * y + r_kinv[2];\n    float y_ = r_kinv[3] * x + r_kinv[4] * y + r_kinv[5];\n    float z_ = r_kinv[6] * x + r_kinv[7] * y + r_kinv[8];\n\n    x_ = t[0] + x_ / z_ * (1 - t[2]);\n    y_ = t[1] + y_ / z_ * (1 - t[2]);\n\n    u = scale * x_;\n    v = scale * y_;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "PlaneProjector::mapForward", "index": 807, "label": 0}
{"input": "void IIR_I::reset()\n{\n    for(int i = 0; i <= m_num_order; i++)\n    {\n        m_pNum[i] = 0.0;\n    }\n    for(int i = 0; i <= m_den_order; i++)\n    {\n        m_pDen[i] = 0.0;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/iir_filter.hpp", "function_name": "IIR_I::reset", "index": 808, "label": 0}
{"input": "inline void eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, std::complex<double> *vals, int *perm, int * invp, std::complex<double> *x, int nbrhs, int *iparm, double *dparm)\n  {\n    if (n == 0) { ptr = NULL; idx = NULL; vals = NULL; }\n    if (nbrhs == 0) {x = NULL; nbrhs=1;}\n    z_pastix(pastix_data, pastix_comm, n, ptr, idx, reinterpret_cast<PASTIX_DCOMPLEX*>(vals), perm, invp, reinterpret_cast<PASTIX_DCOMPLEX*>(x), nbrhs, iparm, dparm); \n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "eigen_pastix", "index": 809, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::LLA ENUtoLLA(const reference_frames::ENU& target,\n                                                        const reference_frames::LLA& referencePoint) noexcept\n    {\n        return ENUtoLLA(target, LLAtoECEF(referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ENUtoLLA.hpp", "function_name": "ENUtoLLA", "index": 810, "label": 0}
{"input": "vsx_st2(const vec_dword2& vec, long o, int64* p)\n    { vsx_stf(vec, VSX_OFFSET(o, p), (long long*)p); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/vsx_utils.hpp", "function_name": "vsx_st2", "index": 811, "label": 0}
{"input": "static void test_coeff_ref()\n{\n  Tensor<float, 5> tensor(2,3,5,7,11);\n  tensor.setRandom();\n  Tensor<float, 5> original = tensor;\n\n  TensorRef<Tensor<float, 4>> slice = tensor.chip(7, 4);\n  slice.coeffRef(0, 0, 0, 0) = 1.0f;\n  slice.coeffRef(1, 0, 0, 0) += 2.0f;\n\n  VERIFY_IS_EQUAL(tensor(0,0,0,0,7), 1.0f);\n  VERIFY_IS_EQUAL(tensor(1,0,0,0,7), original(1,0,0,0,7) + 2.0f);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_coeff_ref", "index": 812, "label": 0}
{"input": "inline void queryCacheSizes(int& l1, int& l2, int& l3)\n{\n  #ifdef EIGEN_CPUID\n  int abcd[4];\n  const int GenuineIntel[] = {0x756e6547, 0x49656e69, 0x6c65746e};\n  const int AuthenticAMD[] = {0x68747541, 0x69746e65, 0x444d4163};\n  const int AMDisbetter_[] = {0x69444d41, 0x74656273, 0x21726574}; \n\n  \n  EIGEN_CPUID(abcd,0x0,0);\n  int max_std_funcs = abcd[1];\n  if(cpuid_is_vendor(abcd,GenuineIntel))\n    queryCacheSizes_intel(l1,l2,l3,max_std_funcs);\n  else if(cpuid_is_vendor(abcd,AuthenticAMD) || cpuid_is_vendor(abcd,AMDisbetter_))\n    queryCacheSizes_amd(l1,l2,l3);\n  else\n    \n    queryCacheSizes_intel(l1,l2,l3,max_std_funcs);\n\n  \n\n\n\n\n\n\n\n\n\n\n  #else\n  l1 = l2 = l3 = -1;\n  #endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "queryCacheSizes", "index": 813, "label": 0}
{"input": "inline\nint SparseMat::size(int i) const\n{\n    if( hdr )\n    {\n        CV_DbgAssert((unsigned)i < (unsigned)hdr->dims);\n        return hdr->size[i];\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat::size", "index": 814, "label": 0}
{"input": "static GMetaArgs getOutMeta_impl(const GMetaArgs &in_meta,\n                                         const GArgs &in_args,\n                                         detail::Seq<IIs...>)\n        {\n            \n            using R = typename MetaType<Out>::type;\n            const R r = K::outMeta( get_in_meta<Ins>(in_meta, in_args, IIs)... );\n            return GMetaArgs{ GMetaArg(r) };\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gkernel.hpp", "function_name": "getOutMeta_impl", "index": 815, "label": 0}
{"input": "inline int RunOptions::GetRunLogSeverityLevel() const {\n  int out;\n  ThrowOnError(GetApi().RunOptionsGetRunLogSeverityLevel(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "RunOptions::GetRunLogSeverityLevel", "index": 816, "label": 0}
{"input": "GTexture::GTexture(int width,int height,int format){\n    m_width = width;\n    m_height = height;\n    m_tid = -1;\n    if(format==3){\n        m_format = GL_RGB;\n    }else if(format==4){\n        m_format = GL_RGBA;\n    }else{\n        m_format = GL_LUMINANCE;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/GlesProgram.cpp", "function_name": "GTexture::GTexture", "index": 817, "label": 0}
{"input": "void RenderingWidget::initializeGL()\n{\n  glClearColor(1., 1., 1., 0.);\n  glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, 1);\n  glDepthMask(GL_TRUE);\n  glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);\n\n  mCamera.setPosition(Vector3f(-200, -200, -200));\n  mCamera.setTarget(Vector3f(0, 0, 0));\n  mInitFrame.orientation = mCamera.orientation().inverse();\n  mInitFrame.position = mCamera.viewMatrix().translation();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "RenderingWidget::initializeGL", "index": 818, "label": 0}
{"input": "inline int mpreal::subnormalize (int t,mp_rnd_t rnd_mode)\n{\n    int r = mpfr_subnormalize(mpfr_ptr(),t,rnd_mode);\n    MPREAL_MSVC_DEBUGVIEW_CODE;\n    return r;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::subnormalize", "index": 819, "label": 0}
{"input": "static inline\ndouble determinant(const Matx<_Tp, m, m>& a)\n{\n    return cv::internal::Matx_DetOp<_Tp, m>()(a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "determinant", "index": 820, "label": 0}
{"input": "jlong CreateMeasureDelegateAndSetMeasureFunc(JNIEnv* env, jobject jcaller,\n                                             jlong ptr) {\n  starlight::SLMeasureDelegateAndroid* const delegate_android =\n      new starlight::SLMeasureDelegateAndroid(env, jcaller);\n  StarlightMeasureDelegate* const delegate = new StarlightMeasureDelegate();\n  delegate->measure_func_ = StarlightMeasureFuncForAndroid;\n  delegate->instance_ = delegate_android;\n  const SLNodeRef node = reinterpret_cast<SLNodeRef>(ptr);\n  SLNodeSetMeasureFunc(node, delegate);\n  return reinterpret_cast<jlong>(delegate);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "008159012885478d92b89ffe2d5b1d73dab8ed09", "file_path": "core/services/starlight_standalone/android/starlight_android.cc", "function_name": "CreateMeasureDelegateAndSetMeasureFunc", "index": 821, "label": 0}
{"input": "int MyDigit::picrst(const char* picfn,int* box,int index,const char* dumpfn){\n    if(!inited)return -999;\n    if(!mat_wenet)return -1;\n    if(index<0)return -2;\n    if(index>=cnt_wenet)return -3;\n    std::string picfile(picfn);\n    JMat onepic(picfile,1);\n    int* arr = onepic.tagarr();\n    arr[10] = box[0];\n    arr[11] = box[1];\n    arr[12] = box[2];\n    arr[13] = box[3];\n    \n    float* pwenet = ai_wenet->nextbnf(mat_wenet,index);\n    if(!pwenet){\n        __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"%d index error\",index);\n        return -1;\n    }\n    JMat feat(256, 20, pwenet, 1);\n    \n    double t0 = ncnn::get_current_time();\n    ai_munet->process(&onepic, arr, &feat);\n    double t1 = ncnn::get_current_time();\n    char text[1024];\n    float dist = t1-t0;\n    sprintf(text,\"%d unet %f\",index,dist);\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"%s dump %s\",text,dumpfn);\n    drawMat(&onepic,text);\n    if(strlen(dumpfn)){\n        onepic.tojpg(dumpfn);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "MyDigit::picrst", "index": 822, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline result_type operator()(const DenseBase<Derived>& mat) const\n  { return mat.redux(m_functor); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "result_type operator()", "index": 823, "label": 0}
{"input": "VitAttention(size_t num_tokens, size_t layer, Activations& activations,\n               const LayerWeightsPtrs<T>* layer_weights)\n      : num_tokens_(num_tokens),\n        layer_(layer),\n        activations_(activations),\n        layer_weights_(*layer_weights),\n        layer_config_(layer_weights->layer_config),\n        pool_(activations.env->Pool()) {}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "gemma/gemma-inl.h", "function_name": "VitAttention", "index": 824, "label": 0}
{"input": "void SparseLUImpl<Scalar,StorageIndex>::fixupL(const Index n, const IndexVector& perm_r, GlobalLU_t& glu)\n{\n  Index fsupc, i, j, k, jstart; \n  \n  StorageIndex nextl = 0; \n  Index nsuper = (glu.supno)(n); \n  \n  \n  for (i = 0; i <= nsuper; i++)\n  {\n    fsupc = glu.xsup(i); \n    jstart = glu.xlsub(fsupc); \n    glu.xlsub(fsupc) = nextl; \n    for (j = jstart; j < glu.xlsub(fsupc + 1); j++)\n    {\n      glu.lsub(nextl) = perm_r(glu.lsub(j)); \n      nextl++;\n    }\n    for (k = fsupc+1; k < glu.xsup(i+1); k++)\n      glu.xlsub(k) = nextl; \n  }\n  \n  glu.xlsub(n) = nextl; \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_Utils.h", "function_name": "SparseLUImpl<Scalar,StorageIndex>::fixupL", "index": 825, "label": 0}
{"input": "void dumpfloat(float* abuf,int len){\n    printf(\"\\n----------------------floatdump------------------------\\n\");\n    int i;\n    for(i = 0; i < len; i++) {\n        printf(\"=%f=\", abuf[i]);\n        if( (i+1) % 16 == 0) {\n            printf(\"\\n\");\n        }\n    }\n    if(i%16 != 0) {\n        printf(\"\\n\");\n    }\n    printf(\"\\n----------------------floatdump------------------------\\n\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/face_utils.cpp", "function_name": "dumpfloat", "index": 826, "label": 0}
{"input": "NdArrayConstColumnIterator(pointer ptr, SizeType numRows, SizeType numCols) noexcept :\n            ptr_(ptr),\n            currPtr_(ptr),\n            numRows_(static_cast<difference_type>(numRows)),\n            numCols_(static_cast<difference_type>(numCols)),\n            size_(numRows_ * numCols_)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayIterators.hpp", "function_name": "NdArrayConstColumnIterator", "index": 827, "label": 0}
{"input": "EIGEN_DEVICE_FUNC Transform<Scalar,Dim,Mode,Options>\nTransform<Scalar,Dim,Mode,Options>::inverse(TransformTraits hint) const\n{\n  Transform res;\n  if (hint == Projective)\n  {\n    internal::projective_transform_inverse<Transform>::run(*this, res);\n  }\n  else\n  {\n    if (hint == Isometry)\n    {\n      res.matrix().template topLeftCorner<Dim,Dim>() = linear().transpose();\n    }\n    else if(hint&Affine)\n    {\n      res.matrix().template topLeftCorner<Dim,Dim>() = linear().inverse();\n    }\n    else\n    {\n      eigen_assert(false && \"Invalid transform traits in Transform::Inverse\");\n    }\n    \n    res.matrix().template topRightCorner<Dim,1>()\n      = - res.matrix().template topLeftCorner<Dim,Dim>() * translation();\n    res.makeAffine(); \n  }\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options>\nTransform<Scalar,Dim,Mode,Options>::inverse", "index": 828, "label": 0}
{"input": "static Index rankUpdate(MatrixType& mat, const VectorType& vec, const RealScalar& sigma)\n  {\n    Transpose<MatrixType> matt(mat);\n    return llt_inplace<Scalar, Lower>::rankUpdate(matt, vec.conjugate(), sigma);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "rankUpdate", "index": 829, "label": 0}
{"input": "CV_INLINE IplImage cvIplImage()\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    IplImage self = CV_STRUCT_INITIALIZER; self.nSize = sizeof(IplImage); return self;\n#else\n    return _IplImage();\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvIplImage", "index": 830, "label": 0}
{"input": "static int hf3fs_usrbio_getevents(struct thread_data *td, unsigned int min, unsigned int max, const struct timespec fio_unused *t) {\n    auto &vec = static_cast<hf3fs_usrbio_data *>(td->io_ops_data)->io_us;\n    auto *sd = static_cast<hf3fs_usrbio_data *>(td->io_ops_data);\n    int ret = 0;\n    if (min) {\n        ret = sd->events;\n        sd->events = 0;\n    }\n    return ret;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_getevents", "index": 831, "label": 0}
{"input": "[[nodiscard]] std::pair<NdArray<uint32>, NdArray<uint32>> NdArray<dtype, Alloc_>::nonzero() const\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        std::vector<size_type> rowIndices;\n        std::vector<size_type> colIndices;\n\n        for (uint32 row = 0; row < shape_.rows; ++row)\n        {\n            for (uint32 col = 0; col < shape_.cols; ++col)\n            {\n                if (!utils::essentiallyEqual(operator()(row, col), dtype{ 0 }))\n                {\n                    rowIndices.push_back(row);\n                    colIndices.push_back(col);\n                }\n            }\n        }\n\n        return std::make_pair(NdArray<size_type>(rowIndices), NdArray<size_type>(colIndices));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "NdArray<dtype, Alloc_>::nonzero", "index": 832, "label": 0}
{"input": "WebIDL::ExceptionOr<void> OffscreenCanvas::transfer_receiving_steps(HTML::TransferDataHolder&)\n{\n    \n    dbgln(\"(STUBBED) OffscreenCanvas::transfer_receiving_steps(HTML::TransferDataHolder&)\");\n    return {};\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::transfer_receiving_steps", "index": 833, "label": 0}
{"input": "void test_powers_64bit() {\n  for (int expon = 0; expon < 63; expon++) {\n    int64_t div = (1ull << expon);\n    for (int num_expon = 0; num_expon < 63; num_expon++) {\n      int64_t start_num = (1ull << num_expon) - 10;\n      int64_t end_num = (1ull << num_expon) + 10;\n      if (start_num < 0)\n        start_num = 0;\n      for (int64_t num = start_num; num < end_num; num++) {\n        Eigen::internal::TensorIntDivisor<int64_t> divider(div);\n        int64_t result = num/div;\n        int64_t result_op = divider.divide(num);\n        VERIFY_IS_EQUAL(result_op, result);\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_intdiv.cpp", "function_name": "test_powers_64bit", "index": 834, "label": 0}
{"input": "inline void IoBinding::SynchronizeOutputs() {\n  ThrowOnError(GetApi().SynchronizeBoundOutputs(p_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "IoBinding::SynchronizeOutputs", "index": 835, "label": 0}
{"input": "CV_WRAP static inline\nvoid generateVectorOfMat(size_t len, int rows, int cols, int dtype, CV_OUT std::vector<Mat>& vec)\n{\n    vec.resize(len);\n    if (len > 0)\n    {\n        RNG rng(65431);\n        for (size_t i = 0; i < len; ++i)\n        {\n            vec[i].create(rows, cols, dtype);\n            rng.fill(vec[i], RNG::UNIFORM, 0, 10);\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "generateVectorOfMat", "index": 836, "label": 0}
{"input": "void MandelbrotWidget::mouseMoveEvent(QMouseEvent *event)\n{\n  QPoint delta = event->pos() - lastpos;\n  lastpos = event->pos();\n  if( event->buttons() & Qt::LeftButton )\n  {\n    double t = 1 + 5 * double(delta.y()) / height();\n    if(t < 0.5) t = 0.5;\n    if(t > 2) t = 2;\n    xradius *= t;\n    draft = 16;\n    for(int th = 0; th < threadcount; th++)\n      threads[th]->terminate();\n    update();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mandelbrot/mandelbrot.cpp", "function_name": "MandelbrotWidget::mouseMoveEvent", "index": 837, "label": 0}
{"input": "void FiberElement::InsertedInto(FiberElement *insertion_point) {\n  MarkAttached();\n  if (resolve_status_ == AsyncResolveStatus::kPrepareRequested) {\n    AsyncPostResolveTaskToThreadPool();\n  }\n  EXEC_EXPR_FOR_INSPECTOR(if (element_manager() != nullptr) {\n    element_manager()->RunDevToolFunction(\n        lynx::devtool::DevToolFunction::InitStyleRoot, std::make_tuple(this));\n  });\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "88b357a791de94cf89baf681424c79bc825d445f", "file_path": "core/renderer/dom/fiber/fiber_element.cc", "function_name": "FiberElement::InsertedInto", "index": 838, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Scalar AlignedBox<Scalar,AmbientDim>::squaredExteriorDistance(const AlignedBox& b) const\n{\n  Scalar dist2(0);\n  Scalar aux;\n  for (Index k=0; k<dim(); ++k)\n  {\n    if( m_min[k] > b.m_max[k] )\n    {\n      aux = m_min[k] - b.m_max[k];\n      dist2 += aux*aux;\n    }\n    else if( b.m_min[k] > m_max[k] )\n    {\n      aux = b.m_min[k] - m_max[k];\n      dist2 += aux*aux;\n    }\n  }\n  return dist2;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/AlignedBox.h", "function_name": "AlignedBox<Scalar,AmbientDim>::squaredExteriorDistance", "index": 839, "label": 0}
{"input": "void call_directsolver(Solver& solver, const int solver_id, const typename Solver::MatrixType& A, const Matrix<Scalar, Dynamic, 1>& b, const Matrix<Scalar, Dynamic, 1>& refX, std::string& statFile)\n{\n    std::ofstream statbuf(statFile.c_str(), std::ios::app);\n    statbuf << \"   <SOLVER_STAT ID='\" << solver_id <<\"'>\\n\"; \n    call_solver(solver, solver_id, A, b, refX,statbuf);\n    statbuf << \"   </SOLVER_STAT>\\n\";\n    statbuf.close();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/spbench/spbenchsolver.h", "function_name": "call_directsolver", "index": 840, "label": 0}
{"input": "void matlab_cplx_real(const M& ar, const M& ai, const M& b, M& cr, M& ci)\n{\n  cr.noalias() += ar * b;\n  ci.noalias() += ai * b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/bench_gemm.cpp", "function_name": "matlab_cplx_real", "index": 841, "label": 0}
{"input": "inline int64_t ModelMetadata::GetVersion() const {\n  int64_t out;\n  ThrowOnError(GetApi().ModelMetadataGetVersion(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ModelMetadata::GetVersion", "index": 842, "label": 0}
{"input": "UITextArea::~UITextArea() {\n  NodeManager::Instance().UnregisterNodeEvent(Node(), NODE_TOUCH_EVENT);\n  NodeManager::Instance().UnregisterNodeEvent(input_node_,\n                                              NODE_TEXT_AREA_ON_CHANGE);\n  NodeManager::Instance().UnregisterNodeEvent(\n      input_node_, NODE_TEXT_AREA_ON_TEXT_SELECTION_CHANGE);\n  NodeManager::Instance().UnregisterNodeEvent(input_node_,\n                                              NODE_TEXT_AREA_ON_SUBMIT);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_textarea.cc", "function_name": "UITextArea::~UITextArea", "index": 843, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Scalar signedDistance(const VectorType& p) const { return normal().dot(p) + offset(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Hyperplane.h", "function_name": "signedDistance", "index": 844, "label": 0}
{"input": "inline bool read_content_without_length(Stream &strm,\n                                        ContentReceiverWithProgress out) {\n  char buf[CPPHTTPLIB_RECV_BUFSIZ];\n  uint64_t r = 0;\n  for (;;) {\n    auto n = strm.read(buf, CPPHTTPLIB_RECV_BUFSIZ);\n    if (n < 0) {\n      return false;\n    } else if (n == 0) {\n      return true;\n    }\n\n    if (!out(buf, static_cast<size_t>(n), r, 0)) { return false; }\n    r += static_cast<uint64_t>(n);\n  }\n\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "read_content_without_length", "index": 845, "label": 0}
{"input": "PermutationMatrix(internal::PermPermProduct_t, const Lhs& lhs, const Rhs& rhs)\n      : m_indices(lhs.indices().size())\n    {\n      Base::assignProduct(lhs,rhs);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PermutationMatrix.h", "function_name": "PermutationMatrix", "index": 846, "label": 0}
{"input": "HWY_NOINLINE HWY_MAYBE_UNUSED std::vector<TokenAndProb> TopK(\n    const float* HWY_RESTRICT probabilities, size_t vocab_size, size_t k,\n    TAcceptToken& accept_token) {\n  HWY_ASSERT(k != 0);\n  HWY_ASSERT(k <= vocab_size);\n  std::vector<double> packed_token_probs;\n  for (int32_t i = 0; i < vocab_size; ++i) {\n    if (accept_token && !accept_token(StaticCast<int>(i), probabilities[i])) {\n      continue;\n    }\n    packed_token_probs.push_back(PackTokenAndProb(i, probabilities[i]));\n  }\n\n  hwy::VQSelect(packed_token_probs.data(), packed_token_probs.size(), k,\n                hwy::SortDescending());\n  hwy::VQSort(packed_token_probs.data(), k, hwy::SortDescending());\n\n  std::vector<TokenAndProb> token_probs;\n  token_probs.reserve(k);\n  for (int32_t i = 0; i < k; ++i) {\n    token_probs.push_back(UnpackTokenAndProb(packed_token_probs[i]));\n  }\n  return token_probs;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "d854471ae2f30d63783fd9ef9d3007d3345f0900", "file_path": "ops/ops-inl.h", "function_name": "HWY_MAYBE_UNUSED std::vector<TokenAndProb> TopK", "index": 847, "label": 0}
{"input": "bool operator!=(const variant<Us...> &lhs,\n                                             const variant<Us...> &rhs)\n    {\n        return !(lhs == rhs);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "operator!=", "index": 848, "label": 0}
{"input": "inline Quat<T> Quat<T>::sqrt(QuatAssumeType assumeUnit) const\n{\n    return power(0.5, assumeUnit);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::sqrt", "index": 849, "label": 0}
{"input": "~aligned_stack_memory_handler()\n    {\n      if(NumTraits<T>::RequireInitialization && m_ptr)\n        Eigen::internal::destruct_elements_of_array<T>(m_ptr, m_size);\n      if(m_deallocate)\n        Eigen::internal::aligned_free(m_ptr);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "~aligned_stack_memory_handler", "index": 850, "label": 0}
{"input": "std::vector<dtype> toStlVector(const NdArray<dtype>& inArray)\n    {\n        return inArray.toStlVector();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/toStlVector.hpp", "function_name": "toStlVector", "index": 851, "label": 0}
{"input": "SparseQR_QProduct(const SparseQRType& qr, const Derived& other, bool transpose) : \n  m_qr(qr),m_other(other),m_transpose(transpose) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseQR/SparseQR.h", "function_name": "SparseQR_QProduct", "index": 852, "label": 0}
{"input": "NdArray<dtype> maximum(const dtype& inScalar, const NdArray<dtype>& inArray)\n    {\n        return maximum(inArray, inScalar);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/maximum.hpp", "function_name": "maximum", "index": 853, "label": 0}
{"input": "Row(size_t r) const {\n    \n    const size_t pad_bytes = (r & row_mask_) * step_;\n    HWY_DASSERT(pad_bytes < Allocator::QuantumBytes());\n    return row0_ + stride_ * r - pad_bytes;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/allocator.h", "function_name": "Row", "index": 854, "label": 0}
{"input": "void LayoutAlgorithm::ItemsUpdateAlignment() {\n  for (LayoutObject* item : inflow_items_) {\n    item->UpdateAlignment();\n  }\n  for (LayoutObject* item : absolute_or_fixed_items_) {\n    item->UpdateAlignment();\n  }\n\n  for (LayoutObject* item : sticky_items) {\n    position_utils::UpdateStickyItemPosition(item, container_constraints_);\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "008159012885478d92b89ffe2d5b1d73dab8ed09", "file_path": "core/renderer/starlight/layout/layout_algorithm.cc", "function_name": "LayoutAlgorithm::ItemsUpdateAlignment", "index": 855, "label": 0}
{"input": "[[nodiscard]] Vec3 rotate(const Vec3& inVec3) const\n        {\n            return *this * inVec3;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Rotations/Quaternion.hpp", "function_name": "inVec3", "index": 856, "label": 0}
{"input": "static size_t NPMultiple(size_t N, size_t nr, size_t num_packages) {\n  size_t np_multiple = Allocator::QuantumBytes() / sizeof(float);\n  \n  \n  \n  if (N % (np_multiple * num_packages)) {\n    const size_t min_multiple = Allocator::LineBytes() / sizeof(float);\n    np_multiple =\n        PrevDivisor(min_multiple, np_multiple, N / num_packages, min_multiple);\n    if (HWY_UNLIKELY(np_multiple == 0)) {\n      np_multiple = min_multiple;\n    }\n    \n    if (N % (np_multiple * num_packages) && N >= 128) {\n      HWY_WARN(\"NPMultiple: N=%zu still not divisible by np_multiple=%zu\\n\", N,\n               np_multiple);\n      np_multiple = nr;\n    }\n  }\n  return np_multiple;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.cc", "function_name": "NPMultiple", "index": 857, "label": 0}
{"input": "static int64_t NanoTime() {\n#if defined(__APPLE__)\n  uint64_t t = mach_absolute_time();\n  return t * g_time_info.numer / g_time_info.denom;\n#else\n  struct timespec t;\n  t.tv_sec = t.tv_nsec = 0;\n  clock_gettime(CLOCK_MONOTONIC, &t);\n  return static_cast<int64_t>(t.tv_sec) * 1000000000LL + t.tv_nsec;\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/benchmark_main.cc", "function_name": "NanoTime", "index": 858, "label": 0}
{"input": "static inline uint64_t GetCpuCacheL1(int which = 0) {\n    return GetCpuInfo(which)->l1_cache_size;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/ppl/common/sys.h", "function_name": "GetCpuCacheL1", "index": 859, "label": 0}
{"input": "void setYear(int year)\n        {\n            if (year < 0)\n            {\n                throw std::invalid_argument(\"input year must be greater than zero\");\n            }\n            year_ = year;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/DateTime/DateTime.hpp", "function_name": "year", "index": 860, "label": 0}
{"input": "CV_WRAP static inline\nString testOverloadResolution(const Rect& rect)\n{\n    return format(\"overload (rect=(x=%d, y=%d, w=%d, h=%d))\", rect.x, rect.y,\n                  rect.width, rect.height);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "testOverloadResolution", "index": 861, "label": 0}
{"input": "void run_and_compare_to_cuda(const Kernel& ker, int n, const Input& in, Output& out)\n{\n  Input  in_ref,  in_cuda;\n  Output out_ref, out_cuda;\n  #ifndef __CUDA_ARCH__\n  in_ref = in_cuda = in;\n  out_ref = out_cuda = out;\n  #endif\n  run_on_cpu (ker, n, in_ref,  out_ref);\n  run_on_cuda(ker, n, in_cuda, out_cuda);\n  #ifndef __CUDA_ARCH__\n  VERIFY_IS_APPROX(in_ref, in_cuda);\n  VERIFY_IS_APPROX(out_ref, out_cuda);\n  #endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/cuda_common.h", "function_name": "run_and_compare_to_cuda", "index": 862, "label": 0}
{"input": "void test_cxx11_tensor_convolution()\n{\n  CALL_SUBTEST(test_evals<ColMajor>());\n  CALL_SUBTEST(test_evals<RowMajor>());\n  CALL_SUBTEST(test_expr<ColMajor>());\n  CALL_SUBTEST(test_expr<RowMajor>());\n  CALL_SUBTEST(test_modes<ColMajor>());\n  CALL_SUBTEST(test_modes<RowMajor>());\n  CALL_SUBTEST(test_strides<ColMajor>());\n  CALL_SUBTEST(test_strides<RowMajor>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_convolution.cpp", "function_name": "test_cxx11_tensor_convolution", "index": 863, "label": 0}
{"input": "inline const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomLeftCorner(Index cRows, Index cCols) const\n{\n  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, 0, cRows, cCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "bottomLeftCorner", "index": 864, "label": 0}
{"input": "inline v_float64x2 v_not_nan(const v_float64x2& a)\n{\n    v128_t z = wasm_i64x2_splat(0x7fffffffffffffff);\n    v128_t t = wasm_i64x2_splat(0x7ff0000000000000);\n    return v_float64x2((__u64x2)(wasm_v128_and(a.val, z)) < (__u64x2)t);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_not_nan", "index": 865, "label": 0}
{"input": "inline cl_mem clCreateFromGLTexture2D(cl_context p0, cl_mem_flags p1, cl_GLenum p2, cl_GLint p3, cl_GLuint p4, cl_int* p5) { return clCreateFromGLTexture2D_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_gl_wrappers.hpp", "function_name": "clCreateFromGLTexture2D", "index": 866, "label": 0}
{"input": "inline DualQuat<T> DualQuat<T>::conjugate() const\n{\n    return DualQuat<T>(w, -x, -y, -z, w_, -x_, -y_, -z_);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::conjugate", "index": 867, "label": 0}
{"input": "void test_splines()\n{\n  for (int i = 0; i < g_repeat; ++i)\n  {\n    CALL_SUBTEST( eval_spline3d() );\n    CALL_SUBTEST( eval_spline3d_onbrks() );\n    CALL_SUBTEST( eval_closed_spline2d() );\n    CALL_SUBTEST( check_global_interpolation2d() );\n    CALL_SUBTEST( check_global_interpolation_with_derivatives2d() );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/splines.cpp", "function_name": "test_splines", "index": 868, "label": 0}
{"input": "void BlendGramAlpha(unsigned char *Src,unsigned char* Mask, unsigned char *Dest, int Width, int Height)\r\n{\r\n\tunsigned char *LinePS, *LinePD,*LinePM;\r\n\tfor (int Y = 0; Y < Height; Y += 1)\r\n\t{\r\n\t\tLinePS = Src + Y * Width * 3;\r\n\t\tLinePM = Mask + Y * Width * 1;\r\n\t\tLinePD = Dest + Y * Width * 3;\r\n\t\tfor (int X = 0; X < Width; X += 1)\r\n\t\t{\r\n\t\t\t\n            ColorBlend_Alpha(LinePD,LinePD,LinePS,*LinePM);\r\n            \r\n\t\t\tLinePS += 3;\r\n\t\t\tLinePM += 1;\r\n\t\t\tLinePD += 3;\r\n\t\t}\r\n\t}\r\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "BlendGramAlpha", "index": 869, "label": 0}
{"input": "inline constexpr unsigned int operator\"\" _t(const char *s, size_t l) {\n  return str2tag_core(s, l, 0);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "operator\"\" _t", "index": 870, "label": 0}
{"input": "inline const mpreal fma (const mpreal& v1, const mpreal& v2, const mpreal& v3, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal a;\n    mp_prec_t p1, p2, p3;\n\n    p1 = v1.get_prec();\n    p2 = v2.get_prec();\n    p3 = v3.get_prec();\n\n    a.set_prec(p3>p2?(p3>p1?p3:p1):(p2>p1?p2:p1));\n\n    mpfr_fma(a.mp,v1.mp,v2.mp,v3.mp,rnd_mode);\n    return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "fma", "index": 871, "label": 0}
{"input": "Point RotationWarperBase<P>::warp(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,\n                                  OutputArray dst)\n{\n    UMat xmap, ymap;\n    Rect dst_roi = buildMaps(src.size(), K, R, xmap, ymap);\n\n    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type());\n    remap(src, dst, xmap, ymap, interp_mode, border_mode);\n\n    return dst_roi.tl();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "RotationWarperBase<P>::warp", "index": 872, "label": 0}
{"input": "typename MatrixType::RealScalar ColPivHouseholderQR<MatrixType>::absDeterminant() const\n{\n  using std::abs;\n  eigen_assert(m_isInitialized && \"ColPivHouseholderQR is not initialized.\");\n  eigen_assert(m_qr.rows() == m_qr.cols() && \"You can't take the determinant of a non-square matrix!\");\n  return abs(m_qr.diagonal().prod());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/ColPivHouseholderQR.h", "function_name": "ColPivHouseholderQR<MatrixType>::absDeterminant", "index": 873, "label": 0}
{"input": "void EspWakeWord::StopDetection() {\n    ESP_LOGI(TAG, \"Stop wake word detection\");\n    xEventGroupClearBits(event_group_, DETECTION_RUNNING_EVENT);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/esp_wake_word.cc", "function_name": "EspWakeWord::StopDetection", "index": 874, "label": 0}
{"input": "int Wenet::calcbnf(float* melbin,int melnum,float* bnfbin,int bnfnum){\n    int rst = 0;\n    int chkmfcc = melnum;\n    int chkbnf = bnfnum;\n    auto onecfg = m_model->config();\n    auto cfg = &onecfg;\n    \n    cfg->shape_inputs[0][0] = 1;\n    cfg->shape_inputs[0][1] = chkmfcc;\n    cfg->size_inputs[0] = chkmfcc*MFCC_MELCHUNK;\n    cfg->shape_inputs[1][0] = 1;\n    cfg->size_inputs[1] = 1;\n\n    cfg->shape_outputs[0][0] = 1;\n    cfg->shape_outputs[0][1] = chkbnf;\n    cfg->shape_outputs[0][2] = MFCC_BNFCHUNK;\n    cfg->size_outputs[0] = chkbnf*MFCC_BNFCHUNK;\n    cfg->dump();\n    void* arrin[] = { melbin,&chkmfcc,NULL };\n    void* arrout[] = { bnfbin,NULL };\n    const char* namein[] = {\"speech\",\"speech_lengths\",NULL};\n    const char* nameout[] = {\"encoder_out\",NULL};\n    cfg->names_in = namein;\n    cfg->names_out = nameout;\n    rst = m_model->runModel(arrin,arrout,NULL,cfg);\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wenet.cpp", "function_name": "Wenet::calcbnf", "index": 875, "label": 0}
{"input": "static inline BoundedTopology CreateTopology(const AppArgs& app) {\n  return BoundedTopology(BoundedSlice(app.skip_packages, app.max_packages),\n                         BoundedSlice(app.skip_clusters, app.max_clusters),\n                         BoundedSlice(app.skip_lps, app.max_lps));\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/app.h", "function_name": "CreateTopology", "index": 876, "label": 0}
{"input": "void CalculateBatteryLevel(uint32_t average_adc) {\n        if (average_adc <= BATTERY_LEVELS[0].adc) {\n            battery_level_ = 0;\n        } else if (average_adc >= BATTERY_LEVELS[BATTERY_LEVELS_COUNT - 1].adc) {\n            battery_level_ = 100;\n        } else {\n            float ratio = static_cast<float>(average_adc - BATTERY_LEVELS[0].adc) /\n                          (BATTERY_LEVELS[1].adc - BATTERY_LEVELS[0].adc);\n            battery_level_ = ratio * 100;\n        }\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/power_manager.h", "function_name": "average_adc", "index": 877, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const Log1pReturnType\nlog1p() const\n{\n  return Log1pReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "Log1pReturnType\nlog1p", "index": 878, "label": 0}
{"input": "LshTable(unsigned int feature_size, unsigned int key_size)\n    {\n        feature_size_ = feature_size;\n        CV_UNUSED(key_size);\n        CV_Error(cv::Error::StsUnsupportedFormat, \"LSH is not implemented for that type\" );\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/lsh_table.h", "function_name": "LshTable", "index": 879, "label": 0}
{"input": "Map<const Matrix<T,Dynamic,Dynamic,ColMajor>, 0, OuterStride<> >\nmatrix(const T* data, int rows, int cols, int stride)\n{\n  return Map<const Matrix<T,Dynamic,Dynamic,ColMajor>, 0, OuterStride<> >(data, rows, cols, OuterStride<>(stride));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/blas/common.h", "function_name": "matrix", "index": 880, "label": 0}
{"input": "CV_INLINE  void  cvDecRefData( CvArr* arr )\n{\n    if( CV_IS_MAT( arr ))\n    {\n        CvMat* mat = (CvMat*)arr;\n        mat->data.ptr = NULL;\n        if( mat->refcount != NULL && --*mat->refcount == 0 )\n            cvFree( &mat->refcount );\n        mat->refcount = NULL;\n    }\n    else if( CV_IS_MATND( arr ))\n    {\n        CvMatND* mat = (CvMatND*)arr;\n        mat->data.ptr = NULL;\n        if( mat->refcount != NULL && --*mat->refcount == 0 )\n            cvFree( &mat->refcount );\n        mat->refcount = NULL;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvDecRefData", "index": 881, "label": 0}
{"input": "inline _OutputArray::_OutputArray(const cuda::HostMem& cuda_mem)\n{ init(FIXED_TYPE + FIXED_SIZE + CUDA_HOST_MEM + ACCESS_WRITE, &cuda_mem); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "_OutputArray::_OutputArray", "index": 882, "label": 0}
{"input": "B Graph::walkBreadthFirst(int from, B body) const\n{\n    std::vector<bool> was(numVertices(), false);\n    std::queue<int> vertices;\n\n    was[from] = true;\n    vertices.push(from);\n\n    while (!vertices.empty())\n    {\n        int vertex = vertices.front();\n        vertices.pop();\n\n        std::list<GraphEdge>::const_iterator edge = edges_[vertex].begin();\n        for (; edge != edges_[vertex].end(); ++edge)\n        {\n            if (!was[edge->to])\n            {\n                body(*edge);\n                was[edge->to] = true;\n                vertices.push(edge->to);\n            }\n        }\n    }\n\n    return body;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/util_inl.hpp", "function_name": "Graph::walkBreadthFirst", "index": 883, "label": 0}
{"input": "void Image::Resize(int new_width, int new_height) {\n  std::vector<float> new_data(new_width * new_height * 3);\n  \n  \n  \n  \n  for (int i = 0; i < new_height; ++i) {\n    for (int j = 0; j < new_width; ++j) {\n      int old_i = NearestNeighbor(i, new_height, height_);\n      int old_j = NearestNeighbor(j, new_width, width_);\n      for (int k = 0; k < 3; ++k) {\n        new_data[(i * new_width + j) * 3 + k] =\n            data_[(old_i * width_ + old_j) * 3 + k];\n      }\n    }\n  }\n  data_ = std::move(new_data);\n  height_ = new_height;\n  width_ = new_width;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "331d2ccc025e379f880a4eaa017b5f1db35ab24c", "file_path": "paligemma/image.cc", "function_name": "Image::Resize", "index": 884, "label": 0}
{"input": "typename DenseBase<Derived>::ConstantReturnType\nDenseBase<Derived>::Zero()\n{\n  return Constant(Scalar(0));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::Zero", "index": 885, "label": 0}
{"input": "static int get_window_impl(const GMetaArgs &metas,\n                               const cv::GArgs &in_args,\n                               cv::detail::Seq<IIs...>)\n    {\n        return Impl::getWindow(cv::detail::get_in_meta<Ins>(metas, in_args, IIs)...);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/fluid/gfluidkernel.hpp", "function_name": "get_window_impl", "index": 886, "label": 0}
{"input": "inline void TensorTypeAndShapeInfo::GetSymbolicDimensions(const char** values, size_t values_count) const {\n  ThrowOnError(GetApi().GetSymbolicDimensions(p_, values, values_count));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfo::GetSymbolicDimensions", "index": 887, "label": 0}
{"input": "void Wenet::initModel(const char* modelfn){\n    m_model = new OnnxModel();\n    string modelpath(modelfn);\n    m_model->initModel(modelpath);\n    \n    \n    \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wenet.cpp", "function_name": "Wenet::initModel", "index": 888, "label": 0}
{"input": "CV_WRAP static inline\nAsyncArray testAsyncArray(InputArray argument)\n{\n    AsyncPromise p;\n    p.setValue(argument);\n    return p.getArrayResult();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "testAsyncArray", "index": 889, "label": 0}
{"input": "EIGEN_STRONG_INLINE void enqueue_with_barrier(Barrier* b,\n                                                Function&& f,\n                                                Args&&... args) const {\n    pool_->Schedule(std::bind(\n        &FunctionWrapperWithBarrier<Function, Args...>::run, b, f, args...));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h", "function_name": "enqueue_with_barrier", "index": 890, "label": 0}
{"input": "inline\nvoid PaniniProjector::mapBackward(float u, float v, float &x, float &y)\n{\n    u /= scale;\n    v /= scale;\n\n    float lamda = a * atanf(u / a);\n    float u_ = lamda;\n\n    float v_;\n    if ( fabs(lamda) > 1E-7)\n        v_ = atanf(v * sinf(lamda) / (b * a * tanf(lamda / a)));\n    else\n        v_ = atanf(v / b);\n\n    float cosv = cosf(v_);\n    float x_ = cosv * sinf(u_);\n    float y_ = sinf(v_);\n    float z_ = cosv * cosf(u_);\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "PaniniProjector::mapBackward", "index": 891, "label": 0}
{"input": "void test_visitor()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( matrixVisitor(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( matrixVisitor(Matrix2f()) );\n    CALL_SUBTEST_3( matrixVisitor(Matrix4d()) );\n    CALL_SUBTEST_4( matrixVisitor(MatrixXd(8, 12)) );\n    CALL_SUBTEST_5( matrixVisitor(Matrix<double,Dynamic,Dynamic,RowMajor>(20, 20)) );\n    CALL_SUBTEST_6( matrixVisitor(MatrixXi(8, 12)) );\n  }\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_7( vectorVisitor(Vector4f()) );\n    CALL_SUBTEST_7( vectorVisitor(Matrix<int,12,1>()) );\n    CALL_SUBTEST_8( vectorVisitor(VectorXd(10)) );\n    CALL_SUBTEST_9( vectorVisitor(RowVectorXd(10)) );\n    CALL_SUBTEST_10( vectorVisitor(VectorXf(33)) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/visitor.cpp", "function_name": "test_visitor", "index": 892, "label": 0}
{"input": "void bug_1311()\n{\n  Matrix< double, Rows, 2 > A;  A.setRandom();\n  Vector2d b = Vector2d::Random() ;\n  Matrix<double,Rows,1> res;\n  res.noalias() = 1. * (A * b);\n  VERIFY_IS_APPROX(res, A*b);\n  res.noalias() = 1.*A * b;\n  VERIFY_IS_APPROX(res, A*b);\n  res.noalias() = (1.*A).lazyProduct(b);\n  VERIFY_IS_APPROX(res, A*b);\n  res.noalias() = (1.*A).lazyProduct(1.*b);\n  VERIFY_IS_APPROX(res, A*b);\n  res.noalias() = (A).lazyProduct(1.*b);\n  VERIFY_IS_APPROX(res, A*b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_small.cpp", "function_name": "bug_1311", "index": 893, "label": 0}
{"input": "Message(int from, int type, long extra) {\n        this->from = from;\n        this->type = type;\n        this->extra = extra;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/MessageSource.h", "function_name": "Message", "index": 894, "label": 0}
{"input": "NdArray<dtype> pybind2nc_copy(const pbArray<dtype>& numpyArray)\n    {\n        const auto dataPtr = numpyArray.data();\n        switch (numpyArray.ndim())\n        {\n            case 0:\n            {\n                return NdArray<dtype>(dataPtr, 0, 0);\n            }\n            case 1:\n            {\n                const auto size = static_cast<uint32>(numpyArray.size());\n                return NdArray<dtype>(dataPtr, 1, size);\n            }\n            case 2:\n            {\n                const auto numRows = static_cast<uint32>(numpyArray.shape(0));\n                const auto numCols = static_cast<uint32>(numpyArray.shape(1));\n                return NdArray<dtype>(dataPtr, numRows, numCols);\n            }\n            default:\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"input array must be no more than 2 dimensional.\");\n                return {};\n            }\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/PybindInterface.hpp", "function_name": "pybind2nc_copy", "index": 895, "label": 0}
{"input": "void check_stddeque_matrix(const MatrixType& m)\n{\n  typename MatrixType::Index rows = m.rows();\n  typename MatrixType::Index cols = m.cols();\n  MatrixType x = MatrixType::Random(rows,cols), y = MatrixType::Random(rows,cols);\n  std::deque<MatrixType> v(10, MatrixType(rows,cols)), w(20, y);\n  v[5] = x;\n  w[6] = v[5];\n  VERIFY_IS_APPROX(w[6], v[5]);\n  v = w;\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(w[i], v[i]);\n  }\n\n  v.resize(21);\n  v[20] = x;\n  VERIFY_IS_APPROX(v[20], x);\n  v.resize(22,y);\n  VERIFY_IS_APPROX(v[21], y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(v[22], x);\n\n  \n  \n  MatrixType* ref = &w[0];\n  for(int i=0; i<30 || ((ref==&w[0]) && i<300); ++i)\n    v.push_back(w[i%w.size()]);\n  for(unsigned int i=23; i<v.size(); ++i)\n  {\n    VERIFY(v[i]==w[(i-23)%w.size()]);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stddeque_overload.cpp", "function_name": "check_stddeque_matrix", "index": 896, "label": 0}
{"input": "inline ssize_t send_socket(socket_t sock, const void *ptr, size_t size,\n                           int flags) {\n  return handle_EINTR([&]() {\n    return send(sock,\n#ifdef _WIN32\n                static_cast<const char *>(ptr), static_cast<int>(size),\n#else\n                ptr, size,\n#endif\n                flags);\n  });\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "send_socket", "index": 897, "label": 0}
{"input": "DualQuat<T> DualQuat<T>::log(QuatAssumeType assumeUnit) const\n{\n    Quat<T> plog = getRealPart().log(assumeUnit);\n    Matx<T, 4, 4> jacob = detail::jacob_exp(plog);\n    return createFromQuat(plog, Quat<T>(jacob.inv() * getDualPart().toVec()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::log", "index": 898, "label": 0}
{"input": "void call_itersolver(Solver &solver, const int solver_id, const typename Solver::MatrixType& A, const Matrix<Scalar, Dynamic, 1>& b, const Matrix<Scalar, Dynamic, 1>& refX, std::string& statFile)\n{\n  solver.setTolerance(RelErr); \n  solver.setMaxIterations(MaximumIters);\n  \n  std::ofstream statbuf(statFile.c_str(), std::ios::app);\n  statbuf << \" <SOLVER_STAT ID='\" << solver_id <<\"'>\\n\"; \n  call_solver(solver, solver_id, A, b, refX,statbuf); \n  statbuf << \"   <ITER> \"<< solver.iterations() << \"</ITER>\\n\";\n  statbuf << \" </SOLVER_STAT>\\n\";\n  std::cout << \"ITERATIONS : \" << solver.iterations() <<\"\\n\\n\\n\"; \n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/spbench/spbenchsolver.h", "function_name": "call_itersolver", "index": 899, "label": 0}
{"input": "void test_cxx11_tensor_comparisons()\n{\n  CALL_SUBTEST(test_orderings());\n  CALL_SUBTEST(test_equality());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_comparisons.cpp", "function_name": "test_cxx11_tensor_comparisons", "index": 900, "label": 0}
{"input": "inline\nbool Rect_<_Tp>::contains(const Point_<_Tp>& pt) const\n{\n    return x <= pt.x && pt.x < x + width && y <= pt.y && pt.y < y + height;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Rect_<_Tp>::contains", "index": 901, "label": 0}
{"input": "JSVM_Value JSVMHostObjectProxy::getProperty(JSVM_Env env, JSVM_Value name,\n                                            JSVM_Value this_arg,\n                                            JSVM_Value data) {\n  JSVMHostObjectProxy* proxy_ptr = nullptr;\n  JSVM_CALL(\n      OH_JSVM_Unwrap(env, this_arg, reinterpret_cast<void**>(&proxy_ptr)));\n  JSVMRuntime* rt = nullptr;\n  std::shared_ptr<HostObject> lock_host_object;\n  if (proxy_ptr == nullptr ||\n      !proxy_ptr->GetRuntimeAndHost(rt, lock_host_object)) {\n    LOGE(\"JSVMHostObjectProxy::getProperty Error!\");\n    return nullptr;\n  }\n\n  piper::Value va =\n      lock_host_object->get(rt, JSVMHelper::createPropNameID(name, env));\n\n  JSVM_Value ret;\n  static_cast<JSVMRuntime*>(rt)->valueRef(va, &ret);\n  return ret;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_host_object.cc", "function_name": "JSVMHostObjectProxy::getProperty", "index": 902, "label": 0}
{"input": "inline std::vector<int64_t> TensorTypeAndShapeInfoImpl<T>::GetShape() const {\n  std::vector<int64_t> out(GetDimensionsCount(), 0);\n  ThrowOnError(GetApi().GetDimensions(this->p_, out.data(), out.size()));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfoImpl<T>::GetShape", "index": 903, "label": 0}
{"input": "int Mobunet::process(JMat* pic,const int* boxs,JMat* feat){\n    int boxx, boxy ,boxwidth, boxheight ;\n    boxx = boxs[0];boxy=boxs[1];boxwidth=boxs[2]-boxx;boxheight=boxs[3]-boxy;\n    int stride = pic->stride();\n    cv::Mat roisrc(pic->cvmat(),cv::Rect(boxx,boxy,boxwidth,boxheight));\n    cv::Mat cvorig;\n    cv::resize(roisrc , cvorig, cv::Size(168, 168), cv::INTER_AREA);\n    JMat  pic168(168,168,(uint8_t*)cvorig.data);\n    preprocess(&pic168,feat);\n    cv::Mat cvrst;;\n    cv::resize(cvorig , cvrst, cv::Size(boxwidth, boxheight), cv::INTER_AREA);\n    cvrst.copyTo(roisrc);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/munet.cpp", "function_name": "Mobunet::process", "index": 904, "label": 0}
{"input": "inline bool verifyIsApprox(const Type1& a, const Type2& b)\n{\n  bool ret = test_isApprox(a,b);\n  if(!ret)\n  {\n    std::cerr << \"Difference too large wrt tolerance \" << get_test_precision(a)  << \", relative error is: \" << test_relative_error(a,b) << std::endl;\n  }\n  return ret;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "verifyIsApprox", "index": 905, "label": 0}
{"input": "typename MatrixType::RealScalar FullPivHouseholderQR<MatrixType>::logAbsDeterminant() const\n{\n  eigen_assert(m_isInitialized && \"FullPivHouseholderQR is not initialized.\");\n  eigen_assert(m_qr.rows() == m_qr.cols() && \"You can't take the determinant of a non-square matrix!\");\n  return m_qr.diagonal().cwiseAbs().array().log().sum();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h", "function_name": "FullPivHouseholderQR<MatrixType>::logAbsDeterminant", "index": 906, "label": 0}
{"input": "EIGEN_DONT_INLINE void call_ref_3(const Ref<const SparseMatrix<float>, StandardCompressedFormat>& a, const B &b) {\n  VERIFY(a.isCompressed());\n  VERIFY_IS_EQUAL(a.toDense(),b.toDense());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_ref.cpp", "function_name": "call_ref_3", "index": 907, "label": 0}
{"input": "Dec(Sign inSign, uint8 inDegrees, uint8 inMinutes, double inSeconds) noexcept :\n            sign_(inSign),\n            degreesWhole_(inDegrees),\n            minutes_(inMinutes),\n            seconds_(inSeconds)\n        {\n            degrees_ = static_cast<double>(degreesWhole_) + static_cast<double>(minutes_) / 60. + seconds_ / 3600.;\n            degrees_ *= sign_ == Sign::NEGATIVE ? -1 : 1;\n\n            radians_ = deg2rad(degrees_);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/ReferenceFrames/Celestial.hpp", "function_name": "Dec", "index": 908, "label": 0}
{"input": "static void test_match()\n{\n  Eigen::DSizes<unsigned int, 3> dyn((unsigned int)2,(unsigned int)3,(unsigned int)7);\n  Eigen::Sizes<2,3,7> stat;\n  VERIFY_IS_EQUAL(Eigen::dimensions_match(dyn, stat), true);\n\n  Eigen::DSizes<int, 3> dyn1(2,3,7);\n  Eigen::DSizes<int, 2> dyn2(2,3);\n  VERIFY_IS_EQUAL(Eigen::dimensions_match(dyn1, dyn2), false);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_dimension.cpp", "function_name": "test_match", "index": 909, "label": 0}
{"input": "static v128_t wasm_unpackhi_i8x16(v128_t a, v128_t b) {\n    return wasm_v8x16_shuffle(a, b, 8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "wasm_unpackhi_i8x16", "index": 910, "label": 0}
{"input": "Optional<SourceExpressionParseResult> parse_source_expression(Production production, StringView input)\n{\n    SourceExpressionParser parser { input };\n\n    switch (production) {\n#define __ENUMERATE_SOURCE_EXPRESSION_PRODUCTION_PARSER(ProductionName, parse_production) \\\n    case Production::ProductionName:                                                      \\\n        if (!parser.parse_production())                                                   \\\n            return {};                                                                    \\\n        break;\n        ENUMERATE_SOURCE_EXPRESSION_PRODUCTION_PARSERS\n#undef __ENUMERATE_SOURCE_EXPRESSION_PRODUCTION_PARSER\n    default:\n        VERIFY_NOT_REACHED();\n    }\n\n    \n    if (!parser.lexer().is_eof())\n        return {};\n\n    return parser.parse_result();\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "38f80913a44ac1495ddb9c4eb4716664c9f33129", "file_path": "Libraries/LibWeb/ContentSecurityPolicy/Directives/SourceExpression.cpp", "function_name": "parse_source_expression", "index": 911, "label": 0}
{"input": "static inline\nPtr<Formatted> format(InputArray mtx, Formatter::FormatType fmt)\n{\n    return Formatter::get(fmt)->format(mtx.getMat());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/operations.hpp", "function_name": "format", "index": 912, "label": 0}
{"input": "inline void attr_utils::GetAttr(const OrtKernelInfo* p, const char* name, std::string& result) {\n  size_t size = 0;\n  \n  Ort::ThrowOnError(GetApi().KernelInfoGetAttribute_string(p, name, nullptr, &size));\n\n  std::string out;\n  out.resize(size);\n  Ort::ThrowOnError(GetApi().KernelInfoGetAttribute_string(p, name, &out[0], &size));\n  out.resize(size - 1);  \n  out.swap(result);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "attr_utils::GetAttr", "index": 913, "label": 0}
{"input": "void test_cxx11_tensor_of_strings()\n{\n  \n  CALL_SUBTEST(test_assign());\n  CALL_SUBTEST(test_concat());\n  CALL_SUBTEST(test_slices());\n  CALL_SUBTEST(test_additions());\n  CALL_SUBTEST(test_initialization());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_of_strings.cpp", "function_name": "test_cxx11_tensor_of_strings", "index": 914, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::SwitchLongPressMenu(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return SetSwitch(std::move(args), tasm::LynxEnv::kLynxEnableLongPressMenu);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::SwitchLongPressMenu", "index": 915, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline TgtPacket\npcast(const SrcPacket& a, const SrcPacket& , const SrcPacket& , const SrcPacket& ) {\n  return static_cast<TgtPacket>(a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "pcast", "index": 916, "label": 0}
{"input": "inline\n_InputArray _InputArray::rawIn(const std::array<_Tp, _Nm>& arr)\n{\n    _InputArray v;\n    v.flags = FIXED_TYPE + FIXED_SIZE + MATX + traits::Type<_Tp>::value + ACCESS_READ;\n    v.obj = (void*)arr.data();\n    v.sz = Size(1, _Nm);\n    return v;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "_InputArray::rawIn", "index": 917, "label": 0}
{"input": "FunctorExtractor(const TensorEvaluator<const TensorReductionOp<Op, Dims, ArgType, MakePointer_>, Device>& expr)\n  : m_dimensions(DimConstr<Dimensions, Evaluator::NumOutputDims>::getDim(expr.dimensions())) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorSyclExtractFunctors.h", "function_name": "FunctorExtractor", "index": 918, "label": 0}
{"input": "inline __m256i _v256_packs_epu32(const __m256i& a, const __m256i& b)\n{\n    const __m256i maxv = __lasx_xvreplgr2vr_w(65535);\n    __m256i am = __lasx_xvmin_wu(a, maxv);\n    __m256i bm = __lasx_xvmin_wu(b, maxv);\n    return _lasx_packus_w(am, bm);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_packs_epu32", "index": 919, "label": 0}
{"input": "void EglRenderer::setVideoSize(int width, int height) {\n    LOGI(TAG, \"setVideoSize %d %d\", width, height);\n    videoWidth = width;\n    videoHeight = height;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/EglRenderer.cpp", "function_name": "EglRenderer::setVideoSize", "index": 920, "label": 0}
{"input": "__attribute__((constructor)) void RegisterEntryModule(void) {\n  napi_module_register(&lynx_module);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_harmony/entry.cc", "function_name": "RegisterEntryModule", "index": 921, "label": 0}
{"input": "inline std::string Request::get_header_value(const std::string &key,\n                                             size_t id) const {\n  return detail::get_header_value(headers, key, id, \"\");\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Request::get_header_value", "index": 922, "label": 0}
{"input": "RowPtr<T> RowPtrFromBatch(RowVectorBatch<T>& row_vectors) {\n  return RowPtr<T>(row_vectors.All(), row_vectors.Cols(), row_vectors.Stride());\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/allocator.h", "function_name": "RowPtrFromBatch", "index": 923, "label": 0}
{"input": "inline NdArray<double> blackman(int32 m)\n    {\n        if (m < 1)\n        {\n            return {};\n        }\n\n        const auto mDouble = static_cast<double>(m);\n\n        NdArray<double> result(1, m);\n        int32           i = 0;\n        for (auto n : linspace(0., mDouble, m, true))\n        {\n            const auto nOverM = n / mDouble;\n            result[i++] =\n                0.42 - 0.5 * std::cos(2. * constants::pi * nOverM) + 0.08 * std::cos(4. * constants::pi * nOverM);\n        }\n\n        return result;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/blackman.hpp", "function_name": "blackman", "index": 924, "label": 0}
{"input": "inline long double test_precision<std::complex<long double> >() { return test_precision<long double>(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "test_precision", "index": 925, "label": 0}
{"input": "inline size_t\nResult::get_request_header_value_count(const std::string &key) const {\n  auto r = request_headers_.equal_range(key);\n  return static_cast<size_t>(std::distance(r.first, r.second));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Result::get_request_header_value_count", "index": 926, "label": 0}
{"input": "unsigned int index(const unsigned int tid)\n        {\n            return (tid >> warp_log) * warp_smem_stride + 16 + (tid & warp_mask);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/scan.hpp", "function_name": "tid", "index": 927, "label": 0}
{"input": "G desync(const G &g) {\n    cv::GKernel k{\n          GDesync::id()                                     \n        , \"\"                                                \n        , [](const GMetaArgs &a, const GArgs &) {return a;} \n        , {cv::detail::GTypeTraits<G>::shape}               \n        , {cv::detail::GTypeTraits<G>::op_kind}             \n        , {cv::detail::GObtainCtor<G>::get()}               \n        , {cv::detail::GTypeTraits<G>::op_kind}             \n    };\n    cv::GCall call(std::move(k));\n    call.pass(g);\n    return std::get<0>(GDesync::yield<G>(call, cv::detail::MkSeq<1>::type()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/desync.hpp", "function_name": "desync", "index": 928, "label": 0}
{"input": "esp_err_t bsp_led_init()\n{\n    ESP_LOGI(TAG, \"BLINK_GPIO setting %d\", bsp_strip_config.strip_gpio_num);\n\n    ESP_ERROR_CHECK(led_strip_new_rmt_device(&bsp_strip_config, &bsp_rmt_config, &led_strip));\n    led_strip_set_pixel(led_strip, 0, 0x00, 0x00, 0x00);\n    led_strip_set_pixel(led_strip, 1, 0x00, 0x00, 0x00);\n    led_strip_set_pixel(led_strip, 2, 0x00, 0x00, 0x00);\n    led_strip_set_pixel(led_strip, 3, 0x00, 0x00, 0x00);\n    led_strip_refresh(led_strip);\n\n    return ESP_OK;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/dog_light.cc", "function_name": "bsp_led_init", "index": 929, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*(const RotationBase<Derived,Dim>& r) const\n{\n  Transform res = *this;\n  res.rotate(r.derived());\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*", "index": 930, "label": 0}
{"input": "inline const mpreal operator>>(const mpreal& v, const int k)\n{\n    return div_2si(v,static_cast<long int>(k));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "operator>>", "index": 931, "label": 0}
{"input": "void test_geo_parametrizedline()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( parametrizedline(ParametrizedLine<float,2>()) );\n    CALL_SUBTEST_2( parametrizedline(ParametrizedLine<float,3>()) );\n    CALL_SUBTEST_2( parametrizedline_alignment<float>() );\n    CALL_SUBTEST_3( parametrizedline(ParametrizedLine<double,4>()) );\n    CALL_SUBTEST_3( parametrizedline_alignment<double>() );\n    CALL_SUBTEST_4( parametrizedline(ParametrizedLine<std::complex<double>,5>()) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_parametrizedline.cpp", "function_name": "test_geo_parametrizedline", "index": 932, "label": 0}
{"input": "void BackgroundTask::BackgroundTaskLoop() {\n    ESP_LOGI(TAG, \"background_task started\");\n    while (true) {\n        std::unique_lock<std::mutex> lock(mutex_);\n        condition_variable_.wait(lock, [this]() { return !background_tasks_.empty(); });\n        \n        std::list<std::function<void()>> tasks = std::move(background_tasks_);\n        lock.unlock();\n\n        for (auto& task : tasks) {\n            task();\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "89f10365b1902c7d04cb1a78ce4a12a435ec84f8", "file_path": "main/background_task.cc", "function_name": "BackgroundTask::BackgroundTaskLoop", "index": 933, "label": 0}
{"input": "void test_unsigned_32bit()\n{\n  for (uint32_t i = 1; i < 25000; ++i) {\n    const Eigen::internal::TensorIntDivisor<uint32_t> div(i);\n\n    for (uint32_t j = 0; j < 25000; ++j) {\n      const uint32_t fast_div = j / div;\n      const uint32_t slow_div = j / i;\n      VERIFY_IS_EQUAL(fast_div, slow_div);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_intdiv.cpp", "function_name": "test_unsigned_32bit", "index": 934, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_netwav(JNIEnv *env, jobject thiz, jstring wavurl,jfloat duration){\n            std::string s_wav = getStringUTF(env,wavurl);\n            return g_digit->netwav(s_wav.c_str(),duration);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_netwav", "index": 935, "label": 0}
{"input": "auto visit(Visitor&& visitor, const Variant& var) -> decltype(visitor(get<0>(var)))\n    {\n        constexpr std::size_t varsize = util::variant_size<Variant>::value;\n        static_assert(varsize != 0, \"utils::variant must contains one type at least \");\n        using is_variant_processed_t = std::false_type;\n\n        using ReturnType = decltype(visitor(get<0>(var)));\n        using return_t = std::is_same<ReturnType, void>;\n        return detail::apply_visitor_impl<ReturnType, 0, varsize, Visitor>(\n                                    std::forward<Visitor>(visitor),\n                                    var, is_variant_processed_t{},\n                                    return_t{});\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "visit", "index": 936, "label": 0}
{"input": "void looper::post(int what, void *data, bool flush) {\n  loopermessage *msg = new loopermessage();\n  msg->what = what;\n  msg->obj = data;\n  msg->next = NULL;\n  msg->quit = false;\n  addmsg(msg, flush);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/looper.cpp", "function_name": "looper::post", "index": 937, "label": 0}
{"input": "inline Value KernelInfoImpl<T>::GetTensorAttribute(const char* name, OrtAllocator* allocator) const {\n  OrtValue* out = nullptr;\n  ThrowOnError(GetApi().KernelInfoGetAttribute_tensor(this->p_, name, allocator, &out));\n  return Value{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::GetTensorAttribute", "index": 938, "label": 0}
{"input": "[[nodiscard]] inline Orientation ECEFEulerToENURollPitchYaw(const reference_frames::ECEF& location,\n                                                                const Euler&                  orientation) noexcept\n    {\n        const auto nedOrientation = ECEFEulerToNEDRollPitchYaw(location, orientation);\n        return { nedOrientation.pitch, nedOrientation.roll, -nedOrientation.yaw };\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ECEFEulerToENURollPitchYaw.hpp", "function_name": "ECEFEulerToENURollPitchYaw", "index": 939, "label": 0}
{"input": "void setOutputDir(const std::filesystem::path& outputDir)\n        {\n            if (!std::filesystem::is_directory(outputDir))\n            {\n                throw std::runtime_error(\"outputDir does not exist\");\n            }\n\n            outputDir_ = outputDir;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Logging/BinaryLogger.hpp", "function_name": "std::filesystem::path", "index": 940, "label": 0}
{"input": "inline __m128d _v256_extract_low(const __m256d& v)\n{ return __m128d(_v256_extract_low(*((__m256i*)&v))); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_extract_low", "index": 941, "label": 0}
{"input": "void MatrixXd_multiply(const C_MatrixXd *m1, const C_MatrixXd *m2, C_MatrixXd *result)\n{\n  c_to_eigen(result) = c_to_eigen(m1) * c_to_eigen(m2);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mix_eigen_and_c/binary_library.cpp", "function_name": "MatrixXd_multiply", "index": 942, "label": 0}
{"input": "inline v_int32x4 v_load_expand_q(const schar* ptr)\n{\n    vec_char16 out;\n    vec_short8 outs;\n    vec_int4 outw;\n\n    _LXSIWZX(out, ptr, vec_char16);\n    outs = vec_unpackl(out);\n    outw = vec_unpackh(outs);\n    return v_int32x4(outw);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_vsx.hpp", "function_name": "v_load_expand_q", "index": 943, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline RowsBlockXpr middleRows(Index startRow, Index n)\n{\n  return RowsBlockXpr(derived(), startRow, 0, n, cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "RowsBlockXpr middleRows", "index": 944, "label": 0}
{"input": "void test_cxx11_tensor_reduction_sycl() {\n  cl::sycl::gpu_selector s;\n  Eigen::SyclDevice sycl_device(s);\n  CALL_SUBTEST((test_full_reductions_sycl(sycl_device)));\n  CALL_SUBTEST((test_first_dim_reductions_sycl(sycl_device)));\n  CALL_SUBTEST((test_last_dim_reductions_sycl(sycl_device)));\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_reduction_sycl.cpp", "function_name": "test_cxx11_tensor_reduction_sycl", "index": 945, "label": 0}
{"input": "void printFuncAttrib(Func& func)\n    {\n\n        cudaFuncAttributes attrs;\n        cudaFuncGetAttributes(&attrs, func);\n\n        printf(\"=== Function stats ===\\n\");\n        printf(\"Name: \\n\");\n        printf(\"sharedSizeBytes    = %d\\n\", attrs.sharedSizeBytes);\n        printf(\"constSizeBytes     = %d\\n\", attrs.constSizeBytes);\n        printf(\"localSizeBytes     = %d\\n\", attrs.localSizeBytes);\n        printf(\"maxThreadsPerBlock = %d\\n\", attrs.maxThreadsPerBlock);\n        printf(\"numRegs            = %d\\n\", attrs.numRegs);\n        printf(\"ptxVersion         = %d\\n\", attrs.ptxVersion);\n        printf(\"binaryVersion      = %d\\n\", attrs.binaryVersion);\n        printf(\"\\n\");\n        fflush(stdout);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/funcattrib.hpp", "function_name": "printFuncAttrib", "index": 946, "label": 0}
{"input": "inline\nMat_<_Tp>::operator std::vector<_Tp>() const\n{\n    std::vector<_Tp> v;\n    copyTo(v);\n    return v;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "std::vector<_Tp>", "index": 947, "label": 0}
{"input": "inline const typename Derived::Scalar bruteforce_det3_helper\n(const MatrixBase<Derived>& matrix, int a, int b, int c)\n{\n  return matrix.coeff(0,a)\n         * (matrix.coeff(1,b) * matrix.coeff(2,c) - matrix.coeff(1,c) * matrix.coeff(2,b));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/Determinant.h", "function_name": "bruteforce_det3_helper", "index": 948, "label": 0}
{"input": "inline size_t ConstValueImpl<T>::GetStringTensorElementLength(size_t element_index) const {\n  size_t out;\n  ThrowOnError(GetApi().GetStringTensorElementLength(this->p_, element_index, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetStringTensorElementLength", "index": 949, "label": 0}
{"input": "std::pair<NdArray<uint32>, NdArray<uint32>> nonzero(const NdArray<dtype>& inArray)\n    {\n        return inArray.nonzero();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nonzero.hpp", "function_name": "nonzero", "index": 950, "label": 0}
{"input": "inline bool GetMarketLine (std::stringstream& line, IndexType& M, IndexType& N, IndexType& i, IndexType& j, std::complex<Scalar>& value)\n  {\n    Scalar valR, valI;\n    line >> i >> j >> valR >> valI;\n    i--;\n    j--;\n    if(i>=0 && j>=0 && i<M && j<N)\n    {\n      value = std::complex<Scalar>(valR, valI);\n      return true; \n    }\n    else\n      return false;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MarketIO.h", "function_name": "GetMarketLine", "index": 951, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)\n{\n  PacketBlock<Packet4f,4> transpose;\n  transpose.packet[0] = vecs[0];\n  transpose.packet[1] = vecs[1];\n  transpose.packet[2] = vecs[2];\n  transpose.packet[3] = vecs[3];\n  ptranspose(transpose);\n\n  Packet4f sum = padd(transpose.packet[0], transpose.packet[1]);\n  sum = padd(sum, transpose.packet[2]);\n  sum = padd(sum, transpose.packet[3]);\n  return sum;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "preduxp", "index": 952, "label": 0}
{"input": "v_int64x2(int64 v0, int64 v1)\n    {\n        int64 v[] = {v0, v1};\n        val = wasm_v128_load(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_int64x2", "index": 953, "label": 0}
{"input": "NdArray<dtype> full_like(const NdArray<dtype>& inArray, dtype inFillValue)\n    {\n        return full(inArray.shape(), inFillValue);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/full_like.hpp", "function_name": "full_like", "index": 954, "label": 0}
{"input": "void UIBaseInput::SetValue(\n    const lepus::Value& args,\n    base::MoveOnlyClosure<void, int32_t, const lepus::Value&> callback) {\n  if (args.IsTable()) {\n    const auto params = args.Table();\n    if (params->Contains(\"value\")) {\n      const auto& value = params->GetValue(\"value\");\n      if (value.IsString()) {\n        auto item = (ArkUI_AttributeItem){.string = std::move(value.CString())};\n        NodeManager::Instance().SetAttribute(input_node_,\n                                             GetTextAttributeType(), &item);\n        callback(LynxGetUIResult::SUCCESS, lepus::Value());\n        return;\n      }\n    }\n  }\n  const auto ret = lepus::Dictionary::Create();\n  ret->SetValue(\"err\", \"value is not assigned\");\n  callback(LynxGetUIResult::PARAM_INVALID, lepus::Value(ret));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SetValue", "index": 955, "label": 0}
{"input": "inline v_float64 v_not (const v_float64& a) \\\n{ \\\n    return vreinterpret_f64m1(v_not(vreinterpret_i64m1(a))); \\\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv_scalable.hpp", "function_name": "v_not", "index": 956, "label": 0}
{"input": "static void test_static_dims() {\n  Tensor<float, 4, DataLayout> in(72, 53, 97, 113);\n  Tensor<float, 2, DataLayout> out(72, 97);\n  in.setRandom();\n\n#if !EIGEN_HAS_CONSTEXPR \n  array<int, 2> reduction_axis;\n  reduction_axis[0] = 1;\n  reduction_axis[1] = 3;\n#else\n  Eigen::IndexList<Eigen::type2index<1>, Eigen::type2index<3> > reduction_axis;\n#endif\n\n  out = in.maximum(reduction_axis);\n\n  for (int i = 0; i < 72; ++i) {\n    for (int j = 0; j < 97; ++j) {\n      float expected = -1e10f;\n      for (int k = 0; k < 53; ++k) {\n        for (int l = 0; l < 113; ++l) {\n          expected = (std::max)(expected, in(i, k, j, l));\n        }\n      }\n      VERIFY_IS_APPROX(out(i, j), expected);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_reduction.cpp", "function_name": "test_static_dims", "index": 957, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::OrReducer, const Dims, const TensorConversionOp<bool, const Derived> >\n    any(const Dims& dims) const {\n      return cast<bool>().reduce(dims, internal::OrReducer());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::OrReducer, const Dims, const TensorConversionOp<bool, const Derived> >\n    any", "index": 958, "label": 0}
{"input": "v_uint32x4(unsigned v0, unsigned v1, unsigned v2, unsigned v3)\n    {\n        unsigned v[] = {v0, v1, v2, v3};\n        val = wasm_v128_load(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_uint32x4", "index": 959, "label": 0}
{"input": "inline void umfpack_report_control(double control[UMFPACK_CONTROL], std::complex<double>)\n{ umfpack_zi_report_control(control);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_report_control", "index": 960, "label": 0}
{"input": "inline void Response::set_chunked_content_provider(\n    const std::string &content_type, ContentProviderWithoutLength provider,\n    ContentProviderResourceReleaser resource_releaser) {\n  set_header(\"Content-Type\", content_type);\n  content_length_ = 0;\n  content_provider_ = detail::ContentProviderAdapter(std::move(provider));\n  content_provider_resource_releaser_ = resource_releaser;\n  is_chunked_content_provider_ = true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Response::set_chunked_content_provider", "index": 961, "label": 0}
{"input": "EIGEN_DONT_INLINE typename T::Scalar lapackNorm(T& v)\n{\n  typedef typename T::Scalar Scalar;\n  int n = v.size();\n  Scalar scale = 0;\n  Scalar ssq = 1;\n  for (int i=0;i<n;++i)\n  {\n    Scalar ax = std::abs(v.coeff(i));\n    if (scale >= ax)\n    {\n      ssq += numext::abs2(ax/scale);\n    }\n    else\n    {\n      ssq = Scalar(1) + ssq * numext::abs2(scale/ax);\n      scale = ax;\n    }\n  }\n  return scale * std::sqrt(ssq);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/bench_norm.cpp", "function_name": "typename T::Scalar lapackNorm", "index": 962, "label": 0}
{"input": "float inv_cond(const Ref<const MatrixXf>& a)\n{\n  const VectorXf sing_vals = a.jacobiSvd().singularValues();\n  return sing_vals(sing_vals.size()-1) / sing_vals(0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/function_taking_ref.cpp", "function_name": "inv_cond", "index": 963, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vmin4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vmin4.u32.u32.u32 %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vmin.u32.u32.u32 %0.b0, %1.b0, %2.b0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"5 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s;\n        s = vcmpge4(b, a);  \n        r = a & s;          \n        s = b & ~s;         \n        r = r | s;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vmin4", "index": 964, "label": 0}
{"input": "NdArray<dtype> swapaxes(const NdArray<dtype>& inArray)\n    {\n        return inArray.swapaxes();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/swapaxes.hpp", "function_name": "swapaxes", "index": 965, "label": 0}
{"input": "inline bool BFloat16_t::operator==(const BFloat16_t& rhs) const noexcept {\n  if (IsNaN() || rhs.IsNaN()) {\n    \n    return false;\n  }\n  return val == rhs.val;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "BFloat16_t::operator==", "index": 966, "label": 0}
{"input": "inline cl_int clGetSupportedImageFormats(cl_context p0, cl_mem_flags p1, cl_mem_object_type p2, cl_uint p3, cl_image_format* p4, cl_uint* p5) { return clGetSupportedImageFormats_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetSupportedImageFormats", "index": 967, "label": 0}
{"input": "__device__ __forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*, volatile T4*, volatile T5*, volatile T6*, volatile T7*>\n    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7)\n    {\n        return thrust::make_tuple((volatile T0*) t0, (volatile T1*) t1, (volatile T2*) t2, (volatile T3*) t3, (volatile T4*) t4, (volatile T5*) t5, (volatile T6*) t6, (volatile T7*) t7);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/reduce.hpp", "function_name": "__forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*, volatile T4*, volatile T5*, volatile T6*, volatile T7*>\n    smem_tuple", "index": 968, "label": 0}
{"input": "TensorConvolutionOp(const InputXprType& input, const KernelXprType& kernel, const Indices& dims)\n      : m_input_xpr(input), m_kernel_xpr(kernel), m_indices(dims) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorConvolution.h", "function_name": "TensorConvolutionOp", "index": 969, "label": 0}
{"input": "void test_umfpack_support()\n{\n  CALL_SUBTEST_1(test_umfpack_support_T<double>());\n  CALL_SUBTEST_2(test_umfpack_support_T<std::complex<double> >());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/umfpack_support.cpp", "function_name": "test_umfpack_support", "index": 970, "label": 0}
{"input": "const MatrixSquareRootReturnValue<Derived> MatrixBase<Derived>::sqrt() const\n{\n  eigen_assert(rows() == cols());\n  return MatrixSquareRootReturnValue<Derived>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixSquareRoot.h", "function_name": "MatrixBase<Derived>::sqrt", "index": 971, "label": 0}
{"input": "static void help(Memory to, Memory from) {\n                std::swap(*reinterpret_cast<T*>(to), *reinterpret_cast<T*>(from));\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "to", "index": 972, "label": 0}
{"input": "void qr_verify_assert()\n{\n  MatrixType tmp;\n\n  FullPivHouseholderQR<MatrixType> qr;\n  VERIFY_RAISES_ASSERT(qr.matrixQR())\n  VERIFY_RAISES_ASSERT(qr.solve(tmp))\n  VERIFY_RAISES_ASSERT(qr.matrixQ())\n  VERIFY_RAISES_ASSERT(qr.dimensionOfKernel())\n  VERIFY_RAISES_ASSERT(qr.isInjective())\n  VERIFY_RAISES_ASSERT(qr.isSurjective())\n  VERIFY_RAISES_ASSERT(qr.isInvertible())\n  VERIFY_RAISES_ASSERT(qr.inverse())\n  VERIFY_RAISES_ASSERT(qr.absDeterminant())\n  VERIFY_RAISES_ASSERT(qr.logAbsDeterminant())\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/qr_fullpivoting.cpp", "function_name": "qr_verify_assert", "index": 973, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b)\n{\n  Packet4f res;\n  res.v4f[0] = pand(a.v4f[0], b.v4f[0]);\n  res.v4f[1] = pand(a.v4f[1], b.v4f[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "por", "index": 974, "label": 0}
{"input": "translationExt() const\n  { return m_matrix.template block<int(Mode)==int(Projective)?HDim:Dim,1>(0,Dim); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "translationExt", "index": 975, "label": 0}
{"input": "GCompiledT compile(detail::ProtoToMetaT<Args>... inDescs, GCompileArgs &&args)\n    {\n        GMetaArgs inMetas = { GMetaArg(inDescs)... };\n        return GCompiledT(m_comp.compile(std::move(inMetas), std::move(args)));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gtyped.hpp", "function_name": "detail::ProtoToMetaT<Args>", "index": 976, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Scalar absDistance(const VectorType& p) const { return numext::abs(signedDistance(p)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Hyperplane.h", "function_name": "absDistance", "index": 977, "label": 0}
{"input": "static void test_reshape_in_expr() {\n  MatrixXf m1(2,3*5*7*11);\n  MatrixXf m2(3*5*7*11,13);\n  m1.setRandom();\n  m2.setRandom();\n  MatrixXf m3 = m1 * m2;\n\n  TensorMap<Tensor<float, 5>> tensor1(m1.data(), 2,3,5,7,11);\n  TensorMap<Tensor<float, 5>> tensor2(m2.data(), 3,5,7,11,13);\n  Tensor<float, 2>::Dimensions newDims1(2,3*5*7*11);\n  Tensor<float, 2>::Dimensions newDims2(3*5*7*11,13);\n  typedef Tensor<float, 1>::DimensionPair DimPair;\n  array<DimPair, 1> contract_along{{DimPair(1, 0)}};\n  Tensor<float, 2> tensor3(2,13);\n  tensor3 = tensor1.reshape(newDims1).contract(tensor2.reshape(newDims2), contract_along);\n\n  Map<MatrixXf> res(tensor3.data(), 2, 13);\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 13; ++j) {\n      VERIFY_IS_APPROX(res(i,j), m3(i,j));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_morphing.cpp", "function_name": "test_reshape_in_expr", "index": 978, "label": 0}
{"input": "void QuickjsRuntimeInstance::AddObserver(JSIObserver* obs) {\n  if (!obs) {\n    return;\n  }\n  if (!obs_set_ptr_) {\n    obs_set_ptr_ = std::make_unique<std::unordered_set<JSIObserver*>>();\n  }\n  obs_set_ptr_->emplace(obs);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/jsi/quickjs/quickjs_runtime_wrapper.cc", "function_name": "QuickjsRuntimeInstance::AddObserver", "index": 979, "label": 0}
{"input": "void test_pardiso_T()\n{\n  PardisoLLT < SparseMatrix<T, RowMajor>, Lower> pardiso_llt_lower;\n  PardisoLLT < SparseMatrix<T, RowMajor>, Upper> pardiso_llt_upper;\n  PardisoLDLT < SparseMatrix<T, RowMajor>, Lower> pardiso_ldlt_lower;\n  PardisoLDLT < SparseMatrix<T, RowMajor>, Upper> pardiso_ldlt_upper;\n  PardisoLU  < SparseMatrix<T, RowMajor> > pardiso_lu;\n\n  check_sparse_spd_solving(pardiso_llt_lower);\n  check_sparse_spd_solving(pardiso_llt_upper);\n  check_sparse_spd_solving(pardiso_ldlt_lower);\n  check_sparse_spd_solving(pardiso_ldlt_upper);\n  check_sparse_square_solving(pardiso_lu);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/pardiso_support.cpp", "function_name": "test_pardiso_T", "index": 980, "label": 0}
{"input": "void ForEach(const Visitor& visitor) {\n    visitor(tokenizer, \"tokenizer\", Path(),\n            \"Path name of tokenizer model file.\");\n    visitor(weights, \"weights\", Path(),\n            \"Path name of model weights (.sbs) file.\\n    Required argument.\");\n    visitor(compressed_weights, \"compressed_weights\", Path(),\n            \"Alias for --weights.\");\n    visitor(model_type_str, \"model\", std::string(),\n            \"Model type\\n    2b-it = 2B parameters, instruction-tuned\\n    \"\n            \"2b-pt = 2B parameters, pretrained\\n    7b-it = 7B parameters \"\n            \"instruction-tuned\\n    7b-pt = 7B parameters, pretrained\\n    \"\n            \"Path name of tokenizer model file.\"0\n            \"Path name of tokenizer model file.\"1);\n    visitor(weight_type_str, \"Path name of tokenizer model file.\"2, std::string(\"Path name of tokenizer model file.\"3),\n            \"Path name of tokenizer model file.\"4);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "util/app.h", "function_name": "ForEach", "index": 981, "label": 0}
{"input": "inline bool coeffExistUpper(Index row, Index col) {\n        const Index outer = IsRowMajor ? row : col;\n        const Index inner = IsRowMajor ? col : row;\n\n        eigen_assert(outer < outerSize());\n        eigen_assert(inner < innerSize());\n        eigen_assert(inner != outer);\n\n        if (IsRowMajor) {\n            const Index minOuterIndex = inner - m_data.upperProfile(inner);\n            return outer >= minOuterIndex;\n        } else {\n            const Index maxOuterIndex = inner + m_data.upperProfile(inner);\n            return outer <= maxOuterIndex;\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "coeffExistUpper", "index": 982, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half igammac(const Eigen::half& a, const Eigen::half& x) {\n  return Eigen::half(Eigen::numext::igammac(static_cast<float>(a), static_cast<float>(x)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half igammac", "index": 983, "label": 0}
{"input": "std::vector<Cluster<dtype>>\n        clusterPixels(const NdArray<dtype>& inImageArray, const NdArray<bool>& inExceedances, uint8 inBorderWidth = 0)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        ClusterMaker<dtype> clusterMaker(&inExceedances, &inImageArray, inBorderWidth);\n        return std::vector<Cluster<dtype>>(clusterMaker.begin(), clusterMaker.end());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/ImageProcessing/clusterPixels.hpp", "function_name": "clusterPixels", "index": 984, "label": 0}
{"input": "DualQuat<T> DualQuat<T>::exp() const\n{\n    Quat<T> real = getRealPart();\n    return createFromQuat(real.exp(), Quat<T>(detail::jacob_exp(real) * getDualPart().toVec()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::exp", "index": 985, "label": 0}
{"input": "std::shared_ptr<profile::RuntimeProfiler> makeJSVMRuntimeProfiler(\n    std::shared_ptr<piper::JSIContext> js_context) {\n  \n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "makeJSVMRuntimeProfiler", "index": 986, "label": 0}
{"input": "inline TensorTypeAndShapeInfo Value::GetSparseTensorValuesTypeAndShapeInfo() const {\n  OrtTensorTypeAndShapeInfo* output;\n  ThrowOnError(GetApi().GetSparseTensorValuesTypeAndShape(p_, &output));\n  return TensorTypeAndShapeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetSparseTensorValuesTypeAndShapeInfo", "index": 987, "label": 0}
{"input": "inline v_int32x4 v_floor(const v_float32x4& a)\n{\n    v128_t a1 = wasm_i32x4_trunc_saturate_f32x4(a.val);\n    v128_t mask = wasm_f32x4_lt(a.val, wasm_f32x4_convert_i32x4(a1));\n    return v_int32x4(wasm_i32x4_add(a1, mask));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_floor", "index": 988, "label": 0}
{"input": "Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic> randMatrixSpecialUnitary(int size)\n{\n  typedef T Scalar;\n\n  typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> MatrixType;\n\n  \n  MatrixType Q = randMatrixUnitary<Scalar>(size);\n\n  \n  Q.col(0) *= numext::conj(Q.determinant());\n\n  return Q;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/umeyama.cpp", "function_name": "randMatrixSpecialUnitary", "index": 989, "label": 0}
{"input": "void BaseRenderHelper::setAudioParams(int sampleRate, int channels, int format, int bytesPerSample) {\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/BaseRenderHelper.cpp", "function_name": "BaseRenderHelper::setAudioParams", "index": 990, "label": 0}
{"input": "int gjdigit_onewav(gjdigit_t* dg,const char* wavfn,float duration){\n    if(!dg->ai_wenet)return -999;\n    \n\n    int  rst = 0;\n    KWav* net_wavmat = new KWav(wavfn,dg->bnf_cache,duration);\n    if(net_wavmat->duration()>0){\n       calcall(dg,net_wavmat); \n        rst =  net_wavmat->bnfblocks();\n        dg->cnt_wenet = rst;\n        dg->inx_wenet = 0;\n    }else{\n        rst = dg->ai_wenet->nextwav(wavfn,dg->bnf_cache,duration);\n        dg->bnf_cache->debug();\n        dg->cnt_wenet = rst;\n        dg->inx_wenet = 0;\n    }\n    delete net_wavmat;\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_onewav", "index": 991, "label": 0}
{"input": "int MyDigit::netwav(const char* url,float duration){\n    if(!inited)return -999;\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"netwav %s\",url);\n    if(net_curl){\n        net_curl->cancel();\n        delete net_curl;\n        net_curl = nullptr;\n    }\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"netwav gogogo\");\n    if(net_wavmat){\n        delete net_wavmat;\n        net_wavmat = nullptr;\n    }\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"netwav %f\",duration);\n    net_wavmat = new KWav(duration);\n    net_curl = new NetCurl((char*)url,duration,net_wavmat);\n    for(int k=0;k<20;k++){\n        if(net_curl->checked())break;\n        usleep(100000);\n    }\n    int rst =  net_wavmat->bnfblocks();\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"netwav %d\",rst);\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "MyDigit::netwav", "index": 992, "label": 0}
{"input": "inline\nMatExpr::MatExpr(const MatOp* _op, int _flags, const Mat& _a, const Mat& _b,\n                 const Mat& _c, double _alpha, double _beta, const Scalar& _s)\n    : op(_op), flags(_flags), a(_a), b(_b), c(_c), alpha(_alpha), beta(_beta), s(_s)\n{}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "MatExpr::MatExpr", "index": 993, "label": 0}
{"input": "inline TensorTypeAndShapeInfo ConstValueImpl<T>::GetTensorTypeAndShapeInfo() const {\n  OrtTensorTypeAndShapeInfo* output;\n  ThrowOnError(GetApi().GetTensorTypeAndShape(this->p_, &output));\n  return TensorTypeAndShapeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetTensorTypeAndShapeInfo", "index": 994, "label": 0}
{"input": "int LedStripControl::LevelToBrightness(int level) const {\n    if (level < 0) level = 0;\n    if (level > 8) level = 8;\n    return (1 << level) - 1;  \n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "d460af84268a55d33af31cbc0fdcc53e15d8ae05", "file_path": "main/boards/df-k10/led_control.cc", "function_name": "LedStripControl::LevelToBrightness", "index": 995, "label": 0}
{"input": "NdArray<dtype> nansum(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = static_cast<dtype>(0);\n                                     };\n                                 });\n\n        return sum(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nansum.hpp", "function_name": "nansum", "index": 996, "label": 0}
{"input": "void test_cxx11_tensor_layout_swap()\n{\n  CALL_SUBTEST(test_simple_swap());\n  CALL_SUBTEST(test_swap_as_lvalue());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_layout_swap.cpp", "function_name": "test_cxx11_tensor_layout_swap", "index": 997, "label": 0}
{"input": "void log(const_pointer dataElements, std::size_t numElements)\n            {\n                if (!enabled_)\n                {\n                    return;\n                }\n\n                if (filepath_.empty())\n                {\n                    throw std::runtime_error(\"The output log directory does not exist\");\n                }\n\n                std::for_each(dataElements,\n                              dataElements + numElements,\n                              [this](const_reference dataElement) { log(dataElement); });\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Logging/BinaryLogger.hpp", "function_name": "dataElements", "index": 998, "label": 0}
{"input": "static int fio_io_end(struct thread_data *td, struct io_u *io_u, int ret) {\n    if (io_u->file && ret >= 0 && ddir_rw(io_u->ddir)) {\n        LAST_POS(io_u->file) = io_u->offset + ret;\n    }\n\n    if (ret != (int) io_u->xfer_buflen) {\n        if (ret >= 0) {\n            io_u->resid = io_u->xfer_buflen - ret;\n            io_u->error = 0;\n            return FIO_Q_COMPLETED;\n        } else {\n            io_u->error = errno;\n        }\n    }\n\n    if (io_u->error) {\n        io_u_log_error(td, io_u);\n        td_verror(td, io_u->error, \"xfer\");\n    }\n\n    return FIO_Q_COMPLETED;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "fio_io_end", "index": 999, "label": 0}
{"input": "CV_WRAP static inline\nString testReservedKeywordConversion(int positional_argument, int lambda = 2, int from = 3)\n{\n    return format(\"arg=%d, lambda=%d, from=%d\", positional_argument, lambda, from);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "testReservedKeywordConversion", "index": 1000, "label": 0}
{"input": "ModelConfig ConfigFromModel(Model model) {\n  switch (model) {\n    case Model::GEMMA_2B:\n      return ConfigGemma2B();\n    case Model::GEMMA_7B:\n      return ConfigGemma7B();\n    case Model::GEMMA2_2B:\n      return ConfigGemma2_2B();\n    case Model::GEMMA2_9B:\n      return ConfigGemma2_9B();\n    case Model::GEMMA2_27B:\n      return ConfigGemma2_27B();\n    case Model::GRIFFIN_2B:\n      return ConfigGriffin2B();\n    case Model::GEMMA_TINY:\n      return ConfigGemmaTiny();\n    case Model::PALIGEMMA_224:\n      return ConfigPaliGemma_224();\n    case Model::PALIGEMMA_448:\n      return ConfigPaliGemma_448();\n    case Model::PALIGEMMA2_3B_224:\n      return ConfigPaliGemma2_3B_224();\n    case Model::PALIGEMMA2_3B_448:\n      return ConfigPaliGemma2_3B_448();\n    case Model::PALIGEMMA2_10B_224:\n      return ConfigPaliGemma2_10B_224();\n    case Model::PALIGEMMA2_10B_448:\n      return ConfigPaliGemma2_10B_448();\n    default:\n      HWY_ABORT(\"Model type %d unknown.\", static_cast<int>(model));\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "331d2ccc025e379f880a4eaa017b5f1db35ab24c", "file_path": "gemma/configs.cc", "function_name": "ConfigFromModel", "index": 1001, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorContractionOp<const Dimensions, const Derived, const OtherDerived>\n    contract(const OtherDerived& other, const Dimensions& dims) const {\n      return TensorContractionOp<const Dimensions, const Derived, const OtherDerived>(derived(), other.derived(), dims);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorContractionOp<const Dimensions, const Derived, const OtherDerived>\n    contract", "index": 1002, "label": 0}
{"input": "void test_cxx11_non_blocking_thread_pool()\n{\n  CALL_SUBTEST(test_create_destroy_empty_pool());\n  CALL_SUBTEST(test_parallelism());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_non_blocking_thread_pool.cpp", "function_name": "test_cxx11_non_blocking_thread_pool", "index": 1003, "label": 0}
{"input": "void BlendGramAlpha3(unsigned char *Src,unsigned char* Mask, unsigned char *Dest, int Width, int Height)\r\n{\r\n    printf(\"w %d h %d\\n\",Width,Height);\r\n\tunsigned char *LinePS, *LinePD,*LinePM;\r\n\tfor (int Y = 0; Y < Height; Y += 1)\r\n\t{\r\n\t\tLinePS = Src + Y * Width * 3;\r\n\t\tLinePM = Mask + Y * Width * 3;\r\n\t\tLinePD = Dest + Y * Width * 3;\r\n\t\tfor (int X = 0; X < Width; X += 1)\r\n\t\t{\r\n\t\t\t\n            \n            float alpha = *LinePM/255.0f;\r\n            float beta = 1.0f-alpha;\r\n            \n            \n            LinePD[0] =  CLAMPCOLOR(     LinePD[0]*alpha+LinePS[0]*beta);\r\n            \n            \n            LinePD[1] = CLAMPCOLOR(LinePD[1]*alpha+LinePS[1]*beta);\r\n            LinePD[2] = CLAMPCOLOR( LinePD[2]*alpha+LinePS[2]*beta);\r\n\t\t\tLinePS += 3;\r\n\t\t\tLinePM += 3;\r\n\t\t\tLinePD += 3;\r\n\t\t}\r\n\t}\r\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "BlendGramAlpha3", "index": 1004, "label": 0}
{"input": "void test_sparse_solvers()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1(sparse_solvers<double>(8, 8) );\n    int s = internal::random<int>(1,300);\n    CALL_SUBTEST_2(sparse_solvers<std::complex<double> >(s,s) );\n    CALL_SUBTEST_1(sparse_solvers<double>(s,s) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solvers.cpp", "function_name": "test_sparse_solvers", "index": 1005, "label": 0}
{"input": "inline cl_mem clCreateSubBuffer(cl_mem p0, cl_mem_flags p1, cl_buffer_create_type p2, const void* p3, cl_int* p4) { return clCreateSubBuffer_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateSubBuffer", "index": 1006, "label": 0}
{"input": "BlobError WriteAll(const Path& blob_filename, const ModelConfig* config) {\n    if (config) {\n      writer_.Add(MakeKey(BlobToc::kTocName), toc_.data(),\n                  toc_.size() * sizeof(toc_[0]));\n      config_buffer_ = config->Write();\n      writer_.Add(MakeKey(BlobToc::kConfigName), config_buffer_.data(),\n                  config_buffer_.size() * sizeof(config_buffer_[0]));\n    }\n    const BlobError err = writer_.WriteAll(pool_, blob_filename);\n    if (err != 0) {\n      fprintf(stderr, \"Failed to write blobs to %s (error %d)\\n\",\n              blob_filename.path.c_str(), err);\n    }\n    return err;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "compression/compress.h", "function_name": "blob_filename", "index": 1007, "label": 0}
{"input": "bool verify_eval_type(const XprType &, const ReferenceType&)\n{\n  typedef typename internal::nested_eval<XprType,N>::type EvalType;\n  return internal::is_same<typename internal::remove_all<EvalType>::type, typename internal::remove_all<ReferenceType>::type>::value;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/nesting_ops.cpp", "function_name": "verify_eval_type", "index": 1008, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vseteq4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vset4.u32.u32.eq %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        \n        \n        unsigned int c;\n        r = a ^ b;          \n        c = r | 0x80808080; \n        r = r ^ c;          \n        c = c - 0x01010101; \n        c = r & ~c;         \n        r = c >> 7;         \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vseteq4", "index": 1009, "label": 0}
{"input": "void JSVMHelper::ConvertToJSVMString(JSVM_Env env, const std::string& s,\n                                     JSVM_Value* value) {\n  JSVM_CALL(OH_JSVM_CreateStringUtf8(env, s.c_str(), s.size(), value));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_helper.cc", "function_name": "JSVMHelper::ConvertToJSVMString", "index": 1010, "label": 0}
{"input": "void UIBaseInput::SetupFont() {\n  float font_size = font_size_;\n  if (font_size == INPUT_UNDEFINED_FLOAT) {\n    font_size = 14.f;\n  }\n  NodeManager::Instance().SetAttributeWithNumberValue(\n      input_node_, NODE_FONT_SIZE, font_size);\n\n  int32_t font_style = font_style_;\n  if (font_style == INPUT_UNDEFINED_INT) {\n    font_style = 0;\n  }\n\n  NodeManager::Instance().SetAttributeWithNumberValue(\n      input_node_, NODE_FONT_STYLE, font_style);\n\n  int32_t font_weight = font_weight_;\n  if (font_weight == INPUT_UNDEFINED_INT) {\n    font_weight = ARKUI_FONT_WEIGHT_NORMAL;\n  }\n  NodeManager::Instance().SetAttributeWithNumberValue(\n      input_node_, NODE_FONT_WEIGHT, font_weight);\n\n  ArkUI_AttributeItem item = {.string = font_family_.c_str()};\n  NodeManager::Instance().SetAttribute(input_node_, NODE_FONT_FAMILY, &item);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SetupFont", "index": 1011, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline ParametrizedLine<_Scalar, _AmbientDim,_Options>::ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim,OtherOptions>& hyperplane)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(VectorType, 2)\n  direction() = hyperplane.normal().unitOrthogonal();\n  origin() = -hyperplane.normal()*hyperplane.offset();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/ParametrizedLine.h", "function_name": "ParametrizedLine<_Scalar, _AmbientDim,_Options>::ParametrizedLine", "index": 1012, "label": 0}
{"input": "void dostuff(const char* name, EigenSparseMatrix& sm1)\n{\n  int rows = sm1.rows();\n  int cols = sm1.cols();\n  sm1.setZero();\n  BenchTimer t;\n  SetterType* set1 = new SetterType(sm1);\n  t.reset(); t.start();\n  for (int k=0; k<nentries; ++k)\n    (*set1)(internal::random<int>(0,rows-1),internal::random<int>(0,cols-1)) += 1;\n  t.stop();\n  std::cout << \"std::map =>      \\t\" << t.value()-rtime\n            << \" nnz=\" << set1->nonZeros() << std::flush;\n\n  \n\n  t.reset(); t.start(); delete set1; t.stop();\n  std::cout << \"  back: \\t\" << t.value() << \"\\n\";\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/sparse_randomsetter.cpp", "function_name": "dostuff", "index": 1013, "label": 0}
{"input": "static HWY_NOINLINE HWY_MAYBE_UNUSED void ScalarRopeAndMulBy(\n    const float mul, float* HWY_RESTRICT x, size_t dim_qkv,\n    const float* HWY_RESTRICT inv_timescale, int pos) {\n  HWY_DASSERT(dim_qkv % 2 == 0);\n  const size_t half_dim_qkv = dim_qkv / 2;\n  for (size_t dim = 0; dim < half_dim_qkv; ++dim) {\n    const float theta = StaticCast<float>(pos) * inv_timescale[dim];\n    const float cos_val = cosf(theta);\n    const float sin_val = sinf(theta);\n    const float x0 = x[dim];\n    const float x1 = x[dim + half_dim_qkv];\n    x[dim] = mul * (x0 * cos_val - x1 * sin_val);\n    x[dim + half_dim_qkv] = mul * (x0 * sin_val + x1 * cos_val);\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "e997468496c5346350651b47c9b4a32d759b88cb", "file_path": "ops/ops_test.cc", "function_name": "ScalarRopeAndMulBy", "index": 1014, "label": 0}
{"input": "MBufCache::~MBufCache(){\n    m_lock->lock();\n    for(int k=0;k<vec_buf.size();k++){\n        JMat* mat = vec_buf[k];\n        delete mat;\n    }\n    vec_buf.clear();\n    m_lock->unlock();\n    delete m_lock;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wavcache.cpp", "function_name": "MBufCache::~MBufCache", "index": 1015, "label": 0}
{"input": "inline const mpreal rint_trunc (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(rint_trunc);     }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "rint_trunc", "index": 1016, "label": 0}
{"input": "inline void Client::set_ca_cert_path(const std::string &ca_cert_file_path,\n                                     const std::string &ca_cert_dir_path) {\n  cli_->set_ca_cert_path(ca_cert_file_path, ca_cert_dir_path);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_ca_cert_path", "index": 1017, "label": 0}
{"input": "inline TensorTypeAndShapeInfo Value::GetTensorTypeAndShapeInfo() const {\n  OrtTensorTypeAndShapeInfo* output;\n  ThrowOnError(GetApi().GetTensorTypeAndShape(p_, &output));\n  return TensorTypeAndShapeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetTensorTypeAndShapeInfo", "index": 1018, "label": 0}
{"input": "void RenderHelper::initAudioRenderer() {\n    audioRenderer->init();\n    hasNotifyFirstFrame = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/RenderHelper.cpp", "function_name": "RenderHelper::initAudioRenderer", "index": 1019, "label": 0}
{"input": "inline void SSLClient::shutdown_ssl(Socket &socket, bool shutdown_gracefully) {\n  shutdown_ssl_impl(socket, shutdown_gracefully);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::shutdown_ssl", "index": 1020, "label": 0}
{"input": "map<string,int> contributors_map_from_churn_output(const char *filename)\n{\n  map<string,int> contributors_map;\n\n  string line;\n  ifstream churn_out;\n  churn_out.open(filename, ios::in);\n  while(!getline(churn_out,line).eof())\n  {\n    \n    size_t first_star = line.find_first_of('*');\n    if(first_star != string::npos) line.erase(first_star);\n    \n    \n    size_t length = line.length();\n    while(length >= 1 && line[length-1] == ' ') line.erase(--length);\n\n    \n    size_t last_space = line.find_last_of(' ');\n    \n    \n    int number;\n    istringstream(line.substr(last_space+1)) >> number;\n\n    \n    line.erase(last_space);    \n    string name = contributor_name(line);\n    \n    map<string,int>::iterator it = contributors_map.find(name);\n    \n    if(it == contributors_map.end())\n      contributors_map.insert(pair<string,int>(name, number));\n    \n    else\n      it->second += number;\n  }\n  churn_out.close();\n\n  return contributors_map;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/scripts/eigen_gen_credits.cpp", "function_name": "contributors_map_from_churn_output", "index": 1021, "label": 0}
{"input": "static void reset_scratch(gapi::fluid::Buffer &scratch_buf)\n    {\n        scratch_helper<UseScratch, Impl, Ins...>::help_reset(scratch_buf);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/fluid/gfluidkernel.hpp", "function_name": "gapi::fluid::Buffer", "index": 1022, "label": 0}
{"input": "napi_value LynxTemplateRenderer::GetAllJsSource(napi_env env,\n                                                napi_callback_info info) {\n  napi_value js_this;\n  size_t argc = 0;\n  napi_value args[0];\n  napi_get_cb_info(env, info, &argc, args, &js_this, nullptr);\n  LynxTemplateRenderer* obj = nullptr;\n  napi_status status =\n      napi_unwrap(env, js_this, reinterpret_cast<void**>(&obj));\n  if (!CheckNapiUnwrapObject(status, obj, \"GetAllJsSource failed\")) {\n    return nullptr;\n  }\n  auto js_source = obj->shell_->GetAllJsSource();\n  return base::NapiUtil::CreateMap(env, js_source);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "bf08ca993555701fb038e34e3f3866cc3e97c99a", "file_path": "platform/harmony/lynx_harmony/src/main/cpp/lynx_template_renderer.cc", "function_name": "LynxTemplateRenderer::GetAllJsSource", "index": 1023, "label": 0}
{"input": "void test_rvalue_types()\n{\n  CALL_SUBTEST_1(rvalue_copyassign( MatrixXf::Random(50,50).eval() ));\n  CALL_SUBTEST_1(rvalue_copyassign( ArrayXXf::Random(50,50).eval() ));\n\n  CALL_SUBTEST_1(rvalue_copyassign( Matrix<float,1,Dynamic>::Random(50).eval() ));\n  CALL_SUBTEST_1(rvalue_copyassign( Array<float,1,Dynamic>::Random(50).eval() ));\n\n  CALL_SUBTEST_1(rvalue_copyassign( Matrix<float,Dynamic,1>::Random(50).eval() ));\n  CALL_SUBTEST_1(rvalue_copyassign( Array<float,Dynamic,1>::Random(50).eval() ));\n  \n  CALL_SUBTEST_2(rvalue_copyassign( Array<float,2,1>::Random().eval() ));\n  CALL_SUBTEST_2(rvalue_copyassign( Array<float,3,1>::Random().eval() ));\n  CALL_SUBTEST_2(rvalue_copyassign( Array<float,4,1>::Random().eval() ));\n\n  CALL_SUBTEST_2(rvalue_copyassign( Array<float,2,2>::Random().eval() ));\n  CALL_SUBTEST_2(rvalue_copyassign( Array<float,3,3>::Random().eval() ));\n  CALL_SUBTEST_2(rvalue_copyassign( Array<float,4,4>::Random().eval() ));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/rvalue_types.cpp", "function_name": "test_rvalue_types", "index": 1024, "label": 0}
{"input": "void LepusComponent::SetData(const Napi::Object& value) {\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, LEPUS_COMPONENT_SET_DATA);\n  if (tasm_ == nullptr || tasm_->destroyed()) {\n    LOGE(\"LepusComponent::SetData failed since tasm is invalid.\");\n    return;\n  }\n\n  \n  tasm_->GetDelegate().RequestVsync(\n      reinterpret_cast<uintptr_t>(this),\n      fml::MakeCopyable([this, strong{Napi::Persistent(NapiObject())}](\n                            int64_t frame_start, int64_t frame_end) {\n        if (!strong.Value().IsUndefined()) {\n          this->DoFrame(frame_start, frame_end);\n        }\n      }));\n\n  if (data_updated_.IsEmpty()) {\n    data_updated_ = ValueConverter::ConvertNapiValueToLepusValue(value);\n  } else {\n    lepus::Value::MergeValue(\n        data_updated_, ValueConverter::ConvertNapiValueToLepusValue(value));\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/renderer/worklet/lepus_component.cc", "function_name": "LepusComponent::SetData", "index": 1025, "label": 0}
{"input": "void Camera::rotateAroundTarget(const Quaternionf& q)\n{\n    Matrix4f mrot, mt, mtm;\n    \n    \n    updateViewMatrix();\n    Vector3f t = mViewMatrix * mTarget;\n\n    mViewMatrix = Translation3f(t)\n                * q\n                * Translation3f(-t)\n                * mViewMatrix;\n    \n    Quaternionf qa(mViewMatrix.linear());\n    qa = qa.conjugate();\n    setOrientation(qa);\n    setPosition(- (qa * mViewMatrix.translation()) );\n\n    mViewIsUptodate = true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::rotateAroundTarget", "index": 1026, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nstd::complex<double> RandomToTypeNormal<std::complex<double> >(uint64_t* state) {\n  return std::complex<double>(RandomToTypeNormal<double>(state),\n                              RandomToTypeNormal<double>(state));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "EIGEN_STRONG_INLINE\nstd::complex<double> RandomToTypeNormal<std::complex<double> >", "index": 1027, "label": 0}
{"input": "void MatrixPowerAtomic<MatrixType>::compute(ResultType& res) const\n{\n  using std::pow;\n  switch (m_A.rows()) {\n    case 0:\n      break;\n    case 1:\n      res(0,0) = pow(m_A(0,0), m_p);\n      break;\n    case 2:\n      compute2x2(res, m_p);\n      break;\n    default:\n      computeBig(res);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixPower.h", "function_name": "MatrixPowerAtomic<MatrixType>::compute", "index": 1028, "label": 0}
{"input": "inline const mpreal eint    (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(eint   );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "eint", "index": 1029, "label": 0}
{"input": "auto polar(const NdArray<dtype>& magnitude, const NdArray<dtype>& phaseAngle)\n    {\n        if (magnitude.shape() != phaseAngle.shape())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"Input magnitude and phaseAngle arrays must be the same shape\");\n        }\n\n        NdArray<decltype(nc::polar(dtype{ 0 }, dtype{ 0 }))> returnArray(magnitude.shape());\n        stl_algorithms::transform(\n            magnitude.cbegin(),\n            magnitude.cend(),\n            phaseAngle.begin(),\n            returnArray.begin(),\n            [](dtype mag, dtype angle) -> auto{ return nc::polar(mag, angle); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/polar.hpp", "function_name": "polar", "index": 1030, "label": 0}
{"input": "FullPivLU<MatrixType>::FullPivLU(EigenBase<InputType>& matrix)\n  : m_lu(matrix.derived()),\n    m_p(matrix.rows()),\n    m_q(matrix.cols()),\n    m_rowsTranspositions(matrix.rows()),\n    m_colsTranspositions(matrix.cols()),\n    m_isInitialized(false),\n    m_usePrescribedThreshold(false)\n{\n  computeInPlace();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/FullPivLU.h", "function_name": "FullPivLU<MatrixType>::FullPivLU", "index": 1031, "label": 0}
{"input": "explicit GCaptureSource(const std::string &path,\n                            const std::map<int, double> &properties = {})\n        : cap(path) { prep(properties); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/cap.hpp", "function_name": "GCaptureSource", "index": 1032, "label": 0}
{"input": "static void test_additions()\n{\n  Tensor<std::string, 1> data1(3);\n  Tensor<std::string, 1> data2(3);\n  for (int i = 0; i < 3; ++i) {\n    data1(i) = \"abc\";\n    std::ostringstream s1;\n    s1 << i;\n    data2(i) = s1.str();\n  }\n\n  Tensor<std::string, 1> sum = data1 + data2;\n  for (int i = 0; i < 3; ++i) {\n    std::ostringstream concat;\n    concat << \"abc\" << i;\n    std::string expected = concat.str();\n    VERIFY_IS_EQUAL(sum(i), expected);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_of_strings.cpp", "function_name": "test_additions", "index": 1033, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nEIGEN_STRONG_INLINE const ArgReturnType\narg() const\n{\n  return ArgReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "arg", "index": 1034, "label": 0}
{"input": "inline double pnr(uint32 n, uint32 r)\n    {\n        if (r > n)\n        {\n            return 0.;\n        }\n        else if (r == n)\n        {\n            return factorial(n);\n        }\n\n        double combinations = 1.;\n\n#ifndef NUMCPP_NO_USE_BOOST\n        if (n <= boost::math::max_factorial<double>::value)\n        {\n            const double nFactorial      = factorial(n);\n            const double nMinusRFactoral = factorial(n - r);\n\n            combinations = nFactorial / nMinusRFactoral;\n        }\n        else\n        {\n#endif\n            const uint32 lower = n - r + 1;\n            combinations       = static_cast<double>(lower);\n            for (uint32 i = lower + 1; i <= n; ++i)\n            {\n                combinations *= static_cast<double>(i);\n            }\n#ifndef NUMCPP_NO_USE_BOOST\n        }\n#endif\n\n        return combinations;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/pnr.hpp", "function_name": "pnr", "index": 1035, "label": 0}
{"input": "~CholmodBase()\n    {\n      if(m_cholmodFactor)\n        cholmod_free_factor(&m_cholmodFactor, &m_cholmod);\n      cholmod_finish(&m_cholmod);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "~CholmodBase", "index": 1036, "label": 0}
{"input": "int NcnnModel::doRunModel(void** arrin,void** arrout,void* stream,AiCfg* pcfg){\n    ncnn::Extractor ex = net.create_extractor();\n    AiCfg* cfg = pcfg==nullptr?m_cfg:pcfg;\n    int incnt = cfg->size_inputs.size();\n    int outcnt = cfg->size_outputs.size();\n    ncnn::Mat inmat[incnt];\n    for(int k=0;k<incnt;k++){\n        std::string name = cfg->name_inputs[k];\n        JMat* mat = (JMat*)arrin[k];\n        ncnn::Mat in_pack =mat->packingmat();\n        ex.input(name.c_str(), in_pack);\n    }\n    for(int k=0;k<outcnt;k++){\n        std::string name = cfg->name_outputs[k];\n        JMat* mat = (JMat*)arrout[k];\n        ncnn::Mat output;\n        ex.extract(name.c_str(), output);\n        ncnn::Mat in_park;\n        ncnn::convert_packing(output,in_park,3);\n        int size =  mat->width()*mat->height()*3*sizeof(float);\n        memcpy((uint8_t*)mat->data(),in_park,size);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/aimodel.cpp", "function_name": "NcnnModel::doRunModel", "index": 1037, "label": 0}
{"input": "inline bool mmap::open(const char *path) {\n  close();\n\n#if defined(_WIN32)\n  hFile_ = ::CreateFileA(path, GENERIC_READ, FILE_SHARE_READ, NULL,\n                         OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n\n  if (hFile_ == INVALID_HANDLE_VALUE) { return false; }\n\n  size_ = ::GetFileSize(hFile_, NULL);\n\n  hMapping_ = ::CreateFileMapping(hFile_, NULL, PAGE_READONLY, 0, 0, NULL);\n\n  if (hMapping_ == NULL) {\n    close();\n    return false;\n  }\n\n  addr_ = ::MapViewOfFile(hMapping_, FILE_MAP_READ, 0, 0, 0);\n#else\n  fd_ = ::open(path, O_RDONLY);\n  if (fd_ == -1) { return false; }\n\n  struct stat sb;\n  if (fstat(fd_, &sb) == -1) {\n    close();\n    return false;\n  }\n  size_ = static_cast<size_t>(sb.st_size);\n\n  addr_ = ::mmap(NULL, size_, PROT_READ, MAP_PRIVATE, fd_, 0);\n#endif\n\n  if (addr_ == nullptr) {\n    close();\n    return false;\n  }\n\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "mmap::open", "index": 1038, "label": 0}
{"input": "void MatrixBase<Derived>::makeHouseholder(\n  EssentialPart& essential,\n  Scalar& tau,\n  RealScalar& beta) const\n{\n  using std::sqrt;\n  using numext::conj;\n  \n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(EssentialPart)\n  VectorBlock<const Derived, EssentialPart::SizeAtCompileTime> tail(derived(), 1, size()-1);\n  \n  RealScalar tailSqNorm = size()==1 ? RealScalar(0) : tail.squaredNorm();\n  Scalar c0 = coeff(0);\n  const RealScalar tol = (std::numeric_limits<RealScalar>::min)();\n\n  if(tailSqNorm <= tol && numext::abs2(numext::imag(c0))<=tol)\n  {\n    tau = RealScalar(0);\n    beta = numext::real(c0);\n    essential.setZero();\n  }\n  else\n  {\n    beta = sqrt(numext::abs2(c0) + tailSqNorm);\n    if (numext::real(c0)>=RealScalar(0))\n      beta = -beta;\n    essential = tail / (c0 - beta);\n    tau = conj((beta - c0) / beta);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Householder/Householder.h", "function_name": "MatrixBase<Derived>::makeHouseholder", "index": 1039, "label": 0}
{"input": "inline int _v_cvtsi256_si32(const __m256i& a)\n{ return _mm_cvtsi128_si32(_mm256_castsi256_si128(a)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx.hpp", "function_name": "_v_cvtsi256_si32", "index": 1040, "label": 0}
{"input": "NdArray<uint32> nanargmin(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = DtypeInfo<dtype>::max();\n                                     };\n                                 });\n\n        return argmin(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nanargmin.hpp", "function_name": "nanargmin", "index": 1041, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline const Product<Transform<Scalar,Dim,Mode,Options>, Homogeneous >\n    operator* (const Transform<Scalar,Dim,Mode,Options>& lhs, const Homogeneous& rhs)\n    {\n      eigen_assert(int(Direction)==Vertical);\n      return Product<Transform<Scalar,Dim,Mode,Options>, Homogeneous>(lhs,rhs);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "Product<Transform<Scalar,Dim,Mode,Options>, Homogeneous >\n    operator*", "index": 1042, "label": 0}
{"input": "inline std::string KernelInfoImpl<T>::GetOutputName(size_t index) const {\n  size_t size = 0;\n\n  \n  Ort::ThrowOnError(GetApi().KernelInfo_GetOutputName(this->p_, index, nullptr, &size));\n\n  std::string out;\n  out.resize(size);\n  Ort::ThrowOnError(GetApi().KernelInfo_GetOutputName(this->p_, index, &out[0], &size));\n  out.resize(size - 1);  \n\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::GetOutputName", "index": 1043, "label": 0}
{"input": "SPQR_QProduct(const SPQRType& spqr, const Derived& other, bool transpose) : m_spqr(spqr),m_other(other),m_transpose(transpose) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h", "function_name": "SPQR_QProduct", "index": 1044, "label": 0}
{"input": "inline Logger::Logger(const OrtLogger* logger) : logger_(logger) {\n  Ort::ThrowOnError(GetApi().Logger_GetLoggingSeverityLevel(this->logger_, &this->cached_severity_level_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Logger::Logger", "index": 1045, "label": 0}
{"input": "explicit UpperBidiagonalization(const MatrixType& matrix)\n      : m_householder(matrix.rows(), matrix.cols()),\n        m_bidiagonal(matrix.cols(), matrix.cols()),\n        m_isInitialized(false)\n    {\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/UpperBidiagonalization.h", "function_name": "UpperBidiagonalization", "index": 1046, "label": 0}
{"input": "inline bool Server::remove_mount_point(const std::string &mount_point) {\n  for (auto it = base_dirs_.begin(); it != base_dirs_.end(); ++it) {\n    if (it->mount_point == mount_point) {\n      base_dirs_.erase(it);\n      return true;\n    }\n  }\n  return false;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::remove_mount_point", "index": 1047, "label": 0}
{"input": "NCNN_FORCEINLINE Mat VkImageMat::shape() const\n{\n    if (dims == 1)\n        return Mat(w * elempack, (void*)0);\n    if (dims == 2)\n        return Mat(w, h * elempack, (void*)0);\n    if (dims == 3)\n        return Mat(w, h, c * elempack, (void*)0);\n    if (dims == 4)\n        return Mat(w, h, d, c * elempack, (void*)0);\n\n    return Mat();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "VkImageMat::shape", "index": 1048, "label": 0}
{"input": "bool kv_pair_less(const std::pair<T1,T2>& x, const std::pair<T1,T2>& y){\n    return x.first < y.first;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/sparse_setter.cpp", "function_name": "kv_pair_less", "index": 1049, "label": 0}
{"input": "NdArray<bool> operator||(dtype lhs, const NdArray<dtype>& rhs)\n    {\n        return rhs || lhs;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayOperators.hpp", "function_name": "operator||", "index": 1050, "label": 0}
{"input": "static bool checkNicType(std::string_view nic, Address::Type type) {\n  switch (type) {\n    case Address::TCP:\n      return nic.starts_with(\"en\") || nic.starts_with(\"eth\") || nic.starts_with(\"bond\");\n    case Address::IPoIB:\n      return nic.starts_with(\"ib\");\n    case Address::RDMA:\n      return nic.starts_with(\"en\") || nic.starts_with(\"eth\") || nic.starts_with(\"bond\");\n    case Address::LOCAL:\n      return nic.starts_with(\"lo\");\n    default:\n      return false;\n  }\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "80233499f9e0ad992a130c7b6280d98cb45487df", "file_path": "src/common/net/Listener.cc", "function_name": "checkNicType", "index": 1051, "label": 0}
{"input": "uint64_t AudioRenderer::render(uint64_t nowMs) {\n    MediaData *mediaData;\n    if (frameSource->readAudFrame(&mediaData) > 0) {\n        audioTrack->write(mediaData->data, mediaData->size);\n        frameSource->popAudFrame(mediaData);\n        return mediaData->pts;\n    } else {\n        std::this_thread::sleep_for(std::chrono::milliseconds(5));\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/AudioRenderer.cpp", "function_name": "AudioRenderer::render", "index": 1052, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void convolvePacket(Index firstIndex, Index firstKernel, int DimIndex, Packet& accum) const {\n    for (int j = 0; j < m_kernelImpl.dimensions()[DimIndex]; ++j) {\n      const Index input = firstIndex + j * m_indexStride[DimIndex];\n      const Index kernel = firstKernel + j * m_kernelStride[DimIndex];\n      if (DimIndex > 0) {\n        convolvePacket(input, kernel, DimIndex-1, accum);\n      } else {\n        accum = internal::pmadd<Packet>(m_inputImpl.template packet<Unaligned>(input), internal::pset1<Packet>(m_kernel[kernel]), accum);\n      }\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorConvolution.h", "function_name": "convolvePacket", "index": 1053, "label": 0}
{"input": "void buildProblem(std::vector<T>& coefficients, Eigen::VectorXd& b, int n)\n{\n  b.setZero();\n  Eigen::ArrayXd boundary = Eigen::ArrayXd::LinSpaced(n, 0,M_PI).sin().pow(2);\n  for(int j=0; j<n; ++j)\n  {\n    for(int i=0; i<n; ++i)\n    {\n      int id = i+j*n;\n      insertCoefficient(id, i-1,j, -1, coefficients, b, boundary);\n      insertCoefficient(id, i+1,j, -1, coefficients, b, boundary);\n      insertCoefficient(id, i,j-1, -1, coefficients, b, boundary);\n      insertCoefficient(id, i,j+1, -1, coefficients, b, boundary);\n      insertCoefficient(id, i,j,    4, coefficients, b, boundary);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/special_examples/Tutorial_sparse_example_details.cpp", "function_name": "buildProblem", "index": 1054, "label": 0}
{"input": "void testMatrix(const MatrixType& A)\n{\n  testMatrixExponential(A);\n  testMatrixLogarithm(A);\n  testHyperbolicFunctions(A);\n  testGonioFunctions(A);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_function.cpp", "function_name": "testMatrix", "index": 1055, "label": 0}
{"input": "explicit PardisoLLT(const MatrixType& matrix)\n      : Base()\n    {\n      pardisoInit(Base::ScalarIsComplex ? 4 : 2);\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PardisoSupport/PardisoSupport.h", "function_name": "PardisoLLT", "index": 1056, "label": 0}
{"input": "inline TypeInfo ConstValueImpl<T>::GetTypeInfo() const {\n  OrtTypeInfo* output;\n  ThrowOnError(GetApi().GetTypeInfo(this->p_, &output));\n  return TypeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetTypeInfo", "index": 1057, "label": 0}
{"input": "inline bool test_isApprox(const Type1& a, const Type2& b, typename Type1::Scalar* = 0) \n{\n  return a.isApprox(b, test_precision<typename Type1::Scalar>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "test_isApprox", "index": 1058, "label": 0}
{"input": "typename std::enable_if<std::is_base_of<static_indexed_visitor<ReturnType, typename std::decay<Visitor>::type>,\n                                            typename std::decay<Visitor>::type>::value, ReturnType>::type\n    invoke_class_visitor(Visitor& visitor, Value&& v,  VisitorArgs&&...args)\n    {\n        return static_cast<static_indexed_visitor<ReturnType, typename std::decay<Visitor>::type>&>(visitor).operator() (CurIndex, std::forward<Value>(v), std::forward<VisitorArgs>(args)... );\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "invoke_class_visitor", "index": 1059, "label": 0}
{"input": "MatrixMarketIterator(const std::string &folder)\n      : m_sym(0), m_isvalid(false), m_matIsLoaded(false), m_hasRhs(false), m_hasrefX(false), m_folder(folder)\n    {\n      m_folder_id = opendir(folder.c_str());\n      if(m_folder_id)\n        Getnextvalidmatrix();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MatrixMarketIterator.h", "function_name": "MatrixMarketIterator", "index": 1060, "label": 0}
{"input": "__host__ __device__ __forceinline__ binder1st<Op> bind1st(const Op& op, const T& x)\n    {\n        return binder1st<Op>(op, typename Op::first_argument_type(x));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/functional.hpp", "function_name": "__device__ __forceinline__ binder1st<Op> bind1st", "index": 1061, "label": 0}
{"input": "optional<T>::optional(optional&& rhs) noexcept\n        : m_holder(std::move(rhs.m_holder))\n    {\n        rhs.reset();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/optional.hpp", "function_name": "optional<T>::optional", "index": 1062, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline RotationMatrixType operator*(const EigenBase<OtherDerived>& l, const Derived& r)\n    { return l.derived() * r.toRotationMatrix(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/RotationBase.h", "function_name": "RotationMatrixType operator*", "index": 1063, "label": 0}
{"input": "inline SkylineMatrix(const SkylineMatrix & other)\n    : Base(), m_outerSize(0), m_innerSize(0), m_colStartIndex(0), m_rowStartIndex(0) {\n        *this = other.derived();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "SkylineMatrix", "index": 1064, "label": 0}
{"input": "void RangeChecks(const ModelConfig& weights_config,\n                 size_t& max_generated_tokens, const size_t prompt_size) {\n  if (!weights_config.use_local_attention) {\n    if (max_generated_tokens > weights_config.seq_len) {\n      fprintf(stderr,\n              \"WARNING: max_generated_tokens %zu > kSeqLen %u, truncating.\\n\",\n              max_generated_tokens, weights_config.seq_len);\n      max_generated_tokens = weights_config.seq_len;\n    }\n  }\n  HWY_ASSERT(prompt_size > 0);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/gemma.cc", "function_name": "RangeChecks", "index": 1065, "label": 0}
{"input": "IcoSphere::IcoSphere(unsigned int levels)\n{\n  \n  for (int i = 0; i < 12; i++)\n    mVertices.push_back(Map<Vector3f>(vdata[i]));\n  mIndices.push_back(new std::vector<int>);\n  std::vector<int>& indices = *mIndices.back();\n  for (int i = 0; i < 20; i++)\n  {\n    for (int k = 0; k < 3; k++)\n      indices.push_back(tindices[i][k]);\n  }\n  mListIds.push_back(0);\n\n  while(mIndices.size()<levels)\n    _subdivide();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/icosphere.cpp", "function_name": "IcoSphere::IcoSphere", "index": 1066, "label": 0}
{"input": "void GpuHelper::multMatrix(const Matrix<Scalar,4,4, _Flags, 4,4>& mat, GLenum matrixTarget)\n{\n    setMatrixTarget(matrixTarget);\n    GlMatrixHelper<_Flags&Eigen::RowMajorBit, _Flags>::multMatrix(mat);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/gpuhelper.h", "function_name": "GpuHelper::multMatrix", "index": 1067, "label": 0}
{"input": "void Otto::UpDown(float steps, int period, int height) {\n    \n    \n    \n    \n    int A[SERVO_COUNT] = {0, 0, height, height, 0, 0};\n    int O[SERVO_COUNT] = {0, 0, height, -height, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    double phase_diff[SERVO_COUNT] = {0, 0, DEG2RAD(-90), DEG2RAD(90), 0, 0};\n\n    \n    Execute(A, O, period, phase_diff, steps);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::UpDown", "index": 1068, "label": 0}
{"input": "inline void Server::stop() {\n  if (is_running_) {\n    assert(svr_sock_ != INVALID_SOCKET);\n    std::atomic<socket_t> sock(svr_sock_.exchange(INVALID_SOCKET));\n    detail::shutdown_socket(sock);\n    detail::close_socket(sock);\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::stop", "index": 1069, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ColsBlockXpr middleCols(Index startCol, Index numCols)\n{\n  return ColsBlockXpr(derived(), 0, startCol, rows(), numCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ColsBlockXpr middleCols", "index": 1070, "label": 0}
{"input": "float OffscreenCanvasRenderingContext2D::shadow_blur() const\n{\n    return drawing_state().shadow_blur;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::shadow_blur", "index": 1071, "label": 0}
{"input": "napi_value DebugRouterWrapper::RemoveGlobalHandler(napi_env env,\n                                                   napi_callback_info info) {\n  napi_value js_this;\n  size_t argc = 1;\n  napi_value argv[1];\n  napi_get_cb_info(env, info, &argc, argv, &js_this, nullptr);\n  if (global_handlers_.find(argv[0]) != global_handlers_.end()) {\n    auto globalHandler = global_handlers_[argv[0]];\n    debugrouter::common::DebugRouter::GetInstance().RemoveGlobalHandler(\n        globalHandler.get());\n    global_handlers_.erase(argv[0]);\n  }\n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/debug_router_wrapper.cc", "function_name": "DebugRouterWrapper::RemoveGlobalHandler", "index": 1072, "label": 0}
{"input": "CV_INLINE int cvIsInf( float value )\n{\n#if defined CV_INLINE_ISINF_FLT\n    CV_INLINE_ISINF_FLT(value);\n#else\n    Cv32suf ieee754;\n    ieee754.f = value;\n    return (ieee754.u & 0x7fffffff) == 0x7f800000;\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/fast_math.hpp", "function_name": "cvIsInf", "index": 1073, "label": 0}
{"input": "EIGEN_DONT_INLINE Q nlerp(const Q& a, const Q& b, typename Q::Scalar t)\n{\n  return Q((a.coeffs() * (1.0-t) + b.coeffs() * t).normalized());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/quat_slerp.cpp", "function_name": "nlerp", "index": 1074, "label": 0}
{"input": "static inline const char* ToString(Tristate t) {\n  switch (t) {\n    case Tristate::kFalse:\n      return \"false\";\n    case Tristate::kTrue:\n      return \"true\";\n    case Tristate::kDefault:\n      return \"default\";\n    default:\n      HWY_ABORT(\"Bug: unknown Tristate %d\", static_cast<int>(t));\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "7b77909427eb4acc96b319a31c62526ea9591965", "file_path": "util/basics.h", "function_name": "unknown_function", "index": 1075, "label": 0}
{"input": "double atomicMax(double* address, double val)\n            {\n            #if __CUDA_ARCH__ >= 130\n                unsigned long long int* address_as_ull = (unsigned long long int*) address;\n                unsigned long long int old = *address_as_ull, assumed;\n                do {\n                    assumed = old;\n                    old = ::atomicCAS(address_as_ull, assumed,\n                        __double_as_longlong(::fmax(val, __longlong_as_double(assumed))));\n                } while (assumed != old);\n                return __longlong_as_double(old);\n            #else\n                CV_UNUSED(address);\n                CV_UNUSED(val);\n                return 0.0;\n            #endif\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/emulation.hpp", "function_name": "val", "index": 1076, "label": 0}
{"input": "scalar_pow_op() {\n    typedef Scalar LhsScalar;\n    typedef Exponent RhsScalar;\n    EIGEN_SCALAR_BINARY_OP_PLUGIN\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/functors/BinaryFunctors.h", "function_name": "scalar_pow_op", "index": 1077, "label": 0}
{"input": "std::streamsize xsputn(const char *s, std::streamsize n) {\n      sink_.write(s, static_cast<size_t>(n));\n      return n;\n    }", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "std::streamsize", "index": 1078, "label": 0}
{"input": "void ColPivHouseholderQR<_MatrixType>::_solve_impl(const RhsType &rhs, DstType &dst) const\n{\n  eigen_assert(rhs.rows() == rows());\n\n  const Index nonzero_pivots = nonzeroPivots();\n\n  if(nonzero_pivots == 0)\n  {\n    dst.setZero();\n    return;\n  }\n\n  typename RhsType::PlainObject c(rhs);\n\n  \n  c.applyOnTheLeft(householderSequence(m_qr, m_hCoeffs)\n                    .setLength(nonzero_pivots)\n                    .transpose()\n    );\n\n  m_qr.topLeftCorner(nonzero_pivots, nonzero_pivots)\n      .template triangularView<Upper>()\n      .solveInPlace(c.topRows(nonzero_pivots));\n\n  for(Index i = 0; i < nonzero_pivots; ++i) dst.row(m_colsPermutation.indices().coeff(i)) = c.row(i);\n  for(Index i = nonzero_pivots; i < cols(); ++i) dst.row(m_colsPermutation.indices().coeff(i)).setZero();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/ColPivHouseholderQR.h", "function_name": "ColPivHouseholderQR<_MatrixType>::_solve_impl", "index": 1079, "label": 0}
{"input": "NdArray<double> geomspace(dtype start, dtype stop, uint32 num = 50, bool endPoint = true)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        if (utils::essentiallyEqual(start, dtype{ 0 }))\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"Geometric sequence cannot include zero\");\n        }\n\n        if (num == 1)\n        {\n            return { static_cast<double>(start) };\n        }\n        else if (num == 2 && endPoint)\n        {\n            return { static_cast<double>(start), static_cast<double>(stop) };\n        }\n\n        const auto base     = nth_root(stop / start, num - 1);\n        const auto logStart = logb(start, base);\n        const auto logStop  = logb(stop, base);\n        return logspace(logStart, logStop, num, endPoint, base);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/geomspace.hpp", "function_name": "geomspace", "index": 1080, "label": 0}
{"input": "MsgcbJni::~MsgcbJni() {\n    bool attach = JniHelper::attachCurrentThread();\n    JNIEnv *env = JniHelper::getJNIEnv();\n    if (msgcbJObj != nullptr && env) {\n        env->DeleteGlobalRef(msgcbJObj);\n        msgcbJObj = nullptr;\n        onMessageCallbackMethod = nullptr;\n    }\n    if (attach) {\n        JniHelper::detachCurrentThread();\n    }\n    LOGE(TAG, \"MsgcbJni destroyed\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/MsgcbJni.cpp", "function_name": "MsgcbJni::~MsgcbJni", "index": 1081, "label": 0}
{"input": "piper::Object JSVMRuntime::createObject(std::shared_ptr<piper::HostObject> ho) {\n  return detail::JSVMHostObjectProxy::createObject(this, getEnv(), ho);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createObject", "index": 1082, "label": 0}
{"input": "void test_first_aligned_helper(Scalar *array, int size)\n{\n  const int packet_size = sizeof(Scalar) * internal::packet_traits<Scalar>::size;\n  VERIFY(((size_t(array) + sizeof(Scalar) * internal::first_default_aligned(array, size)) % packet_size) == 0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/first_aligned.cpp", "function_name": "test_first_aligned_helper", "index": 1083, "label": 0}
{"input": "int gjdigit_processmd5(gjdigit_t* dg,int enc,const char* infn,const char* outfn){\n    \n    std::string s_in(infn);\n    std::string s_out(outfn);\n    int rst = mainenc(enc,(char*)s_in.c_str(),(char*)s_out.c_str());\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_processmd5", "index": 1084, "label": 0}
{"input": "inline static bool IsLayoutWanted(CSSPropertyID id) {\n    return ConsumptionTest(id) == LAYOUT_WANTED;\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "bbb13dd1780e24917d1b1b68322069d6f04cd233", "file_path": "core/style/layout_property.h", "function_name": "id", "index": 1085, "label": 0}
{"input": "bool VitConfig::TestEqual(const VitConfig& other, bool partial,\n                          bool debug) const {\n  bool result = true;\n  TEST_EQUAL(model_dim, other.model_dim);\n  TEST_EQUAL(seq_len, other.seq_len);\n  if (!partial) {\n    TEST_EQUAL(num_scales, other.num_scales);\n  }\n  TEST_EQUAL(patch_width, other.patch_width);\n  TEST_EQUAL(image_size, other.image_size);\n  RETURN_IF_NOT_EQUAL(layer_configs.size(), other.layer_configs.size());\n  for (size_t i = 0; i < layer_configs.size(); ++i) {\n    result &=\n        layer_configs[i].TestEqual(other.layer_configs[i], partial, debug);\n  }\n  return result;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "b93231a47d67e8271d0e68410319e362b42b54e4", "file_path": "gemma/configs.cc", "function_name": "VitConfig::TestEqual", "index": 1086, "label": 0}
{"input": "inline const mpreal ceil(const mpreal& v)\n{\n    mpreal x(v);\n    mpfr_ceil(x.mp,v.mp);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "ceil", "index": 1087, "label": 0}
{"input": "Scrfd::Scrfd(const char* modeldir,const char* modelid,int cols,int rows){\n    scrfd.clear();\n    ncnn::set_cpu_powersave(2);\n    ncnn::set_omp_num_threads(ncnn::get_big_cpu_count());\n    scrfd.opt = ncnn::Option();\n    \n    scrfd.opt.num_threads = ncnn::get_big_cpu_count();\n    char filepath[1024];\n    sprintf(filepath,\"%s/%s.param\",modeldir,modelid);\n    scrfd.load_param(filepath);\n    sprintf(filepath,\"%s/%s.bin\",modeldir,modelid);\n    scrfd.load_model(filepath);\n    \n    \n    \n    \n    recal(cols,rows);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/scrfd.cpp", "function_name": "Scrfd::Scrfd", "index": 1088, "label": 0}
{"input": "inline void GpuHelper::setMatrixTarget(GLenum matrixTarget)\n{\n    if (matrixTarget != mCurrentMatrixTarget)\n        glMatrixMode(mCurrentMatrixTarget=matrixTarget);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/gpuhelper.h", "function_name": "GpuHelper::setMatrixTarget", "index": 1089, "label": 0}
{"input": "void bug_942()\n{\n  typedef Matrix<Scalar, Dynamic, 1>     Vector;\n  typedef SparseMatrix<Scalar, ColMajor> ColSpMat;\n  typedef SparseMatrix<Scalar, RowMajor> RowSpMat;\n  ColSpMat cmA(1,1);\n  cmA.insert(0,0) = 1;\n\n  RowSpMat rmA(1,1);\n  rmA.insert(0,0) = 1;\n\n  Vector d(1);\n  d[0] = 2;\n  \n  double res = 2;\n  \n  VERIFY_IS_APPROX( ( cmA*d.asDiagonal() ).eval().coeff(0,0), res );\n  VERIFY_IS_APPROX( ( d.asDiagonal()*rmA ).eval().coeff(0,0), res );\n  VERIFY_IS_APPROX( ( rmA*d.asDiagonal() ).eval().coeff(0,0), res );\n  VERIFY_IS_APPROX( ( d.asDiagonal()*cmA ).eval().coeff(0,0), res );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_product.cpp", "function_name": "bug_942", "index": 1090, "label": 0}
{"input": "inline Quat<T> Quat<T>::atan() const\n{\n    Quat<T> v(0, x, y, z);\n    T vNorm = v.norm();\n    T k = vNorm < CV_QUAT_EPS ? 1 : vNorm;\n    return -v / k * (*this * v / k).atanh();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::atan", "index": 1091, "label": 0}
{"input": "CholmodSimplicialLDLT(const MatrixType& matrix) : Base()\n    {\n      init();\n      this->compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "CholmodSimplicialLDLT", "index": 1092, "label": 0}
{"input": "inline const typename DenseBase<Derived>::RandomReturnType\nDenseBase<Derived>::Random()\n{\n  return NullaryExpr(RowsAtCompileTime, ColsAtCompileTime, internal::scalar_random_op<Scalar>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Random.h", "function_name": "DenseBase<Derived>::Random", "index": 1093, "label": 0}
{"input": "NdArray<dtype> copySign(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        if (inArray1.shape() != inArray2.shape())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"input arrays are not consistant.\");\n        }\n\n        NdArray<dtype> returnArray(inArray1.shape());\n        stl_algorithms::transform(inArray1.cbegin(),\n                                  inArray1.cend(),\n                                  inArray2.cbegin(),\n                                  returnArray.begin(),\n                                  [](dtype inValue1, dtype inValue2) -> dtype\n                                  { return inValue2 < dtype{ 0 } ? std::abs(inValue1) * -1 : std::abs(inValue1); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/copySign.hpp", "function_name": "copySign", "index": 1094, "label": 0}
{"input": "EIGEN_DEVICE_FUNC constexpr inline auto array_sum(const array<T, N>& arr) -> decltype(array_reduce<sum_op, T, N>(arr, static_cast<T>(0)))\n{\n  return array_reduce<sum_op, T, N>(arr, static_cast<T>(0));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/CXX11Meta.h", "function_name": "array_sum", "index": 1095, "label": 0}
{"input": "inline v_float64x2 v_absdiff(const v_float64x2& a, const v_float64x2& b)\n{\n    v128_t absmask_vec = wasm_u64x2_shr(wasm_i32x4_splat(-1), 1);\n    return v_float64x2(wasm_v128_and(wasm_f64x2_sub(a.val, b.val), absmask_vec));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_absdiff", "index": 1096, "label": 0}
{"input": "EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL\n\n\n\ntemplate<int CRows, int CCols>\nEIGEN_DEVICE_FUNC\ninline typename FixedBlockXpr<CRows,CCols>::Type bottomLeftCorner()\n{\n  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, 0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "template<int CRows, int CCols>\nEIGEN_DEVICE_FUNC\ninline typename FixedBlockXpr<CRows,CCols>::Type bottomLeftCorner", "index": 1097, "label": 0}
{"input": "Bisection(const double epsilon, const uint32 maxNumIterations, std::function<double(double)> f) noexcept :\n            Iteration(epsilon, maxNumIterations),\n            f_(std::move(f))\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Roots/Bisection.hpp", "function_name": "Bisection", "index": 1098, "label": 0}
{"input": "static __device__ void loopShfl(KR key, VR val, Cmp cmp, unsigned int N)\n            {\n                mergeShfl(key, val, cmp, I, N);\n                Unroll<I / 2, KP, KR, VP, VR, Cmp>::loopShfl(key, val, cmp, N);\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/reduce_key_val.hpp", "function_name": "key", "index": 1099, "label": 0}
{"input": "explicit __host__ __device__ __forceinline__ CubicFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)\n        : src(src_)\n        {\n            CV_UNUSED(fx);\n            CV_UNUSED(fy);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/filters.hpp", "function_name": "CubicFilter", "index": 1100, "label": 0}
{"input": "inline\nMatx<_Tp, n, m> Matx<_Tp, m, n>::t() const\n{\n    return Matx<_Tp, n, m>(*this, Matx_TOp());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp, m, n>::t", "index": 1101, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorConvolutionOp<const Dimensions, const Derived, const KernelDerived>\n    convolve(const KernelDerived& kernel, const Dimensions& dims) const {\n      return TensorConvolutionOp<const Dimensions, const Derived, const KernelDerived>(derived(), kernel.derived(), dims);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorConvolutionOp<const Dimensions, const Derived, const KernelDerived>\n    convolve", "index": 1102, "label": 0}
{"input": "inline const mpreal operator/(const double  b, const mpreal& a)\n{\n#if (MPFR_VERSION >= MPFR_VERSION_NUM(2,4,0))\n    mpreal x(0, mpfr_get_prec(a.mpfr_srcptr()));\n    mpfr_d_div(x.mpfr_ptr(), b, a.mpfr_srcptr(), mpreal::get_default_rnd());\n    return x;\n#else\n    mpreal x(0, mpfr_get_prec(a.mpfr_ptr()));\n    x /= a;\n    return x;\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "operator/", "index": 1103, "label": 0}
{"input": "CV_WRAP static inline\nString dumpDouble(double argument)\n{\n    return cv::format(\"Double: %.2f\", argument);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpDouble", "index": 1104, "label": 0}
{"input": "inline bool read_headers(Stream &strm, Headers &headers) {\n  const auto bufsiz = 2048;\n  char buf[bufsiz];\n  stream_line_reader line_reader(strm, buf, bufsiz);\n\n  for (;;) {\n    if (!line_reader.getline()) { return false; }\n\n    \n    auto line_terminator_len = 2;\n    if (line_reader.end_with_crlf()) {\n      \n      if (line_reader.size() == 2) { break; }\n#ifdef CPPHTTPLIB_ALLOW_LF_AS_LINE_TERMINATOR\n    } else {\n      \n      if (line_reader.size() == 1) { break; }\n      line_terminator_len = 1;\n    }\n#else\n    } else {\n      continue; \n    }", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "read_headers", "index": 1105, "label": 0}
{"input": "inline const mpreal log10 (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(log10);    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "log10", "index": 1106, "label": 0}
{"input": "inline size_t Session::GetInputCount() const {\n  size_t out;\n  ThrowOnError(GetApi().SessionGetInputCount(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Session::GetInputCount", "index": 1107, "label": 0}
{"input": "static void test_create_destroy_empty_pool()\n{\n  \n  \n  for (int i = 0; i < 16; ++i) {\n    NonBlockingThreadPool tp(i);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_non_blocking_thread_pool.cpp", "function_name": "test_create_destroy_empty_pool", "index": 1108, "label": 0}
{"input": "EIGEN_DEVICE_FUNC constexpr inline auto array_reduce(const array<T, N>& arr, T identity) -> decltype(h_array_reduce<Reducer, T, N>::run(arr, identity))\n{\n  return h_array_reduce<Reducer, T, N>::run(arr, identity);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/CXX11Meta.h", "function_name": "array_reduce", "index": 1109, "label": 0}
{"input": "MBufCache::MBufCache(int initsec,int secw,int sech,int blockh){\n    m_lock = new std::mutex();\n    m_secw = secw;\n    m_sech = sech;\n    m_blockh = blockh;\n    m_lineh = sech-blockh;\n    for(int k=0;k<initsec;k++){\n        JMat* mat = new JMat(m_secw,m_sech+1,1);\n        vec_buf.push_back(mat);\n    }\n    memset(m_tagarr,0,512*sizeof(int));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wavcache.cpp", "function_name": "MBufCache::MBufCache", "index": 1110, "label": 0}
{"input": "void test_autodiff_jacobian()\n{\n  CALL_SUBTEST(( forward_jacobian(TestFunc1<double,2,2>()) ));\n  CALL_SUBTEST(( forward_jacobian(TestFunc1<double,2,3>()) ));\n  CALL_SUBTEST(( forward_jacobian(TestFunc1<double,3,2>()) ));\n  CALL_SUBTEST(( forward_jacobian(TestFunc1<double,3,3>()) ));\n  CALL_SUBTEST(( forward_jacobian(TestFunc1<double>(3,3)) ));\n#if EIGEN_HAS_VARIADIC_TEMPLATES\n  CALL_SUBTEST(( forward_jacobian_cpp11(integratorFunctor<double>(10)) ));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "test_autodiff_jacobian", "index": 1111, "label": 0}
{"input": "ElectronBotController() {\n        electron_bot_.Init(Right_Pitch_Pin, Right_Roll_Pin, Left_Pitch_Pin, Left_Roll_Pin, Body_Pin,\n                           Head_Pin);\n\n        electron_bot_.Home(true);\n        action_queue_ = xQueueCreate(10, sizeof(ElectronBotActionParams));\n\n        RegisterMcpTools();\n        ESP_LOGI(TAG, \"Electron Bot控制器已初始化并注册MCP工具\");\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/electron-bot/electron_bot_controller.cc", "function_name": "ElectronBotController", "index": 1112, "label": 0}
{"input": "inline bool Response::has_header(const std::string &key) const {\n  return headers.find(key) != headers.end();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Response::has_header", "index": 1113, "label": 0}
{"input": "constexpr Slice(int32 inStart, int32 inStop, int32 inStep) noexcept :\n            start(inStart),\n            stop(inStop),\n            step(inStep)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Slice.hpp", "function_name": "Slice", "index": 1114, "label": 0}
{"input": "inline\nDMatch::DMatch(int _queryIdx, int _trainIdx, int _imgIdx, float _distance)\n    : queryIdx(_queryIdx), trainIdx(_trainIdx), imgIdx(_imgIdx), distance(_distance) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "DMatch::DMatch", "index": 1115, "label": 0}
{"input": "intersector_helper2(const Object1 &inStored, Intersector &in) : stored(inStored), intersector(in) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h", "function_name": "intersector_helper2", "index": 1116, "label": 0}
{"input": "SparseSymmetricPermutationProduct(const MatrixType& mat, const Perm& perm)\n      : m_matrix(mat), m_perm(perm)\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseSelfAdjointView.h", "function_name": "SparseSymmetricPermutationProduct", "index": 1117, "label": 0}
{"input": "inline Scalar coeffUpper(Index row, Index col) const {\n        const Index outer = IsRowMajor ? row : col;\n        const Index inner = IsRowMajor ? col : row;\n\n        eigen_assert(outer < outerSize());\n        eigen_assert(inner < innerSize());\n        eigen_assert(inner != outer);\n\n        if (IsRowMajor) {\n            const Index minOuterIndex = inner - m_data.upperProfile(inner);\n            if (outer >= minOuterIndex)\n                return this->m_data.upper(m_colStartIndex[inner] + outer - (inner - m_data.upperProfile(inner)));\n            else\n                return Scalar(0);\n        } else {\n            const Index maxOuterIndex = inner + m_data.upperProfile(inner);\n            if (outer <= maxOuterIndex)\n                return this->m_data.upper(m_colStartIndex[inner] + (outer - inner));\n            else\n                return Scalar(0);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "coeffUpper", "index": 1118, "label": 0}
{"input": "LevenbergMarquardtSpace::Status\nLevenbergMarquardt<FunctorType>::lmdif1(\n        FunctorType &functor,\n        FVectorType  &x,\n        Index *nfev,\n        const Scalar tol\n        )\n{\n    Index n = x.size();\n    Index m = functor.values();\n\n    \n    if (n <= 0 || m < n || tol < 0.)\n        return LevenbergMarquardtSpace::ImproperInputParameters;\n\n    NumericalDiff<FunctorType> numDiff(functor);\n    \n    LevenbergMarquardt<NumericalDiff<FunctorType> > lm(numDiff);\n    lm.setFtol(tol);\n    lm.setXtol(tol);\n    lm.setMaxfev(200*(n+1));\n\n    LevenbergMarquardtSpace::Status info = LevenbergMarquardtSpace::Status(lm.minimize(x));\n    if (nfev)\n        * nfev = lm.nfev();\n    return info;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/LevenbergMarquardt/LevenbergMarquardt.h", "function_name": "LevenbergMarquardt<FunctorType>::lmdif1", "index": 1119, "label": 0}
{"input": "GDigit::GDigit(int width,int height, MessageCb *obj):GRender(width,height,obj) {\n    dispThread = new DispatchQueue(\"Digit\");\n    curlThread = new LoopCurl();\n    wenetThread = new LoopWenet();\n    bnf_cache = new MBnfCache();\n    lock_munet = new std::mutex();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::GDigit", "index": 1120, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline ConstNormalReturnType normal() const { return ConstNormalReturnType(m_coeffs,0,0,dim(),1); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Hyperplane.h", "function_name": "ConstNormalReturnType normal", "index": 1121, "label": 0}
{"input": "static inline Mat cvarrToMatND(const CvArr* arr, bool copyData=false, int coiMode=0)\n{\n    return cvarrToMat(arr, copyData, true, coiMode);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvarrToMatND", "index": 1122, "label": 0}
{"input": "void AfeWakeWord::AudioDetectionTask() {\n    auto fetch_size = afe_iface_->get_fetch_chunksize(afe_data_);\n    auto feed_size = afe_iface_->get_feed_chunksize(afe_data_);\n    ESP_LOGI(TAG, \"Audio detection task started, feed size: %d fetch size: %d\",\n        feed_size, fetch_size);\n\n    while (true) {\n        xEventGroupWaitBits(event_group_, DETECTION_RUNNING_EVENT, pdFALSE, pdTRUE, portMAX_DELAY);\n\n        auto res = afe_iface_->fetch_with_delay(afe_data_, portMAX_DELAY);\n        if (res == nullptr || res->ret_value == ESP_FAIL) {\n            continue;;\n        }\n\n        \n        StoreWakeWordData(res->data, res->data_size / sizeof(int16_t));\n\n        if (res->wakeup_state == WAKENET_DETECTED) {\n            StopDetection();\n            last_detected_wake_word_ = wake_words_[res->wake_word_index - 1];\n\n            if (wake_word_detected_callback_) {\n                wake_word_detected_callback_(last_detected_wake_word_);\n            }\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::AudioDetectionTask", "index": 1123, "label": 0}
{"input": "void check_sparse_square_determinant(Solver& solver)\n{\n  typedef typename Solver::MatrixType Mat;\n  typedef typename Mat::Scalar Scalar;\n  typedef Matrix<Scalar,Dynamic,Dynamic> DenseMatrix;\n  \n  for (int i = 0; i < g_repeat; i++) {\n    \n    Mat A;\n    DenseMatrix dA;\n    \n    int size = internal::random<int>(1,30);\n    dA.setRandom(size,size);\n    \n    dA = (dA.array().abs()<0.3).select(0,dA);\n    dA.diagonal() = (dA.diagonal().array()==0).select(1,dA.diagonal());\n    A = dA.sparseView();\n    A.makeCompressed();\n  \n    check_sparse_determinant(solver, A, dA);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "check_sparse_square_determinant", "index": 1124, "label": 0}
{"input": "inline std::ptrdiff_t l3CacheSize()\n{\n  std::ptrdiff_t l1, l2, l3;\n  internal::manage_caching_sizes(GetAction, &l1, &l2, &l3);\n  return l3;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "l3CacheSize", "index": 1125, "label": 0}
{"input": "lynx_api_status lynx_value_is_map(lynx_api_env env, lynx_value value,\n                                  bool* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_is_map", "index": 1126, "label": 0}
{"input": "NCNN_FORCEINLINE const Mat Mat::range(int x, int n) const\n{\n    return Mat(n, (unsigned char*)data + x * elemsize, elemsize, elempack, allocator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "Mat::range", "index": 1127, "label": 0}
{"input": "inline bool test_isApproxOrLessThan(const half& a, const half& b)\n{ return internal::isApproxOrLessThan(a, b, test_precision<half>()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "test_isApproxOrLessThan", "index": 1128, "label": 0}
{"input": "void test_unsigned_64bit()\n{\n  for (uint64_t i = 1; i < 25000; ++i) {\n    const Eigen::internal::TensorIntDivisor<uint64_t> div(i);\n\n    for (uint64_t j = 0; j < 25000; ++j) {\n      const uint64_t fast_div = j / div;\n      const uint64_t slow_div = j / i;\n      VERIFY_IS_EQUAL(fast_div, slow_div);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_intdiv.cpp", "function_name": "test_unsigned_64bit", "index": 1129, "label": 0}
{"input": "constexpr Geocentric(double inLatitude, double inLongitude, double inRadius = 0.) noexcept :\n            latitude(inLatitude),\n            longitude(inLongitude),\n            radius(inRadius)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/ReferenceFrames/Geocentric.hpp", "function_name": "Geocentric", "index": 1130, "label": 0}
{"input": "NdArray<bool> isposinf(const NdArray<dtype>& inArray)\n    {\n        NdArray<bool> returnArray(inArray.shape());\n        stl_algorithms::transform(inArray.cbegin(),\n                                  inArray.cend(),\n                                  returnArray.begin(),\n                                  [](dtype inValue) noexcept -> bool { return isposinf(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/isposinf.hpp", "function_name": "isposinf", "index": 1131, "label": 0}
{"input": "void TasmMediator::OnRuntimeGC(\n    std::unordered_map<std::string, std::string> mem_info) {\n  if (!perf_actor_) {\n    return;\n  }\n  perf_actor_->ActAsync(\n      [memory_info = std::move(mem_info)](auto& performance) mutable {\n        performance->GetMemoryMonitor().UpdateScriptingEngineMemoryUsage(\n            std::move(memory_info));\n      });\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/shell/tasm_mediator.cc", "function_name": "TasmMediator::OnRuntimeGC", "index": 1132, "label": 0}
{"input": "JSVMRuntime::~JSVMRuntime() {\n  ClearHostContainers();\n  JSVM_CALL(OH_JSVM_DeleteReference(getEnv(), host_object_template_));\n  host_object_template_ = nullptr;\n  JSVM_CALL(OH_JSVM_DeleteReference(getEnv(), host_function_template_));\n  host_function_template_ = nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::~JSVMRuntime", "index": 1133, "label": 0}
{"input": "void initPoints(VectorType& uv_ref, VectorType& x)\n  {\n    m_x = x;\n    m_y = this->model(uv_ref,x);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparseLM.cpp", "function_name": "uv_ref", "index": 1134, "label": 0}
{"input": "static inline\nPtr<_Tp> makePtr(const A1&... a1)\n{\n    static_assert( !has_custom_delete<_Tp>::value, \"Can't use this makePtr with custom DefaultDeleter\");\n    return (Ptr<_Tp>)std::make_shared<_Tp>(a1...);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cvstd_wrapper.hpp", "function_name": "makePtr", "index": 1135, "label": 0}
{"input": "[[nodiscard]] double radianSeperation(const Celestial& inOtherCelestial) const\n        {\n            return std::acos(dot(xyz(), inOtherCelestial.xyz()).item());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/ReferenceFrames/Celestial.hpp", "function_name": "inOtherCelestial", "index": 1136, "label": 0}
{"input": "void\nMsgcbJni::onMessageCallback(int msgId, int arg1, long arg2, const char *msg1, const char *msg2, jobject obj) {\n    if (msgcbJObj != nullptr && onMessageCallbackMethod != nullptr) {\n        bool attach = JniHelper::attachCurrentThread();\n\n        JNIEnv *env = JniHelper::getJNIEnv();\n        jstring jMsg1 = msg1 ? JniHelper::newStringUTF(env, msg1) : nullptr;\n        jstring jMsg2 = msg2 ? JniHelper::newStringUTF(env, msg2) : nullptr;\n        JniHelper::callVoidMethod(msgcbJObj, onMessageCallbackMethod, msgId, arg1, arg2, jMsg1,\n                                  jMsg2, obj);\n        if (jMsg1) {\n            env->DeleteLocalRef(jMsg1);\n        }\n        if (jMsg2) {\n            env->DeleteLocalRef(jMsg2);\n        }\n        if (attach) {\n            JniHelper::detachCurrentThread();\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/MsgcbJni.cpp", "function_name": "MsgcbJni::onMessageCallback", "index": 1137, "label": 0}
{"input": "inline cl_int clGetPlatformIDs(cl_uint p0, cl_platform_id* p1, cl_uint* p2) { return clGetPlatformIDs_pfn(p0, p1, p2); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetPlatformIDs", "index": 1138, "label": 0}
{"input": "void save_value(FILE* stream, const std::vector<T>& value)\n{\n    size_t size = value.size();\n    fwrite(&size, sizeof(size_t), 1, stream);\n    fwrite(&value[0], sizeof(T), size, stream);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/saving.h", "function_name": "save_value", "index": 1139, "label": 0}
{"input": "void KnotAveraging(const KnotVectorType& parameters, DenseIndex degree, KnotVectorType& knots)\n  {\n    knots.resize(parameters.size()+degree+1);      \n\n    for (DenseIndex j=1; j<parameters.size()-degree; ++j)\n      knots(j+degree) = parameters.segment(j,degree).mean();\n\n    knots.segment(0,degree+1) = KnotVectorType::Zero(degree+1);\n    knots.segment(knots.size()-degree-1,degree+1) = KnotVectorType::Ones(degree+1);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/SplineFitting.h", "function_name": "KnotAveraging", "index": 1140, "label": 0}
{"input": "std::vector<MMOut> Outs(MMOrder order) const {\n    std::vector<MMOut> outs;\n    for (size_t out_idx = 0;; ++out_idx) {\n      const MMOut out = static_cast<MMOut>(out_idx);\n      if (StringFromOut(out) == nullptr) return outs;  \n      \n      if (out == MMOut::kParM && M_ == 1) continue;\n      \n      if (out == MMOut::kParM && IsBlock(order)) continue;\n      \n      if ((out == MMOut::kDirect) != IsOneKC(order)) continue;\n      \n      if (out == MMOut::kCopy && IsOneKC(order) && !IsBlock(order)) continue;\n      outs.push_back(out);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.cc", "function_name": "order", "index": 1141, "label": 0}
{"input": "KroneckerProductSparse<A,B> kroneckerProduct(const EigenBase<A>& a, const EigenBase<B>& b)\n{\n  return KroneckerProductSparse<A,B>(a.derived(), b.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h", "function_name": "kroneckerProduct", "index": 1142, "label": 0}
{"input": "static void test_tensor_sym()\n{\n  SGroup<Symmetry<0,1>, Symmetry<2,3>> sym;\n  Tensor<int, 4> t(10,10,10,10);\n\n  t.setZero();\n\n  for (int l = 0; l < 10; l++) {\n    for (int k = l; k < 10; k++) {\n      for (int j = 0; j < 10; j++) {\n        for (int i = j; i < 10; i++) {\n          sym(t, i, j, k, l) = (i + j) * (k + l);\n        }\n      }\n    }\n  }\n\n  for (int l = 0; l < 10; l++) {\n    for (int k = 0; k < 10; k++) {\n      for (int j = 0; j < 10; j++) {\n        for (int i = 0; i < 10; i++) {\n          VERIFY_IS_EQUAL((t(i, j, k, l)), ((i + j) * (k + l)));\n        }\n      }\n    }\n  }\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_symmetry.cpp", "function_name": "test_tensor_sym", "index": 1143, "label": 0}
{"input": "CV_WRAP static inline\nint setLogLevel(int level)\n{\n    \n    return cv::utils::logging::setLogLevel((cv::utils::logging::LogLevel)level);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "setLogLevel", "index": 1144, "label": 0}
{"input": "static auto wrap_in (const U &u) -> typename GTypeTraits<T>::strip_type\n        {\n            static_assert(!(cv::detail::has_gshape<GTypeTraits<U>>::value\n                            || cv::detail::contains<typename std::decay<U>::type, GAPI_OWN_TYPES_LIST>::value),\n                          \"gin/gout must not be used with G* classes or cv::gapi::own::*\");\n            return GTypeTraits<T>::wrap_in(u);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gtype_traits.hpp", "function_name": "wrap_in", "index": 1145, "label": 0}
{"input": "int MyDisp::set_window( ANativeWindow* newwin){\n    if (win) {\n        ANativeWindow_release(win);\n    }\n    win = newwin;\n    if(win) ANativeWindow_acquire(win);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/ndkwin.cpp", "function_name": "MyDisp::set_window", "index": 1146, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmpne4(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetne4(a, b);\n        c = r << 8;         \n        r = c - r;          \n    #else\n        \n        \n        r = a ^ b;          \n        c = r | 0x80808080; \n        c = c - 0x01010101; \n        c = r | c;          \n        c = c & 0x80808080; \n        r = c >> 7;         \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmpne4", "index": 1147, "label": 0}
{"input": "void test_signed_64bit()\n{\n  for (int64_t i = 1; i < 25000; ++i) {\n    const Eigen::internal::TensorIntDivisor<int64_t> div(i);\n\n    for (int64_t j = 0; j < 25000; ++j) {\n      const int64_t fast_div = j / div;\n      const int64_t slow_div = j / i;\n      VERIFY_IS_EQUAL(fast_div, slow_div);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_intdiv.cpp", "function_name": "test_signed_64bit", "index": 1148, "label": 0}
{"input": "void eiToGsl(const EigenMatrixType& src, gsl_matrix** dst)\n{\n  for (int j=0; j<src.cols(); ++j)\n    for (int i=0; i<src.rows(); ++i)\n      gsl_matrix_set(*dst, i, j, src.coeff(i,j));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchUtil.h", "function_name": "eiToGsl", "index": 1149, "label": 0}
{"input": "void AirElement::ResetStyle(CSSPropertyID id) {\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, AIR_ELEMENT_RESET_STYLE);\n  bool is_layout_only = LayoutProperty::IsLayoutOnly(id);\n  if (is_layout_only || LayoutProperty::IsLayoutWanted(id)) {\n    if (EnableAsyncCalc()) {\n      async_reset_styles_.insert(id);\n    } else {\n      air_element_manager_->ResetLayoutNodeStyle(impl_id(), id);\n    }\n    dirty_ |= kDirtyStyle;\n  }\n  if (is_layout_only) {\n    return;\n  }\n  has_layout_only_props_ = false;\n  prop_bundle_->SetNullProps(CSSProperty::GetPropertyName(id).c_str());\n  dirty_ |= kDirtyAttr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "bbb13dd1780e24917d1b1b68322069d6f04cd233", "file_path": "core/renderer/dom/air/air_element/air_element.cc", "function_name": "AirElement::ResetStyle", "index": 1150, "label": 0}
{"input": "CompositeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = CompositeIndexParams(),\n                   Distance d = Distance()) : index_params_(params)\n    {\n        kdtree_index_ = new KDTreeIndex<Distance>(inputData, params, d);\n        kmeans_index_ = new KMeansIndex<Distance>(inputData, params, d);\n\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/composite_index.h", "function_name": "CompositeIndex", "index": 1151, "label": 0}
{"input": "EIGEN_STRONG_INLINE Eigen::half predux<Packet8h>(const Packet8h& a) {\n  Packet8f af = half2float(a);\n  float reduced = predux<Packet8f>(af);\n  return Eigen::half(reduced);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "Eigen::half predux<Packet8h>", "index": 1152, "label": 0}
{"input": "void RenderHelper::setVideoParams(int width, int height) {\n    videoWidth = width;\n    videoHeight = height;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/RenderHelper.cpp", "function_name": "RenderHelper::setVideoParams", "index": 1153, "label": 0}
{"input": "void SurfaceVideoRenderer::surfaceCreated(NativeWindowType window, int videoWidth, int videoHeight) {\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/SurfaceVideoRenderer.cpp", "function_name": "SurfaceVideoRenderer::surfaceCreated", "index": 1154, "label": 0}
{"input": "EIGEN_DEVICE_FUNC Quaternion<Scalar,Options> Quaternion<Scalar,Options>::FromTwoVectors(const MatrixBase<Derived1>& a, const MatrixBase<Derived2>& b)\n{\n    Quaternion quat;\n    quat.setFromTwoVectors(a, b);\n    return quat;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "Quaternion<Scalar,Options> Quaternion<Scalar,Options>::FromTwoVectors", "index": 1155, "label": 0}
{"input": "inline std::vector<Index> h_permute(std::size_t which, std::vector<Index> idx) const\n    {\n      std::vector<Index> result;\n      result.reserve(idx.size());\n      for (auto k : m_elements[which].representation)\n        result.push_back(idx[k]);\n      for (std::size_t i = m_numIndices; i < idx.size(); i++)\n        result.push_back(idx[i]);\n      return result;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/DynamicSymmetry.h", "function_name": "h_permute", "index": 1156, "label": 0}
{"input": "int MyDigit::netrst(int index,const char* dumpfn){\n    if(!inited)return -999;\n    if(!net_wavmat)return -1;\n    if(index<0)return -2;\n    if(index>net_wavmat->bnfblocks())return -3;\n    JMat onepic = mat_pic->clone();\n    JMat* mw = net_wavmat->bnfmat();\n    float* pwenet = ai_wenet->nextbnf(mw,index);\n    if(!pwenet){\n        __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"%d index error\",index);\n        return -1;\n    }\n    \n    JMat feat(256, 20, pwenet, 1);\n    int* arr = mat_pic->tagarr();\n    double t0 = ncnn::get_current_time();\n    ai_munet->process(&onepic, arr, &feat);\n    double t1 = ncnn::get_current_time();\n    char text[1024];\n    float dist = t1-t0;\n    sprintf(text,\"%d unet %f\",index,dist);\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"%s dump %s\",text,dumpfn);\n    drawMat(&onepic,text);\n    if(strlen(dumpfn)){\n        __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"%s dump %s\",text,dumpfn);\n        onepic.tojpg(dumpfn);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "MyDigit::netrst", "index": 1157, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename NList::HeadType::type array_prod(const NList&) {\n  return arg_prod<NList>::value;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/EmulateCXX11Meta.h", "function_name": "EIGEN_STRONG_INLINE typename NList::HeadType::type array_prod", "index": 1158, "label": 0}
{"input": "EIGEN_DEVICE_FUNC static bool run(const Self&, Op&, const Device&, typename Self::CoeffReturnType*, typename Self::Index, typename Self::Index) {\n    eigen_assert(false && \"Not implemented\");\n    return true;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h", "function_name": "Self::CoeffReturnType", "index": 1159, "label": 0}
{"input": "inline void Client::enable_server_certificate_verification(bool enabled) {\n  cli_->enable_server_certificate_verification(enabled);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::enable_server_certificate_verification", "index": 1160, "label": 0}
{"input": "static void test_simple_argmax()\n{\n  Tensor<float, 4, DataLayout> tensor(2,3,5,7);\n  tensor.setRandom();\n  tensor = (tensor + tensor.constant(0.5)).log();\n  tensor(0,0,0,0) = 10.0;\n\n  Tensor<DenseIndex, 0, DataLayout> tensor_argmax;\n\n  tensor_argmax = tensor.argmax();\n\n  VERIFY_IS_EQUAL(tensor_argmax(0), 0);\n\n  tensor(1,2,4,6) = 20.0;\n\n  tensor_argmax = tensor.argmax();\n\n  VERIFY_IS_EQUAL(tensor_argmax(0), 2*3*5*7 - 1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_argmax.cpp", "function_name": "test_simple_argmax", "index": 1161, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline typename ConstFixedSegmentReturnType<N>::Type head(Index n = N) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return typename ConstFixedSegmentReturnType<N>::Type(derived(), 0, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "head", "index": 1162, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline void pbroadcast2(const typename unpacket_traits<Packet>::type *a,\n                        Packet& a0, Packet& a1)\n{\n  a0 = pload1<Packet>(a+0);\n  a1 = pload1<Packet>(a+1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "pbroadcast2", "index": 1163, "label": 0}
{"input": "bool is_sorted(const T& mat) {\n  for(Index k = 0; k<mat.outerSize(); ++k)\n  {\n    Index prev = -1;\n    for(typename T::InnerIterator it(mat,k); it; ++it)\n    {\n      if(prev>=it.index())\n        return false;\n      prev = it.index();\n    }\n  }\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_permutations.cpp", "function_name": "is_sorted", "index": 1164, "label": 0}
{"input": "inline\nSparseMatConstIterator_<_Tp> SparseMatConstIterator_<_Tp>::operator ++(int)\n{\n    SparseMatConstIterator_<_Tp> it = *this;\n    SparseMatConstIterator::operator ++();\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMatConstIterator_<_Tp>::operator ++", "index": 1165, "label": 0}
{"input": "AudioTrackJni::AudioTrackJni(void* obj):AudioTrack(obj) {\n    JNIEnv *env = JniHelper::getJNIEnv();\n    audioTrackObj = env->NewGlobalRef(obj);\n    audioTrackClass = env->GetObjectClass(obj);\n    audioTrackStart = env->GetMethodID(audioTrackClass, \"open\", \"(IIII)V\");\n    audioTrackWrite = env->GetMethodID(audioTrackClass, \"write\", \"(Ljava/nio/ByteBuffer;I)I\");\n    audioTrackStop = env->GetMethodID(audioTrackClass, \"close\", \"()V\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/AudioTrackJni.cpp", "function_name": "AudioTrackJni::AudioTrackJni", "index": 1166, "label": 0}
{"input": "inline int64 DictValue::get<int64>(int idx) const\n{\n    CV_Assert((idx == -1 && size() == 1) || (idx >= 0 && idx < size()));\n    idx = (idx == -1) ? 0 : idx;\n\n    if (type == Param::INT)\n    {\n        return (*pi)[idx];\n    }\n    else if (type == Param::REAL)\n    {\n        double doubleValue = (*pd)[idx];\n\n        double fracpart, intpart;\n        fracpart = std::modf(doubleValue, &intpart);\n        CV_Assert(fracpart == 0.0);\n\n        return (int64)doubleValue;\n    }\n    else if (type == Param::STRING)\n    {\n        return std::atoi((*ps)[idx].c_str());\n    }\n    else\n    {\n        CV_Assert(isInt() || isReal() || isString());\n        return 0;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/dnn.inl.hpp", "function_name": "DictValue::get<int64>", "index": 1167, "label": 0}
{"input": "void OttoEmojiDisplay::SetChatMessage(const char* role, const char* content) {\n    DisplayLockGuard lock(this);\n    if (chat_message_label_ == nullptr) {\n        return;\n    }\n\n    if (content == nullptr || strlen(content) == 0) {\n        lv_obj_add_flag(chat_message_label_, LV_OBJ_FLAG_HIDDEN);\n        return;\n    }\n\n    lv_label_set_text(chat_message_label_, content);\n    lv_obj_clear_flag(chat_message_label_, LV_OBJ_FLAG_HIDDEN);\n\n    ESP_LOGI(TAG, \"设置聊天消息 [%s]: %s\", role, content);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_emoji_display.cc", "function_name": "OttoEmojiDisplay::SetChatMessage", "index": 1168, "label": 0}
{"input": "inline bool SSLClient::check_host_name(const char *pattern,\n                                       size_t pattern_len) const {\n  if (host_.size() == pattern_len && host_ == pattern) { return true; }\n\n  \n  \n  std::vector<std::string> pattern_components;\n  detail::split(&pattern[0], &pattern[pattern_len], '.',\n                [&](const char *b, const char *e) {\n                  pattern_components.emplace_back(std::string(b, e));\n                });\n\n  if (host_components_.size() != pattern_components.size()) { return false; }\n\n  auto itr = pattern_components.begin();\n  for (const auto &h : host_components_) {\n    auto &p = *itr;\n    if (p != h && p != \"*\") {\n      auto partial_match = (p.size() > 0 && p[p.size() - 1] == '*' &&\n                            !p.compare(0, p.size() - 1, h));\n      if (!partial_match) { return false; }\n    }\n    ++itr;\n  }\n\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::check_host_name", "index": 1169, "label": 0}
{"input": "inline bool redirect(T &cli, Request &req, Response &res,\n                     const std::string &path, const std::string &location,\n                     Error &error) {\n  Request new_req = req;\n  new_req.path = path;\n  new_req.redirect_count_ -= 1;\n\n  if (res.status == 303 && (req.method != \"GET\" && req.method != \"HEAD\")) {\n    new_req.method = \"GET\";\n    new_req.body.clear();\n    new_req.headers.clear();\n  }\n\n  Response new_res;\n\n  auto ret = cli.send(new_req, new_res, error);\n  if (ret) {\n    req = new_req;\n    res = new_res;\n\n    if (res.location.empty()) res.location = location;\n  }\n  return ret;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "redirect", "index": 1170, "label": 0}
{"input": "void  apply_rotation_in_the_plane(DenseBase<VectorX>& xpr_x, DenseBase<VectorY>& xpr_y, const JacobiRotation<OtherScalar>& j)\n{\n  typedef typename VectorX::Scalar Scalar;\n  const bool Vectorizable =    (VectorX::Flags & VectorY::Flags & PacketAccessBit)\n                            && (int(packet_traits<Scalar>::size) == int(packet_traits<OtherScalar>::size));\n\n  eigen_assert(xpr_x.size() == xpr_y.size());\n  Index size = xpr_x.size();\n  Index incrx = xpr_x.derived().innerStride();\n  Index incry = xpr_y.derived().innerStride();\n\n  Scalar* EIGEN_RESTRICT x = &xpr_x.derived().coeffRef(0);\n  Scalar* EIGEN_RESTRICT y = &xpr_y.derived().coeffRef(0);\n  \n  OtherScalar c = j.c();\n  OtherScalar s = j.s();\n  if (c==OtherScalar(1) && s==OtherScalar(0))\n    return;\n\n  apply_rotation_in_the_plane_selector<\n    Scalar,OtherScalar,\n    VectorX::SizeAtCompileTime,\n    EIGEN_PLAIN_ENUM_MIN(evaluator<VectorX>::Alignment, evaluator<VectorY>::Alignment),\n    Vectorizable>::run(x,incrx,y,incry,size,c,s);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Jacobi/Jacobi.h", "function_name": "apply_rotation_in_the_plane", "index": 1171, "label": 0}
{"input": "void fillCorners(NdArray<dtype>& inArray, uint32 inBorderWidth, dtype inFillValue)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        const Shape inShape = inArray.shape();\n        const auto  numRows = static_cast<int32>(inShape.rows);\n        const auto  numCols = static_cast<int32>(inShape.cols);\n\n        \n        inArray.put(Slice(0, inBorderWidth), Slice(0, inBorderWidth), inFillValue);\n\n        \n        inArray.put(Slice(0, inBorderWidth), Slice(numCols - inBorderWidth, numCols), inFillValue);\n\n        \n        inArray.put(Slice(numRows - inBorderWidth, numRows), Slice(0, inBorderWidth), inFillValue);\n\n        \n        inArray.put(Slice(numRows - inBorderWidth, numRows), Slice(numCols - inBorderWidth, numCols), inFillValue);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Boundaries/Boundaries2d/fillCorners.hpp", "function_name": "fillCorners", "index": 1172, "label": 0}
{"input": "void check_for_aliasing(const Dst &dst, const Src &src)\n{\n  internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Transpose.h", "function_name": "check_for_aliasing", "index": 1173, "label": 0}
{"input": "void add(Matrix<ElementType> dataset)\n    {\n#if USE_UNORDERED_MAP\n        buckets_space_.rehash((buckets_space_.size() + dataset.rows) * 1.2);\n#endif\n        \n        for (unsigned int i = 0; i < dataset.rows; ++i) add(i, dataset[i]);\n        \n        optimize();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/lsh_table.h", "function_name": "dataset", "index": 1174, "label": 0}
{"input": "static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,typename SrcXprType::Scalar> &)\n  {\n    Index dstRows = src.rows();\n    Index dstCols = src.cols();\n    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))\n      dst.resize(dstRows, dstCols);\n\n    dst._assignProduct(src, 1, 0);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "internal::assign_op<Scalar,typename SrcXprType::Scalar>", "index": 1175, "label": 0}
{"input": "__device__ EIGEN_STRONG_INLINE Eigen::half predux<half2>(const half2& a) {\n#if __CUDA_ARCH__ >= 530\n  return __hadd(__low2half(a), __high2half(a));\n#else\n  float a1 = __low2float(a);\n  float a2 = __high2float(a);\n  return Eigen::half(half_impl::raw_uint16_to_half(__float2half_rn(a1 + a2)));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "EIGEN_STRONG_INLINE Eigen::half predux<half2>", "index": 1176, "label": 0}
{"input": "EIGEN_DEVICE_FUNC static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,typename ArgType::Scalar> &)\n  {\n    Index dstRows = src.rows();\n    Index dstCols = src.cols();\n    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))\n      dst.resize(dstRows, dstCols);\n\n    dst.template leftCols<ArgType::ColsAtCompileTime>(src.nestedExpression().cols()) = src.nestedExpression();\n    dst.col(dst.cols()-1).setOnes();\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "internal::assign_op<Scalar,typename ArgType::Scalar>", "index": 1177, "label": 0}
{"input": "inline cl_int clSetEventCallback(cl_event p0, cl_int p1, void (CL_CALLBACK*p2) (cl_event, cl_int, void*), void* p3) { return clSetEventCallback_pfn(p0, p1, p2, p3); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clSetEventCallback", "index": 1178, "label": 0}
{"input": "T optional<T>::value_or(U &&default_value) const\n    {\n        return (this->has_value() ? this->value() : T(default_value));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/optional.hpp", "function_name": "optional<T>::value_or", "index": 1179, "label": 0}
{"input": "void OffscreenCanvas::reset_context_to_default_state()\n{\n    m_context.visit(\n        [](GC::Ref<OffscreenCanvasRenderingContext2D>& context) {\n            context->reset_to_default_state();\n        },\n        [](GC::Ref<WebGL::WebGLRenderingContext>& context) {\n            context->reset_to_default_state();\n        },\n        [](GC::Ref<WebGL::WebGL2RenderingContext>& context) {\n            context->reset_to_default_state();\n        },\n        [](Empty) {\n            \n        });\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::reset_context_to_default_state", "index": 1180, "label": 0}
{"input": "inline cv::Mat to_ocv(Mat const& m) {\n        return m.dims.empty()\n            ? cv::Mat{m.rows, m.cols, m.type(), m.data, m.step}\n            : cv::Mat{m.dims, m.type(), m.data};\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/own/convert.hpp", "function_name": "to_ocv", "index": 1181, "label": 0}
{"input": "NdArray<bool> not_equal(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        return inArray1 != inArray2;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/not_equal.hpp", "function_name": "not_equal", "index": 1182, "label": 0}
{"input": "bool array_equiv(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2) noexcept\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        if (inArray1.size() != inArray2.size())\n        {\n            return false;\n        }\n\n        if (DtypeInfo<dtype>::isInteger())\n        {\n            return stl_algorithms::equal(inArray1.cbegin(), inArray1.cend(), inArray2.cbegin());\n        }\n\n        const auto comparitor = [](dtype value1, dtype value2) noexcept -> bool\n        { return utils::essentiallyEqual(value1, value2); };\n\n        return stl_algorithms::equal(inArray1.cbegin(), inArray1.cend(), inArray2.cbegin(), comparitor);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/array_equiv.hpp", "function_name": "array_equiv", "index": 1183, "label": 0}
{"input": "inline\nVecCommaInitializer<_Tp, cn>::VecCommaInitializer(Vec<_Tp, cn>* _vec)\n    : MatxCommaInitializer<_Tp, cn, 1>(_vec)\n{}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "VecCommaInitializer<_Tp, cn>::VecCommaInitializer", "index": 1184, "label": 0}
{"input": "inline const LLT<typename SelfAdjointView<MatrixType, UpLo>::PlainObject, UpLo>\nSelfAdjointView<MatrixType, UpLo>::llt() const\n{\n  return LLT<PlainObject,UpLo>(m_matrix);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "SelfAdjointView<MatrixType, UpLo>::llt", "index": 1185, "label": 0}
{"input": "int GDigit::picrst(const char* picfn,int* box,int index,const char* dumpfn){\n    if(!m_status)return -1000;\n    if(!ai_wenet)return -999;\n    if(!net_wavmat)return -1;\n    if(index<0)return -2;\n    if(index>=cnt_wenet)return -3;\n    std::string picfile(picfn);\n    JMat* mat_pic = NULL;\n    frameSource->popVidRecyle(&mat_pic);\n    if(!mat_pic)mat_pic = new JMat();\n    int rst = mat_pic->load(picfn);\n    if(rst){\n        delete mat_pic;\n        return rst*10000;\n    }\n    int arr[4]={box[0],box[1],box[2],box[3]};\n\n    if(!ai_wenet)return -11;\n    if(!net_wavmat)return -12;\n            \n    \n    JMat* mat_feat = bnf_cache->inxBuf(index);\n    if(mat_feat){\n        ai_munet->process(mat_pic, arr, mat_feat);\n        MediaData md(mat_pic);\n        frameSource->pushVidFrame(&md);\n        delete mat_feat;\n    }\n\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::picrst", "index": 1186, "label": 0}
{"input": "CvSize2D32f(const cv::Size_<_Tp>& sz): width(cv::saturate_cast<float>(sz.width)), height(cv::saturate_cast<float>(sz.height)) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvSize2D32f", "index": 1187, "label": 0}
{"input": "auto complex(const NdArray<dtype>& inReal, const NdArray<dtype>& inImag)\n    {\n        if (inReal.shape() != inImag.shape())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"Input real array must be the same shape as input imag array\");\n        }\n\n        NdArray<decltype(nc::complex(dtype{ 0 }, dtype{ 0 }))> returnArray(inReal.shape());\n        stl_algorithms::transform(\n            inReal.cbegin(),\n            inReal.cend(),\n            inImag.cbegin(),\n            returnArray.begin(),\n            [](dtype real, dtype imag) -> auto{ return nc::complex(real, imag); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/complex.hpp", "function_name": "complex", "index": 1188, "label": 0}
{"input": "void Application::StopListening() {\n    if (device_state_ == kDeviceStateAudioTesting) {\n        ExitAudioTestingMode();\n        return;\n    }\n\n    const std::array<int, 3> valid_states = {\n        kDeviceStateListening,\n        kDeviceStateSpeaking,\n        kDeviceStateIdle,\n    };\n    \n    if (std::find(valid_states.begin(), valid_states.end(), device_state_) == valid_states.end()) {\n        return;\n    }\n\n    Schedule([this]() {\n        if (device_state_ == kDeviceStateListening) {\n            protocol_->SendStopListening();\n            SetDeviceState(kDeviceStateIdle);\n        }\n    });\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "bf125446b3f48802a99a133ad4e7ca0e11a65d5d", "file_path": "main/application.cc", "function_name": "Application::StopListening", "index": 1189, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nT RandomToTypeNormal(uint64_t* state) {\n  \n  \n  \n  T u, v, q;\n  do {\n    u = RandomToTypeUniform<T>(state);\n    v = T(1.7156) * (RandomToTypeUniform<T>(state) - T(0.5));\n    const T x = u - T(0.449871);\n    const T y = numext::abs(v) + T(0.386595);\n    q = x*x + y * (T(0.196)*y - T(0.25472)*x);\n  } while (q > T(0.27597) &&\n           (q > T(0.27846) || v*v > T(-4) * numext::log(u) * u*u));\n\n  return v/u;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "RandomToTypeNormal", "index": 1190, "label": 0}
{"input": "SimplifiedGemma(int argc, char** argv)\n      : loader_(argc, argv, true),\n        inference_(argc, argv),\n        app_(argc, argv),\n        pools_(gcpp::CreatePools(app_)),\n        model_(gcpp::CreateGemma(loader_, pools_)) {\n    Init();\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "23dac724632cb2aca41fec259d41da04d912893f", "file_path": "examples/simplified_gemma/gemma.hpp", "function_name": "SimplifiedGemma", "index": 1191, "label": 0}
{"input": "EIGEN_DONT_INLINE void call_ref_7(Ref<Matrix<float,Dynamic,3> > a, const B &b) { VERIFY_IS_EQUAL(a,b); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/ref.cpp", "function_name": "call_ref_7", "index": 1192, "label": 0}
{"input": "void OttoEmojiDisplay::SetIcon(const char* icon) {\n    if (!icon) {\n        return;\n    }\n\n    DisplayLockGuard lock(this);\n\n    if (chat_message_label_ != nullptr) {\n        std::string icon_message = std::string(icon) + \" \";\n\n        if (strcmp(icon, FONT_AWESOME_DOWNLOAD) == 0) {\n            icon_message += \"正在升级...\";\n        } else {\n            icon_message += \"系统状态\";\n        }\n\n        lv_label_set_text(chat_message_label_, icon_message.c_str());\n        lv_obj_clear_flag(chat_message_label_, LV_OBJ_FLAG_HIDDEN);\n\n        ESP_LOGI(TAG, \"设置图标: %s\", icon);\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb17f7539b3f9be95b064017af91d6e81eff73a", "file_path": "main/boards/otto-robot/otto_emoji_display.cc", "function_name": "OttoEmojiDisplay::SetIcon", "index": 1193, "label": 0}
{"input": "MatrixType LLT<MatrixType,_UpLo>::reconstructedMatrix() const\n{\n  eigen_assert(m_isInitialized && \"LLT is not initialized.\");\n  return matrixL() * matrixL().adjoint().toDenseMatrix();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "LLT<MatrixType,_UpLo>::reconstructedMatrix", "index": 1194, "label": 0}
{"input": "explicit SparseQR(const MatrixType& mat) : m_analysisIsok(false), m_lastError(\"\"), m_useDefaultThreshold(true),m_isQSorted(false),m_isEtreeOk(false)\n    {\n      compute(mat);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseQR/SparseQR.h", "function_name": "SparseQR", "index": 1195, "label": 0}
{"input": "napi_value InspectorOwnerHarmony::Destroy(napi_env env,\n                                          napi_callback_info info) {\n  napi_value js_this;\n  size_t argc = 0;\n  napi_get_cb_info(env, info, &argc, nullptr, &js_this, nullptr);\n\n  InspectorOwnerHarmony *owner_harmony_ptr;\n  napi_status status = napi_remove_wrap(\n      env, js_this, reinterpret_cast<void **>(&owner_harmony_ptr));\n  NAPI_THROW_IF_FAILED_NULL(env, status,\n                            \"InspectorOwnerHarmony napi_remove_wrap failed!\");\n\n  delete owner_harmony_ptr;\n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/inspector_owner_harmony.cc", "function_name": "InspectorOwnerHarmony::Destroy", "index": 1196, "label": 0}
{"input": "NdArray<dtype> percentileFilter1d(const NdArray<dtype>& inImageArray,\n                                      uint32                inSize,\n                                      double                inPercentile,\n                                      Boundary              inBoundaryType  = Boundary::REFLECT,\n                                      dtype                 inConstantValue = 0)\n    {\n        NdArray<dtype> arrayWithBoundary =\n            boundary::addBoundary1d(inImageArray, inBoundaryType, inSize, inConstantValue);\n        NdArray<dtype> output(1, inImageArray.size());\n\n        const uint32 boundarySize = inSize / 2; \n        const uint32 endPoint     = boundarySize + inImageArray.size();\n\n        for (uint32 i = boundarySize; i < endPoint; ++i)\n        {\n            NdArray<dtype> window = arrayWithBoundary[Slice(i - boundarySize, i + boundarySize + 1)];\n\n            output[i - boundarySize] = percentile(window, inPercentile).item();\n        }\n\n        return output;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Filters/Filters1d/percentileFilter1d.hpp", "function_name": "percentileFilter1d", "index": 1197, "label": 0}
{"input": "void test_div() {\n  uint64_t incr = internal::random<uint64_t>(1, 9999999999);\n  for (uint64_t i1 = 0; i1 < 100; ++i1) {\n    for (uint64_t i2 = 1; i2 < 100 * incr; i2 += incr) {\n      TensorUInt128<uint64_t, uint64_t> i(i1, i2);\n      uint128_t a = (static_cast<uint128_t>(i1) << 64) + static_cast<uint128_t>(i2);\n      for (uint64_t j1 = 0; j1 < 100; ++j1) {\n        for (uint64_t j2 = 1; j2 < 100 * incr; j2 += incr) {\n          TensorUInt128<uint64_t, uint64_t> j(j1, j2);\n          uint128_t b = (static_cast<uint128_t>(j1) << 64) + static_cast<uint128_t>(j2);\n          TensorUInt128<uint64_t, uint64_t> actual = i / j;\n          uint128_t expected = a / b;\n          VERIFY_EQUAL(actual, expected);\n        }\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_uint128.cpp", "function_name": "test_div", "index": 1198, "label": 0}
{"input": "void looper::loop() {\n  while (true) {\n    \n    sem_wait(&headdataavailable);\n\n    \n    sem_wait(&headwriteprotect);\n    loopermessage *msg = head;\n    if (msg == NULL) {\n      LOGV(\"no msg\");\n      sem_post(&headwriteprotect);\n      continue;\n    }\n    head = msg->next;\n    sem_post(&headwriteprotect);\n\n    if (msg->quit) {\n      LOGV(\"quitting\");\n      delete msg;\n      return;\n    }\n    LOGV(\"processing msg %d\", msg->what);\n    handle(msg->what, msg->obj);\n    delete msg;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/looper.cpp", "function_name": "looper::loop", "index": 1199, "label": 0}
{"input": "HWY_INLINE TokenAndProb UnpackTokenAndProb(double packed) {\n  TokenAndProb tp;\n\n  int64_t packed_int64;\n  hwy::CopySameSize(&packed, &packed_int64);\n  tp.token = static_cast<int>(packed_int64 & 0xFFFFFFFFULL);\n\n  \n  packed_int64 &= 0xFFFFFFFF00000000ULL;\n  hwy::CopySameSize(&packed_int64, &packed);\n  tp.prob = static_cast<float>(packed);\n  return tp;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "d854471ae2f30d63783fd9ef9d3007d3345f0900", "file_path": "ops/ops-inl.h", "function_name": "TokenAndProb UnpackTokenAndProb", "index": 1200, "label": 0}
{"input": "__host__ __device__ __forceinline__ BrdRowReflect(int width, U) : last_col(width - 1) {}\n\n        __device__ __forceinline__ int idx_col_low(int x) const\n        {\n            return (::abs(x) - (x < 0)) % (last_col + 1);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/border_interpolate.hpp", "function_name": "idx_col_low", "index": 1201, "label": 0}
{"input": "inline bool MemoryInfoImpl<T>::operator==(const MemoryInfoImpl<U>& o) const {\n  int comp_result = 0;\n  ThrowOnError(Ort::GetApi().CompareMemoryInfo(this->p_, o, &comp_result));\n  return comp_result == 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MemoryInfoImpl<T>::operator==", "index": 1202, "label": 0}
{"input": "void ReadBothBlobs(BlobReader& reader1, BlobReader& reader2, size_t total_bytes,\n                   BlobVec& blobs1, BlobVec& blobs2, NestedPools& pools) {\n  const double t0 = hwy::platform::Now();\n  fprintf(stderr, \"Reading %zu GiB, %zux%zu cores: \", total_bytes >> 30,\n          pools.AllPackages().NumWorkers(), pools.Pool().NumWorkers());\n  pools.AllPackages().Run(0, 2, [&](size_t task, size_t pkg_idx) {\n    ReadBlobs(task ? reader2 : reader1, task ? blobs2 : blobs1,\n              pools.Pool(pkg_idx));\n  });\n  const double t1 = hwy::platform::Now();\n  fprintf(stderr, \"%.1f GB/s\\n\", total_bytes / (t1 - t0) * 1E-9);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "b0fe9a43e60121b567b8bb398b98b6319aee7a78", "file_path": "compression/blob_compare.cc", "function_name": "ReadBothBlobs", "index": 1203, "label": 0}
{"input": "inline __m128i _v128_cvtepu32_epi64_high(const __m128i& a)\n{\n    const __m128i z = _mm_setzero_si128();\n    return _mm_unpackhi_epi32(a, z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_cvtepu32_epi64_high", "index": 1204, "label": 0}
{"input": "int GDigit::bgpic(const char* bgfn){\n    if(!m_status)return -1000;\n    std::string picbg(bgfn);\n    lock_munet->lock();\n    if(!mat_bg)mat_bg = new JMat();\n    mat_bg->load(picbg);\n    lock_munet->unlock();\n    \n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::bgpic", "index": 1205, "label": 0}
{"input": "inline ModelMetadata ConstSessionImpl<T>::GetModelMetadata() const {\n  OrtModelMetadata* out;\n  ThrowOnError(GetApi().SessionGetModelMetadata(this->p_, &out));\n  return ModelMetadata{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionImpl<T>::GetModelMetadata", "index": 1206, "label": 0}
{"input": "inline v_float64x2 v_dotprod_expand(const v_int32x4& a, const v_int32x4& b, const v_float64x2& c)\n{ return v_dotprod_expand(a, b) + c; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_dotprod_expand", "index": 1207, "label": 0}
{"input": "inline void setCpuCacheSizes(std::ptrdiff_t l1, std::ptrdiff_t l2, std::ptrdiff_t l3)\n{\n  internal::manage_caching_sizes(SetAction, &l1, &l2, &l3);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "setCpuCacheSizes", "index": 1208, "label": 0}
{"input": "static LayerConfig LayerConfigVit(size_t model_dim) {\n  LayerConfig config;\n  config.model_dim = model_dim;\n  config.ff_hidden_dim = 4304;\n  config.heads = 16;\n  config.kv_heads = 16;\n  config.qkv_dim = 72;\n  config.ff_biases = true;\n  config.type = LayerAttentionType::kVit;\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.cc", "function_name": "LayerConfigVit", "index": 1209, "label": 0}
{"input": "inline void ClientImpl::set_proxy(const std::string &host, int port) {\n  proxy_host_ = host;\n  proxy_port_ = port;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_proxy", "index": 1210, "label": 0}
{"input": "void ValueImpl<T>::FillStringTensorElement(const char* s, size_t index) {\n  ThrowOnError(GetApi().FillStringTensorElement(this->p_, s, index));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ValueImpl<T>::FillStringTensorElement", "index": 1211, "label": 0}
{"input": "void ListEventManager::SendLayoutCompleteEvent() {\n  \n  if (!list_container_ ||\n      events_.find(list::kLayoutComplete) == events_.end()) {\n    return;\n  }\n  \n  auto layout_complete_info = list_container_->layout_complete_info();\n  if (!layout_complete_info) {\n    layout_complete_info = lepus::Dictionary::Create();\n  }\n  layout_complete_info->SetValue(BASE_STATIC_STRING(list::kLayoutID),\n                                 list_container_->layout_id());\n  \n  if (list_container_->need_layout_complete_info()) {\n    layout_complete_info->SetValue(BASE_STATIC_STRING(list::kScrollInfo),\n                                   GenerateScrollInfo(0.f, 0.f));\n  }\n  \n  \n  list_container_->ClearLayoutCompleteInfo();\n  list_container_->ResetLayoutID();\n  list_container_->element_manager()->SendNativeCustomEvent(\n      list::kLayoutComplete, list_container_->element()->impl_id(),\n      lepus_value(layout_complete_info), \"detail\");\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "a0dcde9c711d8fb582d9df9920816808b9a1f177", "file_path": "core/renderer/ui_component/list/list_event_manager.cc", "function_name": "ListEventManager::SendLayoutCompleteEvent", "index": 1212, "label": 0}
{"input": "const std::string GetCacheUrlFromIdentifier(\n    const JsFileIdentifier &identifier) {\n  if (identifier.category == MetaData::PACKAGED) {\n    return identifier.template_url + TEMPLATE_KEY_SOURCE_URL_SEP +\n           identifier.url;\n  }\n  return identifier.url;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5419d4c4cd7795fd30d486e3a515d918055bcbb0", "file_path": "core/runtime/jscache/js_cache_manager.cc", "function_name": "GetCacheUrlFromIdentifier", "index": 1213, "label": 0}
{"input": "__device__ __forceinline__ void RGB2LuvConvert_b(const T& src, D& dst)\n        {\n            float3 srcf, dstf;\n\n            srcf.x = src.x * (1.f / 255.f);\n            srcf.y = src.y * (1.f / 255.f);\n            srcf.z = src.z * (1.f / 255.f);\n\n            RGB2LuvConvert_f<srgb, blueIdx>(srcf, dstf);\n\n            dst.x = saturate_cast<uchar>(dstf.x * 2.55f);\n            dst.y = saturate_cast<uchar>(dstf.y * 0.72033898305084743f + 96.525423728813564f);\n            dst.z = saturate_cast<uchar>(dstf.z * 0.9732824427480916f + 136.259541984732824f);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "RGB2LuvConvert_b", "index": 1214, "label": 0}
{"input": "static void test_large_contraction()\n{\n  Tensor<float, 4, DataLayout> t_left(30, 50, 8, 31);\n  Tensor<float, 5, DataLayout> t_right(8, 31, 7, 20, 10);\n  Tensor<float, 5, DataLayout> t_result(30, 50, 7, 20, 10);\n\n  t_left.setRandom();\n  t_right.setRandom();\n\n  \n  t_left += t_left.constant(1.0f);\n  t_right += t_right.constant(1.0f);\n\n  typedef Map<Eigen::Matrix<float, Dynamic, Dynamic, DataLayout>> MapXf;\n  MapXf m_left(t_left.data(), 1500, 248);\n  MapXf m_right(t_right.data(), 248, 1400);\n  Eigen::Matrix<float, Dynamic, Dynamic, DataLayout> m_result(1500, 1400);\n\n  \n  Eigen::array<DimPair, 2> dims = {{DimPair(2, 0), DimPair(3, 1)}};\n\n  \n  t_result = t_left.contract(t_right, dims);\n  m_result = m_left * m_right;\n\n  for (int i = 0; i < t_result.dimensions().TotalSize(); i++) {\n    VERIFY(&t_result.data()[i] != &m_result.data()[i]);\n    VERIFY_IS_APPROX(t_result.data()[i], m_result.data()[i]);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_contraction.cpp", "function_name": "test_large_contraction", "index": 1215, "label": 0}
{"input": "inline long               mpreal::toLong   (mp_rnd_t mode)  const    {    return  mpfr_get_si (mpfr_srcptr(), mode);    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::toLong", "index": 1216, "label": 0}
{"input": "void GDigit::asyncWenet(int act,Wenet* wenet){\n    if(act){\n        wenetThread->post(-2,wenet);\n    }else{\n        wenetThread->post(-1,wenet);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::asyncWenet", "index": 1217, "label": 0}
{"input": "__device__ __forceinline__ void calcVecDiffCached(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, typename Dist::result_type* smem, int tid)\n    {\n        vec_distance_detail::VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, LEN_EQ_MAX_LEN>::calc(vecCached, vecGlob, len, dist, tid);\n\n        dist.reduceAll<THREAD_DIM>(smem, tid);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_distance.hpp", "function_name": "calcVecDiffCached", "index": 1218, "label": 0}
{"input": "void RenderHelper::setAudioParams(int sampleRate, int channels, int format, int bytesPerSample) {\n    audioRenderer->setAudioParams(sampleRate, channels, format, bytesPerSample);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/RenderHelper.cpp", "function_name": "RenderHelper::setAudioParams", "index": 1219, "label": 0}
{"input": "ExecutorStatsReporter<T>::ExecutorStatsReporter(const T &executor)\n    : executor_(executor),\n      threadCountRecorder_(threadCountRecorder.getRecorderWithTag(monitor::threadTagSet(executor.getName()))),\n      idleThreadCountRecorder_(idleThreadCountRecorder.getRecorderWithTag(monitor::threadTagSet(executor.getName()))),\n      activeThreadCountRecorder_(\n          activeThreadCountRecorder.getRecorderWithTag(monitor::threadTagSet(executor.getName()))),\n      pendingTaskCountRecorder_(pendingTaskCountRecorder.getRecorderWithTag(monitor::threadTagSet(executor.getName()))),\n      totalTaskCountRecorder_(totalTaskCountRecorder.getRecorderWithTag(monitor::threadTagSet(executor.getName()))) {}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/common/utils/ExecutorStatsReporter.cc", "function_name": "ExecutorStatsReporter<T>::ExecutorStatsReporter", "index": 1220, "label": 0}
{"input": "inline void Color_RgbToHls(uint8 Red, uint8 Green, uint8 Blue, float64 *Hue, float64 *Lumination, float64 *Saturation)\n{\n    float64 Delta;\n    float64 Max, Min;\n    float64 Redf, Greenf, Bluef;\n\n    Redf    = (float64)Red   / 255.0;\n    Greenf  = (float64)Green / 255.0;\n    Bluef   = (float64)Blue  / 255.0;\n\n    \n    \n    Max     = MMAX(MMAX(Red, Green), Blue)/255.0;\n    Min     = MMIN(MMIN(Red, Green), Blue)/255.0;\n\n    *Hue        = 0;\n    *Lumination = (Max + Min) / 2.0F;\n    *Saturation = 0;\n\n    if (Max == Min)\n        return ;\n\n    Delta = (Max - Min);\n\n    if (*Lumination < 0.5)\n        *Saturation = Delta / (Max + Min);\n    else\n        *Saturation = Delta / (2.0 - Max - Min);\n\n    if (Redf == Max)\n        *Hue = (Greenf - Bluef) / Delta;\n    else if (Greenf == Max)\n        *Hue = 2.0 + (Bluef - Redf) / Delta;\n    else\n        *Hue = 4.0 + (Redf - Greenf) / Delta;\n\n    *Hue /= 6.0;\n\n    if (*Hue < 0.0)\n        *Hue += 1.0;\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.h", "function_name": "Color_RgbToHls", "index": 1221, "label": 0}
{"input": "void check_qtvector_transform(const TransformType&)\n{\n  typedef typename TransformType::MatrixType MatrixType;\n  TransformType x(MatrixType::Random()), y(MatrixType::Random());\n  QVector<TransformType> v(10), w(20, y);\n  v[5] = x;\n  w[6] = v[5];\n  VERIFY_IS_APPROX(w[6], v[5]);\n  v = w;\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(w[i], v[i]);\n  }\n\n  v.resize(21);\n  v[20] = x;\n  VERIFY_IS_APPROX(v[20], x);\n  v.fill(y,22);\n  VERIFY_IS_APPROX(v[21], y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(v[22], x);\n  VERIFY((size_t)&(v[22]) == (size_t)&(v[21]) + sizeof(TransformType));\n\n  \n  \n  TransformType* ref = &w[0];\n  for(int i=0; i<30 || ((ref==&w[0]) && i<300); ++i)\n    v.push_back(w[i%w.size()]);\n  for(unsigned int i=23; int(i)<v.size(); ++i)\n  {\n    VERIFY(v[i].matrix()==w[(i-23)%w.size()].matrix());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/qtvector.cpp", "function_name": "check_qtvector_transform", "index": 1222, "label": 0}
{"input": "NdArray<std::complex<dtype>> subtract(dtype value, const NdArray<std::complex<dtype>>& inArray)\n    {\n        return value - inArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/subtract.hpp", "function_name": "subtract", "index": 1223, "label": 0}
{"input": "bool LynxEnv::FixFontSizeOverrideDirectionChangeBug() {\n  return GetBoolEnv(Key::FIX_FONT_SIZE_OVERRIDE_DIRECTION_CHANGE_BUG, true);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "03b6aacc17cd886bfb6845d872b3fe67dde666d4", "file_path": "core/renderer/utils/lynx_env.cc", "function_name": "LynxEnv::FixFontSizeOverrideDirectionChangeBug", "index": 1224, "label": 0}
{"input": "NdArray<dtype> complementaryMedianFilter1d(const NdArray<dtype>& inImageArray,\n                                               uint32                inSize,\n                                               Boundary              inBoundaryType  = Boundary::REFLECT,\n                                               dtype                 inConstantValue = 0)\n    {\n        NdArray<dtype> inImageArrayCopy(inImageArray);\n        inImageArrayCopy -= medianFilter1d(inImageArray, inSize, inBoundaryType, inConstantValue);\n\n        return inImageArrayCopy;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Filters/Filters1d/complementaryMedianFilter1d.hpp", "function_name": "complementaryMedianFilter1d", "index": 1225, "label": 0}
{"input": "EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL\n\n\n\ntemplate<int NRows, int NCols>\ninline typename FixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol,\n                                                  Index blockRows, Index blockCols)\n{\n  return typename FixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol, blockRows, blockCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "template<int NRows, int NCols>\ninline typename FixedBlockXpr<NRows,NCols>::Type block", "index": 1226, "label": 0}
{"input": "void test_simplicial_cholesky()\n{\n  CALL_SUBTEST_1(( test_simplicial_cholesky_T<double,int>() ));\n  CALL_SUBTEST_2(( test_simplicial_cholesky_T<std::complex<double>, int>() ));\n  CALL_SUBTEST_3(( test_simplicial_cholesky_T<double,long int>() ));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/simplicial_cholesky.cpp", "function_name": "test_simplicial_cholesky", "index": 1227, "label": 0}
{"input": "inline Scalar coeffLower(Index row, Index col) const {\n        const Index outer = IsRowMajor ? row : col;\n        const Index inner = IsRowMajor ? col : row;\n\n        eigen_assert(outer < outerSize());\n        eigen_assert(inner < innerSize());\n        eigen_assert(inner != outer);\n\n        if (IsRowMajor) {\n            const Index minInnerIndex = outer - m_data.lowerProfile(outer);\n            if (inner >= minInnerIndex)\n                return this->m_data.lower(m_rowStartIndex[outer] + inner - (outer - m_data.lowerProfile(outer)));\n            else\n                return Scalar(0);\n\n        } else {\n            const Index maxInnerIndex = outer + m_data.lowerProfile(outer);\n            if (inner <= maxInnerIndex)\n                return this->m_data.lower(m_rowStartIndex[outer] + (inner - outer));\n            else\n                return Scalar(0);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "coeffLower", "index": 1228, "label": 0}
{"input": "void GpuHelper::drawVectorBox(const Vector3f& position, const Vector3f& vec, const Color& color, float aspect)\n{\n    static GLUquadricObj *cylindre = gluNewQuadric();\n    glColor4fv(color.data());\n    float length = vec.norm();\n    pushMatrix(GL_MODELVIEW);\n    glTranslatef(position.x(), position.y(), position.z());\n    Vector3f ax = Matrix3f::Identity().col(2).cross(vec);\n    ax.normalize();\n    Vector3f tmp = vec;\n    tmp.normalize();\n    float angle = 180.f/M_PI * acos(tmp.z());\n    if (angle>1e-3)\n        glRotatef(angle, ax.x(), ax.y(), ax.z());\n    gluCylinder(cylindre, length/aspect, length/aspect, 0.8*length, 10, 10);\n    glTranslatef(0.0,0.0,0.8*length);\n    glScalef(4.0*length/aspect,4.0*length/aspect,4.0*length/aspect);\n    drawUnitCube();\n    popMatrix(GL_MODELVIEW);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/gpuhelper.cpp", "function_name": "GpuHelper::drawVectorBox", "index": 1229, "label": 0}
{"input": "inline\nvoid Mat_<_Tp>::forEach(const Functor& operation) const {\n    Mat::forEach<_Tp, Functor>(operation);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::forEach", "index": 1230, "label": 0}
{"input": "inline v_float32x4 v_broadcast_element(const v_float32x4& a)\n{\n    return v_setall_f32(v_extract_n<i>(a));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_broadcast_element", "index": 1231, "label": 0}
{"input": "inline const mpreal acsch (const mpreal& v, mp_rnd_t r = mpreal::get_default_rnd()) {   return asinh(1/v, r);                      }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "acsch", "index": 1232, "label": 0}
{"input": "void MemoryMappedFile::close()\n{\n#if defined(_WIN32)\n    if (fileView != nullptr)\n    {\n        UnmapViewOfFile(fileView);\n    }\n\n    if (fileMappingHandle != nullptr)\n    {\n        CloseHandle(fileMappingHandle);\n    }\n\n    if (fileHandle != nullptr)\n    {\n        CloseHandle(fileHandle);\n    }\n#else\n    if (fileView != MAP_FAILED)\n    {\n        munmap(fileView, fileSize);\n    }\n\n    if (fileHandle != -1)\n    {\n        ::close(fileHandle);\n    }\n#endif\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "cd6fcb33bdcaff37c8c9d2083c7951e1d73ae9da", "file_path": "XenonUtils/memory_mapped_file.cpp", "function_name": "MemoryMappedFile::close", "index": 1233, "label": 0}
{"input": "int getClusterCenters(Matrix<CentersType>& centers)\n    {\n        int numClusters = centers.rows;\n        if (numClusters<1) {\n            FLANN_THROW(cv::Error::StsBadArg, \"Number of clusters must be at least 1\");\n        }\n\n        DistanceType variance;\n        KMeansNodePtr* clusters = new KMeansNodePtr[numClusters];\n\n        int clusterCount = getMinVarianceClusters(root_[0], clusters, numClusters, variance);\n\n        Logger::info(\"Clusters requested: %d, returning %d\\n\",numClusters, clusterCount);\n\n        for (int i=0; i<clusterCount; ++i) {\n            CentersType* center = clusters[i]->pivot;\n            for (size_t j=0; j<veclen_; ++j) {\n                centers[i][j] = center[j];\n            }\n        }\n        delete[] clusters;\n\n        return clusterCount;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kmeans_index.h", "function_name": "centers", "index": 1234, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half powh(const Eigen::half& a, const Eigen::half& b) {\n  return Eigen::half(::powf(float(a), float(b)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/Half.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half powh", "index": 1235, "label": 0}
{"input": "inline const mpreal asech (const mpreal& v, mp_rnd_t r = mpreal::get_default_rnd()) {   return acosh(1/v, r);                      }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "asech", "index": 1236, "label": 0}
{"input": "inline AllocatedStringPtr ConstSessionImpl<T>::GetOutputNameAllocated(size_t index, OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().SessionGetOutputName(this->p_, index, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionImpl<T>::GetOutputNameAllocated", "index": 1237, "label": 0}
{"input": "inline typename SelfAdjointView<MatrixType, UpLo>::EigenvaluesReturnType\nSelfAdjointView<MatrixType, UpLo>::eigenvalues() const\n{\n  PlainObject thisAsMatrix(*this);\n  return SelfAdjointEigenSolver<PlainObject>(thisAsMatrix, false).eigenvalues();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h", "function_name": "SelfAdjointView<MatrixType, UpLo>::eigenvalues", "index": 1238, "label": 0}
{"input": "void test_cxx11_tensor_patch()\n{\n   CALL_SUBTEST(test_simple_patch<ColMajor>());\n   CALL_SUBTEST(test_simple_patch<RowMajor>());\n   \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_patch.cpp", "function_name": "test_cxx11_tensor_patch", "index": 1239, "label": 0}
{"input": "const TensorScanProdOp\n    cumprod(const Index& axis, bool exclusive = false) const {\n      return TensorScanProdOp(derived(), axis, exclusive);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "exclusive", "index": 1240, "label": 0}
{"input": "inline AllocatedStringPtr Ort::ModelMetadata::GetDescriptionAllocated(OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().ModelMetadataGetDescription(p_, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Ort::ModelMetadata::GetDescriptionAllocated", "index": 1241, "label": 0}
{"input": "void test_cxx11_tensor_assign()\n{\n  CALL_SUBTEST(test_1d());\n  CALL_SUBTEST(test_2d());\n  CALL_SUBTEST(test_3d());\n  CALL_SUBTEST(test_same_type());\n  CALL_SUBTEST(test_auto_resize());\n  CALL_SUBTEST(test_compound_assign());\n  CALL_SUBTEST(test_std_initializers_tensor());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_assign.cpp", "function_name": "test_cxx11_tensor_assign", "index": 1242, "label": 0}
{"input": "static void test_ref_of_ref()\n{\n  Tensor<float, 3> input(3,5,7);\n  input.setRandom();\n\n  TensorRef<Tensor<float, 3>> ref(input);\n  TensorRef<Tensor<float, 3>> ref_of_ref(ref);\n  TensorRef<Tensor<float, 3>> ref_of_ref2;\n  ref_of_ref2 = ref;\n\n  VERIFY_IS_EQUAL(ref_of_ref.data(), input.data());\n  VERIFY_IS_EQUAL(ref_of_ref.dimension(0), 3);\n  VERIFY_IS_EQUAL(ref_of_ref.dimension(1), 5);\n  VERIFY_IS_EQUAL(ref_of_ref.dimension(2), 7);\n\n  VERIFY_IS_EQUAL(ref_of_ref2.data(), input.data());\n  VERIFY_IS_EQUAL(ref_of_ref2.dimension(0), 3);\n  VERIFY_IS_EQUAL(ref_of_ref2.dimension(1), 5);\n  VERIFY_IS_EQUAL(ref_of_ref2.dimension(2), 7);\n\n  for (int i = 0; i < 3; ++i) {\n    for (int j = 0; j < 5; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_EQUAL(ref_of_ref(i,j,k), input(i,j,k));\n        VERIFY_IS_EQUAL(ref_of_ref2(i,j,k), input(i,j,k));\n     }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_ref_of_ref", "index": 1243, "label": 0}
{"input": "JNIEXPORT jint JNICALL Java_com_btows_ncnntest_SCRFDNcnn_reset(JNIEnv* env, jobject thiz){\n        \n        \n        g_digit->set_window(NULL);\n        return 0;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_reset", "index": 1244, "label": 0}
{"input": "void test_hessenberg()\n{\n  CALL_SUBTEST_1(( hessenberg<std::complex<double>,1>() ));\n  CALL_SUBTEST_2(( hessenberg<std::complex<double>,2>() ));\n  CALL_SUBTEST_3(( hessenberg<std::complex<float>,4>() ));\n  CALL_SUBTEST_4(( hessenberg<float,Dynamic>(internal::random<int>(1,EIGEN_TEST_MAX_SIZE)) ));\n  CALL_SUBTEST_5(( hessenberg<std::complex<double>,Dynamic>(internal::random<int>(1,EIGEN_TEST_MAX_SIZE)) ));\n\n  \n  CALL_SUBTEST_6(HessenbergDecomposition<MatrixXf>(10));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/hessenberg.cpp", "function_name": "test_hessenberg", "index": 1245, "label": 0}
{"input": "inline long double        mpreal::toLDouble(mp_rnd_t mode)  const    {    return  mpfr_get_ld (mpfr_srcptr(), mode);    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::toLDouble", "index": 1246, "label": 0}
{"input": "size_t TotalBytes(hwy::Span<const hwy::uint128_t>& keys, BlobReader& reader) {\n  size_t total_bytes = 0;\n  for (const hwy::uint128_t key : keys) {\n    total_bytes += reader.BlobSize(key);\n  }\n  return total_bytes;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f31e12e63b01ccc69280b14c46bc88774d359d27", "file_path": "compression/blob_compare.cc", "function_name": "TotalBytes", "index": 1247, "label": 0}
{"input": "JacobiSVD<typename MatrixBase<Derived>::PlainObject>\nMatrixBase<Derived>::jacobiSvd(unsigned int computationOptions) const\n{\n  return JacobiSVD<PlainObject>(*this, computationOptions);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/JacobiSVD.h", "function_name": "MatrixBase<Derived>::jacobiSvd", "index": 1248, "label": 0}
{"input": "MatrixType MatrixLogarithmAtomic<MatrixType>::compute(const MatrixType& A)\n{\n  using std::log;\n  MatrixType result(A.rows(), A.rows());\n  if (A.rows() == 1)\n    result(0,0) = log(A(0,0));\n  else if (A.rows() == 2)\n    matrix_log_compute_2x2(A, result);\n  else\n    matrix_log_compute_big(A, result);\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixLogarithm.h", "function_name": "MatrixLogarithmAtomic<MatrixType>::compute", "index": 1249, "label": 0}
{"input": "inline double\n        simpson(const double low, const double high, const uint32 n, const std::function<double(double)>& f) noexcept\n    {\n        const double width = (high - low) / static_cast<double>(n);\n\n        double simpson_integral = 0.;\n        for (uint32 step = 0; step < n; ++step)\n        {\n            const double x1 = low + static_cast<double>(step) * width;\n            const double x2 = low + static_cast<double>(step + 1) * width;\n\n            simpson_integral += (x2 - x1) / 6. * (f(x1) + 4. * f(0.5 * (x1 + x2)) + f(x2));\n        }\n\n        return simpson_integral;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Integrate/simpson.hpp", "function_name": "simpson", "index": 1250, "label": 0}
{"input": "inline\nHostMem HostMem::clone() const\n{\n    HostMem m(size(), type(), alloc_type);\n    createMatHeader().copyTo(m);\n    return m;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "HostMem::clone", "index": 1251, "label": 0}
{"input": "TestingCacheGenerator(const std::string &source_url,\n                        std::shared_ptr<const Buffer> src_buffer,\n                        std::string file)\n      : CacheGenerator(source_url, std::move(src_buffer)), file(file) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/js_cache_manager_unittest.cc", "function_name": "TestingCacheGenerator", "index": 1252, "label": 0}
{"input": "CV_INLINE  CvTermCriteria  cvTermCriteria( int type, int max_iter, double epsilon )\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvTermCriteria t = { type, max_iter, (float)epsilon};\n#else\n    CvTermCriteria t(type, max_iter, epsilon);\n#endif\n    return t;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvTermCriteria  cvTermCriteria", "index": 1253, "label": 0}
{"input": "IIR_I::~IIR_I()\n{\n    delete[] m_pNum;\n    delete[] m_pDen;\n    delete[] m_px;\n    delete[] m_py;\n    m_pNum = NULL;\n    m_pDen = NULL;\n    m_px = NULL;\n    m_py = NULL;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/iir_filter.hpp", "function_name": "IIR_I::~IIR_I", "index": 1254, "label": 0}
{"input": "inline void Quat<T>::assertNormal(T eps) const\n{\n    if (!isNormal(eps))\n        CV_Error(Error::StsBadArg, \"Quaternion should be normalized\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::assertNormal", "index": 1255, "label": 0}
{"input": "inline const mpreal besseljn (long n, const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd())\n{\n    mpreal  y(0, x.getPrecision());\n    mpfr_jn(y.mpfr_ptr(), n, x.mpfr_srcptr(), r);\n    return y;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "besseljn", "index": 1256, "label": 0}
{"input": "void JniHelper::callStaticVoidMethod(jclass cls, jmethodID methodId, jint arg1) {\n    if (sJavaVM == nullptr) {\n        LOGE(TAG, \"sJavaVM is nullptr\");\n        return;\n    }\n\n    JNIEnv *env = nullptr;\n    bool attached = false;\n    switch (sJavaVM->GetEnv((void **) &env, JNI_VERSION_1_4)) {\n        case JNI_OK:\n            break;\n        case JNI_EDETACHED:\n            if (sJavaVM->AttachCurrentThread(&env, nullptr) != 0) {\n                LOGE(TAG, \"Could not attach current thread\");\n            }\n            attached = true;\n            break;\n        case JNI_EVERSION:\n            LOGE(TAG, \"Invalid java version\");\n            break;\n        default:\n            break;\n    }\n\n    if (env != nullptr) {\n        env->CallStaticVoidMethod(cls, methodId, arg1);\n    }\n\n    if (attached) {\n        sJavaVM->DetachCurrentThread();\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/JniHelper.cpp", "function_name": "JniHelper::callStaticVoidMethod", "index": 1257, "label": 0}
{"input": "typename ListOfClusters::iterator matrix_function_find_cluster(Index key, ListOfClusters& clusters)\n{\n  typename std::list<Index>::iterator j;\n  for (typename ListOfClusters::iterator i = clusters.begin(); i != clusters.end(); ++i) {\n    j = std::find(i->begin(), i->end(), key);\n    if (j != i->end())\n      return i;\n  }\n  return clusters.end();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "matrix_function_find_cluster", "index": 1258, "label": 0}
{"input": "NdArray<dtype> asarray(dtype* ptr, uint32 numRows, uint32 numCols, BoolType takeOwnership) noexcept\n    {\n        return NdArray<dtype>(ptr, numRows, numCols, takeOwnership);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/asarray.hpp", "function_name": "asarray", "index": 1259, "label": 0}
{"input": "StarlightSize StarlightBaselineFuncForAndroid(void* instance, float width,\n                                              SLNodeMeasureMode width_mode,\n                                              float height,\n                                              SLNodeMeasureMode height_mode) {\n  starlight::SLMeasureDelegateAndroid* delegate =\n      static_cast<starlight::SLMeasureDelegateAndroid*>(instance);\n  return delegate->Measure(width, width_mode, height, height_mode);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "008159012885478d92b89ffe2d5b1d73dab8ed09", "file_path": "core/services/starlight_standalone/android/starlight_android.cc", "function_name": "StarlightBaselineFuncForAndroid", "index": 1260, "label": 0}
{"input": "void test_stable_norm()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( stable_norm(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( stable_norm(Vector4d()) );\n    CALL_SUBTEST_3( stable_norm(VectorXd(internal::random<int>(10,2000))) );\n    CALL_SUBTEST_4( stable_norm(VectorXf(internal::random<int>(10,2000))) );\n    CALL_SUBTEST_5( stable_norm(VectorXcd(internal::random<int>(10,2000))) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stable_norm.cpp", "function_name": "test_stable_norm", "index": 1261, "label": 0}
{"input": "ForwardIt max_element(ForwardIt first, ForwardIt last, Compare comp) CONDITIONAL_NO_EXCEPT\n    {\n        return std::max_element(\n#ifdef PARALLEL_ALGORITHMS_SUPPORTED\n            std::execution::par_unseq,\n#endif\n            first,\n            last,\n            comp);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp", "function_name": "max_element", "index": 1262, "label": 0}
{"input": "inline void ClientImpl::set_socket_options(SocketOptions socket_options) {\n  socket_options_ = std::move(socket_options);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_socket_options", "index": 1263, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool all_indices_known_statically() {\n  return all_indices_known_statically_impl<T>::run();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "all_indices_known_statically", "index": 1264, "label": 0}
{"input": "void test2dRotation(const T& tol)\n{\n  Matrix<T,2,2> A, B, C;\n  T angle, c, s;\n\n  A << 0, 1, -1, 0;\n  MatrixPower<Matrix<T,2,2> > Apow(A);\n\n  for (int i=0; i<=20; ++i) {\n    angle = std::pow(T(10), (i-10) / T(5.));\n    c = std::cos(angle);\n    s = std::sin(angle);\n    B << c, s, -s, c;\n\n    C = Apow(std::ldexp(angle,1) / T(EIGEN_PI));\n    std::cout << \"test2dRotation: i = \" << i << \"   error powerm = \" << relerr(C,B) << '\\n';\n    VERIFY(C.isApprox(B, tol));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_power.cpp", "function_name": "test2dRotation", "index": 1265, "label": 0}
{"input": "EXTERN_C_START static napi_value Init(napi_env env, napi_value exports) {\n  LynxNapiInit(env, exports);\n  lynx::tasm::harmony::XElementRegistry::Initialize();\n  return exports;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_harmony/entry.cc", "function_name": "Init", "index": 1266, "label": 0}
{"input": "inline cl_sampler clCreateSampler(cl_context p0, cl_bool p1, cl_addressing_mode p2, cl_filter_mode p3, cl_int* p4) { return clCreateSampler_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateSampler", "index": 1267, "label": 0}
{"input": "void test_half_float()\n{\n  CALL_SUBTEST(test_conversion());\n  CALL_SUBTEST(test_numtraits());\n  CALL_SUBTEST(test_arithmetic());\n  CALL_SUBTEST(test_comparison());\n  CALL_SUBTEST(test_basic_functions());\n  CALL_SUBTEST(test_trigonometric_functions());\n  CALL_SUBTEST(test_array());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/half_float.cpp", "function_name": "test_half_float", "index": 1268, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet initializePacket() const {\n    return pset1<Packet>(initialize());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFunctors.h", "function_name": "initializePacket", "index": 1269, "label": 0}
{"input": "inline size_t Response::get_header_value_count(const std::string &key) const {\n  auto r = headers.equal_range(key);\n  return static_cast<size_t>(std::distance(r.first, r.second));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Response::get_header_value_count", "index": 1270, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Packet2d pgather<double, Packet2d>(const double* from, Index stride)\n{\n  double EIGEN_ALIGN16 af[2];\n  af[0] = from[0*stride];\n  af[1] = from[1*stride];\n return pload<Packet2d>(af);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "Packet2d", "index": 1271, "label": 0}
{"input": "return_type operator() (std::size_t Index, VariantValue&& value, Args&& ...args)\n        {\n            return static_cast<Impl*>(this)-> visit(Index,\n                                                std::forward<VariantValue>(value),\n                                                std::forward<Args>(args)...);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "operator()", "index": 1272, "label": 0}
{"input": "explicit __host__ __device__ __forceinline__ IntegerAreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)\n            : src(src_), scale_x(scale_x_), scale_y(scale_y_), scale(1.f / (scale_x * scale_y)) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/filters.hpp", "function_name": "IntegerAreaFilter", "index": 1273, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline void conditional_aligned_delete_auto(T *ptr, std::size_t size)\n{\n  if(NumTraits<T>::RequireInitialization)\n    destruct_elements_of_array<T>(ptr, size);\n  conditional_aligned_free<Align>(ptr);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "conditional_aligned_delete_auto", "index": 1274, "label": 0}
{"input": "void GDigit::asyncCurl(int act,NetCurl* curl){\n    if(act){\n        curlThread->post(-1,curl);\n    }else{\n        curlThread->post(1,curl);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::asyncCurl", "index": 1275, "label": 0}
{"input": "static inline void run(const Expression &expr, const SyclDevice &device) {\n    \n    TensorSycl::run(expr, device);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorExecutor.h", "function_name": "expr", "index": 1276, "label": 0}
{"input": "~MaxSizeVector() {\n    for (size_t i = 0; i < size_; ++i) {\n      data_[i].~T();\n    }\n    internal::aligned_free(data_);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/MaxSizeVector.h", "function_name": "~MaxSizeVector", "index": 1277, "label": 0}
{"input": "inline Quat<T> operator+(const Quat<T>& q, const T a)\n{\n    return Quat<T>(q.w + a, q.x, q.y, q.z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "operator+", "index": 1278, "label": 0}
{"input": "inline std::string encode_query_param(const std::string &value) {\n  std::ostringstream escaped;\n  escaped.fill('0');\n  escaped << std::hex;\n\n  for (auto c : value) {\n    if (std::isalnum(static_cast<uint8_t>(c)) || c == '-' || c == '_' ||\n        c == '.' || c == '!' || c == '~' || c == '*' || c == '\\'' || c == '(' ||\n        c == ')') {\n      escaped << c;\n    } else {\n      escaped << std::uppercase;\n      escaped << '-'0 << std::setw(2)\n              << static_cast<int>(static_cast<unsigned char>(c));\n      escaped << std::nouppercase;\n    }\n  }\n\n  return escaped.str();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "encode_query_param", "index": 1279, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline IndexDest convert_index(const IndexSrc& idx) {\n  \n  eigen_internal_assert(idx <= NumTraits<IndexDest>::highest() && \"Index value to big for target type\");\n  return IndexDest(idx);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/XprHelper.h", "function_name": "convert_index", "index": 1280, "label": 0}
{"input": "inline const mpreal exp10 (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(exp10);    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "exp10", "index": 1281, "label": 0}
{"input": "void NoAudioProcessor::Feed(const std::vector<int16_t>& data) {\n    if (!is_running_ || !output_callback_) {\n        return;\n    }\n    \n    output_callback_(std::vector<int16_t>(data));\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/no_audio_processor.cc", "function_name": "NoAudioProcessor::Feed", "index": 1282, "label": 0}
{"input": "inline void umfpack_free_symbolic(void **Symbolic, std::complex<double>)\n{ umfpack_zi_free_symbolic(Symbolic); *Symbolic = 0; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_free_symbolic", "index": 1283, "label": 0}
{"input": "inline cl_int clGetContextInfo(cl_context p0, cl_context_info p1, size_t p2, void* p3, size_t* p4) { return clGetContextInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetContextInfo", "index": 1284, "label": 0}
{"input": "void eval(const Tensor<float, 3>& input1, const Tensor<float, 3>& input2,\n            Output& output, const Device& device) const\n  {\n    typedef Tensor<float, 3>::DimensionPair DimPair;\n    array<DimPair, 1> dims;\n    dims[0] = DimPair(1, 0);\n    for (int i = 0; i < output.dimension(2); ++i) {\n      output.template chip<2>(i).device(device) = input1.chip<2>(i).contract(input2.chip<2>(i), dims);\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_custom_op.cpp", "function_name": "eval", "index": 1285, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline typename ConstNRowsBlockXpr<N>::Type bottomRows(Index n = N) const\n{\n  return typename ConstNRowsBlockXpr<N>::Type(derived(), rows() - n, 0, n, cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "bottomRows", "index": 1286, "label": 0}
{"input": "void test_none_aligned_helper(Scalar *array, int size)\n{\n  EIGEN_UNUSED_VARIABLE(array);\n  EIGEN_UNUSED_VARIABLE(size);\n  VERIFY(internal::packet_traits<Scalar>::size == 1 || internal::first_default_aligned(array, size) == size);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/first_aligned.cpp", "function_name": "test_none_aligned_helper", "index": 1287, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::AndReducer, const Dims, const TensorConversionOp<bool, const Derived> >\n    all(const Dims& dims) const {\n      return cast<bool>().reduce(dims, internal::AndReducer());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::AndReducer, const Dims, const TensorConversionOp<bool, const Derived> >\n    all", "index": 1288, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void butterfly_4(ComplexScalar* data) {\n    ComplexScalar tmp[4];\n    tmp[0] = data[0] + data[1];\n    tmp[1] = data[0] - data[1];\n    tmp[2] = data[2] + data[3];\n    if (Dir == FFT_FORWARD) {\n      tmp[3] = ComplexScalar(0.0, -1.0) * (data[2] - data[3]);\n    } else {\n      tmp[3] = ComplexScalar(0.0, 1.0) * (data[2] - data[3]);\n    }\n    data[0] = tmp[0] + tmp[2];\n    data[1] = tmp[1] + tmp[3];\n    data[2] = tmp[0] - tmp[2];\n    data[3] = tmp[1] - tmp[3];\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h", "function_name": "butterfly_4", "index": 1289, "label": 0}
{"input": "void OffscreenCanvasRenderingContext2D::fill(Path2D&, StringView)\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::fill(Path2D&, StringView)\");\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::fill", "index": 1290, "label": 0}
{"input": "CV_CPU_OPTIMIZATION_HAL_NAMESPACE_BEGIN\n\n\n\ninline __m256i _v256_setr_b(char v0, char v1, char v2, char v3, char v4, char v5, char v6, char v7, char v8,  char v9,\n                    char v10, char v11, char v12, char v13, char v14, char v15, char v16, char v17, char v18, char v19,\n                    char v20, char v21, char v22, char v23, char v24, char v25, char v26, char v27, char v28, char v29,\n                    char v30, char v31)\n{\n    return (__m256i)v32i8{ v0, v1, v2, v3, v4, v5, v6, v7, v8, v9,\n                           v10, v11, v12, v13, v14, v15, v16, v17, v18, v19,\n                           v20, v21, v22, v23, v24, v25, v26, v27, v28, v29,\n                           v30, v31 };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_setr_b", "index": 1291, "label": 0}
{"input": "NdArray<dtype> nancumprod(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = dtype{ 1 };\n                                     };\n                                 });\n\n        return cumprod(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nancumprod.hpp", "function_name": "nancumprod", "index": 1292, "label": 0}
{"input": "static void test_concatenation_as_lvalue()\n{\n  Tensor<int, 2> t1(2, 3);\n  Tensor<int, 2> t2(2, 3);\n  t1.setRandom();\n  t2.setRandom();\n\n  Tensor<int, 2> result(4, 3);\n  result.setRandom();\n  t1.concatenate(t2, 0) = result;\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      VERIFY_IS_EQUAL(t1(i, j), result(i, j));\n      VERIFY_IS_EQUAL(t2(i, j), result(i+2, j));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_concatenation.cpp", "function_name": "test_concatenation_as_lvalue", "index": 1293, "label": 0}
{"input": "void UIBaseInput::Blur(\n    const lepus::Value& args,\n    base::MoveOnlyClosure<void, int32_t, const lepus::Value&> callback) {\n  NodeManager::Instance().SetAttributeWithNumberValue(\n      input_node_, GetEditingAttributeType(), 0);\n  NodeManager::Instance().SetAttributeWithNumberValue(input_node_,\n                                                      NODE_FOCUS_STATUS, 0);\n  callback(LynxGetUIResult::SUCCESS, lepus::Value());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::Blur", "index": 1294, "label": 0}
{"input": "NdArray<bool> logical_xor(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        return broadcast::broadcaster<bool>(inArray1,\n                                            inArray2,\n                                            [](dtype inValue1, dtype inValue2) -> bool {\n                                                return !utils::essentiallyEqual(inValue1, dtype{ 0 }) !=\n                                                       !utils::essentiallyEqual(inValue2, dtype{ 0 });\n                                            });\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/logical_xor.hpp", "function_name": "logical_xor", "index": 1295, "label": 0}
{"input": "int Sy6970::GetBatteryLevel() {\n    int level = 0;\n    \n    int battery_minimum_voltage = 3200;\n    int battery_voltage = GetBatteryVoltage();\n    int charge_voltage_limit = GetChargeTargetVoltage();\n    \n    if (battery_voltage > battery_minimum_voltage && charge_voltage_limit > battery_minimum_voltage) {\n        level = (((float) battery_voltage - (float) battery_minimum_voltage) / ((float) charge_voltage_limit - (float) battery_minimum_voltage)) * 100.0;\n    }\n    \n    if (level > 100) {\n        level = 100;\n    }\n    return level;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "0e6375e34702eed6a40d8fce45443381b6090bac", "file_path": "main/boards/common/sy6970.cc", "function_name": "Sy6970::GetBatteryLevel", "index": 1296, "label": 0}
{"input": "void AudioTrackJni::start(int sampleRate, int sampleFormat, int channels, int bytesPerSample) {\n    LOGI(TAG, \"start %d %d %d %d\", sampleRate, sampleFormat, channels, bytesPerSample);\n    bool attach = JniHelper::attachCurrentThread();\n    if (audioTrackObj != nullptr && audioTrackStart != nullptr) {\n        JniHelper::callVoidMethod(audioTrackObj, audioTrackStart, sampleRate, sampleFormat,\n                                  channels, bytesPerSample);\n    }\n    if (attach) {\n        JniHelper::detachCurrentThread();\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/AudioTrackJni.cpp", "function_name": "AudioTrackJni::start", "index": 1297, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half floorh(const Eigen::half& a) {\n  return Eigen::half(::floorf(float(a)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/Half.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half floorh", "index": 1298, "label": 0}
{"input": "void matrix_sqrt_quasi_triangular_2x2_diagonal_block(const MatrixType& T, typename MatrixType::Index i, ResultType& sqrtT)\n{\n  \n  \n  typedef typename traits<MatrixType>::Scalar Scalar;\n  Matrix<Scalar,2,2> block = T.template block<2,2>(i,i);\n  EigenSolver<Matrix<Scalar,2,2> > es(block);\n  sqrtT.template block<2,2>(i,i)\n    = (es.eigenvectors() * es.eigenvalues().cwiseSqrt().asDiagonal() * es.eigenvectors().inverse()).real();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixSquareRoot.h", "function_name": "matrix_sqrt_quasi_triangular_2x2_diagonal_block", "index": 1299, "label": 0}
{"input": "void test_multithreaded_reductions() {\n  const int num_threads = internal::random<int>(3, 11);\n  ThreadPool thread_pool(num_threads);\n  Eigen::ThreadPoolDevice thread_pool_device(&thread_pool, num_threads);\n\n  const int num_rows = internal::random<int>(13, 732);\n  const int num_cols = internal::random<int>(13, 732);\n  Tensor<float, 2, DataLayout> t1(num_rows, num_cols);\n  t1.setRandom();\n\n  Tensor<float, 0, DataLayout> full_redux;\n  full_redux = t1.sum();\n\n  Tensor<float, 0, DataLayout> full_redux_tp;\n  full_redux_tp.device(thread_pool_device) = t1.sum();\n\n  \n  \n  VERIFY_IS_APPROX(full_redux(), full_redux_tp());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_thread_pool.cpp", "function_name": "test_multithreaded_reductions", "index": 1300, "label": 0}
{"input": "Result(std::unique_ptr<Response> &&res, Error err,\n         Headers &&request_headers = Headers{})\n      : res_(std::move(res)), err_(err),\n        request_headers_(std::move(request_headers)) {}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Result", "index": 1301, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorSlicingOp<const StartIndices, const Sizes, const Derived>\n    slice(const StartIndices& startIndices, const Sizes& sizes) const {\n      return TensorSlicingOp<const StartIndices, const Sizes, const Derived>(derived(), startIndices, sizes);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorSlicingOp<const StartIndices, const Sizes, const Derived>\n    slice", "index": 1302, "label": 0}
{"input": "inline Result ClientImpl::Options(const std::string &path,\n                                  const Headers &headers) {\n  Request req;\n  req.method = \"OPTIONS\";\n  req.headers = headers;\n  req.path = path;\n\n  return send_(std::move(req));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::Options", "index": 1303, "label": 0}
{"input": "void setEigenv(const Index neig) \n  {\n    m_neig = neig;\n    if (neig+1 > m_maxNeig) m_maxNeig = neig+1; \n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/IterativeSolvers/DGMRES.h", "function_name": "neig", "index": 1304, "label": 0}
{"input": "void transform_associativity_left(const A1& a1, const A2& a2, const P& p, const Q& q, const V& v, const H& h)\n{\n  VERIFY_IS_APPROX( q*(a1*v), (q*a1)*v );\n  VERIFY_IS_APPROX( q*(a2*v), (q*a2)*v );\n  VERIFY_IS_APPROX( q*(p*h).hnormalized(),  ((q*p)*h).hnormalized() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_transformations.cpp", "function_name": "transform_associativity_left", "index": 1305, "label": 0}
{"input": "inline cl_int clEnqueueWriteImage(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, size_t p5, size_t p6, const void* p7, cl_uint p8, const cl_event* p9, cl_event* p10) { return clEnqueueWriteImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueWriteImage", "index": 1306, "label": 0}
{"input": "void AudioFFT::fft(const float* data, float* re, float* im)\n    {\n      _impl->fft(data, re, im);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "AudioFFT::fft", "index": 1307, "label": 0}
{"input": "napi_value InspectorOwnerHarmony::GetSessionId(napi_env env,\n                                               napi_callback_info info) {\n  napi_value js_this;\n  size_t argc = 0;\n  napi_get_cb_info(env, info, &argc, nullptr, &js_this, nullptr);\n  InspectorOwnerHarmony *owner_harmony_ptr = nullptr;\n  napi_status status =\n      napi_unwrap(env, js_this, reinterpret_cast<void **>(&owner_harmony_ptr));\n  NAPI_THROW_IF_FAILED_NULL(env, status,\n                            \"InspectorOwnerHarmony GetSessionId failed!\");\n  napi_value result;\n  if (!owner_harmony_ptr) {\n    LOGE(\"napi unwrap object is null when GetSessionId\");\n    napi_create_int32(env, -1, &result);\n  } else {\n    napi_create_int32(env, owner_harmony_ptr->owner_->GetSessionId(), &result);\n  }\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/inspector_owner_harmony.cc", "function_name": "InspectorOwnerHarmony::GetSessionId", "index": 1308, "label": 0}
{"input": "[[nodiscard]] const_reverse_column_iterator crcolend(size_type inCol) const\n        {\n            if (inCol >= shape_.cols)\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"input col is greater than the number of cols in the array.\");\n            }\n\n            return crcolbegin(inCol) += shape_.rows;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inCol", "index": 1309, "label": 0}
{"input": "inline v_float32x4 v_cvt_f32(const v_float64x2& a, const v_float64x2& b)\n{\n    double a_[2], b_[2];\n    wasm_v128_store(a_, a.val);\n    wasm_v128_store(b_, b.val);\n    float c_[4];\n    c_[0] = (float)(a_[0]);\n    c_[1] = (float)(a_[1]);\n    c_[2] = (float)(b_[0]);\n    c_[3] = (float)(b_[1]);\n    return v_float32x4(wasm_v128_load(c_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_cvt_f32", "index": 1310, "label": 0}
{"input": "DevToolEnvHarmony::DevToolEnvHarmony() {\n  if (!InitPreferences()) {\n    LOGW(\"InitPreferences failed\");\n  }\n\n  for (auto &it : s_persistent_default_value_) {\n    std::string key = it.first;\n    bool defaultValue = it.second;\n    bool value = false;\n    auto result = OH_Preferences_GetBool(preference_, key.c_str(), &value);\n    if (result == OH_Preferences_ErrCode::PREFERENCES_OK) {\n      tasm::LynxEnv::GetInstance().SetBoolLocalEnv(key, value);\n    } else {\n      tasm::LynxEnv::GetInstance().SetBoolLocalEnv(key, defaultValue);\n    }\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::DevToolEnvHarmony", "index": 1311, "label": 0}
{"input": "uint64_t timer_msstamp() {\n    struct timespec ts;\n    clock_gettime(CLOCK_MONOTONIC, &ts);\n    return (ts.tv_sec*1000l) + (ts.tv_nsec/CLOCKS_PER_SEC);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/face_utils.cpp", "function_name": "timer_msstamp", "index": 1312, "label": 0}
{"input": "EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL\n\n\n\ntemplate<int CRows, int CCols>\nEIGEN_DEVICE_FUNC\ninline typename FixedBlockXpr<CRows,CCols>::Type bottomRightCorner()\n{\n  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, cols() - CCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "template<int CRows, int CCols>\nEIGEN_DEVICE_FUNC\ninline typename FixedBlockXpr<CRows,CCols>::Type bottomRightCorner", "index": 1313, "label": 0}
{"input": "GlesProgram::GlesProgram() {\n    m_arrTexture[0] =GL_TEXTURE0;\n    m_arrTexture[1] =GL_TEXTURE1;\n    m_arrTexture[2] =GL_TEXTURE2;\n    m_arrTexture[3] =GL_TEXTURE3;\n    m_arrTexture[4] =GL_TEXTURE4;\n    m_arrTexture[5] =GL_TEXTURE5;\n    m_arrTexture[6] =GL_TEXTURE6;\n    m_arrTexture[7] =GL_TEXTURE7;\n    m_arrTexture[8] =GL_TEXTURE8;\n    m_arrTexture[9] =GL_TEXTURE9;\n    for(int k=0;k<10;k++){\n        m_arrIndex[k]=k;\n        m_arrHandle[k]=-1;\n    }\n    SQUARE_VERTICES = new GLfloat[8]{-1.0f, -1.0f, 1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f};\n    COORD_VERTICES = new GLfloat[8]{0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f};\n    MVP_MATRIX = new GLfloat[16]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/GlesProgram.cpp", "function_name": "GlesProgram::GlesProgram", "index": 1314, "label": 0}
{"input": "void testHyperbolicFunctions(const MatrixType& A)\n{\n  \n  \n  VERIFY_IS_APPROX_ABS(A.sinh(), (A.exp() - (-A).exp()) / 2);\n  VERIFY_IS_APPROX_ABS(A.cosh(), (A.exp() + (-A).exp()) / 2);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_function.cpp", "function_name": "testHyperbolicFunctions", "index": 1315, "label": 0}
{"input": "static gapi::fluid::BorderOpt get_border_impl(const GMetaArgs &metas,\n                                                  const cv::GArgs &in_args,\n                                                  cv::detail::Seq<IIs...>)\n    {\n        return util::make_optional(Impl::getBorder(cv::detail::get_in_meta<Ins>(metas, in_args, IIs)...));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/fluid/gfluidkernel.hpp", "function_name": "get_border_impl", "index": 1316, "label": 0}
{"input": "inline\ndouble Point_<_Tp>::cross(const Point_& pt) const\n{\n    return (double)x*pt.y - (double)y*pt.x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Point_<_Tp>::cross", "index": 1317, "label": 0}
{"input": "internal::packet_traits<int>::type packetOp(\n      Eigen::DenseIndex packet_location, Eigen::DenseIndex  = 0) const {\n    const int packetSize = internal::packet_traits<int>::size;\n    EIGEN_ALIGN_MAX int values[packetSize];\n    for (int i = 0; i < packetSize; ++i) {\n      values[i] = static_cast<int>(3 * (packet_location + i));\n    }\n    return internal::pload<typename internal::packet_traits<int>::type>(values);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_random.cpp", "function_name": "Eigen::DenseIndex", "index": 1318, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstRowsBlockXpr bottomRows(Index n) const\n{\n  return ConstRowsBlockXpr(derived(), rows() - n, 0, n, cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstRowsBlockXpr bottomRows", "index": 1319, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half __ldg(const Eigen::half* ptr) {\n  return Eigen::half_impl::raw_uint16_to_half(\n      __ldg(reinterpret_cast<const unsigned short*>(ptr)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/Half.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half __ldg", "index": 1320, "label": 0}
{"input": "void looper::quit() {\n  LOGV(\"quit\");\n  loopermessage *msg = new loopermessage();\n  msg->what = 0;\n  msg->obj = NULL;\n  msg->next = NULL;\n  msg->quit = true;\n  addmsg(msg, false);\n  void *retval;\n  pthread_join(worker, &retval);\n  sem_destroy(&headdataavailable);\n  sem_destroy(&headwriteprotect);\n  running = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/looper.cpp", "function_name": "looper::quit", "index": 1321, "label": 0}
{"input": "inline std::string Result::get_request_header_value(const std::string &key,\n                                                    size_t id) const {\n  return detail::get_header_value(request_headers_, key, id, \"\");\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Result::get_request_header_value", "index": 1322, "label": 0}
{"input": "void RotationWarperBase<P>::warpBackward(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,\n                                         Size dst_size, OutputArray dst)\n{\n    projector_.setCameraParams(K, R);\n\n    Point src_tl, src_br;\n    detectResultRoi(dst_size, src_tl, src_br);\n\n    Size size = src.size();\n    CV_Assert(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height);\n\n    Mat xmap(dst_size, CV_32F);\n    Mat ymap(dst_size, CV_32F);\n\n    float u, v;\n    for (int y = 0; y < dst_size.height; ++y)\n    {\n        for (int x = 0; x < dst_size.width; ++x)\n        {\n            projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);\n            xmap.at<float>(y, x) = u - src_tl.x;\n            ymap.at<float>(y, x) = v - src_tl.y;\n        }\n    }\n\n    dst.create(dst_size, src.type());\n    remap(src, dst, xmap, ymap, interp_mode, border_mode);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "RotationWarperBase<P>::warpBackward", "index": 1323, "label": 0}
{"input": "void GRender::prepare(){\n    playState = -1;\n    bufferState = -1;\n    isEof = false;\n    onPlayStateChanged(STATE_PREPARING, 0);\n    startMessageLoop();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::prepare", "index": 1324, "label": 0}
{"input": "NdArray<bool> logical_not(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        NdArray<bool> returnArray(inArray.shape());\n        stl_algorithms::transform(inArray.cbegin(),\n                                  inArray.cend(),\n                                  returnArray.begin(),\n                                  [](dtype inValue) -> bool { return utils::essentiallyEqual(inValue, dtype{ 0 }); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/logical_not.hpp", "function_name": "logical_not", "index": 1325, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorScanOp<Reducer, const Derived>\n    scan(const Index& axis, const Reducer& reducer, bool exclusive = false) const {\n      return TensorScanOp<Reducer, const Derived>(derived(), axis, exclusive, reducer);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorScanOp<Reducer, const Derived>\n    scan", "index": 1326, "label": 0}
{"input": "inline void Client::set_proxy_bearer_token_auth(const std::string &token) {\n  cli_->set_proxy_bearer_token_auth(token);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_proxy_bearer_token_auth", "index": 1327, "label": 0}
{"input": "void RenderingWidget::grabFrame(void)\n{\n    \n    bool ok = false;\n    double t = 0;\n    if (!m_timeline.empty())\n      t = (--m_timeline.end())->first + 1.;\n    t = QInputDialog::getDouble(this, \"Eigen's RenderingWidget\", \"time value: \",\n      t, 0, 1e3, 1, &ok);\n    if (ok)\n    {\n      Frame aux;\n      aux.orientation = mCamera.viewMatrix().linear();\n      aux.position = mCamera.viewMatrix().translation();\n      m_timeline[t] = aux;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "RenderingWidget::grabFrame", "index": 1328, "label": 0}
{"input": "static ModelConfig ConfigBaseGemmaV3() {\n  ModelConfig config = ConfigNoSSM();\n  config.att_cap = 0.0f;\n  config.final_cap = 0.0f;\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "4ab601da1089ea74eb9e84e22657a240d8182be6", "file_path": "gemma/configs.cc", "function_name": "ConfigBaseGemmaV3", "index": 1329, "label": 0}
{"input": "const SparseView<Derived>\nSparseMatrixBase<Derived>::pruned(const Scalar& reference,\n                                  const RealScalar& epsilon) const\n{\n  return SparseView<Derived>(derived(), reference, epsilon);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseView.h", "function_name": "SparseMatrixBase<Derived>::pruned", "index": 1330, "label": 0}
{"input": "inline bool _InputArray::isVector() const { return kind() == _InputArray::STD_VECTOR ||\n                                                   kind() == _InputArray::STD_BOOL_VECTOR ||\n                                                   (kind() == _InputArray::MATX && (sz.width <= 1 || sz.height <= 1)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "_InputArray::isVector", "index": 1331, "label": 0}
{"input": "void log(const_reference dataElement)\n            {\n                if (!enabled_)\n                {\n                    return;\n                }\n\n                if (filepath_.empty())\n                {\n                    throw std::runtime_error(\"The output log directory does not exist\");\n                }\n\n                if constexpr (DATE_TYPE_HAS_SERIALIZE_METHOD)\n                {\n                    const auto serializedData = dataElement.serialize();\n                    ofile_.write(serializedData.data(), serializedData.size());\n                }\n                else\n                {\n                    ofile_.write(reinterpret_cast<const char*>(&dataElement), DATA_ELEMENT_SIZE);\n                }\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Logging/BinaryLogger.hpp", "function_name": "dataElement", "index": 1332, "label": 0}
{"input": "void Otto::Flapping(float steps, int period, int height, int dir) {\n    int A[SERVO_COUNT] = {12, 12, height, height, 0, 0};\n    int O[SERVO_COUNT] = {\n        0, 0, height - 10, -height + 10, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    double phase_diff[SERVO_COUNT] = {\n        DEG2RAD(0), DEG2RAD(180), DEG2RAD(-90 * dir), DEG2RAD(90 * dir), 0, 0};\n\n    \n    Execute(A, O, period, phase_diff, steps);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::Flapping", "index": 1333, "label": 0}
{"input": "void GDigit::stop(){\n    m_status = 0;\n    dispThread->removePending();\n    GRender::stop();\n    clear();\n    usleep(1000);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::stop", "index": 1334, "label": 0}
{"input": "void assignTranspose(const PermutationBase<OtherDerived>& other)\n    {\n      for (Index i=0; i<rows();++i) indices().coeffRef(other.indices().coeff(i)) = i;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PermutationMatrix.h", "function_name": "assignTranspose", "index": 1335, "label": 0}
{"input": "__device__ __forceinline__ double shfl_up(double val, unsigned int delta, int width = warpSize)\n    {\n    #if defined __CUDA_ARCH__ && __CUDA_ARCH__ >= 300\n        int lo = __double2loint(val);\n        int hi = __double2hiint(val);\n\n        lo = __shfl_up(lo, delta, width);\n        hi = __shfl_up(hi, delta, width);\n\n        return __hiloint2double(hi, lo);\n    #else\n        return 0.0;\n    #endif\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/warp_shuffle.hpp", "function_name": "shfl_up", "index": 1336, "label": 0}
{"input": "string lastname(const string& name)\n{\n  size_t last_space = name.find_last_of(' ');\n  if(last_space >= name.length()-1) return name;\n  else return name.substr(last_space+1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/scripts/eigen_gen_credits.cpp", "function_name": "lastname", "index": 1337, "label": 0}
{"input": "void AdcPdmAudioCodec::EnableInput(bool enable) {\n    if (enable == input_enabled_) {\n        return;\n    }\n    if (enable) {\n        esp_codec_dev_sample_info_t fs = {\n            .bits_per_sample = 16,\n            .channel = 1,\n            .channel_mask = ESP_CODEC_DEV_MAKE_CHANNEL_MASK(0),\n            .sample_rate = (uint32_t)input_sample_rate_,\n            .mclk_multiple = 0,\n        };\n        ESP_ERROR_CHECK(esp_codec_dev_open(input_dev_, &fs));\n    } else {\n        ESP_ERROR_CHECK(esp_codec_dev_close(input_dev_));\n    }\n    AudioCodec::EnableInput(enable);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_codecs/adc_pdm_audio_codec.cc", "function_name": "AdcPdmAudioCodec::EnableInput", "index": 1338, "label": 0}
{"input": "GC::Ptr<WebIDL::CallbackType> OffscreenCanvas::oncontextlost()\n{\n    return event_handler_attribute(HTML::EventNames::contextlost);\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::oncontextlost", "index": 1339, "label": 0}
{"input": "explicit WeightsWrapper(const ModelConfig& config)\n      : pool_(0), weights_(config) {\n    weights_.Allocate(data_, pool_);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "6254f2e5ca91437fbe52bd74f64f2865a81f4e83", "file_path": "backprop/test_util.h", "function_name": "WeightsWrapper", "index": 1340, "label": 0}
{"input": "NdArray<double> wrap2Pi(const NdArray<dtype>& inAngles) noexcept\n    {\n        NdArray<double> returnArray(inAngles.size());\n        stl_algorithms::transform(inAngles.begin(),\n                                  inAngles.end(),\n                                  returnArray.begin(),\n                                  [](const auto angle) noexcept -> double { return wrap2Pi(angle); });\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/wrap2Pi.hpp", "function_name": "wrap2Pi", "index": 1341, "label": 0}
{"input": "TensorInfo TensorInfoFromName(const std::string& name) const {\n    const TensorInfo* info = FindName(name);\n    if (info == nullptr) return TensorInfo();\n    return *info;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "e69bc3bc1c5e9b478662437a3bf7c9a0d9d2eace", "file_path": "gemma/tensor_index.h", "function_name": "std::string", "index": 1342, "label": 0}
{"input": "static __forceinline unsigned __int64 _re_atomic_fetch_and(\n\tsize_t size, void *a, unsigned __int64 v)\n{\n\tunsigned __int64 prev_val;\n\tassert(size == 1u || size == 2u || size == 4u || size == 8u);\n\tswitch (size) {\n\tcase 1u:\n\t\tprev_val = _InterlockedAnd8((char*)a, (char)v);\n\t\tbreak;\n\tcase 2u:\n\t\tprev_val = _InterlockedAnd16((short*)a, (short)v);\n\t\tbreak;\n\tcase 4u:\n\t\tprev_val = _InterlockedAnd((long*)a, (long)v);\n\t\tbreak;\n\tdefault:\n#if defined(_M_IX86)\n\t\t{\n\t\t\t_ReadWriteBarrier();\n\t\t\tprev_val = *(const volatile __int64*)(a);\n\t\t\twhile (1) {\n\t\t\t\t__int64 new_val = prev_val & v;\n\t\t\t\t__int64 prev_val2 =\n\t\t\t\t\t_InterlockedCompareExchange64(\n\t\t\t\t\t\t(__int64*)a,\n\t\t\t\t\t\t(__int64)new_val,\n\t\t\t\t\t\t(__int64)prev_val);\n\t\t\t\tif (prev_val2 == prev_val)\n\t\t\t\t\tbreak;\n\t\t\t\tprev_val = prev_val2;\n\t\t\t}\n\t\t\t_ReadWriteBarrier();\n\t\t}\n#else\n\t\tprev_val = _InterlockedAnd64((__int64*)a, (__int64)v);\n#endif\n\t\tbreak;\n\t}\n\n\treturn prev_val;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/dh_atomic.h", "function_name": "_re_atomic_fetch_and", "index": 1343, "label": 0}
{"input": "inline void GetVectorElt (const std::string& line, std::complex<RealScalar>& val)\n  {\n    RealScalar valR, valI; \n    std::istringstream newline(line);\n    newline >> valR >> valI; \n    val = std::complex<RealScalar>(valR, valI);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MarketIO.h", "function_name": "GetVectorElt", "index": 1344, "label": 0}
{"input": "inline void _InputArray::init(int _flags, const void* _obj, Size _sz)\n{ flags = _flags; obj = (void*)_obj; sz = _sz; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "_InputArray::init", "index": 1345, "label": 0}
{"input": "~SkylineStorage() {\n        delete[] m_diag;\n        delete[] m_upper;\n        if (m_upper != m_lower)\n            delete[] m_lower;\n        delete[] m_upperProfile;\n        delete[] m_lowerProfile;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h", "function_name": "~SkylineStorage", "index": 1346, "label": 0}
{"input": "NdArray<dtype> amin(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        return inArray.min(inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/amin.hpp", "function_name": "amin", "index": 1347, "label": 0}
{"input": "__extension__ extern __inline v2i64\n__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\nmsa_mlaq_s64(v2i64 __a, v2i64 __b, v2i64 __c)\n{\n  __asm__ volatile(\"maddv.d %w[__a], %w[__b], %w[__c]\\n\"\n               \n               : [__a] \"+f\"(__a)\n               \n               : [__b] \"f\"(__b), [__c] \"f\"(__c));\n  return __a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/msa_macros.h", "function_name": "msa_mlaq_s64", "index": 1348, "label": 0}
{"input": "NdArray<dtype> uniform(const Shape& inShape, dtype inLow, dtype inHigh)\n    {\n        return detail::uniform(generator_, inShape, inLow, inHigh);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/uniform.hpp", "function_name": "uniform", "index": 1349, "label": 0}
{"input": "inline Quat<T> Quat<T>::power(const Quat<T> &q, QuatAssumeType assumeUnit) const\n{\n    return cv::exp(q * log(assumeUnit));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::power", "index": 1350, "label": 0}
{"input": "inline __m256d _v256_permute4x64(const __m256d& a)\n{ return __m256d(__lasx_xvpermi_d(*((__m256i*)&a), imm)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_permute4x64", "index": 1351, "label": 0}
{"input": "void PastixBase<Derived>::compute(ColSpMatrix& mat)\n{\n  eigen_assert(mat.rows() == mat.cols() && \"The input matrix should be squared\");\n  \n  analyzePattern(mat);  \n  factorize(mat);\n  \n  m_iparm(IPARM_MATRIX_VERIFICATION) = API_NO;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "PastixBase<Derived>::compute", "index": 1352, "label": 0}
{"input": "static LayerConfig LayerConfigGemma3_4B_LM(size_t model_dim) {\n  LayerConfig config;\n  config.model_dim = model_dim;\n  config.ff_hidden_dim = 8 * 2560 / 2;  \n  config.heads = 8;\n  config.kv_heads = 4;\n  config.qkv_dim = 256;\n  config.optimized_gating = true;\n  config.post_norm = PostNormType::Scale;\n  config.use_qk_norm = true;\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "4ab601da1089ea74eb9e84e22657a240d8182be6", "file_path": "gemma/configs.cc", "function_name": "LayerConfigGemma3_4B_LM", "index": 1353, "label": 0}
{"input": "void ModelWeightsStorage::CreateForType(Type weight_type,\n                                        hwy::ThreadPool& pool) {\n  switch (weight_type) {\n    case Type::kF32:\n      float_weights_ = std::make_unique<ModelWeightsPtrs<float>>(config_);\n      break;\n    case Type::kBF16:\n      bf16_weights_ = std::make_unique<ModelWeightsPtrs<BF16>>(config_);\n      break;\n    case Type::kSFP:\n      sfp_weights_ =\n          std::make_unique<ModelWeightsPtrs<SfpStream>>(config_);\n      break;\n    case Type::kNUQ:\n      nuq_weights_ =\n          std::make_unique<ModelWeightsPtrs<NuqStream>>(config_);\n      break;\n    default:\n      HWY_ABORT(\"Weight type %d unsupported.\", static_cast<int>(weight_type));\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "6254f2e5ca91437fbe52bd74f64f2865a81f4e83", "file_path": "gemma/weights.cc", "function_name": "ModelWeightsStorage::CreateForType", "index": 1354, "label": 0}
{"input": "int Mobunet::preprocess(JMat* pic,JMat* feat){\n    \n    cv::Mat roipic(pic->cvmat(),cv::Rect(4,4,160,160));\n    JMat  picmask(160,160,3,0,1);\n    JMat  picreal(160,160,3,0,1);\n    cv::Mat cvmask = picmask.cvmat();\n    cv::Mat cvreal = picreal.cvmat();\n    roipic.copyTo(cvmask);\n    roipic.copyTo(cvreal);\n    cv::rectangle(cvmask,cv::Rect(5,5,150,145),cv::Scalar(0,0,0),-1);\n    domodel(&picreal,&picmask,feat);\n    cvreal.copyTo(roipic);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/munet.cpp", "function_name": "Mobunet::preprocess", "index": 1355, "label": 0}
{"input": "lynx_api_status lynx_value_move_reference(lynx_api_env env, lynx_value src_val,\n                                          lynx_value_ref src_ref,\n                                          lynx_value_ref* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_move_reference", "index": 1356, "label": 0}
{"input": "inline\nVec<_Tp, cn> VecCommaInitializer<_Tp, cn>::operator *() const\n{\n    CV_DbgAssert( this->idx == cn );\n    return *this->dst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "VecCommaInitializer<_Tp, cn>::operator *", "index": 1357, "label": 0}
{"input": "MappedSparseMatrix<Scalar,Flags,Index> map_superlu(SluMatrix& sluMat)\n{\n  eigen_assert(((Flags&RowMajor)==RowMajor && sluMat.Stype == SLU_NR)\n         || ((Flags&ColMajor)==ColMajor && sluMat.Stype == SLU_NC));\n\n  Index outerSize = (Flags&RowMajor)==RowMajor ? sluMat.ncol : sluMat.nrow;\n\n  return MappedSparseMatrix<Scalar,Flags,Index>(\n    sluMat.nrow, sluMat.ncol, sluMat.storage.outerInd[outerSize],\n    sluMat.storage.outerInd, sluMat.storage.innerInd, reinterpret_cast<Scalar*>(sluMat.storage.values) );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SuperLUSupport/SuperLUSupport.h", "function_name": "map_superlu", "index": 1358, "label": 0}
{"input": "CV_EXPORTS_W inline\nbool findChessboardCornersSB(InputArray image, Size patternSize, OutputArray corners,\n                             int flags = 0)\n{\n    return findChessboardCornersSB(image, patternSize, corners, flags, noArray());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/calib3d.hpp", "function_name": "findChessboardCornersSB", "index": 1359, "label": 0}
{"input": "inline Quat<T> operator-(const Quat<T>& q, const T a)\n{\n    return Quat<T>(q.w - a, q.x, q.y, q.z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "operator-", "index": 1360, "label": 0}
{"input": "explicit PardisoLDLT(const MatrixType& matrix)\n      : Base()\n    {\n      pardisoInit(Base::ScalarIsComplex ? ( bool(Options&Symmetric) ? 6 : -4 ) : -2);\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PardisoSupport/PardisoSupport.h", "function_name": "PardisoLDLT", "index": 1361, "label": 0}
{"input": "void eiToUblas(const EigenMatrixType& src, UblasMatrixType& dst)\n{\n  dst.resize(src.rows(),src.cols());\n  for (int j=0; j<src.cols(); ++j)\n    for (int i=0; i<src.rows(); ++i)\n      dst(i,j) = src.coeff(i,j);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchUtil.h", "function_name": "eiToUblas", "index": 1362, "label": 0}
{"input": "static void test_float_flooring()\n{\n  Tensor<float, 2> ftensor(20,30);\n  ftensor = ftensor.random() * 100.f;\n\n  Tensor<float, 2> result = ftensor.floor();\n\n  for (int i = 0; i < 20; ++i) {\n    for (int j = 0; j < 30; ++j) {\n      VERIFY_IS_EQUAL(result(i,j), numext::floor(ftensor(i,j)));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_roundings.cpp", "function_name": "test_float_flooring", "index": 1363, "label": 0}
{"input": "Index linearizedIndex(const array<Index, NumIndices>& indices) const\n    {\n      if (Options&RowMajor) {\n        return m_storage.dimensions().IndexOfRowMajor(indices);\n      } else {\n        return m_storage.dimensions().IndexOfColMajor(indices);\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFixedSize.h", "function_name": "indices", "index": 1364, "label": 0}
{"input": "void test_cxx11_tensor_custom_index() {\n  test_map_as_index<ColMajor>();\n  test_map_as_index<RowMajor>();\n  test_matrix_as_index<ColMajor>();\n  test_matrix_as_index<RowMajor>();\n  test_varlist_as_index<ColMajor>();\n  test_varlist_as_index<RowMajor>();\n  test_sizes_as_index<ColMajor>();\n  test_sizes_as_index<RowMajor>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_custom_index.cpp", "function_name": "test_cxx11_tensor_custom_index", "index": 1365, "label": 0}
{"input": "inline bool\nprocess_server_socket_core(const std::atomic<socket_t> &svr_sock, socket_t sock,\n                           size_t keep_alive_max_count,\n                           time_t keep_alive_timeout_sec, T callback) {\n  assert(keep_alive_max_count > 0);\n  auto ret = false;\n  auto count = keep_alive_max_count;\n  while (svr_sock != INVALID_SOCKET && count > 0 &&\n         keep_alive(sock, keep_alive_timeout_sec)) {\n    auto close_connection = count == 1;\n    auto connection_closed = false;\n    ret = callback(close_connection, connection_closed);\n    if (!ret || connection_closed) { break; }\n    count--;\n  }\n  return ret;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "process_server_socket_core", "index": 1366, "label": 0}
{"input": "inline bool has_header(const Headers &headers, const std::string &key) {\n  return headers.find(key) != headers.end();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "has_header", "index": 1367, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE void conservativeResizeLike(const DenseBase<OtherDerived>& other)\n    {\n      internal::conservative_resize_like_impl<Derived,OtherDerived>::run(*this, other);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "conservativeResizeLike", "index": 1368, "label": 0}
{"input": "inline const mpreal tgamma  (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(gamma  );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "tgamma", "index": 1369, "label": 0}
{"input": "inline\nstd::reverse_iterator<MatIterator_<_Tp>> Mat_<_Tp>::rbegin()\n{\n    return Mat::rbegin<_Tp>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::rbegin", "index": 1370, "label": 0}
{"input": "void OttoEmojiDisplay::SetEmotion(const char* emotion) {\n    if (!emotion || !emotion_gif_) {\n        return;\n    }\n\n    DisplayLockGuard lock(this);\n\n    for (const auto& map : emotion_maps_) {\n        if (map.name && strcmp(map.name, emotion) == 0) {\n            lv_gif_set_src(emotion_gif_, map.gif);\n            ESP_LOGI(TAG, \"设置表情: %s\", emotion);\n            return;\n        }\n    }\n\n    lv_gif_set_src(emotion_gif_, &staticstate);\n    ESP_LOGI(TAG, \"未知表情'%s'，使用默认\", emotion);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_emoji_display.cc", "function_name": "OttoEmojiDisplay::SetEmotion", "index": 1371, "label": 0}
{"input": "inline uint32x2_t p2ui_CONJ_XOR() {\n  static const uint32_t conj_XOR_DATA[] = { 0x00000000, 0x80000000 };\n  return vld1_u32( conj_XOR_DATA );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/NEON/Complex.h", "function_name": "p2ui_CONJ_XOR", "index": 1372, "label": 0}
{"input": "inline cl_int clCreateSubDevices(cl_device_id p0, const cl_device_partition_property* p1, cl_uint p2, cl_device_id* p3, cl_uint* p4) { return clCreateSubDevices_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateSubDevices", "index": 1373, "label": 0}
{"input": "inline void RealSchur<MatrixType>::initFrancisQRStep(Index il, Index iu, const Vector3s& shiftInfo, Index& im, Vector3s& firstHouseholderVector)\n{\n  using std::abs;\n  Vector3s& v = firstHouseholderVector; \n\n  for (im = iu-2; im >= il; --im)\n  {\n    const Scalar Tmm = m_matT.coeff(im,im);\n    const Scalar r = shiftInfo.coeff(0) - Tmm;\n    const Scalar s = shiftInfo.coeff(1) - Tmm;\n    v.coeffRef(0) = (r * s - shiftInfo.coeff(2)) / m_matT.coeff(im+1,im) + m_matT.coeff(im,im+1);\n    v.coeffRef(1) = m_matT.coeff(im+1,im+1) - Tmm - r - s;\n    v.coeffRef(2) = m_matT.coeff(im+2,im+1);\n    if (im == il) {\n      break;\n    }\n    const Scalar lhs = m_matT.coeff(im,im-1) * (abs(v.coeff(1)) + abs(v.coeff(2)));\n    const Scalar rhs = v.coeff(0) * (abs(m_matT.coeff(im-1,im-1)) + abs(Tmm) + abs(m_matT.coeff(im+1,im+1)));\n    if (abs(lhs) < NumTraits<Scalar>::epsilon() * rhs)\n      break;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealSchur.h", "function_name": "RealSchur<MatrixType>::initFrancisQRStep", "index": 1374, "label": 0}
{"input": "inline KernelInfo KernelInfoImpl<T>::Copy() const {\n  OrtKernelInfo* info_copy = nullptr;\n  Ort::ThrowOnError(GetApi().CopyKernelInfo(this->p_, &info_copy));\n  return KernelInfo{info_copy};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::Copy", "index": 1375, "label": 0}
{"input": "bool JSVMRuntime::compare(const piper::PropNameID& a,\n                          const piper::PropNameID& b) {\n  JSVM_Value a_value = nullptr;\n  JSVMHelper::stringRef(a, &a_value);\n  JSVM_Value b_value = nullptr;\n  JSVMHelper::stringRef(b, &b_value);\n\n  bool result = false;\n  JSVM_CALL(OH_JSVM_StrictEquals(getEnv(), a_value, b_value, &result));\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::compare", "index": 1376, "label": 0}
{"input": "std::string estimate_diarization_speaker(std::vector<std::vector<float>> pcmf32s, int64_t t0, int64_t t1, bool id_only = false) {\n    std::string speaker = \"\";\n    const int64_t n_samples = pcmf32s[0].size();\n\n    const int64_t is0 = timestamp_to_sample(t0, n_samples, WHISPER_SAMPLE_RATE);\n    const int64_t is1 = timestamp_to_sample(t1, n_samples, WHISPER_SAMPLE_RATE);\n\n    double energy0 = 0.0f;\n    double energy1 = 0.0f;\n\n    for (int64_t j = is0; j < is1; j++) {\n        energy0 += fabs(pcmf32s[0][j]);\n        energy1 += fabs(pcmf32s[1][j]);\n    }\n\n    if (energy0 > 1.1*energy1) {\n        speaker = \"0\";\n    } else if (energy1 > 1.1*energy0) {\n        speaker = \"1\";\n    } else {\n        speaker = \"?\";\n    }\n\n    \n\n    if (!id_only) {\n        speaker.insert(0, \"(speaker \");\n        speaker.append(\")\");\n    }\n\n    return speaker;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/server.cpp", "function_name": "estimate_diarization_speaker", "index": 1377, "label": 0}
{"input": "CV_INLINE CvMoments cvMoments(const cv::Moments& m)\n{\n#if !defined(CV__ENABLE_C_API_CTORS)\n    double am00 = std::abs(m.m00);\n    CvMoments self = {\n        m.m00, m.m10, m.m01, m.m20, m.m11, m.m02, m.m30, m.m21, m.m12, m.m03,\n        m.mu20, m.mu11, m.mu02, m.mu30, m.mu21, m.mu12, m.mu03,\n        am00 > DBL_EPSILON ? 1./std::sqrt(am00) : 0\n    };\n    return self;\n#else\n    return CvMoments(m);\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/types_c.h", "function_name": "cvMoments", "index": 1378, "label": 0}
{"input": "void csr_sum_duplicates(const I n_row,\n                        const I n_col,\n                              I Ap[],\n                              I Aj[],\n                              T Ax[])\n{\n    I nnz = 0;\n    I row_end = 0;\n    for(I i = 0; i < n_row; i++){\n        I jj = row_end;\n        row_end = Ap[i+1];\n        while( jj < row_end ){\n            I j = Aj[jj];\n            T x = Ax[jj];\n            jj++;\n            while( jj < row_end && Aj[jj] == j ){\n                x += Ax[jj];\n                jj++;\n            }\n            Aj[nnz] = j;\n            Ax[nnz] = x;\n            nnz++;\n        }\n        Ap[i+1] = nnz;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/sparse_setter.cpp", "function_name": "csr_sum_duplicates", "index": 1379, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half exph(const Eigen::half& a) {\n  return Eigen::half(::expf(float(a)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/Half.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half exph", "index": 1380, "label": 0}
{"input": "inline T sin_over_x(T x)\n{\n  if (T(1) + x*x == T(1))\n    return T(1);\n  else\n    return std::sin(x)/x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/quat_slerp.cpp", "function_name": "sin_over_x", "index": 1381, "label": 0}
{"input": "const Replicate<Derived,RowFactor,ColFactor>\nDenseBase<Derived>::replicate() const\n{\n  return Replicate<Derived,RowFactor,ColFactor>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Replicate.h", "function_name": "DenseBase<Derived>::replicate", "index": 1382, "label": 0}
{"input": "inline DictValue DictValue::get<DictValue>(int idx) const\n{\n    CV_Assert(idx == -1);\n    return *this;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/dnn.inl.hpp", "function_name": "DictValue::get<DictValue>", "index": 1383, "label": 0}
{"input": "void aliasing_with_resize()\n{\n  Index m = internal::random<Index>(10,50);\n  Index n = internal::random<Index>(10,50);\n  MatrixXd A, B, C(m,n), D(m,m);\n  VectorXd a, b, c(n);\n  C.setRandom();\n  D.setRandom();\n  c.setRandom();\n  double s = internal::random<double>(1,10);\n\n  A = C;\n  B = A * A.transpose();\n  A = A * A.transpose();\n  VERIFY_IS_APPROX(A,B);\n\n  A = C;\n  B = (A * A.transpose())/s;\n  A = (A * A.transpose())/s;\n  VERIFY_IS_APPROX(A,B);\n\n  A = C;\n  B = (A * A.transpose()) + D;\n  A = (A * A.transpose()) + D;\n  VERIFY_IS_APPROX(A,B);\n\n  A = C;\n  B = D + (A * A.transpose());\n  A = D + (A * A.transpose());\n  VERIFY_IS_APPROX(A,B);\n\n  A = C;\n  B = s * (A * A.transpose());\n  A = s * (A * A.transpose());\n  VERIFY_IS_APPROX(A,B);\n\n  A = C;\n  a = c;\n  b = (A * a)/s;\n  a = (A * a)/s;\n  VERIFY_IS_APPROX(a,b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_extra.cpp", "function_name": "aliasing_with_resize", "index": 1384, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC\n    CwiseBinaryOp<internal::scalar_product_op<Scalar>,\n                  const ExpressionTypeNestedCleaned,\n                  const typename ExtendedType<OtherDerived>::Type>\n    EIGEN_DEVICE_FUNC\n    operator*(const DenseBase<OtherDerived>& other) const\n    {\n      EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived)\n      EIGEN_STATIC_ASSERT_ARRAYXPR(ExpressionType)\n      EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived)\n      return m_matrix * extendedTo(other.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "EIGEN_DEVICE_FUNC\n    CwiseBinaryOp<internal::scalar_product_op<Scalar>,\n                  const ExpressionTypeNestedCleaned,\n                  const typename ExtendedType<OtherDerived>::Type>\n    EIGEN_DEVICE_FUNC\n    operator*", "index": 1385, "label": 0}
{"input": "inline v_float64 vx_load_halves(const double * ptr0, const double * ptr1) { return VXPREFIX(_load_halves)(ptr0, ptr1); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin.hpp", "function_name": "vx_load_halves", "index": 1386, "label": 0}
{"input": "DataUpdateReplayer::DataUpdateReplayer(\n    std::shared_ptr<shell::LynxActor<shell::LynxEngine>> engine_actor)\n    : weak_engine_actor_(engine_actor),\n      tasm_(engine_actor != nullptr ? engine_actor->Impl()->GetTasm()\n                                    : nullptr) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "testing/lynx/tasm/databinding/data_update_replayer.cc", "function_name": "DataUpdateReplayer::DataUpdateReplayer", "index": 1387, "label": 0}
{"input": "inline void DenseBase<Derived>::reverseInPlace()\n{\n  if(cols()>rows())\n  {\n    Index half = cols()/2;\n    leftCols(half).swap(rightCols(half).reverse());\n    if((cols()%2)==1)\n    {\n      Index half2 = rows()/2;\n      col(half).head(half2).swap(col(half).tail(half2).reverse());\n    }\n  }\n  else\n  {\n    Index half = rows()/2;\n    topRows(half).swap(bottomRows(half).reverse());\n    if((rows()%2)==1)\n    {\n      Index half2 = cols()/2;\n      row(half).head(half2).swap(row(half).tail(half2).reverse());\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Reverse.h", "function_name": "DenseBase<Derived>::reverseInPlace", "index": 1388, "label": 0}
{"input": "void HTMLInputElement::did_pick_color(Optional<Color> picked_color, ColorPickerUpdateState state)\n{\n    if (type_state() == TypeAttributeState::Color && picked_color.has_value()) {\n        \n        m_value = value_sanitization_algorithm(picked_color.value().to_string_without_alpha());\n        m_dirty_value = true;\n\n        update_color_well_element();\n\n        \n        user_interaction_did_change_input_value();\n\n        if (state == ColorPickerUpdateState::Closed) {\n            set_is_open(false);\n\n            \n            \n            queue_an_element_task(HTML::Task::Source::UserInteraction, [this] {\n                \n                m_user_validity = true;\n                \n                auto change_event = DOM::Event::create(realm(), HTML::EventNames::change);\n                change_event->set_bubbles(true);\n                dispatch_event(*change_event);\n            });\n        }\n    }\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "7152821c8fbd2a41e217c36f50437add825394eb", "file_path": "Libraries/LibWeb/HTML/HTMLInputElement.cpp", "function_name": "HTMLInputElement::did_pick_color", "index": 1389, "label": 0}
{"input": "__host__ __device__ __forceinline__ binary_negate<BinaryPredicate> not2(const BinaryPredicate& pred)\n    {\n        return binary_negate<BinaryPredicate>(pred);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/functional.hpp", "function_name": "not2", "index": 1390, "label": 0}
{"input": "NdArray<dtype> negativeBinomial(const Shape& inShape, dtype inN, double inP = 0.5)\n    {\n        return detail::negativeBinomial(generator_, inShape, inN, inP);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/negativeBinomial.hpp", "function_name": "negativeBinomial", "index": 1391, "label": 0}
{"input": "IIR_II::IIR_II()\n{\n\nm_pNum = NULL;\nm_pDen = NULL;\nm_pW = NULL;\nm_num_order = -1;\nm_den_order = -1;\nm_N = 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/iir_filter.hpp", "function_name": "IIR_II::IIR_II", "index": 1392, "label": 0}
{"input": "inline std::vector<int64_t> TensorTypeAndShapeInfo::GetShape() const {\n  std::vector<int64_t> out(GetDimensionsCount(), 0);\n  GetDimensions(out.data(), out.size());\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfo::GetShape", "index": 1393, "label": 0}
{"input": "inline\nGpuMatND::GpuMatND(SizeArray _size, int _type) :\n    flags(0), dims(0), data(nullptr), offset(0)\n{\n    create(std::move(_size), _type);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "GpuMatND::GpuMatND", "index": 1394, "label": 0}
{"input": "inline v_int32x4 v_pack(const v_int64x2& a, const v_int64x2& b)\n{\n    return v_int32x4(wasm_v8x16_shuffle(a.val, b.val, 0,1,2,3,8,9,10,11,16,17,18,19,24,25,26,27));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_pack", "index": 1395, "label": 0}
{"input": "SelfAdjointEigenSolver(Index size)\n        : m_eivec(size, size),\n          m_eivalues(size),\n          m_subdiag(size > 1 ? size - 1 : 1),\n          m_isInitialized(false)\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h", "function_name": "SelfAdjointEigenSolver", "index": 1396, "label": 0}
{"input": "vuint16mf2_t(const ushort* ptr)\n    {\n        for (int i = 0; i < 4; ++i)\n        {\n            val[i] = ptr[i];\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv.hpp", "function_name": "vuint16mf2_t", "index": 1397, "label": 0}
{"input": "static void packLhs(const packLArg arg) {\n    \n    LhsPacker pack_lhs;\n    pack_lhs(arg.blockA, arg.lhs.getSubMapper(arg.m_start, arg.k_start), arg.kc, arg.mc);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h", "function_name": "packLhs", "index": 1398, "label": 0}
{"input": "inline size_t KernelContext::GetInputCount() const {\n  size_t out = 0;\n  Ort::ThrowOnError(GetApi().KernelContext_GetInputCount(ctx_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelContext::GetInputCount", "index": 1399, "label": 0}
{"input": "typename DenseBase<Derived>::RandomAccessLinSpacedReturnType\nDenseBase<Derived>::LinSpaced(const Scalar& low, const Scalar& high)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived)\n  return DenseBase<Derived>::NullaryExpr(Derived::SizeAtCompileTime, internal::linspaced_op<Scalar,PacketScalar>(low,high,Derived::SizeAtCompileTime));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::LinSpaced", "index": 1400, "label": 0}
{"input": "void LynxRuntime::InitExecutor(\n    std::vector<std::pair<std::string, std::string>> preload_js_sources) {\n  tasm::TimingCollector::Instance()->Mark(tasm::timing::kLoadCoreStart);\n  TRACE_EVENT_BEGIN(LYNX_TRACE_CATEGORY_VITALS, LYNX_JS_LOAD_CORE);\n  \n  \n  \n  js_executor_->loadPreJSBundle(\n      preload_js_sources, true, GetRuntimeId(),\n      runtime_flags_ & LynxRuntimeFlags::ENABLE_USER_BYTECODE,\n      bytecode_source_url_,\n      [delegate_ptr = delegate_.get()](const std::string& url) {\n        return delegate_ptr->LoadBytecode(url);\n      });\n\n  TRACE_EVENT_END(LYNX_TRACE_CATEGORY_VITALS);\n  tasm::TimingCollector::Instance()->Mark(tasm::timing::kLoadCoreEnd);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5419d4c4cd7795fd30d486e3a515d918055bcbb0", "file_path": "core/runtime/piper/js/lynx_runtime.cc", "function_name": "LynxRuntime::InitExecutor", "index": 1401, "label": 0}
{"input": "EIGEN_STRONG_INLINE float32x2_t vld1_f32 (const float* x) { return ::vld1_f32 ((const float32_t*)x); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h", "function_name": "float32x2_t", "index": 1402, "label": 0}
{"input": "void check_dimension(const MatrixType& ab, const int rows,  const int cols)\n{\n  VERIFY_IS_EQUAL(ab.rows(), rows);\n  VERIFY_IS_EQUAL(ab.cols(), cols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/kronecker_product.cpp", "function_name": "check_dimension", "index": 1403, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::IsLynxDebugEnabled(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return GetSwitch(tasm::LynxEnv::kLynxDebugEnabled);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::IsLynxDebugEnabled", "index": 1404, "label": 0}
{"input": "NdArray<bool> equal(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        return inArray1 == inArray2;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/equal.hpp", "function_name": "equal", "index": 1405, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4h pcast<Packet4f, Packet4h>(const Packet4f& a) {\n  EIGEN_ALIGN16 float aux[4];\n  pstore(aux, a);\n  Eigen::half h0(aux[0]);\n  Eigen::half h1(aux[1]);\n  Eigen::half h2(aux[2]);\n  Eigen::half h3(aux[3]);\n\n  Packet4h result;\n  result.x = _mm_set_pi16(h3.x, h2.x, h1.x, h0.x);\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/TypeCasting.h", "function_name": "Packet4h", "index": 1406, "label": 0}
{"input": "void GpuHelper::pushProjectionMode2D(ProjectionMode2D pm)\n{\n    \n    pushMatrix(Matrix4f::Identity(),GL_PROJECTION);\n\n    if(pm==PM_Normalized)\n    {\n        \n    }\n    else if(pm==PM_Viewport)\n    {\n        GLint vp[4];\n        glGetIntegerv(GL_VIEWPORT, vp);\n        glOrtho(0., vp[2], 0., vp[3], -1., 1.);\n    }\n\n    pushMatrix(Matrix4f::Identity(),GL_MODELVIEW);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/gpuhelper.cpp", "function_name": "GpuHelper::pushProjectionMode2D", "index": 1407, "label": 0}
{"input": "void scaleAndAddTo(Dest& dest, const typename Rhs::Scalar& alpha) const\n    {\n      BlockVectorReturn<Lhs,Dest> tmpDest(m_lhs, dest);\n      internal::sparse_time_dense_product( BlockSparseMatrixView<Lhs>(m_lhs),  BlockVectorView<Lhs, Rhs>(m_lhs, m_rhs), tmpDest, alpha);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "scaleAndAddTo", "index": 1408, "label": 0}
{"input": "typename SparseMatrixBase<Derived>::template SelfAdjointViewReturnType<UpLo>::Type SparseMatrixBase<Derived>::selfadjointView()\n{\n  return SparseSelfAdjointView<Derived, UpLo>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseSelfAdjointView.h", "function_name": "SparseMatrixBase<Derived>::selfadjointView", "index": 1409, "label": 0}
{"input": "inline\nVec<_Tp, cn> Vec<_Tp, cn>::cross(const Vec<_Tp, cn>&) const\n{\n    CV_StaticAssert(cn == 3, \"for arbitrary-size vector there is no cross-product defined\");\n    return Vec<_Tp, cn>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Vec<_Tp, cn>::cross", "index": 1410, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nconst Product<MatrixDerived, PermutationDerived, AliasFreeProduct>\noperator*(const MatrixBase<MatrixDerived> &matrix,\n          const PermutationBase<PermutationDerived>& permutation)\n{\n  return Product<MatrixDerived, PermutationDerived, AliasFreeProduct>\n            (matrix.derived(), permutation.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PermutationMatrix.h", "function_name": "Product<MatrixDerived, PermutationDerived, AliasFreeProduct>\noperator*", "index": 1411, "label": 0}
{"input": "inline bool mpreal::fits_in_bits(double x, int n)\n{\n    int i;\n    double t;\n    return IsInf(x) || (std::modf ( std::ldexp ( std::frexp ( x, &i ), n ), &t ) == 0.0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::fits_in_bits", "index": 1412, "label": 0}
{"input": "[[nodiscard]] self_type getByMask(const NdArray<bool>& inMask) const\n        {\n            return operator[](inMask);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inMask", "index": 1413, "label": 0}
{"input": "void matrix_function_compute_cluster_size(const ListOfClusters& clusters, Matrix<Index, Dynamic, 1>& clusterSize)\n{\n  const Index numClusters = static_cast<Index>(clusters.size());\n  clusterSize.setZero(numClusters);\n  Index clusterIndex = 0;\n  for (typename ListOfClusters::const_iterator cluster = clusters.begin(); cluster != clusters.end(); ++cluster) {\n    clusterSize[clusterIndex] = cluster->size();\n    ++clusterIndex;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "matrix_function_compute_cluster_size", "index": 1414, "label": 0}
{"input": "CV_WRAP inline void fastNlMeansDenoising(const GpuMat& src, CV_OUT GpuMat& dst,\n                                    float h,\n                                    int search_window = 21,\n                                    int block_size = 7,\n                                    Stream& stream = Stream::Null())\n{\n    fastNlMeansDenoising(InputArray(src), OutputArray(dst), h, search_window, block_size, stream);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/photo/cuda.hpp", "function_name": "fastNlMeansDenoising", "index": 1415, "label": 0}
{"input": "void GRender::setAudioTrack(AudioTrack *track) {\n    audioTrack = track;\n    LOGI(TAG, \"setAudioTrack %p\", audioTrack);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::setAudioTrack", "index": 1416, "label": 0}
{"input": "auto airy_bi(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(airy_bi(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return airy_bi(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/airy_bi.hpp", "function_name": "airy_bi", "index": 1417, "label": 0}
{"input": "void RandomFill(std::vector<std::complex<T> > & vec)\n{\n    for (size_t k=0;k<vec.size();++k)\n        vec[k] = std::complex<T> ( T( rand() )/T(RAND_MAX) - T(.5), T( rand() )/T(RAND_MAX) - T(.5));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/doc/examples/FFT.cpp", "function_name": "RandomFill", "index": 1418, "label": 0}
{"input": "void ConvertBuffer(TypeDest* dest, const TypeSrc* src, size_t len)\n        {\n          for (size_t i=0; i<len; ++i)\n          {\n            dest[i] = static_cast<TypeDest>(src[i]);\n          }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "ConvertBuffer", "index": 1419, "label": 0}
{"input": "Object JSVMRuntime::global() {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value global = nullptr;\n  JSVM_CALL(OH_JSVM_GetGlobal(getEnv(), &global));\n\n  return JSVMHelper::createObject(global, getEnv());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::global", "index": 1420, "label": 0}
{"input": "void SVDBase<Derived>::_solve_impl(const RhsType &rhs, DstType &dst) const\n{\n  eigen_assert(rhs.rows() == rows());\n\n  \n  \n\n  Matrix<Scalar, Dynamic, RhsType::ColsAtCompileTime, 0, MatrixType::MaxRowsAtCompileTime, RhsType::MaxColsAtCompileTime> tmp;\n  Index l_rank = rank();\n  tmp.noalias() =  m_matrixU.leftCols(l_rank).adjoint() * rhs;\n  tmp = m_singularValues.head(l_rank).asDiagonal().inverse() * tmp;\n  dst = m_matrixV.leftCols(l_rank) * tmp;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/SVDBase.h", "function_name": "SVDBase<Derived>::_solve_impl", "index": 1421, "label": 0}
{"input": "void use_n_times(const XprType &xpr)\n{\n  typename internal::nested_eval<XprType,N>::type mat(xpr);\n  typename XprType::PlainObject res(mat.rows(), mat.cols());\n  nb_temporaries--; \n  res.setZero();\n  for(int i=0; i<N; ++i)\n    res += mat;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/nesting_ops.cpp", "function_name": "use_n_times", "index": 1422, "label": 0}
{"input": "TasmMediator::~TasmMediator() {\n  \n  \n  if (vsync_monitor_) {\n    vsync_monitor_->StopVSync();\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/shell/tasm_mediator.cc", "function_name": "TasmMediator::~TasmMediator", "index": 1423, "label": 0}
{"input": "inline v128_t v128_cvti16x8_i32x4(const v128_t& a)\n{ return wasm_i32x4_shr(wasm_unpacklo_i16x8(a, a), 16); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvti16x8_i32x4", "index": 1424, "label": 0}
{"input": "inline v_float32x4 v_load_expand(const float16_t* ptr)\n{\n    float a[4];\n    for (int i = 0; i < 4; i++)\n        a[i] = ptr[i];\n    return v_float32x4(wasm_v128_load(a));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_load_expand", "index": 1425, "label": 0}
{"input": "void whisper_print_progress_callback(struct whisper_context * , struct whisper_state * , int progress, void * user_data) {\n    int progress_step = ((whisper_print_user_data *) user_data)->params->progress_step;\n    int * progress_prev  = &(((whisper_print_user_data *) user_data)->progress_prev);\n    if (progress >= *progress_prev + progress_step) {\n        *progress_prev += progress_step;\n        fprintf(stderr, \"%s: progress = %3d%%\\n\", __func__, progress);\n    }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/server.cpp", "function_name": "whisper_print_progress_callback", "index": 1426, "label": 0}
{"input": "inline std::string detail::MakeCustomOpConfigEntryKey(const char* custom_op_name, const char* config) {\n  std::string config_key = \"custom_op.\";\n\n  config_key += custom_op_name;\n  config_key += \".\";\n  config_key += config;\n\n  return config_key;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "detail::MakeCustomOpConfigEntryKey", "index": 1427, "label": 0}
{"input": "typename SplineTraits< Spline<_Scalar, _Dim, _Degree>, DerivativeOrder >::DerivativeType\n    Spline<_Scalar, _Dim, _Degree>::derivatives(Scalar u, DenseIndex order) const\n  {\n    typename SplineTraits< Spline, DerivativeOrder >::DerivativeType res;\n    derivativesImpl(*this, u, order, res);\n    return res;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/Spline.h", "function_name": "Spline<_Scalar, _Dim, _Degree>::derivatives", "index": 1428, "label": 0}
{"input": "cholmod_dense viewAsCholmod(MatrixBase<Derived>& mat)\n{\n  EIGEN_STATIC_ASSERT((internal::traits<Derived>::Flags&RowMajorBit)==0,THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES);\n  typedef typename Derived::Scalar Scalar;\n\n  cholmod_dense res;\n  res.nrow   = mat.rows();\n  res.ncol   = mat.cols();\n  res.nzmax  = res.nrow * res.ncol;\n  res.d      = Derived::IsVectorAtCompileTime ? mat.derived().size() : mat.derived().outerStride();\n  res.x      = (void*)(mat.derived().data());\n  res.z      = 0;\n\n  internal::cholmod_configure_matrix<Scalar>::run(res);\n\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "viewAsCholmod", "index": 1429, "label": 0}
{"input": "inline\ntypename Matx<_Tp, m, n>::diag_type Matx<_Tp, m, n>::diag() const\n{\n    diag_type d;\n    for( int i = 0; i < shortdim; i++ )\n        d.val[i] = val[i*n + i];\n    return d;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp, m, n>::diag", "index": 1430, "label": 0}
{"input": "constexpr static typename h_apply_op_helper<from_left, op, additional_param, values...>::type helper(type_list<values...>)\n  { return typename h_apply_op_helper<from_left, op, additional_param, values...>::type(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/CXX11Meta.h", "function_name": "helper", "index": 1431, "label": 0}
{"input": "__device__ __forceinline__ void Luv2RGBConvert_b(const T& src, D& dst)\n        {\n            float3 srcf, dstf;\n\n            srcf.x = src.x * (100.f / 255.f);\n            srcf.y = src.y * 1.388235294117647f - 134.f;\n            srcf.z = src.z * 1.027450980392157f - 140.f;\n\n            Luv2RGBConvert_f<srgb, blueIdx>(srcf, dstf);\n\n            dst.x = saturate_cast<uchar>(dstf.x * 255.f);\n            dst.y = saturate_cast<uchar>(dstf.y * 255.f);\n            dst.z = saturate_cast<uchar>(dstf.z * 255.f);\n            setAlpha(dst, ColorChannel<uchar>::max());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "Luv2RGBConvert_b", "index": 1432, "label": 0}
{"input": "static void test_output_const()\n{\n  Tensor<int, 1, DataLayout> tensor(5);\n  for (int i = 0; i < 5; ++i) {\n    tensor(i) = i;\n  }\n\n  TensorMap<Tensor<const int, 1, DataLayout> > tensor_map(tensor.data(), 5);\n\n  std::stringstream os;\n  os << tensor_map;\n\n  std::string expected(\"0\\n1\\n2\\n3\\n4\");\n  VERIFY_IS_EQUAL(std::string(os.str()), expected);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_io.cpp", "function_name": "test_output_const", "index": 1433, "label": 0}
{"input": "void check_histogram(Scalar x, Scalar y, int bins)\n{\n  Array<int,1,Dynamic> hist(bins);\n  hist.fill(0);\n  int f = 100000;\n  int n = bins*f;\n  int64 range = int64(y)-int64(x);\n  int divisor = int((range+1)/bins);\n  assert(((range+1)%bins)==0);\n  for(int k=0; k<n; ++k)\n  {\n    Scalar r = check_in_range(x,y);\n    hist( int((int64(r)-int64(x))/divisor) )++;\n  }\n  VERIFY( (((hist.cast<double>()/double(f))-1.0).abs()<0.02).all() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/rand.cpp", "function_name": "check_histogram", "index": 1434, "label": 0}
{"input": "static void test_dim_check()\n{\n  Eigen::IndexList<Eigen::type2index<1>, int> dim1;\n  dim1.set(1, 2);\n  Eigen::IndexList<Eigen::type2index<1>, int> dim2;\n  dim2.set(1, 2);\n  VERIFY(dimensions_match(dim1, dim2));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_index_list.cpp", "function_name": "test_dim_check", "index": 1435, "label": 0}
{"input": "Result<std::vector<std::pair<ChunkId, ChunkMetadata>>> StorageOperator::doQuery(ServiceRequestContext &requestCtx,\n                                                                                const VersionedChainId &vChainId,\n                                                                                const ChunkIdRange &chunkIdRange) {\n  auto recordGuard = storageDoQueryRecorder.record();\n  \n  CHECK_RESULT(target, components_.targetMap.getByChainId(vChainId));\n\n  auto queryResult = FAULT_INJECTION_POINT(requestCtx.debugFlags.injectServerError(),\n                                           makeError(StorageCode::kMetaStoreInvalidIterator),\n                                           target->storageTarget->queryChunks(chunkIdRange));\n\n  if (LIKELY(bool(queryResult))) {\n    storageNumChunksInQueryRes.addSample(queryResult->size());\n    recordGuard.succ();\n  }\n\n  return queryResult;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/storage/service/StorageOperator.cc", "function_name": "StorageOperator::doQuery", "index": 1436, "label": 0}
{"input": "[[nodiscard]] inline std::array<Vec3, 3> ENUUnitVecsInECEF(const reference_frames::ECEF& location) noexcept\n    {\n        const auto& [xHat, yHat, zHat] = NEDUnitVecsInECEF(location);\n        return { yHat, xHat, -zHat };\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ENUUnitVecsInECEF.hpp", "function_name": "ENUUnitVecsInECEF", "index": 1437, "label": 0}
{"input": "v_reg(const v_reg<_Tp, n> & r)\n    {\n        for( int i = 0; i < n; i++ )\n            s[i] = r.s[i];\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_cpp.hpp", "function_name": "v_reg", "index": 1438, "label": 0}
{"input": "void LatencyRecorder::addSample(std::chrono::nanoseconds duration, const TagSet &tag) {\n  getRecorderWithTag(tag)->addSample(duration);\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/common/monitor/Recorder.cc", "function_name": "LatencyRecorder::addSample", "index": 1439, "label": 0}
{"input": "void applyFunction(NdArray<dtype>& inArray, const std::function<dtype(dtype)>& inFunc)\n    {\n        stl_algorithms::transform(inArray.begin(), inArray.end(), inArray.begin(), inFunc);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/applyFunction.hpp", "function_name": "applyFunction", "index": 1440, "label": 0}
{"input": "MyDisp::MyDisp(){\n    sensor_manager = 0;\n    sensor_event_queue = 0;\n    accelerometer_sensor = 0;\n    win = 0;\n    accelerometer_orientation = 0;\n    sensor_manager = ASensorManager_getInstance();\n    accelerometer_sensor = ASensorManager_getDefaultSensor(sensor_manager, ASENSOR_TYPE_ACCELEROMETER);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/ndkwin.cpp", "function_name": "MyDisp::MyDisp", "index": 1441, "label": 0}
{"input": "cv::Mat_<double> cvlfilter_zi(cv::Mat_<double> b, cv::Mat_<double> a) {\n    if ((b.rows != 1) || (a.rows != 1)) {\n        \n    }\n    if (a(0, 0) != 1) {\n        \n        b = b / a(0, 0);\n        a = a / a(0, 0);\n    }\n    int len_a = a.cols * a.rows;\n    int len_b = b.cols * b.rows;\n    int n = len_a > len_b ? len_a : len_b;\n    if (len_a < n) {\n        cv::hconcat(a, cv::Mat_<float>::zeros(1, n - len_a), a);\n    } else if (len_b < n) {\n        cv::hconcat(b, cv::Mat_<float>::zeros(1, n - len_b), b);\n    }\n    return cv::Mat_<double>(0, 0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/mfcc.hpp", "function_name": "cvlfilter_zi", "index": 1442, "label": 0}
{"input": "void test_bicgstab()\n{\n  CALL_SUBTEST_1((test_bicgstab_T<double,int>()) );\n  CALL_SUBTEST_2((test_bicgstab_T<std::complex<double>, int>()));\n  CALL_SUBTEST_3((test_bicgstab_T<double,long int>()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/bicgstab.cpp", "function_name": "test_bicgstab", "index": 1443, "label": 0}
{"input": "void cloneData(const Table &o) { Cloner<Table, IsFlat && std::is_trivially_copyable<Node>::value>()(o, *this); }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "c9f95115949eb5940e21bf89b79acfa0fa01b3a9", "file_path": "src/common/utils/RobinHood.h", "function_name": "o", "index": 1444, "label": 0}
{"input": "Quat<T> Quat<T>::createFromAngleAxis(const T angle, const Vec<T, 3> &axis)\n{\n    T w, x, y, z;\n    T vNorm = std::sqrt(axis.dot(axis));\n    if (vNorm < CV_QUAT_EPS)\n    {\n        CV_Error(Error::StsBadArg, \"this quaternion does not represent a rotation\");\n    }\n    const T angle_half = angle * T(0.5);\n    w = std::cos(angle_half);\n    const T sin_v = std::sin(angle_half);\n    const T sin_norm = sin_v / vNorm;\n    x = sin_norm * axis[0];\n    y = sin_norm * axis[1];\n    z = sin_norm * axis[2];\n    return Quat<T>(w, x, y, z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::createFromAngleAxis", "index": 1445, "label": 0}
{"input": "inline\nbool companion<_Scalar,_Deg>::balancedR( Scalar colNorm, Scalar rowNorm,\n    bool& isBalanced, Scalar& colB, Scalar& rowB )\n{\n  if( Scalar(0) == colNorm || Scalar(0) == rowNorm ){ return true; }\n  else\n  {\n    \n    const _Scalar q = colNorm/rowNorm;\n    if( !isApprox( q, _Scalar(1) ) )\n    {\n      rowB = sqrt( colNorm/rowNorm );\n      colB = Scalar(1)/rowB;\n\n      isBalanced = false;\n      return false;\n    }\n    else{\n      return true; }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/Companion.h", "function_name": "companion<_Scalar,_Deg>::balancedR", "index": 1446, "label": 0}
{"input": "std::string sym_to_string(int sym)\n{\n  if(sym==Symmetric) return \"Symmetric \";\n  if(sym==SPD)       return \"SPD \";\n  return \"\";\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "sym_to_string", "index": 1447, "label": 0}
{"input": "std::shared_ptr<const PreparedJavaScript> JSVMRuntime::prepareJavaScript(\n    const std::shared_ptr<const Buffer>& buffer, std::string sourceURL) {\n  return std::make_shared<piper::SourceJavaScriptPreparation>(\n      buffer, std::move(sourceURL));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::prepareJavaScript", "index": 1448, "label": 0}
{"input": "int KWav::pushpcm(uint8_t* pcm,int size){\n\tuint8_t* pstart = pcm;\n\tint\t\tpsize = size;\n\tif(m_alonecnt){\n\t\tpstart++;\n\t\tpsize--;\n\t\tm_alonearr[1]=*pcm;\n\t\tfloat* ps = (float*)m_alonearr;\n\t\t*m_curwav++ = (float)(*ps++/32767.f);\n\t\tincsample(1);\n\t\tm_alonecnt = 0;\n\t}\n\tint sample = psize / 2;\n    \n\tint left = psize % 2;\n\tif(sample>m_leftsample){\n\t\tsample = m_leftsample;\n\t\tleft = 0;\n\t}\n\n\tshort* ps = (short*)pstart;\n    float* pf = m_curwav;\n\tfor(int k=0;k<sample;k++){\n\t\t*pf++ = (float)(*ps++/32767.f);\n\t}\n\tm_curwav = pf;\n    \n\tincsample(sample);\n\tif(left){\n\t\tuint8_t* pc = (uint8_t*)ps;\n\t\tm_alonearr[0] = *pc;\n\t\tm_alonecnt = 1;\n\t}\n\treturn sample;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/netwav.cpp", "function_name": "KWav::pushpcm", "index": 1449, "label": 0}
{"input": "static __device__ __forceinline__ void reduce_n(T* data, unsigned int n, BinOp op)\n        {\n            int ftid = flattenedThreadId();\n            int sft = stride();\n\n            if (sft < n)\n            {\n                for (unsigned int i = sft + ftid; i < n; i += sft)\n                    data[ftid] = op(data[ftid], data[i]);\n\n                __syncthreads();\n\n                n = sft;\n            }\n\n            while (n > 1)\n            {\n                unsigned int half = n/2;\n\n                if (ftid < half)\n                    data[ftid] = op(data[ftid], data[n - ftid - 1]);\n\n                __syncthreads();\n\n                n = n - half;\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/block.hpp", "function_name": "reduce_n", "index": 1450, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\ndouble2 plgamma<double2>(const double2& a)\n{\n  using numext::lgamma;\n  return make_double2(lgamma(a.x), lgamma(a.y));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/arch/CUDA/CudaSpecialFunctions.h", "function_name": "plgamma", "index": 1451, "label": 0}
{"input": "void test_lscg_T()\n{\n  LeastSquaresConjugateGradient<SparseMatrix<T> > lscg_colmajor_diag;\n  LeastSquaresConjugateGradient<SparseMatrix<T>, IdentityPreconditioner> lscg_colmajor_I;\n  LeastSquaresConjugateGradient<SparseMatrix<T,RowMajor> > lscg_rowmajor_diag;\n  LeastSquaresConjugateGradient<SparseMatrix<T,RowMajor>, IdentityPreconditioner> lscg_rowmajor_I;\n\n  CALL_SUBTEST( check_sparse_square_solving(lscg_colmajor_diag)  );\n  CALL_SUBTEST( check_sparse_square_solving(lscg_colmajor_I)     );\n  \n  CALL_SUBTEST( check_sparse_leastsquare_solving(lscg_colmajor_diag)  );\n  CALL_SUBTEST( check_sparse_leastsquare_solving(lscg_colmajor_I)     );\n\n  CALL_SUBTEST( check_sparse_square_solving(lscg_rowmajor_diag)  );\n  CALL_SUBTEST( check_sparse_square_solving(lscg_rowmajor_I)     );\n\n  CALL_SUBTEST( check_sparse_leastsquare_solving(lscg_rowmajor_diag)  );\n  CALL_SUBTEST( check_sparse_leastsquare_solving(lscg_rowmajor_I)     );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/lscg.cpp", "function_name": "test_lscg_T", "index": 1452, "label": 0}
{"input": "static lapack_int blocked_lu(Index rows, Index cols, EIGTYPE* lu_data, Index luStride, lapack_int* row_transpositions, lapack_int& nb_transpositions, lapack_int maxBlockSize=256) \\\n  { \\\n    EIGEN_UNUSED_VARIABLE(maxBlockSize);\\\n    lapack_int matrix_order, first_zero_pivot; \\\n    lapack_int m, n, lda, *ipiv, info; \\\n    EIGTYPE* a; \\\n \\\n    matrix_order = StorageOrder==RowMajor ? LAPACK_ROW_MAJOR : LAPACK_COL_MAJOR; \\\n    lda = convert_index<lapack_int>(luStride); \\\n    a = lu_data; \\\n    ipiv = row_transpositions; \\\n    m = convert_index<lapack_int>(rows); \\\n    n = convert_index<lapack_int>(cols); \\\n    nb_transpositions = 0; \\\n\\\n    info = LAPACKE_##LAPACKE_PREFIX##getrf( matrix_order, m, n, (LAPACKE_TYPE*)a, lda, ipiv ); \\\n\\\n    for(int i=0;i<m;i++) { ipiv[i]--; if (ipiv[i]!=i) nb_transpositions++; } \\\n\\\n    eigen_assert(info >= 0); \\\n \\\n\\\n    first_zero_pivot = info; \\\n    return first_zero_pivot; \\\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/PartialPivLU_LAPACKE.h", "function_name": "blocked_lu", "index": 1453, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline const Product<Homogeneous,Rhs>\n    operator* (const MatrixBase<Rhs>& rhs) const\n    {\n      eigen_assert(int(Direction)==Horizontal);\n      return Product<Homogeneous,Rhs>(*this,rhs.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "Product<Homogeneous,Rhs>\n    operator*", "index": 1454, "label": 0}
{"input": "inline CallbackProxy(int tasks_, FN_parallel_for_body_cb_t& callback_, void* callback_data_)\n            : callback(callback_), callback_data(callback_data_), tasks(tasks_)\n        {\n            \n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/parallel/backend/parallel_for.tbb.hpp", "function_name": "CallbackProxy", "index": 1455, "label": 0}
{"input": "void bench_eigengemm(MyMatrix& mc, const MyMatrix& ma, const MyMatrix& mb, int nbloops)\n{\n  for (uint j=0 ; j<nbloops ; ++j)\n      mc.noalias() += ma * mb;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchBlasGemm.cpp", "function_name": "bench_eigengemm", "index": 1456, "label": 0}
{"input": "void GemmaTokenizer::Deserialize(const std::string& tokenizer_proto) {\n  impl_ = std::make_unique<Impl>(tokenizer_proto);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/tokenizer.cc", "function_name": "GemmaTokenizer::Deserialize", "index": 1457, "label": 0}
{"input": "~BenchmarkSuite() {\n    device_.deallocate(a_);\n    device_.deallocate(b_);\n    device_.deallocate(c_);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/tensor_benchmarks.h", "function_name": "~BenchmarkSuite", "index": 1458, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void smart_copy(const T* start, const T* end, T* target)\n{\n  smart_copy_helper<T,!NumTraits<T>::RequireInitialization>::run(start, end, target);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "smart_copy", "index": 1459, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorPatchOp<const PatchDims, const Derived>\n    extract_patches(const PatchDims& patch_dims) const {\n      return TensorPatchOp<const PatchDims, const Derived>(derived(), patch_dims);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorPatchOp<const PatchDims, const Derived>\n    extract_patches", "index": 1460, "label": 0}
{"input": "inline void attr_utils::GetAttrs(const OrtKernelInfo* p, const char* name, std::vector<int64_t>& result) {\n  size_t size = 0;\n\n  \n  Ort::ThrowOnError(GetApi().KernelInfoGetAttributeArray_int64(p, name, nullptr, &size));\n\n  std::vector<int64_t> out;\n  out.resize(size);\n  Ort::ThrowOnError(GetApi().KernelInfoGetAttributeArray_int64(p, name, out.data(), &size));\n  out.swap(result);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "attr_utils::GetAttrs", "index": 1461, "label": 0}
{"input": "int gjdigit_startgpg(gjdigit_t* dg,const char* infn,const char* outfn){\n    std::string s_in(infn);\n    std::string s_out(outfn);\n    if(!dg->mat_gpg)dg->mat_gpg = new JMat();\n    int rst = dg->mat_gpg->loadjpg(s_in);\n    if(rst)return rst;\n    rst = dg->mat_gpg->savegpg(s_out);\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_startgpg", "index": 1462, "label": 0}
{"input": "static EIGEN_DONT_INLINE res run( arg1& a1, arg2& a2 )\n    {\n\tasm (\"\");\n\treturn res(a1.matrix() * a2.matrix());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchGeometry.cpp", "function_name": "a1", "index": 1463, "label": 0}
{"input": "void trmm(int rows=get_random_size<Scalar>(), int cols=get_random_size<Scalar>(), int otherCols = get_random_size<Scalar>())\n{\n  trmm<Scalar,Mode,TriOrder,OtherOrder,ResOrder,Dynamic>(rows,cols,otherCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_trmm.cpp", "function_name": "trmm", "index": 1464, "label": 0}
{"input": "void test_numext() {\n  CALL_SUBTEST( check_abs<bool>() );\n  CALL_SUBTEST( check_abs<signed char>() );\n  CALL_SUBTEST( check_abs<unsigned char>() );\n  CALL_SUBTEST( check_abs<short>() );\n  CALL_SUBTEST( check_abs<unsigned short>() );\n  CALL_SUBTEST( check_abs<int>() );\n  CALL_SUBTEST( check_abs<unsigned int>() );\n  CALL_SUBTEST( check_abs<long>() );\n  CALL_SUBTEST( check_abs<unsigned long>() );\n  CALL_SUBTEST( check_abs<half>() );\n  CALL_SUBTEST( check_abs<float>() );\n  CALL_SUBTEST( check_abs<double>() );\n  CALL_SUBTEST( check_abs<long double>() );\n\n  CALL_SUBTEST( check_abs<std::complex<float> >() );\n  CALL_SUBTEST( check_abs<std::complex<double> >() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/numext.cpp", "function_name": "test_numext", "index": 1465, "label": 0}
{"input": "void test_trigonometric_functions()\n{\n  VERIFY_IS_APPROX(numext::cos(half(0.0f)), half(cosf(0.0f)));\n  VERIFY_IS_APPROX(cos(half(0.0f)), half(cosf(0.0f)));\n  VERIFY_IS_APPROX(numext::cos(half(EIGEN_PI)), half(cosf(EIGEN_PI)));\n  \n  \n  VERIFY_IS_APPROX(numext::cos(half(3.5f)), half(cosf(3.5f)));\n\n  VERIFY_IS_APPROX(numext::sin(half(0.0f)), half(sinf(0.0f)));\n  VERIFY_IS_APPROX(sin(half(0.0f)), half(sinf(0.0f)));\n  \n  VERIFY_IS_APPROX(numext::sin(half(EIGEN_PI/2)), half(sinf(EIGEN_PI/2)));\n  VERIFY_IS_APPROX(numext::sin(half(3*EIGEN_PI/2)), half(sinf(3*EIGEN_PI/2)));\n  VERIFY_IS_APPROX(numext::sin(half(3.5f)), half(sinf(3.5f)));\n\n  VERIFY_IS_APPROX(numext::tan(half(0.0f)), half(tanf(0.0f)));\n  VERIFY_IS_APPROX(tan(half(0.0f)), half(tanf(0.0f)));\n  \n  \n  \n  VERIFY_IS_APPROX(numext::tan(half(3.5f)), half(tanf(3.5f)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/half_float.cpp", "function_name": "test_trigonometric_functions", "index": 1466, "label": 0}
{"input": "inline bool write_content(Stream &strm, const ContentProvider &content_provider,\n                          size_t offset, size_t length,\n                          const T &is_shutting_down) {\n  auto error = Error::Success;\n  return write_content(strm, content_provider, offset, length, is_shutting_down,\n                       error);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "write_content", "index": 1467, "label": 0}
{"input": "inline __m256i _lasx_packs_w(const __m256i& a, const __m256i& b)\n{\n    __m256i s16min = __lasx_xvreplgr2vr_w(-0x8000);\n    __m256i s16max = __lasx_xvreplgr2vr_w(0x7fff);\n    __m256i sat_a = __lasx_xvmax_w(a, s16min);\n            sat_a = __lasx_xvmin_w(sat_a, s16max);\n    __m256i sat_b = __lasx_xvmax_w(b, s16min);\n            sat_b = __lasx_xvmin_w(sat_b, s16max);\n    __m256i hwordIndex = _v256_setr_h(0, 2, 4, 6, 8, 10, 12, 14,\n                                      0, 2, 4, 6, 8, 10, 12, 14);\n    return __lasx_xvshuf_h(hwordIndex, sat_b, sat_a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_lasx_packs_w", "index": 1468, "label": 0}
{"input": "inline uint64_t get_header_value_u64(const Headers &headers,\n                                     const std::string &key, size_t id,\n                                     uint64_t def) {\n  auto rng = headers.equal_range(key);\n  auto it = rng.first;\n  std::advance(it, static_cast<ssize_t>(id));\n  if (it != rng.second) {\n    return std::strtoull(it->second.data(), nullptr, 10);\n  }\n  return def;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "get_header_value_u64", "index": 1469, "label": 0}
{"input": "inline cl_program clCreateProgramWithSource(cl_context p0, cl_uint p1, const char** p2, const size_t* p3, cl_int* p4) { return clCreateProgramWithSource_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateProgramWithSource", "index": 1470, "label": 0}
{"input": "static int hf3fs_usrbio_alloc(struct thread_data *td, size_t total_mem) {\n    struct hf3fs_usrbio_options *options = td->eo;\n\n    auto &iov = static_cast<hf3fs_usrbio_data *>(td->io_ops_data)->iov;\n    auto res = hf3fs_iovcreate(&iov, options->mountpoint, total_mem, 0, -1);\n    if (res < 0) {\n        return res;\n    }\n\n    td->orig_buffer = iov.base;\n    return 0;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_alloc", "index": 1471, "label": 0}
{"input": "inline void computeProductBlockingSizes(Index& k, Index& m, Index& n, Index num_threads = 1)\n{\n  computeProductBlockingSizes<LhsScalar,RhsScalar,1,Index>(k, m, n, num_threads);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "computeProductBlockingSizes", "index": 1472, "label": 0}
{"input": "JSVMSymbolValue::JSVMSymbolValue(JSVM_Env env, JSVM_Value sym_val) : env_(env) {\n  JSVM_CALL(OH_JSVM_CreateReference(env, sym_val, 1, &sym_ref_));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_helper.cc", "function_name": "JSVMSymbolValue::JSVMSymbolValue", "index": 1473, "label": 0}
{"input": "gapi::GNetParam strip(T&& t) {\n    return gapi::GNetParam { t.tag()\n                           , t.backend()\n                           , t.params()\n                           };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/infer.hpp", "function_name": "strip", "index": 1474, "label": 0}
{"input": "inline std::ptrdiff_t l1CacheSize()\n{\n  std::ptrdiff_t l1, l2, l3;\n  internal::manage_caching_sizes(GetAction, &l1, &l2, &l3);\n  return l1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "l1CacheSize", "index": 1475, "label": 0}
{"input": "void mapstaticmethods(const PlainObjectType& m)\n{\n  mapstaticmethods_impl<PlainObjectType>::run(m);\n  VERIFY(true); \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/mapstaticmethods.cpp", "function_name": "mapstaticmethods", "index": 1476, "label": 0}
{"input": "void findNeighbors(const Pixel<dtype>& inPixel, std::set<Pixel<dtype>>& outNeighbors)\n        {\n            \n\n            \n            const auto row = static_cast<int32>(inPixel.row);\n            const auto col = static_cast<int32>(inPixel.col);\n\n            outNeighbors.insert(outNeighbors.end(), makePixel(row - 1, col - 1));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row - 1, col));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row - 1, col + 1));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row, col - 1));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row, col + 1));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row + 1, col - 1));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row + 1, col));\n            outNeighbors.insert(outNeighbors.end(), makePixel(row + 1, col + 1));\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/ImageProcessing/ClusterMaker.hpp", "function_name": "std::set<Pixel<dtype>>", "index": 1477, "label": 0}
{"input": "inline\nstd::reverse_iterator<MatIterator_<_Tp>> Mat::rbegin()\n{\n    if (empty())\n        return std::reverse_iterator<MatIterator_<_Tp>>();\n    CV_DbgAssert( elemSize() == sizeof(_Tp) );\n    MatIterator_<_Tp> it((Mat_<_Tp>*)this);\n    it += total();\n    return std::reverse_iterator<MatIterator_<_Tp>>(it);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat::rbegin", "index": 1478, "label": 0}
{"input": "std::size_t nextPowerOfTwo(IntType n)\n        {\n            if (n < 0)\n            {\n                throw std::invalid_argument(\"Input value must be greater than or equal to zero.\");\n            }\n\n            if (isPowerOfTwo(n))\n            {\n                return static_cast<std::size_t>(n) << 1;\n            }\n\n            return static_cast<std::size_t>(std::pow(2, std::ceil(std::log2(n))));\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/hammingEncode.hpp", "function_name": "nextPowerOfTwo", "index": 1479, "label": 0}
{"input": "inline\nvoid CompressedRectilinearPortraitProjector::mapForward(float x, float y, float &u, float &v)\n{\n    float y_ = r_kinv[0] * x + r_kinv[1] * y + r_kinv[2];\n    float x_ = r_kinv[3] * x + r_kinv[4] * y + r_kinv[5];\n    float z_ = r_kinv[6] * x + r_kinv[7] * y + r_kinv[8];\n\n    float u_ = atan2f(x_, z_);\n    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));\n\n    u = - scale * a * tanf(u_ / a);\n    v = scale * b * tanf(v_) / cosf(u_);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "CompressedRectilinearPortraitProjector::mapForward", "index": 1480, "label": 0}
{"input": "void WakeWordDetect::Initialize(AudioCodec* codec) {\n    codec_ = codec;\n\n    wakenet_model_ = esp_srmodel_init(\"model\");\n\n    if(wakenet_model_->num > 1) {\n        ESP_LOGW(TAG, \"More than one model found, using the first one\");\n    }\n    char *model_name = wakenet_model_->model_name[0];\n    wakenet_iface_ = (esp_wn_iface_t*)esp_wn_handle_from_name(model_name);\n    wakenet_data_ = wakenet_iface_->create(model_name, DET_MODE_95);\n\n    int frequency = wakenet_iface_->get_samp_rate(wakenet_data_);\n    int audio_chunksize = wakenet_iface_->get_samp_chunksize(wakenet_data_);\n    ESP_LOGI(TAG, \"Wake word(%s),freq: %d, chunksize: %d\", model_name, frequency, audio_chunksize);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_processing/wake_word_no_afe.cc", "function_name": "WakeWordDetect::Initialize", "index": 1481, "label": 0}
{"input": "void setMode(CholmodMode mode)\n    {\n      switch(mode)\n      {\n        case CholmodAuto:\n          m_cholmod.final_asis = 1;\n          m_cholmod.supernodal = CHOLMOD_AUTO;\n          break;\n        case CholmodSimplicialLLt:\n          m_cholmod.final_asis = 0;\n          m_cholmod.supernodal = CHOLMOD_SIMPLICIAL;\n          m_cholmod.final_ll = 1;\n          break;\n        case CholmodSupernodalLLt:\n          m_cholmod.final_asis = 1;\n          m_cholmod.supernodal = CHOLMOD_SUPERNODAL;\n          break;\n        case CholmodLDLt:\n          m_cholmod.final_asis = 1;\n          m_cholmod.supernodal = CHOLMOD_SIMPLICIAL;\n          break;\n        default:\n          break;\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "mode", "index": 1482, "label": 0}
{"input": "const HouseholderQR<typename MatrixBase<Derived>::PlainObject>\nMatrixBase<Derived>::householderQr() const\n{\n  return HouseholderQR<PlainObject>(eval());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/HouseholderQR.h", "function_name": "MatrixBase<Derived>::householderQr", "index": 1483, "label": 0}
{"input": "inline\nvoid cv::ogl::Texture2D::create(Size asize, Format aformat, bool autoRelease)\n{\n    create(asize.height, asize.width, aformat, autoRelease);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opengl.hpp", "function_name": "cv::ogl::Texture2D::create", "index": 1484, "label": 0}
{"input": "__device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const\n        {\n            return saturate_cast<D>(src(idx_row(y), idx_col(x)));\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/border_interpolate.hpp", "function_name": "at", "index": 1485, "label": 0}
{"input": "void tridiagonalization_inplace(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, bool extractQ)\n{\n  eigen_assert(mat.cols()==mat.rows() && diag.size()==mat.rows() && subdiag.size()==mat.rows()-1);\n  tridiagonalization_inplace_selector<MatrixType>::run(mat, diag, subdiag, extractQ);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h", "function_name": "tridiagonalization_inplace", "index": 1486, "label": 0}
{"input": "EIGEN_STRONG_INLINE\nbool not_equal_strict(const double& x,const double& y) { return std::not_equal_to<double>()(x,y); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Meta.h", "function_name": "not_equal_strict", "index": 1487, "label": 0}
{"input": "Otto::Otto() {\n    is_otto_resting_ = false;\n    has_hands_ = false;\n    \n    for (int i = 0; i < SERVO_COUNT; i++) {\n        servo_pins_[i] = -1;\n        servo_trim_[i] = 0;\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::Otto", "index": 1488, "label": 0}
{"input": "bool WakeWordDetect::IsDetectionRunning() {\n    return xEventGroupGetBits(event_group_) & DETECTION_RUNNING_EVENT;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_processing/wake_word_no_afe.cc", "function_name": "WakeWordDetect::IsDetectionRunning", "index": 1489, "label": 0}
{"input": "inline TypeInfo MapTypeInfo::GetMapValueType() const {\n  OrtTypeInfo* output;\n  ThrowOnError(GetApi().GetMapValueType(p_, &output));\n  return TypeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "MapTypeInfo::GetMapValueType", "index": 1490, "label": 0}
{"input": "inline GProtoArgs packArgs(Ts... args)\n{\n    return GProtoArgs{ GProtoArg(wrap_gapi_helper<Ts>::wrap(args))... };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gproto.hpp", "function_name": "packArgs", "index": 1491, "label": 0}
{"input": "NdArray<dtype> nanmax(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = DtypeInfo<dtype>::min();\n                                     };\n                                 });\n\n        return max(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nanmax.hpp", "function_name": "nanmax", "index": 1492, "label": 0}
{"input": "piper::PropNameID JSVMRuntime::createPropNameIDFromAscii(const char* str,\n                                                         size_t length) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value valueStr = nullptr;\n  JSVM_CALL(OH_JSVM_CreateStringUtf8(getEnv(), str, length, &valueStr));\n  auto res = JSVMHelper::createPropNameID(valueStr, getEnv());\n  return res;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createPropNameIDFromAscii", "index": 1493, "label": 0}
{"input": "CvSize2D32f cvSize2D32f(const cv::Size_<_Tp>& sz)\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvSize2D32f s = { (float)sz.width, (float)sz.height };\n#else\n    CvSize2D32f s((float)sz.width, (float)sz.height);\n#endif\n    return s;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvSize2D32f", "index": 1494, "label": 0}
{"input": "explicit __host__ __device__ __forceinline__ AreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)\n            : src(src_), scale_x(scale_x_), scale_y(scale_y_){}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/filters.hpp", "function_name": "AreaFilter", "index": 1495, "label": 0}
{"input": "inline bool is_chunked_transfer_encoding(const Headers &headers) {\n  return !strcasecmp(get_header_value(headers, \"Transfer-Encoding\", 0, \"\"),\n                     \"chunked\");\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "is_chunked_transfer_encoding", "index": 1496, "label": 0}
{"input": "void MemoryMonitor::UpdateScriptingEngineMemoryUsage(\n    std::unordered_map<std::string, std::string> info) {\n  if (!Enable()) {\n    return;\n  }\n  auto it = info.find(kRawRuntimeMemoryInfo);\n  if (it == info.end()) {\n    return;\n  }\n\n  rapidjson::Document doc;\n  doc.Parse(it->second);\n  info.erase(kRawRuntimeMemoryInfo);\n  if (doc.HasParseError() || !doc.IsObject()) {\n    return;\n  }\n  const rapidjson::Value& gc_info = doc[\"gc_info\"];\n  if (!gc_info.IsArray()) {\n    return;\n  }\n  rapidjson::SizeType arraySize = gc_info.Size();\n  if (arraySize == 0) {\n    return;\n  }\n  const rapidjson::Value& lastElement = gc_info[arraySize - 1];\n  if (lastElement.IsNull()) {\n    return;\n  }\n  UpdateMemoryUsage(BuildMemoryRecord(lastElement, std::move(info)));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/services/performance/memory_monitor/memory_monitor.cc", "function_name": "MemoryMonitor::UpdateScriptingEngineMemoryUsage", "index": 1497, "label": 0}
{"input": "bool Contains(IndexRange other) const {\n    return other.begin_ >= begin_ && other.end_ <= end_;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "util/basics.h", "function_name": "other", "index": 1498, "label": 0}
{"input": "void RenderingWidget::mouseReleaseEvent(QMouseEvent*)\n{\n    mCurrentTrackingMode = TM_NO_TRACK;\n    updateGL();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "RenderingWidget::mouseReleaseEvent", "index": 1499, "label": 0}
{"input": "void HouseholderQR<_MatrixType>::_solve_impl(const RhsType &rhs, DstType &dst) const\n{\n  const Index rank = (std::min)(rows(), cols());\n  eigen_assert(rhs.rows() == rows());\n\n  typename RhsType::PlainObject c(rhs);\n\n  \n  c.applyOnTheLeft(householderSequence(\n    m_qr.leftCols(rank),\n    m_hCoeffs.head(rank)).transpose()\n  );\n\n  m_qr.topLeftCorner(rank, rank)\n      .template triangularView<Upper>()\n      .solveInPlace(c.topRows(rank));\n\n  dst.topRows(rank) = c.topRows(rank);\n  dst.bottomRows(cols()-rank).setZero();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/HouseholderQR.h", "function_name": "HouseholderQR<_MatrixType>::_solve_impl", "index": 1500, "label": 0}
{"input": "EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet4f\nptanh<Packet4f>(const Packet4f& x) {\n  return internal::generic_fast_tanh_float(x);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h", "function_name": "ptanh", "index": 1501, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline NonInteger exteriorDistance(const MatrixBase<Derived>& p) const\n  { EIGEN_USING_STD_MATH(sqrt) return sqrt(NonInteger(squaredExteriorDistance(p))); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/AlignedBox.h", "function_name": "exteriorDistance", "index": 1502, "label": 0}
{"input": "SCALAR E_VDW(const Vec &interactions1, const Vec &interactions2)\n{\n  return (interactions2.cwise()/interactions1)\n         .cwise().cube()\n         .cwise().square()\n         .cwise().square()\n         .sum();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/vdw_new.cpp", "function_name": "E_VDW", "index": 1503, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseBinaryOp<std::equal_to<Scalar>, const Derived, const OtherDerived>\ncwiseEqual(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const\n{\n  return CwiseBinaryOp<std::equal_to<Scalar>, const Derived, const OtherDerived>(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h", "function_name": "CwiseBinaryOp<std::equal_to<Scalar>, const Derived, const OtherDerived>\ncwiseEqual", "index": 1504, "label": 0}
{"input": "static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 4>::vec_type& vec)\n        {\n            return vec.w;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "getAlpha", "index": 1505, "label": 0}
{"input": "static void test_concat()\n{\n  Tensor<std::string, 2> t1(2, 3);\n  Tensor<std::string, 2> t2(2, 3);\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      std::ostringstream s1;\n      s1 << \"abc\" << i + j*2;\n      t1(i, j) = s1.str();\n      std::ostringstream s2;\n      s2 << \"def\" << i*5 + j*32;\n      t2(i, j) = s2.str();\n    }\n  }\n\n  Tensor<std::string, 2> result = t1.concatenate(t2, 1);\n  VERIFY_IS_EQUAL(result.dimension(0), 2);\n  VERIFY_IS_EQUAL(result.dimension(1), 6);\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      VERIFY_IS_EQUAL(result(i, j),   t1(i, j));\n      VERIFY_IS_EQUAL(result(i, j+3), t2(i, j));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_of_strings.cpp", "function_name": "test_concat", "index": 1506, "label": 0}
{"input": "inline\n    void work( int stage,Complex * xout, const _Src * xin, size_t fstride,size_t in_stride)\n    {\n      int p = m_stageRadix[stage];\n      int m = m_stageRemainder[stage];\n      Complex * Fout_beg = xout;\n      Complex * Fout_end = xout + p*m;\n\n      if (m>1) {\n        do{\n          \n          \n          \n          \n          work(stage+1, xout , xin, fstride*p,in_stride);\n          xin += fstride*in_stride;\n        }while( (xout += m) != Fout_end );\n      }else{\n        do{\n          *xout = *xin;\n          xin += fstride*in_stride;\n        }while(++xout != Fout_end );\n      }\n      xout=Fout_beg;\n\n      \n      switch (p) {\n        case 2: bfly2(xout,fstride,m); break;\n        case 3: bfly3(xout,fstride,m); break;\n        case 4: bfly4(xout,fstride,m); break;\n        case 5: bfly5(xout,fstride,m); break;\n        default: bfly_generic(xout,fstride,m,p); break;\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h", "function_name": "work", "index": 1507, "label": 0}
{"input": "inline int MemoryInfoImpl<T>::GetDeviceId() const {\n  int id = 0;\n  ThrowOnError(GetApi().MemoryInfoGetId(this->p_, &id));\n  return id;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MemoryInfoImpl<T>::GetDeviceId", "index": 1508, "label": 0}
{"input": "void Oscillator::Write(int position) {\n    if (!is_attached_)\n        return;\n\n    long currentMillis = millis();\n    if (diff_limit_ > 0) {\n        int limit = std::max(\n            1, (((int)(currentMillis - previous_servo_command_millis_)) * diff_limit_) / 1000);\n        if (abs(position - pos_) > limit) {\n            pos_ += position < pos_ ? -limit : limit;\n        } else {\n            pos_ = position;\n        }\n    } else {\n        pos_ = position;\n    }\n    previous_servo_command_millis_ = currentMillis;\n\n    int angle = pos_ + trim_;\n\n    angle = std::min(std::max(angle, 0), 180);\n\n    uint32_t duty = (uint32_t)(((angle / 180.0) * 2.0 + 0.5) * 8191 / 20.0);\n\n    ESP_ERROR_CHECK(ledc_set_duty(ledc_speed_mode_, ledc_channel_, duty));\n    ESP_ERROR_CHECK(ledc_update_duty(ledc_speed_mode_, ledc_channel_));\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/oscillator.cc", "function_name": "Oscillator::Write", "index": 1509, "label": 0}
{"input": "void operator delete(void *ptr, const std::nothrow_t&) EIGEN_NO_THROW { \\\n        Eigen::internal::conditional_aligned_free<NeedsToAlign>(ptr); \\\n      }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "operator delete", "index": 1510, "label": 0}
{"input": "inline void TensorTypeAndShapeInfoImpl<T>::GetDimensions(int64_t* values, size_t values_count) const {\n  ThrowOnError(GetApi().GetDimensions(this->p_, values, values_count));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfoImpl<T>::GetDimensions", "index": 1511, "label": 0}
{"input": "static void test_constants()\n{\n  Tensor<float, 3> mat1(2,3,7);\n  Tensor<float, 3> mat2(2,3,7);\n  Tensor<float, 3> mat3(2,3,7);\n\n  float val = 1.0f;\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        mat1(i,j,k) = val;\n        val += 1.0f;\n      }\n    }\n  }\n  mat2 = mat1.constant(3.14f);\n  mat3 = mat1.cwiseMax(7.3f).exp();\n\n  val = 1.0f;\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_APPROX(mat2(i,j,k), 3.14f);\n        VERIFY_IS_APPROX(mat3(i,j,k), expf((std::max)(val, 7.3f)));\n        val += 1.0f;\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_expr.cpp", "function_name": "test_constants", "index": 1512, "label": 0}
{"input": "EIGEN_DONT_INLINE\ndouble bench_mnk(int m, int n, int k, int t)\n{\n  int id = m*10000 + n*100 + k;\n  switch(id) {\n    case  10101 : return bench_t< 1, 1, 1>(t); break;\n    case  20202 : return bench_t< 2, 2, 2>(t); break;\n    case  30303 : return bench_t< 3, 3, 3>(t); break;\n    case  40404 : return bench_t< 4, 4, 4>(t); break;\n    case  50505 : return bench_t< 5, 5, 5>(t); break;\n    case  60606 : return bench_t< 6, 6, 6>(t); break;\n    case  70707 : return bench_t< 7, 7, 7>(t); break;\n    case  80808 : return bench_t< 8, 8, 8>(t); break;\n    case  90909 : return bench_t< 9, 9, 9>(t); break;\n    case 101010 : return bench_t<10,10,10>(t); break;\n    case 111111 : return bench_t<11,11,11>(t); break;\n    case 121212 : return bench_t<12,12,12>(t); break;\n  }\n  return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/perf_monitoring/gemm/lazy_gemm.cpp", "function_name": "bench_mnk", "index": 1513, "label": 0}
{"input": "void\ninitSparse(double density,\n           Matrix<Scalar,1,Dynamic>& refVec,\n           SparseVector<Scalar,Options,Index>& sparseVec,\n           std::vector<int>* zeroCoords = 0,\n           std::vector<int>* nonzeroCoords = 0)\n{\n  sparseVec.reserve(int(refVec.size()*density));\n  sparseVec.setZero();\n  for(int i=0; i<refVec.size(); i++)\n  {\n    Scalar v = (internal::random<double>(0,1) < density) ? internal::random<Scalar>() : Scalar(0);\n    if (v!=Scalar(0))\n    {\n      sparseVec.insertBack(i) = v;\n      if (nonzeroCoords)\n        nonzeroCoords->push_back(i);\n    }\n    else if (zeroCoords)\n        zeroCoords->push_back(i);\n    refVec[i] = v;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse.h", "function_name": "initSparse", "index": 1514, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_onewav(JNIEnv *env, jobject thiz, jstring wavfn,jstring dumpfn){\n            std::string s_wav = getStringUTF(env,wavfn);\n            std::string s_dump = getStringUTF(env,dumpfn);\n            return g_digit->newwav(s_wav.c_str(),s_dump.c_str());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_onewav", "index": 1515, "label": 0}
{"input": "NdArray<dtype> pybind2nc(pbArray<dtype>& numpyArray)\n    {\n        const auto dataPtr = numpyArray.mutable_data();\n        switch (numpyArray.ndim())\n        {\n            case 0:\n            {\n                return NdArray<dtype>(dataPtr, 0, 0, false);\n            }\n            case 1:\n            {\n                const auto size = static_cast<uint32>(numpyArray.size());\n                return NdArray<dtype>(dataPtr, 1, size, false);\n            }\n            case 2:\n            {\n                const auto numRows = static_cast<uint32>(numpyArray.shape(0));\n                const auto numCols = static_cast<uint32>(numpyArray.shape(1));\n                return NdArray<dtype>(dataPtr, numRows, numCols, false);\n            }\n            default:\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"input array must be no more than 2 dimensional.\");\n                return {};\n            }\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/PybindInterface.hpp", "function_name": "pybind2nc", "index": 1516, "label": 0}
{"input": "inline bool Result::has_request_header(const std::string &key) const {\n  return request_headers_.find(key) != request_headers_.end();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Result::has_request_header", "index": 1517, "label": 0}
{"input": "EIGEN_DEVICE_FUNC static inline Matrix<Scalar,Dim,Dim> toRotationMatrix(const RotationBase<OtherDerived,Dim>& r)\n{\n  return r.toRotationMatrix();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/RotationBase.h", "function_name": "Matrix<Scalar,Dim,Dim> toRotationMatrix", "index": 1518, "label": 0}
{"input": "inline void v_store_high(_Tp* ptr, const _Tpvec& a) \\\n{ \\\n    _Tpvec::lane_type a_[_Tpvec::nlanes]; \\\n    wasm_v128_store(a_, a.val); \\\n    for (int i = 0; i < (_Tpvec::nlanes / 2); i++) \\\n        ptr[i] = a_[i + (_Tpvec::nlanes / 2)]; \\\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_store_high", "index": 1519, "label": 0}
{"input": "inline Result\nClient::Post(const std::string &path, const Headers &headers,\n             const MultipartFormDataItems &items,\n             const MultipartFormDataProviderItems &provider_items) {\n  return cli_->Post(path, headers, items, provider_items);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::Post", "index": 1520, "label": 0}
{"input": "void LinearLayoutManager::OnLayoutAfter(LayoutState& layout_state) {\n  HandleLayoutOrScrollResult(layout_state, true);\n  \n  \n  \n  list_container_->StopInterceptListElementUpdated();\n  float scroll_delta = content_offset_ - last_content_offset_;\n  last_content_offset_ = content_offset_;\n  list_container_->RecordVisibleItemIfNeeded(false);\n  list::EventSource event_source = list_container_->has_valid_diff()\n                                       ? list::EventSource::kDiff\n                                       : list::EventSource::kLayout;\n  SendLayoutCompleteEvent();\n  SendScrollEvents(scroll_delta, content_offset_, event_source);\n  list_container_->ClearValidDiff();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "a0dcde9c711d8fb582d9df9920816808b9a1f177", "file_path": "core/renderer/ui_component/list/linear_layout_manager.cc", "function_name": "LinearLayoutManager::OnLayoutAfter", "index": 1521, "label": 0}
{"input": "inline void queryCacheSizes_intel_direct(int& l1, int& l2, int& l3)\n{\n  int abcd[4];\n  l1 = l2 = l3 = 0;\n  int cache_id = 0;\n  int cache_type = 0;\n  do {\n    abcd[0] = abcd[1] = abcd[2] = abcd[3] = 0;\n    EIGEN_CPUID(abcd,0x4,cache_id);\n    cache_type  = (abcd[0] & 0x0F) >> 0;\n    if(cache_type==1||cache_type==3) \n    {\n      int cache_level = (abcd[0] & 0xE0) >> 5;  \n      int ways        = (abcd[1] & 0xFFC00000) >> 22; \n      int partitions  = (abcd[1] & 0x003FF000) >> 12; \n      int line_size   = (abcd[1] & 0x00000FFF) >>  0; \n      int sets        = (abcd[2]);                    \n\n      int cache_size = (ways+1) * (partitions+1) * (line_size+1) * (sets+1);\n\n      switch(cache_level)\n      {\n        case 1: l1 = cache_size; break;\n        case 2: l2 = cache_size; break;\n        case 3: l3 = cache_size; break;\n        default: break;\n      }\n    }\n    cache_id++;\n  } while(cache_type>0 && cache_id<16);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "queryCacheSizes_intel_direct", "index": 1522, "label": 0}
{"input": "HarmonyGlobalHandler::HarmonyGlobalHandler(napi_env env, napi_value js_this)\n    : env_(env), js_this_ref_(nullptr) {\n  napi_create_reference(env, js_this, 1, &js_this_ref_);\n  napi_get_uv_event_loop(env, &loop_);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/harmony_global_handler.cc", "function_name": "HarmonyGlobalHandler::HarmonyGlobalHandler", "index": 1523, "label": 0}
{"input": "static void test_select()\n{\n  Tensor<float, 3> selector(2,3,7);\n  Tensor<float, 3> mat1(2,3,7);\n  Tensor<float, 3> mat2(2,3,7);\n  Tensor<float, 3> result(2,3,7);\n\n  selector.setRandom();\n  mat1.setRandom();\n  mat2.setRandom();\n  result = (selector > selector.constant(0.5f)).select(mat1, mat2);\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_APPROX(result(i,j,k), (selector(i,j,k) > 0.5f) ? mat1(i,j,k) : mat2(i,j,k));\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_expr.cpp", "function_name": "test_select", "index": 1524, "label": 0}
{"input": "inline std::vector<Value> GetOutputValuesHelper(const OrtIoBinding* binding, OrtAllocator* allocator) {\n  std::vector<Value> result;\n  size_t owned = 0;\n  size_t output_count = 0;\n  \n  \n  auto free_fn = [&owned, &output_count, allocator](OrtValue** buffer) {\n    if (buffer) {\n      while (owned < output_count) {\n        auto* p = buffer + owned++;\n        GetApi().ReleaseValue(*p);\n      }\n      allocator->Free(allocator, buffer);\n    }\n  };\n  using Ptr = std::unique_ptr<OrtValue*, decltype(free_fn)>;\n\n  OrtValue** output_buffer = nullptr;\n  ThrowOnError(GetApi().GetBoundOutputValues(binding, allocator, &output_buffer, &output_count));\n  if (output_count == 0) {\n    return result;\n  }\n\n  Ptr buffer_g(output_buffer, free_fn);\n\n  result.reserve(output_count);\n  for (size_t i = 0; i < output_count; ++i) {\n    result.emplace_back(output_buffer[i]);\n    ++owned;\n  }\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "GetOutputValuesHelper", "index": 1525, "label": 0}
{"input": "void create(const std::vector<int> &_dims, int _type)\n        {\n            \n            \n            Mat tmp{_dims, _type, nullptr};\n            \n            const auto sz = std::accumulate(_dims.begin(), _dims.end(), 1, std::multiplies<int>());\n            tmp.memory.reset(new uchar[CV_ELEM_SIZE(_type)*sz], [](uchar * p){delete[] p;});\n            tmp.data = tmp.memory.get();\n            *this = std::move(tmp);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/own/mat.hpp", "function_name": "std::vector<int>", "index": 1526, "label": 0}
{"input": "Vec2(const NdArray<double>& ndArray)\n        {\n            if (ndArray.size() != 2)\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"input NdArray must have a size = 2\");\n            }\n\n            x = ndArray[0];\n            y = ndArray[1];\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Vector/Vec2.hpp", "function_name": "Vec2", "index": 1527, "label": 0}
{"input": "TensorPatchOp(const XprType& expr, const PatchDim& patch_dims)\n      : m_xpr(expr), m_patch_dims(patch_dims) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorPatch.h", "function_name": "TensorPatchOp", "index": 1528, "label": 0}
{"input": "void JSVMRuntime::InitInspector(\n    const std::shared_ptr<InspectorRuntimeObserverNG>& observer) {\n  \n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::InitInspector", "index": 1529, "label": 0}
{"input": "inline int rand_int(int high = RAND_MAX, int low = 0)\n{\n    return low + (int) ( double(high-low) * (rand() / (RAND_MAX + 1.0)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/random.h", "function_name": "rand_int", "index": 1530, "label": 0}
{"input": "EIGEN_DONT_INLINE void call_ref_1(Ref<SparseMatrix<float> > a, const B &b) { VERIFY_IS_EQUAL(a.toDense(),b.toDense()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_ref.cpp", "function_name": "call_ref_1", "index": 1531, "label": 0}
{"input": "void IIR_II::filter(double data_in[], double data_out[], int len)\n{\n    int i, k;\n    for(k = 0; k < len; k++)\n    {\n        m_pW[0] = data_in[k];\n        for(i = 1; i <= m_den_order; i++) \n        {\n            m_pW[0] = m_pW[0] - m_pDen[i] * m_pW[i];\n        }\n        data_out[k] = 0.0;\n        for(i = 0; i <= m_num_order; i++)\n        {\n            data_out[k] = data_out[k] + m_pNum[i] * m_pW[i];\n        }\n\n        for(i = m_N - 1; i >= 1; i--)\n        {\n            m_pW[i] = m_pW[i-1];\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/iir_filter.hpp", "function_name": "IIR_II::filter", "index": 1532, "label": 0}
{"input": "static std::tuple<R...> yield(cv::GCall &call, cv::detail::Seq<IIs...>) {\n        return std::make_tuple(cv::detail::Yield<R>::yield(call, IIs)...);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/meta.hpp", "function_name": "yield", "index": 1533, "label": 0}
{"input": "std::vector<uint32> toIndices(uint32 inArrayDimSize)\n        {\n            std::vector<uint32> indices;\n            indices.reserve(numElements(inArrayDimSize));\n            for (int32 i = start; i < stop; i += step)\n            {\n                indices.push_back(static_cast<uint32>(i));\n            }\n            return indices;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Slice.hpp", "function_name": "inArrayDimSize", "index": 1534, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool index_statically_eq(DenseIndex i, DenseIndex value) {\n  return index_statically_eq_impl<T>::run(i, value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "index_statically_eq", "index": 1535, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f vec_splat_packet4f(const Packet4f&   from)\n{\n  Packet4f splat;\n  switch (element) {\n  case 0:\n    splat.v4f[0] = vec_splat(from.v4f[0], 0);\n    splat.v4f[1] = splat.v4f[0];\n    break;\n  case 1:\n    splat.v4f[0] = vec_splat(from.v4f[0], 1);\n    splat.v4f[1] = splat.v4f[0];\n    break;\n  case 2:\n    splat.v4f[0] = vec_splat(from.v4f[1], 0);\n    splat.v4f[1] = splat.v4f[0];\n    break;\n  case 3:\n    splat.v4f[0] = vec_splat(from.v4f[1], 1);\n    splat.v4f[1] = splat.v4f[0];\n    break;\n  }\n  return splat;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "vec_splat_packet4f", "index": 1536, "label": 0}
{"input": "static inline HWY_MAYBE_UNUSED RowVectorBatch<float> CreateInvTimescale(\n    size_t qkv_dim, bool half_rope, double base_frequency = 10000.0) {\n  const size_t rope_dim = half_rope ? qkv_dim / 2 : qkv_dim;\n  RowVectorBatch<float> inv_timescale(Extents2D(1, rope_dim / 2));\n  for (size_t dim = 0; dim < rope_dim / 2; ++dim) {\n    const double freq_exponents =\n        static_cast<double>(2 * dim) / static_cast<double>(rope_dim);\n    \n    \n    inv_timescale.Batch(0)[dim] =\n        static_cast<float>(1.0 / std::pow(base_frequency, freq_exponents));\n  }\n  return inv_timescale;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "ops/ops.h", "function_name": "RowVectorBatch<float> CreateInvTimescale", "index": 1537, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vmax4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vmax4.u32.u32.u32 %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vmax.u32.u32.u32 %0.b0, %1.b0, %2.b0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"5 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s;\n        s = vcmpge4(a, b);  \n        r = a & s;          \n        s = b & ~s;         \n        r = r | s;          \n    #endif\n\n        return r;           \n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vmax4", "index": 1538, "label": 0}
{"input": "typename internal::traits<SparseMatrix<_Scalar,_Options,_Index> >::Scalar\nSparseMatrix<_Scalar,_Options,_Index>::sum() const\n{\n  eigen_assert(rows()>0 && cols()>0 && \"you are using a non initialized matrix\");\n  if(this->isCompressed())\n    return Matrix<Scalar,1,Dynamic>::Map(m_data.valuePtr(), m_data.size()).sum();\n  else\n    return Base::sum();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseRedux.h", "function_name": "SparseMatrix<_Scalar,_Options,_Index>::sum", "index": 1539, "label": 0}
{"input": "void test_denseLM_T()\n{\n  typedef Matrix<T,Dynamic,1> VectorType;\n  \n  int inputs = 10; \n  int values = 1000; \n  DenseLM<T> dense_gaussian(inputs, values);\n  VectorType uv(inputs),uv_ref(inputs);\n  VectorType x(values);\n  \n  \n  uv_ref << -2, 1, 4 ,8, 6, 1.8, 1.2, 1.1, 1.9 , 3;\n  \n  \n  x.setRandom();\n  x = 10*x;\n  x.array() += 10;\n  dense_gaussian.initPoints(uv_ref, x);\n  \n  \n  VectorBlock<VectorType> u(uv, 0, inputs/2); \n  VectorBlock<VectorType> v(uv, inputs/2, inputs/2);\n  \n  \n  \n  \n  u.setOnes(); v.setOnes();\n  test_minimizeLM(dense_gaussian, uv);\n  \n  \n  u.setOnes(); v.setOnes();\n  test_lmder(dense_gaussian, uv); \n  \n  \n  v.setOnes(); u.setOnes();\n  test_minimizeSteps(dense_gaussian, uv);\n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/denseLM.cpp", "function_name": "test_denseLM_T", "index": 1540, "label": 0}
{"input": "void  exColorBlend_Difference(uint8* T,uint8* A,uint8* B)    { ColorBlend_Buffer(T,A,B,Difference);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "exColorBlend_Difference", "index": 1541, "label": 0}
{"input": "typename MatrixBase<Derived>::IdentityReturnType\nMatrixBase<Derived>::Identity()\n{\n  EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived)\n  return MatrixBase<Derived>::NullaryExpr(RowsAtCompileTime, ColsAtCompileTime, internal::scalar_identity_op<Scalar>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "MatrixBase<Derived>::Identity", "index": 1542, "label": 0}
{"input": "bool MatrixBase<Derived>::isOrthogonal\n(const MatrixBase<OtherDerived>& other, const RealScalar& prec) const\n{\n  typename internal::nested_eval<Derived,2>::type nested(derived());\n  typename internal::nested_eval<OtherDerived,2>::type otherNested(other.derived());\n  return numext::abs2(nested.dot(otherNested)) <= prec * prec * nested.squaredNorm() * otherNested.squaredNorm();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Dot.h", "function_name": "MatrixBase<Derived>::isOrthogonal", "index": 1543, "label": 0}
{"input": "inline Value Value::CreateTensor(OrtAllocator* allocator, const int64_t* shape, size_t shape_len, ONNXTensorElementDataType type) {\n  OrtValue* out;\n  ThrowOnError(GetApi().CreateTensorAsOrtValue(allocator, shape, shape_len, type, &out));\n  return Value{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Value::CreateTensor", "index": 1544, "label": 0}
{"input": "inline const mpreal logb  (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   return log2 (abs(x),r);                    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "logb", "index": 1545, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet2d pblend(const Selector<2>& ifPacket, const Packet2d& thenPacket, const Packet2d& elsePacket) {\n  Packet2ul select = { ifPacket.select[0], ifPacket.select[1] };\n  Packet2ul mask = vec_cmpeq(select, reinterpret_cast<Packet2ul>(p2l_ONE));\n  return vec_sel(elsePacket, thenPacket, mask);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pblend", "index": 1546, "label": 0}
{"input": "inline void stable_norm_kernel(const ExpressionType& bl, Scalar& ssq, Scalar& scale, Scalar& invScale)\n{\n  Scalar maxCoeff = bl.cwiseAbs().maxCoeff();\n  \n  if(maxCoeff>scale)\n  {\n    ssq = ssq * numext::abs2(scale/maxCoeff);\n    Scalar tmp = Scalar(1)/maxCoeff;\n    if(tmp > NumTraits<Scalar>::highest())\n    {\n      invScale = NumTraits<Scalar>::highest();\n      scale = Scalar(1)/invScale;\n    }\n    else if(maxCoeff>NumTraits<Scalar>::highest()) \n    {\n      invScale = Scalar(1);\n      scale = maxCoeff;\n    }\n    else\n    {\n      scale = maxCoeff;\n      invScale = tmp;\n    }\n  }\n  else if(maxCoeff!=maxCoeff) \n  {\n    scale = maxCoeff;\n  }\n  \n  \n  \n  if(scale>Scalar(0)) \n    ssq += (bl*invScale).squaredNorm();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/StableNorm.h", "function_name": "stable_norm_kernel", "index": 1547, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\ndouble2 pigammac<double2>(const double2& a, const double2& x)\n{\n  using numext::igammac;\n  return make_double2(igammac(a.x, x.x), igammac(a.y, x.y));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/arch/CUDA/CudaSpecialFunctions.h", "function_name": "pigammac", "index": 1548, "label": 0}
{"input": "auto erf_inv(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(erf_inv(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return erf_inv(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/erf_inv.hpp", "function_name": "erf_inv", "index": 1549, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::ProdReducer<CoeffReturnType>, const Dims, const Derived>\n    prod(const Dims& dims) const {\n      return TensorReductionOp<internal::ProdReducer<CoeffReturnType>, const Dims, const Derived>(derived(), dims, internal::ProdReducer<CoeffReturnType>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::ProdReducer<CoeffReturnType>, const Dims, const Derived>\n    prod", "index": 1550, "label": 0}
{"input": "CwiseNullaryOp<indexing_functor<ArgType,RowIndexType,ColIndexType>, typename indexing_functor<ArgType,RowIndexType,ColIndexType>::MatrixType>\nindexing(const Eigen::MatrixBase<ArgType>& arg, const RowIndexType& row_indices, const ColIndexType& col_indices)\n{\n  typedef indexing_functor<ArgType,RowIndexType,ColIndexType> Func;\n  typedef typename Func::MatrixType MatrixType;\n  return MatrixType::NullaryExpr(row_indices.size(), col_indices.size(), Func(arg.derived(), row_indices, col_indices));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/nullary_indexing.cpp", "function_name": "indexing", "index": 1551, "label": 0}
{"input": "size_t EspWakeWord::GetFeedSize() {\n    if (wakenet_data_ == nullptr) {\n        return 0;\n    }\n    return wakenet_iface_->get_samp_chunksize(wakenet_data_) * codec_->input_channels();\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/esp_wake_word.cc", "function_name": "EspWakeWord::GetFeedSize", "index": 1552, "label": 0}
{"input": "inline cl_int clEnqueueReleaseGLObjects(cl_command_queue p0, cl_uint p1, const cl_mem* p2, cl_uint p3, const cl_event* p4, cl_event* p5) { return clEnqueueReleaseGLObjects_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_gl_wrappers.hpp", "function_name": "clEnqueueReleaseGLObjects", "index": 1553, "label": 0}
{"input": "inline std::vector<int64_t> CustomOpApi::GetTensorShape(const OrtTensorTypeAndShapeInfo* info) {\n  std::vector<int64_t> output(GetDimensionsCount(info));\n  GetDimensions(info, output.data(), output.size());\n  return output;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::GetTensorShape", "index": 1554, "label": 0}
{"input": "EIGEN_DONT_INLINE void call_ref_6(const Ref<const MatrixXf,0,OuterStride<> >& a, const B &b) { VERIFY_IS_EQUAL(a,b); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/ref.cpp", "function_name": "call_ref_6", "index": 1555, "label": 0}
{"input": "auto bessel_jn_prime(dtype1 inV, const NdArray<dtype2>& inArrayX)\n    {\n        NdArray<decltype(bessel_jn_prime(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArrayX.shape());\n\n        stl_algorithms::transform(\n            inArrayX.cbegin(),\n            inArrayX.cend(),\n            returnArray.begin(),\n            [inV](dtype2 inX) -> auto{ return bessel_jn_prime(inV, inX); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/bessel_jn_prime.hpp", "function_name": "bessel_jn_prime", "index": 1556, "label": 0}
{"input": "bool FiberElement::NeedFastFlushPath(\n    const std::pair<CSSPropertyID, tasm::CSSValue> &style) {\n  return style.second.IsEmpty() || LayoutProperty::IsLayoutOnly(style.first) ||\n         LayoutProperty::IsLayoutWanted(style.first) ||\n         starlight::CSSStyleUtils::IsLayoutRelatedTransform(style) ||\n         style.first == kPropertyIDColor || style.first == kPropertyIDFilter;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "bbb13dd1780e24917d1b1b68322069d6f04cd233", "file_path": "core/renderer/dom/fiber/fiber_element.cc", "function_name": "FiberElement::NeedFastFlushPath", "index": 1557, "label": 0}
{"input": "Dekker(const double epsilon, const uint32 maxNumIterations, std::function<double(double)> f) noexcept :\n            Iteration(epsilon, maxNumIterations),\n            f_(std::move(f))\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Roots/Dekker.hpp", "function_name": "Dekker", "index": 1558, "label": 0}
{"input": "void Animation::SendEndEvent() {\n  CreateEventAndSend(is_transition_\n                         ? BASE_STATIC_STRING(kTransitionEndEventName)\n                         : BASE_STATIC_STRING(kKeyframeEndEventName));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b03d25564e4fc065d5b8e568dc8c0009a570d83b", "file_path": "core/animation/animation.cc", "function_name": "Animation::SendEndEvent", "index": 1559, "label": 0}
{"input": "void eiToGmm(const EigenMatrixType& src, GmmMatrixType& dst)\n{\n  dst.resize(src.rows(),src.cols());\n  for (int j=0; j<src.cols(); ++j)\n    for (int i=0; i<src.rows(); ++i)\n      dst(i,j) = src.coeff(i,j);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchUtil.h", "function_name": "eiToGmm", "index": 1560, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::SumReducer<CoeffReturnType>, const Dims, const Derived>\n    sum(const Dims& dims) const {\n      return TensorReductionOp<internal::SumReducer<CoeffReturnType>, const Dims, const Derived>(derived(), dims, internal::SumReducer<CoeffReturnType>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::SumReducer<CoeffReturnType>, const Dims, const Derived>\n    sum", "index": 1561, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Packet ploadt_ro(const typename unpacket_traits<Packet>::type* from)\n{\n  return ploadt<Packet, LoadMode>(from);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "ploadt_ro", "index": 1562, "label": 0}
{"input": "NdArray<double> logspace(dtype start, dtype stop, uint32 num = 50, bool endPoint = true, double base = 10.)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        auto spacedValues = linspace(static_cast<double>(start), static_cast<double>(stop), num, endPoint);\n        stl_algorithms::for_each(spacedValues.begin(),\n                                 spacedValues.end(),\n                                 [base](auto& value) -> void { value = utils::powerf(base, value); });\n\n        return spacedValues;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/logspace.hpp", "function_name": "logspace", "index": 1563, "label": 0}
{"input": "NdArray<dtype> trimBoundary2d(const NdArray<dtype>& inImageWithBoundary, uint32 inSize)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        Shape  inShape      = inImageWithBoundary.shape();\n        uint32 boundarySize = inSize / 2; \n\n        inShape.rows -= boundarySize * 2;\n        inShape.cols -= boundarySize * 2;\n\n        return inImageWithBoundary(Slice(boundarySize, boundarySize + inShape.rows),\n                                   Slice(boundarySize, boundarySize + inShape.cols));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Boundaries/Boundaries2d/trimBoundary2d.hpp", "function_name": "trimBoundary2d", "index": 1564, "label": 0}
{"input": "auto inline extractFunctors(const Evaluator& evaluator)-> FunctorExtractor<Evaluator> {\n  return FunctorExtractor<Evaluator>(evaluator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorSyclExtractFunctors.h", "function_name": "extractFunctors", "index": 1565, "label": 0}
{"input": "inline const mpreal mul_2si(const mpreal& v, long int k, mp_rnd_t rnd_mode)\n{\n    mpreal x(v);\n    mpfr_mul_2si(x.mpfr_ptr(),v.mpfr_srcptr(),k,rnd_mode);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mul_2si", "index": 1566, "label": 0}
{"input": "inline std::string encode_url(const std::string &s) {\n  std::string result;\n  result.reserve(s.size());\n\n  for (size_t i = 0; s[i]; i++) {\n    switch (s[i]) {\n    case ' ': result += \"%20\"; break;\n    case '+': result += \"%2B\"; break;\n    case '\\r': result += \"%0D\"; break;\n    case '\\n': result += \"%0A\"; break;\n    case '\\'': result += \"%27\"; break;\n    case \"%20\"0: result += \"%20\"1; break;\n    \n    case \"%20\"4: result += \"%20\"5; break;\n    default:\n      auto c = static_cast<uint8_t>(s[i]);\n      if (c >= 0x80) {\n        result += \"%20\"6;\n        char hex[4];\n        auto len = snprintf(hex, sizeof(hex) - 1, \"%20\"7, c);\n        assert(len == 2);\n        result.append(hex, static_cast<size_t>(len));\n      } else {\n        result += s[i];\n      }\n      break;\n    }\n  }\n\n  return result;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "encode_url", "index": 1567, "label": 0}
{"input": "inline AllocatedStringPtr ModelMetadata::GetProducerNameAllocated(OrtAllocator* allocator) const {\n  char* out;\n  ThrowOnError(GetApi().ModelMetadataGetProducerName(p_, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ModelMetadata::GetProducerNameAllocated", "index": 1568, "label": 0}
{"input": "typename Eigen::internal::enable_if<NumTraits<typename MatrixType::Scalar>::IsComplex,typename MatrixType::Scalar>::type\nblock_real_only(const MatrixType &, Index, Index, Index, Index, const Scalar&) {\n  return Scalar(0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/block.cpp", "function_name": "block_real_only", "index": 1569, "label": 0}
{"input": "void CauchyBounds_scalar()\n{\n  CALL_SUBTEST_2( (CauchyBounds<_Scalar,2>(2)) );\n  CALL_SUBTEST_3( (CauchyBounds<_Scalar,3>(3)) );\n  CALL_SUBTEST_4( (CauchyBounds<_Scalar,4>(4)) );\n  CALL_SUBTEST_5( (CauchyBounds<_Scalar,5>(5)) );\n  CALL_SUBTEST_6( (CauchyBounds<_Scalar,6>(6)) );\n  CALL_SUBTEST_7( (CauchyBounds<_Scalar,7>(7)) );\n  CALL_SUBTEST_8( (CauchyBounds<_Scalar,17>(17)) );\n\n  CALL_SUBTEST_9( (CauchyBounds<_Scalar,Dynamic>(\n          internal::random<int>(18,26) )) );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/polynomialutils.cpp", "function_name": "CauchyBounds_scalar", "index": 1570, "label": 0}
{"input": "static void hf3fs_usrbio_cleanup(struct thread_data *td) {\n    delete static_cast<hf3fs_usrbio_data *>(td->io_ops_data);\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_cleanup", "index": 1571, "label": 0}
{"input": "auto airy_bi_prime(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(airy_bi_prime(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return airy_bi_prime(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/airy_bi_prime.hpp", "function_name": "airy_bi_prime", "index": 1572, "label": 0}
{"input": "piper::ArrayBuffer JSVMRuntime::createArrayBufferCopy(const uint8_t* bytes,\n                                                      size_t byte_length) {\n  void* dst_buffer = nullptr;\n  JSVM_Value result = nullptr;\n  JSVM_CALL_RETURN(\n      OH_JSVM_CreateArraybuffer(getEnv(), byte_length, &dst_buffer, &result),\n      piper::ArrayBuffer(*this));\n  if (byte_length > 0) {\n    memcpy(dst_buffer, bytes, byte_length);\n  }\n\n  return JSVMHelper::createObject(result, getEnv()).getArrayBuffer(*this);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createArrayBufferCopy", "index": 1573, "label": 0}
{"input": "MandelbrotWidget() : QWidget(), center(0,0), xradius(2),\n                         size(0), buffer(0), draft(16)\n    {\n      setAutoFillBackground(false);\n      threadcount = QThread::idealThreadCount();\n      threads = new MandelbrotThread*[threadcount];\n      for(int th = 0; th < threadcount; th++) threads[th] = new MandelbrotThread(this, th);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mandelbrot/mandelbrot.h", "function_name": "MandelbrotWidget", "index": 1574, "label": 0}
{"input": "void test_swap()\n{\n  int s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n  CALL_SUBTEST_1( swap(Matrix3f()) ); \n  CALL_SUBTEST_2( swap(Matrix4d()) ); \n  CALL_SUBTEST_3( swap(MatrixXd(s,s)) ); \n  CALL_SUBTEST_4( swap(MatrixXf(s,s)) ); \n  TEST_SET_BUT_UNUSED_VARIABLE(s)\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/swap.cpp", "function_name": "test_swap", "index": 1575, "label": 0}
{"input": "ArkUI_NodeAttributeType UIInput::GetEditingAttributeType() const {\n  return NODE_TEXT_INPUT_EDITING;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_input.cc", "function_name": "UIInput::GetEditingAttributeType", "index": 1576, "label": 0}
{"input": "inline bool Server::set_mount_point(const std::string &mount_point,\n                                    const std::string &dir, Headers headers) {\n  if (detail::is_dir(dir)) {\n    std::string mnt = !mount_point.empty() ? mount_point : \"/\";\n    if (!mnt.empty() && mnt[0] == '/') {\n      base_dirs_.push_back({mnt, dir, std::move(headers)});\n      return true;\n    }\n  }\n  return false;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::set_mount_point", "index": 1577, "label": 0}
{"input": "MappedSparseMatrix<Scalar,Flags,StorageIndex> viewAsEigen(cholmod_sparse& cm)\n{\n  return MappedSparseMatrix<Scalar,Flags,StorageIndex>\n         (cm.nrow, cm.ncol, static_cast<StorageIndex*>(cm.p)[cm.ncol],\n          static_cast<StorageIndex*>(cm.p), static_cast<StorageIndex*>(cm.i),static_cast<Scalar*>(cm.x) );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "viewAsEigen", "index": 1578, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmpgt4(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetgt4(a, b);\n        c = r << 8;         \n        r = c - r;          \n    #else\n        asm(\"not.b32 %0, %0;\" : \"+r\"(b));\n        c = vavg4(a, b);    \n        c = c & 0x80808080; \n        r = c >> 7;         \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmpgt4", "index": 1579, "label": 0}
{"input": "inline\nPoint MatConstIterator_<_Tp>::pos() const\n{\n    if( !m )\n        return Point();\n    CV_DbgAssert( m->dims <= 2 );\n    if( m->isContinuous() )\n    {\n        ptrdiff_t ofs = (const _Tp*)ptr - (const _Tp*)m->data;\n        int y = (int)(ofs / m->cols);\n        int x = (int)(ofs - (ptrdiff_t)y * m->cols);\n        return Point(x, y);\n    }\n    else\n    {\n        ptrdiff_t ofs = (uchar*)ptr - m->data;\n        int y = (int)(ofs / m->step);\n        int x = (int)((ofs - y * m->step)/sizeof(_Tp));\n        return Point(x, y);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "MatConstIterator_<_Tp>::pos", "index": 1580, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE std::ptrdiff_t array_get(const Sizes<>&) {\n  eigen_assert(false && \"should never be called\");\n  return -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDimensions.h", "function_name": "EIGEN_STRONG_INLINE std::ptrdiff_t array_get", "index": 1581, "label": 0}
{"input": "inline bool is_hex(char c, int &v) {\n  if (0x20 <= c && isdigit(c)) {\n    v = c - '0';\n    return true;\n  } else if ('A' <= c && c <= 'F') {\n    v = c - 'A' + 10;\n    return true;\n  } else if ('a' <= c && c <= 'f') {\n    v = c - 'a' + 10;\n    return true;\n  }\n  return false;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "is_hex", "index": 1582, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE\ntypename internal::enable_if<NumTraits<T>::IsSigned || NumTraits<T>::IsComplex,typename NumTraits<T>::Real>::type\nabs(const T &x) {\n  EIGEN_USING_STD_MATH(abs);\n  return abs(x);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/MathFunctions.h", "function_name": "EIGEN_ALWAYS_INLINE\ntypename internal::enable_if<NumTraits<T>::IsSigned || NumTraits<T>::IsComplex,typename NumTraits<T>::Real>::type\nabs", "index": 1583, "label": 0}
{"input": "lynx_api_status lynx_value_add_reference(lynx_api_env env, lynx_value value,\n                                         lynx_value_ref* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_add_reference", "index": 1584, "label": 0}
{"input": "void Trackball::track(const Vector2i& point2D)\n{\n  if (mpCamera==0)\n    return;\n  Vector3f newPoint3D;\n  bool newPointOk = mapToSphere(point2D, newPoint3D);\n\n  if (mLastPointOk && newPointOk)\n  {\n    Vector3f axis = mLastPoint3D.cross(newPoint3D).normalized();\n    float cos_angle = mLastPoint3D.dot(newPoint3D);\n    if ( std::abs(cos_angle) < 1.0 )\n    {\n      float angle = 2. * acos(cos_angle);\n      if (mMode==Around)\n        mpCamera->rotateAroundTarget(Quaternionf(AngleAxisf(angle, axis)));\n      else\n        mpCamera->localRotate(Quaternionf(AngleAxisf(-angle, axis)));\n    }\n  }\n\n  mLastPoint3D = newPoint3D;\n  mLastPointOk = newPointOk;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/trackball.cpp", "function_name": "Trackball::track", "index": 1585, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool index_pair_second_statically_eq(DenseIndex i, DenseIndex value) {\n  return index_pair_second_statically_eq_impl<T>::run(i, value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "index_pair_second_statically_eq", "index": 1586, "label": 0}
{"input": "void SetHostFunctionTemplate(JSVM_Ref function_template) {\n    host_function_template_ = function_template;\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.h", "function_name": "function_template", "index": 1587, "label": 0}
{"input": "inline void ClientImpl::set_ca_cert_store(X509_STORE *ca_cert_store) {\n  if (ca_cert_store && ca_cert_store != ca_cert_store_) {\n    ca_cert_store_ = ca_cert_store;\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_ca_cert_store", "index": 1588, "label": 0}
{"input": "void eiToUblasVec(const EigenType& src, UblasType& dst)\n{\n  dst.resize(src.size());\n  for (int j=0; j<src.size(); ++j)\n      dst[j] = src.coeff(j);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/BenchUtil.h", "function_name": "eiToUblasVec", "index": 1589, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b)\n{\n  Packet4f res;\n  res.v4f[0] = pmax(a.v4f[0], b.v4f[0]);\n  res.v4f[1] = pmax(a.v4f[1], b.v4f[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pmax", "index": 1590, "label": 0}
{"input": "void test_product_trmv()\n{\n  int s = 0;\n  for(int i = 0; i < g_repeat ; i++) {\n    CALL_SUBTEST_1( trmv(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( trmv(Matrix<float, 2, 2>()) );\n    CALL_SUBTEST_3( trmv(Matrix3d()) );\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE/2);\n    CALL_SUBTEST_4( trmv(MatrixXcf(s,s)) );\n    CALL_SUBTEST_5( trmv(MatrixXcd(s,s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n    CALL_SUBTEST_6( trmv(Matrix<float,Dynamic,Dynamic,RowMajor>(s, s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_trmv.cpp", "function_name": "test_product_trmv", "index": 1591, "label": 0}
{"input": "inline void ClientImpl::stop() {\n  std::lock_guard<std::mutex> guard(socket_mutex_);\n\n  \n  \n  \n    \n    socket_should_be_closed_when_request_is_done_ = true;\n    return;\n  }\n\n  \n  shutdown_ssl(socket_, true);\n  shutdown_socket(socket_);\n  close_socket(socket_);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::stop", "index": 1592, "label": 0}
{"input": "NdArray<dtype> weibull(const Shape& inShape, dtype inA = 1, dtype inB = 1)\n    {\n        return detail::weibull(generator_, inShape, inA, inB);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/weibull.hpp", "function_name": "weibull", "index": 1593, "label": 0}
{"input": "static void test_1D()\n{\n  Tensor<float, 1> vec(6);\n  Tensor<float, 1> result = vec.generate(Generator1D());\n\n  for (int i = 0; i < 6; ++i) {\n    VERIFY_IS_EQUAL(result(i), i);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_generator.cpp", "function_name": "test_1D", "index": 1594, "label": 0}
{"input": "lynx_api_status lynx_value_typeof(lynx_api_env env, lynx_value value,\n                                  lynx_value_type* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_typeof", "index": 1595, "label": 0}
{"input": "EIGEN_DEVICE_FUNC CoeffReturnType coeff(Index index) const\n  {\n    return m_condImpl.coeff(index) ? m_thenImpl.coeff(index) : m_elseImpl.coeff(index);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h", "function_name": "CoeffReturnType coeff", "index": 1596, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE TensorFixedSize(const TensorBase<OtherDerived, WriteAccessors>& other)\n    {\n      typedef TensorAssignOp<TensorFixedSize, const OtherDerived> Assign;\n      Assign assign(*this, other.derived());\n      internal::TensorExecutor<const Assign, DefaultDevice>::run(assign, DefaultDevice());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFixedSize.h", "function_name": "EIGEN_STRONG_INLINE TensorFixedSize", "index": 1597, "label": 0}
{"input": "static void help(Memory memory) {\n                (void) memory; \n                reinterpret_cast<T*>(memory)->~T();\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "memory", "index": 1598, "label": 0}
{"input": "static __device__ __forceinline__ void RGB2YCrCbConvert(const float* src, D& dst)\n        {\n            dst.x = src[0] * c_RGB2YCrCbCoeffs_f[bidx^2] + src[1] * c_RGB2YCrCbCoeffs_f[1] + src[2] * c_RGB2YCrCbCoeffs_f[bidx];\n            dst.y = (src[bidx^2] - dst.x) * c_RGB2YCrCbCoeffs_f[3] + ColorChannel<float>::half();\n            dst.z = (src[bidx] - dst.x) * c_RGB2YCrCbCoeffs_f[4] + ColorChannel<float>::half();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "RGB2YCrCbConvert", "index": 1599, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    TensorChippingOp<DimId, Derived>\n    chip(const Index offset) {\n      return TensorChippingOp<DimId, Derived>(derived(), offset, DimId);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    TensorChippingOp<DimId, Derived>\n    chip", "index": 1600, "label": 0}
{"input": "inline bool ConstValueImpl<T>::HasValue() const {\n  int out;\n  ThrowOnError(GetApi().HasValue(this->p_, &out));\n  return out != 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::HasValue", "index": 1601, "label": 0}
{"input": "explicit SparseView(const MatrixType& mat, const Scalar& reference = Scalar(0),\n                      const RealScalar &epsilon = NumTraits<Scalar>::dummy_precision())\n    : m_matrix(mat), m_reference(reference), m_epsilon(epsilon) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseView.h", "function_name": "SparseView", "index": 1602, "label": 0}
{"input": "float ListContainerImpl::RoundValueToPixelGrid(const float value) {\n  return std::roundf(value * physical_pixels_per_layout_unit_) /\n         physical_pixels_per_layout_unit_;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "4895fb1cca537816577d98fa40f0aa440d139672", "file_path": "core/renderer/ui_component/list/list_container_impl.cc", "function_name": "ListContainerImpl::RoundValueToPixelGrid", "index": 1603, "label": 0}
{"input": "void create(int _rows, int _cols, int _type)\n        {\n            create(Size{_cols, _rows}, _type);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/own/mat.hpp", "function_name": "_rows", "index": 1604, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE const TensorCwiseNullaryOp<CustomNullaryOp, const Derived>\n    nullaryExpr(const CustomNullaryOp& func) const {\n      return TensorCwiseNullaryOp<CustomNullaryOp, const Derived>(derived(), func);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "nullaryExpr", "index": 1605, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)\n{\n  std::complex<float> res;\n  Packet1cd b = pmul<Packet1cd>(a.cd[0], a.cd[1]);\n  vec_st2f(b.v, (float*)&res);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/Complex.h", "function_name": "std::complex<float> predux_mul<Packet2cf>", "index": 1606, "label": 0}
{"input": "void BDCSVD<MatrixType>::allocate(Index rows, Index cols, unsigned int computationOptions)\n{\n  m_isTranspose = (cols > rows);\n\n  if (Base::allocate(rows, cols, computationOptions))\n    return;\n  \n  m_computed = MatrixXr::Zero(m_diagSize + 1, m_diagSize );\n  m_compU = computeV();\n  m_compV = computeU();\n  if (m_isTranspose)\n    std::swap(m_compU, m_compV);\n  \n  if (m_compU) m_naiveU = MatrixXr::Zero(m_diagSize + 1, m_diagSize + 1 );\n  else         m_naiveU = MatrixXr::Zero(2, m_diagSize + 1 );\n  \n  if (m_compV) m_naiveV = MatrixXr::Zero(m_diagSize, m_diagSize);\n  \n  m_workspace.resize((m_diagSize+1)*(m_diagSize+1)*3);\n  m_workspaceI.resize(3*m_diagSize);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/BDCSVD.h", "function_name": "BDCSVD<MatrixType>::allocate", "index": 1607, "label": 0}
{"input": "static __device__ __forceinline__ VecD saturate_cast_helper(const VecS& v)\n    {\n        return SatCastHelper<VecTraits<VecD>::cn, VecD>::cast(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_math.hpp", "function_name": "saturate_cast_helper", "index": 1608, "label": 0}
{"input": "JS::ThrowCompletionOr<GC::Ref<CanvasRenderingContext2D>> CanvasRenderingContext2D::create(JS::Realm& realm, HTMLCanvasElement& element, JS::Value options)\n{\n    auto context_attributes = TRY(CanvasRenderingContext2DSettings::from_js_value(realm.vm(), options));\n    return realm.create<CanvasRenderingContext2D>(realm, element, context_attributes);\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "193ab3757b72c7c3e6e0f32011f1ac1310fbcd25", "file_path": "Libraries/LibWeb/HTML/CanvasRenderingContext2D.cpp", "function_name": "CanvasRenderingContext2D::create", "index": 1609, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void DenseBase<Derived>::fill(const Scalar& val)\n{\n  setConstant(val);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::fill", "index": 1610, "label": 0}
{"input": "inline\nint Mat_<_Tp>::channels() const\n{\n    CV_DbgAssert( Mat::channels() == DataType<_Tp>::channels );\n    return DataType<_Tp>::channels;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::channels", "index": 1611, "label": 0}
{"input": "inline\nMatx<_Tp, n, l> Matx<_Tp, m, n>::solve(const Matx<_Tp, m, l>& rhs, int method) const\n{\n    Matx<_Tp, n, l> x;\n    bool ok = cv::internal::Matx_FastSolveOp<_Tp, m, n, l>()(*this, rhs, x, method);\n    return ok ? x : Matx<_Tp, n, l>::zeros();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/operations.hpp", "function_name": "Matx<_Tp, m, n>::solve", "index": 1612, "label": 0}
{"input": "int GhMat::cvtuint8(GpMat dst,void* stream) {\n    ppl::cv::cuda::ConvertTo<float,uint8_t,3>((cudaStream_t)stream,m_height,m_width,m_stride,(float*)m_buf, dst->m_stride,(uint8_t*)dst->m_buf, 255.0f,0.f);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/cuda/kmatcuda.cpp", "function_name": "GhMat::cvtuint8", "index": 1613, "label": 0}
{"input": "auto spherical_hankel_2(dtype1 inV, const NdArray<dtype2>& inArray)\n    {\n        NdArray<decltype(spherical_hankel_2(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [inV](dtype2 inValue) -> auto{ return spherical_hankel_2(inV, inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/spherical_hankel_2.hpp", "function_name": "spherical_hankel_2", "index": 1614, "label": 0}
{"input": "inline void reserve(const Index nonzerosblocks)\n    {\n      eigen_assert((m_innerBSize != 0 && m_outerBSize != 0) &&\n          \"TRYING TO RESERVE ZERO-SIZE MATRICES, CALL resize() first\");\n\n      \n      m_outerIndex = new StorageIndex[m_outerBSize+1];\n\n      m_nonzerosblocks = nonzerosblocks;\n      if(m_blockSize != Dynamic)\n      {\n        m_nonzeros = nonzerosblocks * (m_blockSize * m_blockSize);\n        m_blockPtr = 0;\n      }\n      else\n      {\n        \n        m_blockPtr = new StorageIndex[m_nonzerosblocks+1];\n      }\n      m_indices = new StorageIndex[m_nonzerosblocks+1];\n      m_values = new Scalar[m_nonzeros];\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "nonzerosblocks", "index": 1615, "label": 0}
{"input": "inline const SolveWithGuess<Derived, Rhs, Guess>\n  solveWithGuess(const MatrixBase<Rhs>& b, const Guess& x0) const\n  {\n    eigen_assert(m_isInitialized && \"Solver is not initialized.\");\n    eigen_assert(derived().rows()==b.rows() && \"solve(): invalid number of rows of the right hand side matrix b\");\n    return SolveWithGuess<Derived, Rhs, Guess>(derived(), b.derived(), x0);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h", "function_name": "solveWithGuess", "index": 1616, "label": 0}
{"input": "jobject JniHelper::createByteBuffer(JNIEnv *env, int size) {\n    if (env == nullptr) {\n        return nullptr;\n    }\n\n    auto buffer = static_cast<uint8_t *>(malloc(static_cast<size_t>(size)));\n    jobject byteBuffer = env->NewDirectByteBuffer(buffer, size);\n    free(buffer);\n    return byteBuffer;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/JniHelper.cpp", "function_name": "JniHelper::createByteBuffer", "index": 1617, "label": 0}
{"input": "looper::looper() {\n  sem_init(&headdataavailable, 0, 0);\n  sem_init(&headwriteprotect, 0, 1);\n  pthread_attr_t attr;\n  pthread_attr_init(&attr);\n\n  pthread_create(&worker, &attr, trampoline, this);\n  running = true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/looper.cpp", "function_name": "looper::looper", "index": 1618, "label": 0}
{"input": "inline void SocketStream::get_remote_ip_and_port(std::string &ip,\n                                                 int &port) const {\n  return detail::get_remote_ip_and_port(sock_, ip, port);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SocketStream::get_remote_ip_and_port", "index": 1619, "label": 0}
{"input": "Model(const std::string &model_path_,\n              const std::string &bin_path_)\n            : model_path(model_path_), bin_path(bin_path_) {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/infer/ov.hpp", "function_name": "Model", "index": 1620, "label": 0}
{"input": "piper::PropNameID JSVMRuntime::createPropNameIDFromString(\n    const piper::String& str) {\n  JSVM_Value str_value = nullptr;\n  JSVMHelper::stringRef(str, &str_value);\n  return JSVMHelper::createPropNameID(str_value, getEnv());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createPropNameIDFromString", "index": 1621, "label": 0}
{"input": "auto sinc(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(sinc(dtype{ 0 }))> returnArray(inArray.shape());\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) noexcept -> auto{ return sinc(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/sinc.hpp", "function_name": "sinc", "index": 1622, "label": 0}
{"input": "HWY_NOINLINE HWY_MAYBE_UNUSED int SampleTopK(\n    const float* HWY_RESTRICT probabilities, size_t k, size_t vocab_size,\n    std::mt19937& gen, float temperature, TAcceptToken& accept_token) {\n  std::vector<TokenAndProb> token_probs =\n      TopK(probabilities, vocab_size, k, accept_token);\n  std::vector<int> topk_indices(k);\n  std::vector<float> topk_probs(k);\n  for (int i = 0; i < k; ++i) {\n    topk_indices[i] = token_probs[i].token;\n    topk_probs[i] = token_probs[i].prob;\n  }\n  return topk_indices[create_distribution(topk_probs, temperature)(gen)];\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "d854471ae2f30d63783fd9ef9d3007d3345f0900", "file_path": "ops/ops-inl.h", "function_name": "SampleTopK", "index": 1623, "label": 0}
{"input": "void forward_jacobian_cpp11(const Func& f)\n{\n    typedef typename Func::ValueType::Scalar Scalar;\n    typedef typename Func::ValueType ValueType;\n    typedef typename Func::InputType InputType;\n    typedef typename AutoDiffJacobian<Func>::JacobianType JacobianType;\n\n    InputType x = InputType::Random(InputType::RowsAtCompileTime);\n    ValueType y, yref;\n    JacobianType j, jref;\n\n    const Scalar dt = internal::random<double>();\n\n    jref.setZero();\n    yref.setZero();\n    f(x, &yref, &jref, dt);\n\n    \n    \n    \n    \n\n    AutoDiffJacobian<Func> autoj(f);\n    autoj(x, &y, &j, dt);\n\n    \n    \n    \n\n    VERIFY_IS_APPROX(y, yref);\n    VERIFY_IS_APPROX(j, jref);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "forward_jacobian_cpp11", "index": 1624, "label": 0}
{"input": "inline bool _InputArray::isGpuMatVector() const { return kind() == _InputArray::STD_VECTOR_CUDA_GPU_MAT; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "_InputArray::isGpuMatVector", "index": 1625, "label": 0}
{"input": "explicit SPQR(const _MatrixType& matrix)\n    : m_ordering(SPQR_ORDERING_DEFAULT), m_allow_tol(SPQR_DEFAULT_TOL), m_tolerance (NumTraits<Scalar>::epsilon()), m_useDefaultThreshold(true)\n    {\n      cholmod_l_start(&m_cc);\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h", "function_name": "SPQR", "index": 1626, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half zeta(const Eigen::half& x, const Eigen::half& q) {\n  return Eigen::half(Eigen::numext::zeta(static_cast<float>(x), static_cast<float>(q)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half zeta", "index": 1627, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const InverseReturnType\ninverse() const\n{\n  return InverseReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "InverseReturnType\ninverse", "index": 1628, "label": 0}
{"input": "void test_cxx11_tensor_shuffling()\n{\n  CALL_SUBTEST(test_simple_shuffling<ColMajor>());\n  CALL_SUBTEST(test_simple_shuffling<RowMajor>());\n  CALL_SUBTEST(test_expr_shuffling<ColMajor>());\n  CALL_SUBTEST(test_expr_shuffling<RowMajor>());\n  CALL_SUBTEST(test_shuffling_as_value<ColMajor>());\n  CALL_SUBTEST(test_shuffling_as_value<RowMajor>());\n  CALL_SUBTEST(test_shuffle_unshuffle<ColMajor>());\n  CALL_SUBTEST(test_shuffle_unshuffle<RowMajor>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_shuffling.cpp", "function_name": "test_cxx11_tensor_shuffling", "index": 1629, "label": 0}
{"input": "inline\n    void inv2( Complex * dst,const Complex *src,int n0,int n1)\n    {\n        EIGEN_UNUSED_VARIABLE(dst);\n        EIGEN_UNUSED_VARIABLE(src);\n        EIGEN_UNUSED_VARIABLE(n0);\n        EIGEN_UNUSED_VARIABLE(n1);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h", "function_name": "n0", "index": 1630, "label": 0}
{"input": "Point2f RotationWarperBase<P>::warpPoint(const Point2f &pt, InputArray K, InputArray R)\n{\n    projector_.setCameraParams(K, R);\n    Point2f uv;\n    projector_.mapForward(pt.x, pt.y, uv.x, uv.y);\n    return uv;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "RotationWarperBase<P>::warpPoint", "index": 1631, "label": 0}
{"input": "list(const list& l)\n    {\n        head_ = new node<T>();\n        tail_ = head_;\n        count_ = 0;\n\n        for (iter_list<T> i = l.begin(); i != l.end(); ++i)\n        {\n            push_back(*i);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/simplestl.h", "function_name": "list", "index": 1632, "label": 0}
{"input": "__device__ __forceinline__ void copyValsShfl(const thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9>& val,\n                                                     unsigned int delta,\n                                                     int width)\n        {\n            For<0, thrust::tuple_size<thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9> >::value>::copyShfl(val, delta, width);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/reduce_key_val.hpp", "function_name": "copyValsShfl", "index": 1633, "label": 0}
{"input": "void check_stdvector_transform(const TransformType&)\n{\n  typedef typename TransformType::MatrixType MatrixType;\n  TransformType x(MatrixType::Random()), y(MatrixType::Random());\n  std::vector<TransformType> v(10), w(20, y);\n  v[5] = x;\n  w[6] = v[5];\n  VERIFY_IS_APPROX(w[6], v[5]);\n  v = w;\n  for(int i = 0; i < 20; i++)\n  {\n    VERIFY_IS_APPROX(w[i], v[i]);\n  }\n\n  v.resize(21);\n  v[20] = x;\n  VERIFY_IS_APPROX(v[20], x);\n  v.resize(22,y);\n  VERIFY_IS_APPROX(v[21], y);\n  v.push_back(x);\n  VERIFY_IS_APPROX(v[22], x);\n  VERIFY((internal::UIntPtr)&(v[22]) == (internal::UIntPtr)&(v[21]) + sizeof(TransformType));\n\n  \n  \n  TransformType* ref = &w[0];\n  for(int i=0; i<30 || ((ref==&w[0]) && i<300); ++i)\n    v.push_back(w[i%w.size()]);\n  for(unsigned int i=23; i<v.size(); ++i)\n  {\n    VERIFY(v[i].matrix()==w[(i-23)%w.size()].matrix());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stdvector_overload.cpp", "function_name": "check_stdvector_transform", "index": 1634, "label": 0}
{"input": "auto cyclic_hankel_2(dtype1 inV, const NdArray<dtype2>& inX)\n    {\n        NdArray<decltype(cyclic_hankel_2(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inX.shape());\n\n        stl_algorithms::transform(\n            inX.cbegin(),\n            inX.cend(),\n            returnArray.begin(),\n            [inV](dtype2 x) -> auto{ return cyclic_hankel_2(inV, x); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/cyclic_hankel_2.hpp", "function_name": "cyclic_hankel_2", "index": 1635, "label": 0}
{"input": "Quat<T> Quat<T>::createFromZRot(const T theta){\n    return Quat<T>{std::cos(theta * 0.5f), 0, 0, std::sin(theta * 0.5f)};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::createFromZRot", "index": 1636, "label": 0}
{"input": "NCNN_FORCEINLINE Mat VkMat::mapped() const\n{\n    if (!allocator->mappable)\n        return Mat();\n\n    if (dims == 1)\n        return Mat(w, mapped_ptr(), elemsize, elempack, 0);\n\n    if (dims == 2)\n        return Mat(w, h, mapped_ptr(), elemsize, elempack, 0);\n\n    if (dims == 3)\n        return Mat(w, h, c, mapped_ptr(), elemsize, elempack, 0);\n\n    if (dims == 4)\n        return Mat(w, h, d, c, mapped_ptr(), elemsize, elempack, 0);\n\n    return Mat();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "VkMat::mapped", "index": 1637, "label": 0}
{"input": "static __host__ __device__ __forceinline__ uint8 make_uint8(uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7)\n    {\n        uint8 val = {a0, a1, a2, a3, a4, a5, a6, a7};\n        return val;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_traits.hpp", "function_name": "make_uint8", "index": 1638, "label": 0}
{"input": "base::String TextElement::ConvertContent(const lepus::Value value) {\n  auto result = value.String();\n  if (result.empty()) {\n    if (value.IsInt32()) {\n      result = base::String(std::to_string(value.Int32()));\n    } else if (value.IsInt64()) {\n      result = base::String(std::to_string(value.Int64()));\n    } else if (value.IsNumber()) {\n      std::stringstream stream;\n      stream << value.Number();\n      result = stream.str();\n    } else if (value.IsNaN()) {\n      BASE_STATIC_STRING_DECL(kNaN, \"NaN\");\n      result = kNaN;\n    } else if (value.IsNil()) {\n      BASE_STATIC_STRING_DECL(kNull, \"null\");\n      result = kNull;\n    } else if (value.IsUndefined()) {\n      BASE_STATIC_STRING_DECL(kUndefined, \"undefined\");\n      result = kUndefined;\n    }\n  }\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "540e6dc7bda21ee7ea26c634443a8ece4a7512ca", "file_path": "core/renderer/dom/fiber/text_element.cc", "function_name": "TextElement::ConvertContent", "index": 1639, "label": 0}
{"input": "inline cv::util::optional<T> getCompileArg(const cv::GCompileArgs &args)\n{\n    for (auto &compile_arg : args)\n    {\n        if (compile_arg.tag == cv::detail::CompileArgTag<T>::tag())\n        {\n            return cv::util::optional<T>(compile_arg.get<T>());\n        }\n    }\n    return cv::util::optional<T>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gcommon.hpp", "function_name": "getCompileArg", "index": 1640, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f pabs<Packet4f>(const Packet4f& a)\n{\n  Packet4f res;\n  res.v4f[0] = pabs(a.v4f[0]);\n  res.v4f[1] = pabs(a.v4f[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pabs", "index": 1641, "label": 0}
{"input": "static inline void swap_endianness_32(void* x)\n{\n    unsigned char* xx = (unsigned char*)x;\n    unsigned char x0 = xx[0];\n    unsigned char x1 = xx[1];\n    unsigned char x2 = xx[2];\n    unsigned char x3 = xx[3];\n    xx[0] = x3;\n    xx[1] = x2;\n    xx[2] = x1;\n    xx[3] = x0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "17301ed068ae71b7cfba487b2e69ae6bb30fabab", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/platform.h", "function_name": "swap_endianness_32", "index": 1642, "label": 0}
{"input": "void dumpchar(char* abuf,int len){\n    uint8_t* buf = (uint8_t*)abuf;\n    printf(\"\\n----------------------chardump------------------------\\n\");\n    int i;\n    for(i = 0; i < len; i++) {\n        printf(\"=%u=\", buf[i]);\n        if( (i+1) % 16 == 0) {\n            printf(\"\\n\");\n        }\n    }\n    if(i%16 != 0) {\n        printf(\"\\n\");\n    }\n    printf(\"\\n----------------------chardump------------------------\\n\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/face_utils.cpp", "function_name": "dumpchar", "index": 1643, "label": 0}
{"input": "inline bool RegexMatcher::match(Request &request) const {\n  request.path_params.clear();\n  return std::regex_match(request.path, request.matches, regex_);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "RegexMatcher::match", "index": 1644, "label": 0}
{"input": "static void test_simple_rvalue_ref()\n{\n  Tensor<int, 1> input1(6);\n  input1.setRandom();\n  Tensor<int, 1> input2(6);\n  input2.setRandom();\n\n  TensorRef<Tensor<int, 1>> ref3(input1 + input2);\n  TensorRef<Tensor<int, 1>> ref4 = input1 + input2;\n\n  VERIFY_IS_NOT_EQUAL(ref3.data(), input1.data());\n  VERIFY_IS_NOT_EQUAL(ref4.data(), input1.data());\n  VERIFY_IS_NOT_EQUAL(ref3.data(), input2.data());\n  VERIFY_IS_NOT_EQUAL(ref4.data(), input2.data());\n\n  for (int i = 0; i < 6; ++i) {\n    VERIFY_IS_EQUAL(ref3(i), input1(i) + input2(i));\n    VERIFY_IS_EQUAL(ref4(i), input1(i) + input2(i));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_simple_rvalue_ref", "index": 1645, "label": 0}
{"input": "TensorCustomUnaryOp(const XprType& expr, const CustomUnaryFunc& func)\n      : m_expr(expr), m_func(func) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorCustomOp.h", "function_name": "TensorCustomUnaryOp", "index": 1646, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half polygamma(const Eigen::half& n, const Eigen::half& x) {\n  return Eigen::half(Eigen::numext::polygamma(static_cast<float>(n), static_cast<float>(x)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half polygamma", "index": 1647, "label": 0}
{"input": "explicit __host__ __device__ __forceinline__ thresh_trunc_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {CV_UNUSED(maxVal_);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/functional.hpp", "function_name": "thresh_trunc_func", "index": 1648, "label": 0}
{"input": "void test_cxx11_tensor_dimension()\n{\n  CALL_SUBTEST(test_dynamic_size());\n  CALL_SUBTEST(test_fixed_size());\n  CALL_SUBTEST(test_match());\n  CALL_SUBTEST(test_rank_zero());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_dimension.cpp", "function_name": "test_cxx11_tensor_dimension", "index": 1649, "label": 0}
{"input": "inline size_t ConstSessionImpl<T>::GetOverridableInitializerCount() const {\n  size_t out;\n  ThrowOnError(GetApi().SessionGetOverridableInitializerCount(this->p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionImpl<T>::GetOverridableInitializerCount", "index": 1650, "label": 0}
{"input": "MWorkMat::~MWorkMat(){\n    matpic_org168.release();\n    matpic_roirst.release();\n    delete pic_real160;\n    delete pic_mask160;\n    delete msk_real160;\n    if(pic_clone160) delete pic_clone160;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/malpha.cpp", "function_name": "MWorkMat::~MWorkMat", "index": 1651, "label": 0}
{"input": "TensorScanOp(\n      const XprType& expr, const Index& axis, bool exclusive = false, const Op& op = Op())\n      : m_expr(expr), m_axis(axis), m_accumulator(op), m_exclusive(exclusive) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorScan.h", "function_name": "TensorScanOp", "index": 1652, "label": 0}
{"input": "copy_through_move_t(copy_through_move_t const& lhs) : copy_through_move_t(std::move(const_cast<copy_through_move_t&>(lhs))) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/copy_through_move.hpp", "function_name": "copy_through_move_t", "index": 1653, "label": 0}
{"input": "void Otto::Bend(int steps, int period, int dir) {\n    \n    int bend1[SERVO_COUNT] = {90, 90, 62, 35, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    int bend2[SERVO_COUNT] = {90, 90, 62, 105, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    int homes[SERVO_COUNT] = {90, 90, 90, 90, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n\n    \n    \n    \n    if (dir == -1) {\n        bend1[2] = 180 - 35;\n        bend1[3] = 180 - 60;  \n        bend2[2] = 180 - 105;\n        bend2[3] = 180 - 60;\n    }\n\n    \n    int T2 = 800;\n\n    \n    for (int i = 0; i < steps; i++) {\n        MoveServos(T2 / 2, bend1);\n        MoveServos(T2 / 2, bend2);\n        vTaskDelay(pdMS_TO_TICKS(period * 0.8));\n        MoveServos(500, homes);\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::Bend", "index": 1654, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nconst Product<MatrixDerived, TranspositionsDerived, AliasFreeProduct>\noperator*(const MatrixBase<MatrixDerived> &matrix,\n          const TranspositionsBase<TranspositionsDerived>& transpositions)\n{\n  return Product<MatrixDerived, TranspositionsDerived, AliasFreeProduct>\n            (matrix.derived(), transpositions.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Transpositions.h", "function_name": "Product<MatrixDerived, TranspositionsDerived, AliasFreeProduct>\noperator*", "index": 1655, "label": 0}
{"input": "typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::Unit(Index i)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return BasisReturnType(SquareMatrixType::Identity(),i);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "MatrixBase<Derived>::Unit", "index": 1656, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_NEQ>, const Derived, const OtherDerived>\n    operator!=(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_NEQ>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_NEQ>, const Derived, const OtherDerived>\n    operator!=", "index": 1657, "label": 0}
{"input": "__global__ void InnerReductionKernel(Reducer reducer, const Self input, Index num_coeffs_to_reduce, Index num_preserved_coeffs,\n                                         typename Self::CoeffReturnType* output) {\n#if __CUDA_ARCH__ >= 300\n  typedef typename Self::CoeffReturnType Type;\n  eigen_assert(blockDim.y == 1);\n  eigen_assert(blockDim.z == 1);\n  eigen_assert(gridDim.y == 1);\n  eigen_assert(gridDim.z == 1);\n\n  const int unroll_times = 16;\n  eigen_assert(NumPerThread % unroll_times == 0);\n\n  const Index input_col_blocks = divup<Index>(num_coeffs_to_reduce, blockDim.x * NumPerThread);\n  const Index num_input_blocks = input_col_blocks * num_preserved_coeffs;\n\n  const Index num_threads = blockDim.x * gridDim.x;\n  const Index thread_id = blockIdx.x * blockDim.x + threadIdx.x;\n\n  \n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "InnerReductionKernel", "index": 1658, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::AER LLAtoAER(const reference_frames::LLA&  target,\n                                                        const reference_frames::ECEF& referencePoint) noexcept\n    {\n        return LLAtoAER(target, ECEFtoLLA(referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/LLAtoAER.hpp", "function_name": "LLAtoAER", "index": 1659, "label": 0}
{"input": "inline void manage_multi_threading(Action action, int* v)\n{\n  static EIGEN_UNUSED int m_maxThreads = -1;\n\n  if(action==SetAction)\n  {\n    eigen_internal_assert(v!=0);\n    m_maxThreads = *v;\n  }\n  else if(action==GetAction)\n  {\n    eigen_internal_assert(v!=0);\n    #ifdef EIGEN_HAS_OPENMP\n    if(m_maxThreads>0)\n      *v = m_maxThreads;\n    else\n      *v = omp_get_max_threads();\n    #else\n    *v = 1;\n    #endif\n  }\n  else\n  {\n    eigen_internal_assert(false);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/Parallelizer.h", "function_name": "manage_multi_threading", "index": 1660, "label": 0}
{"input": "static hn::VFromD<DF> FastPromoteOddTo(DF df, hn::VFromD<DBF> vbf) {\n  \n  \n  \n  \n  \n  \n#if HWY_TARGET < HWY_AVX2\n  const hn::Repartition<uint16_t, decltype(df)> du16;\n  const auto odd = static_cast<__mmask32>(0xAAAAAAAAu);  \n  \n  \n  auto u16 = hn::BitCast(du16, vbf).raw;\n  \n  asm(\"vmovdqu16 %[U16], %[U16]%{%[ODD]%}%{z%};\"\n      : [U16] \"+v\"(u16)    \n      : [ODD] \"Yk\"(odd));  \n  return hn::BitCast(df, hn::VFromD<decltype(du16)>{u16});\n#else\n  return hn::PromoteOddTo(df, vbf);\n#endif\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "FastPromoteOddTo", "index": 1661, "label": 0}
{"input": "std::pair<NdArray<dtype>, NdArray<dtype>> meshgrid(const Slice& inSlice1, const Slice& inSlice2)\n    {\n        return meshgrid(arange<dtype>(inSlice1), arange<dtype>(inSlice2));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/meshgrid.hpp", "function_name": "meshgrid", "index": 1662, "label": 0}
{"input": "inline v_float64x4 v256_lut_pairs(const double* tab, const int* idx)\n{ return v_float64x4(_v256_combine(__lsx_vld(tab + idx[0], 0), __lsx_vld(tab + idx[1], 0))); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "v256_lut_pairs", "index": 1663, "label": 0}
{"input": "inline v_float32x4 v_lut_quads(const float* tab, const int* idx) { return v_reinterpret_as_f32(v_lut_quads((const int *)tab, idx)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_lut_quads", "index": 1664, "label": 0}
{"input": "void testHybrd()\n{\n  const int n=9;\n  int info;\n  VectorXd x;\n\n  \n  x.setConstant(n, -1.);\n\n  \n  hybrd_functor functor;\n  HybridNonLinearSolver<hybrd_functor> solver(functor);\n  solver.parameters.nb_of_subdiagonals = 1;\n  solver.parameters.nb_of_superdiagonals = 1;\n  solver.diag.setConstant(n, 1.);\n  solver.useExternalScaling = true;\n  info = solver.solveNumericalDiff(x);\n\n  \n  VERIFY_IS_EQUAL(info, 1);\n  VERIFY_IS_EQUAL(solver.nfev, 14);\n\n  \n  VERIFY_IS_APPROX(solver.fvec.blueNorm(), 1.192636e-08);\n\n  \n  VectorXd x_ref(n);\n  x_ref <<\n      -0.5706545,    -0.6816283,    -0.7017325,\n      -0.7042129,     -0.701369,    -0.6918656,\n      -0.665792,    -0.5960342,    -0.4164121;\n  VERIFY_IS_APPROX(x, x_ref);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/NonLinearOptimization.cpp", "function_name": "testHybrd", "index": 1665, "label": 0}
{"input": "static ModelConfig ConfigGemmaTiny() {\n  ModelConfig config = ConfigNoSSM();\n  config.model_name = \"GemmaTiny\";\n  config.model = Model::GEMMA_TINY;\n  config.model_dim = 128;\n  config.vocab_size = 64;\n  config.seq_len = 32;\n  LayerConfig layer_config = LayerConfigGemmaTiny(config.model_dim);\n  config.layer_configs = {3, layer_config};\n  config.num_tensor_scales = 4 * config.layer_configs.size();\n  config.query_scale = QueryScaleType::SqrtKeySize;\n  config.attention_window_sizes = FixedAttentionWindowSizes<3>(32);\n  \n  config.final_cap = 30.0f;\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.cc", "function_name": "ConfigGemmaTiny", "index": 1666, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::ECEF AERtoECEF(const reference_frames::AER  target,\n                                                          const reference_frames::LLA& referencePoint) noexcept\n    {\n        return AERtoECEF(target, LLAtoECEF(referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/AERtoECEF.hpp", "function_name": "AERtoECEF", "index": 1667, "label": 0}
{"input": "static inline\nComplex<_Tp> operator /= (const Complex<_Tp>& a, _Tp b)\n{\n    _Tp t = (_Tp)1/b;\n    a.re *= t; a.im *= t; return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "operator /=", "index": 1668, "label": 0}
{"input": "inline void CustomOpApi::SetDimensions(OrtTensorTypeAndShapeInfo* info, _In_ const int64_t* dim_values, size_t dim_count) {\n  ThrowOnError(api_.SetDimensions(info, dim_values, dim_count));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::SetDimensions", "index": 1669, "label": 0}
{"input": "inline __m512d _v512_insert(const __m512d& a, const __m256d& b)\n{ return _mm512_insertf64x4(a, b, 0); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx512.hpp", "function_name": "_v512_insert", "index": 1670, "label": 0}
{"input": "inline __m256i _v256_setall_w(int v0)\n{\n    return (__m256i)v8i32{ v0, v0, v0, v0, v0, v0, v0, v0 };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_setall_w", "index": 1671, "label": 0}
{"input": "void testLmstr1()\n{\n  const int n=3;\n  int info;\n\n  VectorXd x(n);\n\n  \n  x.setConstant(n, 1.);\n\n  \n  lmstr_functor functor;\n  LevenbergMarquardt<lmstr_functor> lm(functor);\n  info = lm.lmstr1(x);\n\n  \n  VERIFY_IS_EQUAL(info, 1);\n  VERIFY_IS_EQUAL(lm.nfev, 6);\n  VERIFY_IS_EQUAL(lm.njev, 5);\n\n  \n  VERIFY_IS_APPROX(lm.fvec.blueNorm(), 0.09063596);\n\n  \n  VectorXd x_ref(n);\n  x_ref << 0.08241058, 1.133037, 2.343695 ;\n  VERIFY_IS_APPROX(x, x_ref);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/NonLinearOptimization.cpp", "function_name": "testLmstr1", "index": 1672, "label": 0}
{"input": "EIGEN_DEVICE_FUNC typename MatrixBase<Derived>::PlainObject\nMatrixBase<Derived>::unitOrthogonal() const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return internal::unitOrthogonal_selector<Derived>::run(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/OrthoMethods.h", "function_name": "MatrixBase<Derived>::unitOrthogonal", "index": 1673, "label": 0}
{"input": "static v128_t wasm_unpacklo_i32x4(v128_t a, v128_t b) {\n    return wasm_v8x16_shuffle(a, b, 0,1,2,3,16,17,18,19,4,5,6,7,20,21,22,23);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "wasm_unpacklo_i32x4", "index": 1674, "label": 0}
{"input": "inline float BFloat16Impl<Derived>::ToFloatImpl() const noexcept {\n  if (IsNaN()) {\n    return std::numeric_limits<float>::quiet_NaN();\n  }\n  float result;\n  char* const first = reinterpret_cast<char*>(&result);\n  char* const second = first + sizeof(uint16_t);\n#ifdef __cpp_if_constexpr\n  if constexpr (detail::endian::native == detail::endian::little) {\n#else\n  if (detail::endian::native == detail::endian::little) {\n#endif\n    std::memset(first, 0, sizeof(uint16_t));\n    std::memcpy(second, &val, sizeof(uint16_t));\n  } else {\n    std::memcpy(first, &val, sizeof(uint16_t));\n    std::memset(second, 0, sizeof(uint16_t));\n  }\n  return result;\n}\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_float16.h", "function_name": "BFloat16Impl<Derived>::ToFloatImpl", "index": 1675, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vadd4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vadd4.u32.u32.u32.sat %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vadd.u32.u32.u32.sat %0.b0, %1.b0, %2.b0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"5 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s, t;\n        s = a ^ b;          \n        r = a & 0x7f7f7f7f; \n        t = b & 0x7f7f7f7f; \n        s = s & 0x80808080; \n        r = r + t;          \n        r = r ^ s;          \n    #endif \n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vadd4", "index": 1676, "label": 0}
{"input": "EIGEN_ALWAYS_INLINE PtrType eigen_unaligned_array_assert_workaround_gcc47(PtrType array) { return array; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/DenseStorage.h", "function_name": "eigen_unaligned_array_assert_workaround_gcc47", "index": 1677, "label": 0}
{"input": "CV_INLINE int cvReadInt( const CvFileNode* node, int default_value CV_DEFAULT(0) )\n{\n    return !node ? default_value :\n        CV_NODE_IS_INT(node->tag) ? node->data.i :\n        CV_NODE_IS_REAL(node->tag) ? cvRound(node->data.f) : 0x7fffffff;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvReadInt", "index": 1678, "label": 0}
{"input": "inline bool process_server_socket_ssl(\n    const std::atomic<socket_t> &svr_sock, SSL *ssl, socket_t sock,\n    size_t keep_alive_max_count, time_t keep_alive_timeout_sec,\n    time_t read_timeout_sec, time_t read_timeout_usec, time_t write_timeout_sec,\n    time_t write_timeout_usec, T callback) {\n  return process_server_socket_core(\n      svr_sock, sock, keep_alive_max_count, keep_alive_timeout_sec,\n      [&](bool close_connection, bool &connection_closed) {\n        SSLSocketStream strm(sock, ssl, read_timeout_sec, read_timeout_usec,\n                             write_timeout_sec, write_timeout_usec);\n        return callback(strm, close_connection, connection_closed);\n      });\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "process_server_socket_ssl", "index": 1679, "label": 0}
{"input": "static inline size_t CapIfNonZero(size_t num, size_t max_or_zero) {\n  return (max_or_zero == 0) ? num : HWY_MIN(num, max_or_zero);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/threading.cc", "function_name": "CapIfNonZero", "index": 1680, "label": 0}
{"input": "static __device__ void loop(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)\n            {\n                merge(skeys, key, svals, val, cmp, tid, I);\n                Unroll<I / 2, KP, KR, VP, VR, Cmp>::loop(skeys, key, svals, val, tid, cmp);\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/reduce_key_val.hpp", "function_name": "skeys", "index": 1681, "label": 0}
{"input": "inline cl_command_queue clCreateCommandQueue(cl_context p0, cl_device_id p1, cl_command_queue_properties p2, cl_int* p3) { return clCreateCommandQueue_pfn(p0, p1, p2, p3); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateCommandQueue", "index": 1682, "label": 0}
{"input": "inline const mpreal log1p   (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(log1p  );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "log1p", "index": 1683, "label": 0}
{"input": "AlignedBox<double, Dim> bounding_box(const Ball<Dim> &b)\n{ return AlignedBox<double, Dim>(b.center.array() - b.radius, b.center.array() + b.radius); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/BVH.cpp", "function_name": "bounding_box", "index": 1684, "label": 0}
{"input": "EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)\n{\n  \n  return static_cast<float>(pfirst(predux_mul(pmul(a.v4f[0], a.v4f[1]))));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "predux_mul", "index": 1685, "label": 0}
{"input": "static int calcinx(gjdigit_t* dg, KWav* wavmat,int index){\n    float* pwav = NULL;\n    float* pmfcc = NULL;\n    float* pbnf = NULL;\n    int melcnt = 0;\n    int bnfcnt = 0;\n    int rst = wavmat->calcbuf(index, &pwav,&pmfcc,&pbnf,&melcnt,&bnfcnt);\n    \n    if(rst == index){\n        dg->ai_wenet->calcmfcc(pwav,pmfcc);\n    \n        dg->ai_wenet->calcbnf(pmfcc,melcnt,pbnf,bnfcnt);\n    \n    \n        \n        wavmat->finishone(index);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "calcinx", "index": 1686, "label": 0}
{"input": "explicit SparseLU(const MatrixType& matrix)\n      : m_lastError(\"\"),m_Ustore(0,0,0,0,0,0),m_symmetricmode(false),m_diagpivotthresh(1.0),m_detPermR(1)\n    {\n      initperfvalues(); \n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU.h", "function_name": "SparseLU", "index": 1687, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nvoid DenseBase<Derived>::visit(Visitor& visitor) const\n{\n  typedef typename internal::visitor_evaluator<Derived> ThisEvaluator;\n  ThisEvaluator thisEval(derived());\n  \n  enum {\n    unroll =  SizeAtCompileTime != Dynamic\n           && SizeAtCompileTime * ThisEvaluator::CoeffReadCost + (SizeAtCompileTime-1) * internal::functor_traits<Visitor>::Cost <= EIGEN_UNROLLING_LIMIT\n  };\n  return internal::visitor_impl<Visitor, ThisEvaluator, unroll ? int(SizeAtCompileTime) : Dynamic>::run(thisEval, visitor);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Visitor.h", "function_name": "DenseBase<Derived>::visit", "index": 1688, "label": 0}
{"input": "int dumpfile(char* file,char** pbuf){\n    std::string fname(file);\n    std::ifstream cache(fname,std::ios::binary);\n    cache.seekg(0,std::ios::end);\n    const int engSize = cache.tellg();\n    cache.seekg(0,std::ios::beg);\n    char *modelMem = (char*)malloc(engSize+8000);\n    cache.read(modelMem,engSize);\n    cache.close();\n    *pbuf = modelMem;\n    return engSize;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/face_utils.cpp", "function_name": "dumpfile", "index": 1689, "label": 0}
{"input": "CV_INLINE  IplROI  cvRectToROI( CvRect rect, int coi )\n{\n    IplROI roi;\n    roi.xOffset = rect.x;\n    roi.yOffset = rect.y;\n    roi.width = rect.width;\n    roi.height = rect.height;\n    roi.coi = coi;\n\n    return roi;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvRectToROI", "index": 1690, "label": 0}
{"input": "int MyDigit::newwav(const char* wavfn,const char* dumpfn){\n    if(!inited)return -999;\n    if(mat_wenet){\n        delete mat_wenet;\n        mat_wenet = nullptr;\n    }\n    double t0 = ncnn::get_current_time();\n    int rst = ai_wenet->nextwav(wavfn,&mat_wenet);\n    cnt_wenet = rst;\n    double t1 = ncnn::get_current_time();\n    JMat mat(640,480,CV_8UC3);\n    char text[1024];\n    float dist = t1-t0;\n    sprintf(text,\"%s wenet %f\",wavfn,dist);\n    __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"%s\",text);\n    \n    if(strlen(dumpfn)){\n        mat_wenet->tobin(dumpfn);\n    }\n    if(!mat_wenet)return -1;\n    inx_wenet = 0;\n    return rst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "MyDigit::newwav", "index": 1691, "label": 0}
{"input": "static void test_dimension_failures()\n{\n  Tensor<int, 3, DataLayout> left(2, 3, 1);\n  Tensor<int, 3, DataLayout> right(3, 3, 1);\n  left.setRandom();\n  right.setRandom();\n\n  \n  Tensor<int, 3, DataLayout> concatenation = left.concatenate(right, 0);\n\n  \n  VERIFY_RAISES_ASSERT(concatenation = left.concatenate(right, 1));\n  VERIFY_RAISES_ASSERT(concatenation = left.concatenate(right, 2));\n\n  \n  VERIFY_RAISES_ASSERT(concatenation = left.concatenate(right, 3));\n  VERIFY_RAISES_ASSERT(concatenation = left.concatenate(right, -1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_concatenation.cpp", "function_name": "test_dimension_failures", "index": 1692, "label": 0}
{"input": "inline size_t Value::GetStringTensorElementLength(size_t element_index) const {\n  size_t out;\n  ThrowOnError(GetApi().GetStringTensorElementLength(p_, element_index, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetStringTensorElementLength", "index": 1693, "label": 0}
{"input": "static HWY_INLINE V4 MaybeLoad(D4 d4, size_t N,\n                                 const double* HWY_RESTRICT buf) {\n    if constexpr (kRow < kRowsAC) {\n      return hn::Load(d4, buf + 4 * kRow * N);\n    } else {\n      return hn::Zero(d4);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "MaybeLoad", "index": 1694, "label": 0}
{"input": "void CauchyBounds(int deg)\n{\n  typedef internal::increment_if_fixed_size<_Deg>            Dim;\n  typedef Matrix<_Scalar,Dim::ret,1>                  PolynomialType;\n  typedef Matrix<_Scalar,_Deg,1>                      EvalRootsType;\n\n  PolynomialType pols(deg+1);\n  EvalRootsType roots = EvalRootsType::Random(deg);\n  roots_to_monicPolynomial( roots, pols );\n  _Scalar M = cauchy_max_bound( pols );\n  _Scalar m = cauchy_min_bound( pols );\n  _Scalar Max = roots.array().abs().maxCoeff();\n  _Scalar min = roots.array().abs().minCoeff();\n  bool eval = (M >= Max) && (m <= min);\n  if( !eval )\n  {\n    cerr << \"Roots: \" << roots << endl;\n    cerr << \"Bounds: (\" << m << \", \" << M << \")\" << endl;\n    cerr << \"Min,Max: (\" << min << \", \" << Max << \")\" << endl;\n  }\n  VERIFY( eval );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/polynomialutils.cpp", "function_name": "CauchyBounds", "index": 1695, "label": 0}
{"input": "void setFractionalSecond(double fractionalSecond)\n        {\n            if (fractionalSecond < 0. || fractionalSecond >= 1.)\n            {\n                throw std::invalid_argument(\"input fractionalSecond must be in the range [0, 1)\");\n            }\n            fractionalSecond_ = fractionalSecond;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/DateTime/DateTime.hpp", "function_name": "fractionalSecond", "index": 1696, "label": 0}
{"input": "void EspWakeWord::Feed(const std::vector<int16_t>& data) {\n    int res = wakenet_iface_->detect(wakenet_data_, (int16_t *)data.data());\n    if (res > 0) {\n        StopDetection();\n        last_detected_wake_word_ = wakenet_iface_->get_word_name(wakenet_data_, res);\n\n        if (wake_word_detected_callback_) {\n            wake_word_detected_callback_(last_detected_wake_word_);\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/esp_wake_word.cc", "function_name": "EspWakeWord::Feed", "index": 1697, "label": 0}
{"input": "void test_product_selfadjoint()\n{\n  int s = 0;\n  for(int i = 0; i < g_repeat ; i++) {\n    CALL_SUBTEST_1( product_selfadjoint(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( product_selfadjoint(Matrix<float, 2, 2>()) );\n    CALL_SUBTEST_3( product_selfadjoint(Matrix3d()) );\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE/2);\n    CALL_SUBTEST_4( product_selfadjoint(MatrixXcf(s, s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE/2);\n    CALL_SUBTEST_5( product_selfadjoint(MatrixXcd(s,s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n    CALL_SUBTEST_6( product_selfadjoint(MatrixXd(s,s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n    CALL_SUBTEST_7( product_selfadjoint(Matrix<float,Dynamic,Dynamic,RowMajor>(s,s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_selfadjoint.cpp", "function_name": "test_product_selfadjoint", "index": 1698, "label": 0}
{"input": "inline __m256i _lasx_packus_w(const __m256i& a, const __m256i& b)\n{\n    __m256i u16min = __lasx_xvreplgr2vr_w(0);\n    __m256i u16max = __lasx_xvreplgr2vr_w(0xffff);\n    __m256i sat_a = __lasx_xvmax_w(a, u16min);\n            sat_a = __lasx_xvmin_w(sat_a, u16max);\n    __m256i sat_b = __lasx_xvmax_w(b, u16min);\n            sat_b = __lasx_xvmin_w(sat_b, u16max);\n    __m256i hwordIndex = _v256_setr_h(0, 2, 4, 6, 8, 10, 12, 14,\n                                      0, 2, 4, 6, 8, 10, 12, 14);\n    return __lasx_xvshuf_h(hwordIndex, sat_b, sat_a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_lasx_packus_w", "index": 1699, "label": 0}
{"input": "void verify_component_wise(const X& x, const Y& y)\n{\n  for(Index i=0; i<x.size(); ++i)\n  {\n    if((numext::isfinite)(y(i)))\n      VERIFY_IS_APPROX( x(i), y(i) );\n    else if((numext::isnan)(y(i)))\n      VERIFY((numext::isnan)(x(i)));\n    else\n      VERIFY_IS_EQUAL( x(i), y(i) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/special_functions.cpp", "function_name": "verify_component_wise", "index": 1700, "label": 0}
{"input": "EIGEN_STRONG_INLINE typename NumTraits<typename internal::traits<Derived>::Scalar>::Real MatrixBase<Derived>::squaredNorm() const\n{\n  return numext::real((*this).cwiseAbs2().sum());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Dot.h", "function_name": "MatrixBase<Derived>::squaredNorm", "index": 1701, "label": 0}
{"input": "__extension__ extern __inline v4f32\n__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\nmsa_mlaq_f32(v4f32 __a, v4f32 __b, v4f32 __c)\n{\n  __asm__ volatile(\"fmadd.w %w[__a], %w[__b], %w[__c]\\n\"\n               \n               : [__a] \"+f\"(__a)\n               \n               : [__b] \"f\"(__b), [__c] \"f\"(__c));\n  return __a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/msa_macros.h", "function_name": "msa_mlaq_f32", "index": 1702, "label": 0}
{"input": "inline ONNXTensorElementDataType MapTypeInfo::GetMapKeyType() const {\n  ONNXTensorElementDataType out;\n  ThrowOnError(GetApi().GetMapKeyType(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "MapTypeInfo::GetMapKeyType", "index": 1703, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void calcMagic(int32_t d) {\n   const unsigned two31 = 0x80000000;     \n   unsigned ad = d;\n   unsigned t = two31 + (ad >> 31);\n   unsigned anc = t - 1 - t%ad;     \n   int p = 31;                      \n   unsigned q1 = two31/anc;         \n   unsigned r1 = two31 - q1*anc;    \n   unsigned q2 = two31/ad;          \n   unsigned r2 = two31 - q2*ad;     \n   unsigned delta = 0;\n   do {\n      p = p + 1;\n      q1 = 2*q1;           \n      r1 = 2*r1;           \n      if (r1 >= anc) {     \n         q1 = q1 + 1;      \n         r1 = r1 - anc;}\n      q2 = 2*q2;           \n      r2 = 2*r2;           \n      if (r2 >= ad) {      \n         q2 = q2 + 1;      \n         r2 = r2 - ad;}\n      delta = ad - r2;\n   } while (q1 < delta || (q1 == delta && r1 == 0));\n\n   magic = (unsigned)(q2 + 1);\n   shift = p - 32;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIntDiv.h", "function_name": "d", "index": 1704, "label": 0}
{"input": "inline\nvoid PaniniPortraitProjector::mapBackward(float u, float v, float &x, float &y)\n{\n    u /= - scale;\n    v /= scale;\n\n    float lamda = a * atanf(u / a);\n    float u_ = lamda;\n\n    float v_;\n    if ( fabs(lamda) > 1E-7)\n        v_ = atanf(v * sinf(lamda) / (b * a * tanf(lamda/a)));\n    else\n        v_ = atanf(v / b);\n\n    float cosv = cosf(v_);\n    float y_ = cosv * sinf(u_);\n    float x_ = sinf(v_);\n    float z_ = cosv * cosf(u_);\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "PaniniPortraitProjector::mapBackward", "index": 1705, "label": 0}
{"input": "Index etree_find (Index i, IndexVector& pp)\n{\n  Index p = pp(i); \n  Index gp = pp(p); \n  while (gp != p) \n  {\n    pp(i) = gp; \n    i = gp; \n    p = pp(i);\n    gp = pp(p);\n  }\n  return p; \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseColEtree.h", "function_name": "etree_find", "index": 1706, "label": 0}
{"input": "inline const mpreal mpreal::operator-()const\n{\n    mpreal u(*this);\n    mpfr_neg(u.mpfr_ptr(),u.mpfr_srcptr(),mpreal::get_default_rnd());\n    return u;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::operator-", "index": 1707, "label": 0}
{"input": "explicit OpaqueRef(T&& obj) :\n            m_ref(new OpaqueRefT<util::decay_t<T>>(std::forward<T>(obj))),\n            m_kind(GOpaqueTraits<util::decay_t<T>>::kind) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gopaque.hpp", "function_name": "OpaqueRef", "index": 1708, "label": 0}
{"input": "void ValueImpl<T>::FillSparseTensorCsr(const OrtMemoryInfo* data_mem_info,\n                                       const OrtSparseValuesParam& values,\n                                       const int64_t* inner_indices_data, size_t inner_indices_num,\n                                       const int64_t* outer_indices_data, size_t outer_indices_num) {\n  ThrowOnError(GetApi().FillSparseTensorCsr(this->p_, data_mem_info, values.values_shape, values.values_shape_len, values.data.p_data,\n                                            inner_indices_data, inner_indices_num,\n                                            outer_indices_data, outer_indices_num));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ValueImpl<T>::FillSparseTensorCsr", "index": 1709, "label": 0}
{"input": "bool JSVMRuntime::instanceOf(const piper::Object& o, const piper::Function& f) {\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(o, &obj_value);\n  JSVM_Value ctor_value = nullptr;\n  JSVMHelper::objectRef(f, &ctor_value);\n  bool result = false;\n  JSVM_CALL_RETURN(OH_JSVM_Instanceof(getEnv(), obj_value, ctor_value, &result),\n                   result);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::instanceOf", "index": 1710, "label": 0}
{"input": "InnerUpperIterator(const SkylineMatrix& mat, Index outer)\n    : m_matrix(mat), m_outer(outer),\n    m_id(_Options == RowMajor ? mat.m_colStartIndex[outer] : mat.m_rowStartIndex[outer] + 1),\n    m_start(m_id),\n    m_end(_Options == RowMajor ? mat.m_colStartIndex[outer + 1] : mat.m_rowStartIndex[outer + 1] + 1) {\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "InnerUpperIterator", "index": 1711, "label": 0}
{"input": "inline Result\nClientImpl::Put(const std::string &path, const Headers &headers,\n                const MultipartFormDataItems &items,\n                const MultipartFormDataProviderItems &provider_items) {\n  const auto &boundary = detail::make_multipart_data_boundary();\n  const auto &content_type =\n      detail::serialize_multipart_formdata_get_content_type(boundary);\n  return send_with_content_provider(\n      \"PUT\", path, headers, nullptr, 0, nullptr,\n      get_multipart_content_provider(boundary, items, provider_items),\n      content_type);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::Put", "index": 1712, "label": 0}
{"input": "NdArray<dtype> full(const Shape& inShape, dtype inFillValue)\n    {\n        return full(inShape.rows, inShape.cols, inFillValue);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/full.hpp", "function_name": "full", "index": 1713, "label": 0}
{"input": "inline bool Quat<T>::isNormal(T eps) const\n{\n\n    double normVar = norm();\n    if ((normVar > 1 - eps) && (normVar < 1 + eps))\n        return true;\n    return false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::isNormal", "index": 1714, "label": 0}
{"input": "void AmbiVector<_Scalar,_StorageIndex>::setZero()\n{\n  if (m_mode==IsDense)\n  {\n    for (Index i=m_start; i<m_end; ++i)\n      m_buffer[i] = Scalar(0);\n  }\n  else\n  {\n    eigen_assert(m_mode==IsSparse);\n    m_llSize = 0;\n    m_llStart = -1;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/AmbiVector.h", "function_name": "AmbiVector<_Scalar,_StorageIndex>::setZero", "index": 1715, "label": 0}
{"input": "CoTask<IOResult> StorageOperator::doCommit(ServiceRequestContext &requestCtx,\n                                           const CommitIO &commitIO,\n                                           const UpdateOptions &updateOptions,\n                                           ChunkEngineUpdateJob &chunkEngineJob,\n                                           uint32_t featureFlags,\n                                           const std::shared_ptr<StorageTarget> &target) {\n  auto recordGuard = storageDoCommitRecorder.record();\n  UpdateJob job(requestCtx, commitIO, updateOptions, chunkEngineJob, target);\n  if (BITFLAGS_CONTAIN(featureFlags, FeatureFlags::BYPASS_DISKIO)) {\n    job.setResult(0);\n    job.result().commitVer = commitIO.commitVer;\n    job.result().commitChainVer = commitIO.commitChainVer;\n  } else {\n    co_await updateWorker_.enqueue(&job);\n    co_await job.complete();\n  }\n  if (LIKELY(bool(job.result().lengthInfo))) {\n    recordGuard.succ();\n  }\n  co_return job.result();\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/storage/service/StorageOperator.cc", "function_name": "StorageOperator::doCommit", "index": 1716, "label": 0}
{"input": "inline\nMatx<_Tp, m, n> Matx<_Tp, m, n>::mul(const Matx<_Tp, m, n>& a) const\n{\n    return Matx<_Tp, m, n>(*this, a, Matx_MulOp());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp, m, n>::mul", "index": 1717, "label": 0}
{"input": "static void mspack_memory_copy(void *src, void *dest, size_t chars)\n{\n    std::memcpy(dest, src, chars);\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "cd6fcb33bdcaff37c8c9d2083c7951e1d73ae9da", "file_path": "XenonUtils/xex_patcher.cpp", "function_name": "mspack_memory_copy", "index": 1718, "label": 0}
{"input": "int SbsWriter::WriteWithConfig(std::string path, const ModelConfig* config) {\n  return impl_->WriteWithConfig(path, config);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "compression/python/compression_clif_aux.cc", "function_name": "SbsWriter::WriteWithConfig", "index": 1719, "label": 0}
{"input": "void GRender::start() {\n    LOGI(TAG, \"CoreFlow : start playing\");\n    if (!nativeWindow ) {\n        messageHelper->notifyObj(MSG_DOMAIN_ERROR, MSG_ERROR_RENDERING, 0, \"invalid surface\", nullptr);\n        return;\n    }\n    startRendering();\n    \n    onBufferStateChanged(0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::start", "index": 1720, "label": 0}
{"input": "inline ONNXType TypeInfoImpl<T>::GetONNXType() const {\n  ONNXType out;\n  ThrowOnError(GetApi().GetOnnxTypeFromTypeInfo(this->p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TypeInfoImpl<T>::GetONNXType", "index": 1721, "label": 0}
{"input": "inline void queryCacheSizes_amd(int& l1, int& l2, int& l3)\n{\n  int abcd[4];\n  abcd[0] = abcd[1] = abcd[2] = abcd[3] = 0;\n  EIGEN_CPUID(abcd,0x80000005,0);\n  l1 = (abcd[2] >> 24) * 1024; \n  abcd[0] = abcd[1] = abcd[2] = abcd[3] = 0;\n  EIGEN_CPUID(abcd,0x80000006,0);\n  l2 = (abcd[2] >> 16) * 1024; \n  l3 = ((abcd[3] & 0xFFFC000) >> 18) * 512 * 1024; \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "queryCacheSizes_amd", "index": 1722, "label": 0}
{"input": "void EglRenderer::swapBuffers() {\n    if (_display) {\n        if (!eglSwapBuffers(_display, _surface)) {\n            LOGE(TAG, \"eglSwapBuffers() returned error 0x%x\", eglGetError());\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/EglRenderer.cpp", "function_name": "EglRenderer::swapBuffers", "index": 1723, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmpne2(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetne2(a, b);\n        c = r << 16;        \n        r = c - r;          \n    #else\n        \n        \n        r = a ^ b;          \n        c = r | 0x80008000; \n        c = c - 0x00010001; \n        c = r | c;          \n        c = c & 0x80008000; \n        r = c >> 15;        \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmpne2", "index": 1724, "label": 0}
{"input": "void Es8311AudioCodec::EnableOutput(bool enable) {\n    if (enable == output_enabled_) {\n        return;\n    }\n    if (enable) {\n        \n        esp_codec_dev_sample_info_t fs = {\n            .bits_per_sample = 16,\n            .channel = 1,\n            .channel_mask = 0,\n            .sample_rate = (uint32_t)output_sample_rate_,\n            .mclk_multiple = 0,\n        };\n        ESP_ERROR_CHECK(esp_codec_dev_open(output_dev_, &fs));\n        ESP_ERROR_CHECK(esp_codec_dev_set_out_vol(output_dev_, output_volume_));\n        if (pa_pin_ != GPIO_NUM_NC) {\n            gpio_set_level(pa_pin_, !pa_inverted_ ? 1 : 0);\n        }\n    } else {\n        ESP_ERROR_CHECK(esp_codec_dev_close(output_dev_));\n        if (pa_pin_ != GPIO_NUM_NC) {\n            gpio_set_level(pa_pin_, !pa_inverted_ ? 0 : 1);\n        }\n    }\n    AudioCodec::EnableOutput(enable);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "a118e8f7868c9d4f0da7098d32c87d08f4ff2ff4", "file_path": "main/audio_codecs/es8311_audio_codec.cc", "function_name": "Es8311AudioCodec::EnableOutput", "index": 1725, "label": 0}
{"input": "static void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,typename SrcXprType::Scalar> &)\n  {\n    dst._assignProduct(src, -1, 1);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "internal::sub_assign_op<Scalar,typename SrcXprType::Scalar>", "index": 1726, "label": 0}
{"input": "size_t NoAudioProcessor::GetFeedSize() {\n    if (!codec_) {\n        return 0;\n    }\n    \n    return 30 * codec_->input_sample_rate() / 1000;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/no_audio_processor.cc", "function_name": "NoAudioProcessor::GetFeedSize", "index": 1727, "label": 0}
{"input": "const PermutationWrapper<const Derived> MatrixBase<Derived>::asPermutation() const\n{\n  return derived();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PermutationMatrix.h", "function_name": "MatrixBase<Derived>::asPermutation", "index": 1728, "label": 0}
{"input": "const ColPivHouseholderQR<typename MatrixBase<Derived>::PlainObject>\nMatrixBase<Derived>::colPivHouseholderQr() const\n{\n  return ColPivHouseholderQR<PlainObject>(eval());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/ColPivHouseholderQR.h", "function_name": "MatrixBase<Derived>::colPivHouseholderQr", "index": 1729, "label": 0}
{"input": "inline void applyThisOnTheRight(Dest& dst, Workspace& workspace) const\n    {\n      workspace.resize(dst.rows());\n      for(Index k = 0; k < m_length; ++k)\n      {\n        Index actual_k = m_trans ? m_length-k-1 : k;\n        dst.rightCols(rows()-m_shift-actual_k)\n           .applyHouseholderOnTheRight(essentialVector(actual_k), m_coeffs.coeff(actual_k), workspace.data());\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Householder/HouseholderSequence.h", "function_name": "applyThisOnTheRight", "index": 1730, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::NED ECEFtoNED(const reference_frames::ECEF& target,\n                                                         const reference_frames::ECEF& referencePoint) noexcept\n    {\n        return ENUtoNED(ECEFtoENU(target, referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ECEFtoNED.hpp", "function_name": "ECEFtoNED", "index": 1731, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Packet ploadt(const typename unpacket_traits<Packet>::type* from)\n{\n  if(Alignment >= unpacket_traits<Packet>::alignment)\n    return pload<Packet>(from);\n  else\n    return ploadu<Packet>(from);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "ploadt", "index": 1732, "label": 0}
{"input": "piper::ArrayBuffer JSVMRuntime::createArrayBufferNoCopy(\n    std::unique_ptr<const uint8_t[]> bytes, size_t byte_length) {\n  JSVM_Value result = nullptr;\n  uint8_t* raw_buffer = const_cast<uint8_t*>(bytes.release());\n  JSVM_CALL_RETURN(OH_JSVM_CreateArrayBufferFromBackingStoreData(\n                       getEnv(), reinterpret_cast<void*>(raw_buffer),\n                       byte_length, 0, byte_length, &result),\n                   piper::ArrayBuffer(*this));\n\n  return JSVMHelper::createObject(result, getEnv()).getArrayBuffer(*this);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createArrayBufferNoCopy", "index": 1733, "label": 0}
{"input": "bool DenseBase<Derived>::isMuchSmallerThan(\n  const DenseBase<OtherDerived>& other,\n  const RealScalar& prec\n) const\n{\n  return internal::isMuchSmallerThan_object_selector<Derived, OtherDerived>::run(derived(), other.derived(), prec);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Fuzzy.h", "function_name": "DenseBase<Derived>::isMuchSmallerThan", "index": 1734, "label": 0}
{"input": "void GRender::stopRendering() {\n    if (audioRenderThread && audioRenderThread->hasStarted()) {\n        audioRenderThread->stop();\n        frameSource->reset();\n        audioRenderThread->join();\n        delete audioRenderThread;\n        audioRenderThread = nullptr;\n    }\n    if (videoRenderThread && videoRenderThread->hasStarted()) {\n        videoRenderThread->stop();\n        frameSource->reset();\n        videoRenderThread->join();\n        delete videoRenderThread;\n        videoRenderThread = nullptr;\n    }\n    delete renderHelper;\n    renderHelper = nullptr;\n    LOGI(TAG, \"rendering threads were stopped!\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::stopRendering", "index": 1735, "label": 0}
{"input": "inline size_t Value::GetStringTensorDataLength() const {\n  size_t out;\n  ThrowOnError(GetApi().GetStringTensorDataLength(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetStringTensorDataLength", "index": 1736, "label": 0}
{"input": "NdArray<double> legendre_q(int32 n, const NdArray<dtype>& inArrayX)\n    {\n        NdArray<double> returnArray(inArrayX.shape());\n\n        const auto function = [n](dtype x) -> double { return legendre_q(n, x); };\n\n        stl_algorithms::transform(inArrayX.cbegin(), inArrayX.cend(), returnArray.begin(), function);\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/legendre_q.hpp", "function_name": "legendre_q", "index": 1737, "label": 0}
{"input": "napi_value DebugRouterWrapper::Constructor(napi_env env,\n                                           napi_callback_info info) {\n  size_t argc = 0;\n  napi_value args[1];\n  napi_value js_this;\n  napi_get_cb_info(env, info, &argc, args, &js_this, nullptr);\n  return js_this;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/debug_router_wrapper.cc", "function_name": "DebugRouterWrapper::Constructor", "index": 1738, "label": 0}
{"input": "void test_multithread_elementwise()\n{\n  Tensor<float, 3> in1(2,3,7);\n  Tensor<float, 3> in2(2,3,7);\n  Tensor<float, 3> out(2,3,7);\n\n  in1.setRandom();\n  in2.setRandom();\n\n  Eigen::ThreadPool tp(internal::random<int>(3, 11));\n  Eigen::ThreadPoolDevice thread_pool_device(&tp, internal::random<int>(3, 11));\n  out.device(thread_pool_device) = in1 + in2 * 3.14f;\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_APPROX(out(i,j,k), in1(i,j,k) + in2(i,j,k) * 3.14f);\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_thread_pool.cpp", "function_name": "test_multithread_elementwise", "index": 1739, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE unsigned PCG_XSH_RS_generator(uint64_t* state) {\n  \n  uint64_t current = *state;\n  \n  *state = current * 6364136223846793005ULL + 0xda3e39cb94b95bdbULL;\n  \n  return static_cast<unsigned>((current ^ (current >> 22)) >> (22 + (current >> 61)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "PCG_XSH_RS_generator", "index": 1740, "label": 0}
{"input": "inline void DictValue::release()\n{\n    switch (type)\n    {\n    case Param::INT:\n        delete pi;\n        break;\n    case Param::STRING:\n        delete ps;\n        break;\n    case Param::REAL:\n        delete pd;\n        break;\n    case Param::BOOLEAN:\n    case Param::MAT:\n    case Param::MAT_VECTOR:\n    case Param::ALGORITHM:\n    case Param::FLOAT:\n    case Param::UNSIGNED_INT:\n    case Param::UINT64:\n    case Param::UCHAR:\n    case Param::SCALAR:\n        break; \n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/dnn.inl.hpp", "function_name": "DictValue::release", "index": 1741, "label": 0}
{"input": "auto bessel_yn(dtype1 inV, const NdArray<dtype2>& inArrayX)\n    {\n        NdArray<decltype(bessel_yn(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArrayX.shape());\n\n        stl_algorithms::transform(\n            inArrayX.cbegin(),\n            inArrayX.cend(),\n            returnArray.begin(),\n            [inV](dtype2 inX) -> auto{ return bessel_yn(inV, inX); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/bessel_yn.hpp", "function_name": "bessel_yn", "index": 1742, "label": 0}
{"input": "std::vector<std::string> GenerateBatch(const std::vector<std::string>& inputs,\n                                         size_t max_generated_tokens,\n                                         float temperature, float seed,\n                                         size_t top_k) {\n    gcpp::RuntimeConfig& config = gemma_.MutableConfig();\n    config.max_generated_tokens = max_generated_tokens;\n    config.temperature = temperature;\n    config.top_k = top_k;\n    config.verbosity = 0;\n    gemma_.MutableGen().seed(seed);\n\n    std::vector<gcpp::QueryResult> outputs = gemma_.BatchQueryModel(inputs);\n    std::vector<std::string> result;\n    result.reserve(outputs.size());\n    for (const gcpp::QueryResult& output : outputs) {\n      result.push_back(output.response.substr(output.response_start_pos));\n    }\n    return result;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "7af2e70321c58ed7fd69f067424e84eea176e145", "file_path": "python/gemma_py.cc", "function_name": "std::vector<std::string>", "index": 1743, "label": 0}
{"input": "void SimpleDistributionRecorder::addSample(int64_t val, const TagSet &tag) { getRecorderWithTag(tag)->addSample(val); }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/common/monitor/Recorder.cc", "function_name": "SimpleDistributionRecorder::addSample", "index": 1744, "label": 0}
{"input": "NCNN_FORCEINLINE const Mat Mat::channel_range(int _c, int channels) const\n{\n    Mat m(w, h, d, channels, (unsigned char*)data + cstep * _c * elemsize, elemsize, elempack, allocator);\n    m.dims = dims;\n    return m;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "Mat::channel_range", "index": 1745, "label": 0}
{"input": "void Otto::AttachServos() {\n    for (int i = 0; i < SERVO_COUNT; i++) {\n        if (servo_pins_[i] != -1) {\n            servo_[i].Attach(servo_pins_[i]);\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::AttachServos", "index": 1746, "label": 0}
{"input": "__device__ __forceinline__ void merge(const thrust::tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,\n                                              const thrust::tuple<KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9>& key,\n                                              const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& svals,\n                                              const thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9>& val,\n                                              const thrust::tuple<Cmp0, Cmp1, Cmp2, Cmp3, Cmp4, Cmp5, Cmp6, Cmp7, Cmp8, Cmp9>& cmp,\n                                              unsigned int tid, unsigned int delta)\n        {\n            For<0, thrust::tuple_size<thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9> >::value>::merge(skeys, key, svals, val, cmp, tid, delta);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/reduce_key_val.hpp", "function_name": "merge", "index": 1747, "label": 0}
{"input": "ContentReader(Reader reader, MultipartReader multipart_reader)\n      : reader_(std::move(reader)),\n        multipart_reader_(std::move(multipart_reader)) {}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ContentReader", "index": 1748, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Quaternion<typename internal::traits<Derived>::Scalar> QuaternionBase<Derived>::inverse() const\n{\n  \n  Scalar n2 = this->squaredNorm();\n  if (n2 > Scalar(0))\n    return Quaternion<Scalar>(conjugate().coeffs() / n2);\n  else\n  {\n    \n    return Quaternion<Scalar>(Coefficients::Zero());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "Quaternion<typename internal::traits<Derived>::Scalar> QuaternionBase<Derived>::inverse", "index": 1749, "label": 0}
{"input": "EIGEN_STRONG_INLINE void enqueueNoNotification(Function&& f, Args&&... args) const {\n    pool_->Schedule(std::bind(f, args...));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h", "function_name": "enqueueNoNotification", "index": 1750, "label": 0}
{"input": "static void test_simple_lvalue_ref()\n{\n  Tensor<int, 1> input(6);\n  input.setRandom();\n\n  TensorRef<Tensor<int, 1>> ref3(input);\n  TensorRef<Tensor<int, 1>> ref4 = input;\n\n  VERIFY_IS_EQUAL(ref3.data(), input.data());\n  VERIFY_IS_EQUAL(ref4.data(), input.data());\n\n  for (int i = 0; i < 6; ++i) {\n    VERIFY_IS_EQUAL(ref3(i), input(i));\n    VERIFY_IS_EQUAL(ref4(i), input(i));\n  }\n\n  for (int i = 0; i < 6; ++i) {\n    ref3.coeffRef(i) = i;\n  }\n  for (int i = 0; i < 6; ++i) {\n    VERIFY_IS_EQUAL(input(i), i);\n  }\n  for (int i = 0; i < 6; ++i) {\n    ref4.coeffRef(i) = -i * 2;\n  }\n  for (int i = 0; i < 6; ++i) {\n    VERIFY_IS_EQUAL(input(i), -i*2);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_simple_lvalue_ref", "index": 1751, "label": 0}
{"input": "inline bool is_valid_path(const std::string &path) {\n  size_t level = 0;\n  size_t i = 0;\n\n  \n  while (i < path.size() && path[i] == '/') {\n    i++;\n  }\n\n  while (i < path.size()) {\n    \n    auto beg = i;\n    while (i < path.size() && path[i] != '/') {\n      i++;\n    }\n\n    auto len = i - beg;\n    assert(len > 0);\n\n    if (!path.compare(beg, len, \".\")) {\n      ;\n    } else if (!path.compare(beg, len, \"..\")) {\n      if (level == 0) { return false; }\n      level--;\n    } else {\n      level++;\n    }\n\n    \n    while (i < path.size() && path[i] == '/') {\n      i++;\n    }\n  }\n\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "is_valid_path", "index": 1752, "label": 0}
{"input": "static RowVectorBatch<float> CreateInvTimescale(\n      size_t qkv_dim, PostQKType post_qk, double base_frequency = 10000.0) {\n    const size_t rope_dim =\n        post_qk == PostQKType::HalfRope ? qkv_dim / 2 : qkv_dim;\n    RowVectorBatch<float> inv_timescale(Extents2D(1, rope_dim / 2));\n    for (size_t dim = 0; dim < rope_dim / 2; ++dim) {\n      const double freq_exponents =\n          static_cast<double>(2 * dim) / static_cast<double>(rope_dim);\n      \n      \n      inv_timescale.Batch(0)[dim] =\n          static_cast<float>(1.0 / std::pow(base_frequency, freq_exponents));\n    }\n    return inv_timescale;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f37402da57cc5c2d1e467168a40689ce2571fd49", "file_path": "gemma/activations.h", "function_name": "qkv_dim", "index": 1753, "label": 0}
{"input": "EIGEN_DEVICE_FUNC static constexpr bool value_known_statically(const DenseIndex i, const IndexTuple<T...>&) {\n    return is_compile_time_constant<typename IndexTupleExtractor<0, T...>::ValType>::value & (i == 0);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "value_known_statically", "index": 1754, "label": 0}
{"input": "inline void ConstValueImpl<T>::GetStringTensorContent(void* buffer, size_t buffer_length, size_t* offsets, size_t offsets_count) const {\n  ThrowOnError(GetApi().GetStringTensorContent(this->p_, buffer, buffer_length, offsets, offsets_count));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetStringTensorContent", "index": 1755, "label": 0}
{"input": "inline __m512d _v512_combine(const __m256d& lo, const __m256d& hi)\n{ return _mm512_insertf64x4(_mm512_castpd256_pd512(lo), hi, 1); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx512.hpp", "function_name": "_v512_combine", "index": 1756, "label": 0}
{"input": "void bug_1204()\n{\n  SparseMatrix<double> A(2,2);\n  A.setIdentity();\n  SelfAdjointEigenSolver<Eigen::SparseMatrix<double> > eig(A);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigensolver_selfadjoint.cpp", "function_name": "bug_1204", "index": 1757, "label": 0}
{"input": "Quat<T> Quat<T>::exp() const\n{\n    Vec<T, 3> v{x, y, z};\n    T normV = std::sqrt(v.dot(v));\n    T k = normV < CV_QUAT_EPS ? 1 : std::sin(normV) / normV;\n    return std::exp(w) * Quat<T>(std::cos(normV), v[0] * k, v[1] * k, v[2] * k);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::exp", "index": 1758, "label": 0}
{"input": "std::optional<Value> JSVMRuntime::getProperty(const piper::Object& obj,\n                                              const piper::PropNameID& name) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value prop_value = nullptr;\n  JSVMHelper::objectRef(obj, &prop_value);\n\n  JSVM_Value name_value = nullptr;\n  JSVMHelper::stringRef(name, &name_value);\n\n  JSVM_Value target_value = nullptr;\n  JSVM_CALL(\n      OH_JSVM_GetProperty(getEnv(), prop_value, name_value, &target_value));\n  return JSVMHelper::createValue(target_value, getEnv());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::getProperty", "index": 1759, "label": 0}
{"input": "bool Site::is_same_site(Site const& other) const\n{\n    \n    \n    if (m_value.has<Origin>() && other.m_value.has<Origin>())\n        return m_value.get<Origin>().nonce() == other.m_value.get<Origin>().nonce();\n\n    \n    if (m_value.has<Origin>() || other.m_value.has<Origin>())\n        return false;\n\n    \n    auto& a = m_value.get<SchemeAndHost>();\n    auto& b = other.m_value.get<SchemeAndHost>();\n    if (a.scheme != b.scheme)\n        return false;\n\n    \n    if (a.host != b.host)\n        return false;\n\n    \n    return true;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "bd67a5afaa74b8099b99febd830a0c0235e9b89b", "file_path": "Libraries/LibURL/Site.cpp", "function_name": "Site::is_same_site", "index": 1760, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vseteq2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vset2.u32.u32.eq %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        \n        \n        unsigned int c;\n        r = a ^ b;          \n        c = r | 0x80008000; \n        r = r ^ c;          \n        c = c - 0x00010001; \n        c = r & ~c;         \n        r = c >> 15;        \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vseteq2", "index": 1761, "label": 0}
{"input": "COFFEE_TRY() {\n#else\ntry{\n#endif\n    if(what==1){\n        LOGD(TAG,\"===docurl \\n\");\n        NetCurl* curl = (NetCurl*)obj;\n        int rst = curl->docurl();\n        LOGD(TAG, \" docurl %d  \",rst);\n    }else if(what==-1){\n        NetCurl* curl = (NetCurl*)obj;\n        delete curl;\n    }\n#ifdef __ANDROID__\n}COFFEE_CATCH() {\n    LOGE(TAG,\"loopcurl err %d\",what);\n} COFFEE_END();\n#else\n}catch(...){\n    LOGE(TAG,\"loopcurl err %d\",what);\n}\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "COFFEE_TRY", "index": 1762, "label": 0}
{"input": "inline ConstMemoryInfo ConstValueImpl<T>::GetTensorMemoryInfo() const {\n  const OrtMemoryInfo* mem_info;\n  ThrowOnError(GetApi().GetTensorMemoryInfo(this->p_, &mem_info));\n  return ConstMemoryInfo(mem_info);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstValueImpl<T>::GetTensorMemoryInfo", "index": 1763, "label": 0}
{"input": "inline cl_mem clCreateFromGLBuffer(cl_context p0, cl_mem_flags p1, cl_GLuint p2, int* p3) { return clCreateFromGLBuffer_pfn(p0, p1, p2, p3); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_gl_wrappers.hpp", "function_name": "clCreateFromGLBuffer", "index": 1764, "label": 0}
{"input": "inline bool Value::IsSparseTensor() const {\n  int out;\n  ThrowOnError(GetApi().IsSparseTensor(p_, &out));\n  return out != 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::IsSparseTensor", "index": 1765, "label": 0}
{"input": "inline void DynamicSGroup::updateGlobalFlags(int flagDiffOfSameGenerator)\n{\n    switch (flagDiffOfSameGenerator) {\n      case 0:\n      default:\n        \n        break;\n      case NegationFlag:\n        \n        m_globalFlags |= GlobalRealFlag;\n        break;\n      case (NegationFlag | ConjugationFlag):\n        \n        m_globalFlags |= GlobalImagFlag;\n        break;\n      \n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/DynamicSymmetry.h", "function_name": "DynamicSGroup::updateGlobalFlags", "index": 1766, "label": 0}
{"input": "inline\nvoid SparseMat_<_Tp>::create(int _dims, const int* _sizes)\n{\n    SparseMat::create(_dims, _sizes, traits::Type<_Tp>::value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat_<_Tp>::create", "index": 1767, "label": 0}
{"input": "SparseLUMatrixUReturnType(const MatrixLType& mapL, const MatrixUType& mapU)\n  : m_mapL(mapL),m_mapU(mapU)\n  { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU.h", "function_name": "SparseLUMatrixUReturnType", "index": 1768, "label": 0}
{"input": "virtual void sortAndCopy(int* indices, DistanceType* dist, int n_neighbors = -1) const\n    {\n        copy(indices, dist, n_neighbors);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "n_neighbors", "index": 1769, "label": 0}
{"input": "int64_t LepusComponent::RequestAnimationFrame(\n    std::unique_ptr<NapiFrameCallback> callback) {\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, LEPUS_COMPONENT_REQUEST_ANIMATION_FRAME);\n  if (tasm_ == nullptr || tasm_->destroyed()) {\n    LOGE(\"LepusComponent::RequestAnimationFrame failed since tasm is invalid.\");\n    constexpr static int64_t sFailInt = -1;\n    return sFailInt;\n  }\n\n  tasm_->GetDelegate().RequestVsync(\n      reinterpret_cast<uintptr_t>(this),\n      fml::MakeCopyable([this, weak = Napi::Weak(NapiObject())](\n                            int64_t frame_start, int64_t frame_end) {\n        if (!weak.Value().IsUndefined()) {\n          this->DoFrame(frame_start, frame_end);\n        }\n      }));\n\n  return raf_handler_->RequestAnimationFrame(std::move(callback));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/renderer/worklet/lepus_component.cc", "function_name": "LepusComponent::RequestAnimationFrame", "index": 1770, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vmax2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vmax2.u32.u32.u32 %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vmax.u32.u32.u32 %0.h0, %1.h0, %2.h0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s, t, u;\n        r = a & 0x0000ffff; \n        s = b & 0x0000ffff; \n        t = ::max(r, s);    \n        r = a & 0xffff0000; \n        s = b & 0xffff0000; \n        u = ::max(r, s);    \n        r = t | u;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vmax2", "index": 1771, "label": 0}
{"input": "inline static vuint32mf2_t vreinterpret_u32mf2(vint32mf2_t val)\n{\n    return vreinterpret_v_i32mf2_u32mf2(val);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv_compat_overloaded.hpp", "function_name": "vreinterpret_u32mf2", "index": 1772, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::ENU LLAtoENU(const reference_frames::LLA&  target,\n                                                        const reference_frames::ECEF& referencePoint) noexcept\n    {\n        return LLAtoENU(target, ECEFtoLLA(referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/LLAtoENU.hpp", "function_name": "LLAtoENU", "index": 1773, "label": 0}
{"input": "NdArray<double> wrap(const NdArray<dtype>& inAngles) noexcept\n    {\n        NdArray<double> returnArray(inAngles.size());\n        stl_algorithms::transform(inAngles.begin(),\n                                  inAngles.end(),\n                                  returnArray.begin(),\n                                  [](const auto angle) noexcept -> double { return wrap(angle); });\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/wrap.hpp", "function_name": "wrap", "index": 1774, "label": 0}
{"input": "inline void ClientImpl::set_header_writer(\n    std::function<ssize_t(Stream &, Headers &)> const &writer) {\n  header_writer_ = writer;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_header_writer", "index": 1775, "label": 0}
{"input": "atk_dnesp32s3() : boot_button_(BOOT_BUTTON_GPIO) {\n        InitializeI2c();\n        InitializeSpi();\n        InitializeSt7789Display();\n        InitializeButtons();\n        InitializeIot();\n        InitializeCamera();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "32c5b3e6d42e1681cab7136e3c3a968d1eb5ec48", "file_path": "main/boards/atk-dnesp32s3/atk_dnesp32s3.cc", "function_name": "atk_dnesp32s3", "index": 1776, "label": 0}
{"input": "[[nodiscard]] inline std::array<Vec3, 3> NEDUnitVecsInECEF(const reference_frames::ECEF& location) noexcept\n    {\n        const auto lla = ECEFtoLLA(location);\n\n        const auto sinLat = std::sin(lla.latitude);\n        const auto cosLat = std::cos(lla.latitude);\n        const auto sinLon = std::sin(lla.longitude);\n        const auto cosLon = std::cos(lla.longitude);\n\n        const auto xHat = Vec3{ -cosLon * sinLat, -sinLon * sinLat, cosLat };\n        const auto yHat = Vec3{ -sinLon, cosLon, 0. };\n        const auto zHat = Vec3{ -cosLon * cosLat, -sinLon * cosLat, -sinLat };\n\n        return { xHat, yHat, zHat };\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/NEDUnitVecsInECEF.hpp", "function_name": "NEDUnitVecsInECEF", "index": 1777, "label": 0}
{"input": "EIGEN_DEVICE_FUNC constexpr IndexList(FirstType& first, OtherTypes... other) : internal::IndexTuple<FirstType, OtherTypes...>(first, other...) { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "first", "index": 1778, "label": 0}
{"input": "void bug_127()\n{\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  Matrix<float,1,Dynamic,RowMajor,1,5> a(1,4);\n  Matrix<float,Dynamic,Dynamic,ColMajor,5,1> b(4,0);\n  a*b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_extra.cpp", "function_name": "bug_127", "index": 1779, "label": 0}
{"input": "static void test_array_reverse_and_reduce()\n{\n  array<int, 6> a{{4, 8, 15, 16, 23, 42}};\n  array<int, 6> b{{42, 23, 16, 15, 8, 4}};\n\n  \n  \n  VERIFY((array_reverse(a) == b));\n  VERIFY((array_reverse(b) == a));\n  VERIFY_IS_EQUAL((array_sum(a)), 108);\n  VERIFY_IS_EQUAL((array_sum(b)), 108);\n  VERIFY_IS_EQUAL((array_prod(a)), 7418880);\n  VERIFY_IS_EQUAL((array_prod(b)), 7418880);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_meta.cpp", "function_name": "test_array_reverse_and_reduce", "index": 1780, "label": 0}
{"input": "EIGEN_DONT_INLINE\nvoid dont_over_optimize(T& x) { volatile typename T::Scalar tmp = x(0); x(0) = tmp; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/geo_transformations.cpp", "function_name": "dont_over_optimize", "index": 1781, "label": 0}
{"input": "inline typename MatrixBase<Derived>::RealScalar\nMatrixBase<Derived>::operatorNorm() const\n{\n  using std::sqrt;\n  typename Derived::PlainObject m_eval(derived());\n  \n  \n  return sqrt((m_eval*m_eval.adjoint())\n                 .eval()\n\t\t .template selfadjointView<Lower>()\n\t\t .eigenvalues()\n\t\t .maxCoeff()\n\t\t );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h", "function_name": "MatrixBase<Derived>::operatorNorm", "index": 1782, "label": 0}
{"input": "void TestTiny() {\n  if (first_target == 0) first_target = HWY_TARGET;\n  if (HWY_TARGET != first_target) return;\n\n  for (size_t max_packages : {1, 2}) {\n    const size_t max_threads = 0;  \n    NestedPools pools(max_threads, Tristate::kDefault,\n                      BoundedSlice(0, max_packages));\n#if GEMMA_DISABLE_TOPOLOGY\n    if (max_packages == 2) break;  \n#else\n    \n    if (pools.Topology().FullTopology().packages.size() < max_packages) break;\n#endif\n    fprintf(stderr, \"TestTiny %zu: %s %s\\n\", max_packages,\n            pools.TopologyString(), pools.PinString());\n\n    Tristate use_spinning = Tristate::kDefault;\n    pools.MaybeStartSpinning(use_spinning);\n    Allocator::Init(pools.Topology());\n    MatMulEnv env(pools);\n\n    for (size_t batch_size = 1; batch_size <= 3 * kRegRows; ++batch_size) {\n      TestMatMul<F32, F32>(batch_size, 256, 256, false, env);\n    }\n    pools.MaybeStopSpinning(use_spinning);\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "ops/matmul_test.cc", "function_name": "TestTiny", "index": 1783, "label": 0}
{"input": "void LepusComponent::HandleJSCallbackLepus(const int64_t callback_id,\n                                           const lepus::Value& data) {\n  if (tasm_ == nullptr) {\n    LOGE(\"LepusComponent::HandleJSCallbackLepus failed since tasm is null.\");\n    return;\n  }\n  auto task = task_handler_.lock();\n  if (task == nullptr) {\n    LOGE(\n        \"LepusComponent::HandleJSCallbackLepus failed since task_handler_ is \"\n        \"null.\");\n    return;\n  }\n  task->InvokeWithTaskID(\n      callback_id,\n      ValueConverter::ConvertLepusValueToNapiValue(NapiEnv(), data), tasm_);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/renderer/worklet/lepus_component.cc", "function_name": "LepusComponent::HandleJSCallbackLepus", "index": 1784, "label": 0}
{"input": "void test_cxx11_tensor_sycl() {\n  cl::sycl::gpu_selector s;\n  Eigen::SyclDevice sycl_device(s);\n  CALL_SUBTEST(test_sycl_cpu(sycl_device));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_sycl.cpp", "function_name": "test_cxx11_tensor_sycl", "index": 1785, "label": 0}
{"input": "explicit PardisoLU(const MatrixType& matrix)\n      : Base()\n    {\n      pardisoInit(Base::ScalarIsComplex ? 13 : 11);\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PardisoSupport/PardisoSupport.h", "function_name": "PardisoLU", "index": 1786, "label": 0}
{"input": "static HWY_INLINE void MaybeAddStore(D4 d4, V4 sum, const RowPtrD& partial,\n                                       const size_t row_c, const size_t col_c) {\n    if constexpr (kRow < kRowsAC) {\n      double* HWY_RESTRICT pos = partial.Row(row_c + kRow) + col_c;\n      if constexpr (hwy::IsSame<Tag, MMSetPartial>()) {\n        hn::Store(sum, d4, pos);\n      } else {\n        static_assert(hwy::IsSame<Tag, MMAddPartial>());\n        const V4 prev = hn::Load(d4, pos);\n        hn::Store(hn::Add(sum, prev), d4, pos);\n      }\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "MaybeAddStore", "index": 1787, "label": 0}
{"input": "inline int umfpack_get_numeric(int Lp[], int Lj[], std::complex<double> Lx[], int Up[], int Ui[], std::complex<double> Ux[],\n                               int P[], int Q[], std::complex<double> Dx[], int *do_recip, double Rs[], void *Numeric)\n{\n  double& lx0_real = numext::real_ref(Lx[0]);\n  double& ux0_real = numext::real_ref(Ux[0]);\n  double& dx0_real = numext::real_ref(Dx[0]);\n  return umfpack_zi_get_numeric(Lp,Lj,Lx?&lx0_real:0,0,Up,Ui,Ux?&ux0_real:0,0,P,Q,\n                                Dx?&dx0_real:0,0,do_recip,Rs,Numeric);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_get_numeric", "index": 1788, "label": 0}
{"input": "void OffscreenCanvasRenderingContext2D::set_shadow_blur(float blur_radius)\n{\n    \n    \n    if (blur_radius < 0 || isinf(blur_radius) || isnan(blur_radius))\n        return;\n\n    drawing_state().shadow_blur = blur_radius;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::set_shadow_blur", "index": 1789, "label": 0}
{"input": "void test_metis_T()\n{\n  SparseLU<SparseMatrix<T, ColMajor>, MetisOrdering<int> > sparselu_metis;\n  \n  check_sparse_square_solving(sparselu_metis); \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/metis_support.cpp", "function_name": "test_metis_T", "index": 1790, "label": 0}
{"input": "inline sparse_matrix_block_impl(SparseMatrixType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)\n      : m_matrix(xpr), m_outerStart(convert_index(IsRowMajor ? startRow : startCol)), m_outerSize(convert_index(IsRowMajor ? blockRows : blockCols))\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseBlock.h", "function_name": "sparse_matrix_block_impl", "index": 1791, "label": 0}
{"input": "void coo_tocsr(const int n_row,\n               const int n_col,\n               const int nnz,\n               const Coordinates Aij,\n               const Values Ax,\n                     int Bp[],\n                     int Bj[],\n                     T Bx[])\n{\n    \n    std::fill(Bp, Bp + n_row, 0);\n\n    for (int n = 0; n < nnz; n++){\n        Bp[Aij[n].x()]++;\n    }\n\n    \n    for(int i = 0, cumsum = 0; i < n_row; i++){\n        int temp = Bp[i];\n        Bp[i] = cumsum;\n        cumsum += temp;\n    }\n    Bp[n_row] = nnz;\n\n    \n    for(int n = 0; n < nnz; n++){\n        int row  = Aij[n].x();\n        int dest = Bp[row];\n\n        Bj[dest] = Aij[n].y();\n        Bx[dest] = Ax[n];\n\n        Bp[row]++;\n    }\n\n    for(int i = 0, last = 0; i <= n_row; i++){\n        int temp = Bp[i];\n        Bp[i]  = last;\n        last   = temp;\n    }\n\n    \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/sparse_setter.cpp", "function_name": "coo_tocsr", "index": 1792, "label": 0}
{"input": "bool operator<(const DistIndex dist_index) const\n        {\n            return (dist_ < dist_index.dist_) || ((dist_ == dist_index.dist_) && index_ < dist_index.index_);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "operator<", "index": 1793, "label": 0}
{"input": "__global__ void ReductionInitFullReduxKernelHalfFloat(Reducer reducer, const Self input, Index num_coeffs, half2* scratch) {\n  eigen_assert(blockDim.x == 1);\n  eigen_assert(gridDim.x == 1);\n  if (num_coeffs % 2 != 0) {\n    half last = input.m_impl.coeff(num_coeffs-1);\n    *scratch = __halves2half2(last, reducer.initialize());\n  } else {\n    *scratch = reducer.template initializePacket<half2>();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "ReductionInitFullReduxKernelHalfFloat", "index": 1794, "label": 0}
{"input": "ArkUI_NodeAttributeType UITextArea::GetPlaceholderTextType() const {\n  return NODE_TEXT_AREA_PLACEHOLDER;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_textarea.cc", "function_name": "UITextArea::GetPlaceholderTextType", "index": 1795, "label": 0}
{"input": "inline Quat<T> power(const Quat<T> &p, const Quat<T> &q, QuatAssumeType assumeUnit)\n{\n    return p.power(q, assumeUnit);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "power", "index": 1796, "label": 0}
{"input": "DualQuat<T> DualQuat<T>::createFromQuat(const Quat<T> &realPart, const Quat<T> &dualPart)\n{\n    T w = realPart.w;\n    T x = realPart.x;\n    T y = realPart.y;\n    T z = realPart.z;\n    T w_ = dualPart.w;\n    T x_ = dualPart.x;\n    T y_ = dualPart.y;\n    T z_ = dualPart.z;\n    return DualQuat<T>(w, x, y, z, w_, x_, y_, z_);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::createFromQuat", "index": 1797, "label": 0}
{"input": "explicit SourceExpressionParser(StringView input)\n        : m_input(input)\n        , m_state({\n              .lexer = GenericLexer { input },\n              .parse_result = {},\n          })\n    {\n    }", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "38f80913a44ac1495ddb9c4eb4716664c9f33129", "file_path": "Libraries/LibWeb/ContentSecurityPolicy/Directives/SourceExpression.cpp", "function_name": "SourceExpressionParser", "index": 1798, "label": 0}
{"input": "void bug_1014()\n{\n  Matrix3d m;\n  m <<        0.11111111111111114658, 0, 0,\n       0,     0.11111111111111109107, 0,\n       0, 0,  0.11111111111111107719;\n  selfadjointeigensolver_essential_check(m);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigensolver_selfadjoint.cpp", "function_name": "bug_1014", "index": 1799, "label": 0}
{"input": "void evalTo(MatrixBase<DenseDerived>& dst) const {\n        dst.setZero();\n        for (Index i = 0; i < rows(); i++)\n            for (Index j = 0; j < rows(); j++)\n                dst(i, j) = derived().coeff(i, j);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h", "function_name": "evalTo", "index": 1800, "label": 0}
{"input": "[[nodiscard]] const_reference at(index_type inIndex) const\n        {\n            \n            \n            if (std::abs(inIndex) > static_cast<int64>(size_ - 1))\n            {\n                std::string errStr = \"Input index \" + utils::num2str(inIndex);\n                errStr += \" is out of bounds for array of size \" + utils::num2str(size_) + \".\";\n                THROW_INVALID_ARGUMENT_ERROR(errStr);\n            }\n\n            return operator[](inIndex); \n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inIndex", "index": 1801, "label": 0}
{"input": "static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){\n    for (int j=0;j<N;j++){\n      for (int i=0;i<N;i++){\n        cible[i+N*j] = source[i+N*j];\n      }\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/libs/BLAS/c_interface_base.h", "function_name": "N", "index": 1802, "label": 0}
{"input": "void lpNorm(const VectorType& v)\n{\n  using std::sqrt;\n  typedef typename VectorType::RealScalar RealScalar;\n  VectorType u = VectorType::Random(v.size());\n\n  if(v.size()==0)\n  {\n    VERIFY_IS_APPROX(u.template lpNorm<Infinity>(), RealScalar(0));\n    VERIFY_IS_APPROX(u.template lpNorm<1>(), RealScalar(0));\n    VERIFY_IS_APPROX(u.template lpNorm<2>(), RealScalar(0));\n    VERIFY_IS_APPROX(u.template lpNorm<5>(), RealScalar(0));\n  }\n  else\n  {\n    VERIFY_IS_APPROX(u.template lpNorm<Infinity>(), u.cwiseAbs().maxCoeff());\n  }\n\n  VERIFY_IS_APPROX(u.template lpNorm<1>(), u.cwiseAbs().sum());\n  VERIFY_IS_APPROX(u.template lpNorm<2>(), sqrt(u.array().abs().square().sum()));\n  VERIFY_IS_APPROX(numext::pow(u.template lpNorm<5>(), typename VectorType::RealScalar(5)), u.array().abs().pow(5).sum());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/array_for_matrix.cpp", "function_name": "lpNorm", "index": 1803, "label": 0}
{"input": "inline bool bitScanForward(uint64_t v, uint32_t *outFirstSetIndex)\n{\n    int i = __builtin_ffsll(v);\n    *outFirstSetIndex = i - 1;\n    return i != 0;\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "cd6fcb33bdcaff37c8c9d2083c7951e1d73ae9da", "file_path": "XenonUtils/xex_patcher.cpp", "function_name": "bitScanForward", "index": 1804, "label": 0}
{"input": "inline ssize_t select_read(socket_t sock, time_t sec, time_t usec) {\n#ifdef CPPHTTPLIB_USE_POLL\n  struct pollfd pfd_read;\n  pfd_read.fd = sock;\n  pfd_read.events = POLLIN;\n\n  auto timeout = static_cast<int>(sec * 1000 + usec / 1000);\n\n  return handle_EINTR([&]() { return poll(&pfd_read, 1, timeout); });\n#else\n#ifndef _WIN32\n  if (sock >= FD_SETSIZE) { return 1; }\n#endif\n\n  fd_set fds;\n  FD_ZERO(&fds);\n  FD_SET(sock, &fds);\n\n  timeval tv;\n  tv.tv_sec = static_cast<long>(sec);\n  tv.tv_usec = static_cast<decltype(tv.tv_usec)>(usec);\n\n  return handle_EINTR([&]() {\n    return select(static_cast<int>(sock + 1), &fds, nullptr, nullptr, &tv);\n  });\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "select_read", "index": 1805, "label": 0}
{"input": "TensorOpCost\n  costPerCoeff(bool vectorized) const {\n    const double compute_cost =\n        10 * TensorOpCost::DivCost<Index>() + 21 * TensorOpCost::MulCost<Index>() +\n        8 * TensorOpCost::AddCost<Index>();\n    return TensorOpCost(0, 0, compute_cost, vectorized, PacketSize);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorVolumePatch.h", "function_name": "vectorized", "index": 1806, "label": 0}
{"input": "void TemplateAssembler::OnRuntimeGC(\n    std::unordered_map<std::string, std::string> mem_info) {\n  delegate_.OnRuntimeGC(std::move(mem_info));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/renderer/template_assembler.cc", "function_name": "TemplateAssembler::OnRuntimeGC", "index": 1807, "label": 0}
{"input": "~Ref() {\n      if(m_hasCopy) {\n        TPlainObjectType* obj = reinterpret_cast<TPlainObjectType*>(m_object_bytes);\n        obj->~TPlainObjectType();\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseRef.h", "function_name": "~Ref", "index": 1808, "label": 0}
{"input": "inline void v_pack_store(float16_t* ptr, const v_float32x4& v)\n{\n    double v_[4];\n    wasm_v128_store(v_, v.val);\n    ptr[0] = float16_t(v_[0]);\n    ptr[1] = float16_t(v_[1]);\n    ptr[2] = float16_t(v_[2]);\n    ptr[3] = float16_t(v_[3]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_pack_store", "index": 1809, "label": 0}
{"input": "std::unique_ptr<NapiRuntimeProxy> NapiRuntimeProxyJSVMFactoryImpl::Create(\n    std::shared_ptr<Runtime> runtime, runtime::TemplateDelegate* delegate) {\n  LOGI(\"Creating napi proxy jsvm\");\n  auto jsvm_runtime = std::static_pointer_cast<JSVMRuntime>(runtime);\n  auto jsvm_context = std::static_pointer_cast<JSVMContextWrapper>(\n      jsvm_runtime->getSharedContext());\n  auto proxy_jsvm = NapiRuntimeProxyJSVM::Create(jsvm_context, delegate);\n  proxy_jsvm->SetJSRuntime(runtime);\n  return proxy_jsvm;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/bindings/napi/napi_runtime_proxy_jsvm.cc", "function_name": "NapiRuntimeProxyJSVMFactoryImpl::Create", "index": 1810, "label": 0}
{"input": "inline void finalize() {\n        if (IsRowMajor) {\n            if (rows() > cols())\n                m_data.resize(cols(), cols(), rows(), m_colStartIndex[cols()] + 1, m_rowStartIndex[rows()] + 1);\n            else\n                m_data.resize(rows(), cols(), rows(), m_colStartIndex[cols()] + 1, m_rowStartIndex[rows()] + 1);\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        } else {\n            if (rows() > cols())\n                m_data.resize(cols(), rows(), cols(), m_rowStartIndex[cols()] + 1, m_colStartIndex[cols()] + 1);\n            else\n                m_data.resize(rows(), rows(), cols(), m_rowStartIndex[rows()] + 1, m_colStartIndex[rows()] + 1);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "finalize", "index": 1811, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const ConstBlockXpr bottomRightCorner(Index cRows, Index cCols) const\n{\n  return ConstBlockXpr(derived(), rows() - cRows, cols() - cCols, cRows, cCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstBlockXpr bottomRightCorner", "index": 1812, "label": 0}
{"input": "static void call(Inputs&&... ins, Outputs&&... outs)\n        {\n            \n            \n            Impl::run(std::forward<Inputs>(ins)..., outs...);\n\n            postprocess_ocl(outs...);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/ocl/goclkernel.hpp", "function_name": "call", "index": 1813, "label": 0}
{"input": "void testNistBennett5(void)\n{\n  const int  n=3;\n  int info;\n\n  VectorXd x(n);\n\n  \n  x<< -2000., 50., 0.8;\n  \n  Bennett5_functor functor;\n  LevenbergMarquardt<Bennett5_functor> lm(functor);\n  lm.setMaxfev(1000);\n  info = lm.minimize(x);\n\n  \n  VERIFY_IS_EQUAL(info, 1);\n  VERIFY_IS_EQUAL(lm.nfev(), 758);\n  VERIFY_IS_EQUAL(lm.njev(), 744);\n  \n  VERIFY_IS_APPROX(lm.fvec().squaredNorm(), 5.2404744073E-04);\n  \n  VERIFY_IS_APPROX(x[0], -2.5235058043E+03);\n  VERIFY_IS_APPROX(x[1], 4.6736564644E+01);\n  VERIFY_IS_APPROX(x[2], 9.3218483193E-01);\n  \n  x<< -1500., 45., 0.85;\n  \n  lm.resetParameters();\n  info = lm.minimize(x);\n\n  \n  VERIFY_IS_EQUAL(info, 1);\n  VERIFY_IS_EQUAL(lm.nfev(), 203);\n  VERIFY_IS_EQUAL(lm.njev(), 192);\n  \n  VERIFY_IS_APPROX(lm.fvec().squaredNorm(), 5.2404744073E-04);\n  \n  VERIFY_IS_APPROX(x[0], -2523.3007865); \n  VERIFY_IS_APPROX(x[1], 46.735705771); \n  VERIFY_IS_APPROX(x[2], 0.93219881891); \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/levenberg_marquardt.cpp", "function_name": "testNistBennett5", "index": 1814, "label": 0}
{"input": "static NCNN_FORCEINLINE int NCNN_XADD(int* addr, int delta)\n{\n    int tmp = *addr;\n    *addr += delta;\n    return tmp;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/allocator.h", "function_name": "NCNN_XADD", "index": 1815, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseUnaryView<CustomViewOp, const Derived>\nunaryViewExpr(const CustomViewOp& func = CustomViewOp()) const\n{\n  return CwiseUnaryView<CustomViewOp, const Derived>(derived(), func);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h", "function_name": "CwiseUnaryView<CustomViewOp, const Derived>\nunaryViewExpr", "index": 1816, "label": 0}
{"input": "inline static vuint32mf2_t vmul(const vuint32mf2_t & op1, uint32_t op2, size_t vl)\n{\n    return vmul_vx_u32mf2(op1, op2, vl);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv_compat_overloaded.hpp", "function_name": "vmul", "index": 1817, "label": 0}
{"input": "EIGEN_DEVICE_FUNC bool isinf_msvc_helper(T x)\n{\n  return _fpclass(x)==_FPCLASS_NINF || _fpclass(x)==_FPCLASS_PINF;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/MathFunctions.h", "function_name": "isinf_msvc_helper", "index": 1818, "label": 0}
{"input": "void test_polynomialutils()\n{\n  for(int i = 0; i < g_repeat; i++)\n  {\n    realRoots_to_monicPolynomial_scalar<double>();\n    realRoots_to_monicPolynomial_scalar<float>();\n    CauchyBounds_scalar<double>();\n    CauchyBounds_scalar<float>();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/polynomialutils.cpp", "function_name": "test_polynomialutils", "index": 1819, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline _Scalar ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersectionParameter(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane) const\n{\n  return -(hyperplane.offset()+hyperplane.normal().dot(origin()))\n          / hyperplane.normal().dot(direction());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/ParametrizedLine.h", "function_name": "ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersectionParameter", "index": 1820, "label": 0}
{"input": "inline OrtLoggingLevel Logger::GetLoggingSeverityLevel() const noexcept {\n  return cached_severity_level_;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Logger::GetLoggingSeverityLevel", "index": 1821, "label": 0}
{"input": "EIGEN_DONT_INLINE\nbool isApproxAbs(const Scalar& a, const Scalar& b, const typename NumTraits<Scalar>::Real& refvalue)\n{\n  return internal::isMuchSmallerThan(a-b, refvalue);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/packetmath.cpp", "function_name": "isApproxAbs", "index": 1822, "label": 0}
{"input": "inline void palign(PacketType& first, const PacketType& second)\n{\n  palign_impl<Offset,PacketType>::run(first,second);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "palign", "index": 1823, "label": 0}
{"input": "static void addTo(Dest& dst, const ActualLhs& lhs, const Rhs& rhs, typename enable_if<is_same<typename evaluator_traits<Dest>::Shape,DenseShape>::value,int*>::type* = 0)\n  {\n    typedef typename nested_eval<ActualLhs,Dynamic>::type LhsNested;\n    typedef typename nested_eval<Rhs,Dynamic>::type RhsNested;\n    LhsNested lhsNested(lhs);\n    RhsNested rhsNested(rhs);\n    internal::sparse_sparse_to_dense_product_selector<typename remove_all<LhsNested>::type,\n                                                      typename remove_all<RhsNested>::type, Dest>::run(lhsNested,rhsNested,dst);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseProduct.h", "function_name": "addTo", "index": 1824, "label": 0}
{"input": "ExtObject(int _id, cv::Rect _location, ObjectStatus _status)\n                :id(_id), location(_location), status(_status)\n            {\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/objdetect/detection_based_tracker.hpp", "function_name": "ExtObject", "index": 1825, "label": 0}
{"input": "const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::sin() const\n{\n  eigen_assert(rows() == cols());\n  typedef typename internal::stem_function<Scalar>::ComplexScalar ComplexScalar;\n  return MatrixFunctionReturnValue<Derived>(derived(), internal::stem_function_sin<ComplexScalar>);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "MatrixBase<Derived>::sin", "index": 1826, "label": 0}
{"input": "inline float32x4_t cv_vrsqrtq_f32(float32x4_t val)\n{\n    float32x4_t e = vrsqrteq_f32(val);\n    e = vmulq_f32(vrsqrtsq_f32(vmulq_f32(e, e), val), e);\n    e = vmulq_f32(vrsqrtsq_f32(vmulq_f32(e, e), val), e);\n    return e;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/neon_utils.hpp", "function_name": "cv_vrsqrtq_f32", "index": 1827, "label": 0}
{"input": "inline void ClientImpl::set_write_timeout(time_t sec, time_t usec) {\n  write_timeout_sec_ = sec;\n  write_timeout_usec_ = usec;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_write_timeout", "index": 1828, "label": 0}
{"input": "void forward_jacobian(const Func& f)\n{\n    typename Func::InputType x = Func::InputType::Random(f.inputs());\n    typename Func::ValueType y(f.values()), yref(f.values());\n    typename Func::JacobianType j(f.values(),f.inputs()), jref(f.values(),f.inputs());\n\n    jref.setZero();\n    yref.setZero();\n    f(x,&yref,&jref);\n\n\n\n    j.setZero();\n    y.setZero();\n    AutoDiffJacobian<Func> autoj(f);\n    autoj(x, &y, &j);\n\n\n\n    VERIFY_IS_APPROX(y, yref);\n    VERIFY_IS_APPROX(j, jref);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "forward_jacobian", "index": 1829, "label": 0}
{"input": "NapiRuntimeProxyJSVM::NapiRuntimeProxyJSVM(\n    const std::shared_ptr<JSVMContextWrapper>& context,\n    runtime::TemplateDelegate* delegate)\n    : NapiRuntimeProxy(delegate), jsvm_env_(context->getEnv()) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/bindings/napi/napi_runtime_proxy_jsvm.cc", "function_name": "NapiRuntimeProxyJSVM::NapiRuntimeProxyJSVM", "index": 1830, "label": 0}
{"input": "static EIGEN_STRONG_INLINE Index unblocked(MatrixType& mat)\n  {\n    Transpose<MatrixType> matt(mat);\n    return llt_inplace<Scalar, Lower>::unblocked(matt);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "unblocked", "index": 1831, "label": 0}
{"input": "inline bool isLittleEndian() noexcept\n    {\n        union\n        {\n            uint32              i{};\n            std::array<char, 4> c;\n        } fourBytes = { 0x01020304 }; \n\n        \n        return fourBytes.c[0] == 4;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/Endian.hpp", "function_name": "isLittleEndian", "index": 1832, "label": 0}
{"input": "constexpr inline array<decltype(Op::run(A())),N> h_array_apply(array<A, N> a, numeric_list<int, n...>)\n{\n  return array<decltype(Op::run(A())),N>{{ Op::run(array_get<n>(a))... }};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/CXX11Meta.h", "function_name": "h_array_apply", "index": 1833, "label": 0}
{"input": "inline Type2Vec_Traits<double>::vec_type v_setall<double>(const double& a) { return v_setall_f64(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/simd_utils.impl.hpp", "function_name": "v_setall", "index": 1834, "label": 0}
{"input": "inline bool Server::read_content_with_content_receiver(\n    Stream &strm, Request &req, Response &res, ContentReceiver receiver,\n    MultipartContentHeader multipart_header,\n    ContentReceiver multipart_receiver) {\n  return read_content_core(strm, req, res, std::move(receiver),\n                           std::move(multipart_header),\n                           std::move(multipart_receiver));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::read_content_with_content_receiver", "index": 1835, "label": 0}
{"input": "void HarmonyGlobalHandler::OpenCard(const std::string& url) {\n  auto ui_task_runner =\n      fml::MessageLoop::EnsureInitializedForCurrentThread(loop_)\n          .GetTaskRunner();\n  ui_task_runner->PostTask([weak_ptr = weak_from_this(), url]() {\n    napi_value js_this;\n    auto handler = weak_ptr.lock();\n    if (!handler) {\n      return;\n    }\n    napi_get_reference_value(handler->env_, handler->js_this_ref_, &js_this);\n    napi_value onOpenCard;\n    auto status = napi_get_named_property(handler->env_, js_this, \"onOpenCard\",\n                                          &onOpenCard);\n    napi_value args[1];\n    napi_create_string_utf8(handler->env_, url.c_str(), NAPI_AUTO_LENGTH,\n                            &args[0]);\n    napi_value result;\n    status = napi_call_function(handler->env_, js_this, onOpenCard, 1, args,\n                                &result);\n  });\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/harmony_global_handler.cc", "function_name": "HarmonyGlobalHandler::OpenCard", "index": 1836, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half erfc(const Eigen::half& a) {\n  return Eigen::half(Eigen::numext::erfc(static_cast<float>(a)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half erfc", "index": 1837, "label": 0}
{"input": "void MandelbrotThread::run()\n{\n  setTerminationEnabled(true);\n  double resolution = widget->xradius*2/widget->width();\n  max_iter = 128;\n  if(resolution < 1e-4f) max_iter += 128 * ( - 4 - std::log10(resolution));\n  int img_width = widget->width()/widget->draft;\n  int img_height = widget->height()/widget->draft;\n  single_precision = resolution > 1e-7f;\n\n  if(single_precision)\n    render<float>(img_width, img_height);\n  else\n    render<double>(img_width, img_height);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mandelbrot/mandelbrot.cpp", "function_name": "MandelbrotThread::run", "index": 1838, "label": 0}
{"input": "inline void v_load_deinterleave(const uint64 *ptr, v_uint64x2& a,\n                                v_uint64x2& b, v_uint64x2& c, v_uint64x2& d)\n{\n    v128_t t0 = wasm_v128_load(ptr);     \n    v128_t t1 = wasm_v128_load(ptr + 2); \n    v128_t t2 = wasm_v128_load(ptr + 4); \n    v128_t t3 = wasm_v128_load(ptr + 6); \n\n    a.val = wasm_unpacklo_i64x2(t0, t2);\n    b.val = wasm_unpackhi_i64x2(t0, t2);\n    c.val = wasm_unpacklo_i64x2(t1, t3);\n    d.val = wasm_unpackhi_i64x2(t1, t3);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_load_deinterleave", "index": 1839, "label": 0}
{"input": "HybridNonLinearSolverSpace::Status\nHybridNonLinearSolver<FunctorType,Scalar>::hybrd1(\n        FVectorType  &x,\n        const Scalar tol\n        )\n{\n    n = x.size();\n\n    \n    if (n <= 0 || tol < 0.)\n        return HybridNonLinearSolverSpace::ImproperInputParameters;\n\n    resetParameters();\n    parameters.maxfev = 200*(n+1);\n    parameters.xtol = tol;\n\n    diag.setConstant(n, 1.);\n    useExternalScaling = true;\n    return solveNumericalDiff(x);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h", "function_name": "HybridNonLinearSolver<FunctorType,Scalar>::hybrd1", "index": 1840, "label": 0}
{"input": "NdArray<double> wahbasProblem(const NdArray<dtype>& wk, const NdArray<dtype>& vk)\n    {\n        const auto ak = ones<dtype>({ 1, wk.shape().rows });\n        return wahbasProblem(wk, vk, ak);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Rotations/wahbasProblem.hpp", "function_name": "wahbasProblem", "index": 1841, "label": 0}
{"input": "void JsCacheManagerFacade::PostCacheGenerationTask(\n    const std::string& template_url,\n    std::unordered_map<std::string, JsContent> js_contents,\n    JSRuntimeType engine_type,\n    std::unique_ptr<BytecodeGenerateCallback> callback) {\n  LOGI(\"JsCacheManagerFacade::PostCacheGenerationTask template_url: \"\n       << template_url << \" engine_type: \" << static_cast<int>(engine_type));\n  switch (engine_type) {\n    case JSRuntimeType::v8:\n      LOGI(\"PostCacheGenerationTask for V8 is not supported\");\n      return;\n    case JSRuntimeType::jsc:\n      LOGI(\"PostCacheGenerationTask for JSC is not supported\");\n      return;\n    case JSRuntimeType::quickjs: {\n      PostCacheGenerationTaskQuickJs(template_url, std::move(js_contents),\n                                     std::move(callback));\n      return;\n    }\n    case JSRuntimeType::jsvm:\n      LOGI(\"PostCacheGenerationTask for JSVM is not supported\");\n      return;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/js_cache_manager_facade.cc", "function_name": "JsCacheManagerFacade::PostCacheGenerationTask", "index": 1842, "label": 0}
{"input": "void Otto::TiptoeSwing(float steps, int period, int height) {\n    \n    \n    int A[SERVO_COUNT] = {0, 0, height, height, 0, 0};\n    int O[SERVO_COUNT] = {0, 0, height, -height, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    double phase_diff[SERVO_COUNT] = {0, 0, 0, 0, 0, 0};\n\n    \n    Execute(A, O, period, phase_diff, steps);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::TiptoeSwing", "index": 1843, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE Array(const T0& val0, const T1& val1)\n    {\n      Base::_check_template_params();\n      this->template _init2<T0,T1>(val0, val1);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Array.h", "function_name": "EIGEN_STRONG_INLINE Array", "index": 1844, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline RowsBlockXpr bottomRows(Index n)\n{\n  return RowsBlockXpr(derived(), rows() - n, 0, n, cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "RowsBlockXpr bottomRows", "index": 1845, "label": 0}
{"input": "inline const mpreal erfc    (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(erfc   );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "erfc", "index": 1846, "label": 0}
{"input": "static void test_gaussian()\n{\n  int rows = 32;\n  int cols = 48;\n  array<float, 2> means;\n  means[0] = rows / 2.0f;\n  means[1] = cols / 2.0f;\n  array<float, 2> std_devs;\n  std_devs[0] = 3.14f;\n  std_devs[1] = 2.7f;\n  internal::GaussianGenerator<float, Eigen::DenseIndex, 2> gaussian_gen(means, std_devs);\n\n  Tensor<float, 2> matrix(rows, cols);\n  Tensor<float, 2> result = matrix.generate(gaussian_gen);\n\n  for (int i = 0; i < rows; ++i) {\n    for (int j = 0; j < cols; ++j) {\n      float g_rows = powf(rows/2.0f - i, 2) / (3.14f * 3.14f) * 0.5f;\n      float g_cols = powf(cols/2.0f - j, 2) / (2.7f * 2.7f) * 0.5f;\n      float gaussian = expf(-g_rows - g_cols);\n      VERIFY_IS_EQUAL(result(i, j), gaussian);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_generator.cpp", "function_name": "test_gaussian", "index": 1847, "label": 0}
{"input": "int get_random_size()\n{\n  const int factor = NumTraits<T>::ReadCost;\n  const int max_test_size = EIGEN_TEST_MAX_SIZE>2*factor ? EIGEN_TEST_MAX_SIZE/factor : EIGEN_TEST_MAX_SIZE;\n  return internal::random<int>(1,max_test_size);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_trmm.cpp", "function_name": "get_random_size", "index": 1848, "label": 0}
{"input": "int Mobunet::initModel(const char* binfn,const char* paramfn,const char* mskfn){\n    unet.clear();\n    \n    \n    unet.opt = ncnn::Option();\n    \n    unet.opt.num_threads =1;\n    \n    \n    unet.load_param(paramfn);\n    unet.load_model(binfn);\n    char* wbuf = NULL;\n    dumpfile((char*)mskfn,&wbuf);\n    mat_weights = new JMat(160,160,(uint8_t*)wbuf,1);\n    mat_weights->forceref(0);\n    \n    \n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/munet.cpp", "function_name": "Mobunet::initModel", "index": 1849, "label": 0}
{"input": "static void test_innermost_first_dims() {\n  Tensor<float, 4, DataLayout> in(72, 53, 97, 113);\n  Tensor<float, 2, DataLayout> out(72, 53);\n  in.setRandom();\n\n\n#if !EIGEN_HAS_CONSTEXPR\n  array<int, 2> reduction_axis;\n  reduction_axis[0] = 2;\n  reduction_axis[1] = 3;\n#else\n  \n  Eigen::IndexList<Eigen::type2index<2>, Eigen::type2index<3>> reduction_axis;\n#endif\n\n  out = in.maximum(reduction_axis);\n\n  for (int i = 0; i < 72; ++i) {\n    for (int j = 0; j < 53; ++j) {\n      float expected = -1e10f;\n      for (int k = 0; k < 97; ++k) {\n        for (int l = 0; l < 113; ++l) {\n          expected = (std::max)(expected, in(i, j, k, l));\n        }\n      }\n      VERIFY_IS_APPROX(out(i, j), expected);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_reduction.cpp", "function_name": "test_innermost_first_dims", "index": 1850, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vsetlt4(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vset4.u32.u32.lt %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int c;\n        asm(\"not.b32 %0, %0;\" : \"+r\"(a));\n        c = vavg4(a, b);    \n        c = c & 0x80808080; \n        r = c >> 7;         \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vsetlt4", "index": 1851, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    TensorReshapingOp<const NewDimensions, Derived>\n    reshape(const NewDimensions& newDimensions) {\n      return TensorReshapingOp<const NewDimensions, Derived>(derived(), newDimensions);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    TensorReshapingOp<const NewDimensions, Derived>\n    reshape", "index": 1852, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::result_of<Func(Scalar,Scalar)>::type\n    redux(const Func& func) const\n    {\n      return func(m_matrix.redux(func), Scalar(1));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "EIGEN_STRONG_INLINE typename internal::result_of<Func(Scalar,Scalar)>::type\n    redux", "index": 1853, "label": 0}
{"input": "Barrier(unsigned int count) : state_(count << 1), notified_(false) {\n    eigen_assert(((count << 1) >> 1) == count);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h", "function_name": "Barrier", "index": 1854, "label": 0}
{"input": "inline bool isIntAngleType(QuatEnum::EulerAnglesType eulerAnglesType)\n{\n    return eulerAnglesType < QuatEnum::EXT_XYZ;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "isIntAngleType", "index": 1855, "label": 0}
{"input": "bool check_is_convertible(const From&, const To&)\n{\n  return internal::is_convertible<From,To>::value;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/meta.cpp", "function_name": "check_is_convertible", "index": 1856, "label": 0}
{"input": "int wav_read_data(void* obj, unsigned char* data, unsigned int length) {\n\tstruct wav_reader* wr = (struct wav_reader*) obj;\n\tint n;\n\tif (wr->wav == NULL)\n\t\treturn -1;\n\tif (length > wr->data_left && !wr->streamed) {\n\t\tint loop = 1;\n\t\tif (loop) {\n\t\t\tfseek(wr->wav, wr->data_pos, SEEK_SET);\n\t\t\twr->data_left = wr->data_length;\n\t\t}\n\t\tlength = wr->data_left;\n\t}\n\tn = fread(data, 1, length, wr->wav);\n\twr->data_left -= length;\n\treturn n;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wavreader.cpp", "function_name": "wav_read_data", "index": 1857, "label": 0}
{"input": "static void test_0d()\n{\n  Tensor<int, 0> scalar1;\n  Tensor<int, 0, RowMajor> scalar2;\n  Tensor<int, 0> scalar3;\n  Tensor<int, 0, RowMajor> scalar4;\n\n  scalar3.resize();\n  scalar4.resize();\n\n  scalar1() = 7;\n  scalar2() = 13;\n  scalar3.setValues(17);\n  scalar4.setZero();\n\n  VERIFY_IS_EQUAL(scalar1.rank(), 0);\n  VERIFY_IS_EQUAL(scalar1.size(), 1);\n\n  VERIFY_IS_EQUAL(scalar1(), 7);\n  VERIFY_IS_EQUAL(scalar2(), 13);\n  VERIFY_IS_EQUAL(scalar3(), 17);\n  VERIFY_IS_EQUAL(scalar4(), 0);\n\n  Tensor<int, 0> scalar5(scalar1);\n\n  VERIFY_IS_EQUAL(scalar5(), 7);\n  VERIFY_IS_EQUAL(scalar5.data()[0], 7);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_simple.cpp", "function_name": "test_0d", "index": 1858, "label": 0}
{"input": "static AlignedClassPtr<T> AllocClasses(size_t num, Args&&... args) {\n    constexpr size_t kSize = sizeof(T);\n    constexpr bool kIsPow2 = (kSize & (kSize - 1)) == 0;\n    constexpr size_t kBits = hwy::detail::ShiftCount(kSize);\n    static_assert(!kIsPow2 || (1ull << kBits) == kSize, \"ShiftCount has a bug\");\n    const size_t bytes = kIsPow2 ? num << kBits : num * kSize;\n    \n    const size_t check = kIsPow2 ? bytes >> kBits : bytes / kSize;\n    if (check != num) return AlignedClassPtr<T>();\n\n    PtrAndDeleter pd = AllocBytes(bytes);\n    T* p = static_cast<T*>(pd.p);\n    for (size_t i = 0; i < num; ++i) {\n      new (p + i) T(std::forward<Args>(args)...);\n    }\n    return AlignedClassPtr<T>(p, DeleterDtor(num, pd.deleter));\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/allocator.h", "function_name": "AllocClasses", "index": 1859, "label": 0}
{"input": "UIBase* UITextArea::Make(LynxContext* context, int sign,\n                         const std::string& tag) {\n  return new UITextArea(context, ARKUI_NODE_CUSTOM, sign, tag);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_textarea.cc", "function_name": "unknown_function", "index": 1860, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nstd::complex<double> RandomToTypeUniform<std::complex<double> >(uint64_t* state) {\n  return std::complex<double>(RandomToTypeUniform<double>(state),\n                              RandomToTypeUniform<double>(state));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "EIGEN_STRONG_INLINE\nstd::complex<double> RandomToTypeUniform<std::complex<double> >", "index": 1861, "label": 0}
{"input": "OrtCUDAProviderOptions()\n      : device_id{},\n        cudnn_conv_algo_search{OrtCudnnConvAlgoSearchExhaustive},\n        gpu_mem_limit{SIZE_MAX},\n        arena_extend_strategy{},\n        do_copy_in_default_stream{1},\n        has_user_compute_stream{},\n        user_compute_stream{},\n        default_memory_arena_cfg{},\n        tunable_op_enable{false},\n        tunable_op_tuning_enable{false},\n        tunable_op_max_tuning_duration_ms{} {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_c_api.h", "function_name": "OrtCUDAProviderOptions", "index": 1862, "label": 0}
{"input": "RealQZ(const MatrixType& A, const MatrixType& B, bool computeQZ = true) :\n        m_S(A.rows(),A.cols()),\n        m_T(A.rows(),A.cols()),\n        m_Q(A.rows(),A.cols()),\n        m_Z(A.rows(),A.cols()),\n        m_workspace(A.rows()*2),\n        m_maxIters(400),\n        m_isInitialized(false) {\n          compute(A, B, computeQZ);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealQZ.h", "function_name": "RealQZ", "index": 1863, "label": 0}
{"input": "void InitializeElectronBotController() {\n    if (g_electron_controller == nullptr) {\n        g_electron_controller = new ElectronBotController();\n        ESP_LOGI(TAG, \"Electron Bot控制器已初始化并注册MCP工具\");\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/electron-bot/electron_bot_controller.cc", "function_name": "InitializeElectronBotController", "index": 1864, "label": 0}
{"input": "inline const mpreal remainder (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal a(0,(std::max)(y.getPrecision(), x.getPrecision()));\n    mpfr_remainder(a.mpfr_ptr(), x.mpfr_srcptr(), y.mpfr_srcptr(), rnd_mode);\n    return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "remainder", "index": 1865, "label": 0}
{"input": "unsigned long ConcurrentQueue<T>::front(T *data) {\n    if(m_simp){\n        if (size() <= 0) return 0;\n        *data = queue.front();\n        if (!(*data)) {\n            pop();\n            return 0;\n        }\n        return size();\n    }\n    if (size() <= 0) {\n        isWaitingOut = true;\n        log(\"output waiting start\");\n        std::unique_lock<std::mutex> lck(outConLock);\n        outConVar.wait_for(lck, std::chrono::milliseconds(200));\n        log(\"output waiting end\");\n        isWaitingOut = false;\n        return 0;\n    }\n    *data = queue.front();\n    if (!(*data)) {\n        pop();\n        return 0;\n    }\n    return size();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/ConcurrentQueue.h", "function_name": "ConcurrentQueue<T>::front", "index": 1866, "label": 0}
{"input": "inline cl_int clEnqueueReadBuffer(cl_command_queue p0, cl_mem p1, cl_bool p2, size_t p3, size_t p4, void* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueReadBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueReadBuffer", "index": 1867, "label": 0}
{"input": "int rand_reentrant(unsigned int* s) {\n#ifdef EIGEN_COMP_MSVC_STRICT\n  EIGEN_UNUSED_VARIABLE(s);\n  return rand();\n#else\n  return rand_r(s);\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_runqueue.cpp", "function_name": "rand_reentrant", "index": 1868, "label": 0}
{"input": "inline ConstMapTypeInfo TypeInfoImpl<T>::GetMapTypeInfo() const {\n  const OrtMapTypeInfo* out;\n  ThrowOnError(GetApi().CastTypeInfoToMapTypeInfo(this->p_, &out));\n  return ConstMapTypeInfo{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TypeInfoImpl<T>::GetMapTypeInfo", "index": 1869, "label": 0}
{"input": "void InitializeOttoController() {\n    if (g_otto_controller == nullptr) {\n        g_otto_controller = new OttoController();\n        ESP_LOGI(TAG, \"Otto控制器已初始化并注册MCP工具\");\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_controller.cc", "function_name": "InitializeOttoController", "index": 1870, "label": 0}
{"input": "inline SocketStream::SocketStream(socket_t sock, time_t read_timeout_sec,\n                                  time_t read_timeout_usec,\n                                  time_t write_timeout_sec,\n                                  time_t write_timeout_usec)\n    : sock_(sock), read_timeout_sec_(read_timeout_sec),\n      read_timeout_usec_(read_timeout_usec),\n      write_timeout_sec_(write_timeout_sec),\n      write_timeout_usec_(write_timeout_usec), read_buff_(read_buff_size_, 0) {}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SocketStream::SocketStream", "index": 1871, "label": 0}
{"input": "CV_WRAP static inline\nString dumpRect(const Rect& argument)\n{\n    return format(\"rect: (x=%d, y=%d, w=%d, h=%d)\", argument.x, argument.y,\n                  argument.width, argument.height);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpRect", "index": 1872, "label": 0}
{"input": "const typename SparseMatrixBase<Derived>::ConstInnerVectorReturnType SparseMatrixBase<Derived>::innerVector(Index outer) const\n{ return ConstInnerVectorReturnType(derived(), outer); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseBlock.h", "function_name": "SparseMatrixBase<Derived>::innerVector", "index": 1873, "label": 0}
{"input": "inline cl_context clCreateContext(const cl_context_properties* p0, cl_uint p1, const cl_device_id* p2, void (CL_CALLBACK*p3) (const char*, const void*, size_t, void*), void* p4, cl_int* p5) { return clCreateContext_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateContext", "index": 1874, "label": 0}
{"input": "static GComputation invoke(Callable f, Seq<IIs...>, Seq<OIs...>)\n    {\n        const std::tuple<Ins...> ins;\n        const auto r = tuple_wrap_helper<Out>::get(f(std::get<IIs>(ins)...));\n        return GComputation(cv::GIn(std::get<IIs>(ins)...),\n                            cv::GOut(std::get<OIs>(r)...));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gtransform.hpp", "function_name": "invoke", "index": 1875, "label": 0}
{"input": "const Eigen::Block<const Derived>\ntopLeftCorner(const MatrixBase<Derived>& m, int rows, int cols)\n{\n  return Eigen::Block<const Derived>(m.derived(), 0, 0, rows, cols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/class_Block.cpp", "function_name": "topLeftCorner", "index": 1876, "label": 0}
{"input": "inline bool process_client_socket(socket_t sock, time_t read_timeout_sec,\n                                  time_t read_timeout_usec,\n                                  time_t write_timeout_sec,\n                                  time_t write_timeout_usec,\n                                  std::function<bool(Stream &)> callback) {\n  SocketStream strm(sock, read_timeout_sec, read_timeout_usec,\n                    write_timeout_sec, write_timeout_usec);\n  return callback(strm);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "process_client_socket", "index": 1877, "label": 0}
{"input": "NdArray<dtype> minumumFilter1d(const NdArray<dtype>& inImageArray,\n                                   uint32                inSize,\n                                   Boundary              inBoundaryType  = Boundary::REFLECT,\n                                   dtype                 inConstantValue = 0)\n    {\n        NdArray<dtype> arrayWithBoundary =\n            boundary::addBoundary1d(inImageArray, inBoundaryType, inSize, inConstantValue);\n        NdArray<dtype> output(1, inImageArray.size());\n\n        const uint32 boundarySize = inSize / 2; \n        const uint32 endPoint     = boundarySize + inImageArray.size();\n\n        for (uint32 i = boundarySize; i < endPoint; ++i)\n        {\n            NdArray<dtype> window = arrayWithBoundary[Slice(i - boundarySize, i + boundarySize + 1)];\n\n            output[i - boundarySize] = window.min().item();\n        }\n\n        return output;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Filters/Filters1d/minimumFilter1d.hpp", "function_name": "minumumFilter1d", "index": 1878, "label": 0}
{"input": "void QueueAction(int action_type, int steps, int speed, int direction, int amount) {\n        \n        if ((action_type >= ACTION_HANDS_UP && action_type <= ACTION_HAND_WAVE) && !has_hands_) {\n            ESP_LOGW(TAG, \"尝试执行手部动作，但机器人没有配置手部舵机\");\n            return;\n        }\n\n        ESP_LOGI(TAG, \"动作控制: 类型=%d, 步数=%d, 速度=%d, 方向=%d, 幅度=%d\", action_type, steps,\n                 speed, direction, amount);\n\n        OttoActionParams params = {action_type, steps, speed, direction, amount};\n        xQueueSend(action_queue_, &params, portMAX_DELAY);\n        StartActionTaskIfNeeded();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_controller.cc", "function_name": "action_type", "index": 1879, "label": 0}
{"input": "void matrix_sqrt_quasi_triangular_2x2_off_diagonal_block(const MatrixType& T, typename MatrixType::Index i, typename MatrixType::Index j, ResultType& sqrtT)\n{\n  typedef typename traits<MatrixType>::Scalar Scalar;\n  Matrix<Scalar,2,2> A = sqrtT.template block<2,2>(i,i);\n  Matrix<Scalar,2,2> B = sqrtT.template block<2,2>(j,j);\n  Matrix<Scalar,2,2> C = T.template block<2,2>(i,j);\n  if (j-i > 2)\n    C -= sqrtT.block(i, i+2, 2, j-i-2) * sqrtT.block(i+2, j, j-i-2, 2);\n  Matrix<Scalar,2,2> X;\n  matrix_sqrt_quasi_triangular_solve_auxiliary_equation(X, A, B, C);\n  sqrtT.template block<2,2>(i,j) = X;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixSquareRoot.h", "function_name": "matrix_sqrt_quasi_triangular_2x2_off_diagonal_block", "index": 1880, "label": 0}
{"input": "EIGEN_DONT_INLINE void call_ref_4(Ref<SparseVector<float> > a, const B &b) { VERIFY_IS_EQUAL(a.toDense(),b.toDense()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_ref.cpp", "function_name": "call_ref_4", "index": 1881, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_stopgpg(JNIEnv *env, jobject thiz){\n            if(g_gpgmat){\n                delete g_gpgmat;\n                g_gpgmat = NULL;\n            }\n            return 0;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_stopgpg", "index": 1882, "label": 0}
{"input": "NdArray<uint32> nanargmax(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = DtypeInfo<dtype>::min();\n                                     };\n                                 });\n\n        return argmax(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nanargmax.hpp", "function_name": "nanargmax", "index": 1883, "label": 0}
{"input": "static Matrixf dct(Matrixf& x, bool norm, int type) {\n  int N = x.cols();\n  Matrixf xi = Matrixf::Zero(N, N);\n  xi.rowwise() += Vectorf::LinSpaced(N, 0.f, static_cast<float>(N-1));\n  \n  Matrixf coeff = 2*(M_PI*xi.transpose().array()/N*(xi.array()+0.5)).cos();\n  Matrixf dct = x*coeff.transpose();\n  \n  if (norm) {\n    \n    Vectorf ortho = Vectorf::Constant(N, std::sqrt(0.5f/N));\n    \n    ortho[0] = std::sqrt(0.25f/N);\n    dct = dct*ortho.asDiagonal();\n  }\n  return dct;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/librosa.h", "function_name": "dct", "index": 1884, "label": 0}
{"input": "bool CompareKeys(const BlobReader& reader1, const BlobReader& reader2) {\n  hwy::Span<const hwy::uint128_t> keys1 = reader1.Keys();\n  hwy::Span<const hwy::uint128_t> keys2 = reader2.Keys();\n  if (keys1.size() != keys2.size()) {\n    fprintf(stderr, \"#keys mismatch: %zu vs %zu\\n\", keys1.size(), keys2.size());\n    return false;\n  }\n  for (size_t i = 0; i < keys1.size(); ++i) {\n    if (keys1[i] != keys2[i]) {\n      fprintf(stderr, \"key %zu mismatch: %s vs %s\\n\", i,\n              StringFromKey(keys1[i]).c_str(), StringFromKey(keys2[i]).c_str());\n      return false;\n    }\n  }\n\n  return true;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f31e12e63b01ccc69280b14c46bc88774d359d27", "file_path": "compression/blob_compare.cc", "function_name": "CompareKeys", "index": 1885, "label": 0}
{"input": "inline SSLSocketStream::SSLSocketStream(socket_t sock, SSL *ssl,\n                                        time_t read_timeout_sec,\n                                        time_t read_timeout_usec,\n                                        time_t write_timeout_sec,\n                                        time_t write_timeout_usec)\n    : sock_(sock), ssl_(ssl), read_timeout_sec_(read_timeout_sec),\n      read_timeout_usec_(read_timeout_usec),\n      write_timeout_sec_(write_timeout_sec),\n      write_timeout_usec_(write_timeout_usec) {\n  SSL_clear_mode(ssl, SSL_MODE_AUTO_RETRY);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLSocketStream::SSLSocketStream", "index": 1886, "label": 0}
{"input": "uint64_t SurfaceVideoRenderer::render(uint64_t nowMs) {\n    MediaData *mediaData;\n    if (mediaSource->readVidFrame(&mediaData) > 0) {\n        if (nowMs > mediaData->pts) {\n            mediaSource->popVidFrame(mediaData);\n            return mediaData->pts;\n        }\n    }\n    std::this_thread::sleep_for(std::chrono::milliseconds(5));\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/SurfaceVideoRenderer.cpp", "function_name": "SurfaceVideoRenderer::render", "index": 1887, "label": 0}
{"input": "void check_sparse_spd_determinant(Solver& solver)\n{\n  typedef typename Solver::MatrixType Mat;\n  typedef typename Mat::Scalar Scalar;\n  typedef Matrix<Scalar,Dynamic,Dynamic> DenseMatrix;\n\n  \n  Mat A, halfA;\n  DenseMatrix dA;\n  generate_sparse_spd_problem(solver, A, halfA, dA, 30);\n  \n  for (int i = 0; i < g_repeat; i++) {\n    check_sparse_determinant(solver, A,     dA);\n    check_sparse_determinant(solver, halfA, dA );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "check_sparse_spd_determinant", "index": 1888, "label": 0}
{"input": "void resize(size_t sz)\n    {\n        size_ = sz;\n        bitset_.resize(sz / cell_bit_size_ + 1);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/dynamic_bitset.h", "function_name": "sz", "index": 1889, "label": 0}
{"input": "dtype gcd(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_INTEGER(dtype);\n        return boost::integer::gcd_range(inArray.cbegin(), inArray.cend()).first;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/gcd.hpp", "function_name": "gcd", "index": 1890, "label": 0}
{"input": "lynx_api_status lynx_value_get_integer(lynx_api_env env, lynx_value value,\n                                       int64_t* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_get_integer", "index": 1891, "label": 0}
{"input": "inline std::string from_i_to_hex(size_t n) {\n  static const auto charset = \"0123456789abcdef\";\n  std::string ret;\n  do {\n    ret = charset[n & 15] + ret;\n    n >>= 4;\n  } while (n > 0);\n  return ret;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "from_i_to_hex", "index": 1892, "label": 0}
{"input": "explicit DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_rows(0) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/DenseStorage.h", "function_name": "DenseStorage", "index": 1893, "label": 0}
{"input": "EIGEN_STRONG_INLINE float32x2_t vld1_dup_f32 (const float* x) { return ::vld1_dup_f32 ((const float32_t*)x); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h", "function_name": "float32x2_t vld1_dup_f32", "index": 1894, "label": 0}
{"input": "static EIGEN_STRONG_INLINE\n  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)\n  {\n    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());\n    \n    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/ProductEvaluators.h", "function_name": "internal::sub_assign_op<Scalar,Scalar>", "index": 1895, "label": 0}
{"input": "void matrix_exp_pade3(const MatA& A, MatU& U, MatV& V)\n{\n  typedef typename MatA::PlainObject MatrixType;\n  typedef typename NumTraits<typename traits<MatA>::Scalar>::Real RealScalar;\n  const RealScalar b[] = {120.L, 60.L, 12.L, 1.L};\n  const MatrixType A2 = A * A;\n  const MatrixType tmp = b[3] * A2 + b[1] * MatrixType::Identity(A.rows(), A.cols());\n  U.noalias() = A * tmp;\n  V = b[2] * A2 + b[0] * MatrixType::Identity(A.rows(), A.cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h", "function_name": "matrix_exp_pade3", "index": 1896, "label": 0}
{"input": "inline\nMatx<_Tp,m,n> Matx<_Tp,m,n>::eye()\n{\n    Matx<_Tp,m,n> M;\n    for(int i = 0; i < shortdim; i++)\n        M(i,i) = 1;\n    return M;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp,m,n>::eye", "index": 1897, "label": 0}
{"input": "CV_INLINE  void cvSetRemoveByPtr( CvSet* set_header, void* elem )\n{\n    CvSetElem* _elem = (CvSetElem*)elem;\n    assert( _elem->flags >= 0  );\n    _elem->next_free = set_header->free_elems;\n    _elem->flags = (_elem->flags & CV_SET_ELEM_IDX_MASK) | CV_SET_ELEM_FREE_FLAG;\n    set_header->free_elems = _elem;\n    set_header->active_count--;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvSetRemoveByPtr", "index": 1898, "label": 0}
{"input": "auto expint(const NdArray<dtype>& inArrayX)\n    {\n        NdArray<decltype(expint(dtype{ 0 }))> returnArray(inArrayX.shape());\n\n        stl_algorithms::transform(\n            inArrayX.cbegin(),\n            inArrayX.cend(),\n            returnArray.begin(),\n            [](dtype inX) -> auto{ return expint(inX); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/expint.hpp", "function_name": "expint", "index": 1899, "label": 0}
{"input": "IDetector():\n                    minObjSize(96, 96),\n                    maxObjSize(INT_MAX, INT_MAX),\n                    minNeighbours(2),\n                    scaleFactor(1.1f)\n                {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/objdetect/detection_based_tracker.hpp", "function_name": "IDetector", "index": 1900, "label": 0}
{"input": "inline ssize_t read_socket(socket_t sock, void *ptr, size_t size, int flags) {\n  return handle_EINTR([&]() {\n    return recv(sock,\n#ifdef _WIN32\n                static_cast<char *>(ptr), static_cast<int>(size),\n#else\n                ptr, size,\n#endif\n                flags);\n  });\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "read_socket", "index": 1901, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost cwiseMin(\n      const TensorOpCost& rhs) const {\n    double bytes_loaded = numext::mini(bytes_loaded_, rhs.bytes_loaded());\n    double bytes_stored = numext::mini(bytes_stored_, rhs.bytes_stored());\n    double compute_cycles = numext::mini(compute_cycles_, rhs.compute_cycles());\n    return TensorOpCost(bytes_loaded, bytes_stored, compute_cycles);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorCostModel.h", "function_name": "cwiseMin", "index": 1902, "label": 0}
{"input": "static inline\nEigen::TensorMap<Eigen::Tensor<_Tp, 3, Eigen::RowMajor>> cv2eigen_tensormap(InputArray src)\n{\n    Mat mat = src.getMat();\n    CV_CheckTypeEQ(mat.type(), CV_MAKETYPE(traits::Type<_Tp>::value, mat.channels()), \"\");\n    return Eigen::TensorMap<Eigen::Tensor<_Tp, 3, Eigen::RowMajor>>((_Tp *)mat.data, mat.rows, mat.cols, mat.channels());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/eigen.hpp", "function_name": "cv2eigen_tensormap", "index": 1903, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Index first_default_aligned(const Scalar* array, Index size)\n{\n  typedef typename packet_traits<Scalar>::type DefaultPacketType;\n  return first_aligned<unpacket_traits<DefaultPacketType>::alignment>(array, size);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "first_default_aligned", "index": 1904, "label": 0}
{"input": "static void test_compound_assign()\n{\n  Tensor<int, 1> start_tensor(10);\n  Tensor<int, 1> offset_tensor(10);\n  start_tensor.setRandom();\n  offset_tensor.setRandom();\n\n  Tensor<int, 1> tensor = start_tensor;\n  tensor += offset_tensor;\n  for (int i = 0; i < 10; ++i) {\n    VERIFY_IS_EQUAL(tensor(i), start_tensor(i) + offset_tensor(i));\n  }\n\n  tensor = start_tensor;\n  tensor -= offset_tensor;\n  for (int i = 0; i < 10; ++i) {\n    VERIFY_IS_EQUAL(tensor(i), start_tensor(i) - offset_tensor(i));\n  }\n\n  tensor = start_tensor;\n  tensor *= offset_tensor;\n  for (int i = 0; i < 10; ++i) {\n    VERIFY_IS_EQUAL(tensor(i), start_tensor(i) * offset_tensor(i));\n  }\n\n  tensor = start_tensor;\n  tensor /= offset_tensor;\n  for (int i = 0; i < 10; ++i) {\n    VERIFY_IS_EQUAL(tensor(i), start_tensor(i) / offset_tensor(i));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_assign.cpp", "function_name": "test_compound_assign", "index": 1905, "label": 0}
{"input": "inline typename NumTraits<typename internal::traits<Derived>::Scalar>::Real\nSparseMatrixBase<Derived>::squaredNorm() const\n{\n  return numext::real((*this).cwiseAbs2().sum());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseDot.h", "function_name": "SparseMatrixBase<Derived>::squaredNorm", "index": 1906, "label": 0}
{"input": "virtual bool pull(cv::gapi::wip::Data &data) override\n    {\n        if (!first_pulled)\n        {\n            GAPI_Assert(!first.empty());\n            first_pulled = true;\n            data = first; \n        }\n        else\n        {\n            if (!cap.isOpened()) return false;\n\n            cv::Mat frame;\n            if (!cap.read(frame))\n            {\n                \n                return false;\n            }\n            \n            data = frame.clone();\n        }\n        \n        const auto now = std::chrono::system_clock::now();\n        const auto dur = std::chrono::duration_cast<std::chrono::microseconds>\n            (now.time_since_epoch());\n        data.meta[cv::gapi::streaming::meta_tag::timestamp] = int64_t{dur.count()};\n        data.meta[cv::gapi::streaming::meta_tag::seq_id]    = int64_t{counter++};\n        return true;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/cap.hpp", "function_name": "cv::gapi::wip::Data", "index": 1907, "label": 0}
{"input": "HWY_INLINE SampleFunc ChooseSampleFunc(const RuntimeConfig& runtime_config) {\n  \n  if (runtime_config.sample_func) return runtime_config.sample_func;\n\n  \n  if (runtime_config.top_k == 1 && !runtime_config.accept_token) {\n    return [](float* logits, size_t vocab_size) HWY_ATTR -> TokenAndProb {\n      PROFILER_ZONE(\"Gen.Sample Top1\");\n      return Top1OfSoftmax(logits, vocab_size);\n    };\n  }\n\n  \n  return [&runtime_config](float* logits,\n                           size_t vocab_size) HWY_ATTR -> TokenAndProb {\n    PROFILER_ZONE(\"Gen.Sample general\");\n    return FusedSoftmaxAndSampleTopK(\n        logits, runtime_config.top_k, vocab_size, *runtime_config.gen,\n        runtime_config.temperature, runtime_config.accept_token);\n  };\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "0e5b59d24defa48d9d57d8a3225040130d9536b8", "file_path": "gemma/gemma-inl.h", "function_name": "ChooseSampleFunc", "index": 1908, "label": 0}
{"input": "bool JSVMRuntime::setValueAtIndexImpl(piper::Array& arr, size_t i,\n                                      const piper::Value& value) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj = nullptr;\n  JSVMHelper::objectRef(arr, &obj);\n  JSVM_Value result = nullptr;\n  valueRef(value, &result);\n  JSVM_CALL(OH_JSVM_SetElement(getEnv(), obj, i, result));\n  return true;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::setValueAtIndexImpl", "index": 1909, "label": 0}
{"input": "OrtCustomOpInputOutputCharacteristic GetInputCharacteristic(size_t ) const {\n    return OrtCustomOpInputOutputCharacteristic::INPUT_OUTPUT_REQUIRED;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_api.h", "function_name": "GetInputCharacteristic", "index": 1910, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<double> predux_mul<Packet1cd>(const Packet1cd& a)\n{\n  return pfirst(a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/Complex.h", "function_name": "std::complex<double> predux_mul<Packet1cd>", "index": 1911, "label": 0}
{"input": "std::weak_ptr<piper::HostObject> JSVMRuntime::getHostObject(\n    const piper::Object& obj) {\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n  detail::JSVMHostObjectProxy* proxy_ptr = nullptr;\n  JSVM_CALL_RETURN(\n      OH_JSVM_Unwrap(getEnv(), obj_value, reinterpret_cast<void**>(&proxy_ptr)),\n      std::weak_ptr<piper::HostObject>());\n  return proxy_ptr->GetHost();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::getHostObject", "index": 1912, "label": 0}
{"input": "static inline\nvoid eigen2cv( const Eigen::Matrix<_Tp, _rows, _cols, _options, _maxRows, _maxCols>& src,\n               Matx<_Tp, _rows, _cols>& dst )\n{\n    if( !(src.Flags & Eigen::RowMajorBit) )\n    {\n        dst = Matx<_Tp, _cols, _rows>(static_cast<const _Tp*>(src.data())).t();\n    }\n    else\n    {\n        dst = Matx<_Tp, _rows, _cols>(static_cast<const _Tp*>(src.data()));\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/eigen.hpp", "function_name": "eigen2cv", "index": 1913, "label": 0}
{"input": "void ReadAndCompareBlobs(const char* path1, const char* path2) {\n  \n  BlobReader reader1;\n  BlobReader reader2;\n  const BlobError err1 = reader1.Open(Path(path1));\n  const BlobError err2 = reader2.Open(Path(path2));\n  if (err1 != 0 || err2 != 0) {\n    HWY_ABORT(\"Failed to open files: %s %s: %d %d\\n\", path1, path2, err1, err2);\n  }\n\n  if (!CompareKeys(reader1, reader2)) return;\n\n  \n  NestedPools pools(0);\n  Allocator::Init(pools.Topology());\n  const size_t total_bytes = TotalBytes(reader1) + TotalBytes(reader2);\n  BytePtr all_blobs = hwy::AllocateAligned<uint8_t>(total_bytes);\n  size_t pos = 0;\n  BlobVec blobs1 = ReserveMemory(reader1, all_blobs, pos);\n  BlobVec blobs2 = ReserveMemory(reader2, all_blobs, pos);\n\n  ReadBothBlobs(reader1, reader2, total_bytes, blobs1, blobs2, pools);\n\n  CompareBlobs(reader1.Keys(), blobs1, blobs2, total_bytes, pools);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "b0fe9a43e60121b567b8bb398b98b6319aee7a78", "file_path": "compression/blob_compare.cc", "function_name": "ReadAndCompareBlobs", "index": 1914, "label": 0}
{"input": "static void test_const_slice()\n{\n  const float b[1] = {42};\n  TensorMap<Tensor<const float, 1> > m(b, 1);\n  DSizes<DenseIndex, 1> offsets;\n  offsets[0] = 0;\n  TensorRef<Tensor<const float, 1> > slice_ref(m.slice(offsets, m.dimensions()));\n  VERIFY_IS_EQUAL(slice_ref(0), 42);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_morphing.cpp", "function_name": "test_const_slice", "index": 1915, "label": 0}
{"input": "inline\nUMat::UMat(const std::vector<_Tp>& vec, bool copyData)\n: flags(MAGIC_VAL + traits::Type<_Tp>::value + CV_MAT_CONT_FLAG), dims(2), rows((int)vec.size()),\ncols(1), allocator(0), usageFlags(USAGE_DEFAULT), u(0), offset(0), size(&rows)\n{\n    if(vec.empty())\n        return;\n    if( !copyData )\n    {\n        \n        CV_Error(Error::StsNotImplemented, \"\");\n    }\n    else\n        Mat((int)vec.size(), 1, traits::Type<_Tp>::value, (uchar*)&vec[0]).copyTo(*this);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "UMat::UMat", "index": 1916, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstRowsBlockXpr topRows(Index n) const\n{\n  return ConstRowsBlockXpr(derived(), 0, 0, n, cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstRowsBlockXpr topRows", "index": 1917, "label": 0}
{"input": "NdArray<dtype> right_shift(const NdArray<dtype>& inArray, uint8 inNumBits)\n    {\n        return inArray >> inNumBits;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/right_shift.hpp", "function_name": "right_shift", "index": 1918, "label": 0}
{"input": "void checkIndices2D(uint32 index1, uint32 index2)\n            {\n                boost::python::tuple indices = boost::python::make_tuple(index1, index2);\n                checkIndicesGeneric(indices);\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/BoostNumpyNdarrayHelper.hpp", "function_name": "index1", "index": 1919, "label": 0}
{"input": "inline v_float64x2 v_cvt_f64_high(const v_float32x4& a)\n{\n    float a_[4];\n    wasm_v128_store(a_, a.val);\n    double c_[2];\n    c_[0] = (double)(a_[2]);\n    c_[1] = (double)(a_[3]);\n    return v_float64x2(wasm_v128_load(c_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_cvt_f64_high", "index": 1920, "label": 0}
{"input": "bool JSVMRuntime::isArray(const piper::Object& obj) const {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n\n  bool result;\n  JSVM_CALL_RETURN(OH_JSVM_IsArray(getEnv(), obj_value, &result), false);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::isArray", "index": 1921, "label": 0}
{"input": "inline unsigned int trailingZeros32(unsigned int value) {\n#if defined(_MSC_VER)\n#if (_MSC_VER < 1700) || defined(_M_ARM) || defined(_M_ARM64)\n    unsigned long index = 0;\n    _BitScanForward(&index, value);\n    return (unsigned int)index;\n#elif defined(__clang__)\n    \n    return value ? __builtin_ctz(value) : 32;\n#else\n    return _tzcnt_u32(value);\n#endif\n#elif defined(__GNUC__) || defined(__GNUG__)\n    return __builtin_ctz(value);\n#elif defined(__ICC) || defined(__INTEL_COMPILER)\n    return _bit_scan_forward(value);\n#elif defined(__clang__)\n    return llvm.cttz.i32(value, true);\n#else\n    static const int MultiplyDeBruijnBitPosition[32] = {\n        0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,\n        31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9 };\n    return MultiplyDeBruijnBitPosition[((uint32_t)((value & -value) * 0x077CB531U)) >> 27];\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin.hpp", "function_name": "trailingZeros32", "index": 1922, "label": 0}
{"input": "void test_stdlist()\n{\n  \n  CALL_SUBTEST_1(check_stdlist_matrix(Vector2f()));\n  CALL_SUBTEST_1(check_stdlist_matrix(Matrix3f()));\n  CALL_SUBTEST_2(check_stdlist_matrix(Matrix3d()));\n\n  \n  CALL_SUBTEST_1(check_stdlist_matrix(Matrix2f()));\n  CALL_SUBTEST_1(check_stdlist_matrix(Vector4f()));\n  CALL_SUBTEST_1(check_stdlist_matrix(Matrix4f()));\n  CALL_SUBTEST_2(check_stdlist_matrix(Matrix4d()));\n\n  \n  CALL_SUBTEST_3(check_stdlist_matrix(MatrixXd(1,1)));\n  CALL_SUBTEST_3(check_stdlist_matrix(VectorXd(20)));\n  CALL_SUBTEST_3(check_stdlist_matrix(RowVectorXf(20)));\n  CALL_SUBTEST_3(check_stdlist_matrix(MatrixXcf(10,10)));\n\n  \n  CALL_SUBTEST_4(check_stdlist_transform(Affine2f()));\n  CALL_SUBTEST_4(check_stdlist_transform(Affine3f()));\n  CALL_SUBTEST_4(check_stdlist_transform(Affine3d()));\n\n  \n  CALL_SUBTEST_5(check_stdlist_quaternion(Quaternionf()));\n  CALL_SUBTEST_5(check_stdlist_quaternion(Quaterniond()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/stdlist.cpp", "function_name": "test_stdlist", "index": 1923, "label": 0}
{"input": "NdArray<int8> sign(const NdArray<dtype>& inArray)\n    {\n        NdArray<int8> returnArray(inArray.shape());\n        stl_algorithms::transform(inArray.cbegin(),\n                                  inArray.cend(),\n                                  returnArray.begin(),\n                                  [](dtype inValue) noexcept -> int8 { return sign(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/sign.hpp", "function_name": "sign", "index": 1924, "label": 0}
{"input": "NdArray<dtype> multi_dot(const std::initializer_list<NdArray<dtype>>& inList)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        typename std::initializer_list<NdArray<dtype>>::iterator iter = inList.begin();\n\n        if (inList.size() == 0)\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"input empty list of arrays.\");\n        }\n        else if (inList.size() == 1)\n        {\n            return iter->copy();\n        }\n\n        NdArray<dtype> returnArray = dot<dtype>(*iter, *(iter + 1));\n        iter += 2;\n        for (; iter < inList.end(); ++iter)\n        {\n            returnArray = dot(returnArray, *iter);\n        }\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Linalg/multi_dot.hpp", "function_name": "multi_dot", "index": 1925, "label": 0}
{"input": "inline std::pair<size_t, size_t> trim(const char *b, const char *e, size_t left,\n                                      size_t right) {\n  while (b + left < e && is_space_or_tab(b[left])) {\n    left++;\n  }\n  while (right > 0 && is_space_or_tab(b[right - 1])) {\n    right--;\n  }\n  return std::make_pair(left, right);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "trim", "index": 1926, "label": 0}
{"input": "CvTermCriteria(const cv::TermCriteria& t) : type(t.type), max_iter(t.maxCount), epsilon(t.epsilon)  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvTermCriteria", "index": 1927, "label": 0}
{"input": "TensorReductionOp(const XprType& expr, const Dims& dims, const Op& reducer) : m_expr(expr), m_dims(dims), m_reducer(reducer)\n    { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h", "function_name": "TensorReductionOp", "index": 1928, "label": 0}
{"input": "inline\nScalar operator * (const Matx<double, 4, 4>& a, const Scalar& b)\n{\n    Matx<double, 4, 1> c(a, b, Matx_MatMulOp());\n    return reinterpret_cast<const Scalar&>(c);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "operator *", "index": 1929, "label": 0}
{"input": "int MWorkMat::alpha(JMat** preal,JMat** pimg,JMat** pmsk){\n    *preal = pic_clone160;\n    *pimg =  pic_real160;\n    *pmsk =  msk_real160;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/malpha.cpp", "function_name": "MWorkMat::alpha", "index": 1930, "label": 0}
{"input": "static void packRhsAndKernel(packRKArg arg) {\n    if (arg.need_to_pack) {\n      RhsPacker pack_rhs;\n      pack_rhs(arg.blockB, arg.rhs.getSubMapper(arg.k, arg.n), arg.kc, arg.nc);\n    }\n\n    GebpKernel gebp;\n    for (Index mt_block_idx = 0; mt_block_idx < arg.num_blockAs; mt_block_idx++) {\n      const Index m_base_start = arg.m + arg.mc*mt_block_idx;\n      if (m_base_start < arg.max_m) {\n        Index blockAId = (arg.k_block_idx * arg.m_blocks + mt_block_idx + arg.m_block_idx) % arg.num_threads;\n        wait_until_ready((*arg.lhs_notifications)[blockAId]);\n        const Index actual_mc = numext::mini(m_base_start + arg.mc, arg.max_m) - m_base_start;\n        gebp(arg.output.getSubMapper(m_base_start, arg.n),\n             (*arg.blockAs)[blockAId], arg.blockB,\n             actual_mc, arg.kc, arg.nc, Scalar(1), -1, -1, 0, 0);\n\n        \n        const Index set_idx = blockAId * arg.n_blocks + arg.n_block_idx;\n        (*arg.kernel_notifications)[set_idx]->Notify();\n      }\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h", "function_name": "packRhsAndKernel", "index": 1931, "label": 0}
{"input": "~gemm_blocking_space()\n    {\n      aligned_delete(this->m_blockA, m_sizeA);\n      aligned_delete(this->m_blockB, m_sizeB);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h", "function_name": "~gemm_blocking_space", "index": 1932, "label": 0}
{"input": "CholmodSupernodalLLT(const MatrixType& matrix) : Base()\n    {\n      init();\n      this->compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/CholmodSupport/CholmodSupport.h", "function_name": "CholmodSupernodalLLT", "index": 1933, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline bool set_is_malloc_allowed(bool new_value) { return is_malloc_allowed_impl(true, new_value); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "set_is_malloc_allowed", "index": 1934, "label": 0}
{"input": "inline Vec<T, 3> DualQuat<T>::getTranslation(QuatAssumeType assumeUnit) const\n{\n    Quat<T> trans = T(2.0) * (getDualPart() * getRealPart().inv(assumeUnit));\n    return Vec<T, 3>{trans[1], trans[2], trans[3]};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::getTranslation", "index": 1935, "label": 0}
{"input": "inline DynamicSGroup::GroupElement DynamicSGroup::mul(GroupElement g1, GroupElement g2) const\n{\n  eigen_internal_assert(g1.representation.size() == m_numIndices);\n  eigen_internal_assert(g2.representation.size() == m_numIndices);\n\n  GroupElement result;\n  result.representation.reserve(m_numIndices);\n  for (std::size_t i = 0; i < m_numIndices; i++) {\n    int v = g2.representation[g1.representation[i]];\n    eigen_assert(v >= 0);\n    result.representation.push_back(v);\n  }\n  result.flags = g1.flags ^ g2.flags;\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/DynamicSymmetry.h", "function_name": "DynamicSGroup::mul", "index": 1936, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)\n      : Base(other.derived())\n    { }\n\n    EIGEN_DEVICE_FUNC inline Index innerStride() const { return 1; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Matrix.h", "function_name": "innerStride", "index": 1937, "label": 0}
{"input": "void EglRenderer::setWindow(NativeWindowType window) {\n    LOGI(TAG, \"setWindow\");\n    _window = window;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/EglRenderer.cpp", "function_name": "EglRenderer::setWindow", "index": 1938, "label": 0}
{"input": "EIGEN_STRONG_INLINE Eigen::half predux_min<Packet8h>(const Packet8h& a) {\n  Packet8f af = half2float(a);\n  float reduced = predux_min<Packet8f>(af);\n  return Eigen::half(reduced);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "Eigen::half predux_min<Packet8h>", "index": 1939, "label": 0}
{"input": "constexpr bool isPowerOfTwo(IntType n) noexcept\n        {\n            \n            return n != 0 && (n & (n - 1)) == 0;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/hammingEncode.hpp", "function_name": "isPowerOfTwo", "index": 1940, "label": 0}
{"input": "void inline unpackBlobs(const cv::GInferInputs::Map& blobs,\n                        std::vector<cv::GArg>& args,\n                        std::vector<std::string>& names,\n                        cv::GKinds& kinds)\n{\n    for (auto&& p : blobs) {\n        names.emplace_back(p.first);\n        switch (p.second.index()) {\n            case cv::GInferInputs::StorageT::index_of<cv::GMat>():\n                args.emplace_back(cv::util::get<cv::GMat>(p.second));\n                kinds.emplace_back(cv::detail::OpaqueKind::CV_MAT);\n                break;\n            case cv::GInferInputs::StorageT::index_of<cv::GFrame>():\n                args.emplace_back(cv::util::get<cv::GFrame>(p.second));\n                kinds.emplace_back(cv::detail::OpaqueKind::CV_UNKNOWN);\n                break;\n            default:\n                GAPI_Error(\"InternalError\");\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/infer.hpp", "function_name": "unpackBlobs", "index": 1941, "label": 0}
{"input": "inline std::vector<Value> ConstIoBindingImpl<T>::GetOutputValues(OrtAllocator* allocator) const {\n  return binding_utils::GetOutputValuesHelper(this->p_, allocator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstIoBindingImpl<T>::GetOutputValues", "index": 1942, "label": 0}
{"input": "void WakeWordDetect::Feed(const std::vector<int16_t>& data) {\n    int res = wakenet_iface_->detect(wakenet_data_, (int16_t *)data.data());\n    if (res > 0) {\n        ESP_LOGI(TAG, \"Wake word detected\");\n        auto& app = Application::GetInstance();\n        app.ToggleChatState();\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_processing/wake_word_no_afe.cc", "function_name": "WakeWordDetect::Feed", "index": 1943, "label": 0}
{"input": "std::shared_ptr<JSIContext> JSVMRuntime::createContext(\n    std::shared_ptr<VMInstance> vm) const {\n  auto context_wrapper = std::make_shared<JSVMContextWrapper>(vm);\n  return context_wrapper;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createContext", "index": 1944, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_igamma_op<Scalar>, const Derived, const OtherDerived>\n    igamma(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_igamma_op<Scalar>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_igamma_op<Scalar>, const Derived, const OtherDerived>\n    igamma", "index": 1945, "label": 0}
{"input": "void bug890()\n{\n  typedef Matrix<T, Dynamic, Dynamic> MatrixType;\n  typedef Matrix<T, Dynamic, 1> VectorType;\n  typedef Stride<Dynamic,Dynamic> S;\n  typedef Map<MatrixType, Aligned, S> MapType;\n  typedef PermutationMatrix<Dynamic> Perm;\n  \n  VectorType v1(2), v2(2), op(4), rhs(2);\n  v1 << 666,667;\n  op << 1,0,0,1;\n  rhs << 42,42;\n  \n  Perm P(2);\n  P.indices() << 1, 0;\n\n  MapType(v1.data(),2,1,S(1,1)) = P * MapType(rhs.data(),2,1,S(1,1));\n  VERIFY_IS_APPROX(v1, (P * rhs).eval());\n  \n  MapType(v1.data(),2,1,S(1,1)) = P.inverse() * MapType(rhs.data(),2,1,S(1,1));\n  VERIFY_IS_APPROX(v1, (P.inverse() * rhs).eval());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/permutationmatrices.cpp", "function_name": "bug890", "index": 1946, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    const Product<SelfAdjointView,OtherDerived>\n    operator*(const MatrixBase<OtherDerived>& rhs) const\n    {\n      return Product<SelfAdjointView,OtherDerived>(*this, rhs.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/SelfAdjointView.h", "function_name": "Product<SelfAdjointView,OtherDerived>\n    operator*", "index": 1947, "label": 0}
{"input": "void save_header(FILE* stream, const NNIndex<Distance>& index)\n{\n    IndexHeader header;\n    memset(header.signature, 0, sizeof(header.signature));\n    strcpy(header.signature, FLANN_SIGNATURE_);\n    memset(header.version, 0, sizeof(header.version));\n    strcpy(header.version, FLANN_VERSION_);\n    header.data_type = Datatype<typename Distance::ElementType>::type();\n    header.index_type = index.getType();\n    header.rows = index.size();\n    header.cols = index.veclen();\n\n    std::fwrite(&header, sizeof(header),1,stream);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/saving.h", "function_name": "save_header", "index": 1948, "label": 0}
{"input": "void AmbiVector<_Scalar,_StorageIndex>::init(int mode)\n{\n  m_mode = mode;\n  if (m_mode==IsSparse)\n  {\n    m_llSize = 0;\n    m_llStart = -1;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/AmbiVector.h", "function_name": "AmbiVector<_Scalar,_StorageIndex>::init", "index": 1949, "label": 0}
{"input": "void load_value(FILE* stream, std::vector<T>& value)\n{\n    size_t size;\n    size_t read_cnt = fread(&size, sizeof(size_t), 1, stream);\n    if (read_cnt!=1) {\n        FLANN_THROW(cv::Error::StsError, \"Cannot read from file\");\n    }\n    value.resize(size);\n    read_cnt = fread(&value[0], sizeof(T), size, stream);\n    if (read_cnt != size) {\n        FLANN_THROW(cv::Error::StsError, \"Cannot read from file\");\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/saving.h", "function_name": "load_value", "index": 1950, "label": 0}
{"input": "void MatrixPowerAtomic<MatrixType>::computePade(int degree, const MatrixType& IminusT, ResultType& res) const\n{\n  int i = 2*degree;\n  res = (m_p-degree) / (2*i-2) * IminusT;\n\n  for (--i; i; --i) {\n    res = (MatrixType::Identity(IminusT.rows(), IminusT.cols()) + res).template triangularView<Upper>()\n\t.solve((i==1 ? -m_p : i&1 ? (-m_p-i/2)/(2*i) : (m_p-i/2)/(2*i-2)) * IminusT).eval();\n  }\n  res += MatrixType::Identity(IminusT.rows(), IminusT.cols());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixPower.h", "function_name": "MatrixPowerAtomic<MatrixType>::computePade", "index": 1951, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::MinReducer<CoeffReturnType>, const Dims, const Derived>\n    minimum(const Dims& dims) const {\n      return TensorReductionOp<internal::MinReducer<CoeffReturnType>, const Dims, const Derived>(derived(), dims, internal::MinReducer<CoeffReturnType>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::MinReducer<CoeffReturnType>, const Dims, const Derived>\n    minimum", "index": 1952, "label": 0}
{"input": "void  exColorBlend_VividLight(uint8* T,uint8* A,uint8* B)    { ColorBlend_Buffer(T,A,B,VividLight);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "exColorBlend_VividLight", "index": 1953, "label": 0}
{"input": "void ElectronEmojiDisplay::SetChatMessage(const char* role, const char* content) {\n    DisplayLockGuard lock(this);\n    if (chat_message_label_ == nullptr) {\n        return;\n    }\n\n    if (content == nullptr || strlen(content) == 0) {\n        lv_obj_add_flag(chat_message_label_, LV_OBJ_FLAG_HIDDEN);\n        return;\n    }\n\n    lv_label_set_text(chat_message_label_, content);\n    lv_obj_clear_flag(chat_message_label_, LV_OBJ_FLAG_HIDDEN);\n\n    ESP_LOGI(TAG, \"设置聊天消息 [%s]: %s\", role, content);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/electron-bot/electron_emoji_display.cc", "function_name": "ElectronEmojiDisplay::SetChatMessage", "index": 1954, "label": 0}
{"input": "inline ~FPDenormalsIgnoreHintScope()\n    {\n        details::restoreFPDenormalsState(saved_state);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/utils/fp_control_utils.hpp", "function_name": "~FPDenormalsIgnoreHintScope", "index": 1955, "label": 0}
{"input": "void run_on_cpu(const Kernel& ker, int n, const Input& in, Output& out)\n{\n  for(int i=0; i<n; i++)\n    ker(i, in.data(), out.data());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/cuda_common.h", "function_name": "run_on_cpu", "index": 1956, "label": 0}
{"input": "inline _Tpvec v256_alignr_128(const _Tpvec& a, const _Tpvec& b)\n{ return v256_permute2x128<0x03>(a, b); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "v256_alignr_128", "index": 1957, "label": 0}
{"input": "long double dif_rmse( const VT1 buf1,const VT2 buf2)\n    {\n        long double totalpower=0;\n        long double difpower=0;\n        size_t n = (min)( buf1.size(),buf2.size() );\n        for (size_t k=0;k<n;++k) {\n            totalpower += (long double)((numext::abs2( buf1[k] ) + numext::abs2(buf2[k]) )/2);\n            difpower += (long double)(numext::abs2(buf1[k] - buf2[k]));\n        }\n        return sqrt(difpower/totalpower);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/FFTW.cpp", "function_name": "dif_rmse", "index": 1958, "label": 0}
{"input": "inline int32x2_t cv_vrnd_s32_f32(float32x2_t v)\n{\n    static int32x2_t v_sign = vdup_n_s32(1 << 31),\n        v_05 = vreinterpret_s32_f32(vdup_n_f32(0.5f));\n\n    int32x2_t v_addition = vorr_s32(v_05, vand_s32(v_sign, vreinterpret_s32_f32(v)));\n    return vcvt_s32_f32(vadd_f32(v, vreinterpret_f32_s32(v_addition)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/neon_utils.hpp", "function_name": "cv_vrnd_s32_f32", "index": 1959, "label": 0}
{"input": "void Es8374AudioCodec::EnableInput(bool enable) {\n    if (enable == input_enabled_) {\n        return;\n    }\n    if (enable) {\n        esp_codec_dev_sample_info_t fs = {\n            .bits_per_sample = 16,\n            .channel = 1,\n            .channel_mask = 0,\n            .sample_rate = (uint32_t)input_sample_rate_,\n            .mclk_multiple = 0,\n        };\n        ESP_ERROR_CHECK(esp_codec_dev_open(input_dev_, &fs));\n        ESP_ERROR_CHECK(esp_codec_dev_set_in_gain(input_dev_, AUDIO_CODEC_DEFAULT_MIC_GAIN));\n    } else {\n        ESP_ERROR_CHECK(esp_codec_dev_close(input_dev_));\n    }\n    AudioCodec::EnableInput(enable);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "8729fad9a845d99a980afc40c7e0c3a4bbcda5bf", "file_path": "main/audio_codecs/es8374_audio_codec.cc", "function_name": "Es8374AudioCodec::EnableInput", "index": 1960, "label": 0}
{"input": "inline\nMatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator --(int)\n{\n    MatConstIterator_ b = *this;\n    MatConstIterator::operator --();\n    return b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "MatConstIterator_<_Tp>::operator --", "index": 1961, "label": 0}
{"input": "std::unique_ptr<NapiRuntimeProxy> NapiRuntimeProxyJSVM::Create(\n    const std::shared_ptr<JSVMContextWrapper>& context,\n    runtime::TemplateDelegate* delegate) {\n  return std::make_unique<NapiRuntimeProxyJSVM>(context, delegate);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/bindings/napi/napi_runtime_proxy_jsvm.cc", "function_name": "NapiRuntimeProxyJSVM::Create", "index": 1962, "label": 0}
{"input": "[[nodiscard]] inline Euler ENURollPitchYawToECEFEuler(const reference_frames::ECEF& location,\n                                                          const Orientation&            orientation) noexcept\n    {\n        const auto nedOrientation = Orientation{ orientation.pitch, orientation.roll, -orientation.yaw };\n        const auto nedEuler       = NEDRollPitchYawToECEFEuler(location, nedOrientation);\n        return { nedEuler.theta, nedEuler.psi, -nedEuler.phi };\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ENURollPitchYawToECEFEuler.hpp", "function_name": "ENURollPitchYawToECEFEuler", "index": 1963, "label": 0}
{"input": "double minimumOnVolumeVolume(const BoxType &r1, const BoxType &r2) { ++calls; return r1.squaredExteriorDistance(r2); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/BVH.cpp", "function_name": "r1", "index": 1964, "label": 0}
{"input": "void check_all_in_range(Scalar x, Scalar y)\n{\n  Array<int,1,Dynamic> mask(y-x+1);\n  mask.fill(0);\n  long n = (y-x+1)*32;\n  for(long k=0; k<n; ++k)\n  {\n    mask( check_in_range(x,y)-x )++;\n  }\n  for(Index i=0; i<mask.size(); ++i)\n    if(mask(i)==0)\n      std::cout << \"WARNING: value \" << x+i << \" not reached.\" << std::endl;\n  VERIFY( (mask>0).all() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/rand.cpp", "function_name": "check_all_in_range", "index": 1965, "label": 0}
{"input": "static inline void check_DenseIndex_is_signed() {\n  EIGEN_STATIC_ASSERT(NumTraits<DenseIndex>::IsSigned,THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE); \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/DenseBase.h", "function_name": "check_DenseIndex_is_signed", "index": 1966, "label": 0}
{"input": "EIGEN_DEVICE_FUNC bool DenseBase<Derived>::isApproxToConstant\n(const Scalar& val, const RealScalar& prec) const\n{\n  typename internal::nested_eval<Derived,1>::type self(derived());\n  for(Index j = 0; j < cols(); ++j)\n    for(Index i = 0; i < rows(); ++i)\n      if(!internal::isApprox(self.coeff(i, j), val, prec))\n        return false;\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::isApproxToConstant", "index": 1967, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet2cf pcplxflip(const Packet2cf& x)\n{\n  Packet2cf res;\n  res.cd[0] = pcplxflip(x.cd[0]);\n  res.cd[1] = pcplxflip(x.cd[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/Complex.h", "function_name": "pcplxflip", "index": 1968, "label": 0}
{"input": "void print_cpuinfo()\n{\n#ifdef __linux__\n  cout << \"contents of /proc/cpuinfo:\" << endl;\n  string line;\n  ifstream cpuinfo(\"/proc/cpuinfo\");\n  if (cpuinfo.is_open()) {\n    while (getline(cpuinfo, line)) {\n      cout << line << endl;\n    }\n    cpuinfo.close();\n  }\n  cout << endl;\n#elif defined __APPLE__\n  cout << \"output of sysctl hw:\" << endl;\n  system(\"sysctl hw\");\n  cout << endl;\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchmark-blocking-sizes.cpp", "function_name": "print_cpuinfo", "index": 1969, "label": 0}
{"input": "AudioDebugger::~AudioDebugger() {\n    if (udp_sockfd_ >= 0) {\n        close(udp_sockfd_);\n        ESP_LOGI(TAG, \"Closed UDP socket\");\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bc5f7bb0ca29fc291f6d92588662e9283a5b83e", "file_path": "main/audio_processing/audio_debugger.cc", "function_name": "AudioDebugger::~AudioDebugger", "index": 1970, "label": 0}
{"input": "__host__ __device__ __forceinline__ BrdReflect(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}\n\n        __device__ __forceinline__ int idx_row_low(int y) const\n        {\n            return (::abs(y) - (y < 0)) % (last_row + 1);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/border_interpolate.hpp", "function_name": "idx_row_low", "index": 1971, "label": 0}
{"input": "static std::string_view serdeTo(const ibv_gid &gid) {\n    return std::string_view((const char *)&gid.raw[0], sizeof(ibv_gid::raw));\n  }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "d4f244db6590ce6925ec82bb157bee8049955a3b", "file_path": "src/common/net/ib/IBConnect.h", "function_name": "gid", "index": 1972, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::MaxReducer<CoeffReturnType>, const Dims, const Derived>\n    maximum(const Dims& dims) const {\n      return TensorReductionOp<internal::MaxReducer<CoeffReturnType>, const Dims, const Derived>(derived(), dims, internal::MaxReducer<CoeffReturnType>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorReductionOp<internal::MaxReducer<CoeffReturnType>, const Dims, const Derived>\n    maximum", "index": 1973, "label": 0}
{"input": "static __device__ __forceinline__ float RGB2GrayConvert(const float* src)\n        {\n            return src[bidx] * B2YF + src[1] * G2YF + src[bidx^2] * R2YF;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "RGB2GrayConvert", "index": 1974, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nEIGEN_STRONG_INLINE\ntypename ScalarBinaryOpTraits<typename internal::traits<Derived>::Scalar,typename internal::traits<OtherDerived>::Scalar>::ReturnType\nMatrixBase<Derived>::dot(const MatrixBase<OtherDerived>& other) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived)\n  EIGEN_STATIC_ASSERT_SAME_VECTOR_SIZE(Derived,OtherDerived)\n#if !(defined(EIGEN_NO_STATIC_ASSERT) && defined(EIGEN_NO_DEBUG))\n  typedef internal::scalar_conj_product_op<Scalar,typename OtherDerived::Scalar> func;\n  EIGEN_CHECK_BINARY_COMPATIBILIY(func,Scalar,typename OtherDerived::Scalar);\n#endif\n  \n  eigen_assert(size() == other.size());\n\n  return internal::dot_nocheck<Derived,OtherDerived>::run(*this, other);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Dot.h", "function_name": "EIGEN_STRONG_INLINE\ntypename ScalarBinaryOpTraits<typename internal::traits<Derived>::Scalar,typename internal::traits<OtherDerived>::Scalar>::ReturnType\nMatrixBase<Derived>::dot", "index": 1975, "label": 0}
{"input": "EIGEN_STRONG_INLINE void MatrixBase<Derived>::normalize()\n{\n  RealScalar z = squaredNorm();\n  \n  if(z>RealScalar(0))\n    derived() /= numext::sqrt(z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Dot.h", "function_name": "MatrixBase<Derived>::normalize", "index": 1976, "label": 0}
{"input": "inline const mpreal mul_2ui(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)\n{\n    mpreal x(v);\n    mpfr_mul_2ui(x.mpfr_ptr(),v.mpfr_srcptr(),k,rnd_mode);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mul_2ui", "index": 1977, "label": 0}
{"input": "inline AllocatedStringPtr SessionImpl<T>::EndProfilingAllocated(OrtAllocator* allocator) {\n  char* out = nullptr;\n  ThrowOnError(GetApi().SessionEndProfiling(this->p_, allocator, &out));\n  return AllocatedStringPtr(out, detail::AllocatedFree(allocator));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "SessionImpl<T>::EndProfilingAllocated", "index": 1978, "label": 0}
{"input": "__device__ __forceinline__ void loadFromSmem(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,\n                                                     const thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9>& data,\n                                                     unsigned int tid)\n        {\n            For<0, thrust::tuple_size<thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9> >::value>::loadFromSmem(smem, data, tid);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/reduce_key_val.hpp", "function_name": "loadFromSmem", "index": 1979, "label": 0}
{"input": "void RotationWarperBase<P>::detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)\n{\n    float tl_uf = (std::numeric_limits<float>::max)();\n    float tl_vf = (std::numeric_limits<float>::max)();\n    float br_uf = -(std::numeric_limits<float>::max)();\n    float br_vf = -(std::numeric_limits<float>::max)();\n\n    float u, v;\n    for (int y = 0; y < src_size.height; ++y)\n    {\n        for (int x = 0; x < src_size.width; ++x)\n        {\n            projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);\n            tl_uf = (std::min)(tl_uf, u); tl_vf = (std::min)(tl_vf, v);\n            br_uf = (std::max)(br_uf, u); br_vf = (std::max)(br_vf, v);\n        }\n    }\n\n    dst_tl.x = static_cast<int>(tl_uf);\n    dst_tl.y = static_cast<int>(tl_vf);\n    dst_br.x = static_cast<int>(br_uf);\n    dst_br.y = static_cast<int>(br_vf);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "RotationWarperBase<P>::detectResultRoi", "index": 1980, "label": 0}
{"input": "inline MemoryInfo::MemoryInfo(const char* name, OrtAllocatorType type, int id, OrtMemType mem_type) {\n  ThrowOnError(GetApi().CreateMemoryInfo(name, type, id, mem_type, &this->p_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MemoryInfo::MemoryInfo", "index": 1981, "label": 0}
{"input": "column_dfs_traits(Index jcol, Index& jsuper, typename SparseLUImpl<Scalar, StorageIndex>::GlobalLU_t& glu, SparseLUImpl<Scalar, StorageIndex>& luImpl)\n   : m_jcol(jcol), m_jsuper_ref(jsuper), m_glu(glu), m_luImpl(luImpl)\n {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_column_dfs.h", "function_name": "column_dfs_traits", "index": 1982, "label": 0}
{"input": "inline Result Client::Options(const std::string &path, const Headers &headers) {\n  return cli_->Options(path, headers);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::Options", "index": 1983, "label": 0}
{"input": "static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)\n    { return typename StridedAlignedMapType<Stride<Outer, Inner> >::type(data, rows, cols, stride); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "MapAligned", "index": 1984, "label": 0}
{"input": "pointer colIdx2Ptr(difference_type colIdx) const noexcept\n        {\n            if (colIdx >= size_)\n            {\n                return nullptr;\n            }\n\n            const auto row    = colIdx % numRows_;\n            const auto col    = colIdx / numRows_;\n            const auto rowIdx = col + row * numCols_;\n            return ptr_ + rowIdx;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayIterators.hpp", "function_name": "colIdx", "index": 1985, "label": 0}
{"input": "void test_schur_real()\n{\n  CALL_SUBTEST_1(( schur<Matrix4f>() ));\n  CALL_SUBTEST_2(( schur<MatrixXd>(internal::random<int>(1,EIGEN_TEST_MAX_SIZE/4)) ));\n  CALL_SUBTEST_3(( schur<Matrix<float, 1, 1> >() ));\n  CALL_SUBTEST_4(( schur<Matrix<double, 3, 3, Eigen::RowMajor> >() ));\n\n  \n  CALL_SUBTEST_5(RealSchur<MatrixXf>(10));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/schur_real.cpp", "function_name": "test_schur_real", "index": 1986, "label": 0}
{"input": "constexpr double interp(double inValue1, double inValue2, double inPercent) noexcept\n    {\n        return inValue1 * (1. - inPercent) + inValue2 * inPercent;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Utils/interp.hpp", "function_name": "interp", "index": 1987, "label": 0}
{"input": "static ModelConfig ConfigGemma2B() {\n  ModelConfig config = ConfigBaseGemmaV1();\n  config.model_name = \"Gemma2B\";\n  config.model = Model::GEMMA_2B;\n  config.model_dim = 2048;\n  config.vocab_size = kVocabSize;\n  config.seq_len = kSeqLen;\n  LayerConfig layer_config = LayerConfigGemma2B(config.model_dim);\n  config.layer_configs = {18, layer_config};\n  config.num_tensor_scales = 4 * config.layer_configs.size();\n  config.attention_window_sizes = FixedAttentionWindowSizes<18>(kSeqLen);\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.cc", "function_name": "ConfigGemma2B", "index": 1988, "label": 0}
{"input": "TemplateBinaryReaderTest(std::unique_ptr<lepus::InputStream> stream,\n                           bool is_lepusng_binary)\n      : TemplateEntry{lepus::Context::CreateContext(is_lepusng_binary),\n                      target_sdk_version},\n        TemplateBinaryReader(test::DataBindingShell::tasm_,\n                             static_cast<TemplateEntry*>(this),\n                             std::move(stream)) {\n    TemplateBinaryReader::compile_options_.target_sdk_version_ =\n        target_sdk_version;\n    TestUtils::RegisterBuiltin(vm_context_.get());\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/runtime/vm/lepus/context_decoder_unittests.cc", "function_name": "TemplateBinaryReaderTest", "index": 1989, "label": 0}
{"input": "Es8311AudioCodec::~Es8311AudioCodec() {\n    esp_codec_dev_delete(dev_);\n\n    audio_codec_delete_codec_if(codec_if_);\n    audio_codec_delete_ctrl_if(ctrl_if_);\n    audio_codec_delete_gpio_if(gpio_if_);\n    audio_codec_delete_data_if(data_if_);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "89f10365b1902c7d04cb1a78ce4a12a435ec84f8", "file_path": "main/audio_codecs/es8311_audio_codec.cc", "function_name": "Es8311AudioCodec::~Es8311AudioCodec", "index": 1990, "label": 0}
{"input": "inline AutoDiffScalar<NewDerType> MakeAutoDiffScalar(const typename NewDerType::Scalar& value, const NewDerType &der) {\n  return AutoDiffScalar<NewDerType>(value,der);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h", "function_name": "MakeAutoDiffScalar", "index": 1991, "label": 0}
{"input": "inline __m256 _v256_setr_ps(float v0, float v1, float v2, float v3, float v4, float v5, float v6, float v7)\n{\n    return (__m256)v8f32{ v0, v1, v2, v3, v4, v5, v6, v7 };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_setr_ps", "index": 1992, "label": 0}
{"input": "inline void get_local_ip_and_port(socket_t sock, std::string &ip, int &port) {\n  struct sockaddr_storage addr;\n  socklen_t addr_len = sizeof(addr);\n  if (!getsockname(sock, reinterpret_cast<struct sockaddr *>(&addr),\n                   &addr_len)) {\n    get_ip_and_port(addr, addr_len, ip, port);\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "get_local_ip_and_port", "index": 1993, "label": 0}
{"input": "EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_sum_op<typename SparseDerived::Scalar,typename DenseDerived::Scalar>, const SparseDerived, const DenseDerived>\noperator+(const SparseMatrixBase<SparseDerived> &a, const MatrixBase<DenseDerived> &b)\n{\n  return CwiseBinaryOp<internal::scalar_sum_op<typename SparseDerived::Scalar,typename DenseDerived::Scalar>, const SparseDerived, const DenseDerived>(a.derived(), b.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseCwiseBinaryOp.h", "function_name": "CwiseBinaryOp<internal::scalar_sum_op<typename SparseDerived::Scalar,typename DenseDerived::Scalar>, const SparseDerived, const DenseDerived>\noperator+", "index": 1994, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline void\nptranspose(PacketBlock<Packet4f,4>& kernel) {\n  PacketBlock<Packet2d,2> t0,t1,t2,t3;\n  \n  t0.packet[0] = kernel.packet[0].v4f[0];\n  t0.packet[1] = kernel.packet[1].v4f[0];\n\n  \n  t1.packet[0] = kernel.packet[0].v4f[1];\n  t1.packet[1] = kernel.packet[1].v4f[1];\n\n  \n  t2.packet[0] = kernel.packet[2].v4f[0];\n  t2.packet[1] = kernel.packet[3].v4f[0];\n\n  \n  t3.packet[0] = kernel.packet[2].v4f[1];\n  t3.packet[1] = kernel.packet[3].v4f[1];\n\n  \n  ptranspose(t0);\n  ptranspose(t1);\n  ptranspose(t2);\n  ptranspose(t3);\n\n  \n  kernel.packet[0].v4f[0] = t0.packet[0];\n  kernel.packet[0].v4f[1] = t2.packet[0];\n  kernel.packet[1].v4f[0] = t0.packet[1];\n  kernel.packet[1].v4f[1] = t2.packet[1];\n  kernel.packet[2].v4f[0] = t1.packet[0];\n  kernel.packet[2].v4f[1] = t3.packet[0];\n  kernel.packet[3].v4f[0] = t1.packet[1];\n  kernel.packet[3].v4f[1] = t3.packet[1];\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "ptranspose", "index": 1995, "label": 0}
{"input": "void next_subset(vector<size_t>& inout_subset, size_t set_size)\n{\n  if (is_last_subset(inout_subset, set_size)) {\n    cerr << \"iterating past the last subset\" << endl;\n    abort();\n  }\n  size_t i = 1;\n  while (inout_subset[inout_subset.size() - i] == set_size - i) {\n    i++;\n    assert(i <= inout_subset.size());\n  }\n  size_t first_index_to_change = inout_subset.size() - i;\n  inout_subset[first_index_to_change]++;\n  size_t p = inout_subset[first_index_to_change];\n  for (size_t j = first_index_to_change + 1; j < inout_subset.size(); j++) {\n    inout_subset[j] = ++p;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "next_subset", "index": 1996, "label": 0}
{"input": "static inline NestedPools CreatePools(const BoundedTopology& topology,\n                                      const AppArgs& app) {\n  Allocator::Init(topology);\n  return NestedPools(topology, app.max_threads, app.pin);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/app.h", "function_name": "CreatePools", "index": 1997, "label": 0}
{"input": "inline void Server::wait_until_ready() const {\n  while (!is_running() && !done_) {\n    std::this_thread::sleep_for(std::chrono::milliseconds{1});\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::wait_until_ready", "index": 1998, "label": 0}
{"input": "Spline(const Spline<Scalar, Dimension, OtherDegree>& spline) : \n    m_knots(spline.knots()), m_ctrls(spline.ctrls()) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/Spline.h", "function_name": "Spline", "index": 1999, "label": 0}
{"input": "Poly1d<dtypeOut> astype() const\n        {\n            auto newCoefficients = NdArray<dtypeOut>(1, static_cast<uint32>(coefficients_.size()));\n\n            const auto function = [](dtype value) -> dtypeOut { return static_cast<dtypeOut>(value); };\n\n            stl_algorithms::transform(coefficients_.begin(), coefficients_.end(), newCoefficients.begin(), function);\n\n            return Poly1d<dtypeOut>(newCoefficients);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/Poly1d.hpp", "function_name": "astype", "index": 2000, "label": 0}
{"input": "EIGEN_DEVICE_FUNC GaussianGenerator(const array<T, NumDims>& means,\n                                      const array<T, NumDims>& std_devs)\n      : m_means(means)\n  {\n    for (size_t i = 0; i < NumDims; ++i) {\n      m_two_sigmas[i] = std_devs[i] * std_devs[i] * 2;\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFunctors.h", "function_name": "means", "index": 2001, "label": 0}
{"input": "inline void assert_fail(const char *condition, const char *function, const char *file, int line)\n    {\n      std::cerr << \"assertion failed: \" << condition << \" in function \" << function << \" at \" << file << \":\" << line << std::endl;\n      abort();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Macros.h", "function_name": "assert_fail", "index": 2002, "label": 0}
{"input": "static int cudaext(void* dst,const void* src,size_t n,int h2d,void* sync){\n    if(sync){\n        if(h2d){\n            printf(\"====host to dev async\\n\");\n            cudaMemcpyAsync(dst,src,n,cudaMemcpyHostToDevice,(cudaStream_t)sync);\n        }else{\n            cudaMemcpyAsync(dst,src,n,cudaMemcpyDeviceToHost,(cudaStream_t)sync);\n        }\n    }else{\n        if(h2d){\n            cudaMemcpy(dst,src,n,cudaMemcpyHostToDevice);\n        }else{\n            printf(\"====dev to host\\n\");\n            cudaMemcpy(dst,src,n,cudaMemcpyDeviceToHost);\n        }\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/cuda/kmatcuda.cpp", "function_name": "cudaext", "index": 2003, "label": 0}
{"input": "void dontalign(const MatrixType& m)\n{\n  typedef typename MatrixType::Scalar Scalar;\n  typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1> VectorType;\n  typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, MatrixType::RowsAtCompileTime> SquareMatrixType;\n\n  Index rows = m.rows();\n  Index cols = m.cols();\n\n  MatrixType a = MatrixType::Random(rows,cols);\n  SquareMatrixType square = SquareMatrixType::Random(rows,rows);\n  VectorType v = VectorType::Random(rows);\n\n  VERIFY_IS_APPROX(v, square * square.colPivHouseholderQr().solve(v));\n  square = square.inverse().eval();\n  a = square * a;\n  square = square*square;\n  v = square * v;\n  v = a.adjoint() * v;\n  VERIFY(square.determinant() != Scalar(0));\n\n  \n  Scalar* array = internal::aligned_new<Scalar>(rows);\n  v = VectorType::MapAligned(array, rows);\n  internal::aligned_delete(array, rows);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/dontalign.cpp", "function_name": "dontalign", "index": 2004, "label": 0}
{"input": "inline const mpreal mod (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    (void)rnd_mode;\n\n    \n\n    if(iszero(y)) return x;\n    if(x == y) return 0;\n\n    mpreal m = x - floor(x / y) * y;\n\n    m.setSign(sgn(y)); \n\n    return m;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mod", "index": 2005, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC inline void setCudaSharedMemConfig(cudaSharedMemConfig config) {\n#ifndef __CUDA_ARCH__\n  cudaError_t status = cudaDeviceSetSharedMemConfig(config);\n  EIGEN_UNUSED_VARIABLE(status)\n  assert(status == cudaSuccess);\n#else\n  EIGEN_UNUSED_VARIABLE(config)\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceCuda.h", "function_name": "setCudaSharedMemConfig", "index": 2006, "label": 0}
{"input": "overload_lamba_set<L...> overload_lambdas(L&& ...lambdas)\n{\n    return overload_lamba_set<L...>(std::forward<L>(lambdas)...);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/util.hpp", "function_name": "overload_lambdas", "index": 2007, "label": 0}
{"input": "inline std::unique_ptr<detail::MatcherBase>\nServer::make_matcher(const std::string &pattern) {\n  if (pattern.find(\"/:\") != std::string::npos) {\n    return detail::make_unique<detail::PathParamsMatcher>(pattern);\n  } else {\n    return detail::make_unique<detail::RegexMatcher>(pattern);\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::make_matcher", "index": 2008, "label": 0}
{"input": "std::shared_ptr<piper::Buffer> RuntimeMediator::LoadBytecode(\n    const std::string& url) {\n  auto info = external_resource_loader_->LoadByteCode(url, 5 );\n  std::shared_ptr<piper::Buffer> buffer;\n  if (info.Success()) {\n    buffer = std::make_shared<piper::ByteBuffer>(std::move(info.data));\n  }\n  return buffer;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5419d4c4cd7795fd30d486e3a515d918055bcbb0", "file_path": "core/shell/runtime_mediator.cc", "function_name": "RuntimeMediator::LoadBytecode", "index": 2009, "label": 0}
{"input": "void InputShadowNode::OnPropsUpdate(char const* attr,\n                                    lepus::Value const& value) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/input_shadow_node.cc", "function_name": "InputShadowNode::OnPropsUpdate", "index": 2010, "label": 0}
{"input": "static __global__ void transformSimple(const PtrStepSz<T1> src1, const PtrStep<T2> src2, PtrStep<D> dst,\n            const Mask mask, const BinOp op)\n        {\n            const int x = blockDim.x * blockIdx.x + threadIdx.x;\n            const int y = blockDim.y * blockIdx.y + threadIdx.y;\n\n            if (x < src1.cols && y < src1.rows && mask(y, x))\n            {\n                const T1 src1_data = src1.ptr(y)[x];\n                const T2 src2_data = src2.ptr(y)[x];\n                dst.ptr(y)[x] = op(src1_data, src2_data);\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/transform_detail.hpp", "function_name": "transformSimple", "index": 2011, "label": 0}
{"input": "__device__ __forceinline__ void copyVals(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& svals,\n                                                 const thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9>& val,\n                                                 unsigned int tid, unsigned int delta)\n        {\n            For<0, thrust::tuple_size<thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9> >::value>::copy(svals, val, tid, delta);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/reduce_key_val.hpp", "function_name": "copyVals", "index": 2012, "label": 0}
{"input": "double hz_to_mel(double frequencies, bool htk = false) {\n    if (htk) {\n        return 2595.0 * log10(1.0 + frequencies / 700.0);\n    }\n    \n    double f_min = 0.0;\n    double f_sp = 200.0 / 3;\n    double mels = (frequencies - f_min) / f_sp;\n    \n    double min_log_hz = 1000.0;                         \n    double min_log_mel = (min_log_hz - f_min) / f_sp;   \n    double logstep = log(6.4) / 27.0;              \n\n    \n    \n\n\n\n\n\n    if (frequencies >= min_log_hz) {\n        \n        mels = min_log_mel + log(frequencies / min_log_hz) / logstep;\n    }\n    return mels;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/mfcc.hpp", "function_name": "hz_to_mel", "index": 2013, "label": 0}
{"input": "double operator ()(const Matx<_Tp, 3, 3>& a) const\n    {\n        return a(0,0)*(a(1,1)*a(2,2) - a(2,1)*a(1,2)) -\n            a(0,1)*(a(1,0)*a(2,2) - a(2,0)*a(1,2)) +\n            a(0,2)*(a(1,0)*a(2,1) - a(2,0)*a(1,1));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "operator ()", "index": 2014, "label": 0}
{"input": "EIGEN_ALWAYS_INLINE const_blas_data_mapper(const Scalar *data, Index stride) : blas_data_mapper<const Scalar, Index, StorageOrder>(data, stride) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/BlasUtil.h", "function_name": "stride", "index": 2015, "label": 0}
{"input": "void JSExecutor::SetObserver(JSIObserver* observer) {\n  if (!js_runtime_) {\n    return;\n  }\n  js_runtime_->SetObserver(observer);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/piper/js/js_executor.cc", "function_name": "JSExecutor::SetObserver", "index": 2016, "label": 0}
{"input": "static void test_functors()\n{\n  Tensor<float, 3> mat1(2,3,7);\n  Tensor<float, 3> mat2(2,3,7);\n  Tensor<float, 3> mat3(2,3,7);\n\n  float val = 1.0f;\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        mat1(i,j,k) = val;\n        val += 1.0f;\n      }\n    }\n  }\n  mat2 = mat1.inverse().unaryExpr(&asinf);\n  mat3 = mat1.unaryExpr(&tanhf);\n\n  val = 1.0f;\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_APPROX(mat2(i,j,k), asinf(1.0f / mat1(i,j,k)));\n        VERIFY_IS_APPROX(mat3(i,j,k), tanhf(mat1(i,j,k)));\n        val += 1.0f;\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_expr.cpp", "function_name": "test_functors", "index": 2017, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorStridingSlicingOp<const StartIndices, const StopIndices, const Strides, const Derived>\n    stridedSlice(const StartIndices& startIndices, const StopIndices& stopIndices, const Strides& strides) const {\n      return TensorStridingSlicingOp<const StartIndices, const StopIndices, const Strides,\n                                const Derived>(derived(), startIndices, stopIndices, strides);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorStridingSlicingOp<const StartIndices, const StopIndices, const Strides, const Derived>\n    stridedSlice", "index": 2018, "label": 0}
{"input": "inline boost::python::numpy::ndarray nc2Boost(const NdArray<dtype>& inArray)\n        {\n            const Shape               inShape = inArray.shape();\n            boost::python::tuple      shape   = boost::python::make_tuple(inShape.rows, inShape.cols);\n            BoostNdarrayHelper<dtype> newNdArrayHelper(shape);\n\n            for (uint32 row = 0; row < inShape.rows; ++row)\n            {\n                for (uint32 col = 0; col < inShape.cols; ++col)\n                {\n                    newNdArrayHelper(row, col) = inArray(row, col);\n                }\n            }\n            return newNdArrayHelper.getArray();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/BoostInterface.hpp", "function_name": "nc2Boost", "index": 2019, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void resize(const DSizes<Index, NumIndices>& dimensions) {\n      array<Index, NumIndices> dims;\n      for (int i = 0; i < NumIndices; ++i) {\n        dims[i] = dimensions[i];\n      }\n      resize(dims);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/Tensor.h", "function_name": "dimensions", "index": 2020, "label": 0}
{"input": "inline std::string MemoryInfo::GetAllocatorName() const {\n  const char* name = nullptr;\n  ThrowOnError(GetApi().MemoryInfoGetName(*this, &name));\n  return std::string(name);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "MemoryInfo::GetAllocatorName", "index": 2021, "label": 0}
{"input": "void reset()\n        {\n            if (!m_ref) m_ref.reset(new OpaqueRefT<T>());\n            check<T>();\n            storeKind<T>();\n            static_cast<OpaqueRefT<T>&>(*m_ref).reset();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gopaque.hpp", "function_name": "reset", "index": 2022, "label": 0}
{"input": "bool TextElement::ResetTextStyles(CSSPropertyID id) {\n  bool processed = true;\n  EnsureTextProps();\n  switch (id) {\n    case kPropertyIDFontSize:\n      text_props_->font_size.reset();\n      break;\n    case kPropertyIDColor:\n      text_props_->color.reset();\n      break;\n    case kPropertyIDLineHeight:\n      text_props_->line_height.reset();\n      break;\n    case kPropertyIDFontWeight:\n      text_props_->font_weight.reset();\n      break;\n    case kPropertyIDFontStyle:\n      text_props_->font_style.reset();\n      break;\n    case kPropertyIDTextOverflow:\n      text_props_->text_overflow.reset();\n      break;\n    case kPropertyIDVerticalAlign:\n      text_props_->vertical_align_type.reset();\n      break;\n    default:\n      processed = false;\n      break;\n  }\n  return processed;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "6fe2b4864a32cd1fb4108b9e3d6539d0a0ecd316", "file_path": "core/renderer/dom/fiber/text_element.cc", "function_name": "TextElement::ResetTextStyles", "index": 2023, "label": 0}
{"input": "inline __m128i _v128_cvtepi8_epi32(const __m128i& a)\n{\n    __m128i r = _mm_unpacklo_epi8(a, a);\n    r = _mm_unpacklo_epi8(r, r);\n    return _mm_srai_epi32(r, 24);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_cvtepi8_epi32", "index": 2024, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const ConstBlockXpr block(Index startRow, Index startCol, Index blockRows, Index blockCols) const\n{\n  return ConstBlockXpr(derived(), startRow, startCol, blockRows, blockCols);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstBlockXpr block", "index": 2025, "label": 0}
{"input": "inline Index outerToBlock(Index outer) const\n    {\n      eigen_assert(outer < outerSize() && \"OUTER INDEX OUT OF BOUNDS\");\n\n      if(m_blockSize != Dynamic)\n        return (outer / m_blockSize); \n\n      StorageIndex b_outer = 0;\n      while(m_outerOffset[b_outer] <= outer) ++b_outer;\n      return b_outer - 1;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "outer", "index": 2026, "label": 0}
{"input": "NdArray<dtype> unwrap(const NdArray<dtype>& inArray)\n    {\n        NdArray<dtype> returnArray(inArray.shape());\n        stl_algorithms::transform(inArray.cbegin(),\n                                  inArray.cend(),\n                                  returnArray.begin(),\n                                  [](dtype inValue) noexcept -> dtype { return unwrap(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/unwrap.hpp", "function_name": "unwrap", "index": 2027, "label": 0}
{"input": "void VisitAll(const Func& func) const {\n    for (size_t task_idx = 0; task_idx < NumTasks(); ++task_idx) {\n      func(Range(task_idx));\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "util/threading.h", "function_name": "VisitAll", "index": 2028, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE Index rank() const { return m_evaluator->dimensions().size(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRef.h", "function_name": "rank", "index": 2029, "label": 0}
{"input": "static void test_user_defined_reductions() {\n  Tensor<float, 2, DataLayout> tensor(5, 7);\n  tensor.setRandom();\n  array<ptrdiff_t, 1> reduction_axis;\n  reduction_axis[0] = 1;\n\n  UserReducer reducer(10.0f);\n  Tensor<float, 1, DataLayout> result = tensor.reduce(reduction_axis, reducer);\n  VERIFY_IS_EQUAL(result.dimension(0), 5);\n  for (int i = 0; i < 5; ++i) {\n    float expected = 10.0f;\n    for (int j = 0; j < 7; ++j) {\n      expected += tensor(i, j) * tensor(i, j);\n    }\n    expected = 1.0f / expected;\n    VERIFY_IS_APPROX(result(i), expected);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_reduction.cpp", "function_name": "test_user_defined_reductions", "index": 2030, "label": 0}
{"input": "inline void v_store_interleave(uint64 *ptr, const v_uint64x2& a, const v_uint64x2& b,\n                               const v_uint64x2& c, const v_uint64x2& d,\n                               hal::StoreMode  = hal::STORE_UNALIGNED)\n{\n    v128_t v0 = wasm_unpacklo_i64x2(a.val, b.val);\n    v128_t v1 = wasm_unpacklo_i64x2(c.val, d.val);\n    v128_t v2 = wasm_unpackhi_i64x2(a.val, b.val);\n    v128_t v3 = wasm_unpackhi_i64x2(c.val, d.val);\n\n    wasm_v128_store(ptr, v0);\n    wasm_v128_store(ptr + 2, v1);\n    wasm_v128_store(ptr + 4, v2);\n    wasm_v128_store(ptr + 6, v3);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_store_interleave", "index": 2031, "label": 0}
{"input": "void test_permutationmatrices()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( permutationmatrices(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( permutationmatrices(Matrix3f()) );\n    CALL_SUBTEST_3( permutationmatrices(Matrix<double,3,3,RowMajor>()) );\n    CALL_SUBTEST_4( permutationmatrices(Matrix4d()) );\n    CALL_SUBTEST_5( permutationmatrices(Matrix<double,40,60>()) );\n    CALL_SUBTEST_6( permutationmatrices(Matrix<double,Dynamic,Dynamic,RowMajor>(20, 30)) );\n    CALL_SUBTEST_7( permutationmatrices(MatrixXcf(15, 10)) );\n  }\n  CALL_SUBTEST_5( bug890<double>() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/permutationmatrices.cpp", "function_name": "test_permutationmatrices", "index": 2032, "label": 0}
{"input": "inline bool detectFileExist(char *file_path) {\n    std::ifstream _ifstream;\n    _ifstream.open(file_path, std::ios::in);\n    if (!_ifstream) {\n        return false;\n    }\n    _ifstream.close();\n    return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/sas_util.h", "function_name": "detectFileExist", "index": 2033, "label": 0}
{"input": "static void test_arg_reductions()\n{\n  VERIFY_IS_EQUAL(arg_sum(1,2,3,4), 10);\n  VERIFY_IS_EQUAL(arg_prod(1,2,3,4), 24);\n  VERIFY_IS_APPROX(arg_sum(0.5, 2, 5), 7.5);\n  VERIFY_IS_APPROX(arg_prod(0.5, 2, 5), 5.0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_meta.cpp", "function_name": "test_arg_reductions", "index": 2034, "label": 0}
{"input": "EIGEN_STRONG_INLINE const CwiseNullaryOp<CustomNullaryOp, typename DenseBase<Derived>::PlainObject>\nDenseBase<Derived>::NullaryExpr(Index size, const CustomNullaryOp& func)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  if(RowsAtCompileTime == 1) return CwiseNullaryOp<CustomNullaryOp, PlainObject>(1, size, func);\n  else return CwiseNullaryOp<CustomNullaryOp, PlainObject>(size, 1, func);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "CwiseNullaryOp<CustomNullaryOp, typename DenseBase<Derived>::PlainObject>\nDenseBase<Derived>::NullaryExpr", "index": 2035, "label": 0}
{"input": "void BDCSVD<MatrixType>::copyUV(const HouseholderU &householderU, const HouseholderV &householderV, const NaiveU &naiveU, const NaiveV &naiveV)\n{\n  \n  if (computeU())\n  {\n    Index Ucols = m_computeThinU ? m_diagSize : householderU.cols();\n    m_matrixU = MatrixX::Identity(householderU.cols(), Ucols);\n    m_matrixU.topLeftCorner(m_diagSize, m_diagSize) = naiveV.template cast<Scalar>().topLeftCorner(m_diagSize, m_diagSize);\n    householderU.applyThisOnTheLeft(m_matrixU); \n  }\n  if (computeV())\n  {\n    Index Vcols = m_computeThinV ? m_diagSize : householderV.cols();\n    m_matrixV = MatrixX::Identity(householderV.cols(), Vcols);\n    m_matrixV.topLeftCorner(m_diagSize, m_diagSize) = naiveU.template cast<Scalar>().topLeftCorner(m_diagSize, m_diagSize);\n    householderV.applyThisOnTheLeft(m_matrixV); \n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/BDCSVD.h", "function_name": "BDCSVD<MatrixType>::copyUV", "index": 2036, "label": 0}
{"input": "void GRender::stopMessageLoop() {\n    if (messageThread && messageThread->hasStarted()) {\n        messageThread->stop();\n        messageSource->reset();\n        messageThread->join();\n        delete messageThread;\n        messageThread = nullptr;\n    }\n    LOGI(TAG, \"message thread was stopped!\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::stopMessageLoop", "index": 2037, "label": 0}
{"input": "int32_t InspectorOwnerEmbedder::GetSessionId() {\n  CHECK_NULL_AND_LOG_RETURN_VALUE(devtoolng_delegate_,\n                                  \"devtoolng_delegate_ is null\", -1);\n  return devtoolng_delegate_->getSessionId();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "780f2434bd7a6816d3a5ee1a5281a0922517438a", "file_path": "devtool/embedder/core/inspector_owner_embedder.cc", "function_name": "InspectorOwnerEmbedder::GetSessionId", "index": 2038, "label": 0}
{"input": "inline cl_int clGetEventProfilingInfo(cl_event p0, cl_profiling_info p1, size_t p2, void* p3, size_t* p4) { return clGetEventProfilingInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetEventProfilingInfo", "index": 2039, "label": 0}
{"input": "static void test_slice()\n{\n  Tensor<float, 5> tensor(2,3,5,7,11);\n  tensor.setRandom();\n\n  Eigen::DSizes<ptrdiff_t, 5> indices(1,2,3,4,5);\n  Eigen::DSizes<ptrdiff_t, 5> sizes(1,1,1,1,1);\n  TensorRef<Tensor<float, 5>> slice = tensor.slice(indices, sizes);\n  VERIFY_IS_EQUAL(slice(0,0,0,0,0), tensor(1,2,3,4,5));\n\n  Eigen::DSizes<ptrdiff_t, 5> indices2(1,1,3,4,5);\n  Eigen::DSizes<ptrdiff_t, 5> sizes2(1,1,2,2,3);\n  slice = tensor.slice(indices2, sizes2);\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 2; ++j) {\n      for (int k = 0; k < 3; ++k) {\n        VERIFY_IS_EQUAL(slice(0,0,i,j,k), tensor(1,1,3+i,4+j,5+k));\n      }\n    }\n  }\n\n  Eigen::DSizes<ptrdiff_t, 5> indices3(0,0,0,0,0);\n  Eigen::DSizes<ptrdiff_t, 5> sizes3(2,3,1,1,1);\n  slice = tensor.slice(indices3, sizes3);\n  VERIFY_IS_EQUAL(slice.data(), tensor.data());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_slice", "index": 2040, "label": 0}
{"input": "inline std::string MemoryInfoImpl<T>::GetAllocatorName() const {\n  const char* name = nullptr;\n  ThrowOnError(GetApi().MemoryInfoGetName(this->p_, &name));\n  return std::string(name);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MemoryInfoImpl<T>::GetAllocatorName", "index": 2041, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::ECEF ENUtoECEF(const reference_frames::ENU& target,\n                                                          const reference_frames::LLA& referencePoint) noexcept\n    {\n        return ENUtoECEF(target, LLAtoECEF(referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ENUtoECEF.hpp", "function_name": "ENUtoECEF", "index": 2042, "label": 0}
{"input": "void test_autodiff()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( test_autodiff_scalar<1>() );\n    CALL_SUBTEST_2( test_autodiff_vector<1>() );\n    CALL_SUBTEST_3( test_autodiff_jacobian<1>() );\n    CALL_SUBTEST_4( test_autodiff_hessian<1>() );\n  }\n\n  CALL_SUBTEST_5( bug_1222() );\n  CALL_SUBTEST_5( bug_1223() );\n  CALL_SUBTEST_5( bug_1260() );\n  CALL_SUBTEST_5( bug_1261() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "test_autodiff", "index": 2043, "label": 0}
{"input": "inline std::vector<int64_t> CustomOpApi::KernelInfoGetAttribute(_In_ const OrtKernelInfo* info, _In_ const char* name) {\n  size_t size = 0;\n  std::vector<int64_t> out;\n\n  \n  OrtStatus* status = api_.KernelInfoGetAttributeArray_int64(info, name, nullptr, &size);\n\n  if (status == nullptr) {\n    out.resize(size);\n    ThrowOnError(api_.KernelInfoGetAttributeArray_int64(info, name, out.data(), &size));\n  } else {\n    ThrowOnError(status);\n  }\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::KernelInfoGetAttribute", "index": 2044, "label": 0}
{"input": "void Es8311AudioCodec::SetOutputVolume(int volume) {\n    ESP_ERROR_CHECK(esp_codec_dev_set_out_vol(dev_, volume));\n    AudioCodec::SetOutputVolume(volume);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "89f10365b1902c7d04cb1a78ce4a12a435ec84f8", "file_path": "main/audio_codecs/es8311_audio_codec.cc", "function_name": "Es8311AudioCodec::SetOutputVolume", "index": 2045, "label": 0}
{"input": "CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())\n      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)\n    {\n      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);\n      \n      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)\n      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseBinaryOp.h", "function_name": "CwiseBinaryOp", "index": 2046, "label": 0}
{"input": "ParamDesc(Kind              &&kind_,\n              const std::string &device_,\n              const bool        is_generic_,\n              const size_t      num_in_,\n              const size_t      num_out_)\n        : kind(std::move(kind_)), device(device_),\n          is_generic(is_generic_),\n          num_in(num_in_), num_out(num_out_) {\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/infer/ov.hpp", "function_name": "ParamDesc", "index": 2047, "label": 0}
{"input": "inline uint32x4_t cv_vrndq_u32_f32(float32x4_t v)\n{\n    static float32x4_t v_05 = vdupq_n_f32(0.5f);\n    return vcvtq_u32_f32(vaddq_f32(v, v_05));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/neon_utils.hpp", "function_name": "cv_vrndq_u32_f32", "index": 2048, "label": 0}
{"input": "inline typename MatrixBase<Derived>::template ConstDiagonalIndexReturnType<Index_>::Type\nMatrixBase<Derived>::diagonal() const\n{\n  return typename ConstDiagonalIndexReturnType<Index_>::Type(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Diagonal.h", "function_name": "MatrixBase<Derived>::diagonal", "index": 2049, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline VectorType projection(const VectorType& p) const { return p - signedDistance(p) * normal(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Hyperplane.h", "function_name": "projection", "index": 2050, "label": 0}
{"input": "static void test_matrix_vector()\n{\n  Tensor<float, 2, DataLayout> t_left(30, 50);\n  Tensor<float, 1, DataLayout> t_right(50);\n  Tensor<float, 1, DataLayout> t_result(30);\n\n  t_left.setRandom();\n  t_right.setRandom();\n\n  typedef Map<Eigen::Matrix<float, Dynamic, Dynamic, DataLayout>> MapXf;\n  MapXf m_left(t_left.data(), 30, 50);\n  MapXf m_right(t_right.data(), 50, 1);\n  Eigen::Matrix<float, Dynamic, Dynamic, DataLayout> m_result(30, 1);\n\n  \n  Eigen::array<DimPair, 1> dims{{DimPair(1, 0)}};\n\n  \n  t_result = t_left.contract(t_right, dims);\n  m_result = m_left * m_right;\n\n  for (int i = 0; i < t_result.dimensions().TotalSize(); i++) {\n    VERIFY(internal::isApprox(t_result(i), m_result(i, 0), 1));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_contraction.cpp", "function_name": "test_matrix_vector", "index": 2051, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline typename ConstFixedSegmentReturnType<N>::Type segment(Index start, Index n = N) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return typename ConstFixedSegmentReturnType<N>::Type(derived(), start, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "segment", "index": 2052, "label": 0}
{"input": "lynx_api_status lynx_value_has_ref_count(lynx_api_env env, lynx_value val,\n                                         bool* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_has_ref_count", "index": 2053, "label": 0}
{"input": "void test_cxx11_tensor_roundings()\n{\n   CALL_SUBTEST(test_float_rounding());\n   CALL_SUBTEST(test_float_ceiling());\n   CALL_SUBTEST(test_float_flooring());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_roundings.cpp", "function_name": "test_cxx11_tensor_roundings", "index": 2054, "label": 0}
{"input": "std::shared_ptr<VMInstance> QuickjsRuntime::CreateVM(const StartupData *,\n                                                     bool sync) {\n  auto quickjs_runtime_wrapper =\n      std::make_shared<lynx::piper::QuickjsRuntimeInstance>();\n  uint32_t mode = tasm::performance::MemoryMonitor::ScriptingEngineMode();\n  quickjs_runtime_wrapper->InitQuickjsRuntime(sync, mode);\n  return quickjs_runtime_wrapper;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/jsi/quickjs/quickjs_runtime.cc", "function_name": "QuickjsRuntime::CreateVM", "index": 2055, "label": 0}
{"input": "inline int64_t CustomOpApi::KernelInfoGetAttribute<int64_t>(_In_ const OrtKernelInfo* info, _In_ const char* name) {\n  int64_t out;\n  ThrowOnError(api_.KernelInfoGetAttribute_int64(info, name, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::KernelInfoGetAttribute<int64_t>", "index": 2056, "label": 0}
{"input": "inline int shutdown_socket(socket_t sock) {\n#ifdef _WIN32\n  return shutdown(sock, SD_BOTH);\n#else\n  return shutdown(sock, SHUT_RDWR);\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "shutdown_socket", "index": 2057, "label": 0}
{"input": "static void test_tensor_randacc()\n{\n  SGroup<Symmetry<0,1>, Symmetry<2,3>> sym;\n  Tensor<int, 4> t(10,10,10,10);\n\n  t.setZero();\n\n  \n  \n  for (int n = 0; n < 1000000; n++) {\n    int i = rand() % 10;\n    int j = rand() % 10;\n    int k = rand() % 10;\n    int l = rand() % 10;\n    \n    if (i < j)\n      std::swap(i, j);\n    if (k < l)\n      std::swap(k, l);\n    sym(t, i, j, k, l) = (i + j) * (k + l);\n  }\n\n  for (int l = 0; l < 10; l++) {\n    for (int k = 0; k < 10; k++) {\n      for (int j = 0; j < 10; j++) {\n        for (int i = 0; i < 10; i++) {\n          VERIFY_IS_EQUAL((t(i, j, k, l)), ((i + j) * (k + l)));\n        }\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_symmetry.cpp", "function_name": "test_tensor_randacc", "index": 2058, "label": 0}
{"input": "inline bool from_hex_to_i(const std::string &s, size_t i, size_t cnt,\n                          int &val) {\n  if (i >= s.size()) { return false; }\n\n  val = 0;\n  for (; cnt; i++, cnt--) {\n    if (!s[i]) { return false; }\n    auto v = 0;\n    if (is_hex(s[i], v)) {\n      val = val * 16 + v;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "from_hex_to_i", "index": 2059, "label": 0}
{"input": "__global__ void ReductionInitKernelHalfFloat(Reducer reducer, const Self input, Index num_coeffs, half* output) {\n  const Index thread_id = blockIdx.x * blockDim.x + threadIdx.x;\n  const Index num_threads = blockDim.x * gridDim.x;\n  const Index num_packets = num_coeffs / 2;\n  for (Index i = thread_id; i < num_packets; i += num_threads) {\n    ((half2*)output)[i] = reducer.template initializePacket<half2>();\n  }\n\n  if (thread_id == 0 && num_coeffs % 2 != 0) {\n    output[num_coeffs-1] = reducer.initialize();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "ReductionInitKernelHalfFloat", "index": 2060, "label": 0}
{"input": "inline void mpreal::set_default_rnd(mp_rnd_t rnd_mode)\n{\n    mpfr_set_default_rounding_mode(rnd_mode);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::set_default_rnd", "index": 2061, "label": 0}
{"input": "inline void startVec(Index outer)\n    {\n      EIGEN_UNUSED_VARIABLE(outer);\n      eigen_assert(outer==0);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseVector.h", "function_name": "startVec", "index": 2062, "label": 0}
{"input": "inline cl_int clEnqueueBarrierWithWaitList(cl_command_queue p0, cl_uint p1, const cl_event* p2, cl_event* p3) { return clEnqueueBarrierWithWaitList_pfn(p0, p1, p2, p3); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueBarrierWithWaitList", "index": 2063, "label": 0}
{"input": "bool saveMarketVector (const VectorType& vec, const std::string& filename)\n{\n typedef typename VectorType::Scalar Scalar; \n std::ofstream out(filename.c_str(),std::ios::out);\n  if(!out)\n    return false;\n  \n  out.flags(std::ios_base::scientific);\n  out.precision(64);\n  if(internal::is_same<Scalar, std::complex<float> >::value || internal::is_same<Scalar, std::complex<double> >::value)\n      out << \"%%MatrixMarket matrix array complex general\\n\"; \n  else\n    out << \"%%MatrixMarket matrix array real general\\n\"; \n  out << vec.size() << \" \"<< 1 << \"\\n\";\n  for (int i=0; i < vec.size(); i++){\n    internal::putVectorElt(vec(i), out); \n  }\n  out.close();\n  return true; \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MarketIO.h", "function_name": "saveMarketVector", "index": 2064, "label": 0}
{"input": "inline typename DenseBase<Derived>::ConstTransposeReturnType\nDenseBase<Derived>::transpose() const\n{\n  return ConstTransposeReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Transpose.h", "function_name": "DenseBase<Derived>::transpose", "index": 2065, "label": 0}
{"input": "inline cl_int clGetMemObjectInfo(cl_mem p0, cl_mem_info p1, size_t p2, void* p3, size_t* p4) { return clGetMemObjectInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetMemObjectInfo", "index": 2066, "label": 0}
{"input": "void JSVMHostObjectProxy::onFinalize(JSVM_Env env, void* finalizeData,\n                                     void* finalizeHint) {\n  if (finalizeData != nullptr) {\n    JSVMHostObjectProxy* proxy =\n        reinterpret_cast<JSVMHostObjectProxy*>(finalizeData);\n    delete proxy;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_host_object.cc", "function_name": "JSVMHostObjectProxy::onFinalize", "index": 2067, "label": 0}
{"input": "lynx_api_status lynx_value_get_length(lynx_api_env env, lynx_value value,\n                                      uint32_t* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_get_length", "index": 2068, "label": 0}
{"input": "Poly1d(const NdArray<dtype>& inValues, bool isRoots = false)\n        {\n            if (inValues.size() > DtypeInfo<uint8>::max())\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"can only make a polynomial of order \" +\n                                             utils::num2str(DtypeInfo<uint8>::max()));\n            }\n\n            if (isRoots)\n            {\n                coefficients_.push_back(1);\n                for (auto value : inValues)\n                {\n                    NdArray<dtype> coeffs = { -(value), static_cast<dtype>(1) };\n                    *this *= Poly1d<dtype>(coeffs, !isRoots);\n                }\n            }\n            else\n            {\n                coefficients_.resize(inValues.size());\n                stl_algorithms::copy(inValues.begin(), inValues.end(), coefficients_.begin());\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/Poly1d.hpp", "function_name": "Poly1d", "index": 2069, "label": 0}
{"input": "void test_product_syrk()\n{\n  for(int i = 0; i < g_repeat ; i++)\n  {\n    int s;\n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n    CALL_SUBTEST_1( syrk(MatrixXf(s, s)) );\n    CALL_SUBTEST_2( syrk(MatrixXd(s, s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n    \n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE/2);\n    CALL_SUBTEST_3( syrk(MatrixXcf(s, s)) );\n    CALL_SUBTEST_4( syrk(MatrixXcd(s, s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_syrk.cpp", "function_name": "test_product_syrk", "index": 2070, "label": 0}
{"input": "static void test_ref_in_expr()\n{\n  Tensor<float, 3> input(3,5,7);\n  input.setRandom();\n  TensorRef<Tensor<float, 3>> input_ref(input);\n\n  Tensor<float, 3> result(3,5,7);\n  result.setRandom();\n  TensorRef<Tensor<float, 3>> result_ref(result);\n\n  Tensor<float, 3> bias(3,5,7);\n  bias.setRandom();\n\n  result_ref = input_ref + bias;\n  for (int i = 0; i < 3; ++i) {\n    for (int j = 0; j < 5; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_EQUAL(result_ref(i,j,k), input(i,j,k) + bias(i,j,k));\n        VERIFY_IS_NOT_EQUAL(result(i,j,k), input(i,j,k) + bias(i,j,k));\n      }\n    }\n  }\n\n  result = result_ref;\n  for (int i = 0; i < 3; ++i) {\n    for (int j = 0; j < 5; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_EQUAL(result(i,j,k), input(i,j,k) + bias(i,j,k));\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_ref.cpp", "function_name": "test_ref_in_expr", "index": 2071, "label": 0}
{"input": "void load_tree(FILE* stream, KMeansNodePtr& node, int num)\n    {\n        node = pool_.allocate<KMeansNode>();\n        load_value(stream, *node);\n        node->pivot = new CentersType[veclen_];\n        load_value(stream, *(node->pivot), (int)veclen_);\n        if (node->childs==NULL) {\n            int indices_offset;\n            load_value(stream, indices_offset);\n            node->indices = indices_[num] + indices_offset;\n        }\n        else {\n            node->childs = pool_.allocate<KMeansNodePtr>(branching_);\n            for(int i=0; i<branching_; ++i) {\n                load_tree(stream, node->childs[i], num);\n            }\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kmeans_index.h", "function_name": "num", "index": 2072, "label": 0}
{"input": "inline Type2Vec256_Traits<double>::vec_type v256_setall<double>(const double& a) { return v256_setall_f64(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/simd_utils.impl.hpp", "function_name": "v256_setall", "index": 2073, "label": 0}
{"input": "const TensorTupleReducerOp<\n      internal::ArgMinTupleReducer<Tuple<Index, CoeffReturnType> >,\n      const array<Index, 1>, const Derived>\n    argmin(const int return_dim) const {\n      array<Index, 1> in_dims;\n      in_dims[0] = return_dim;\n      return TensorTupleReducerOp<\n        internal::ArgMinTupleReducer<Tuple<Index, CoeffReturnType> >,\n        const array<Index, 1>,\n        const Derived>(derived(), internal::ArgMinTupleReducer<Tuple<Index, CoeffReturnType> >(), return_dim, in_dims);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "return_dim", "index": 2074, "label": 0}
{"input": "EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_sum_op<typename DenseDerived::Scalar,typename SparseDerived::Scalar>, const DenseDerived, const SparseDerived>\noperator+(const MatrixBase<DenseDerived> &a, const SparseMatrixBase<SparseDerived> &b)\n{\n  return CwiseBinaryOp<internal::scalar_sum_op<typename DenseDerived::Scalar,typename SparseDerived::Scalar>, const DenseDerived, const SparseDerived>(a.derived(), b.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseCwiseBinaryOp.h", "function_name": "CwiseBinaryOp<internal::scalar_sum_op<typename DenseDerived::Scalar,typename SparseDerived::Scalar>, const DenseDerived, const SparseDerived>\noperator+", "index": 2075, "label": 0}
{"input": "explicit LDLT(EigenBase<InputType>& matrix)\n      : m_matrix(matrix.derived()),\n        m_transpositions(matrix.rows()),\n        m_temporary(matrix.rows()),\n        m_sign(internal::ZeroSign),\n        m_isInitialized(false)\n    {\n      compute(matrix.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LDLT.h", "function_name": "LDLT", "index": 2076, "label": 0}
{"input": "lynx_api_status lynx_value_equals(lynx_api_env env, lynx_value lhs,\n                                  lynx_value rhs, bool* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_equals", "index": 2077, "label": 0}
{"input": "double minimumOnObjectObject(const BallType &b1, const BallType &b2){ ++calls; return SQR((std::max)(0., (b1.center - b2.center).norm() - b1.radius - b2.radius)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/BVH.cpp", "function_name": "b1", "index": 2078, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstSegmentReturnType tail(Index n) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return ConstSegmentReturnType(derived(), this->size() - n, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstSegmentReturnType tail", "index": 2079, "label": 0}
{"input": "EIGEN_DONT_INLINE\nIndex test_compute_block_size(Index m, Index n, Index k)\n{\n  Index mc(m), nc(n), kc(k);\n  internal::computeProductBlockingSizes<T,T>(kc, mc, nc);\n  return kc+mc+nc;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_extra.cpp", "function_name": "test_compute_block_size", "index": 2080, "label": 0}
{"input": "void Camera::updateViewMatrix(void) const\n{\n    if(!mViewIsUptodate)\n    {\n        Quaternionf q = orientation().conjugate();\n        mViewMatrix.linear() = q.toRotationMatrix();\n        mViewMatrix.translation() = - (mViewMatrix.linear() * position());\n\n        mViewIsUptodate = true;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::updateViewMatrix", "index": 2081, "label": 0}
{"input": "int wav_get_header(void* obj, int* format, int* channels, int* sample_rate, int* bits_per_sample, unsigned int* data_length) {\n\tstruct wav_reader* wr = (struct wav_reader*) obj;\n\tif (format)\n\t\t*format = wr->format;\n\tif (channels)\n\t\t*channels = wr->channels;\n\tif (sample_rate)\n\t\t*sample_rate = wr->sample_rate;\n\tif (bits_per_sample)\n\t\t*bits_per_sample = wr->bits_per_sample;\n    printf(\"==== data subleng %d\\n\",wr->data_length );\n\tif (data_length)\n\t\t*data_length = wr->data_length;\n\treturn wr->format && wr->sample_rate;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/wavreader.cpp", "function_name": "wav_get_header", "index": 2082, "label": 0}
{"input": "inline void putMarketHeader(std::string& header,int sym)\n  {\n    header= \"%%MatrixMarket matrix coordinate \";\n    if(internal::is_same<Scalar, std::complex<float> >::value || internal::is_same<Scalar, std::complex<double> >::value)\n    {\n      header += \" complex\"; \n      if(sym == Symmetric) header += \" symmetric\";\n      else if (sym == SelfAdjoint) header += \" Hermitian\";\n      else header += \" general\";\n    }\n    else\n    {\n      header += \" real\"; \n      if(sym == Symmetric) header += \" symmetric\";\n      else header += \" general\";\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MarketIO.h", "function_name": "putMarketHeader", "index": 2083, "label": 0}
{"input": "CV_WRAP static inline\nString dumpFloat(float argument)\n{\n    return cv::format(\"Float: %.2f\", argument);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpFloat", "index": 2084, "label": 0}
{"input": "inline size_t CustomOpApi::GetTensorShapeElementCount(_In_ const OrtTensorTypeAndShapeInfo* info) {\n  size_t out;\n  ThrowOnError(api_.GetTensorShapeElementCount(info, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::GetTensorShapeElementCount", "index": 2085, "label": 0}
{"input": "inline TypeInfo MapTypeInfoImpl<T>::GetMapValueType() const {\n  OrtTypeInfo* output;\n  ThrowOnError(GetApi().GetMapValueType(this->p_, &output));\n  return TypeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MapTypeInfoImpl<T>::GetMapValueType", "index": 2086, "label": 0}
{"input": "inline void Client::set_write_timeout(time_t sec, time_t usec) {\n  cli_->set_write_timeout(sec, usec);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_write_timeout", "index": 2087, "label": 0}
{"input": "lynx_api_status lynx_value_is_integer(lynx_api_env env, lynx_value value,\n                                      bool* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_is_integer", "index": 2088, "label": 0}
{"input": "EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_difference_op<typename SparseDerived::Scalar,typename DenseDerived::Scalar>, const SparseDerived, const DenseDerived>\noperator-(const SparseMatrixBase<SparseDerived> &a, const MatrixBase<DenseDerived> &b)\n{\n  return CwiseBinaryOp<internal::scalar_difference_op<typename SparseDerived::Scalar,typename DenseDerived::Scalar>, const SparseDerived, const DenseDerived>(a.derived(), b.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseCwiseBinaryOp.h", "function_name": "CwiseBinaryOp<internal::scalar_difference_op<typename SparseDerived::Scalar,typename DenseDerived::Scalar>, const SparseDerived, const DenseDerived>\noperator-", "index": 2089, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vsub2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vsub2.u32.u32.u32.sat %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vsub.u32.u32.u32.sat %0.h0, %1.h0, %2.h0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s;\n        s = a ^ b;          \n        r = a - b;          \n        s = s ^ r;          \n        s = s & 0x00010000; \n        r = r + s;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vsub2", "index": 2090, "label": 0}
{"input": "std::vector<Centroid<dtype>> centroidClusters(const std::vector<Cluster<dtype>>& inClusters)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        std::vector<Centroid<dtype>> centroids(inClusters.size());\n        stl_algorithms::transform(inClusters.begin(),\n                                  inClusters.end(),\n                                  centroids.begin(),\n                                  [](const auto& cluster) -> Centroid<dtype> { return Centroid<dtype>(cluster); });\n        return centroids;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/ImageProcessing/centroidClusters.hpp", "function_name": "centroidClusters", "index": 2091, "label": 0}
{"input": "JMat JMat::clone(){\n    JMat cm(m_width,m_height,m_channel,m_stride,m_bit);\n    memcpy(cm.m_buf,m_buf,m_size);\n    memcpy(cm.m_tagarr,m_tagarr,512*sizeof(int));\n    return cm;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/jmat.cpp", "function_name": "JMat::clone", "index": 2092, "label": 0}
{"input": "virtual int setNumThreads(int nThreads) CV_OVERRIDE\n    {\n        int oldNumThreads = numThreads;\n        numThreads = nThreads;\n\n#if TBB_INTERFACE_VERSION >= 8000\n        auto& tbbArena = getArena();\n        if (tbbArena.is_active())\n            tbbArena.terminate();\n        if (numThreads > 0)\n            tbbArena.initialize(numThreads);\n#else\n        auto& tbbScheduler = getScheduler();\n        if (tbbScheduler.is_active())\n            tbbScheduler.terminate();\n        if (numThreads > 0)\n            tbbScheduler.initialize(numThreads);\n#endif\n        return oldNumThreads;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/parallel/backend/parallel_for.tbb.hpp", "function_name": "nThreads", "index": 2093, "label": 0}
{"input": "NdArray<dtype> chiSquare(const Shape& inShape, dtype inDof)\n    {\n        return detail::chiSquare(generator_, inShape, inDof);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/chiSquare.hpp", "function_name": "chiSquare", "index": 2094, "label": 0}
{"input": "static void run(TensorEvaluator<Derived, DefaultDevice>& tensor,\n                  Eigen::array<typename traits<Derived>::Index, traits<Derived>::NumDimensions>*,\n                  const InitList& v) {\n    tensor.coeffRef(0) = v;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorInitializer.h", "function_name": "Eigen::array<typename traits<Derived>::Index, traits<Derived>::NumDimensions>", "index": 2095, "label": 0}
{"input": "DispatchQueue::~DispatchQueue() {\n    \n    std::unique_lock<std::mutex> lock(lockMutex);\n    quit = true;\n    lock.unlock();\n    condition.notify_all();\n\n    \n    for(size_t i = 0; i < threads.size(); i++)\n    {\n        if(threads[i].joinable())\n        {\n            threads[i].join();\n        }\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/dispatchqueue.cpp", "function_name": "DispatchQueue::~DispatchQueue", "index": 2096, "label": 0}
{"input": "bool LDLT<MatrixType,_UpLo>::solveInPlace(MatrixBase<Derived> &bAndX) const\n{\n  eigen_assert(m_isInitialized && \"LDLT is not initialized.\");\n  eigen_assert(m_matrix.rows() == bAndX.rows());\n\n  bAndX = this->solve(bAndX);\n\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LDLT.h", "function_name": "LDLT<MatrixType,_UpLo>::solveInPlace", "index": 2097, "label": 0}
{"input": "sparse_diagonal_product_evaluator(const SparseXprType &sparseXpr, const DiagCoeffType &diagCoeff)\n    : m_sparseXprEval(sparseXpr), m_diagCoeffNested(diagCoeff)\n  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseDiagonalProduct.h", "function_name": "sparse_diagonal_product_evaluator", "index": 2098, "label": 0}
{"input": "CV_INLINE  void  cvSubS( const CvArr* src, CvScalar value, CvArr* dst,\n                         const CvArr* mask CV_DEFAULT(NULL))\n{\n    cvAddS( src, cvScalar( -value.val[0], -value.val[1], -value.val[2], -value.val[3]),\n            dst, mask );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvSubS", "index": 2099, "label": 0}
{"input": "inline bool isEqualUlps(const mpreal& a, const mpreal& b, int maxUlps)\n{\n    return abs(a - b) <= machine_epsilon((max)(abs(a), abs(b))) * maxUlps;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "isEqualUlps", "index": 2100, "label": 0}
{"input": "NdArray<dtype> mirror1d(const NdArray<dtype>& inImage, uint32 inBoundarySize)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        const uint32 outSize = inImage.size() + inBoundarySize * 2;\n\n        NdArray<dtype> outArray(1, outSize);\n        outArray.put(Slice(inBoundarySize, inBoundarySize + inImage.size()), inImage);\n\n        \n        outArray.put(Slice(0, inBoundarySize), fliplr(inImage[Slice(1, inBoundarySize + 1)]));\n\n        \n        outArray.put(Slice(inImage.size() + inBoundarySize, outSize),\n                     fliplr(inImage[Slice(-static_cast<int32>(inBoundarySize) - 1, -1)]));\n\n        return outArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Filter/Boundaries/Boundaries1d/mirror1d.hpp", "function_name": "mirror1d", "index": 2101, "label": 0}
{"input": "int KMat::cvtuint8(KMat* dst,float scale,float delta){\n    ppl::cv::x86::ConvertTo<float,3,uint8_t>(m_height,m_width,m_width*m_channel,(float*)m_buf ,scale,m_width*m_channel,(uint8_t*)m_buf);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/src/kmatx86.cpp", "function_name": "KMat::cvtuint8", "index": 2102, "label": 0}
{"input": "void check_abs() {\n  typedef typename NumTraits<T>::Real Real;\n\n  if(NumTraits<T>::IsSigned)\n    VERIFY_IS_EQUAL(numext::abs(-T(1)), T(1));\n  VERIFY_IS_EQUAL(numext::abs(T(0)), T(0));\n  VERIFY_IS_EQUAL(numext::abs(T(1)), T(1));\n\n  for(int k=0; k<g_repeat*100; ++k)\n  {\n    T x = internal::random<T>();\n    if(!internal::is_same<T,bool>::value)\n      x = x/Real(2);\n    if(NumTraits<T>::IsSigned)\n    {\n      VERIFY_IS_EQUAL(numext::abs(x), numext::abs(-x));\n      VERIFY( numext::abs(-x) >= Real(0));\n    }\n    VERIFY( numext::abs(x) >= Real(0));\n    VERIFY_IS_APPROX( numext::abs2(x), numext::abs2(numext::abs(x)) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/numext.cpp", "function_name": "check_abs", "index": 2103, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstSegmentReturnType head(Index n) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return ConstSegmentReturnType(derived(), 0, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstSegmentReturnType head", "index": 2104, "label": 0}
{"input": "void testGeneral(const MatrixType& m, const typename MatrixType::RealScalar& tol)\n{\n  typedef typename MatrixType::RealScalar RealScalar;\n  MatrixType m1, m2, m3, m4, m5;\n  RealScalar x, y;\n\n  for (int i=0; i < g_repeat; ++i) {\n    generateTestMatrix<MatrixType>::run(m1, m.rows());\n    MatrixPower<MatrixType> mpow(m1);\n\n    x = internal::random<RealScalar>();\n    y = internal::random<RealScalar>();\n    m2 = mpow(x);\n    m3 = mpow(y);\n\n    m4 = mpow(x+y);\n    m5.noalias() = m2 * m3;\n    VERIFY(m4.isApprox(m5, tol));\n\n    m4 = mpow(x*y);\n    m5 = m2.pow(y);\n    VERIFY(m4.isApprox(m5, tol));\n\n    m4 = (std::abs(x) * m1).pow(y);\n    m5 = std::pow(std::abs(x), y) * m3;\n    VERIFY(m4.isApprox(m5, tol));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_power.cpp", "function_name": "testGeneral", "index": 2105, "label": 0}
{"input": "lynx_api_status lynx_value_get_external(lynx_api_env env, lynx_value value,\n                                        void** result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_get_external", "index": 2106, "label": 0}
{"input": "inline int64x2_t vmvnq_s64(int64x2_t a)\n{\n    int64x2_t vx = vreinterpretq_s64_u32(vdupq_n_u32(0xFFFFFFFF));\n    return veorq_s64(a, vx);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/opencv-mobile-4.6.0-android/sdk/native/jni/include/opencv2/core/hal/intrin_neon.hpp", "function_name": "vmvnq_s64", "index": 2107, "label": 0}
{"input": "static __device__ __forceinline__ T atomicInc(T* address, T val)\n            {\n#if defined (__CUDA_ARCH__) && (__CUDA_ARCH__ < 120)\n                T count;\n                unsigned int tag = threadIdx.x << ( (sizeof(unsigned int) << 3) - 5U);\n                do\n                {\n                    count = *address & TAG_MASK;\n                    count = tag | (count + 1);\n                    *address = count;\n                } while (*address != count);\n\n                return (count & TAG_MASK) - 1;\n#else\n                return ::atomicInc(address, val);\n#endif\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/emulation.hpp", "function_name": "atomicInc", "index": 2108, "label": 0}
{"input": "void test_eigensolver_generalized_real()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    int s = 0;\n    CALL_SUBTEST_1( generalized_eigensolver_real(Matrix4f()) );\n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE/4);\n    CALL_SUBTEST_2( generalized_eigensolver_real(MatrixXd(s,s)) );\n\n    \n    CALL_SUBTEST_2( generalized_eigensolver_real(MatrixXd(1,1)) );\n    CALL_SUBTEST_2( generalized_eigensolver_real(MatrixXd(2,2)) );\n    CALL_SUBTEST_3( generalized_eigensolver_real(Matrix<double,1,1>()) );\n    CALL_SUBTEST_4( generalized_eigensolver_real(Matrix2d()) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigensolver_generalized_real.cpp", "function_name": "test_eigensolver_generalized_real", "index": 2109, "label": 0}
{"input": "inline ssize_t handle_EINTR(T fn) {\n  ssize_t res = 0;\n  while (true) {\n    res = fn();\n    if (res < 0 && errno == EINTR) { continue; }\n    break;\n  }\n  return res;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "handle_EINTR", "index": 2110, "label": 0}
{"input": "inline GProtoInputArgs GIn(Ts&&... ts)\n{\n    return GProtoInputArgs(detail::packArgs(std::forward<Ts>(ts)...));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gproto.hpp", "function_name": "GIn", "index": 2111, "label": 0}
{"input": "typename MatrixType::RealScalar\nCompleteOrthogonalDecomposition<MatrixType>::absDeterminant() const {\n  return m_cpqr.absDeterminant();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/CompleteOrthogonalDecomposition.h", "function_name": "CompleteOrthogonalDecomposition<MatrixType>::absDeterminant", "index": 2112, "label": 0}
{"input": "void test_product_notemporary()\n{\n  int s;\n  for(int i = 0; i < g_repeat; i++) {\n    s = internal::random<int>(16,EIGEN_TEST_MAX_SIZE);\n    CALL_SUBTEST_1( product_notemporary(MatrixXf(s, s)) );\n    CALL_SUBTEST_2( product_notemporary(MatrixXd(s, s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n    \n    s = internal::random<int>(16,EIGEN_TEST_MAX_SIZE/2);\n    CALL_SUBTEST_3( product_notemporary(MatrixXcf(s,s)) );\n    CALL_SUBTEST_4( product_notemporary(MatrixXcd(s,s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_notemporary.cpp", "function_name": "test_product_notemporary", "index": 2113, "label": 0}
{"input": "virtual void ifft(float* data, const float* re, const float* im) override\n    {\n      ::memcpy(_re, re, _complexSize * sizeof(float));\n      ::memcpy(_im, im, _complexSize * sizeof(float));\n      fftwf_execute_split_dft_c2r(_planBackward, _re, _im, _data);\n      detail::ScaleBuffer(data, _data, 1.0f / static_cast<float>(_size), _size);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "data", "index": 2114, "label": 0}
{"input": "void IcoSphere::draw(int level)\n{\n  while (level>=int(mIndices.size()))\n    const_cast<IcoSphere*>(this)->_subdivide();\n  if (mListIds[level]==0)\n  {\n    mListIds[level] = glGenLists(1);\n    glNewList(mListIds[level], GL_COMPILE);\n      glVertexPointer(3, GL_FLOAT, 0, mVertices[0].data());\n      glNormalPointer(GL_FLOAT, 0, mVertices[0].data());\n      glEnableClientState(GL_VERTEX_ARRAY);\n      glEnableClientState(GL_NORMAL_ARRAY);\n      glDrawElements(GL_TRIANGLES, mIndices[level]->size(), GL_UNSIGNED_INT, &(mIndices[level]->at(0)));\n      glDisableClientState(GL_VERTEX_ARRAY);\n      glDisableClientState(GL_NORMAL_ARRAY);\n    glEndList();\n  }\n  glCallList(mListIds[level]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/icosphere.cpp", "function_name": "IcoSphere::draw", "index": 2115, "label": 0}
{"input": "Map<const Matrix<T,Dynamic,1> > make_vector(const T* data, int size)\n{\n  return Map<const Matrix<T,Dynamic,1> >(data, size);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/blas/common.h", "function_name": "make_vector", "index": 2116, "label": 0}
{"input": "inline cl_int clEnqueueCopyBufferRect(cl_command_queue p0, cl_mem p1, cl_mem p2, const size_t* p3, const size_t* p4, const size_t* p5, size_t p6, size_t p7, size_t p8, size_t p9, cl_uint p10, const cl_event* p11, cl_event* p12) { return clEnqueueCopyBufferRect_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueCopyBufferRect", "index": 2117, "label": 0}
{"input": "inline __m256i _v256_alignr_b(const __m256i &a, const __m256i &b, const int imm)\n{\n    if (imm == 8) {\n        return __lasx_xvshuf4i_d(b, a, 0x9); \n    } else {\n        __m256i byteIndex = _v256_setr_b(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                                         0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n        return __lasx_xvshuf_b(a, b, __lasx_xvadd_b(__lasx_xvreplgr2vr_b(imm), byteIndex));\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_alignr_b", "index": 2118, "label": 0}
{"input": "void test_spqr_scalar()\n{\n  typedef SparseMatrix<Scalar,ColMajor> MatrixType; \n  MatrixType A;\n  Matrix<Scalar,Dynamic,Dynamic> dA;\n  typedef Matrix<Scalar,Dynamic,1> DenseVector;\n  DenseVector refX,x,b; \n  SPQR<MatrixType> solver; \n  generate_sparse_rectangular_problem(A,dA);\n  \n  Index m = A.rows();\n  b = DenseVector::Random(m);\n  solver.compute(A);\n  if (solver.info() != Success)\n  {\n    std::cerr << \"sparse QR factorization failed\\n\";\n    exit(0);\n    return;\n  }\n  x = solver.solve(b);\n  if (solver.info() != Success)\n  {\n    std::cerr << \"sparse QR factorization failed\\n\";\n    exit(0);\n    return;\n  }  \n  \n  refX = dA.colPivHouseholderQr().solve(b);\n  VERIFY(x.isApprox(refX,test_precision<Scalar>()));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/spqr_support.cpp", "function_name": "test_spqr_scalar", "index": 2119, "label": 0}
{"input": "void test_comparison()\n{\n  VERIFY(half(1.0f) > half(0.5f));\n  VERIFY(half(0.5f) < half(1.0f));\n  VERIFY(!(half(1.0f) < half(0.5f)));\n  VERIFY(!(half(0.5f) > half(1.0f)));\n\n  VERIFY(!(half(4.0f) > half(4.0f)));\n  VERIFY(!(half(4.0f) < half(4.0f)));\n\n  VERIFY(!(half(0.0f) < half(-0.0f)));\n  VERIFY(!(half(-0.0f) < half(0.0f)));\n  VERIFY(!(half(0.0f) > half(-0.0f)));\n  VERIFY(!(half(-0.0f) > half(0.0f)));\n\n  VERIFY(half(0.2f) > half(-1.0f));\n  VERIFY(half(-1.0f) < half(0.2f));\n  VERIFY(half(-16.0f) < half(-15.0f));\n\n  VERIFY(half(1.0f) == half(1.0f));\n  VERIFY(half(1.0f) != half(2.0f));\n\n  \n#if !EIGEN_COMP_MSVC\n  \n  VERIFY(!(half(0.0 / 0.0) == half(0.0 / 0.0)));\n  VERIFY(half(0.0 / 0.0) != half(0.0 / 0.0));\n\n  VERIFY(!(half(1.0) == half(0.0 / 0.0)));\n  VERIFY(!(half(1.0) < half(0.0 / 0.0)));\n  VERIFY(!(half(1.0) > half(0.0 / 0.0)));\n  VERIFY(half(1.0) != half(0.0 / 0.0));\n\n  VERIFY(half(1.0) < half(1.0 / 0.0));\n  VERIFY(half(1.0) > half(-1.0 / 0.0));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/half_float.cpp", "function_name": "test_comparison", "index": 2120, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE Index dimension(Index n) const { return m_evaluator->dimensions()[n]; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRef.h", "function_name": "dimension", "index": 2121, "label": 0}
{"input": "inline v128_t v128_cvtu8x16_i32x4(const v128_t& a)\n{\n    const v128_t z = wasm_i8x16_splat(0);\n    return wasm_unpacklo_i16x8(wasm_unpacklo_i8x16(a, z), z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvtu8x16_i32x4", "index": 2122, "label": 0}
{"input": "auto ellint_2(const NdArray<dtype1>& inArrayK, const NdArray<dtype2>& inArrayP)\n    {\n        if (inArrayK.size() != inArrayP.size())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"Shapes of inArrayK and inArrayP must match.\");\n        }\n\n        NdArray<decltype(ellint_2(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArrayK.shape());\n\n        stl_algorithms::transform(\n            inArrayK.cbegin(),\n            inArrayK.cend(),\n            inArrayP.cbegin(),\n            returnArray.begin(),\n            [](dtype1 inK, dtype2 inP) -> auto{ return ellint_2(inK, inP); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/ellint_2.hpp", "function_name": "ellint_2", "index": 2123, "label": 0}
{"input": "inline std::string Request::get_param_value(const std::string &key,\n                                            size_t id) const {\n  auto rng = params.equal_range(key);\n  auto it = rng.first;\n  std::advance(it, static_cast<ssize_t>(id));\n  if (it != rng.second) { return it->second; }\n  return std::string();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Request::get_param_value", "index": 2124, "label": 0}
{"input": "static __device__ __forceinline__ void RGB2YUVConvert(const float* src, D& dst)\n        {\n            dst.x = src[0] * c_RGB2YUVCoeffs_f[bidx^2] + src[1] * c_RGB2YUVCoeffs_f[1] + src[2] * c_RGB2YUVCoeffs_f[bidx];\n            dst.y = (src[bidx^2] - dst.x) * c_RGB2YUVCoeffs_f[3] + ColorChannel<float>::half();\n            dst.z = (src[bidx] - dst.x) * c_RGB2YUVCoeffs_f[4] + ColorChannel<float>::half();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "RGB2YUVConvert", "index": 2125, "label": 0}
{"input": "OttoController() {\n        otto_.Init(LEFT_LEG_PIN, RIGHT_LEG_PIN, LEFT_FOOT_PIN, RIGHT_FOOT_PIN, LEFT_HAND_PIN,\n                   RIGHT_HAND_PIN);\n\n        has_hands_ = (LEFT_HAND_PIN != -1 && RIGHT_HAND_PIN != -1);\n        ESP_LOGI(TAG, \"Otto机器人初始化%s手部舵机\", has_hands_ ? \"带\" : \"不带\");\n\n        otto_.Home(true);\n        action_queue_ = xQueueCreate(10, sizeof(OttoActionParams));\n\n        RegisterMcpTools();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_controller.cc", "function_name": "OttoController", "index": 2126, "label": 0}
{"input": "std::optional<Array> JSVMRuntime::createArray(size_t length) {\n  HandleScopeWrapper scope(getEnv());\n\n  JSVM_Value arr_value = nullptr;\n  JSVM_CALL(OH_JSVM_CreateArrayWithLength(getEnv(), length, &arr_value));\n\n  return JSVMHelper::createObject(arr_value, getEnv()).getArray(*this);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createArray", "index": 2127, "label": 0}
{"input": "inline int _v256_extract_epi32(const __m256i& a)\n{\n#if defined(CV__SIMD_HAVE_mm256_extract_epi8) || (CV_AVX2 && (!defined(_MSC_VER) || _MSC_VER >= 1910))\n    return _mm256_extract_epi32(a, i);\n#else\n    __m128i b = _mm256_extractf128_si256(a, ((i) >> 2));\n    return _mm_extract_epi32(b, i & 3);  \n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx.hpp", "function_name": "_v256_extract_epi32", "index": 2128, "label": 0}
{"input": "void product1x1()\n{\n  Matrix<float,1,3> matAstatic;\n  Matrix<float,3,1> matBstatic;\n  matAstatic.setRandom();\n  matBstatic.setRandom();\n  VERIFY_IS_APPROX( (matAstatic * matBstatic).coeff(0,0), \n                    matAstatic.cwiseProduct(matBstatic.transpose()).sum() );\n\n  MatrixXf matAdynamic(1,3);\n  MatrixXf matBdynamic(3,1);\n  matAdynamic.setRandom();\n  matBdynamic.setRandom();\n  VERIFY_IS_APPROX( (matAdynamic * matBdynamic).coeff(0,0), \n                    matAdynamic.cwiseProduct(matBdynamic.transpose()).sum() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_small.cpp", "function_name": "product1x1", "index": 2129, "label": 0}
{"input": "inline OpAttr::OpAttr(const char* name, const void* data, int len, OrtOpAttrType type) {\n  Ort::ThrowOnError(GetApi().CreateOpAttr(name, data, len, type, &p_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "OpAttr::OpAttr", "index": 2130, "label": 0}
{"input": "bool get_options(int argc, char **args, string option, string* value=0)\n{\n  int idx = 1, found=false; \n  while (idx<argc && !found){\n    if (option.compare(args[idx]) == 0){\n      found = true; \n      if(value) *value = args[idx+1];\n    }\n    idx+=2;\n  }\n  return found; \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/spbench/spbenchsolver.h", "function_name": "get_options", "index": 2131, "label": 0}
{"input": "NdArray<double> cov_inv(const NdArray<dtype>& x, bool bias = false)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        return linalg::inv(cov(x, bias));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/cov_inv.hpp", "function_name": "cov_inv", "index": 2132, "label": 0}
{"input": "void test_sizeoverflow()\n{\n  \n  \n  \n  \n  \n  size_t times_itself_gives_0 = size_t(1) << (8 * sizeof(Index) / 2);\n  VERIFY(times_itself_gives_0 * times_itself_gives_0 == 0);\n\n  size_t times_4_gives_0 = size_t(1) << (8 * sizeof(Index) - 2);\n  VERIFY(times_4_gives_0 * 4 == 0);\n\n  size_t times_8_gives_0 = size_t(1) << (8 * sizeof(Index) - 3);\n  VERIFY(times_8_gives_0 * 8 == 0);\n\n  triggerMatrixBadAlloc<MatrixXf>(times_itself_gives_0, times_itself_gives_0);\n  triggerMatrixBadAlloc<MatrixXf>(times_itself_gives_0 / 4, times_itself_gives_0);\n  triggerMatrixBadAlloc<MatrixXf>(times_4_gives_0, 1);\n\n  triggerMatrixBadAlloc<MatrixXd>(times_itself_gives_0, times_itself_gives_0);\n  triggerMatrixBadAlloc<MatrixXd>(times_itself_gives_0 / 8, times_itself_gives_0);\n  triggerMatrixBadAlloc<MatrixXd>(times_8_gives_0, 1);\n  \n  triggerVectorBadAlloc<VectorXf>(times_4_gives_0);\n  \n  triggerVectorBadAlloc<VectorXd>(times_8_gives_0);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sizeoverflow.cpp", "function_name": "test_sizeoverflow", "index": 2133, "label": 0}
{"input": "static __forceinline unsigned __int64 _re_atomic_fetch_or(\n\tsize_t size, void *a, unsigned __int64 v)\n{\n\tunsigned __int64 prev_val;\n\tassert(size == 1u || size == 2u || size == 4u || size == 8u);\n\tswitch (size) {\n\tcase 1u:\n\t\tprev_val = _InterlockedOr8((char*)a, (char)v);\n\t\tbreak;\n\tcase 2u:\n\t\tprev_val = _InterlockedOr16((short*)a, (short)v);\n\t\tbreak;\n\tcase 4u:\n\t\tprev_val = _InterlockedOr((long*)a, (long)v);\n\t\tbreak;\n\tdefault:\n#if defined(_M_IX86)\n\t\t{\n\t\t\t_ReadWriteBarrier();\n\t\t\tprev_val = *(const volatile __int64*)(a);\n\t\t\twhile (1) {\n\t\t\t\t__int64 new_val = prev_val | v;\n\t\t\t\t__int64 prev_val2 =\n\t\t\t\t\t_InterlockedCompareExchange64(\n\t\t\t\t\t\t(__int64*)a,\n\t\t\t\t\t\t(__int64)new_val,\n\t\t\t\t\t\t(__int64)prev_val);\n\t\t\t\tif (prev_val2 == prev_val)\n\t\t\t\t\tbreak;\n\t\t\t\tprev_val = prev_val2;\n\t\t\t}\n\t\t\t_ReadWriteBarrier();\n\t\t}\n#else\n\t\tprev_val = _InterlockedOr64((__int64*)a, (__int64)v);\n#endif\n\t\tbreak;\n\t}\n\n\treturn prev_val;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/dh_atomic.h", "function_name": "_re_atomic_fetch_or", "index": 2134, "label": 0}
{"input": "inline DynamicSparseMatrix(const DynamicSparseMatrix& other)\n      : Base(), m_innerSize(0)\n    {\n      #ifdef EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN\n        EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN\n      #endif\n      *this = other.derived();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/DynamicSparseMatrix.h", "function_name": "DynamicSparseMatrix", "index": 2135, "label": 0}
{"input": "EIGEN_DONT_INLINE void bench_prod()\n{\n  typedef Matrix<Scalar,M,K> Lhs; Lhs a; a.setRandom();\n  typedef Matrix<Scalar,K,N> Rhs; Rhs b; b.setRandom();\n  typedef Matrix<Scalar,M,N> Res; Res c; c.setRandom();\n\n  BenchTimer t;\n  double n = 2.*double(M)*double(N)*double(K);\n  int rep = 100000./n;\n  rep /= 2;\n  if(rep<1) rep = 1;\n  do {\n    rep *= 2;\n    t.reset();\n    BENCH(t,1,rep,prod<CoeffBasedProductMode>(a,b,c));\n  } while(t.best()<0.1);\n  \n  t.reset();\n  BENCH(t,5,rep,prod<Mode>(a,b,c));\n\n  print_mode(Mode);\n  std::cout << int(1e-6*n*rep/t.best()) << \"\\t\";\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/product_threshold.cpp", "function_name": "bench_prod", "index": 2136, "label": 0}
{"input": "AudioRenderer::AudioRenderer(FrameSource *source) {\n    frameSource = source;\n    audioTrack = nullptr;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/AudioRenderer.cpp", "function_name": "AudioRenderer::AudioRenderer", "index": 2137, "label": 0}
{"input": "inline ConstValue KernelInfoImpl<T>::GetTensorConstantInput(size_t index, int* is_constant) const {\n  const OrtValue* out = nullptr;\n  ThrowOnError(GetApi().KernelInfoGetConstantInput_tensor(this->p_, index, is_constant, &out));\n  return ConstValue{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::GetTensorConstantInput", "index": 2138, "label": 0}
{"input": "void RgbVideoRenderer::surfaceCreated(NativeWindowType window, int videoWidth, int videoHeight) {\n    eglRenderer->setWindow(window);\n    eglRenderer->setVideoSize(videoWidth, videoHeight);\n    if (eglRenderer->initialize()) {\n        isEglInit = progRgb->buildProgram();\n        isEglInit = progAlpha->buildProgram();\n    }\n\n    LOGE(\"VideoRenderer\", \"surfaceCreated isEglInit %d\", isEglInit);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/RgbVideoRenderer.cpp", "function_name": "RgbVideoRenderer::surfaceCreated", "index": 2139, "label": 0}
{"input": "CustomBoard() :\n        boot_button_(BOOT_BUTTON_GPIO) {\n        InitializePowerSaveTimer();\n        InitializeI2c();\n        InitializeTca9554();\n        InitializeAxp2101();\n        InitializeSpi();\n        InitializeLcdDisplay();\n        \n        if (esp_reset_reason() == ESP_RST_POWERON) {\n            fflush(stdout);\n            esp_restart();\n        }\n        InitializeTouch();\n        InitializeButtons();\n        InitializeCamera();\n        InitializeTools();\n        GetBacklight()->RestoreBrightness();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "dc4e82abaf84c008357394562fd1b7e28334f8a3", "file_path": "main/boards/esp32-s3-touch-lcd-3.5/esp32-s3-touch-lcd-3.5.cc", "function_name": "CustomBoard", "index": 2140, "label": 0}
{"input": "void PastixBase<Derived>::factorize(ColSpMatrix& mat)\n{\n\n  eigen_assert(m_analysisIsOk && \"The analysis phase should be called before the factorization phase\");\n  m_iparm(IPARM_START_TASK) = API_TASK_NUMFACT;\n  m_iparm(IPARM_END_TASK) = API_TASK_NUMFACT;\n  m_size = internal::convert_index<int>(mat.rows());\n  \n  internal::eigen_pastix(&m_pastixdata, MPI_COMM_WORLD, m_size, mat.outerIndexPtr(), mat.innerIndexPtr(),\n               mat.valuePtr(), m_perm.data(), m_invp.data(), 0, 0, m_iparm.data(), m_dparm.data());\n  \n  \n  if(m_iparm(IPARM_ERROR_NUMBER))\n  {\n    m_info = NumericalIssue;\n    m_factorizationIsOk = false;\n    m_isInitialized = false;\n  }\n  else\n  {\n    m_info = Success;\n    m_factorizationIsOk = true;\n    m_isInitialized = true;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "PastixBase<Derived>::factorize", "index": 2141, "label": 0}
{"input": "void jacobisvd(const MatrixType& a = MatrixType(), bool pickrandom = true)\n{\n  MatrixType m = a;\n  if(pickrandom)\n    svd_fill_random(m);\n\n  CALL_SUBTEST(( svd_test_all_computation_options<JacobiSVD<MatrixType, FullPivHouseholderQRPreconditioner> >(m, true)  )); \n  CALL_SUBTEST(( svd_test_all_computation_options<JacobiSVD<MatrixType, ColPivHouseholderQRPreconditioner>  >(m, false) ));\n  CALL_SUBTEST(( svd_test_all_computation_options<JacobiSVD<MatrixType, HouseholderQRPreconditioner>        >(m, false) ));\n  if(m.rows()==m.cols())\n    CALL_SUBTEST(( svd_test_all_computation_options<JacobiSVD<MatrixType, NoQRPreconditioner>               >(m, false) ));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/jacobisvd.cpp", "function_name": "jacobisvd", "index": 2142, "label": 0}
{"input": "inline void mpreal::set_prec(mp_prec_t prec, mp_rnd_t rnd_mode)\n{\n    mpfr_prec_round(mpfr_ptr(),prec,rnd_mode);\n    MPREAL_MSVC_DEBUGVIEW_CODE;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::set_prec", "index": 2143, "label": 0}
{"input": "NdArray<double> nth_root(const NdArray<dtype1>& inArray, dtype2 inRoot)\n    {\n        NdArray<double> returnArray(inArray.shape());\n        stl_algorithms::transform(inArray.cbegin(),\n                                  inArray.cend(),\n                                  returnArray.begin(),\n                                  [inRoot](dtype1 inValue) noexcept -> double { return nth_root(inValue, inRoot); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nth_root.hpp", "function_name": "nth_root", "index": 2144, "label": 0}
{"input": "void test_lazy_all_layout(int rows=Rows, int cols=Cols, int depth=Depth)\n{\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,ColMajor,ColMajor,ColMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,RowMajor,ColMajor,ColMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,ColMajor,RowMajor,ColMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,RowMajor,RowMajor,ColMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,ColMajor,ColMajor,RowMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,RowMajor,ColMajor,RowMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,ColMajor,RowMajor,RowMajor>(rows,cols,depth) ));\n  CALL_SUBTEST(( test_lazy_single<T,Rows,Cols,Depth,RowMajor,RowMajor,RowMajor>(rows,cols,depth) ));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_small.cpp", "function_name": "test_lazy_all_layout", "index": 2145, "label": 0}
{"input": "explicit Centroid(const Cluster<dtype>& inCluster) :\n            intensity_(inCluster.intensity()),\n            eod_(inCluster.eod())\n        {\n            centerOfMass(inCluster);\n            setEllipseProperties(inCluster);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/ImageProcessing/Centroid.hpp", "function_name": "Centroid", "index": 2146, "label": 0}
{"input": "explicit DiagonalPreconditioner(const MatType& mat) : m_invdiag(mat.cols())\n    {\n      compute(mat);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h", "function_name": "DiagonalPreconditioner", "index": 2147, "label": 0}
{"input": "std::pair<ForwardIt, ForwardIt> minmax_element(ForwardIt first, ForwardIt last, Compare comp) CONDITIONAL_NO_EXCEPT\n    {\n        return std::minmax_element(\n#ifdef PARALLEL_ALGORITHMS_SUPPORTED\n            std::execution::par_unseq,\n#endif\n            first,\n            last,\n            comp);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp", "function_name": "minmax_element", "index": 2148, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    TensorSlicingOp<const StartIndices, const Sizes, Derived>\n    slice(const StartIndices& startIndices, const Sizes& sizes) {\n      return TensorSlicingOp<const StartIndices, const Sizes, Derived>(derived(), startIndices, sizes);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    TensorSlicingOp<const StartIndices, const Sizes, Derived>\n    slice", "index": 2149, "label": 0}
{"input": "void testMatrixLogarithm(const MatrixType& A)\n{\n  typedef typename internal::traits<MatrixType>::Scalar Scalar;\n  typedef typename NumTraits<Scalar>::Real RealScalar;\n\n  MatrixType scaledA;\n  RealScalar maxImagPartOfSpectrum = A.eigenvalues().imag().cwiseAbs().maxCoeff();\n  if (maxImagPartOfSpectrum >= RealScalar(0.9L * EIGEN_PI))\n    scaledA = A * RealScalar(0.9L * EIGEN_PI) / maxImagPartOfSpectrum;\n  else\n    scaledA = A;\n\n  \n  MatrixType expA = scaledA.exp();\n  MatrixType logExpA = expA.log();\n  VERIFY_IS_APPROX(logExpA, scaledA);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_function.cpp", "function_name": "testMatrixLogarithm", "index": 2150, "label": 0}
{"input": "NdArray<dtype> take(const NdArray<dtype>& inArray, const Indices& inIndices, Axis inAxis = Axis::NONE)\n    {\n        switch (inAxis)\n        {\n            case Axis::NONE:\n            {\n                return inArray[inIndices];\n            }\n            case Axis::ROW:\n            {\n                return inArray(inIndices, inArray.cSlice());\n            }\n            case Axis::COL:\n            {\n                return inArray(inArray.rSlice(), inIndices);\n            }\n            default:\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"Unimplemented axis type.\");\n                return {}; \n            }\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/take.hpp", "function_name": "take", "index": 2151, "label": 0}
{"input": "explicit ComplexEigenSolver(const EigenBase<InputType>& matrix, bool computeEigenvectors = true)\n            : m_eivec(matrix.rows(),matrix.cols()),\n              m_eivalues(matrix.cols()),\n              m_schur(matrix.rows()),\n              m_isInitialized(false),\n              m_eigenvectorsOk(false),\n              m_matX(matrix.rows(),matrix.cols())\n    {\n      compute(matrix.derived(), computeEigenvectors);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h", "function_name": "ComplexEigenSolver", "index": 2152, "label": 0}
{"input": "void JSVMHostFunctionProxy::onFinalize(JSVM_Env env, void* finalizeData,\n                                       void* finalizeHint) {\n  if (finalizeData != nullptr) {\n    JSVMHostFunctionProxy* proxy =\n        reinterpret_cast<JSVMHostFunctionProxy*>(finalizeData);\n    delete proxy;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_host_function.cc", "function_name": "JSVMHostFunctionProxy::onFinalize", "index": 2153, "label": 0}
{"input": "EIGEN_DEVICE_FUNC TensorContractionInputMapper(const Tensor& tensor,\n                               const nocontract_t& nocontract_strides,\n                               const nocontract_t& ij_strides,\n                               const contract_t& contract_strides,\n                               const contract_t& k_strides)\n      : Base(tensor, nocontract_strides, ij_strides, contract_strides, k_strides) { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionMapper.h", "function_name": "tensor", "index": 2154, "label": 0}
{"input": "void EmojiWidget::SetStatus(const char* status)\n{\n    if (player_) {\n        if (strcmp(status, \"聆听中...\") == 0) {\n            player_->StartPlayer(MMAP_EMOJI_ASKING_AAF, true, 15);\n        } else if (strcmp(status, \"待命\") == 0) {\n            player_->StartPlayer(MMAP_EMOJI_WAKE_AAF, true, 15);\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/emoji_display.cc", "function_name": "EmojiWidget::SetStatus", "index": 2155, "label": 0}
{"input": "int TrtModel::doRunModel(void** arrin,void** arrout,void* stream,AiCfg* pcfg){\n    AiCfg* cfg = pcfg==nullptr?m_cfg:pcfg;\n    int incnt = cfg->size_inputs.size();\n    int outcnt = cfg->size_outputs.size();\n    std::cout<<\"incnt:\"<<incnt<<\"==outcnt:\"<<outcnt<<std::endl;\n    std::vector<void*> m_bindings(incnt+outcnt,NULL);\n    for(int k=0;k<incnt;k++){\n        std::cout<<\"in:\"<<cfg->size_inputs[k]<<std::endl;\n        m_bindings[k] = arrin[k];\n    }\n    for(int k=0;k<outcnt;k++){\n        std::cout<<\"out:\"<<cfg->size_outputs[k]<<std::endl;\n        m_bindings[incnt+k] = arrout[k];\n    }\n    bool status = m_context->enqueue(1,m_bindings.data(),(cudaStream_t)stream,nullptr);\n    return status?0:-1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/aimodel.cpp", "function_name": "TrtModel::doRunModel", "index": 2156, "label": 0}
{"input": "inline bool useSpecificBlockingSizes(Index& k, Index& m, Index& n)\n{\n#ifdef EIGEN_TEST_SPECIFIC_BLOCKING_SIZES\n  if (EIGEN_TEST_SPECIFIC_BLOCKING_SIZES) {\n    k = numext::mini<Index>(k, EIGEN_TEST_SPECIFIC_BLOCKING_SIZE_K);\n    m = numext::mini<Index>(m, EIGEN_TEST_SPECIFIC_BLOCKING_SIZE_M);\n    n = numext::mini<Index>(n, EIGEN_TEST_SPECIFIC_BLOCKING_SIZE_N);\n    return true;\n  }\n#else\n  EIGEN_UNUSED_VARIABLE(k)\n  EIGEN_UNUSED_VARIABLE(m)\n  EIGEN_UNUSED_VARIABLE(n)\n#endif\n  return false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "useSpecificBlockingSizes", "index": 2157, "label": 0}
{"input": "inline Unowned<const MemoryInfo> Allocator::GetInfo() const {\n  const OrtMemoryInfo* out = nullptr;\n  ThrowOnError(GetApi().AllocatorGetInfo(p_, &out));\n  return Unowned<const MemoryInfo>(const_cast<OrtMemoryInfo*>(out));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Allocator::GetInfo", "index": 2158, "label": 0}
{"input": "inline void IncompleteCholesky<Scalar,_UpLo, OrderingType>::updateList(Ref<const VectorIx> colPtr, Ref<VectorIx> rowIdx, Ref<VectorSx> vals, const Index& col, const Index& jk, VectorIx& firstElt, VectorList& listCol)\n{\n  if (jk < colPtr(col+1) )\n  {\n    Index p = colPtr(col+1) - jk;\n    Index minpos; \n    rowIdx.segment(jk,p).minCoeff(&minpos);\n    minpos += jk;\n    if (rowIdx(minpos) != rowIdx(jk))\n    {\n      \n      std::swap(rowIdx(jk),rowIdx(minpos));\n      std::swap(vals(jk),vals(minpos));\n    }\n    firstElt(col) = internal::convert_index<StorageIndex,Index>(jk);\n    listCol[rowIdx(jk)].push_back(internal::convert_index<StorageIndex,Index>(col));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h", "function_name": "IncompleteCholesky<Scalar,_UpLo, OrderingType>::updateList", "index": 2159, "label": 0}
{"input": "inline cl_int clEnqueueCopyBufferToImage(cl_command_queue p0, cl_mem p1, cl_mem p2, size_t p3, const size_t* p4, const size_t* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyBufferToImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueCopyBufferToImage", "index": 2160, "label": 0}
{"input": "unsigned long FrameSource::popVidRecyle(JMat **frame) {\n    unsigned long size = videoRecyleQueue->front(frame);\n    if (size > 0) {\n        videoRecyleQueue->pop();\n    }\n    return size;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/FrameSource.cpp", "function_name": "FrameSource::popVidRecyle", "index": 2161, "label": 0}
{"input": "polygamma(const Scalar& n, const Scalar& x) {\n    return EIGEN_MATHFUNC_IMPL(polygamma, Scalar)::run(n, x);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsImpl.h", "function_name": "polygamma", "index": 2162, "label": 0}
{"input": "void test_conjugate_gradient_T()\n{\n  typedef SparseMatrix<T,0,I> SparseMatrixType;\n  ConjugateGradient<SparseMatrixType, Lower      > cg_colmajor_lower_diag;\n  ConjugateGradient<SparseMatrixType, Upper      > cg_colmajor_upper_diag;\n  ConjugateGradient<SparseMatrixType, Lower|Upper> cg_colmajor_loup_diag;\n  ConjugateGradient<SparseMatrixType, Lower, IdentityPreconditioner> cg_colmajor_lower_I;\n  ConjugateGradient<SparseMatrixType, Upper, IdentityPreconditioner> cg_colmajor_upper_I;\n\n  CALL_SUBTEST( check_sparse_spd_solving(cg_colmajor_lower_diag)  );\n  CALL_SUBTEST( check_sparse_spd_solving(cg_colmajor_upper_diag)  );\n  CALL_SUBTEST( check_sparse_spd_solving(cg_colmajor_loup_diag)   );\n  CALL_SUBTEST( check_sparse_spd_solving(cg_colmajor_lower_I)     );\n  CALL_SUBTEST( check_sparse_spd_solving(cg_colmajor_upper_I)     );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/conjugate_gradient.cpp", "function_name": "test_conjugate_gradient_T", "index": 2163, "label": 0}
{"input": "void printGLString(const char *name, GLenum s) {\n    const char *v = (const char *) glGetString(s);\n    LOGI(TAG, \"GL %s = %s\\n\", name, v);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/GlesProgram.cpp", "function_name": "printGLString", "index": 2164, "label": 0}
{"input": "[[nodiscard]] self_type rows(const NdArray<size_type>& inRows) const\n        {\n            auto       returnArray = self_type(inRows.size(), shape_.cols);\n            const auto cSlice      = returnArray.cSlice();\n\n            for (size_type i = 0; i < inRows.size(); ++i)\n            {\n                returnArray.put(i, cSlice, row(inRows[i]));\n            }\n\n            return returnArray;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inRows", "index": 2165, "label": 0}
{"input": "__global__ void ReductionInitKernel(const CoeffType val, Index num_preserved_coeffs, CoeffType* output) {\n  const Index thread_id = blockIdx.x * blockDim.x + threadIdx.x;\n  const Index num_threads = blockDim.x * gridDim.x;\n  for (Index i = thread_id; i < num_preserved_coeffs; i += num_threads) {\n    output[i] = val;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "ReductionInitKernel", "index": 2166, "label": 0}
{"input": "static ModelConfig ConfigPaliGemma2_3B_448() {\n  ModelConfig config = ConfigGemma2_2B();\n  config.model_name = \"PaliGemma2_3B_448\";\n  config.model = Model::PALIGEMMA2_3B_448;\n  AddVitConfig(config, 448);\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "331d2ccc025e379f880a4eaa017b5f1db35ab24c", "file_path": "gemma/configs.cc", "function_name": "ConfigPaliGemma2_3B_448", "index": 2167, "label": 0}
{"input": "EIGEN_DEVICE_FUNC array(std::initializer_list<T> l) : dummy() {\n    eigen_assert(l.size() == 0);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/EmulateArray.h", "function_name": "std::initializer_list<T>", "index": 2168, "label": 0}
{"input": "static EIGEN_STRONG_INLINE bool update(MatrixType& mat, TranspositionType& transpositions, Workspace& tmp, WType& w, const typename MatrixType::RealScalar& sigma=1)\n  {\n    Transpose<MatrixType> matt(mat);\n    return ldlt_inplace<Lower>::update(matt, transpositions, tmp, w.conjugate(), sigma);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LDLT.h", "function_name": "update", "index": 2169, "label": 0}
{"input": "inline brotli_decompressor::brotli_decompressor() {\n  decoder_s = BrotliDecoderCreateInstance(0, 0, 0);\n  decoder_r = decoder_s ? BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT\n                        : BROTLI_DECODER_RESULT_ERROR;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "brotli_decompressor::brotli_decompressor", "index": 2170, "label": 0}
{"input": "virtual ~KMeansIndex()\n    {\n        if (root_ != NULL) {\n            free_centers();\n            delete[] root_;\n        }\n        if (indices_!=NULL) {\n            free_indices();\n            delete[] indices_;\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kmeans_index.h", "function_name": "~KMeansIndex", "index": 2171, "label": 0}
{"input": "void roots_to_monicPolynomial( const RootVector& rv, Polynomial& poly )\n{\n\n  typedef typename Polynomial::Scalar Scalar;\n\n  poly.setZero( rv.size()+1 );\n  poly[0] = -rv[0]; poly[1] = Scalar(1);\n  for( DenseIndex i=1; i< rv.size(); ++i )\n  {\n    for( DenseIndex j=i+1; j>0; --j ){ poly[j] = poly[j-1] - rv[i]*poly[j]; }\n    poly[0] = -rv[i]*poly[0];\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h", "function_name": "roots_to_monicPolynomial", "index": 2172, "label": 0}
{"input": "static void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)\n  {\n    generic_product_impl<Lhs, Rhs>::addTo(dst,src.lhs(),src.rhs());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseProduct.h", "function_name": "internal::add_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>", "index": 2173, "label": 0}
{"input": "inline BlockImpl(XprType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)\n      : m_matrix(xpr), m_startRow(convert_index(startRow)), m_startCol(convert_index(startCol)), m_blockRows(convert_index(blockRows)), m_blockCols(convert_index(blockCols))\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseBlock.h", "function_name": "BlockImpl", "index": 2174, "label": 0}
{"input": "static void test_comparison_sugar() {\n  \n  \n  Tensor<int, 3> t(6, 7, 5);\n\n  t.setRandom();\n  \n  t(0,0,0) = 0;\n\n  Tensor<bool,0> b;\n\n#define TEST_TENSOR_EQUAL(e1, e2) \\\n  b = ((e1) == (e2)).all();       \\\n  VERIFY(b())\n\n#define TEST_OP(op) TEST_TENSOR_EQUAL(t op 0, t op t.constant(0))\n\n  TEST_OP(==);\n  TEST_OP(!=);\n  TEST_OP(<=);\n  TEST_OP(>=);\n  TEST_OP(<);\n  TEST_OP(>);\n#undef TEST_OP\n#undef TEST_TENSOR_EQUAL\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_sugar.cpp", "function_name": "test_comparison_sugar", "index": 2175, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::SwitchLynxDebug(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return SetSwitch(std::move(args), tasm::LynxEnv::kLynxDebugEnabled);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::SwitchLynxDebug", "index": 2176, "label": 0}
{"input": "static void test_array_zip_and_apply()\n{\n  array<int, 6> a{{4, 8, 15, 16, 23, 42}};\n  array<int, 6> b{{0, 1, 2, 3, 4, 5}};\n  array<int, 6> c{{4, 9, 17, 19, 27, 47}};\n  array<int, 6> d{{0, 8, 30, 48, 92, 210}};\n  array<int, 6> e{{0, 2, 4, 6, 8, 10}};\n\n  VERIFY((array_zip<sum_op>(a, b) == c));\n  VERIFY((array_zip<product_op>(a, b) == d));\n  VERIFY((array_apply<times2_op>(b) == e));\n  VERIFY_IS_EQUAL((array_apply_and_reduce<sum_op, times2_op>(a)), 216);\n  VERIFY_IS_EQUAL((array_apply_and_reduce<sum_op, times2_op>(b)), 30);\n  VERIFY_IS_EQUAL((array_zip_and_reduce<product_op, sum_op>(a, b)), 14755932);\n  VERIFY_IS_EQUAL((array_zip_and_reduce<sum_op, product_op>(a, b)), 388);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_meta.cpp", "function_name": "test_array_zip_and_apply", "index": 2177, "label": 0}
{"input": "inline std::vector<Value> Ort::IoBinding::GetOutputValues() const {\n  AllocatorWithDefaultOptions allocator;\n  return GetOutputValuesHelper(allocator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Ort::IoBinding::GetOutputValues", "index": 2178, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline explicit Hyperplane(const Hyperplane<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)\n  { m_coeffs = other.coeffs().template cast<Scalar>(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Hyperplane.h", "function_name": "Hyperplane", "index": 2179, "label": 0}
{"input": "std::shared_ptr<piper::Runtime> RuntimeManager::CreateRuntime(\n    const std::string& group_id,\n    std::shared_ptr<piper::JSIExceptionHandler> exception_handler,\n    bool force_use_lightweight_js_engine, int64_t rt_id, bool enable_bytecode,\n    const std::string& bytecode_source_url,\n    piper::BytecodeGetter bytecode_getter) {\n  auto js_runtime = MakeRuntime(force_use_lightweight_js_engine);\n  js_runtime->setRuntimeId(rt_id);\n  js_runtime->SetEnableUserBytecode(enable_bytecode);\n  js_runtime->SetBytecodeSourceUrl(bytecode_source_url);\n  js_runtime->SetBytecodeGetter(std::move(bytecode_getter));\n  return js_runtime;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5419d4c4cd7795fd30d486e3a515d918055bcbb0", "file_path": "core/runtime/piper/js/runtime_manager.cc", "function_name": "RuntimeManager::CreateRuntime", "index": 2180, "label": 0}
{"input": "void dump(const NdArray<dtype>& inArray, const std::string& inFilename)\n    {\n        inArray.dump(inFilename);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/dump.hpp", "function_name": "dump", "index": 2181, "label": 0}
{"input": "void gather(std::vector<T*> &data) const\n    {\n        CV_Assert(cleanupMode == false);  \n        CV_Assert(data.empty());\n        {\n            std::vector<void*> &dataVoid = reinterpret_cast<std::vector<void*>&>(data);\n            TLSDataContainer::gatherData(dataVoid);\n        }\n        {\n            AutoLock lock(mutex);\n            data.reserve(data.size() + dataFromTerminatedThreads.size());\n            for (typename std::vector<T*>::const_iterator i = dataFromTerminatedThreads.begin(); i != dataFromTerminatedThreads.end(); ++i)\n            {\n                data.push_back((T*)*i);\n            }\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/utils/tls.hpp", "function_name": "std::vector<T*>", "index": 2182, "label": 0}
{"input": "explicit Timer(const std::string& inName) :\n            name_(inName + \" \"),\n            start_(ChronoClock::now())\n        {\n            setUnits();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Timer.hpp", "function_name": "Timer", "index": 2183, "label": 0}
{"input": "ArkUI_NodeAttributeType UIInput::GetPlaceholderAttributeType() const {\n  return NODE_TEXT_INPUT_PLACEHOLDER_FONT;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_input.cc", "function_name": "UIInput::GetPlaceholderAttributeType", "index": 2184, "label": 0}
{"input": "void TemplateAssembler::SetCSSVariables(\n    const std::string& component_id, const std::string& id_selector,\n    const lepus::Value& properties,\n    std::shared_ptr<PipelineOptions>& pipeline_options) {\n  pipeline_context_manager_->CreateAndUpdateCurrentPipelineContext(\n      pipeline_options);\n  page_proxy()->SetCSSVariables(component_id, id_selector, properties,\n                                pipeline_options);\n  this->RunPixelPipeline();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "46d7efb240e97f9e8fb7c3167b9dd405efbf5a0c", "file_path": "core/renderer/template_assembler.cc", "function_name": "TemplateAssembler::SetCSSVariables", "index": 2185, "label": 0}
{"input": "bool AfeWakeWord::GetWakeWordOpus(std::vector<uint8_t>& opus) {\n    std::unique_lock<std::mutex> lock(wake_word_mutex_);\n    wake_word_cv_.wait(lock, [this]() {\n        return !wake_word_opus_.empty();\n    });\n    opus.swap(wake_word_opus_.front());\n    wake_word_opus_.pop_front();\n    return !opus.empty();\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::GetWakeWordOpus", "index": 2186, "label": 0}
{"input": "NdArray<dtypeOut> ones_like(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        NdArray<dtypeOut> returnArray(inArray.shape());\n        returnArray.ones();\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/ones_like.hpp", "function_name": "ones_like", "index": 2187, "label": 0}
{"input": "EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS\nPacket pcosh(const Packet& a) { using std::cosh; return cosh(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "pcosh", "index": 2188, "label": 0}
{"input": "inline MemoryAllocation AllocatorImpl<T>::GetAllocation(size_t size) {\n  void* out;\n  ThrowOnError(GetApi().AllocatorAlloc(this->p_, size, &out));\n  MemoryAllocation result(this->p_, out, size);\n  return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "AllocatorImpl<T>::GetAllocation", "index": 2189, "label": 0}
{"input": "inline typename DenseBase<Derived>::ColwiseReturnType\nDenseBase<Derived>::colwise()\n{\n  return ColwiseReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "DenseBase<Derived>::colwise", "index": 2190, "label": 0}
{"input": "TimeUnit toc(bool printElapsedTime = true)\n        {\n            const auto duration = std::chrono::duration_cast<TimeUnit>(ChronoClock::now() - start_);\n\n            if (printElapsedTime)\n            {\n                std::cout << name_ << \"Elapsed Time = \" << duration.count() << unit_ << std::endl;\n            }\n\n            return duration;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Timer.hpp", "function_name": "printElapsedTime", "index": 2191, "label": 0}
{"input": "void  exColorBlend_LinearLight(uint8* T,uint8* A,uint8* B)   { ColorBlend_Buffer(T,A,B,LinearLight);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "exColorBlend_LinearLight", "index": 2192, "label": 0}
{"input": "void getExactNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, float epsError)\n    {\n        \n\n        if (trees_ > 1) {\n            fprintf(stderr,\"It doesn't make any sense to use more than one tree for exact search\");\n        }\n        if (trees_>0) {\n            searchLevelExact(result, vec, tree_roots_[0], 0.0, epsError);\n        }\n        CV_Assert(result.full());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kdtree_index.h", "function_name": "epsError", "index": 2193, "label": 0}
{"input": "void Benchmark::Register(const char* name, void (*fn)(int), void (*fn_range)(int, int)) {\n  name_ = name;\n  fn_ = fn;\n  fn_range_ = fn_range;\n  if (fn_ == NULL && fn_range_ == NULL) {\n    fprintf(stderr, \"%s: missing function\\n\", name_);\n    exit(EXIT_FAILURE);\n  }\n  gBenchmarks().insert(std::make_pair(name, this));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/benchmark_main.cc", "function_name": "Benchmark::Register", "index": 2194, "label": 0}
{"input": "inline __m256i _lasx_packus_h(const __m256i& a, const __m256i& b)\n{\n    __m256i u8min = __lasx_xvreplgr2vr_h(0);\n    __m256i u8max = __lasx_xvreplgr2vr_h(255);\n    __m256i sat_a = __lasx_xvmax_h(a, u8min);\n            sat_a = __lasx_xvmin_h(sat_a, u8max);\n    __m256i sat_b = __lasx_xvmax_h(b, u8min);\n            sat_b = __lasx_xvmin_h(sat_b, u8max);\n    __m256i byteIndex = _v256_setr_b(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,\n                                     0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30);\n    return __lasx_xvshuf_b(sat_b, sat_a, byteIndex);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_lasx_packus_h", "index": 2195, "label": 0}
{"input": "void test_cxx11_meta()\n{\n  CALL_SUBTEST(test_gen_numeric_list());\n  CALL_SUBTEST(test_concat());\n  CALL_SUBTEST(test_slice());\n  CALL_SUBTEST(test_get());\n  CALL_SUBTEST(test_id());\n  CALL_SUBTEST(test_is_same_gf());\n  CALL_SUBTEST(test_apply_op());\n  CALL_SUBTEST(test_contained_in_list());\n  CALL_SUBTEST(test_arg_reductions());\n  CALL_SUBTEST(test_array_reverse_and_reduce());\n  CALL_SUBTEST(test_array_zip_and_apply());\n  CALL_SUBTEST(test_array_misc());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_meta.cpp", "function_name": "test_cxx11_meta", "index": 2196, "label": 0}
{"input": "JNIEXPORT jint JNICALL Java_com_btows_ncnntest_SCRFDNcnn_netrstpic(JNIEnv* env, jobject thiz,jstring picfile, jintArray arrbox, jint index,jstring dumpfn){\n        std::string s_pic = getStringUTF(env,picfile);\n        std::string s_dump = getStringUTF(env,dumpfn);\n        jint *boxData = (jint*) env->GetIntArrayElements( arrbox, NULL);\n        int rst =  g_digit->netrstpic(s_pic.c_str(),(int*)boxData,index,s_dump.c_str());\n        __android_log_print(ANDROID_LOG_DEBUG, \"tooken\", \"picrst %d\",rst);\n        env->ReleaseIntArrayElements( arrbox, boxData, 0);\n        return rst;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_netrstpic", "index": 2197, "label": 0}
{"input": "void loadIndex(FILE* stream) CV_OVERRIDE\n    {\n        load_value(stream, table_number_);\n        load_value(stream, key_size_);\n        load_value(stream, multi_probe_level_);\n        load_value(stream, dataset_);\n        \n        buildIndex();\n\n        index_params_[\"algorithm\"] = getType();\n        index_params_[\"table_number\"] = table_number_;\n        index_params_[\"key_size\"] = key_size_;\n        index_params_[\"multi_probe_level\"] = multi_probe_level_;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/lsh_index.h", "function_name": "stream", "index": 2198, "label": 0}
{"input": "void  exColorBlend_LinearDodge(uint8* T,uint8* A,uint8* B)   { ColorBlend_Buffer(T,A,B,LinearDodge);}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/blendgram.cpp", "function_name": "exColorBlend_LinearDodge", "index": 2199, "label": 0}
{"input": "bool PastixBase<Base>::_solve_impl(const MatrixBase<Rhs> &b, MatrixBase<Dest> &x) const\n{\n  eigen_assert(m_isInitialized && \"The matrix should be factorized first\");\n  EIGEN_STATIC_ASSERT((Dest::Flags&RowMajorBit)==0,\n                     THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES);\n  int rhs = 1;\n  \n  x = b; \n  \n  for (int i = 0; i < b.cols(); i++){\n    m_iparm[IPARM_START_TASK]          = API_TASK_SOLVE;\n    m_iparm[IPARM_END_TASK]            = API_TASK_REFINE;\n  \n    internal::eigen_pastix(&m_pastixdata, MPI_COMM_WORLD, internal::convert_index<int>(x.rows()), 0, 0, 0,\n                           m_perm.data(), m_invp.data(), &x(0, i), rhs, m_iparm.data(), m_dparm.data());\n  }\n  \n  \n  m_info = m_iparm(IPARM_ERROR_NUMBER)==0 ? Success : NumericalIssue;\n  \n  return m_iparm(IPARM_ERROR_NUMBER)==0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "PastixBase<Base>::_solve_impl", "index": 2200, "label": 0}
{"input": "inline MappedSparseMatrix(Index rows, Index cols, Index nnz, StorageIndex* outerIndexPtr, StorageIndex* innerIndexPtr, Scalar* valuePtr, StorageIndex* innerNonZeroPtr = 0)\n      : Base(rows, cols, nnz, outerIndexPtr, innerIndexPtr, valuePtr, innerNonZeroPtr)\n    {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/MappedSparseMatrix.h", "function_name": "MappedSparseMatrix", "index": 2201, "label": 0}
{"input": "CV_WRAP static inline\nvoid HoughLinesWithAccumulator(\n        InputArray image, OutputArray lines,\n        double rho, double theta, int threshold,\n        double srn = 0, double stn = 0,\n        double min_theta = 0, double max_theta = CV_PI\n)\n{\n    std::vector<Vec3f> lines_acc;\n    HoughLines(image, lines_acc, rho, theta, threshold, srn, stn, min_theta, max_theta);\n    Mat(lines_acc).copyTo(lines);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/bindings.hpp", "function_name": "HoughLinesWithAccumulator", "index": 2202, "label": 0}
{"input": "explicit PastixLDLT(const MatrixType& matrix):Base()\n    {\n      init();\n      compute(matrix);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PaStiXSupport/PaStiXSupport.h", "function_name": "PastixLDLT", "index": 2203, "label": 0}
{"input": "inline int64 _v256_extract_epi64(const __m256i& a)\n{\n#if defined(CV__SIMD_HAVE_mm256_extract_epi8) || (CV_AVX2 && (!defined(_MSC_VER) || _MSC_VER >= 1910))\n    return _mm256_extract_epi64(a, i);\n#else\n    __m128i b = _mm256_extractf128_si256(a, ((i) >> 1));\n    return _mm_extract_epi64(b, i & 1);  \n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx.hpp", "function_name": "_v256_extract_epi64", "index": 2204, "label": 0}
{"input": "inline const mpreal sec   (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(sec  );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "sec", "index": 2205, "label": 0}
{"input": "void Append(Key key) {\n    \n    \n    if (HWY_UNLIKELY(num_unique_ >= capacity_)) {\n      const size_t NU64 = Allocator::VectorBytes() / sizeof(Key);\n      \n      if (HWY_UNLIKELY(capacity_ == 0)) {\n        capacity_ = hwy::DivCeil(NU64, 2);  \n      }\n      capacity_ *= 2;\n      HWY_DASSERT(capacity_ >= num_unique_ + 1);\n      hwy::AlignedFreeUniquePtr<Key[]> new_keys =\n          hwy::AllocateAligned<Key>(capacity_);\n      hwy::CopyBytes(keys_.get(), new_keys.get(), num_unique_ * sizeof(Key));\n      \n      for (size_t i = num_unique_; i < hwy::RoundUpTo(num_unique_, NU64); ++i) {\n        new_keys[i] = kPadding;\n      }\n      keys_.swap(new_keys);\n    }\n    keys_[num_unique_++] = key;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "key", "index": 2206, "label": 0}
{"input": "MemoryMonitor::~MemoryMonitor() {\n  if (Enable()) {\n    \n    memory_records_.clear();\n    ReportMemory();\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/services/performance/memory_monitor/memory_monitor.cc", "function_name": "MemoryMonitor::~MemoryMonitor", "index": 2207, "label": 0}
{"input": "EIGEN_STRONG_INLINE\nRealScalar positive_real_hypot(const RealScalar& x, const RealScalar& y)\n{\n  EIGEN_USING_STD_MATH(sqrt);\n  RealScalar p, qp;\n  p = numext::maxi(x,y);\n  if(p==RealScalar(0)) return RealScalar(0);\n  qp = numext::mini(y,x) / p;    \n  return p * sqrt(RealScalar(1) + qp*qp);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/MathFunctionsImpl.h", "function_name": "positive_real_hypot", "index": 2208, "label": 0}
{"input": "inline typename FullPivHouseholderQR<MatrixType>::MatrixQReturnType FullPivHouseholderQR<MatrixType>::matrixQ() const\n{\n  eigen_assert(m_isInitialized && \"FullPivHouseholderQR is not initialized.\");\n  return MatrixQReturnType(m_qr, m_hCoeffs, m_rows_transpositions);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h", "function_name": "FullPivHouseholderQR<MatrixType>::matrixQ", "index": 2209, "label": 0}
{"input": "int RenderHelper::renderVideo(int arg1, long arg2) {\n    if (!videoRenderer->isRenderValid()) {\n        return ERROR_EXIST;\n    }\n    uint64_t temp;\n    if (avSyncMethod == FELLOW_CLOCK) {\n        nowPts = (getTickCount64() - startPts) * 1000 + firstFramePts;\n        int nowPtsSecond = nowPts / 1000 / 1000;\n        messageSource->pushMessage(MSG_DOMAIN_TIME, nowPtsSecond, 0);\n        \n        temp = videoRenderer->render(firstFramePts != 0 ? nowPts : MAX_PTS);\n    } else {\n        temp = videoRenderer->render(nowPts);\n    }\n    if (temp > 0) {\n        if (!hasNotifyFirstFrame) {\n            firstFramePts = temp;\n            hasNotifyFirstFrame = true;\n            messageSource->pushMessage(MSG_DOMAIN_STATE, STATE_STARTED, 0);\n        }\n    } else {\n        if (stopWhenEmpty) {\n            stopWhenEmpty = false;\n            return ERROR_EXIST;\n        }\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/RenderHelper.cpp", "function_name": "RenderHelper::renderVideo", "index": 2210, "label": 0}
{"input": "[[nodiscard]] self_type row(size_type inRow) const\n        {\n            return self_type(cbegin(inRow), cend(inRow));\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inRow", "index": 2211, "label": 0}
{"input": "int LoopWenet::calcinx(KWav* wavmat,int index){\n    float* pwav = NULL;\n    float* pmfcc = NULL;\n    float* pbnf = NULL;\n    int melcnt = 0;\n    int bnfcnt = 0;\n    int rst = wavmat->calcbuf(index, &pwav,&pmfcc,&pbnf,&melcnt,&bnfcnt);\n    LOGE(TAG,\"===tooken calcinx %d index %d \\n\",index,rst);\n    if(rst == index){\n        m_wenet->calcmfcc(pwav,pmfcc);\n    \n        m_wenet->calcbnf(pmfcc,melcnt,pbnf,bnfcnt);\n    \n    \n        \n        wavmat->finishone(index);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "LoopWenet::calcinx", "index": 2212, "label": 0}
{"input": "void MatrixXd_set_coeff(C_MatrixXd *m, int i, int j, double coeff)\n{\n  c_to_eigen(m)(i,j) = coeff;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mix_eigen_and_c/binary_library.cpp", "function_name": "MatrixXd_set_coeff", "index": 2213, "label": 0}
{"input": "void CustomOpBase<TOp, TKernel, WithStatus>::GetSessionConfigs(std::unordered_map<std::string, std::string>& out,\n                                                               ConstSessionOptions options) const {\n  const TOp* derived = static_cast<const TOp*>(this);\n  std::vector<std::string> keys = derived->GetSessionConfigKeys();\n\n  out.reserve(keys.size());\n\n  std::string config_entry_key = detail::MakeCustomOpConfigEntryKey(derived->GetName(), \"\");\n  const size_t prefix_size = config_entry_key.length();\n\n  for (const auto& key : keys) {\n    config_entry_key.resize(prefix_size);\n    config_entry_key.append(key);\n    out[key] = options.GetConfigEntryOrDefault(config_entry_key.c_str(), \"\");\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "CustomOpBase<TOp, TKernel, WithStatus>::GetSessionConfigs", "index": 2214, "label": 0}
{"input": "void AfeWakeWord::OnWakeWordDetected(std::function<void(const std::string& wake_word)> callback) {\n    wake_word_detected_callback_ = callback;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::OnWakeWordDetected", "index": 2215, "label": 0}
{"input": "double bug_1222() {\n  typedef Eigen::AutoDiffScalar<Eigen::Vector3d> AD;\n  const double _cv1_3 = 1.0;\n  const AD chi_3 = 1.0;\n  \n  const AD denom = chi_3 + _cv1_3;\n  return denom.value();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "bug_1222", "index": 2216, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketT load(Index i) const {\n    EIGEN_STATIC_ASSERT((internal::is_same<PacketT, Packet>::value), YOU_MADE_A_PROGRAMMING_MISTAKE);\n    const int ActualAlignment = (AlignmentType == Aligned) && (Alignment == Aligned) ? Aligned : Unaligned;\n    if (UseDirectOffsets) {\n     return m_base_mapper.template loadPacket<ActualAlignment>(i, 0);\n    }\n    return m_base_mapper.template loadPacket<ActualAlignment>(i + m_vert_offset, m_horiz_offset);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionMapper.h", "function_name": "load", "index": 2217, "label": 0}
{"input": "inline IndexType  colamd_r(IndexType n_row)\n{ return IndexType(((n_row) + 1) * sizeof (Colamd_Row<IndexType>) / sizeof (IndexType)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/OrderingMethods/Eigen_Colamd.h", "function_name": "colamd_r", "index": 2218, "label": 0}
{"input": "indexing_functor(const ArgType& arg, const RowIndexType& row_indices, const ColIndexType& col_indices)\n    : m_arg(arg), m_rowIndices(row_indices), m_colIndices(col_indices)\n  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/nullary_indexing.cpp", "function_name": "indexing_functor", "index": 2219, "label": 0}
{"input": "void solve_with_guess(SparseSolverBase<Solver>& solver, const SparseMatrixBase<Rhs>& b, const Guess& , Result& x) {\n  x = solver.derived().solve(b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "solve_with_guess", "index": 2220, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE const TensorConversionOp<NewType, const Derived>\n    cast() const {\n      return TensorConversionOp<NewType, const Derived>(derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE const TensorConversionOp<NewType, const Derived>\n    cast", "index": 2221, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline typename ParametrizedLine<_Scalar, _AmbientDim,_Options>::VectorType\nParametrizedLine<_Scalar, _AmbientDim,_Options>::intersectionPoint(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane) const\n{\n  return pointAt(intersectionParameter(hyperplane));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/ParametrizedLine.h", "function_name": "ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersectionPoint", "index": 2222, "label": 0}
{"input": "PYBIND11_MODULE(compression, m) {\n  py::enum_<CompressorMode>(m, \"CompressorMode\")\n      .value(\"TEST_ONLY\", CompressorMode::kTEST_ONLY)\n      .value(\"NO_TOC\", CompressorMode::kNO_TOC)\n      .value(\"WITH_TOC\", CompressorMode::kWITH_TOC);\n\n  py::class_<SbsWriter>(m, \"SbsWriter\")\n      .def(py::init<CompressorMode>())\n      \n      \n      .def(\"insert\", wrap_span_typed<&SbsWriter::Insert>)\n      .def(\"insert_sfp\", wrap_span<&SbsWriter::InsertSfp>)\n      .def(\"insert_nuq\", wrap_span<&SbsWriter::InsertNUQ>)\n      .def(\"insert_bf16\", wrap_span<&SbsWriter::InsertBfloat16>)\n      .def(\"insert_float\", wrap_span<&SbsWriter::InsertFloat>)\n      .def(\"TEST_ONLY\"0, &SbsWriter::AddScales)\n      .def(\"TEST_ONLY\"1, &SbsWriter::DebugNumBlobsAdded)\n      .def(\"TEST_ONLY\"2, &SbsWriter::Write);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "e69bc3bc1c5e9b478662437a3bf7c9a0d9d2eace", "file_path": "compression/python/compression_extension.cc", "function_name": "PYBIND11_MODULE", "index": 2223, "label": 0}
{"input": "CV_DEPRECATED void save(String filename)\n    {\n        if (nnIndex_L1) nnIndex_L1->save(filename);\n        if (nnIndex_L2) nnIndex_L2->save(filename);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann.hpp", "function_name": "filename", "index": 2224, "label": 0}
{"input": "GC::Ptr<WebIDL::CallbackType> OffscreenCanvas::oncontextrestored()\n{\n    return event_handler_attribute(HTML::EventNames::contextrestored);\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::oncontextrestored", "index": 2225, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::EnableDomTree(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return SetSwitch(std::move(args), tasm::LynxEnv::kLynxEnableDomTree);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::EnableDomTree", "index": 2226, "label": 0}
{"input": "CV_INLINE  CvScalar  cvScalarAll( double val0123 )\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvScalar scalar = CV_STRUCT_INITIALIZER;\n#else\n    CvScalar scalar;\n#endif\n    scalar.val[0] = val0123;\n    scalar.val[1] = val0123;\n    scalar.val[2] = val0123;\n    scalar.val[3] = val0123;\n    return scalar;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvScalarAll", "index": 2227, "label": 0}
{"input": "void PostCacheGenerationTaskForTesting(\n    const std::string& template_url,\n    std::unordered_map<std::string, JsContent> js_contents) {\n  for (const auto& iter : js_contents) {\n    source_url_for_testing += iter.first;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/js_cache_manager_facade_unittest.cc", "function_name": "PostCacheGenerationTaskForTesting", "index": 2228, "label": 0}
{"input": "void VisitFields(IFieldsVisitor& visitor) override {\n    visitor(model_family_version);\n    visitor(model_name);\n    visitor(model);\n    visitor(wrapping);\n    visitor(weight);\n    visitor(num_layers);\n    visitor(model_dim);\n    visitor(vocab_size);\n    visitor(seq_len);\n    visitor(num_tensor_scales);\n    visitor(att_cap);\n    visitor(final_cap);\n    visitor(absolute_pe);\n    visitor(use_local_attention);\n    visitor(query_scale);\n    visitor(layer_configs);\n    visitor(attention_window_sizes);\n    visitor(norm_num_groups);\n    visitor(vit_model_dim);\n    visitor(vit_seq_len);\n    visitor(num_vit_scales);\n    visitor(vit_layer_configs);\n    visitor(patch_width);\n    visitor(image_size);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.h", "function_name": "visitor", "index": 2229, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmplt2(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetlt2(a, b);\n        c = r << 16;        \n        r = c - r;          \n    #else\n        asm(\"not.b32 %0, %0;\" : \"+r\"(a));\n        c = vavg2(a, b);    \n        c = c & 0x80008000; \n        r = c >> 15;        \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmplt2", "index": 2230, "label": 0}
{"input": "explicit CwiseUnaryOp(const XprType& xpr, const UnaryOp& func = UnaryOp())\n      : m_xpr(xpr), m_functor(func) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseUnaryOp.h", "function_name": "CwiseUnaryOp", "index": 2231, "label": 0}
{"input": "EIGEN_STRONG_INLINE const typename SkylineProductReturnType<Derived, OtherDerived>::Type\nSkylineMatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const {\n\n    return typename SkylineProductReturnType<Derived, OtherDerived>::Type(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h", "function_name": "SkylineMatrixBase<Derived>::operator*", "index": 2232, "label": 0}
{"input": "EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar\nDenseBase<Derived>::mean() const\n{\n#ifdef __INTEL_COMPILER\n  #pragma warning push\n  #pragma warning ( disable : 2259 )\n#endif\n  return Scalar(derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>())) / Scalar(this->size());\n#ifdef __INTEL_COMPILER\n  #pragma warning pop\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Redux.h", "function_name": "DenseBase<Derived>::mean", "index": 2233, "label": 0}
{"input": "void adolc_forward_jacobian(const Func& f)\n{\n    typename Func::InputType x = Func::InputType::Random(f.inputs());\n    typename Func::ValueType y(f.values()), yref(f.values());\n    typename Func::JacobianType j(f.values(),f.inputs()), jref(f.values(),f.inputs());\n\n    jref.setZero();\n    yref.setZero();\n    f(x,&yref,&jref);\n\n\n\n    j.setZero();\n    y.setZero();\n    AdolcForwardJacobian<Func> autoj(f);\n    autoj(x, &y, &j);\n\n\n\n    VERIFY_IS_APPROX(y, yref);\n    VERIFY_IS_APPROX(j, jref);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/forward_adolc.cpp", "function_name": "adolc_forward_jacobian", "index": 2234, "label": 0}
{"input": "void Otto::Crusaito(float steps, int period, int height, int dir) {\n    int A[SERVO_COUNT] = {25, 25, height, height, 0, 0};\n    int O[SERVO_COUNT] = {\n        0, 0, height / 2 + 4, -height / 2 - 4, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    double phase_diff[SERVO_COUNT] = {90, 90, DEG2RAD(0), DEG2RAD(-60 * dir), 0, 0};\n\n    \n    Execute(A, O, period, phase_diff, steps);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::Crusaito", "index": 2235, "label": 0}
{"input": "inline bool Quat<T>::operator==(const Quat<T> &q) const\n{\n    return (abs(w - q.w) < CV_QUAT_EPS && abs(x - q.x) < CV_QUAT_EPS && abs(y - q.y) < CV_QUAT_EPS && abs(z - q.z) < CV_QUAT_EPS);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::operator==", "index": 2236, "label": 0}
{"input": "void EspWakeWord::OnWakeWordDetected(std::function<void(const std::string& wake_word)> callback) {\n    wake_word_detected_callback_ = callback;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/esp_wake_word.cc", "function_name": "EspWakeWord::OnWakeWordDetected", "index": 2237, "label": 0}
{"input": "void write_xy_file(const string & filename, vector<int> & tab_sizes, vector<double> & tab_mflops){\n\n  ofstream output_file (filename.c_str(),ios::out) ;\n  \n  for (int i=0 ; i < tab_sizes.size() ; i++)\n    {\n      output_file << tab_sizes[i] << \" \" <<  tab_mflops[i] << endl ;\n    }\n  \n  output_file.close();\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/data/smooth.cxx", "function_name": "write_xy_file", "index": 2238, "label": 0}
{"input": "bool is_number_of_subsets_feasible(size_t n, size_t p)\n{ \n  assert(n>0 && p>0 && p<=n);\n  uint64_t numerator = 1, denominator = 1;\n  for (size_t i = 0; i < p; i++) {\n    numerator *= n - i;\n    denominator *= i + 1;\n    if (numerator > denominator * number_of_subsets_limit) {\n      return false;\n    }\n  }\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "is_number_of_subsets_feasible", "index": 2239, "label": 0}
{"input": "int  KMat::vtacc(KMat* mat){\n    float* pt0 = (float*)m_buf;\n    const int stride = 532*532;\n    uint8_t pct[stride];\n    float* p0 = pt0;\n    float* p1 = p0+stride;\n    float* p2 = p1+stride;\n    float* psum = mat->fdata();\n    float* pd = psum;\n    for(int k=0;k<stride;k++){\n        *pd++ = *p0+++*p1+++*p2++;\n    }\n    float* pmean = psum + stride;\n    float* pt = pmean;\n    pd = psum;\n    p1 = pt0+stride;\n    for(int k=0;k<stride;k++){\n        *pt++ = (*pd++-*p1++)*0.5f;\n    }\n    uint8_t* pc = pct;\n    p1 = pt0+stride;\n    pt = pmean;\n    for(int k=0;k<stride;k++){\n        *pc++ = *p1++>*pt++; \n    }\n    memcpy(psum,pt0,stride*sizeof(float));\n    memcpy(psum+2*stride,pt0+2*stride,stride*sizeof(float));\n    \n    pc = pct;\n    p1 = pt0+stride;\n    pt = pmean;\n    \n    for(int k=0;k<stride;k++){\n        if(*pc++){\n            pt++;p1++;\n        }else{\n            *pt++ = *p1++;\n        }\n        \n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/src/kmatx86.cpp", "function_name": "KMat::vtacc", "index": 2240, "label": 0}
{"input": "EIGEN_DEVICE_FUNC bool DenseBase<Derived>::isConstant\n(const Scalar& val, const RealScalar& prec) const\n{\n  return isApproxToConstant(val, prec);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::isConstant", "index": 2241, "label": 0}
{"input": "inline bool parse_multipart_boundary(const std::string &content_type,\n                                     std::string &boundary) {\n  auto boundary_keyword = \"boundary=\";\n  auto pos = content_type.find(boundary_keyword);\n  if (pos == std::string::npos) { return false; }\n  auto end = content_type.find(';', pos);\n  auto beg = pos + strlen(boundary_keyword);\n  boundary = trim_double_quotes_copy(content_type.substr(beg, end - beg));\n  return !boundary.empty();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "parse_multipart_boundary", "index": 2242, "label": 0}
{"input": "NdArray<dtype> newbyteorder(const NdArray<dtype>& inArray, Endian inEndianess)\n    {\n        return inArray.newbyteorder(inEndianess);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/newbyteorder.hpp", "function_name": "newbyteorder", "index": 2243, "label": 0}
{"input": "JSVM_Value JSVMHostObjectProxy::setProperty(JSVM_Env env, JSVM_Value name,\n                                            JSVM_Value property,\n                                            JSVM_Value this_arg,\n                                            JSVM_Value data) {\n  JSVMHostObjectProxy* proxy_ptr = nullptr;\n  JSVM_CALL(\n      OH_JSVM_Unwrap(env, this_arg, reinterpret_cast<void**>(&proxy_ptr)));\n  JSVMRuntime* rt = nullptr;\n  std::shared_ptr<HostObject> lock_host_object;\n  if (proxy_ptr == nullptr ||\n      !proxy_ptr->GetRuntimeAndHost(rt, lock_host_object)) {\n    LOGE(\"JSVMHostObjectProxy::getProperty Error!\");\n    return nullptr;\n  }\n\n  lock_host_object->set(rt, JSVMHelper::createPropNameID(name, env),\n                        JSVMHelper::createValue(property, env));\n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_host_object.cc", "function_name": "JSVMHostObjectProxy::setProperty", "index": 2244, "label": 0}
{"input": "inline void read_file(const std::string &path, std::string &out) {\n  std::ifstream fs(path, std::ios_base::binary);\n  fs.seekg(0, std::ios_base::end);\n  auto size = fs.tellg();\n  fs.seekg(0);\n  out.resize(static_cast<size_t>(size));\n  fs.read(&out[0], static_cast<std::streamsize>(size));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "read_file", "index": 2245, "label": 0}
{"input": "explicit FullPivHouseholderQR(EigenBase<InputType>& matrix)\n      : m_qr(matrix.derived()),\n        m_hCoeffs((std::min)(matrix.rows(), matrix.cols())),\n        m_rows_transpositions((std::min)(matrix.rows(), matrix.cols())),\n        m_cols_transpositions((std::min)(matrix.rows(), matrix.cols())),\n        m_cols_permutation(matrix.cols()),\n        m_temp(matrix.cols()),\n        m_isInitialized(false),\n        m_usePrescribedThreshold(false)\n    {\n      computeInPlace();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h", "function_name": "FullPivHouseholderQR", "index": 2246, "label": 0}
{"input": "inline bool cpuid_is_vendor(int abcd[4], const int vendor[3])\n{\n  return abcd[1]==vendor[0] && abcd[3]==vendor[1] && abcd[2]==vendor[2];\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "cpuid_is_vendor", "index": 2247, "label": 0}
{"input": "inline v_float32 vx_lut_quads(const float* ptr, const int* idx) { return VXPREFIX(_lut_quads)(ptr, idx); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin.hpp", "function_name": "vx_lut_quads", "index": 2248, "label": 0}
{"input": "inline\ncv::Affine3<T>::Affine3(const Eigen::Transform<T, 3, Eigen::Affine>& affine)\n{\n    Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)> a = affine;\n    cv::Mat(4, 4, cv::traits::Type<T>::value, a.matrix().data()).copyTo(matrix);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/affine.hpp", "function_name": "cv::Affine3<T>::Affine3", "index": 2249, "label": 0}
{"input": "inline\nSparseMatConstIterator_<_Tp> SparseMat_<_Tp>::end() const\n{\n    SparseMatConstIterator_<_Tp> it(this);\n    it.seekEnd();\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat_<_Tp>::end", "index": 2250, "label": 0}
{"input": "inline\nvoid cv::ogl::Buffer::create(Size asize, int atype, Target target, bool autoRelease)\n{\n    create(asize.height, asize.width, atype, target, autoRelease);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opengl.hpp", "function_name": "cv::ogl::Buffer::create", "index": 2251, "label": 0}
{"input": "static inline bool IsOneKC(MMOrder order) {\n  return order == MMOrder::kNT || order == MMOrder::kNT_MT;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "IsOneKC", "index": 2252, "label": 0}
{"input": "void test_determinant()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    int s = 0;\n    CALL_SUBTEST_1( determinant(Matrix<float, 1, 1>()) );\n    CALL_SUBTEST_2( determinant(Matrix<double, 2, 2>()) );\n    CALL_SUBTEST_3( determinant(Matrix<double, 3, 3>()) );\n    CALL_SUBTEST_4( determinant(Matrix<double, 4, 4>()) );\n    CALL_SUBTEST_5( determinant(Matrix<std::complex<double>, 10, 10>()) );\n    s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE/4);\n    CALL_SUBTEST_6( determinant(MatrixXd(s, s)) );\n    TEST_SET_BUT_UNUSED_VARIABLE(s)\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/determinant.cpp", "function_name": "test_determinant", "index": 2253, "label": 0}
{"input": "bool ComputedCSSStyle::SetListMainAxisGap(const tasm::CSSValue& value,\n                                          const bool reset) {\n  return CSSStyleUtils::ComputeLengthStyle(\n      value, reset, length_context_,\n      layout_computed_style_.linear_data_.Access()->list_main_axis_gap_,\n      DefaultLayoutStyle::SL_DEFAULT_ZEROLENGTH(), parser_configs_);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "008159012885478d92b89ffe2d5b1d73dab8ed09", "file_path": "core/renderer/css/computed_css_style.cc", "function_name": "ComputedCSSStyle::SetListMainAxisGap", "index": 2254, "label": 0}
{"input": "lynx_api_status lynx_value_print(lynx_api_env env, lynx_value value,\n                                 void* stream,\n                                 lynx_value_print_callback callback) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_print", "index": 2255, "label": 0}
{"input": "double bug_1223() {\n  using std::min;\n  typedef Eigen::AutoDiffScalar<Eigen::Vector3d> AD;\n\n  const double _cv1_3 = 1.0;\n  const AD chi_3 = 1.0;\n  const AD denom = 1.0;\n\n  \n  \n  #define EIGEN_TEST_SPACE\n  const AD t = min EIGEN_TEST_SPACE (denom / chi_3, 1.0);\n\n  const AD t2 = min EIGEN_TEST_SPACE (denom / (chi_3 * _cv1_3), 1.0);\n\n  return t.value() + t2.value();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/autodiff.cpp", "function_name": "bug_1223", "index": 2256, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nEIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)\ncwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const\n{\n  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h", "function_name": "cwiseProduct", "index": 2257, "label": 0}
{"input": "bool MatrixBase<Derived>::isUnitary(const RealScalar& prec) const\n{\n  typename internal::nested_eval<Derived,1>::type self(derived());\n  for(Index i = 0; i < cols(); ++i)\n  {\n    if(!internal::isApprox(self.col(i).squaredNorm(), static_cast<RealScalar>(1), prec))\n      return false;\n    for(Index j = 0; j < i; ++j)\n      if(!internal::isMuchSmallerThan(self.col(i).dot(self.col(j)), static_cast<Scalar>(1), prec))\n        return false;\n  }\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Dot.h", "function_name": "MatrixBase<Derived>::isUnitary", "index": 2258, "label": 0}
{"input": "inline gzip_decompressor::gzip_decompressor() {\n  std::memset(&strm_, 0, sizeof(strm_));\n  strm_.zalloc = Z_NULL;\n  strm_.zfree = Z_NULL;\n  strm_.opaque = Z_NULL;\n\n  \n  \n  \n  \n  is_valid_ = inflateInit2(&strm_, 32 + 15) == Z_OK;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "gzip_decompressor::gzip_decompressor", "index": 2259, "label": 0}
{"input": "static inline MatShape concat(const MatShape& a, const MatShape& b)\n{\n    MatShape c = a;\n    c.insert(c.end(), b.begin(), b.end());\n\n    return c;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/shape_utils.hpp", "function_name": "concat", "index": 2260, "label": 0}
{"input": "CwiseTernaryOp(const Arg1& a1, const Arg2& a2,\n                                     const Arg3& a3,\n                                     const TernaryOp& func = TernaryOp())\n      : m_arg1(a1), m_arg2(a2), m_arg3(a3), m_functor(func) {\n    \n    EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Arg1, Arg2)\n    EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Arg1, Arg3)\n\n    \n    EIGEN_STATIC_ASSERT((internal::is_same<\n                         typename internal::traits<Arg1Type>::StorageKind,\n                         typename internal::traits<Arg2Type>::StorageKind>::value),\n                        STORAGE_KIND_MUST_MATCH)\n    EIGEN_STATIC_ASSERT((internal::is_same<\n                         typename internal::traits<Arg1Type>::StorageKind,\n                         typename internal::traits<Arg3Type>::StorageKind>::value),\n                        STORAGE_KIND_MUST_MATCH)\n\n    eigen_assert(a1.rows() == a2.rows() && a1.cols() == a2.cols() &&\n                 a1.rows() == a3.rows() && a1.cols() == a3.cols());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseTernaryOp.h", "function_name": "CwiseTernaryOp", "index": 2261, "label": 0}
{"input": "Scalar stem_function_sin(Scalar x, int n)\n{\n  using std::cos;\n  using std::sin;\n  Scalar res;\n\n  switch (n % 4) {\n  case 0:\n    res = std::sin(x);\n    break;\n  case 1:\n    res = std::cos(x);\n    break;\n  case 2:\n    res = -std::sin(x);\n    break;\n  case 3:\n    res = -std::cos(x);\n    break;\n  }\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h", "function_name": "stem_function_sin", "index": 2262, "label": 0}
{"input": "void ElementManager::RequestLayout(\n    const std::shared_ptr<PipelineOptions> &options) {\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, ELEMENT_MANAGER_REQUEST_LAYOUT);\n  if (!IsLayoutInElementModeOn()) {\n    DispatchLayoutUpdates(options);\n    return;\n  }\n\n  \n  \n  if (has_viewport_ready_ && root()->is_page()) {\n    if (options->need_timestamps) {\n      painting_context()->MarkUIOperationQueueFlushTiming(\n          tasm::timing::kPaintingUiOperationExecuteEnd, options->pipeline_id);\n    }\n\n    if (options->need_timestamps) {\n      tasm::TimingCollector::Instance()->Mark(tasm::timing::kLayoutStart);\n    }\n\n    static_cast<PageElement *>(root())->Layout(options);\n\n    if (options->need_timestamps) {\n      tasm::TimingCollector::Instance()->Mark(tasm::timing::kLayoutEnd);\n    }\n\n    painting_context()->FinishLayoutOperation(options);\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "ff3d1a5ec243e04fc83365c13d15653a8aabb4df", "file_path": "core/renderer/dom/element_manager.cc", "function_name": "ElementManager::RequestLayout", "index": 2263, "label": 0}
{"input": "int MyDigit::drawpic(const char* picfn){\n    if(!inited)return -999;\n    std::string picfile(picfn);\n    JMat mat(picfile,1);\n    \n    drawMat(&mat,NULL);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/scrfdncnn.cpp", "function_name": "MyDigit::drawpic", "index": 2264, "label": 0}
{"input": "inline mpreal machine_epsilon(const mpreal& x)\n{\n    \n    if( x < 0)\n    {\n        return nextabove(-x) + x;\n    }else{\n        return nextabove( x) - x;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "machine_epsilon", "index": 2265, "label": 0}
{"input": "void BDCSVD<MatrixType>::deflation43(Index firstCol, Index shift, Index i, Index size)\n{\n  using std::abs;\n  using std::sqrt;\n  using std::pow;\n  Index start = firstCol + shift;\n  RealScalar c = m_computed(start, start);\n  RealScalar s = m_computed(start+i, start);\n  RealScalar r = numext::hypot(c,s);\n  if (r == Literal(0))\n  {\n    m_computed(start+i, start+i) = Literal(0);\n    return;\n  }\n  m_computed(start,start) = r;  \n  m_computed(start+i, start) = Literal(0);\n  m_computed(start+i, start+i) = Literal(0);\n  \n  JacobiRotation<RealScalar> J(c/r,-s/r);\n  if (m_compU)  m_naiveU.middleRows(firstCol, size+1).applyOnTheRight(firstCol, firstCol+i, J);\n  else          m_naiveU.applyOnTheRight(firstCol, firstCol+i, J);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/BDCSVD.h", "function_name": "BDCSVD<MatrixType>::deflation43", "index": 2266, "label": 0}
{"input": "inline\nMatx<_Tp, m, 1> Matx<_Tp, m, n>::col(int j) const\n{\n    CV_DbgAssert((unsigned)j < (unsigned)n);\n    Matx<_Tp, m, 1> v;\n    for( int i = 0; i < m; i++ )\n        v.val[i] = val[i*n + j];\n    return v;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp, m, n>::col", "index": 2267, "label": 0}
{"input": "std::string XDBFWrapper::GetString(EXDBFLanguage language, uint16_t id) const\n{\n    auto languageBlock = GetResource(XDBF_SPA_NAMESPACE_STRING_TABLE, (uint64_t)language);\n\n    if (!languageBlock)\n        return \"\";\n\n    auto pHeader = (XSTRHeader*)languageBlock.pBuffer;\n    auto seek = languageBlock.pBuffer + sizeof(XSTRHeader);\n\n    for (int i = 0; i < pHeader->StringCount; i++)\n    {\n        auto entry = (XSTREntry*)seek;\n\n        seek += sizeof(XSTREntry);\n\n        if (entry->ID == id)\n            return std::string((const char*)seek, entry->Length);\n\n        seek += entry->Length;\n    }\n\n    return \"\";\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "dd85501f1166d368fe0d5fa8ff91387b9c2abaf8", "file_path": "PowerUtils/xdbf_wrapper.cpp", "function_name": "XDBFWrapper::GetString", "index": 2268, "label": 0}
{"input": "bool Oscillator::NextSample() {\n    current_millis_ = millis();\n\n    if (current_millis_ - previous_millis_ > sampling_period_) {\n        previous_millis_ = current_millis_;\n        return true;\n    }\n\n    return false;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/oscillator.cc", "function_name": "Oscillator::NextSample", "index": 2269, "label": 0}
{"input": "void ChordLengths(const PointArrayType& pts, KnotVectorType& chord_lengths)\n  {\n    typedef typename KnotVectorType::Scalar Scalar;\n\n    const DenseIndex n = pts.cols();\n\n    \n    chord_lengths.resize(pts.cols());\n    chord_lengths[0] = 0;\n    chord_lengths.rightCols(n-1) = (pts.array().leftCols(n-1) - pts.array().rightCols(n-1)).matrix().colwise().norm();\n\n    \n    std::partial_sum(chord_lengths.data(), chord_lengths.data()+n, chord_lengths.data());\n\n    \n    chord_lengths /= chord_lengths(n-1);\n    chord_lengths(n-1) = Scalar(1);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/SplineFitting.h", "function_name": "ChordLengths", "index": 2270, "label": 0}
{"input": "static Key KeyFromDims(size_t M, size_t K, size_t N) {\n    HWY_DASSERT(M < (Key{1} << 16));  \n    HWY_DASSERT(K < (Key{1} << 24));\n    HWY_DASSERT(N < (Key{1} << 24));\n    const Key key = static_cast<Key>(M) | (static_cast<Key>(K) << 16) |\n                    (static_cast<Key>(N) << 40);\n    HWY_DASSERT(key != kPadding);\n    return key;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "M", "index": 2271, "label": 0}
{"input": "inline Result ClientImpl::Head(const std::string &path,\n                               const Headers &headers) {\n  Request req;\n  req.method = \"HEAD\";\n  req.headers = headers;\n  req.path = path;\n\n  return send_(std::move(req));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::Head", "index": 2272, "label": 0}
{"input": "TensorStridingSlicingOp(\n    const XprType& expr, const StartIndices& startIndices,\n    const StopIndices& stopIndices, const Strides& strides)\n      : m_xpr(expr), m_startIndices(startIndices), m_stopIndices(stopIndices),\n        m_strides(strides) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorMorphing.h", "function_name": "TensorStridingSlicingOp", "index": 2273, "label": 0}
{"input": "inline int _v256_extract_b(const __m256i& a)\n{\n    int des[1] = {0};\n    __lasx_xvstelm_b(a, des, 0, i);\n    return des[0];\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_extract_b", "index": 2274, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline explicit Rotation2D(const Rotation2D<OtherScalarType>& other)\n  {\n    m_angle = Scalar(other.angle());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Rotation2D.h", "function_name": "Rotation2D", "index": 2275, "label": 0}
{"input": "inline typename NumTraits<typename internal::traits<Derived>::Scalar>::Real\nSparseMatrixBase<Derived>::norm() const\n{\n  using std::sqrt;\n  return sqrt(squaredNorm());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseDot.h", "function_name": "SparseMatrixBase<Derived>::norm", "index": 2276, "label": 0}
{"input": "OPENCV_HAL_IMPL_RVV_EXPAND(v_int64x2, int, v_int32x4, 32, i32, vwcvt_x_x_v_i64m1, 2)\n\ninline v_uint32x4 v_load_expand_q(const uchar* ptr)\n{\n    return v_uint32x4(vwcvtu_x_x_v_u32m1(vwcvtu_x_x_v_u16mf2(vle8_v_u8mf4(ptr, 4), 4), 4));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv.hpp", "function_name": "OPENCV_HAL_IMPL_RVV_EXPAND", "index": 2277, "label": 0}
{"input": "FMT_BEGIN_NAMESPACE\n\ntemplate <>\nstruct formatter<hf3fs::meta::server::FileSession> : formatter<std::string_view> {\n  template <typename FormatContext>\n  auto format(const hf3fs::meta::server::FileSession &session, FormatContext &ctx) const {\n    return fmt::format_to(ctx.out(),\n                          \"{{inodeId {}, client {}, session {}}}\",\n                          session.inodeId,\n                          session.clientId,\n                          session.sessionId);\n  }\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "165f09a7b440bed77ee6310d4e9342caf01fd182", "file_path": "src/meta/components/SessionManager.h", "function_name": "unknown_function", "index": 2278, "label": 0}
{"input": "void test_commainitializer()\n{\n  Matrix3d m3;\n  Matrix4d m4;\n\n  VERIFY_RAISES_ASSERT( (m3 << 1, 2, 3, 4, 5, 6, 7, 8) );\n  \n  #ifndef _MSC_VER\n  VERIFY_RAISES_ASSERT( (m3 << 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) );\n  #endif\n\n  double data[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n  Matrix3d ref = Map<Matrix<double,3,3,RowMajor> >(data);\n\n  m3 = Matrix3d::Random();\n  m3 << 1, 2, 3, 4, 5, 6, 7, 8, 9;\n  VERIFY_IS_APPROX(m3, ref );\n\n  Vector3d vec[3];\n  vec[0] << 1, 4, 7;\n  vec[1] << 2, 5, 8;\n  vec[2] << 3, 6, 9;\n  m3 = Matrix3d::Random();\n  m3 << vec[0], vec[1], vec[2];\n  VERIFY_IS_APPROX(m3, ref);\n\n  vec[0] << 1, 2, 3;\n  vec[1] << 4, 5, 6;\n  vec[2] << 7, 8, 9;\n  m3 = Matrix3d::Random();\n  m3 << vec[0].transpose(),\n        4, 5, 6,\n        vec[2].transpose();\n  VERIFY_IS_APPROX(m3, ref);\n\n\n  \n  test_block_recursion<(1<<8) - 1>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/commainitializer.cpp", "function_name": "test_commainitializer", "index": 2279, "label": 0}
{"input": "inline const mpreal ai      (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(ai);          }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "ai", "index": 2280, "label": 0}
{"input": "void UIBaseInput::GetValue(\n    const lepus::Value& args,\n    base::MoveOnlyClosure<void, int32_t, const lepus::Value&> callback) {\n  const std::string value = NodeManager::Instance().GetAttribute<std::string>(\n      input_node_, GetTextAttributeType());\n  const auto ret = lepus::Dictionary::Create();\n  ret->SetValue(\"value\", std::move(value));\n  bool focused = NodeManager::Instance().GetAttribute<int>(\n                     input_node_, NODE_FOCUS_STATUS) == 1;\n\n  auto cursor = NodeManager::Instance().GetAttribute(\n      input_node_, GetSelectionAttributeType());\n\n  auto selectionStart = focused ? cursor->value[0].i32 : -1;\n  auto selectionEnd = focused ? cursor->value[1].i32 : -1;\n\n  ret->SetValue(\"selectionStart\", selectionStart);\n  ret->SetValue(\"selectionEnd\", selectionEnd);\n  ret->SetValue(\"isComposing\", false);\n\n  callback(LynxGetUIResult::SUCCESS, lepus::Value(ret));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::GetValue", "index": 2281, "label": 0}
{"input": "inline long long          mpreal::toLLong  (mp_rnd_t mode)  const    {    return  mpfr_get_sj (mpfr_srcptr(), mode);    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "mpreal::toLLong", "index": 2282, "label": 0}
{"input": "static int calcall(gjdigit_t* dg, KWav* wavmat){\n    int rst =wavmat->readyall();\n    int cnt = 0;\n    while(cnt<1000){\n        rst = wavmat->isready();\n        if(!rst)break;\n        calcinx(dg,wavmat,rst);\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "calcall", "index": 2283, "label": 0}
{"input": "inline int close_socket(socket_t sock) {\n#ifdef _WIN32\n  return closesocket(sock);\n#else\n  return close(sock);\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "close_socket", "index": 2284, "label": 0}
{"input": "inline OrtMemType MemoryInfo::GetMemoryType() const {\n  OrtMemType type;\n  ThrowOnError(GetApi().MemoryInfoGetMemType(*this, &type));\n  return type;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "MemoryInfo::GetMemoryType", "index": 2285, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline bool isApproxOrLessThan(const Scalar& x, const Scalar& y,\n                               const typename NumTraits<Scalar>::Real &precision = NumTraits<Scalar>::dummy_precision())\n{\n  return scalar_fuzzy_impl<Scalar>::isApproxOrLessThan(x, y, precision);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/MathFunctions.h", "function_name": "isApproxOrLessThan", "index": 2286, "label": 0}
{"input": "inline EncodingType encoding_type(const Request &req, const Response &res) {\n  auto ret =\n      detail::can_compress_content_type(res.get_header_value(\"Content-Type\"));\n  if (!ret) { return EncodingType::None; }\n\n  const auto &s = req.get_header_value(\"Accept-Encoding\");\n  (void)(s);\n\n#ifdef CPPHTTPLIB_BROTLI_SUPPORT\n  \n  ret = s.find(\"br\") != std::string::npos;\n  if (ret) { return EncodingType::Brotli; }\n#endif\n\n#ifdef CPPHTTPLIB_ZLIB_SUPPORT\n  \n  ret = s.find(\"gzip\") != std::string::npos;\n  if (ret) { return EncodingType::Gzip; }\n#endif\n\n  return EncodingType::None;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "encoding_type", "index": 2287, "label": 0}
{"input": "void pseudo_inverse(const CMatrix &C, CINVMatrix &CINV)\n{\n  \n  typedef typename CMatrix::Scalar Scalar;\n  typedef typename CMatrix::Index Index;\n  \n  typedef Matrix<Scalar,Dynamic,1> TmpVec;\n\n  Index rows = C.rows(), cols = C.cols();\n\n  TmpVec d(rows), e(rows), l(cols), p(rows), q(rows), r(rows);\n  Scalar rho, rho_1, alpha;\n  d.setZero();\n\n  typedef Triplet<double> T;\n  std::vector<T> tripletList;\n    \n  for (Index i = 0; i < rows; ++i)\n  {\n    d[i] = 1.0;\n    rho = 1.0;\n    e.setZero();\n    r = d;\n    p = d;\n\n    while (rho >= 1e-38)\n    { \n      \n      l = C.transpose() * p;\n      q = C * l;\n      alpha = rho / p.dot(q);\n      e +=  alpha * p;\n      r += -alpha * q;\n      rho_1 = rho;\n      rho = r.dot(r);\n      p = (rho/rho_1) * p + r;\n    }\n\n    l = C.transpose() * e; \n    \n    for (Index j=0; j<l.size(); ++j)\n      if (l[j]<1e-15)\n\ttripletList.push_back(T(i,j,l(j)));\n\n\t\n    d[i] = 0.0;\n  }\n  CINV.setFromTriplets(tripletList.begin(), tripletList.end());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h", "function_name": "pseudo_inverse", "index": 2288, "label": 0}
{"input": "inline const mpreal trunc(const mpreal& v)\n{\n    mpreal x(v);\n    mpfr_trunc(x.mp,v.mp);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "trunc", "index": 2289, "label": 0}
{"input": "void RenderingWidget::stopAnimation()\n{\n  disconnect(&m_timer, SIGNAL(timeout()), this, SLOT(animate()));\n  m_timer.stop();\n  mAnimate = false;\n  m_alpha = 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "RenderingWidget::stopAnimation", "index": 2290, "label": 0}
{"input": "auto comp_ellint_3(const NdArray<dtype1>& inArrayK, const NdArray<dtype2>& inArrayV)\n    {\n        if (inArrayK.size() != inArrayV.size())\n        {\n            THROW_INVALID_ARGUMENT_ERROR(\"Shapes of inArrayk and inArrayV must match.\");\n        }\n\n        NdArray<decltype(comp_ellint_3(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArrayK.shape());\n\n        stl_algorithms::transform(\n            inArrayK.cbegin(),\n            inArrayK.cend(),\n            inArrayV.cbegin(),\n            returnArray.begin(),\n            [](dtype1 inK, dtype2 inV) -> auto{ return comp_ellint_3(inK, inV); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/comp_ellint_3.hpp", "function_name": "comp_ellint_3", "index": 2291, "label": 0}
{"input": "void HouseholderQR<MatrixType>::computeInPlace()\n{\n  check_template_parameters();\n  \n  Index rows = m_qr.rows();\n  Index cols = m_qr.cols();\n  Index size = (std::min)(rows,cols);\n\n  m_hCoeffs.resize(size);\n\n  m_temp.resize(cols);\n\n  internal::householder_qr_inplace_blocked<MatrixType, HCoeffsType>::run(m_qr, m_hCoeffs, 48, m_temp.data());\n\n  m_isInitialized = true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/HouseholderQR.h", "function_name": "HouseholderQR<MatrixType>::computeInPlace", "index": 2292, "label": 0}
{"input": "explicit JacobiSVD(const MatrixType& matrix, unsigned int computationOptions = 0)\n    {\n      compute(matrix, computationOptions);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SVD/JacobiSVD.h", "function_name": "JacobiSVD", "index": 2293, "label": 0}
{"input": "void setScalarType()\n  {\n    if (internal::is_same<Scalar,float>::value)\n      Dtype = SLU_S;\n    else if (internal::is_same<Scalar,double>::value)\n      Dtype = SLU_D;\n    else if (internal::is_same<Scalar,std::complex<float> >::value)\n      Dtype = SLU_C;\n    else if (internal::is_same<Scalar,std::complex<double> >::value)\n      Dtype = SLU_Z;\n    else\n    {\n      eigen_assert(false && \"Scalar type not supported by SuperLU\");\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SuperLUSupport/SuperLUSupport.h", "function_name": "setScalarType", "index": 2294, "label": 0}
{"input": "std::vector<char> read_file(const char* path) {\n    std::ifstream input_file{path, std::ios::binary};\n    std::vector<char> ret{};\n\n    if (!input_file.good()) {\n        return ret;\n    }\n\n    \n    input_file.seekg(0, std::ios::end);\n    ret.resize(input_file.tellg());\n    \n    \n    input_file.seekg(0, std::ios::beg);\n    input_file.read(ret.data(), ret.size());\n\n    return ret;\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "dd7cac76ea37a92eabdda248d26efa2f2bf70d93", "file_path": "tools/file_to_c/file_to_c.cpp", "function_name": "read_file", "index": 2295, "label": 0}
{"input": "bool convert_to_wav(const std::string & temp_filename, std::string & error_resp) {\n    std::ostringstream cmd_stream;\n    std::string converted_filename_temp = temp_filename + \"_temp.wav\";\n    cmd_stream << \"ffmpeg -i \\\"\" << temp_filename << \"\\\" -y -ar 16000 -ac 1 -c:a pcm_s16le \\\"\" << converted_filename_temp << \"\\\" 2>&1\";\n    std::string cmd = cmd_stream.str();\n\n    int status = std::system(cmd.c_str());\n    if (status != 0) {\n        error_resp = \"{\\\"error\\\":\\\"FFmpeg conversion failed.\\\"}\";\n        return false;\n    }\n\n    \n    if (remove(temp_filename.c_str()) != 0) {\n        error_resp = \"{\\\"error\\\":\\\"Failed to remove the original file.\\\"}\";\n        return false;\n    }\n\n    \n    if (rename(converted_filename_temp.c_str(), temp_filename.c_str()) != 0) {\n        error_resp = \"{\\\"error\\\":\\\"Failed to rename the temporary file.\\\"}\";\n        return false;\n    }\n    return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/server.cpp", "function_name": "convert_to_wav", "index": 2296, "label": 0}
{"input": "static bool lower_efficiency(const results_entry_t& e1, const results_entry_t& e2) {\n    return e1.default_efficiency < e2.default_efficiency;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "e1", "index": 2297, "label": 0}
{"input": "NdArray<dtype> unique(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        const auto comp = [](const dtype lhs, const dtype rhs) noexcept -> bool\n        { return utils::essentiallyEqual(lhs, rhs); };\n\n        const auto sorted = sort(inArray);\n\n        std::vector<dtype> res(sorted.size());\n        const auto         last = stl_algorithms::unique_copy(sorted.begin(), sorted.end(), res.begin(), comp);\n\n        return NdArray<dtype>(res.begin(), last);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/unique.hpp", "function_name": "unique", "index": 2298, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline VectorType _transformVector(const OtherVectorType& v) const\n    { return toRotationMatrix() * v; }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/RotationBase.h", "function_name": "_transformVector", "index": 2299, "label": 0}
{"input": "String OffscreenCanvasRenderingContext2D::shadow_color() const\n{\n    \n    return drawing_state().shadow_color.to_string(Gfx::Color::HTMLCompatibleSerialization::Yes);\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::shadow_color", "index": 2300, "label": 0}
{"input": "EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Cols*m_rows); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/DenseStorage.h", "function_name": "~DenseStorage", "index": 2301, "label": 0}
{"input": "EIGEN_DEVICE_FUNC explicit inline Quaternion(const Quaternion<OtherScalar, OtherOptions>& other)\n  { m_coeffs = other.coeffs().template cast<Scalar>(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "Quaternion", "index": 2302, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_quotient_op<Scalar>, const Derived, const OtherDerived>\n    operator/(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_quotient_op<Scalar>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_quotient_op<Scalar>, const Derived, const OtherDerived>\n    operator/", "index": 2303, "label": 0}
{"input": "void UIImage::UpdateTintColor(const lepus::Value& value) {\n  CSSStringParser parser =\n      CSSStringParser::FromLepusString(value, CSSParserConfigs());\n  CSSValue color = parser.ParseCSSColor();\n  if (color.GetValue().IsEmpty()) {\n    LOGD(\"tint-color is either invalid or undefined, reset it\");\n    NodeManager::Instance().ResetAttribute(Node(), NODE_IMAGE_COLOR_FILTER);\n  } else {\n    tint_color_ = color.GetValue().UInt32();\n    dirty_flags_ |= kFlagTintColorChanged;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "7d7336c4eb6a1cad19aec65be50d0cef8055ae19", "file_path": "platform/harmony/lynx_harmony/src/main/cpp/ui/ui_image.cc", "function_name": "UIImage::UpdateTintColor", "index": 2304, "label": 0}
{"input": "static __host__ __device__ __forceinline__ float8 make_float8(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7)\n    {\n        float8 val = {a0, a1, a2, a3, a4, a5, a6, a7};\n        return val;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_traits.hpp", "function_name": "make_float8", "index": 2305, "label": 0}
{"input": "Matx<T, 4, 4> Quat<T>::toRotMat4x4(QuatAssumeType assumeUnit) const\n{\n    T a = w, b = x, c = y, d = z;\n    if (!assumeUnit)\n    {\n        Quat<T> qTemp = normalize();\n        a = qTemp.w;\n        b = qTemp.x;\n        c = qTemp.y;\n        d = qTemp.z;\n    }\n    Matx<T, 4, 4> R{\n        1 - 2 * (c * c + d * d), 2 * (b * c - a * d)    , 2 * (b * d + a * c)    , 0,\n        2 * (b * c + a * d)    , 1 - 2 * (b * b + d * d), 2 * (c * d - a * b)    , 0,\n        2 * (b * d - a * c)    , 2 * (c * d + a * b)    , 1 - 2 * (b * b + c * c), 0,\n        0                      , 0                      , 0                      , 1,\n    };\n    return R;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::toRotMat4x4", "index": 2306, "label": 0}
{"input": "static double pythag(double inA, double inB) noexcept\n        {\n            const double absa = std::abs(inA);\n            const double absb = std::abs(inB);\n            return (absa > absb\n                        ? absa * std::sqrt(1. + utils::sqr(absb / absa))\n                        : (utils::essentiallyEqual(absb, 0.) ? 0. : absb * std::sqrt(1. + utils::sqr(absa / absb))));\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Linalg/svd/SVDClass.hpp", "function_name": "inA", "index": 2307, "label": 0}
{"input": "static inline RV apply(const std::vector<Index>& idx, RV initial, Args&&... args)\n    {\n      eigen_assert(idx.size() == NumIndices);\n      return internal::tensor_static_symgroup_do_apply<ge>::template run<Op, RV, NumIndices>(idx, initial, args...);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/StaticSymmetry.h", "function_name": "apply", "index": 2308, "label": 0}
{"input": "__global__ void\n__launch_bounds__(512)\nEigenContractionKernel(const LhsMapper lhs, const RhsMapper rhs,\n                       const OutputMapper output,\n                       const Index m_size, const Index n_size, const Index k_size) {\n  __shared__ Scalar lhs_shmem[72 * 64];\n  __shared__ Scalar rhs_shmem[72 * 64];\n\n  const Index m_block_idx = blockIdx.x;\n  const Index n_block_idx = blockIdx.y;\n\n  const Index base_m = 64 * m_block_idx;\n  const Index base_n = 64 * n_block_idx;\n\n  if (base_m + 63 < m_size && base_n + 63 < n_size) {\n    EigenContractionKernelInternal<Scalar, Index, LhsMapper, RhsMapper, OutputMapper, false>(lhs, rhs, output, lhs_shmem, rhs_shmem, m_size, n_size, k_size);\n  } else {\n    EigenContractionKernelInternal<Scalar, Index, LhsMapper, RhsMapper, OutputMapper, true>(lhs, rhs, output, lhs_shmem, rhs_shmem, m_size, n_size, k_size);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionCuda.h", "function_name": "EigenContractionKernel", "index": 2309, "label": 0}
{"input": "BlobError ModelWeightsStorage::Save(const std::string& tokenizer,\n                                    const Path& weights,\n                                    hwy::ThreadPool& pool) {\n  WriteToBlobStore writer(pool);\n  ForEachType fet = ForEachType::kLoadWithToc;\n  CallForModelWeightT<TensorSaver>(fet, writer);\n  writer.AddTokenizer(tokenizer);\n  int err = writer.WriteAll(weights, &config_);\n  if (err != 0) {\n    fprintf(stderr, \"Failed to load model weights: %d\\n\", err);\n    return err;\n  }\n  return 0;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/weights.cc", "function_name": "ModelWeightsStorage::Save", "index": 2310, "label": 0}
{"input": "inline std::string ConstSessionOptionsImpl<T>::GetConfigEntryOrDefault(const char* config_key, const std::string& def) {\n  if (!this->HasConfigEntry(config_key)) {\n    return def;\n  }\n\n  return this->GetConfigEntry(config_key);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionOptionsImpl<T>::GetConfigEntryOrDefault", "index": 2311, "label": 0}
{"input": "inline\nvoid Mat_<_Tp>::create(int _dims, const int* _sz)\n{\n    Mat::create(_dims, _sz, traits::Type<_Tp>::value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::create", "index": 2312, "label": 0}
{"input": "inline cl_int clBuildProgram(cl_program p0, cl_uint p1, const cl_device_id* p2, const char* p3, void (CL_CALLBACK*p4) (cl_program, void*), void* p5) { return clBuildProgram_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clBuildProgram", "index": 2313, "label": 0}
{"input": "NdArray<dtype> cumsum(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        return inArray.cumsum(inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/cumsum.hpp", "function_name": "cumsum", "index": 2314, "label": 0}
{"input": "inline const mpreal bessely1(const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(y1     );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "bessely1", "index": 2315, "label": 0}
{"input": "void Benchmark::RunWithArg(int arg) {\n  \n  if (g_benchmark_total_time_ns > 0 && g_flops_processed > 0) {\n    double mflops_processed = static_cast<double>(g_flops_processed)/1e6;\n    double seconds = static_cast<double>(g_benchmark_total_time_ns)/1e9;\n    snprintf(throughput, sizeof(throughput), \" %8.2f MFlops/s\", mflops_processed/seconds);\n  }\n  char full_name[100];\n  if (fn_range_ != NULL) {\n    if (arg >= (1<<20)) {\n      snprintf(full_name, sizeof(full_name), \"%s/%dM\", name_, arg/(1<<20));\n    } else if (arg >= (1<<10)) {\n      snprintf(full_name, sizeof(full_name), \"%s/%dK\", name_, arg/(1<<10));\n    } else {\n      snprintf(full_name, sizeof(full_name), \"%s/%d\", name_, arg);\n    }\n  } else {\n    snprintf(full_name, sizeof(full_name), \"%s\", name_);\n  }\n  printf(\"%-*s %10d %10\" PRId64 \"%s\\n\", g_name_column_width, full_name,\n         iterations, g_benchmark_total_time_ns/iterations, throughput);\n  fflush(stdout);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/benchmark_main.cc", "function_name": "Benchmark::RunWithArg", "index": 2316, "label": 0}
{"input": "bool Benchmark::ShouldRun(int argc, char* argv[]) {\n  if (argc == 1) {\n    return true;  \n  }\n  \n  \n  for (int i = 1; i < argc; i++) {\n    regex_t re;\n    if (regcomp(&re, argv[i], 0) != 0) {\n      fprintf(stderr, \"couldn't compile \\\"%s\\\" as a regular expression!\\n\", argv[i]);\n      exit(EXIT_FAILURE);\n    }\n    int match = regexec(&re, name_, 0, NULL, 0);\n    regfree(&re);\n    if (match != REG_NOMATCH) {\n      return true;\n    }\n  }\n  return false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/benchmark_main.cc", "function_name": "Benchmark::ShouldRun", "index": 2317, "label": 0}
{"input": "inline __m256i _mm256_srai_epi64xx(const __m256i a, int imm)\n{\n    __m256i d = _mm256_set1_epi64x((int64)1 << 63);\n    __m256i r = _mm256_srli_epi64(_mm256_add_epi64(a, d), imm);\n    return _mm256_sub_epi64(r, _mm256_srli_epi64(d, imm));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx.hpp", "function_name": "_mm256_srai_epi64xx", "index": 2318, "label": 0}
{"input": "__global__ void ScanKernel(Self self, Index total_size, typename Self::CoeffReturnType* data) {\n  \n  Index val = threadIdx.x + blockIdx.x * blockDim.x;\n  Index offset = (val / self.stride()) * self.stride() * self.size() + val % self.stride();\n\n  if (offset + (self.size() - 1) * self.stride() < total_size) {\n    \n    typename Self::CoeffReturnType accum = self.accumulator().initialize();\n    for (Index idx = 0; idx < self.size(); idx++) {\n      Index curr = offset + idx * self.stride();\n      if (self.exclusive()) {\n        data[curr] = self.accumulator().finalize(accum);\n        self.accumulator().reduce(self.inner().coeff(curr), &accum);\n      } else {\n        self.accumulator().reduce(self.inner().coeff(curr), &accum);\n        data[curr] = self.accumulator().finalize(accum);\n      }\n    }\n  }\n  __syncthreads();\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorScan.h", "function_name": "ScanKernel", "index": 2319, "label": 0}
{"input": "KDTreeIndexParams(int trees = 4)\n    {\n        (*this)[\"algorithm\"] = FLANN_INDEX_KDTREE;\n        (*this)[\"trees\"] = trees;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/kdtree_index.h", "function_name": "KDTreeIndexParams", "index": 2320, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vadd2(unsigned int a, unsigned int b)\n    {\n        unsigned int r = 0;\n\n    #if __CUDA_ARCH__ >= 300\n        asm(\"vadd2.u32.u32.u32.sat %0, %1, %2, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #elif __CUDA_ARCH__ >= 200\n        asm(\"vadd.u32.u32.u32.sat %0.h0, %1.h0, %2.h0, %3;\" : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n        asm(\"=r\"0 : \"=r\"(r) : \"r\"(a), \"r\"(b), \"r\"(r));\n    #else\n        unsigned int s;\n        s = a ^ b;          \n        r = a + b;          \n        s = s ^ r;          \n        s = s & 0x00010000; \n        r = r - s;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vadd2", "index": 2321, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline IsometryTransformType operator*(const RotationBase<Derived,Dim>& r) const\n  { return *this * IsometryTransformType(r); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Translation.h", "function_name": "IsometryTransformType operator*", "index": 2322, "label": 0}
{"input": "IIR_I::IIR_I()\n{\n    m_pNum = NULL;\n    m_pDen = NULL;\n    m_px = NULL;\n    m_py = NULL;\n    m_num_order = -1;\n    m_den_order = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/iir_filter.hpp", "function_name": "IIR_I::IIR_I", "index": 2323, "label": 0}
{"input": "inline\nSparseMatIterator SparseMatIterator::operator ++(int)\n{\n    SparseMatIterator it = *this;\n    ++*this;\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMatIterator::operator ++", "index": 2324, "label": 0}
{"input": "inline\nbool Scalar_<_Tp>::isReal() const\n{\n    return this->val[1] == 0 && this->val[2] == 0 && this->val[3] == 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Scalar_<_Tp>::isReal", "index": 2325, "label": 0}
{"input": "void test_forward()\n{\n    VectorXd x(3);\n    MatrixXd jac(15,3);\n    MatrixXd actual_jac(15,3);\n    my_functor functor;\n\n    x << 0.082, 1.13, 2.35;\n\n    \n    functor.actual_df(x, actual_jac);\n\n\n    \n    NumericalDiff<my_functor> numDiff(functor);\n    numDiff.df(x, jac);\n\n\n    VERIFY_IS_APPROX(jac, actual_jac);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/NumericalDiff.cpp", "function_name": "test_forward", "index": 2326, "label": 0}
{"input": "void check_all_var(const Matrix<Scalar,3,1>& ea)\n{\n  verify_euler<EulerSystemXYZ>(ea);\n  verify_euler<EulerSystemXYX>(ea);\n  verify_euler<EulerSystemXZY>(ea);\n  verify_euler<EulerSystemXZX>(ea);\n  \n  verify_euler<EulerSystemYZX>(ea);\n  verify_euler<EulerSystemYZY>(ea);\n  verify_euler<EulerSystemYXZ>(ea);\n  verify_euler<EulerSystemYXY>(ea);\n  \n  verify_euler<EulerSystemZXY>(ea);\n  verify_euler<EulerSystemZXZ>(ea);\n  verify_euler<EulerSystemZYX>(ea);\n  verify_euler<EulerSystemZYZ>(ea);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/EulerAngles.cpp", "function_name": "check_all_var", "index": 2327, "label": 0}
{"input": "DualQuat<T> DualQuat<T>::sclerp(const DualQuat<T> &q0, const DualQuat<T> &q1, const T t, bool directChange, QuatAssumeType assumeUnit)\n{\n    DualQuat<T> v0(q0), v1(q1);\n    if (!assumeUnit)\n    {\n        v0 = v0.normalize();\n        v1 = v1.normalize();\n    }\n    Quat<T> v0Real = v0.getRealPart();\n    Quat<T> v1Real = v1.getRealPart();\n    if (directChange && v1Real.dot(v0Real) < 0)\n    {\n        v0 = -v0;\n    }\n    DualQuat<T> v0inv1 = v0.inv() * v1;\n    return v0 * v0inv1.power(t, QUAT_ASSUME_UNIT);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::sclerp", "index": 2328, "label": 0}
{"input": "inline cl_program clCreateProgramWithBuiltInKernels(cl_context p0, cl_uint p1, const cl_device_id* p2, const char* p3, cl_int* p4) { return clCreateProgramWithBuiltInKernels_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateProgramWithBuiltInKernels", "index": 2329, "label": 0}
{"input": "DictValue DictValue::arrayReal(TypeIter begin, int size)\n{\n    DictValue res(Param::REAL, new AutoBuffer<double, 1>(size));\n    for (int j = 0; j < size; begin++, j++)\n        (*res.pd)[j] = *begin;\n    return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/dnn.inl.hpp", "function_name": "DictValue::arrayReal", "index": 2330, "label": 0}
{"input": "bool all_of(InputIt first, InputIt last, UnaryPredicate p) CONDITIONAL_NO_EXCEPT\n    {\n        return std::all_of(\n#ifdef PARALLEL_ALGORITHMS_SUPPORTED\n            std::execution::par_unseq,\n#endif\n            first,\n            last,\n            p);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp", "function_name": "all_of", "index": 2331, "label": 0}
{"input": "inline v128_t v128_cvti32x4_i64x2(const v128_t& a)\n{ return wasm_unpacklo_i32x4(a, wasm_i32x4_shr(a, 31)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvti32x4_i64x2", "index": 2332, "label": 0}
{"input": "EIGEN_DONT_INLINE Q slerp_eigen(const Q& a, const Q& b, typename Q::Scalar t)\n{\n  return a.slerp(t,b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/quat_slerp.cpp", "function_name": "slerp_eigen", "index": 2333, "label": 0}
{"input": "__global__ void\n__launch_bounds__(1024)\nEigenMetaKernel(Evaluator eval, Index size) {\n\n  const Index first_index = blockIdx.x * blockDim.x + threadIdx.x;\n  const Index step_size = blockDim.x * gridDim.x;\n\n  const bool vectorizable = Evaluator::PacketAccess & Evaluator::IsAligned;\n  EigenMetaKernelEval<Evaluator, Index, vectorizable>::run(eval, first_index, size, step_size);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorExecutor.h", "function_name": "EigenMetaKernel", "index": 2334, "label": 0}
{"input": "void LynxEngine::Flush() {\n  if (tasm_ != nullptr &&\n      !tasm_->GetPageOptions()\n           .IsEmbeddedModeOn()) {  \n    tasm_->page_proxy()->element_manager()->painting_context()->Flush();\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "6093cd5fe212fd5421a36673fefa0111724faa47", "file_path": "core/shell/lynx_engine.cc", "function_name": "LynxEngine::Flush", "index": 2335, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_processmd5(JNIEnv *env, jobject thiz, jint kind,jstring infn,jstring outfn){\n            std::string s_in = getStringUTF(env,infn);\n            std::string s_out = getStringUTF(env,outfn);\n            int rst = mainenc(kind,(char*)s_in.c_str(),(char*)s_out.c_str());\n            return rst;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_processmd5", "index": 2336, "label": 0}
{"input": "inline bool BFloat16_t::operator<(const BFloat16_t& rhs) const noexcept {\n  if (IsNaN() || rhs.IsNaN()) {\n    \n    return false;\n  }\n\n  const bool left_is_negative = IsNegative();\n  if (left_is_negative != rhs.IsNegative()) {\n    \n    \n    \n    return left_is_negative && !AreZero(*this, rhs);\n  }\n  return (val != rhs.val) && ((val < rhs.val) ^ left_is_negative);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "BFloat16_t::operator<", "index": 2337, "label": 0}
{"input": "void GArrayU::specifyType(){\n        m_hint.reset(new TypeHint<typename std::decay<T>::type>);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/garray.hpp", "function_name": "GArrayU::specifyType", "index": 2338, "label": 0}
{"input": "NdArray<dtype> operator++(NdArray<dtype>& lhs, int)\n    {\n        auto copy = NdArray<dtype>(lhs);\n        ++lhs;\n        return copy;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayOperators.hpp", "function_name": "operator++", "index": 2339, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Packet4cf pgather<std::complex<float>, Packet4cf>(const std::complex<float>* from, Index stride)\n{\n  return Packet4cf(_mm256_set_ps(std::imag(from[3*stride]), std::real(from[3*stride]),\n                                 std::imag(from[2*stride]), std::real(from[2*stride]),\n                                 std::imag(from[1*stride]), std::real(from[1*stride]),\n                                 std::imag(from[0*stride]), std::real(from[0*stride])));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/Complex.h", "function_name": "Packet4cf", "index": 2340, "label": 0}
{"input": "CoTryTask<void> setVersionstampedValue(std::string_view key, std::string_view value, uint32_t offset) override {\n    std::scoped_lock<std::mutex> guard(mutex_);\n    if (canceled_) {\n      co_return makeError(TransactionCode::kCanceled, \"Canceled transaction!\");\n    }\n    if (offset + sizeof(kv::Versionstamp) > value.size()) {\n      co_return makeError(\n          StatusCode::kInvalidArg,\n          fmt::format(\"setVersionstampedValue: {} + sizeof(kv::Versionstamp) > value.size {}\", offset, value.size()));\n    }\n    versionstampedChanges_.push_back(\n        mem::MemKV::VersionstampedKV::versionstampedValue(std::string(key), std::string(value), offset));\n    co_return Void{};\n  }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "c69d46e7914b07dae9a14e79895da4f848d8a045", "file_path": "src/common/kv/mem/MemTransaction.h", "function_name": "std::string_view", "index": 2341, "label": 0}
{"input": "void TriangularBase<Derived>::evalTo(MatrixBase<DenseDerived> &other) const\n{\n  evalToLazy(other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "TriangularBase<Derived>::evalTo", "index": 2342, "label": 0}
{"input": "void evalTo(typename XprType::Scalar* buffer) {\n    evalSubExprsIfNeeded(NULL);\n    for (int i = 0; i < dimensions().TotalSize(); ++i) {\n      buffer[i] += coeff(i);\n    }\n    cleanup();\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorConvolution.h", "function_name": "XprType::Scalar", "index": 2343, "label": 0}
{"input": "void test_cxx11_runqueue()\n{\n  CALL_SUBTEST_1(test_basic_runqueue());\n  CALL_SUBTEST_2(test_empty_runqueue());\n  CALL_SUBTEST_3(test_stress_runqueue());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_runqueue.cpp", "function_name": "test_cxx11_runqueue", "index": 2344, "label": 0}
{"input": "bool evalSubExprsIfNeeded(CoeffReturnType* dest) {\n    if (dest) {\n      m_device.memcpy((void*)dest, m_data, sizeof(Scalar) * m_dims.TotalSize());\n      return false;\n    }\n    return true;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h", "function_name": "dest", "index": 2345, "label": 0}
{"input": "typename ColPivHouseholderQR<MatrixType>::HouseholderSequenceType ColPivHouseholderQR<MatrixType>\n  ::householderQ() const\n{\n  eigen_assert(m_isInitialized && \"ColPivHouseholderQR is not initialized.\");\n  return HouseholderSequenceType(m_qr, m_hCoeffs.conjugate());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/ColPivHouseholderQR.h", "function_name": "ColPivHouseholderQR<MatrixType>\n  ::householderQ", "index": 2346, "label": 0}
{"input": "void as_scalar_product(const MatrixType& m)\n{\n  typedef typename MatrixType::Scalar Scalar;\n  typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1> VectorType;\n  typedef Matrix<Scalar, Dynamic, Dynamic> DynMatrixType;\n  typedef Matrix<Scalar, Dynamic, 1> DynVectorType;\n  typedef Matrix<Scalar, 1, Dynamic> DynRowVectorType;\n\n  Index rows = m.rows();\n  Index depth = internal::random<Index>(1,EIGEN_TEST_MAX_SIZE);\n\n  VectorType v1 = VectorType::Random(rows);  \n  DynVectorType     dv1  = DynVectorType::Random(depth);\n  DynRowVectorType  drv1 = DynRowVectorType::Random(depth);\n  DynMatrixType     dm1  = dv1;\n  DynMatrixType     drm1 = drv1;\n  \n  Scalar s = v1(0);\n\n  VERIFY_IS_APPROX( v1.asDiagonal() * drv1, s*drv1 );\n  VERIFY_IS_APPROX( dv1 * v1.asDiagonal(), dv1*s );\n\n  VERIFY_IS_APPROX( v1.asDiagonal() * drm1, s*drm1 );\n  VERIFY_IS_APPROX( dm1 * v1.asDiagonal(), dm1*s );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/diagonalmatrices.cpp", "function_name": "as_scalar_product", "index": 2347, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename QuaternionBase<Derived>::Vector3\nQuaternionBase<Derived>::_transformVector(const Vector3& v) const\n{\n    \n    \n    \n    \n    \n    Vector3 uv = this->vec().cross(v);\n    uv += uv;\n    return v + this->w() * uv + this->vec().cross(uv);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "EIGEN_STRONG_INLINE typename QuaternionBase<Derived>::Vector3\nQuaternionBase<Derived>::_transformVector", "index": 2348, "label": 0}
{"input": "static inline int doCheck_(ArrType e, int flags, int dummy, std::set<uint64_t>& found, std::map<uint64_t, int> const& expected)\n  {\n    \n    uint64_t value = e[0];\n    for (std::size_t i = 1; i < e.size(); i++)\n      value = value * 10 + e[i];\n\n    \n    auto it = expected.find(value);\n    VERIFY((it != expected.end()));\n    VERIFY_IS_EQUAL(it->second, flags);\n\n    \n    \n    \n    auto p = found.insert(value);\n    VERIFY((p.second));\n\n    return dummy;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_symmetry.cpp", "function_name": "doCheck_", "index": 2349, "label": 0}
{"input": "double minimumOnObjectObject(const Vector2d &v1, const Vector2d &v2) { ++calls; return (v1 - v2).squaredNorm(); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/doc/examples/BVH_Example.cpp", "function_name": "v1", "index": 2350, "label": 0}
{"input": "inline int64 _v128_extract_epi64(const __m128i& a)\n{\n#if defined(CV__SIMD_HAVE_mm_extract_epi64) || (CV_SSE4_1 && (defined(__x86_64__) || defined(_M_X64)))\n#define CV__SIMD_NATIVE_mm_extract_epi64 1\n    return _mm_extract_epi64(a, i);\n#else\n    CV_DECL_ALIGNED(16) int64 tmp[2];\n    _mm_store_si128((__m128i*)tmp, a);\n    return tmp[i];\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_extract_epi64", "index": 2351, "label": 0}
{"input": "EIGEN_DEVICE_FUNC static constexpr bool values_up_to_known_statically(const IndexTuple<T...>&) {\n    return is_compile_time_constant<typename IndexTupleExtractor<0, T...>::ValType>::value;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "values_up_to_known_statically", "index": 2352, "label": 0}
{"input": "void UIBaseInput::SendConfirmEvent() const {\n  const std::string& value = NodeManager::Instance().GetAttribute<std::string>(\n      input_node_, GetTextAttributeType());\n  const auto param = lepus::Dictionary::Create();\n  param->SetValue(\"value\", value);\n  CustomEvent event{Sign(), \"confirm\", \"detail\", lepus_value(param)};\n  context_->SendEvent(event);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_base_input.cc", "function_name": "UIBaseInput::SendConfirmEvent", "index": 2353, "label": 0}
{"input": "sparse_dense_outer_product_evaluator(const ActualRhs &rhs, const Lhs1 &lhs)\n     : m_lhs(lhs), m_lhsXprImpl(m_lhs), m_rhsXprImpl(rhs)\n  {\n    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseDenseProduct.h", "function_name": "sparse_dense_outer_product_evaluator", "index": 2354, "label": 0}
{"input": "MessageHelper::~MessageHelper() {\n    notifyObj(MSG_DOMAIN_STATE, STATE_END, 0, nullptr, nullptr);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/MessageHelper.cpp", "function_name": "MessageHelper::~MessageHelper", "index": 2355, "label": 0}
{"input": "float efficiency_of_partition(\n        const vector<preprocessed_inputfile_t>& preprocessed_inputfiles,\n        const vector<vector<size_t>>& partition)\n{\n  float efficiency = 1.0f;\n  for (auto s = partition.begin(); s != partition.end(); ++s) {\n    efficiency = min(efficiency, efficiency_of_subset(preprocessed_inputfiles, *s));\n  }\n  return efficiency;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "efficiency_of_partition", "index": 2356, "label": 0}
{"input": "inline bool\nprocess_server_socket(const std::atomic<socket_t> &svr_sock, socket_t sock,\n                      size_t keep_alive_max_count,\n                      time_t keep_alive_timeout_sec, time_t read_timeout_sec,\n                      time_t read_timeout_usec, time_t write_timeout_sec,\n                      time_t write_timeout_usec, T callback) {\n  return process_server_socket_core(\n      svr_sock, sock, keep_alive_max_count, keep_alive_timeout_sec,\n      [&](bool close_connection, bool &connection_closed) {\n        SocketStream strm(sock, read_timeout_sec, read_timeout_usec,\n                          write_timeout_sec, write_timeout_usec);\n        return callback(strm, close_connection, connection_closed);\n      });\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "process_server_socket", "index": 2357, "label": 0}
{"input": "CV_WRAP static inline\nString dumpCString(const char* argument)\n{\n    return cv::format(\"String: %s\", argument);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpCString", "index": 2358, "label": 0}
{"input": "void postprocess_ocl(Outputs&... outs)\n{\n    struct\n    {\n        void operator()(tracked_cv_umat* bm) { bm->validate(); }\n        void operator()(...) {                  }\n\n    } validate;\n    \n    int dummy[] = { 0, (validate(&outs), 0)... };\n    cv::util::suppress_unused_warning(dummy);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/ocl/goclkernel.hpp", "function_name": "postprocess_ocl", "index": 2359, "label": 0}
{"input": "void SetStride(size_t stride) {\n    HWY_DASSERT(stride >= Cols());\n    stride_ = stride;\n    \n    \n    \n    row_mask_ = 0;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/allocator.h", "function_name": "stride", "index": 2360, "label": 0}
{"input": "inline TypeInfo KernelInfoImpl<T>::GetInputTypeInfo(size_t index) const {\n  OrtTypeInfo* out = nullptr;\n  ThrowOnError(GetApi().KernelInfo_GetInputTypeInfo(this->p_, index, &out));\n  return TypeInfo{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::GetInputTypeInfo", "index": 2361, "label": 0}
{"input": "NdArray<dtype> operator--(NdArray<dtype>& lhs, int)\n    {\n        auto copy = NdArray<dtype>(lhs);\n        --lhs;\n        return copy;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayOperators.hpp", "function_name": "operator--", "index": 2362, "label": 0}
{"input": "static inline\nint normalize_axis(int axis, const MatShape& shape)\n{\n    return normalize_axis(axis, (int)shape.size());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/shape_utils.hpp", "function_name": "normalize_axis", "index": 2363, "label": 0}
{"input": "inline void RealSchur<MatrixType>::computeShift(Index iu, Index iter, Scalar& exshift, Vector3s& shiftInfo)\n{\n  using std::sqrt;\n  using std::abs;\n  shiftInfo.coeffRef(0) = m_matT.coeff(iu,iu);\n  shiftInfo.coeffRef(1) = m_matT.coeff(iu-1,iu-1);\n  shiftInfo.coeffRef(2) = m_matT.coeff(iu,iu-1) * m_matT.coeff(iu-1,iu);\n\n  \n  if (iter == 30)\n  {\n    Scalar s = (shiftInfo.coeff(1) - shiftInfo.coeff(0)) / Scalar(2.0);\n    s = s * s + shiftInfo.coeff(2);\n    if (s > Scalar(0))\n    {\n      s = sqrt(s);\n      if (shiftInfo.coeff(1) < shiftInfo.coeff(0))\n        s = -s;\n      s = s + (shiftInfo.coeff(1) - shiftInfo.coeff(0)) / Scalar(2.0);\n      s = shiftInfo.coeff(0) - shiftInfo.coeff(2) / s;\n      exshift += s;\n      for (Index i = 0; i <= iu; ++i)\n        m_matT.coeffRef(i,i) -= s;\n      shiftInfo.setConstant(Scalar(0.964));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealSchur.h", "function_name": "RealSchur<MatrixType>::computeShift", "index": 2364, "label": 0}
{"input": "typename SuperLU<MatrixType>::Scalar SuperLU<MatrixType>::determinant() const\n{\n  eigen_assert(m_factorizationIsOk && \"The decomposition is not in a valid state for computing the determinant, you must first call either compute() or analyzePattern()/factorize()\");\n  \n  if (m_extractedDataAreDirty)\n    this->extractData();\n\n  Scalar det = Scalar(1);\n  for (int j=0; j<m_u.cols(); ++j)\n  {\n    if (m_u.outerIndexPtr()[j+1]-m_u.outerIndexPtr()[j] > 0)\n    {\n      int lastId = m_u.outerIndexPtr()[j+1]-1;\n      eigen_assert(m_u.innerIndexPtr()[lastId]<=j);\n      if (m_u.innerIndexPtr()[lastId]==j)\n        det *= m_u.valuePtr()[lastId];\n    }\n  }\n  if(PermutationMap(m_p.data(),m_p.size()).determinant()*PermutationMap(m_q.data(),m_q.size()).determinant()<0)\n    det = -det;\n  if(m_sluEqued!='N')\n    return det/m_sluRscale.prod()/m_sluCscale.prod();\n  else\n    return det;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SuperLUSupport/SuperLUSupport.h", "function_name": "SuperLU<MatrixType>::determinant", "index": 2365, "label": 0}
{"input": "inline double gaussian(double inX, double inY, double inSigma) noexcept\n    {\n        double exponent = sqr(inX) + sqr(inY);\n        exponent /= 2;\n        exponent /= sqr(inSigma);\n        return std::exp(-exponent);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Utils/gaussian.hpp", "function_name": "gaussian", "index": 2366, "label": 0}
{"input": "static HWY_INLINE intptr_t IndexOfKey(MMKeys::Key key, const MMKeys& keys) {\n    const hwy::Span<const uint64_t> all_keys = keys.Keys();\n    \n    for (size_t i = 0; i < all_keys.size(); ++i) {\n      if (all_keys[i] == key) return static_cast<intptr_t>(i);\n    }\n    return -1;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul-inl.h", "function_name": "MMKeys::Key", "index": 2367, "label": 0}
{"input": "void assignPacketByOuterInner(Index outer, Index inner)\n  {\n    Index row = Base::rowIndexByOuterInner(outer, inner); \n    Index col = Base::colIndexByOuterInner(outer, inner);\n    assignPacket<StoreMode,LoadMode,PacketType>(row, col);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Swap.h", "function_name": "assignPacketByOuterInner", "index": 2368, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_GE>, const Derived, const OtherDerived>\n    operator>=(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_GE>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_cmp_op<Scalar, Scalar, internal::cmp_GE>, const Derived, const OtherDerived>\n    operator>=", "index": 2369, "label": 0}
{"input": "TensorReverseOp(\n      const XprType& expr, const ReverseDimensions& reverse_dims)\n      : m_xpr(expr), m_reverse_dims(reverse_dims) { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReverse.h", "function_name": "TensorReverseOp", "index": 2370, "label": 0}
{"input": "void matrix_sqrt_triangular(const MatrixType &arg, ResultType &result)\n{\n  using std::sqrt;\n      typedef typename MatrixType::Scalar Scalar;\n\n  eigen_assert(arg.rows() == arg.cols());\n\n  \n  \n  result.resize(arg.rows(), arg.cols());\n  for (Index i = 0; i < arg.rows(); i++) {\n    result.coeffRef(i,i) = sqrt(arg.coeff(i,i));\n  }\n  for (Index j = 1; j < arg.cols(); j++) {\n    for (Index i = j-1; i >= 0; i--) {\n      \n      Scalar tmp = (result.row(i).segment(i+1,j-i-1) * result.col(j).segment(i+1,j-i-1)).value();\n      \n      result.coeffRef(i,j) = (arg.coeff(i,j) - tmp) / (result.coeff(i,i) + result.coeff(j,j));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixSquareRoot.h", "function_name": "matrix_sqrt_triangular", "index": 2371, "label": 0}
{"input": "void test_product_trmm()\n{\n  for(int i = 0; i < g_repeat ; i++)\n  {\n    CALL_ALL(1,float);                \n    CALL_ALL(2,double);               \n    CALL_ALL(3,std::complex<float>);  \n    CALL_ALL(4,std::complex<double>); \n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_trmm.cpp", "function_name": "test_product_trmm", "index": 2372, "label": 0}
{"input": "TensorDevice(const DeviceType& device, ExpressionType& expression) : m_device(device), m_expression(expression) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDevice.h", "function_name": "TensorDevice", "index": 2373, "label": 0}
{"input": "inline\nMatx<_Tp, 1, n> Matx<_Tp, m, n>::row(int i) const\n{\n    CV_DbgAssert((unsigned)i < (unsigned)m);\n    return Matx<_Tp, 1, n>(&val[i*n]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp, m, n>::row", "index": 2374, "label": 0}
{"input": "void dense_storage_copy()\n{\n  static const int Size = ((Rows==Dynamic || Cols==Dynamic) ? Dynamic : Rows*Cols);\n  typedef DenseStorage<T,Size, Rows,Cols, 0> DenseStorageType;\n  \n  const int rows = (Rows==Dynamic) ? 4 : Rows;\n  const int cols = (Cols==Dynamic) ? 3 : Cols;\n  const int size = rows*cols;\n  DenseStorageType reference(size, rows, cols);\n  T* raw_reference = reference.data();\n  for (int i=0; i<size; ++i)\n    raw_reference[i] = static_cast<T>(i);\n    \n  DenseStorageType copied_reference(reference);\n  const T* raw_copied_reference = copied_reference.data();\n  for (int i=0; i<size; ++i)\n    VERIFY_IS_EQUAL(raw_reference[i], raw_copied_reference[i]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/dense_storage.cpp", "function_name": "dense_storage_copy", "index": 2375, "label": 0}
{"input": "static void test_index_tuples_dim()\n{\n  Tensor<float, 4, DataLayout> tensor(2,3,5,7);\n  tensor.setRandom();\n  tensor = (tensor + tensor.constant(0.5)).log();\n\n  Tensor<Tuple<DenseIndex, float>, 4, DataLayout> index_tuples(2,3,5,7);\n\n  index_tuples = tensor.index_tuples();\n\n  for (Eigen::DenseIndex n = 0; n < tensor.size(); ++n) {\n    const Tuple<DenseIndex, float>& v = index_tuples(n); \n    VERIFY_IS_EQUAL(v.first, n);\n    VERIFY_IS_EQUAL(v.second, tensor(n));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_argmax.cpp", "function_name": "test_index_tuples_dim", "index": 2376, "label": 0}
{"input": "void JniHelper::deleteLocalRef(jobject jobj) {\n    JNIEnv *env = JniHelper::getJNIEnv();\n    if (env == nullptr || jobj == nullptr) {\n        return;\n    }\n\n    env->DeleteLocalRef(jobj);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/JniHelper.cpp", "function_name": "JniHelper::deleteLocalRef", "index": 2377, "label": 0}
{"input": "static __device__ __forceinline__ OutIt transform(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, BinOp op)\n        {\n            unsigned int lane = laneId();\n\n            InIt1 t1 = beg1 + lane;\n            InIt2 t2 = beg2 + lane;\n            for(; t1 < end1; t1 += STRIDE, t2 += STRIDE, out += STRIDE)\n                *out = op(*t1, *t2);\n            return out;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/warp.hpp", "function_name": "transform", "index": 2378, "label": 0}
{"input": "NdArray<dtype> intersect1d(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        std::vector<dtype>    res(inArray1.size() + inArray2.size());\n        const std::set<dtype> in1(inArray1.cbegin(), inArray1.cend());\n        const std::set<dtype> in2(inArray2.cbegin(), inArray2.cend());\n\n        const auto iter = stl_algorithms::set_intersection(in1.begin(), in1.end(), in2.begin(), in2.end(), res.begin());\n        res.resize(iter - res.begin());\n        return NdArray<dtype>(res);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/intersect1d.hpp", "function_name": "intersect1d", "index": 2379, "label": 0}
{"input": "CV_INLINE int cvReadIntByName( const CvFileStorage* fs, const CvFileNode* map,\n                         const char* name, int default_value CV_DEFAULT(0) )\n{\n    return cvReadInt( cvGetFileNodeByName( fs, map, name ), default_value );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvReadIntByName", "index": 2380, "label": 0}
{"input": "inline ONNXTensorElementDataType TensorTypeAndShapeInfo::GetElementType() const {\n  ONNXTensorElementDataType out;\n  ThrowOnError(GetApi().GetTensorElementType(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfo::GetElementType", "index": 2381, "label": 0}
{"input": "void GRender::resumeThreads( bool rendering, bool messaging) {\n    if (rendering) {\n        if (hasAudio) audioRenderThread->resume();\n        if (hasVideo) videoRenderThread->resume();\n    }\n    if (messaging) {\n        messageThread->resume();\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::resumeThreads", "index": 2382, "label": 0}
{"input": "NdArray<dtype> tile(const NdArray<dtype>& inArray, const Shape& inReps)\n    {\n        return inArray.repeat(inReps);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/tile.hpp", "function_name": "tile", "index": 2383, "label": 0}
{"input": "NdArray<bool> none(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        return inArray.none(inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/none.hpp", "function_name": "none", "index": 2384, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void update_value(type2indexpair<f, s>& val, IndexPair<DenseIndex> new_val) {\n  val.set(new_val);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "update_value", "index": 2385, "label": 0}
{"input": "const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::cosh() const\n{\n  eigen_assert(rows() == cols());\n  typedef typename internal::stem_function<Scalar>::ComplexScalar ComplexScalar;\n  return MatrixFunctionReturnValue<Derived>(derived(), internal::stem_function_cosh<ComplexScalar>);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "MatrixBase<Derived>::cosh", "index": 2386, "label": 0}
{"input": "inline v_uint16x8 v_mul_hi(const v_uint16x8& a, const v_uint16x8& b)\n{\n    v_uint32x4 a0, a1, b0, b1;\n    v_expand(a, a0, a1);\n    v_expand(b, b0, b1);\n    v128_t c = wasm_i32x4_mul(a0.val, b0.val);\n    v128_t d = wasm_i32x4_mul(a1.val, b1.val);\n    return v_uint16x8(wasm_v8x16_shuffle(c, d, 2,3,6,7,10,11,14,15,18,19,22,23,26,27,30,31));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_mul_hi", "index": 2387, "label": 0}
{"input": "inline typename DGMRES<_MatrixType, _Preconditioner>::ComplexVector DGMRES<_MatrixType, _Preconditioner>::schurValues(const RealSchur<DenseMatrix>& schurofH) const\n{\n  const DenseMatrix& T = schurofH.matrixT();\n  Index it = T.rows();\n  ComplexVector eig(it);\n  Index j = 0;\n  while (j < it-1)\n  {\n    if (T(j+1,j) ==Scalar(0))\n    {\n      eig(j) = std::complex<RealScalar>(T(j,j),RealScalar(0)); \n      j++; \n    }\n    else\n    {\n      eig(j) = std::complex<RealScalar>(T(j,j),T(j+1,j)); \n      eig(j+1) = std::complex<RealScalar>(T(j,j+1),T(j+1,j+1));\n      j++;\n    }\n  }\n  if (j < it-1) eig(j) = std::complex<RealScalar>(T(j,j),RealScalar(0));\n  return eig;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/IterativeSolvers/DGMRES.h", "function_name": "DGMRES<_MatrixType, _Preconditioner>::schurValues", "index": 2388, "label": 0}
{"input": "MatrixType FullPivLU<MatrixType>::reconstructedMatrix() const\n{\n  eigen_assert(m_isInitialized && \"LU is not initialized.\");\n  const Index smalldim = (std::min)(m_lu.rows(), m_lu.cols());\n  \n  MatrixType res(m_lu.rows(),m_lu.cols());\n  \n  res = m_lu.leftCols(smalldim)\n            .template triangularView<UnitLower>().toDenseMatrix()\n      * m_lu.topRows(smalldim)\n            .template triangularView<Upper>().toDenseMatrix();\n\n  \n  res = m_p.inverse() * res;\n\n  \n  res = res * m_q.inverse();\n\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/FullPivLU.h", "function_name": "FullPivLU<MatrixType>::reconstructedMatrix", "index": 2389, "label": 0}
{"input": "static void test_output_1d()\n{\n  Tensor<int, 1, DataLayout> tensor(5);\n  for (int i = 0; i < 5; ++i) {\n    tensor(i) = i;\n  }\n\n  std::stringstream os;\n  os << tensor;\n\n  std::string expected(\"0\\n1\\n2\\n3\\n4\");\n  VERIFY_IS_EQUAL(std::string(os.str()), expected);\n\n  Eigen::Tensor<double,1,DataLayout> empty_tensor(0);\n  std::stringstream empty_os;\n  empty_os << empty_tensor;\n  std::string empty_string;\n  VERIFY_IS_EQUAL(std::string(empty_os.str()), empty_string);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_io.cpp", "function_name": "test_output_1d", "index": 2390, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Translation(const Scalar& sx, const Scalar& sy, const Scalar& sz)\n  {\n    eigen_assert(Dim==3);\n    m_coeffs.x() = sx;\n    m_coeffs.y() = sy;\n    m_coeffs.z() = sz;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Translation.h", "function_name": "sx", "index": 2391, "label": 0}
{"input": "inline const LLT<typename MatrixBase<Derived>::PlainObject>\nMatrixBase<Derived>::llt() const\n{\n  return LLT<PlainObject>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "MatrixBase<Derived>::llt", "index": 2392, "label": 0}
{"input": "preprocessed_inputfile_t(const inputfile_t& inputfile)\n    : filename(inputfile.filename)\n  {\n    if (inputfile.type != inputfile_t::type_t::all_pot_sizes) {\n      abort();\n    }\n    auto it = inputfile.entries.begin();\n    auto it_first_with_given_product_size = it;\n    while (it != inputfile.entries.end()) {\n      ++it;\n      if (it == inputfile.entries.end() ||\n        it->product_size != it_first_with_given_product_size->product_size)\n      {\n        import_input_file_range_one_product_size(it_first_with_given_product_size, it);\n        it_first_with_given_product_size = it;\n      }\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "preprocessed_inputfile_t", "index": 2393, "label": 0}
{"input": "TensorShufflingOp(const XprType& expr, const Shuffle& shuffle)\n      : m_xpr(expr), m_shuffle(shuffle) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorShuffling.h", "function_name": "TensorShufflingOp", "index": 2394, "label": 0}
{"input": "inline\nVec<double, 3> Vec<double, 3>::cross(const Vec<double, 3>& v) const\n{\n    return Vec<double,3>(this->val[1]*v.val[2] - this->val[2]*v.val[1],\n                     this->val[2]*v.val[0] - this->val[0]*v.val[2],\n                     this->val[0]*v.val[1] - this->val[1]*v.val[0]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Vec<double, 3>::cross", "index": 2395, "label": 0}
{"input": "inline NdArray<double> nans(const Shape& inShape)\n    {\n        return full(inShape, constants::nan);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nans.hpp", "function_name": "nans", "index": 2396, "label": 0}
{"input": "int mainprocess(int argc,char** argv){\n    const char* modeldir = \"../model\";\n    std::string picfile(\"../mybin/r1.jpg\");\n    JMat* pic = new JMat(picfile,1);\n    char* pwenet = NULL;\n    dumpfile(\"../mybin/wenet.bin\",&pwenet);\n    Mobunet* munet = new Mobunet(modeldir,\"mobileunet_v5_wenet_sim\");\n    int* arr = pic->tagarr();\n    int* boxs = arr+10;\n\n    boxs[0]=140;boxs[1]=408;boxs[2]=379;boxs[3]=647;\n    float* pw = (float*)pwenet;\n    for(int k=0;k<250;k++) {\n        JMat dfeat(256, 20, pw, 1);\n        JMat onepic = pic->clone();\n        munet->process(&onepic,arr,&dfeat);\n        onepic.show(\"pic\");\n        printf(\"===one\\n\");\n        cv::waitKey(10);\n        pw+=20*256;\n    }\n    cv::waitKey(0);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/src/dhmain.cpp", "function_name": "mainprocess", "index": 2397, "label": 0}
{"input": "DualQuat<T>::DualQuat(const Vec<T, 8> &q):w(q[0]), x(q[1]), y(q[2]), z(q[3]),\n                                          w_(q[4]), x_(q[5]), y_(q[6]), z_(q[7]){}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::DualQuat", "index": 2398, "label": 0}
{"input": "TensorCwiseUnaryOp(const XprType& xpr, const UnaryOp& func = UnaryOp())\n      : m_xpr(xpr), m_functor(func) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorExpr.h", "function_name": "TensorCwiseUnaryOp", "index": 2399, "label": 0}
{"input": "inline const mpreal li2 (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd())\n{\n    MPREAL_UNARY_MATH_FUNCTION_BODY(li2);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "li2", "index": 2400, "label": 0}
{"input": "inline void ClientImpl::set_ca_cert_path(const std::string &ca_cert_file_path,\n                                         const std::string &ca_cert_dir_path) {\n  ca_cert_file_path_ = ca_cert_file_path;\n  ca_cert_dir_path_ = ca_cert_dir_path;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_ca_cert_path", "index": 2401, "label": 0}
{"input": "inline const NestByValue<Derived>\nDenseBase<Derived>::nestByValue() const\n{\n  return NestByValue<Derived>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/NestByValue.h", "function_name": "DenseBase<Derived>::nestByValue", "index": 2402, "label": 0}
{"input": "static bool updateInPlace(MatrixType& mat, MatrixBase<WDerived>& w, const typename MatrixType::RealScalar& sigma=1)\n  {\n    using numext::isfinite;\n    typedef typename MatrixType::Scalar Scalar;\n    typedef typename MatrixType::RealScalar RealScalar;\n\n    const Index size = mat.rows();\n    eigen_assert(mat.cols() == size && w.size()==size);\n\n    RealScalar alpha = 1;\n\n    \n    for (Index j = 0; j < size; j++)\n    {\n      \n      if (!(isfinite)(alpha))\n        break;\n\n      \n      RealScalar dj = numext::real(mat.coeff(j,j));\n      Scalar wj = w.coeff(j);\n      RealScalar swj2 = sigma*numext::abs2(wj);\n      RealScalar gamma = dj*alpha + swj2;\n\n      mat.coeffRef(j,j) += swj2/alpha;\n      alpha += swj2/dj;\n\n\n      \n      Index rs = size-j-1;\n      w.tail(rs) -= wj * mat.col(j).tail(rs);\n      if(gamma != 0)\n        mat.col(j).tail(rs) += (sigma*numext::conj(wj)/gamma)*w.tail(rs);\n    }\n    return true;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LDLT.h", "function_name": "updateInPlace", "index": 2403, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmpeq2(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vseteq2(a, b);\n        c = r << 16;        \n        r = c - r;          \n    #else\n        \n        \n        r = a ^ b;          \n        c = r | 0x80008000; \n        r = r ^ c;          \n        c = c - 0x00010001; \n        c = r & ~c;         \n        r = c >> 15;        \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmpeq2", "index": 2404, "label": 0}
{"input": "static void test_custom()\n{\n  Tensor<int, 1> vec(6);\n  vec.setRandom<MyGenerator>();\n\n  for (int i = 0; i < 6; ++i) {\n    VERIFY_IS_EQUAL(vec(i), 3*i);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_random.cpp", "function_name": "test_custom", "index": 2405, "label": 0}
{"input": "static LPS EnabledLPs(const BoundedSlice& lp_slice) {\n  LPS enabled_lps;\n\n  \n  \n    \n    \n    \n    const size_t detected = affinity.Count();\n    size_t enabled_idx = 0;\n    affinity.Foreach([&](size_t lp) {\n      if (lp_slice.Contains(detected, enabled_idx)) {\n        enabled_lps.Set(lp);\n      }\n      ++enabled_idx;\n    });\n  } else {\n    const size_t num_lps = hwy::TotalLogicalProcessors();\n    HWY_WARN(\"unknown OS affinity, max %zu LPs and slice %zu.\", num_lps,\n             lp_slice.Num(num_lps));\n    for (size_t lp = 0; lp < num_lps; ++lp) {\n      if (lp_slice.Contains(num_lps, lp)) {\n        enabled_lps.Set(lp);\n      }\n    }\n  }\n\n  \n  \n  if (HWY_UNLIKELY(!hwy::HaveThreadingSupport())) {\n    HWY_ASSERT(enabled_lps.Any());\n    const size_t lp = enabled_lps.First();\n    enabled_lps = LPS();\n    enabled_lps.Set(lp);\n    HWY_WARN(\"Warning, threads not supported, using only the main thread.\");\n  }\n\n  return enabled_lps;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/topology.cc", "function_name": "EnabledLPs", "index": 2406, "label": 0}
{"input": "inline __m256i _v256_setr_h(short v0, short v1, short v2, short v3, short v4, short v5, short v6, short v7,\n                            short v8,  short v9, short v10, short v11, short v12, short v13, short v14, short v15)\n{\n    return (__m256i)v16i16{ v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_setr_h", "index": 2407, "label": 0}
{"input": "inline\nsize_t DeviceInfo::totalMemory() const\n{\n    size_t _totalMemory = 0, _freeMemory = 0;\n    queryMemory(_totalMemory, _freeMemory);\n    return _totalMemory;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda.inl.hpp", "function_name": "DeviceInfo::totalMemory", "index": 2408, "label": 0}
{"input": "static void test_reduce_middle_dims() {\n  Tensor<float, 4, DataLayout> in(72, 53, 97, 113);\n  Tensor<float, 2, DataLayout> out(72, 53);\n  in.setRandom();\n\n\n#if !EIGEN_HAS_CONSTEXPR\n  array<int, 2> reduction_axis;\n  reduction_axis[0] = 1;\n  reduction_axis[1] = 2;\n#else\n  \n  Eigen::IndexList<Eigen::type2index<1>, Eigen::type2index<2>> reduction_axis;\n#endif\n\n  out = in.maximum(reduction_axis);\n\n  for (int i = 0; i < 72; ++i) {\n    for (int j = 0; j < 113; ++j) {\n      float expected = -1e10f;\n      for (int k = 0; k < 53; ++k) {\n        for (int l = 0; l < 97; ++l) {\n          expected = (std::max)(expected, in(i, k, l, j));\n        }\n      }\n      VERIFY_IS_APPROX(out(i, j), expected);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_reduction.cpp", "function_name": "test_reduce_middle_dims", "index": 2409, "label": 0}
{"input": "MatrixType LDLT<MatrixType,_UpLo>::reconstructedMatrix() const\n{\n  eigen_assert(m_isInitialized && \"LDLT is not initialized.\");\n  const Index size = m_matrix.rows();\n  MatrixType res(size,size);\n\n  \n  res.setIdentity();\n  res = transpositionsP() * res;\n  \n  res = matrixU() * res;\n  \n  res = vectorD().real().asDiagonal() * res;\n  \n  res = matrixL() * res;\n  \n  res = transpositionsP().transpose() * res;\n\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LDLT.h", "function_name": "LDLT<MatrixType,_UpLo>::reconstructedMatrix", "index": 2410, "label": 0}
{"input": "static __device__ __forceinline__ T atomicMin(T* address, T val)\n            {\n#if defined (__CUDA_ARCH__) && (__CUDA_ARCH__ < 120)\n                T count = ::min(*address, val);\n                do\n                {\n                    *address = count;\n                } while (*address > count);\n\n                return count;\n#else\n                return ::atomicMin(address, val);\n#endif\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/emulation.hpp", "function_name": "atomicMin", "index": 2411, "label": 0}
{"input": "Index generate_sparse_square_problem(Solver&, typename Solver::MatrixType& A, DenseMat& dA, int maxSize = 300, int options = ForceNonZeroDiag)\n{\n  typedef typename Solver::MatrixType Mat;\n  typedef typename Mat::Scalar Scalar;\n\n  Index size = internal::random<int>(1,maxSize);\n  double density = (std::max)(8./(size*size), 0.01);\n  \n  A.resize(size,size);\n  dA.resize(size,size);\n\n  initSparse<Scalar>(density, dA, A, options);\n  \n  return size;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_solver.h", "function_name": "generate_sparse_square_problem", "index": 2412, "label": 0}
{"input": "NdArray<dtype> arange(const Slice& inSlice)\n    {\n        return arange<dtype>(inSlice.start, inSlice.stop, inSlice.step);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/arange.hpp", "function_name": "arange", "index": 2413, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void Transform<Scalar,Dim,Mode,Options>::computeRotationScaling(RotationMatrixType *rotation, ScalingMatrixType *scaling) const\n{\n  JacobiSVD<LinearMatrixType> svd(linear(), ComputeFullU | ComputeFullV);\n\n  Scalar x = (svd.matrixU() * svd.matrixV().adjoint()).determinant(); \n  VectorType sv(svd.singularValues());\n  sv.coeffRef(0) *= x;\n  if(scaling) scaling->lazyAssign(svd.matrixV() * sv.asDiagonal() * svd.matrixV().adjoint());\n  if(rotation)\n  {\n    LinearMatrixType m(svd.matrixU());\n    m.col(0) /= x;\n    rotation->lazyAssign(m * svd.matrixV().adjoint());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options>::computeRotationScaling", "index": 2414, "label": 0}
{"input": "inline MultipartFormData Request::get_file_value(const std::string &key) const {\n  auto it = files.find(key);\n  if (it != files.end()) { return it->second; }\n  return MultipartFormData();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Request::get_file_value", "index": 2415, "label": 0}
{"input": "BlobError LoadToc(BlobReader& reader) {\n    hwy::uint128_t toc_key = MakeKey(kTocName);\n    size_t toc_size = reader.BlobSize(toc_key);\n    if (toc_size != 0) {\n      std::vector<uint32_t> toc(toc_size / sizeof(uint32_t));\n      BlobError err = reader.ReadOne(toc_key, toc.data(), toc_size);\n      if (err != 0) {\n        fprintf(stderr, \"Failed to read toc (error %d)\\n\", err);\n        return err;\n      }\n      size_t consumed = 0;\n      size_t prev_consumed = static_cast<size_t>(-1);\n      while (consumed < toc.size() && prev_consumed != consumed) {\n        MatPtr blob;\n        const IFields::ReadResult result =\n            blob.Read(hwy::Span<const uint32_t>(toc), consumed);\n        prev_consumed = consumed;\n        consumed = result.pos;\n        if (blob.NumElements() > 0) {\n          AddToToc(blob);\n        }\n      }\n    }\n    return 0;\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "compression/compress.h", "function_name": "reader", "index": 2416, "label": 0}
{"input": "inline const mpreal zeta    (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(zeta   );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "zeta", "index": 2417, "label": 0}
{"input": "inline const mpreal fmax(const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal a;\n    mpfr_max(a.mp,x.mp,y.mp,rnd_mode);\n    return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "fmax", "index": 2418, "label": 0}
{"input": "size_t max_feasible_subset_size(size_t n)\n{\n  assert(n > 0);\n  const size_t minresult = min<size_t>(n-1, always_search_subsets_of_size_at_least);\n  for (size_t p = 1; p <= n - 1; p++) {\n    if (!is_number_of_subsets_feasible(n, p+1)) {\n      return max(p, minresult);\n    }\n  }\n  return n - 1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "max_feasible_subset_size", "index": 2419, "label": 0}
{"input": "static __device__ __forceinline__ void YUV2RGBConvert(const T& src, float* dst)\n        {\n            dst[bidx] = src.x + (src.z - ColorChannel<float>::half()) * c_YUV2RGBCoeffs_f[3];\n\n            dst[1] = src.x + (src.z - ColorChannel<float>::half()) * c_YUV2RGBCoeffs_f[2]\n                     + (src.y - ColorChannel<float>::half()) * c_YUV2RGBCoeffs_f[1];\n\n            dst[bidx^2] = src.x + (src.y - ColorChannel<float>::half()) * c_YUV2RGBCoeffs_f[0];\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "YUV2RGBConvert", "index": 2420, "label": 0}
{"input": "inline const mpreal fmod (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal a;\n    mp_prec_t yp, xp;\n\n    yp = y.get_prec();\n    xp = x.get_prec();\n\n    a.set_prec(yp>xp?yp:xp);\n\n    mpfr_fmod(a.mp, x.mp, y.mp, rnd_mode);\n\n    return a;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "fmod", "index": 2421, "label": 0}
{"input": "static inline\n    void vx_store_aligned(_Tp* dst, const _Tvec& v) { return v_store_aligned(dst, v); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin.hpp", "function_name": "vx_store_aligned", "index": 2422, "label": 0}
{"input": "void RegisterMethod(\n      const piper::NativeModuleMethod &method,\n      piper::LynxNativeModule::NativeModuleInvocation invocation) {\n    methods_.emplace(method.name, method);\n    invocations_.emplace(method.name, std::move(invocation));\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.h", "function_name": "piper::NativeModuleMethod", "index": 2423, "label": 0}
{"input": "const Product<Lhs,Rhs,LazyProduct>\n  lazyprod(const Lhs& lhs, const Rhs& rhs)\n  {\n    return Product<Lhs,Rhs,LazyProduct>(lhs,rhs);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/evaluators.cpp", "function_name": "lazyprod", "index": 2424, "label": 0}
{"input": "static inline Gemma CreateGemma(const LoaderArgs& loader, NestedPools& pools) {\n  if (Type::kUnknown == loader.Info().weight ||\n      Model::UNKNOWN == loader.Info().model || loader.tokenizer.path.empty()) {\n    \n    return Gemma(loader.weights, pools);\n  }\n  return Gemma(loader.tokenizer, loader.weights, loader.Info(), pools);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "493688f6f1ddb37efe333e97331e31e9aa728785", "file_path": "util/app.h", "function_name": "CreateGemma", "index": 2425, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::LLA NEDtoLLA(const reference_frames::NED& target,\n                                                        const reference_frames::LLA& referencePoint) noexcept\n    {\n        return ECEFtoLLA(NEDtoECEF(target, referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/NEDtoLLA.hpp", "function_name": "NEDtoLLA", "index": 2426, "label": 0}
{"input": "bool any_of(InputIt first, InputIt last, UnaryPredicate p) CONDITIONAL_NO_EXCEPT\n    {\n        return std::any_of(\n#ifdef PARALLEL_ALGORITHMS_SUPPORTED\n            std::execution::par_unseq,\n#endif\n            first,\n            last,\n            p);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp", "function_name": "any_of", "index": 2427, "label": 0}
{"input": "void test_complex(int nfft)\n{\n  test_complex_generic<StdVectorContainer,T>(nfft);\n  test_complex_generic<EigenVectorContainer,T>(nfft);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/FFTW.cpp", "function_name": "test_complex", "index": 2428, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalPacket(Index i) {\n    const int LhsStoreMode = TensorEvaluator<LeftArgType, Device>::IsAligned ? Aligned : Unaligned;\n    const int RhsLoadMode = TensorEvaluator<RightArgType, Device>::IsAligned ? Aligned : Unaligned;\n    m_leftImpl.template writePacket<LhsStoreMode>(i, m_rightImpl.template packet<RhsLoadMode>(i));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorAssign.h", "function_name": "evalPacket", "index": 2429, "label": 0}
{"input": "inline bool Server::write_response(Stream &strm, bool close_connection,\n                                   const Request &req, Response &res) {\n  return write_response_core(strm, close_connection, req, res, false);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::write_response", "index": 2430, "label": 0}
{"input": "void DispatchQueue::removePending() {\n    std::unique_lock<std::mutex> lock(lockMutex);\n    queue = {};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/dispatchqueue.cpp", "function_name": "DispatchQueue::removePending", "index": 2431, "label": 0}
{"input": "void inverse_permutation_4x4()\n{\n  typedef typename MatrixType::Scalar Scalar;\n  Vector4i indices(0,1,2,3);\n  for(int i = 0; i < 24; ++i)\n  {\n    MatrixType m = PermutationMatrix<4>(indices);\n    MatrixType inv = m.inverse();\n    double error = double( (m*inv-MatrixType::Identity()).norm() / NumTraits<Scalar>::epsilon() );\n    EIGEN_DEBUG_VAR(error)\n    VERIFY(error == 0.0);\n    std::next_permutation(indices.data(),indices.data()+4);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/prec_inverse_4x4.cpp", "function_name": "inverse_permutation_4x4", "index": 2432, "label": 0}
{"input": "constexpr ECEF(const Cartesian& cartesian) noexcept :\n            Cartesian(cartesian)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/ReferenceFrames/ECEF.hpp", "function_name": "ECEF", "index": 2433, "label": 0}
{"input": "inline void v_rshr_pack_store(int* ptr, const v_int64x2& a)\n{\n    v128_t delta = wasm_i64x2_splat(((int64)1 << (n-1)));\n    v128_t a1 = wasm_i64x2_shr(wasm_i64x2_add(a.val, delta), n);\n    v128_t r = wasm_v8x16_shuffle(a1, a1, 0,1,2,3,8,9,10,11,0,1,2,3,8,9,10,11);\n    int t_ptr[4];\n    wasm_v128_store(t_ptr, r);\n    for (int i=0; i<2; ++i) {\n        ptr[i] = t_ptr[i];\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_rshr_pack_store", "index": 2434, "label": 0}
{"input": "inline void ClientImpl::set_digest_auth(const std::string &username,\n                                        const std::string &password) {\n  digest_auth_username_ = username;\n  digest_auth_password_ = password;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::set_digest_auth", "index": 2435, "label": 0}
{"input": "typename MatrixBase<Derived>::template ConstTriangularViewReturnType<Mode>::Type\nMatrixBase<Derived>::triangularView() const\n{\n  return typename ConstTriangularViewReturnType<Mode>::Type(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "MatrixBase<Derived>::triangularView", "index": 2436, "label": 0}
{"input": "gapi::cpu::GOCVFunctor gapi::cpu::ocv_kernel(const Callable& c)\n{\n    using P = cv::detail::OCVCallHelper<Callable, typename K::InArgs, typename K::OutArgs>;\n    return GOCVFunctor{ K::id()\n                      , &K::getOutMeta\n                      , std::bind(&P::callFunctor, std::placeholders::_1, c)\n                      };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/cpu/gcpukernel.hpp", "function_name": "gapi::cpu::ocv_kernel", "index": 2437, "label": 0}
{"input": "inline\nstd::reverse_iterator<MatIterator_<_Tp>> Mat::rend()\n{\n    if (empty())\n        return std::reverse_iterator<MatIterator_<_Tp>>();\n    CV_DbgAssert( elemSize() == sizeof(_Tp) );\n    return std::reverse_iterator<MatIterator_<_Tp>>(MatIterator_<_Tp>((Mat_<_Tp>*)this));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat::rend", "index": 2438, "label": 0}
{"input": "inline\nSize MatSize::operator()() const\n{\n    CV_DbgAssert(dims() <= 2);\n    return Size(p[1], p[0]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "MatSize::operator()", "index": 2439, "label": 0}
{"input": "Matrix<T> random_sample(const Matrix<T>& srcMatrix, size_t size)\n{\n    UniqueRandom rand((int)srcMatrix.rows);\n    Matrix<T> newSet(new T[size * srcMatrix.cols], size,srcMatrix.cols);\n\n    T* src,* dest;\n    for (size_t i=0; i<size; ++i) {\n        long r = rand.next();\n        dest = newSet[i];\n        src = srcMatrix[r];\n        std::copy(src, src+srcMatrix.cols, dest);\n    }\n    return newSet;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/sampling.h", "function_name": "random_sample", "index": 2440, "label": 0}
{"input": "const TensorImagePatchOp<Dynamic, Dynamic, const Derived>\n    extract_image_patches(const Index patch_rows, const Index patch_cols,\n                          const Index row_stride, const Index col_stride,\n                          const Index in_row_stride, const Index in_col_stride,\n                          const Index row_inflate_stride, const Index col_inflate_stride,\n                          const Index padding_top, const Index padding_bottom,\n                          const Index padding_left,const Index padding_right,\n                          const Scalar padding_value) const {\n      return TensorImagePatchOp<Dynamic, Dynamic, const Derived>(derived(), patch_rows, patch_cols, row_stride, col_stride,\n                                                                 in_row_stride, in_col_stride, row_inflate_stride, col_inflate_stride,\n                                                                 padding_top, padding_bottom, padding_left, padding_right, padding_value);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "patch_rows", "index": 2441, "label": 0}
{"input": "void test_multithread_compound_assignment()\n{\n  Tensor<float, 3> in1(2,3,7);\n  Tensor<float, 3> in2(2,3,7);\n  Tensor<float, 3> out(2,3,7);\n\n  in1.setRandom();\n  in2.setRandom();\n\n  Eigen::ThreadPool tp(internal::random<int>(3, 11));\n  Eigen::ThreadPoolDevice thread_pool_device(&tp, internal::random<int>(3, 11));\n  out.device(thread_pool_device) = in1;\n  out.device(thread_pool_device) += in2 * 3.14f;\n\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_APPROX(out(i,j,k), in1(i,j,k) + in2(i,j,k) * 3.14f);\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_thread_pool.cpp", "function_name": "test_multithread_compound_assignment", "index": 2442, "label": 0}
{"input": "inline MemoryAllocation::~MemoryAllocation() {\n  if (p_ != nullptr) {\n    \n    auto ret = GetApi().AllocatorFree(allocator_, p_);\n    static_cast<void>(ret);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "MemoryAllocation::~MemoryAllocation", "index": 2443, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstSegmentReturnType segment(Index start, Index n) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return ConstSegmentReturnType(derived(), start, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstSegmentReturnType segment", "index": 2444, "label": 0}
{"input": "inline cl_int clEnqueueMarker(cl_command_queue p0, cl_event* p1) { return clEnqueueMarker_pfn(p0, p1); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueMarker", "index": 2445, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    typename internal::conditional<(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)),\n                                   TriangularView<MatrixType,TriMode>,\n                                   TriangularView<typename MatrixType::AdjointReturnType,TriMode> >::type\n    triangularView() const\n    {\n      typename internal::conditional<(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)), MatrixType&, typename MatrixType::ConstTransposeReturnType>::type tmp1(m_matrix);\n      typename internal::conditional<(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)), MatrixType&, typename MatrixType::AdjointReturnType>::type tmp2(tmp1);\n      return typename internal::conditional<(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)),\n                                   TriangularView<MatrixType,TriMode>,\n                                   TriangularView<typename MatrixType::AdjointReturnType,TriMode> >::type(tmp2);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/SelfAdjointView.h", "function_name": "triangularView", "index": 2446, "label": 0}
{"input": "void test_sparse_permutations()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    int s = Eigen::internal::random<int>(1,50);\n    CALL_SUBTEST_1((  sparse_permutations_all<double>(s) ));\n    CALL_SUBTEST_2((  sparse_permutations_all<std::complex<double> >(s) ));\n  }\n\n  VERIFY((internal::is_same<internal::permutation_matrix_product<SparseMatrix<double>,OnTheRight,false,SparseShape>::ReturnType,\n                            internal::nested_eval<Product<SparseMatrix<double>,PermutationMatrix<Dynamic,Dynamic>,AliasFreeProduct>,1>::type>::value));\n\n  VERIFY((internal::is_same<internal::permutation_matrix_product<SparseMatrix<double>,OnTheLeft,false,SparseShape>::ReturnType,\n                            internal::nested_eval<Product<PermutationMatrix<Dynamic,Dynamic>,SparseMatrix<double>,AliasFreeProduct>,1>::type>::value));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_permutations.cpp", "function_name": "test_sparse_permutations", "index": 2447, "label": 0}
{"input": "static v128_t wasm_unpackhi_i64x2(v128_t a, v128_t b) {\n    return wasm_v8x16_shuffle(a, b, 8,9,10,11,12,13,14,15,24,25,26,27,28,29,30,31);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "wasm_unpackhi_i64x2", "index": 2448, "label": 0}
{"input": "inline bool Server::write_response_with_content(Stream &strm,\n                                                bool close_connection,\n                                                const Request &req,\n                                                Response &res) {\n  return write_response_core(strm, close_connection, req, res, true);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Server::write_response_with_content", "index": 2449, "label": 0}
{"input": "void verifySizeOf(const MatrixType&)\n{\n  typedef typename MatrixType::Scalar Scalar;\n  if (MatrixType::RowsAtCompileTime!=Dynamic && MatrixType::ColsAtCompileTime!=Dynamic)\n    VERIFY_IS_EQUAL(std::ptrdiff_t(sizeof(MatrixType)),std::ptrdiff_t(sizeof(Scalar))*std::ptrdiff_t(MatrixType::SizeAtCompileTime));\n  else\n    VERIFY_IS_EQUAL(sizeof(MatrixType),sizeof(Scalar*) + 2 * sizeof(typename MatrixType::Index));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sizeof.cpp", "function_name": "verifySizeOf", "index": 2450, "label": 0}
{"input": "inline cl_int clGetGLContextInfoKHR(const cl_context_properties* p0, cl_gl_context_info p1, size_t p2, void* p3, size_t* p4) { return clGetGLContextInfoKHR_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_gl_wrappers.hpp", "function_name": "clGetGLContextInfoKHR", "index": 2451, "label": 0}
{"input": "NdArray<dtype> nanmin(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = DtypeInfo<dtype>::max();\n                                     };\n                                 });\n\n        return min(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nanmin.hpp", "function_name": "nanmin", "index": 2452, "label": 0}
{"input": "inline mp_prec_t digits2bits(int d)\n{\n    const double LOG2_10 = 3.3219280948873624;\n\n    return mp_prec_t(std::ceil( d * LOG2_10 ));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "digits2bits", "index": 2453, "label": 0}
{"input": "static void test_float_ceiling()\n{\n  Tensor<float, 2> ftensor(20,30);\n  ftensor = ftensor.random() * 100.f;\n\n  Tensor<float, 2> result = ftensor.ceil();\n\n  for (int i = 0; i < 20; ++i) {\n    for (int j = 0; j < 30; ++j) {\n      VERIFY_IS_EQUAL(result(i,j), numext::ceil(ftensor(i,j)));\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_roundings.cpp", "function_name": "test_float_ceiling", "index": 2454, "label": 0}
{"input": "bool test_redux(const Xpr&, int traversal, int unrolling)\n{\n  typedef typename Xpr::Scalar Scalar;\n  typedef internal::redux_traits<internal::scalar_sum_op<Scalar,Scalar>,internal::redux_evaluator<Xpr> > traits;\n  \n  bool res = traits::Traversal==traversal && traits::Unrolling==unrolling;\n  if(!res)\n  {\n    std::cerr << demangle_flags(Xpr::Flags) << std::endl;\n    std::cerr << demangle_flags(internal::evaluator<Xpr>::Flags) << std::endl;\n    traits::debug();\n    \n    std::cerr << \" Expected Traversal == \" << demangle_traversal(traversal)\n              << \" got \" << demangle_traversal(traits::Traversal) << \"\\n\";\n    std::cerr << \" Expected Unrolling == \" << demangle_unrolling(unrolling)\n              << \" got \" << demangle_unrolling(traits::Unrolling) << \"\\n\";\n  }\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/vectorization_logic.cpp", "function_name": "test_redux", "index": 2455, "label": 0}
{"input": "void EmojiPlayer::StartPlayer(int aaf, bool repeat, int fps)\n{\n    if (player_handle_) {\n        uint32_t start, end;\n        const void *src_data;\n        size_t src_len;\n\n        src_data = mmap_assets_get_mem(assets_handle_, aaf);\n        src_len = mmap_assets_get_size(assets_handle_, aaf);\n\n        anim_player_set_src_data(player_handle_, src_data, src_len);\n        anim_player_get_segment(player_handle_, &start, &end);\n        if(MMAP_EMOJI_WAKE_AAF == aaf){\n            start = 7;\n        }\n        anim_player_set_segment(player_handle_, start, end, fps, true);\n        anim_player_update(player_handle_, PLAYER_ACTION_START);\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/emoji_display.cc", "function_name": "EmojiPlayer::StartPlayer", "index": 2456, "label": 0}
{"input": "void QuickContext::OnGC(std::string mem_info) {\n  delegate_->OnRuntimeGC({{kRawRuntimeMemoryInfo, std::move(mem_info)}});\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/vm/lepus/quick_context.cc", "function_name": "QuickContext::OnGC", "index": 2457, "label": 0}
{"input": "void big_sparse_triplet(Index rows, Index cols, double density) {\n  typedef typename SparseMatrixType::StorageIndex StorageIndex;\n  typedef typename SparseMatrixType::Scalar Scalar;\n  typedef Triplet<Scalar,Index> TripletType;\n  std::vector<TripletType> triplets;\n  double nelements = density * rows*cols;\n  VERIFY(nelements>=0 && nelements <  NumTraits<StorageIndex>::highest());\n  Index ntriplets = Index(nelements);\n  triplets.reserve(ntriplets);\n  Scalar sum = Scalar(0);\n  for(Index i=0;i<ntriplets;++i)\n  {\n    Index r = internal::random<Index>(0,rows-1);\n    Index c = internal::random<Index>(0,cols-1);\n    \n    Scalar v = numext::abs(internal::random<Scalar>());\n    triplets.push_back(TripletType(r,c,v));\n    sum += v;\n  }\n  SparseMatrixType m(rows,cols);\n  m.setFromTriplets(triplets.begin(), triplets.end());\n  VERIFY(m.nonZeros() <= ntriplets);\n  VERIFY_IS_APPROX(sum, m.sum());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_basic.cpp", "function_name": "big_sparse_triplet", "index": 2458, "label": 0}
{"input": "EIGEN_DONT_INLINE void quatmul_novec(const Quat& a, const Quat& b, Quat& c)\n{\n  c = internal::quat_product<0, Quat, Quat, typename Quat::Scalar, Aligned>::run(a,b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/quatmul.cpp", "function_name": "quatmul_novec", "index": 2459, "label": 0}
{"input": "inline\nSparseMatConstIterator_<_Tp> SparseMat::end() const\n{\n    SparseMatConstIterator_<_Tp> it(this);\n    it.seekEnd();\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat::end", "index": 2460, "label": 0}
{"input": "inline int umfpack_symbolic(int n_row,int n_col,\n                            const int Ap[], const int Ai[], const std::complex<double> Ax[], void **Symbolic,\n                            const double Control [UMFPACK_CONTROL], double Info [UMFPACK_INFO])\n{\n  return umfpack_zi_symbolic(n_row,n_col,Ap,Ai,&numext::real_ref(Ax[0]),0,Symbolic,Control,Info);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_symbolic", "index": 2461, "label": 0}
{"input": "ElectronEmojiDisplay::ElectronEmojiDisplay(esp_lcd_panel_io_handle_t panel_io,\n                                           esp_lcd_panel_handle_t panel, int width, int height,\n                                           int offset_x, int offset_y, bool mirror_x, bool mirror_y,\n                                           bool swap_xy, DisplayFonts fonts)\n    : SpiLcdDisplay(panel_io, panel, width, height, offset_x, offset_y, mirror_x, mirror_y, swap_xy,\n                    fonts),\n      emotion_gif_(nullptr) {\n    SetupGifContainer();\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/electron-bot/electron_emoji_display.cc", "function_name": "ElectronEmojiDisplay::ElectronEmojiDisplay", "index": 2462, "label": 0}
{"input": "inline void ClientImpl::close_socket(Socket &socket) {\n  \n  \n  \n  \n  \n  \n  assert(socket_requests_in_flight_ == 0 ||\n         socket_requests_are_from_thread_ == std::this_thread::get_id());\n\n  \n#ifdef CPPHTTPLIB_OPENSSL_SUPPORT\n  assert(socket.ssl == nullptr);\n#endif\n  if (socket.sock == INVALID_SOCKET) { return; }\n  detail::close_socket(socket.sock);\n  socket.sock = INVALID_SOCKET;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::close_socket", "index": 2463, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    CwiseBinaryOp<internal::scalar_quotient_op<Scalar>,\n                  const ExpressionTypeNestedCleaned,\n                  const typename ExtendedType<OtherDerived>::Type>\n    operator/(const DenseBase<OtherDerived>& other) const\n    {\n      EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived)\n      EIGEN_STATIC_ASSERT_ARRAYXPR(ExpressionType)\n      EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived)\n      return m_matrix / extendedTo(other.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "CwiseBinaryOp<internal::scalar_quotient_op<Scalar>,\n                  const ExpressionTypeNestedCleaned,\n                  const typename ExtendedType<OtherDerived>::Type>\n    operator/", "index": 2464, "label": 0}
{"input": "int Mobunet::fgprocess(JMat* pic,const int* boxs,JMat* feat,JMat* fg){\n    int boxx, boxy ,boxwidth, boxheight ;\n    boxx = boxs[0];boxy=boxs[1];boxwidth=boxs[2]-boxx;boxheight=boxs[3]-boxy;\n    int stride = pic->stride();\n    cv::Mat roisrc(pic->cvmat(),cv::Rect(boxx,boxy,boxwidth,boxheight));\n    cv::Mat cvorig;\n    cv::resize(roisrc , cvorig, cv::Size(168, 168), cv::INTER_AREA);\n    JMat  pic168(168,168,(uint8_t*)cvorig.data);\n    preprocess(&pic168,feat);\n    cv::Mat cvrst;;\n    cv::resize(cvorig , cvrst, cv::Size(boxwidth, boxheight), cv::INTER_AREA);\n    cv::Mat roidst(fg->cvmat(),cv::Rect(boxx,boxy,boxwidth,boxheight));\n    cvrst.copyTo(roidst);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/munet.cpp", "function_name": "Mobunet::fgprocess", "index": 2465, "label": 0}
{"input": "ElectronBot() : boot_button_(BOOT_BUTTON_GPIO) {\n        InitializeSpi();\n        InitializeGc9a01Display();\n        InitializeButtons();\n        InitializePowerManager();\n        InitializeController();\n\n        if (DISPLAY_BACKLIGHT_PIN != GPIO_NUM_NC) {\n            GetBacklight()->RestoreBrightness();\n        }\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/electron-bot/electron_bot.cc", "function_name": "ElectronBot", "index": 2466, "label": 0}
{"input": "inline DualQuat<T> DualQuat<T>::inv(QuatAssumeType assumeUnit) const\n{\n    Quat<T> real = getRealPart();\n    Quat<T> dual = getDualPart();\n    return createFromQuat(real.inv(assumeUnit), -real.inv(assumeUnit) * dual * real.inv(assumeUnit));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::inv", "index": 2467, "label": 0}
{"input": "static inline void colamd_set_defaults(double knobs[COLAMD_KNOBS])\n{\n  \n  \n  int i ;\n\n  if (!knobs)\n  {\n    return ;      \n  }\n  for (i = 0 ; i < COLAMD_KNOBS ; i++)\n  {\n    knobs [i] = 0 ;\n  }\n  knobs [COLAMD_DENSE_ROW] = 0.5 ;  \n  knobs [COLAMD_DENSE_COL] = 0.5 ;  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/OrderingMethods/Eigen_Colamd.h", "function_name": "colamd_set_defaults", "index": 2468, "label": 0}
{"input": "v_float64x2(double v0, double v1)\n    {\n        double v[] = {v0, v1};\n        val = wasm_v128_load(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_float64x2", "index": 2469, "label": 0}
{"input": "static inline std::string toLowerCase(const std::string& str)\n{\n    std::string result(str);\n    std::transform(result.begin(), result.end(), result.begin(), details::char_tolower);\n    return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cvstd.hpp", "function_name": "toLowerCase", "index": 2470, "label": 0}
{"input": "void ElectronEmojiDisplay::SetEmotion(const char* emotion) {\n    if (!emotion || !emotion_gif_) {\n        return;\n    }\n\n    DisplayLockGuard lock(this);\n\n    for (const auto& map : emotion_maps_) {\n        if (map.name && strcmp(map.name, emotion) == 0) {\n            lv_gif_set_src(emotion_gif_, map.gif);\n            ESP_LOGI(TAG, \"设置表情: %s\", emotion);\n            return;\n        }\n    }\n\n    lv_gif_set_src(emotion_gif_, &staticstate);\n    ESP_LOGI(TAG, \"未知表情'%s'，使用默认\", emotion);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/electron-bot/electron_emoji_display.cc", "function_name": "ElectronEmojiDisplay::SetEmotion", "index": 2471, "label": 0}
{"input": "JS::ThrowCompletionOr<GC::Ref<OffscreenCanvasRenderingContext2D>> OffscreenCanvasRenderingContext2D::create(JS::Realm& realm, OffscreenCanvas& offscreen_canvas, JS::Value options)\n{\n    auto context_attributes = TRY(CanvasRenderingContext2DSettings::from_js_value(realm.vm(), options));\n    return realm.create<OffscreenCanvasRenderingContext2D>(realm, offscreen_canvas, context_attributes);\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::create", "index": 2472, "label": 0}
{"input": "void KroneckerProduct<Lhs,Rhs>::evalTo(Dest& dst) const\n{\n  const int BlockRows = Rhs::RowsAtCompileTime,\n            BlockCols = Rhs::ColsAtCompileTime;\n  const Index Br = m_B.rows(),\n              Bc = m_B.cols();\n  for (Index i=0; i < m_A.rows(); ++i)\n    for (Index j=0; j < m_A.cols(); ++j)\n      Block<Dest,BlockRows,BlockCols>(dst,i*Br,j*Bc,Br,Bc) = m_A.coeff(i,j) * m_B;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h", "function_name": "KroneckerProduct<Lhs,Rhs>::evalTo", "index": 2473, "label": 0}
{"input": "bool deserialize_benchmarks(const char* filename, vector<benchmark_t>& benchmarks, size_t& first_benchmark_to_run)\n{\n  FILE* file = fopen(filename, \"r\");\n  if (!file) {\n    return false;\n  }\n  if (1 != fread(&max_clock_speed, sizeof(max_clock_speed), 1, file)) {\n    return false;\n  }\n  size_t benchmarks_vector_size = 0;\n  if (1 != fread(&benchmarks_vector_size, sizeof(benchmarks_vector_size), 1, file)) {\n    return false;\n  }\n  if (1 != fread(&first_benchmark_to_run, sizeof(first_benchmark_to_run), 1, file)) {\n    return false;\n  }\n  benchmarks.resize(benchmarks_vector_size);\n  if (benchmarks.size() != fread(benchmarks.data(), sizeof(benchmark_t), benchmarks.size(), file)) {\n    return false;\n  }\n  unlink(filename);\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchmark-blocking-sizes.cpp", "function_name": "deserialize_benchmarks", "index": 2474, "label": 0}
{"input": "inline __m128i _v128_cvtepi16_epi32_high(const __m128i& a)\n{ return _mm_srai_epi32(_mm_unpackhi_epi16(a, a), 16); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_cvtepi16_epi32_high", "index": 2475, "label": 0}
{"input": "inline size_t TensorTypeAndShapeInfo::GetDimensionsCount() const {\n  size_t out;\n  ThrowOnError(GetApi().GetDimensionsCount(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfo::GetDimensionsCount", "index": 2476, "label": 0}
{"input": "auto bessel_kn_prime(dtype1 inV, const NdArray<dtype2>& inArrayX)\n    {\n        NdArray<decltype(bessel_kn_prime(dtype1{ 0 }, dtype2{ 0 }))> returnArray(inArrayX.shape());\n\n        stl_algorithms::transform(\n            inArrayX.cbegin(),\n            inArrayX.cend(),\n            returnArray.begin(),\n            [inV](dtype2 inX) -> auto{ return bessel_kn_prime(inV, inX); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/bessel_kn_prime.hpp", "function_name": "bessel_kn_prime", "index": 2477, "label": 0}
{"input": "GAPI_EXPORTS_W cv::Ptr<IStreamSource>\ninline make_gst_src(const std::string& pipeline,\n                    const GStreamerSource::OutputType outputType =\n                    GStreamerSource::OutputType::MAT)\n{\n    return make_src<GStreamerSource>(pipeline, outputType);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/streaming/gstreamer/gstreamersource.hpp", "function_name": "cv::Ptr<IStreamSource>\ninline make_gst_src", "index": 2478, "label": 0}
{"input": "inline bool ComplexSchur<MatrixType>::subdiagonalEntryIsNeglegible(Index i)\n{\n  RealScalar d = numext::norm1(m_matT.coeff(i,i)) + numext::norm1(m_matT.coeff(i+1,i+1));\n  RealScalar sd = numext::norm1(m_matT.coeff(i+1,i));\n  if (internal::isMuchSmallerThan(sd, d, NumTraits<RealScalar>::epsilon()))\n  {\n    m_matT.coeffRef(i+1,i) = ComplexScalar(0);\n    return true;\n  }\n  return false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h", "function_name": "ComplexSchur<MatrixType>::subdiagonalEntryIsNeglegible", "index": 2479, "label": 0}
{"input": "inline size_t TensorTypeAndShapeInfoImpl<T>::GetElementCount() const {\n  size_t out;\n  ThrowOnError(GetApi().GetTensorShapeElementCount(this->p_, &out));\n  return static_cast<size_t>(out);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "TensorTypeAndShapeInfoImpl<T>::GetElementCount", "index": 2480, "label": 0}
{"input": "cv::GInferListOutputs\ninfer(const std::string& tag, const cv::GArray<cv::Rect>& rois, const cv::GInferInputs& inputs)\n{\n    return cv::detail::inferGenericROI<GInferListBase>(tag, rois, inputs);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/infer.hpp", "function_name": "infer", "index": 2481, "label": 0}
{"input": "HybridNonLinearSolver(FunctorType &_functor)\n        : functor(_functor) { nfev=njev=iter = 0;  fnorm= 0.; useExternalScaling=false;}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h", "function_name": "HybridNonLinearSolver", "index": 2482, "label": 0}
{"input": "inline cl_int clEnqueueNativeKernel(cl_command_queue p0, void (CL_CALLBACK*p1) (void*), void* p2, size_t p3, cl_uint p4, const cl_mem* p5, const void** p6, cl_uint p7, const cl_event* p8, cl_event* p9) { return clEnqueueNativeKernel_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueNativeKernel", "index": 2483, "label": 0}
{"input": "inline v_float64 v_sqr_magnitude(const v_float64& a, const v_float64& b)\n{\n    return vfmacc(vfmul(a, a, VTraits<v_float64>::vlanes()), b, b, VTraits<v_float64>::vlanes());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv_scalable.hpp", "function_name": "v_sqr_magnitude", "index": 2484, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\ndouble2 pbetainc<double2>(const double2& a, const double2& b, const double2& x)\n{\n  using numext::betainc;\n  return make_double2(betainc(a.x, b.x, x.x), betainc(a.y, b.y, x.y));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/arch/CUDA/CudaSpecialFunctions.h", "function_name": "pbetainc", "index": 2485, "label": 0}
{"input": "EIGEN_DEVICE_FUNC VectorType intersection(const Hyperplane& other) const\n  {\n    EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(VectorType, 2)\n    Scalar det = coeffs().coeff(0) * other.coeffs().coeff(1) - coeffs().coeff(1) * other.coeffs().coeff(0);\n    \n    \n    if(internal::isMuchSmallerThan(det, Scalar(1)))\n    {   \n        if(numext::abs(coeffs().coeff(1))>numext::abs(coeffs().coeff(0)))\n            return VectorType(coeffs().coeff(1), -coeffs().coeff(2)/coeffs().coeff(1)-coeffs().coeff(0));\n        else\n            return VectorType(-coeffs().coeff(2)/coeffs().coeff(0)-coeffs().coeff(1), coeffs().coeff(0));\n    }\n    else\n    {   \n        Scalar invdet = Scalar(1) / det;\n        return VectorType(invdet*(coeffs().coeff(1)*other.coeffs().coeff(2)-other.coeffs().coeff(1)*coeffs().coeff(2)),\n                          invdet*(other.coeffs().coeff(0)*coeffs().coeff(2)-coeffs().coeff(0)*other.coeffs().coeff(2)));\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Hyperplane.h", "function_name": "intersection", "index": 2486, "label": 0}
{"input": "inline void SessionImpl<T>::Run(const RunOptions& run_options, const IoBinding& io_binding) {\n  ThrowOnError(GetApi().RunWithBinding(this->p_, run_options, io_binding));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "SessionImpl<T>::Run", "index": 2487, "label": 0}
{"input": "void\nJniHelper::callVoidMethod(jobject obj, jmethodID methodId, jint arg1, jint arg2, jint arg3,\n                          jstring arg4, jstring arg5, jobject arg6) {\n    if (sJavaVM == nullptr) {\n        LOGE(TAG, \"sJavaVM is nullptr\");\n        return;\n    }\n\n    JNIEnv *env = nullptr;\n    bool attached = false;\n    switch (sJavaVM->GetEnv((void **) &env, JNI_VERSION_1_4)) {\n        case JNI_OK:\n            break;\n        case JNI_EDETACHED:\n            if (sJavaVM->AttachCurrentThread(&env, nullptr) != 0) {\n                LOGE(TAG, \"Could not attach current thread\");\n            }\n            attached = true;\n            break;\n        case JNI_EVERSION:\n            LOGE(TAG, \"Invalid java version\");\n            break;\n        default:\n            break;\n    }\n\n    if (env != nullptr) {\n        env->CallVoidMethod(obj, methodId, arg1, arg2, arg3, arg4, arg5, arg6);\n    }\n\n    if (attached) {\n        sJavaVM->DetachCurrentThread();\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/JniHelper.cpp", "function_name": "JniHelper::callVoidMethod", "index": 2488, "label": 0}
{"input": "LepusElement::LepusElement(\n    int32_t element_id, tasm::TemplateAssembler* tasm,\n    const std::shared_ptr<worklet::LepusApiHandler>& task_handler)\n    : element_id_(element_id), tasm_(tasm) {\n  if (task_handler != nullptr) {\n    task_handler_ = task_handler;\n  } else {\n    LOGE(\"LepusElement::constructor task_handler is nullptr\");\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/renderer/worklet/lepus_element.cc", "function_name": "LepusElement::LepusElement", "index": 2489, "label": 0}
{"input": "static NdArray<double> eulerAngles(const NdArray<double>& angles)\n        {\n            return Quaternion(angles).toDCM();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Rotations/DCM.hpp", "function_name": "angles", "index": 2490, "label": 0}
{"input": "BlockVectorReturn(const BlockSparseMatrixT& spblockmat, VectorType& vec)\n    : m_spblockmat(spblockmat),m_vec(vec)\n    { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "BlockVectorReturn", "index": 2491, "label": 0}
{"input": "inline typename MatrixType::Scalar RealSchur<MatrixType>::computeNormOfT()\n{\n  const Index size = m_matT.cols();\n  \n  \n  \n  Scalar norm(0);\n  for (Index j = 0; j < size; ++j)\n    norm += m_matT.col(j).segment(0, (std::min)(size,j+2)).cwiseAbs().sum();\n  return norm;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealSchur.h", "function_name": "RealSchur<MatrixType>::computeNormOfT", "index": 2492, "label": 0}
{"input": "ConstMat(const T* ptr, Extents2D extents, size_t ofs = 0)\n      : ptr(ptr), extents(extents), ofs(ofs) {\n    HWY_DASSERT(ptr != nullptr);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "ops/matmul.h", "function_name": "ConstMat", "index": 2493, "label": 0}
{"input": "auto arcsin(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(arcsin(dtype{ 0 }))> returnArray(inArray.shape());\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) noexcept -> auto{ return arcsin(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/arcsin.hpp", "function_name": "arcsin", "index": 2494, "label": 0}
{"input": "inline cl_int clGetEventInfo(cl_event p0, cl_event_info p1, size_t p2, void* p3, size_t* p4) { return clGetEventInfo_pfn(p0, p1, p2, p3, p4); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetEventInfo", "index": 2495, "label": 0}
{"input": "bool OffscreenCanvasRenderingContext2D::is_point_in_path(Path2D const&, double, double, StringView)\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::clip(Path2D const&, double, double, StringView)\");\n    return false;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::is_point_in_path", "index": 2496, "label": 0}
{"input": "inline const mpreal digamma (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(digamma);     }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "digamma", "index": 2497, "label": 0}
{"input": "extern __inline v8i16\n__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\nmsa_qdmulhq_n_s16(v8i16 a, int16_t b)\n{\n  v8i16 a_lo, a_hi;\n  ILVRL_H2_SH(a, msa_dupq_n_s16(0), a_lo, a_hi);\n  return msa_packr_s32(msa_shlq_n_s32(msa_mulq_s32(msa_paddlq_s16(a_lo), msa_dupq_n_s32(b)), 1),\n                       msa_shlq_n_s32(msa_mulq_s32(msa_paddlq_s16(a_hi), msa_dupq_n_s32(b)), 1), 16);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/msa_macros.h", "function_name": "msa_qdmulhq_n_s16", "index": 2498, "label": 0}
{"input": "void serialize_benchmarks(const char* filename, const vector<benchmark_t>& benchmarks, size_t first_benchmark_to_run)\n{\n  FILE* file = fopen(filename, \"w\");\n  if (!file) {\n    cerr << \"Could not open file \" << filename << \" for writing.\" << endl;\n    cerr << \"Do you have write permissions on the current working directory?\" << endl;\n    exit(1);\n  }\n  size_t benchmarks_vector_size = benchmarks.size();\n  fwrite(&max_clock_speed, sizeof(max_clock_speed), 1, file);\n  fwrite(&benchmarks_vector_size, sizeof(benchmarks_vector_size), 1, file);\n  fwrite(&first_benchmark_to_run, sizeof(first_benchmark_to_run), 1, file);\n  fwrite(benchmarks.data(), sizeof(benchmark_t), benchmarks.size(), file);\n  fclose(file);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchmark-blocking-sizes.cpp", "function_name": "serialize_benchmarks", "index": 2499, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_boolean_and_op, const Derived, const OtherDerived>\n    operator&&(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_boolean_and_op());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_boolean_and_op, const Derived, const OtherDerived>\n    operator&&", "index": 2500, "label": 0}
{"input": "v_uint64x2(uint64 v0, uint64 v1)\n    {\n        uint64 v[] = {v0, v1};\n        val = wasm_v128_load(v);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_uint64x2", "index": 2501, "label": 0}
{"input": "Mobunet::~Mobunet(){\n    unet.clear();\n    if(mat_weights){\n        delete mat_weights;\n        mat_weights = nullptr;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/munet.cpp", "function_name": "Mobunet::~Mobunet", "index": 2502, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\ndouble2 pdigamma<double2>(const double2& a)\n{\n  using numext::digamma;\n  return make_double2(digamma(a.x), digamma(a.y));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/arch/CUDA/CudaSpecialFunctions.h", "function_name": "pdigamma", "index": 2503, "label": 0}
{"input": "void mat_mat_scalar_scalar_product()\n{\n  Eigen::Matrix2Xd dNdxy(2, 3);\n  dNdxy << -0.5, 0.5, 0,\n           -0.3, 0, 0.3;\n  double det = 6.0, wt = 0.5;\n  VERIFY_IS_APPROX(dNdxy.transpose()*dNdxy*det*wt, det*wt*dNdxy.transpose()*dNdxy);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/product_extra.cpp", "function_name": "mat_mat_scalar_scalar_product", "index": 2504, "label": 0}
{"input": "void VectorwiseOp<ExpressionType,Direction>::reverseInPlace()\n{\n  internal::vectorwise_reverse_inplace_impl<Direction>::run(_expression().const_cast_derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/Reverse.h", "function_name": "VectorwiseOp<ExpressionType,Direction>::reverseInPlace", "index": 2505, "label": 0}
{"input": "inline void SSLClient::set_ca_cert_store(X509_STORE *ca_cert_store) {\n  if (ca_cert_store) {\n    if (ctx_) {\n      if (SSL_CTX_get_cert_store(ctx_) != ca_cert_store) {\n        \n        SSL_CTX_set_cert_store(ctx_, ca_cert_store);\n      }\n    } else {\n      X509_STORE_free(ca_cert_store);\n    }\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::set_ca_cert_store", "index": 2506, "label": 0}
{"input": "int GTexture::load(int width,int height,uint8_t* buf){\n    if((width!=m_width)||(height!=m_height))return -1;\n    if(!m_loaded){\n        glGenTextures(1, &m_tid);\n        checkGlError(\"glGenTextures\");\n    }else{\n    }\n    \n    glBindTexture(GL_TEXTURE_2D, m_tid);\n    checkGlError(\"glBindTexture\");\n    glTexImage2D(GL_TEXTURE_2D, 0, m_format, m_width, m_height, 0, m_format, GL_UNSIGNED_BYTE, buf);\n    \n    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n\n    checkGlError(\"glTexImage2D\");\n    \n    m_loaded = 1;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/render/GlesProgram.cpp", "function_name": "GTexture::load", "index": 2507, "label": 0}
{"input": "inline unsigned RNG::next()\n{\n    state = (uint64)(unsigned)state*  4164903690U + (unsigned)(state >> 32);\n    return (unsigned)state;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/operations.hpp", "function_name": "RNG::next", "index": 2508, "label": 0}
{"input": "inline void v_recombine(const _Tpvec& a, const _Tpvec& b, _Tpvec& c, _Tpvec& d)\n{\n    c.val = vec_mergesqh(a.val, b.val);\n    d.val = vec_mergesql(a.val, b.val);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_vsx.hpp", "function_name": "v_recombine", "index": 2509, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n  static inline bool extract_kernel(MatrixType& mat, Ref<VectorType> res, Ref<VectorType> representative)\n  {\n    using std::abs;\n    Index i0;\n    \n    mat.diagonal().cwiseAbs().maxCoeff(&i0);\n    \n    \n    representative = mat.col(i0);\n    Scalar n0, n1;\n    VectorType c0, c1;\n    n0 = (c0 = representative.cross(mat.col((i0+1)%3))).squaredNorm();\n    n1 = (c1 = representative.cross(mat.col((i0+2)%3))).squaredNorm();\n    if(n0>n1) res = c0/std::sqrt(n0);\n    else      res = c1/std::sqrt(n1);\n\n    return true;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h", "function_name": "res", "index": 2510, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void cleanup() {\n    m_condImpl.cleanup();\n    m_thenImpl.cleanup();\n    m_elseImpl.cleanup();\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h", "function_name": "cleanup", "index": 2511, "label": 0}
{"input": "void ElementManager::SendAnimationEvent(const std::string &type, int tag,\n                                        const lepus::Value &dict) {\n  delegate_->SendAnimationEvent(type, tag, dict);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b03d25564e4fc065d5b8e568dc8c0009a570d83b", "file_path": "core/renderer/dom/element_manager.cc", "function_name": "ElementManager::SendAnimationEvent", "index": 2512, "label": 0}
{"input": "inline void hosted_at(const std::string &hostname,\n                      std::vector<std::string> &addrs) {\n  struct addrinfo hints;\n  struct addrinfo *result;\n\n  memset(&hints, 0, sizeof(struct addrinfo));\n  hints.ai_family = AF_UNSPEC;\n  hints.ai_socktype = SOCK_STREAM;\n  hints.ai_protocol = 0;\n\n  if (getaddrinfo(hostname.c_str(), nullptr, &hints, &result)) {\n#if defined __linux__ && !defined __ANDROID__\n    res_init();\n#endif\n    return;\n  }\n\n  for (auto rp = result; rp; rp = rp->ai_next) {\n    const auto &addr =\n        *reinterpret_cast<struct sockaddr_storage *>(rp->ai_addr);\n    std::string ip;\n    auto dummy = -1;\n    if (detail::get_ip_and_port(addr, sizeof(struct sockaddr_storage), ip,\n                                dummy)) {\n      addrs.push_back(ip);\n    }\n  }\n\n  freeaddrinfo(result);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "hosted_at", "index": 2513, "label": 0}
{"input": "UIInput::~UIInput() {\n  NodeManager::Instance().UnregisterNodeEvent(input_node_,\n                                              NODE_EVENT_ON_AREA_CHANGE);\n  NodeManager::Instance().UnregisterNodeEvent(input_node_,\n                                              NODE_TEXT_INPUT_ON_CHANGE);\n  NodeManager::Instance().UnregisterNodeEvent(Node(), NODE_TOUCH_EVENT);\n  NodeManager::Instance().UnregisterNodeEvent(\n      input_node_, NODE_TEXT_INPUT_ON_TEXT_SELECTION_CHANGE);\n  NodeManager::Instance().UnregisterNodeEvent(input_node_,\n                                              NODE_TEXT_INPUT_ON_SUBMIT);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_input.cc", "function_name": "UIInput::~UIInput", "index": 2514, "label": 0}
{"input": "inline\nT poly_eval_horner( const Polynomials& poly, const T& x )\n{\n  T val=poly[poly.size()-1];\n  for(DenseIndex i=poly.size()-2; i>=0; --i ){\n    val = val*x + poly[i]; }\n  return val;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h", "function_name": "poly_eval_horner", "index": 2515, "label": 0}
{"input": "NdArray<dtype> extremeValue(const Shape& inShape, dtype inA = 1, dtype inB = 1)\n    {\n        return detail::extremeValue<dtype>(generator_, inShape, inA, inB);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/extremeValue.hpp", "function_name": "extremeValue", "index": 2516, "label": 0}
{"input": "NCNN_EXPORT NCNN_FORCEINLINE float bfloat16_to_float32(unsigned short value)\n{\n    \n    union\n    {\n        unsigned int u;\n        float f;\n    } tmp;\n    tmp.u = value << 16;\n    return tmp.f;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "bfloat16_to_float32", "index": 2517, "label": 0}
{"input": "JS::ThrowCompletionOr<OffscreenRenderingContext> OffscreenCanvas::get_context(Bindings::OffscreenRenderingContextId contextId, JS::Value options)\n{\n    \n    if (!options.is_object())\n        options = JS::js_null();\n\n    \n    \n\n    \n    \n    if (contextId == Bindings::OffscreenRenderingContextId::_2d) {\n        if (TRY(create_2d_context(options)) == HasOrCreatedContext::Yes)\n            return GC::make_root(*m_context.get<GC::Ref<HTML::OffscreenCanvasRenderingContext2D>>());\n\n        return Empty {};\n    }\n\n    if (contextId == Bindings::OffscreenRenderingContextId::Webgl) {\n        dbgln(\"(STUBBED) OffscreenCanvas::get_context(Webgl)\");\n\n        return Empty {};\n    }\n\n    if (contextId == Bindings::OffscreenRenderingContextId::Webgl2) {\n        dbgln(\"(STUBBED) OffscreenCanvas::get_context(Webgl2)\");\n\n        return Empty {};\n    }\n\n    return Empty {};\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvas.cpp", "function_name": "OffscreenCanvas::get_context", "index": 2518, "label": 0}
{"input": "std::string binaryRepr(dtype inValue)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        return std::bitset<DtypeInfo<dtype>::bits()>(inValue).to_string();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/binaryRepr.hpp", "function_name": "binaryRepr", "index": 2519, "label": 0}
{"input": "inline\nvoid StereographicProjector::mapBackward(float u, float v, float &x, float &y)\n{\n    u /= scale;\n    v /= scale;\n\n    float u_ = atan2f(v, u);\n    float r = sqrtf(u*u + v*v);\n    float v_ = 2 * atanf(1.f / r);\n\n    float sinv = sinf((float)CV_PI - v_);\n    float x_ = sinv * sinf(u_);\n    float y_ = cosf((float)CV_PI - v_);\n    float z_ = sinv * cosf(u_);\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "StereographicProjector::mapBackward", "index": 2520, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::ENU ECEFtoENU(const reference_frames::ECEF& target,\n                                                         const reference_frames::ECEF& referencePoint) noexcept\n    {\n        return ECEFtoENU(target, ECEFtoLLA(referencePoint));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/ECEFtoENU.hpp", "function_name": "ECEFtoENU", "index": 2521, "label": 0}
{"input": "inline void handmade_aligned_free(void *ptr)\n{\n  if (ptr) std::free(*(reinterpret_cast<void**>(ptr) - 1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/Memory.h", "function_name": "handmade_aligned_free", "index": 2522, "label": 0}
{"input": "NdArray<std::complex<dtype>> divide(dtype value, const NdArray<std::complex<dtype>>& inArray)\n    {\n        return value / inArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/divide.hpp", "function_name": "divide", "index": 2523, "label": 0}
{"input": "CV_INLINE double cvReadRealByName( const CvFileStorage* fs, const CvFileNode* map,\n                        const char* name, double default_value CV_DEFAULT(0.) )\n{\n    return cvReadReal( cvGetFileNodeByName( fs, map, name ), default_value );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/core_c.h", "function_name": "cvReadRealByName", "index": 2524, "label": 0}
{"input": "NdArray<dtypeOut> zeros_like(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        NdArray<dtypeOut> returnArray(inArray.shape());\n        returnArray.zeros();\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/zeros_like.hpp", "function_name": "zeros_like", "index": 2525, "label": 0}
{"input": "CV_INLINE double cvContourPerimeter( const void* contour )\n{\n    return cvArcLength( contour, CV_WHOLE_SEQ, 1 );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/imgproc_c.h", "function_name": "cvContourPerimeter", "index": 2526, "label": 0}
{"input": "EIGEN_DONT_INLINE Q slerp_legacy(const Q& a, const Q& b, typename Q::Scalar t)\n{\n  typedef typename Q::Scalar Scalar;\n  static const Scalar one = Scalar(1) - dummy_precision<Scalar>();\n  Scalar d = a.dot(b);\n  Scalar absD = internal::abs(d);\n  if (absD>=one)\n    return a;\n\n  \n  Scalar theta = std::acos(absD);\n  Scalar sinTheta = internal::sin(theta);\n\n  Scalar scale0 = internal::sin( ( Scalar(1) - t ) * theta) / sinTheta;\n  Scalar scale1 = internal::sin( ( t * theta) ) / sinTheta;\n  if (d<0)\n    scale1 = -scale1;\n\n  return Q(scale0 * a.coeffs() + scale1 * b.coeffs());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/quat_slerp.cpp", "function_name": "slerp_legacy", "index": 2527, "label": 0}
{"input": "void OffscreenCanvasRenderingContext2D::begin_path()\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::begin_path()\");\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::begin_path", "index": 2528, "label": 0}
{"input": "inline bool write_content_chunked(Stream &strm,\n                                  const ContentProvider &content_provider,\n                                  const T &is_shutting_down, U &compressor) {\n  auto error = Error::Success;\n  return write_content_chunked(strm, content_provider, is_shutting_down,\n                               compressor, error);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "write_content_chunked", "index": 2529, "label": 0}
{"input": "void AllocateAndCompress(const std::string& name,\n                           absl::Span<const float> weights) {\n    MatPtrT<Packed> storage(name, 1, weights.size());\n    model_memory_.push_back(storage);\n    model_memory_.back().Allocate();\n    storage.SetPtr(model_memory_.back());\n    std::string decorated_name = storage.CacheName();\n    compressor_(&storage, decorated_name.c_str(), weights.data());\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "7ccc6abe87f2cb135b5b822687a65c881ab18c48", "file_path": "compression/python/compression_clif_aux.cc", "function_name": "AllocateAndCompress", "index": 2530, "label": 0}
{"input": "ternary_evaluator(const XprType& xpr)\n    : m_functor(xpr.functor()),\n      m_arg1Impl(xpr.arg1()), \n      m_arg2Impl(xpr.arg2()), \n      m_arg3Impl(xpr.arg3())  \n  {\n    EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<TernaryOp>::Cost);\n    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CoreEvaluators.h", "function_name": "ternary_evaluator", "index": 2531, "label": 0}
{"input": "inline bool DualQuat<T>::operator==(const DualQuat<T> &q) const\n{\n    return (abs(w - q.w) < CV_DUAL_QUAT_EPS && abs(x - q.x) < CV_DUAL_QUAT_EPS &&\n            abs(y - q.y) < CV_DUAL_QUAT_EPS && abs(z - q.z) < CV_DUAL_QUAT_EPS &&\n            abs(w_ - q.w_) < CV_DUAL_QUAT_EPS && abs(x_ - q.x_) < CV_DUAL_QUAT_EPS &&\n            abs(y_ - q.y_) < CV_DUAL_QUAT_EPS && abs(z_ - q.z_) < CV_DUAL_QUAT_EPS);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::operator==", "index": 2532, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmpge2(unsigned int a, unsigned int b)\n    {\n        unsigned int r, c;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vsetge2(a, b);\n        c = r << 16;        \n        r = c - r;          \n    #else\n        asm(\"not.b32 %0, %0;\" : \"+r\"(b));\n        c = vavrg2(a, b);   \n        c = c & 0x80008000; \n        r = c >> 15;        \n        r = c - r;          \n        r = c | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmpge2", "index": 2533, "label": 0}
{"input": "void fill_xor_mask(lsh::BucketKey key, int lowest_index, unsigned int level,\n                       std::vector<lsh::BucketKey>& xor_masks)\n    {\n        xor_masks.push_back(key);\n        if (level == 0) return;\n        for (int index = lowest_index - 1; index >= 0; --index) {\n            \n            lsh::BucketKey new_key = key | (1 << index);\n            fill_xor_mask(new_key, index, level - 1, xor_masks);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/lsh_index.h", "function_name": "lsh::BucketKey", "index": 2534, "label": 0}
{"input": "inline Quat<T> Quat<T>::crossProduct(const Quat<T> &q) const\n{\n    return Quat<T> (0, y * q.z - z * q.y, z * q.x - x * q.z, x * q.y - q.x * y);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::crossProduct", "index": 2535, "label": 0}
{"input": "RENDERER_FUNCTION_CC(SetProp) {\n  CHECK_ARGC_EQ(SetProp, 3);\n  CONVERT_ARG_AND_CHECK(arg0, 0, CPointer, SetProp);\n  CONVERT_ARG_AND_CHECK(arg1, 1, String, SetProp);\n  CONVERT_ARG(arg2, 2);\n\n  base::String key = arg1->String();\n  TRACE_EVENT(LYNX_TRACE_CATEGORY, SET_PROP, \"key\", key.c_str());\n  auto* component = GetRadonComponent(LEPUS_CONTEXT(), arg0);\n  if (!component) {\n    RETURN_UNDEFINED();\n  }\n  auto* tasm = GET_TASM_POINTER();\n  \n  \n  if (!component->SetSpecialComponentAttribute(key, *arg2)) {\n    component->SetProperties(key, *arg2,\n                             tasm->GetPageConfig()->GetStrictPropType());\n  }\n  RETURN_UNDEFINED();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "64404028bc447495c8c1a11b4392de4027002888", "file_path": "core/runtime/bindings/lepus/renderer_functions.cc", "function_name": "RENDERER_FUNCTION_CC", "index": 2536, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline const typename MatrixBase<Derived>::HNormalizedReturnType\nMatrixBase<Derived>::hnormalized() const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived);\n  return ConstStartMinusOne(derived(),0,0,\n    ColsAtCompileTime==1?size()-1:1,\n    ColsAtCompileTime==1?1:size()-1) / coeff(size()-1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Homogeneous.h", "function_name": "MatrixBase<Derived>::hnormalized", "index": 2537, "label": 0}
{"input": "NdArray<double> pinv(const NdArray<dtype>& inArray)\n    {\n        STATIC_ASSERT_ARITHMETIC_OR_COMPLEX(dtype);\n\n        NdArray<double> u;\n        NdArray<double> d;\n        NdArray<double> v;\n        svd(inArray, u, d, v);\n\n        const auto inShape = inArray.shape();\n        auto       dPlus   = nc::zeros<double>(inShape.cols, inShape.rows); \n\n        for (uint32 i = 0; i < d.shape().rows; ++i)\n        {\n            dPlus(i, i) = 1. / d(i, i);\n        }\n\n        return v.transpose().dot(dPlus).dot(u.transpose());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Linalg/pinv.hpp", "function_name": "pinv", "index": 2538, "label": 0}
{"input": "static void setup(const GMetaArgs &metaArgs, const GArgs &args,\n                      GArg& state, const GCompileArgs &compileArgs)\n    {\n        setup_impl(metaArgs, args, state, compileArgs,\n                   typename detail::MkSeq<sizeof...(Ins)>::type());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/cpu/gcpukernel.hpp", "function_name": "setup", "index": 2539, "label": 0}
{"input": "TensorMap(PointerArgType dataPtr, const array<Index, NumIndices>& dimensions)\n      : m_data(dataPtr), m_dimensions(dimensions)\n    { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorMap.h", "function_name": "TensorMap", "index": 2540, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    TensorStridingOp<const Strides, Derived>\n    stride(const Strides& strides) {\n      return TensorStridingOp<const Strides, Derived>(derived(), strides);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    TensorStridingOp<const Strides, Derived>\n    stride", "index": 2541, "label": 0}
{"input": "inline Result ClientImpl::send_with_content_provider(\n    const std::string &method, const std::string &path, const Headers &headers,\n    const char *body, size_t content_length, ContentProvider content_provider,\n    ContentProviderWithoutLength content_provider_without_length,\n    const std::string &content_type) {\n  Request req;\n  req.method = method;\n  req.headers = headers;\n  req.path = path;\n\n  auto error = Error::Success;\n\n  auto res = send_with_content_provider(\n      req, body, content_length, std::move(content_provider),\n      std::move(content_provider_without_length), content_type, error);\n\n  return Result{std::move(res), error, std::move(req.headers)};\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "ClientImpl::send_with_content_provider", "index": 2542, "label": 0}
{"input": "inline bool Request::is_multipart_form_data() const {\n  const auto &content_type = get_header_value(\"Content-Type\");\n  return !content_type.rfind(\"multipart/form-data\", 0);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Request::is_multipart_form_data", "index": 2543, "label": 0}
{"input": "IndexRange Range(size_t task_idx) const {\n    HWY_DASSERT(task_idx < NumTasks());\n    return MakeIndexRange(range_.begin() + task_idx * TaskSize(), range_.end(),\n                          TaskSize());\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "c4398fc72d9d347e77e5cc77fc73202f6939e75e", "file_path": "util/threading.h", "function_name": "task_idx", "index": 2544, "label": 0}
{"input": "inline SSLClient::SSLClient(const std::string &host, int port,\n                            X509 *client_cert, EVP_PKEY *client_key)\n    : ClientImpl(host, port) {\n  ctx_ = SSL_CTX_new(TLS_client_method());\n\n  detail::split(&host_[0], &host_[host_.size()], '.',\n                [&](const char *b, const char *e) {\n                  host_components_.emplace_back(std::string(b, e));\n                });\n\n  if (client_cert != nullptr && client_key != nullptr) {\n    if (SSL_CTX_use_certificate(ctx_, client_cert) != 1 ||\n        SSL_CTX_use_PrivateKey(ctx_, client_key) != 1) {\n      SSL_CTX_free(ctx_);\n      ctx_ = nullptr;\n    }\n  }\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SSLClient::SSLClient", "index": 2545, "label": 0}
{"input": "static void test_default()\n{\n  Tensor<float, 1> vec(6);\n  vec.setRandom();\n\n  \n  \n  for (int i = 1; i < 6; ++i) {\n    VERIFY_IS_NOT_EQUAL(vec(i), vec(i-1));\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_random.cpp", "function_name": "test_default", "index": 2546, "label": 0}
{"input": "inline size_t KernelInfoImpl<T>::GetInputCount() const {\n  size_t out = 0;\n  ThrowOnError(GetApi().KernelInfo_GetInputCount(this->p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "KernelInfoImpl<T>::GetInputCount", "index": 2547, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nvoid check_static_allocation_size()\n{\n  \n  #if EIGEN_STACK_ALLOCATION_LIMIT\n  EIGEN_STATIC_ASSERT(Size * sizeof(T) <= EIGEN_STACK_ALLOCATION_LIMIT, OBJECT_ALLOCATED_ON_STACK_IS_TOO_BIG);\n  #endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/DenseStorage.h", "function_name": "check_static_allocation_size", "index": 2548, "label": 0}
{"input": "void bug_854()\n{\n  Matrix3d m;\n  m << 850.961, 51.966, 0,\n       51.966, 254.841, 0,\n            0,       0, 0;\n  selfadjointeigensolver_essential_check(m);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigensolver_selfadjoint.cpp", "function_name": "bug_854", "index": 2549, "label": 0}
{"input": "GRender::GRender(int width,int height, MessageCb *obj) {\n    m_width = width;\n    m_height = height;\n    messageSource = new MessageSource();\n    frameSource = new FrameSource(MAX_BUFFER_FRAME_SIZE,  MAX_BUFFER_FRAME_SIZE);\n    renderHelper = nullptr;\n    messageHelper = new MessageHelper(messageSource, obj);\n    audioRenderThread = nullptr;\n    videoRenderThread = nullptr;\n    messageThread = nullptr;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::GRender", "index": 2550, "label": 0}
{"input": "int GDigit::netrstpic(const char* picfn,int* box,int index,const char* dumpfn){\n    if(!m_status)return -1000;\n    if(!ai_wenet)return -999;\n    if(!net_wavmat)return -1;\n    if(index<0)return -2;\n    if(index>net_wavmat->bnfblocks())return -3;\n    std::string picfile(picfn);\n    JMat* mat_pic = NULL;\n    frameSource->popVidRecyle(&mat_pic);\n    if(!mat_pic)mat_pic = new JMat();\n    int rst = mat_pic->load(picfn);\n    if(rst){\n        delete mat_pic;\n        return rst*10000;\n    }\n    int arr[4]={box[0],box[1],box[2],box[3]};\ndispThread->dispatch([mat_pic,index,arr,this]() {\n    if(!ai_wenet)return -11;\n    if(!net_wavmat)return -12;\n\n    \n    \n    \n    \n        \n        \n    JMat* mat_feat = bnf_cache->inxBuf(index);\n    if(mat_feat){\n        lock_munet->lock();\n        if(ai_munet) ai_munet->process(mat_pic, arr, mat_feat);\n        lock_munet->unlock();\n        MediaData md(mat_pic);\n        frameSource->pushVidFrame(&md);\n        delete mat_feat;\n    }\n});\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::netrstpic", "index": 2551, "label": 0}
{"input": "inline void JsCacheManagerFacade::PostCacheGenerationTaskQuickJs(\n    const std::string& template_url,\n    std::unordered_map<std::string, JsContent> js_contents,\n    std::unique_ptr<BytecodeGenerateCallback> callback) {\n#ifdef QUICKJS_CACHE_UNITTEST\n  post_cache_generation_task_quickjs_for_testing(template_url, js_contents);\n#else\n  std::vector<std::unique_ptr<cache::CacheGenerator> > generators;\n  for (const auto& iter : js_contents) {\n    generators.push_back(std::make_unique<cache::QuickjsCacheGenerator>(\n        std::move(iter.first), std::move(iter.second.GetBuffer())));\n  }\n  JsCacheManager::GetQuickjsInstance().RequestCacheGeneration(\n      template_url, std::move(generators), false, std::move(callback));\n#endif\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/js_cache_manager_facade.cc", "function_name": "JsCacheManagerFacade::PostCacheGenerationTaskQuickJs", "index": 2552, "label": 0}
{"input": "QMatrix Transform<Scalar,Dim,Mode,Options>::toQMatrix(void) const\n{\n  check_template_params();\n  EIGEN_STATIC_ASSERT(Dim==2, YOU_MADE_A_PROGRAMMING_MISTAKE)\n  return QMatrix(m_matrix.coeff(0,0), m_matrix.coeff(1,0),\n                 m_matrix.coeff(0,1), m_matrix.coeff(1,1),\n                 m_matrix.coeff(0,2), m_matrix.coeff(1,2));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options>::toQMatrix", "index": 2553, "label": 0}
{"input": "auto format(const hf3fs::storage::MessageTag &tag, FormatContext &ctx) const {\n    return fmt::format_to(ctx.out(), \"@{}#{}:{}\", tag.clientId, tag.requestId, tag.channel);\n  }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "165f09a7b440bed77ee6310d4e9342caf01fd182", "file_path": "src/fbs/storage/Common.h", "function_name": "format", "index": 2554, "label": 0}
{"input": "inline cl_int clGetKernelWorkGroupInfo(cl_kernel p0, cl_device_id p1, cl_kernel_work_group_info p2, size_t p3, void* p4, size_t* p5) { return clGetKernelWorkGroupInfo_pfn(p0, p1, p2, p3, p4, p5); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clGetKernelWorkGroupInfo", "index": 2555, "label": 0}
{"input": "void cholesky_verify_assert()\n{\n  MatrixType tmp;\n\n  LLT<MatrixType> llt;\n  VERIFY_RAISES_ASSERT(llt.matrixL())\n  VERIFY_RAISES_ASSERT(llt.matrixU())\n  VERIFY_RAISES_ASSERT(llt.solve(tmp))\n  VERIFY_RAISES_ASSERT(llt.solveInPlace(&tmp))\n\n  LDLT<MatrixType> ldlt;\n  VERIFY_RAISES_ASSERT(ldlt.matrixL())\n  VERIFY_RAISES_ASSERT(ldlt.permutationP())\n  VERIFY_RAISES_ASSERT(ldlt.vectorD())\n  VERIFY_RAISES_ASSERT(ldlt.isPositive())\n  VERIFY_RAISES_ASSERT(ldlt.isNegative())\n  VERIFY_RAISES_ASSERT(ldlt.solve(tmp))\n  VERIFY_RAISES_ASSERT(ldlt.solveInPlace(&tmp))\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/cholesky.cpp", "function_name": "cholesky_verify_assert", "index": 2556, "label": 0}
{"input": "static void subTo(Dest& dst, const Lhs& lhs, const Rhs& rhs, typename enable_if<is_same<typename evaluator_traits<Dest>::Shape,DenseShape>::value,int*>::type* = 0)\n  {\n    addTo(dst, -lhs, rhs);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseProduct.h", "function_name": "subTo", "index": 2557, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    typename ExtendedType<OtherDerived>::Type\n    extendedTo(const DenseBase<OtherDerived>& other) const\n    {\n      EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(isVertical, OtherDerived::MaxColsAtCompileTime==1),\n                          YOU_PASSED_A_ROW_VECTOR_BUT_A_COLUMN_VECTOR_WAS_EXPECTED)\n      EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(isHorizontal, OtherDerived::MaxRowsAtCompileTime==1),\n                          YOU_PASSED_A_COLUMN_VECTOR_BUT_A_ROW_VECTOR_WAS_EXPECTED)\n      return typename ExtendedType<OtherDerived>::Type\n                      (other.derived(),\n                       isVertical   ? 1 : m_matrix.rows(),\n                       isHorizontal ? 1 : m_matrix.cols());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "extendedTo", "index": 2558, "label": 0}
{"input": "inline cv::MediaFrame cv::MediaFrame::Create(Args&&... args) {\n    std::unique_ptr<T> ptr(new T(std::forward<Args>(args)...));\n    return cv::MediaFrame(std::move(ptr));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/media.hpp", "function_name": "cv::MediaFrame::Create", "index": 2559, "label": 0}
{"input": "static float16_t fromBits(ushort w)\n    {\n        Cv16suf u;\n        u.u = w;\n        float16_t result;\n        result.h = u.h;\n        return result;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cvdef.h", "function_name": "w", "index": 2560, "label": 0}
{"input": "image_retval_base(const DecompositionType& dec, const MatrixType& originalMatrix)\n    : m_dec(dec), m_rank(dec.rank()),\n      m_cols(m_rank == 0 ? 1 : m_rank),\n      m_originalMatrix(originalMatrix)\n  {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/misc/Image.h", "function_name": "image_retval_base", "index": 2561, "label": 0}
{"input": "void run_test(int dim, int num_elements)\n{\n  using std::abs;\n  typedef typename internal::traits<MatrixType>::Scalar Scalar;\n  typedef Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> MatrixX;\n  typedef Matrix<Scalar, Eigen::Dynamic, 1> VectorX;\n\n  \n  \n  const Scalar c = abs(internal::random<Scalar>());\n\n  MatrixX R = randMatrixSpecialUnitary<Scalar>(dim);\n  VectorX t = Scalar(50)*VectorX::Random(dim,1);\n\n  MatrixX cR_t = MatrixX::Identity(dim+1,dim+1);\n  cR_t.block(0,0,dim,dim) = c*R;\n  cR_t.block(0,dim,dim,1) = t;\n\n  MatrixX src = MatrixX::Random(dim+1, num_elements);\n  src.row(dim) = Matrix<Scalar, 1, Dynamic>::Constant(num_elements, Scalar(1));\n\n  MatrixX dst = cR_t*src;\n\n  MatrixX cR_t_umeyama = umeyama(src.block(0,0,dim,num_elements), dst.block(0,0,dim,num_elements));\n\n  const Scalar error = ( cR_t_umeyama*src - dst ).norm() / dst.norm();\n  VERIFY(error < Scalar(40)*std::numeric_limits<Scalar>::epsilon());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/umeyama.cpp", "function_name": "run_test", "index": 2562, "label": 0}
{"input": "int GDigit::drawmskbuf(const char* picfn,const char* mskfn,char* dstbuf,char* mskbuf,int size){\n    \n    std::string picfile(picfn);\n    std::string mskfile(mskfn);\n\n    JMat* mat_pic = NULL;\n    JMat* mat_msk = NULL;\n    frameSource->popVidRecyle(&mat_pic);\n    frameSource->popVidRecyle(&mat_msk);\n    if(!mat_pic)mat_pic = new JMat();\n    if(!mat_msk)mat_msk = new JMat();\n    int rst = 0;\n    while(1){\n        rst = mat_pic->load(picfile);\n        if(rst)break;\n        rst = mat_msk->load(mskfile);\n        break;\n    }\n    if(rst){\n        delete mat_pic;\n        delete mat_msk;\n        return rst*1000;\n    }\n    memcpy(dstbuf,mat_pic->data(),size);\n    memcpy(mskbuf,mat_msk->data(),size);\n    frameSource->pushVidRecyle(mat_pic);\n    frameSource->pushVidRecyle(mat_msk);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::drawmskbuf", "index": 2563, "label": 0}
{"input": "uint32 numElements(uint32 inArraySize)\n        {\n            makePositiveAndValidate(inArraySize);\n\n            uint32 num = 0;\n            for (int32 i = start; i < stop; i += step)\n            {\n                ++num;\n            }\n            return num;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Slice.hpp", "function_name": "inArraySize", "index": 2564, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\ndouble2 pzeta<double2>(const double2& x, const double2& q)\n{\n    using numext::zeta;\n    return make_double2(zeta(x.x, q.x), zeta(x.y, q.y));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/arch/CUDA/CudaSpecialFunctions.h", "function_name": "pzeta", "index": 2565, "label": 0}
{"input": "void init(OIter begin, OIter end, BIter boxBegin, BIter boxEnd)\n  {\n    objects.clear();\n    boxes.clear();\n    children.clear();\n\n    objects.insert(objects.end(), begin, end);\n    int n = static_cast<int>(objects.size());\n\n    if(n < 2)\n      return; \n\n    VolumeList objBoxes;\n    VIPairList objCenters;\n\n    \n    internal::get_boxes_helper<ObjectList, VolumeList, BIter>()(objects, boxBegin, boxEnd, objBoxes);\n\n    objCenters.reserve(n);\n    boxes.reserve(n - 1);\n    children.reserve(2 * n - 2);\n\n    for(int i = 0; i < n; ++i)\n      objCenters.push_back(VIPair(objBoxes[i].center(), i));\n\n    build(objCenters, 0, n, objBoxes, 0); \n\n    ObjectList tmp(n);\n    tmp.swap(objects);\n    for(int i = 0; i < n; ++i)\n      objects[i] = tmp[objCenters[i].second];\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/BVH/KdBVH.h", "function_name": "init", "index": 2566, "label": 0}
{"input": "size_t JSVMRuntime::size(const piper::ArrayBuffer& obj) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n  size_t result;\n  JSVM_CALL_RETURN(\n      OH_JSVM_GetArraybufferInfo(getEnv(), obj_value, nullptr, &result), 0);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::size", "index": 2567, "label": 0}
{"input": "static inline\nvoid cv2eigen( const Matx<_Tp, 1, _cols>& src,\n               Eigen::Matrix<_Tp, 1, Eigen::Dynamic>& dst )\n{\n    dst.resize(_cols);\n    if( !(dst.Flags & Eigen::RowMajorBit) )\n    {\n        const Mat _dst(_cols, 1, traits::Type<_Tp>::value,\n                 dst.data(), (size_t)(dst.outerStride()*sizeof(_Tp)));\n        transpose(src, _dst);\n    }\n    else\n    {\n        const Mat _dst(1, _cols, traits::Type<_Tp>::value,\n                 dst.data(), (size_t)(dst.outerStride()*sizeof(_Tp)));\n        Mat(src).copyTo(_dst);\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/eigen.hpp", "function_name": "cv2eigen", "index": 2568, "label": 0}
{"input": "inline bool bind_ip_address(socket_t sock, const std::string &host) {\n  struct addrinfo hints;\n  struct addrinfo *result;\n\n  memset(&hints, 0, sizeof(struct addrinfo));\n  hints.ai_family = AF_UNSPEC;\n  hints.ai_socktype = SOCK_STREAM;\n  hints.ai_protocol = 0;\n\n  if (getaddrinfo(host.c_str(), \"0\", &hints, &result)) { return false; }\n\n  auto ret = false;\n  for (auto rp = result; rp; rp = rp->ai_next) {\n    const auto &ai = *rp;\n    if (!::bind(sock, ai.ai_addr, static_cast<socklen_t>(ai.ai_addrlen))) {\n      ret = true;\n      break;\n    }\n  }\n\n  freeaddrinfo(result);\n  return ret;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "bind_ip_address", "index": 2569, "label": 0}
{"input": "inline Index LUTempSpace(Index&m, Index& w)\n{\n  return (2*w + 4 + LUNoMarker) * m * sizeof(Index) + (w + 1) * m * sizeof(Scalar);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_Memory.h", "function_name": "LUTempSpace", "index": 2570, "label": 0}
{"input": "typename DenseBase<Derived>::ConstantReturnType\nDenseBase<Derived>::Constant(const Scalar& value)\n{\n  EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived)\n  return DenseBase<Derived>::NullaryExpr(RowsAtCompileTime, ColsAtCompileTime, internal::scalar_constant_op<Scalar>(value));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h", "function_name": "DenseBase<Derived>::Constant", "index": 2571, "label": 0}
{"input": "std::optional<std::string> JSVMRuntime::symbolToString(\n    const piper::Symbol& sym) {\n  auto str = piper::Value(*this, sym).toString(*this);\n  if (!str) {\n    return std::optional<std::string>();\n  }\n  return str->utf8(*this);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::symbolToString", "index": 2572, "label": 0}
{"input": "void check_product(void)\n{\n  int M, N, K;\n  for (uint i=0; i<1000; ++i)\n  {\n    M = internal::random<int>(1,64);\n    N = internal::random<int>(1,768);\n    K = internal::random<int>(1,768);\n    M = (0 + M) * 1;\n    std::cout << M << \" x \" << N << \" x \" << K << \"\\n\";\n    check_product(M, N, K);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/benchBlasGemm.cpp", "function_name": "check_product", "index": 2573, "label": 0}
{"input": "inline cl_int clEnqueueWriteBufferRect(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, const size_t* p5, size_t p6, size_t p7, size_t p8, size_t p9, const void* p10, cl_uint p11, const cl_event* p12, cl_event* p13) { return clEnqueueWriteBufferRect_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueWriteBufferRect", "index": 2574, "label": 0}
{"input": "void SetCSSVariableBundle(const AttributeHolder& holder) {\n    if (holder.css_variables_.has_value()) {\n      *css_variables_ = *holder.css_variables_;\n    }\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "83b136c181435a7a5ea02028261ba55fec6621a2", "file_path": "core/renderer/dom/attribute_holder.h", "function_name": "holder", "index": 2575, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline ConstColsBlockXpr leftCols(Index n) const\n{\n  return ConstColsBlockXpr(derived(), 0, 0, rows(), n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "ConstColsBlockXpr leftCols", "index": 2576, "label": 0}
{"input": "CV_WRAP static inline\nString dumpRotatedRect(const RotatedRect& argument)\n{\n    return format(\"rotated_rect: (c_x=%f, c_y=%f, w=%f, h=%f, a=%f)\",\n                  argument.center.x, argument.center.y, argument.size.width,\n                  argument.size.height, argument.angle);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/bindings_utils.hpp", "function_name": "dumpRotatedRect", "index": 2577, "label": 0}
{"input": "FrameSource::FrameSource(int audioMaxSize, int videoMaxSize) {\n    LOGI(TAG, \"CoreFlow : create FrameSource\");\n    audioPacketQueue = new ConcurrentQueue<MediaData*>(audioMaxSize, \"AudioFrameQueue\");\n    videoPacketQueue = new ConcurrentQueue<MediaData*>(videoMaxSize, \"VideoFrameQueue\");\n    videoRecyleQueue = new ConcurrentQueue<JMat*>(videoMaxSize, \"VideoRecyleQueue\",1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/FrameSource.cpp", "function_name": "FrameSource::FrameSource", "index": 2578, "label": 0}
{"input": "void matrix_sqrt_quasi_triangular_diagonal(const MatrixType& T, ResultType& sqrtT)\n{\n  using std::sqrt;\n  const Index size = T.rows();\n  for (Index i = 0; i < size; i++) {\n    if (i == size - 1 || T.coeff(i+1, i) == 0) {\n      eigen_assert(T(i,i) >= 0);\n      sqrtT.coeffRef(i,i) = sqrt(T.coeff(i,i));\n    }\n    else {\n      matrix_sqrt_quasi_triangular_2x2_diagonal_block(T, i, sqrtT);\n      ++i;\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixSquareRoot.h", "function_name": "matrix_sqrt_quasi_triangular_diagonal", "index": 2579, "label": 0}
{"input": "void test_signed_32bit()\n{\n  \n  const Eigen::internal::TensorIntDivisor<int32_t, false> div_by_one(1);\n\n  for (int32_t j = 0; j < 25000; ++j) {\n    const int32_t fast_div = j / div_by_one;\n    const int32_t slow_div = j / 1;\n    VERIFY_IS_EQUAL(fast_div, slow_div);\n  }\n\n  \n  for (int32_t i = 2; i < 25000; ++i) {\n    const Eigen::internal::TensorIntDivisor<int32_t, false> div(i);\n\n    for (int32_t j = 0; j < 25000; ++j) {\n      const int32_t fast_div = j / div;\n      const int32_t slow_div = j / i;\n      VERIFY_IS_EQUAL(fast_div, slow_div);\n    }\n  }\n\n  \n  for (int32_t i = 2; i < 25000; ++i) {\n    const Eigen::internal::TensorIntDivisor<int32_t, true> div(i);\n\n    for (int32_t j = 0; j < 25000; ++j) {\n      const int32_t fast_div = j / div;\n      const int32_t slow_div = j / i;\n      VERIFY_IS_EQUAL(fast_div, slow_div);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_intdiv.cpp", "function_name": "test_signed_32bit", "index": 2580, "label": 0}
{"input": "static enum fio_q_status hf3fs_usrbio_queue(struct thread_data *td, struct io_u *io_u) {\n    auto &vec = static_cast<hf3fs_usrbio_data *>(td->io_ops_data)->io_us;\n    auto *sd = static_cast<hf3fs_usrbio_data *>(td->io_ops_data);\n\n    if (io_u->ddir != sd->last_ddir) {\n        if (sd->queued != 0) {\n            return FIO_Q_BUSY;\n        } else {\n            vec[sd->queued++] = io_u;\n            sd->last_ddir = io_u->ddir;\n            return FIO_Q_QUEUED;\n        }\n    } else {\n        if (sd->queued == td->o.iodepth) {\n            return FIO_Q_BUSY;\n        }\n        vec[sd->queued++] = io_u;\n        return FIO_Q_QUEUED;\n    }\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_queue", "index": 2581, "label": 0}
{"input": "int JMat::tobin(const char* fn){\n    FILE* file = fopen(fn, \"w\");\n    if(!file)return 0;\n    fwrite(m_buf, m_size, 1, file);\n    fclose(file);\n    return 1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/jmat.cpp", "function_name": "JMat::tobin", "index": 2582, "label": 0}
{"input": "T divide(const T numerator) const {\n    eigen_assert(static_cast<typename UnsignedTraits<T>::type>(numerator) < NumTraits<UnsignedType>::highest()/2);\n    \n\n    UnsignedType t1 = muluh(multiplier, numerator);\n    UnsignedType t = (static_cast<UnsignedType>(numerator) - t1) >> shift1;\n    return (t1 + t) >> shift2;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIntDiv.h", "function_name": "numerator", "index": 2583, "label": 0}
{"input": "KNNRadiusUniqueResultSet(unsigned int capacity, DistanceType radius)\n    {\n        this->capacity_ = capacity;\n        this->radius_ = radius;\n        this->dist_indices_.reserve(capacity_);\n        this->clear();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "KNNRadiusUniqueResultSet", "index": 2584, "label": 0}
{"input": "EIGEN_STRONG_INLINE void memset(void* buffer, int c, size_t n) const {\n    ::memset(buffer, c, n);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h", "function_name": "c", "index": 2585, "label": 0}
{"input": "LoadComponentInfo(std::vector<uint8_t>& source, int32_t callback_id)\n      : source_(source), callback_id_(callback_id) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "testing/lynx/tasm/databinding/mock_replayer_component_loader.h", "function_name": "LoadComponentInfo", "index": 2586, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n  size_t IndexOfRowMajor(const array<DenseIndex, Base::count>& indices) const {\n    return internal::fixed_size_tensor_index_linearization_helper<DenseIndex, Base::count, Base::count, true>::run(indices, *reinterpret_cast<const Base*>(this));\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDimensions.h", "function_name": "IndexOfRowMajor", "index": 2587, "label": 0}
{"input": "void LoopThread::handleRunning() {\n    if (startFunc) {\n        startFunc();\n    }\n    if (notifyFunc) {\n        notifyFunc(NOTIFY_START);\n    }\n    isStarted = true;\n\n    while (mRunning) {\n        if (mPausing) {\n            std::unique_lock<std::mutex> lck(threadLock);\n            conVar.wait(lck);\n            continue;\n        }\n        if (!updateFunc) {\n            break;\n        }\n        bool hasParams = arg1 >= 0 || arg2 >= 0;\n        int updateResult = updateFunc(arg1, arg2);\n        if (hasParams) {\n            arg1 = -1;\n            arg2 = -1;\n        }\n        if (updateResult == ERROR_EXIST) {\n            mRunning = false;\n            continue;\n        } else if (updateResult == ERROR_PAUSE) {\n            mPausing = true;\n            continue;\n        }\n    }\n\n    if (endFunc) {\n        endFunc();\n    }\n    if (notifyFunc) {\n        notifyFunc(NOTIFY_END);\n    }\n    isStarted = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/LoopThread.cpp", "function_name": "LoopThread::handleRunning", "index": 2588, "label": 0}
{"input": "void MatrixXd_copy_map(C_MatrixXd *dst, const C_Map_MatrixXd *src)\n{\n  c_to_eigen(dst) = c_to_eigen(src);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mix_eigen_and_c/binary_library.cpp", "function_name": "MatrixXd_copy_map", "index": 2589, "label": 0}
{"input": "explicit DGMRES(const EigenBase<MatrixDerived>& A) : Base(A.derived()), m_restart(30),m_neig(0),m_r(0),m_maxNeig(5),m_isDeflAllocated(false),m_isDeflInitialized(false) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/IterativeSolvers/DGMRES.h", "function_name": "DGMRES", "index": 2590, "label": 0}
{"input": "inline bool Value::HasValue() const {\n  int out;\n  ThrowOnError(GetApi().HasValue(p_, &out));\n  return out != 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::HasValue", "index": 2591, "label": 0}
{"input": "static __device__ __forceinline__ unsigned int vcmpeq4(unsigned int a, unsigned int b)\n    {\n        unsigned int r, t;\n\n    #if __CUDA_ARCH__ >= 300\n        r = vseteq4(a, b);\n        t = r << 8;         \n        r = t - r;          \n    #else\n        \n        \n        t = a ^ b;          \n        r = t | 0x80808080; \n        t = t ^ r;          \n        r = r - 0x01010101; \n        r = t & ~r;         \n        t = r >> 7;         \n        t = r - t;          \n        r = t | r;          \n    #endif\n\n        return r;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/simd_functions.hpp", "function_name": "vcmpeq4", "index": 2592, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void scatterPacket(Index i, Index j, const SubPacket &p) const {\n    pscatter<Scalar, SubPacket>(&operator()(i, j), p, m_stride);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/util/BlasUtil.h", "function_name": "scatterPacket", "index": 2593, "label": 0}
{"input": "int AdcPdmAudioCodec::Write(const int16_t* data, int samples) {\n    if (output_enabled_) {\n        ESP_ERROR_CHECK_WITHOUT_ABORT(esp_codec_dev_write(output_dev_, (void*)data, samples * sizeof(int16_t)));\n    }\n    return samples;\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_codecs/adc_pdm_audio_codec.cc", "function_name": "AdcPdmAudioCodec::Write", "index": 2594, "label": 0}
{"input": "void test_cxx11_tensor_broadcast_sycl() {\n  cl::sycl::gpu_selector s;\n  Eigen::SyclDevice sycl_device(s);\n  CALL_SUBTEST(test_broadcast_sycl(sycl_device));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_broadcast_sycl.cpp", "function_name": "test_cxx11_tensor_broadcast_sycl", "index": 2595, "label": 0}
{"input": "void OnBytecodeResponse(JNIEnv* env,\n                        base::android::ScopedGlobalJavaRef<jobject> obj,\n                        base::android::ScopedLocalJavaRef<jstring> error_msg,\n                        base::android::JavaOnlyMap& java_map) {\n  Java_LynxBytecodeCallback_onResponse(\n      env, obj.Get(), error_msg.IsNull() ? nullptr : error_msg.Get(),\n      java_map.jni_object());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/android/bytecode_callback.cc", "function_name": "OnBytecodeResponse", "index": 2596, "label": 0}
{"input": "inline TypeInfo ConstSessionImpl<T>::GetOutputTypeInfo(size_t index) const {\n  OrtTypeInfo* out;\n  ThrowOnError(GetApi().SessionGetOutputTypeInfo(this->p_, index, &out));\n  return TypeInfo{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ConstSessionImpl<T>::GetOutputTypeInfo", "index": 2597, "label": 0}
{"input": "PartialReduxExpr(const MatrixType& mat, const MemberOp& func = MemberOp())\n      : m_matrix(mat), m_functor(func) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "PartialReduxExpr", "index": 2598, "label": 0}
{"input": "inline Quat<T> Quat<T>::cos() const\n{\n    Vec<T, 3> v{x, y ,z};\n    T vNorm = std::sqrt(v.dot(v));\n    T k = vNorm < CV_QUAT_EPS ? 1 : std::sin(w) * std::sinh(vNorm) / vNorm;\n    return Quat<T>(std::cos(w) * std::cosh(vNorm), -v[0] * k, -v[1] * k, -v[2] * k);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::cos", "index": 2599, "label": 0}
{"input": "__device__ __forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*>\n    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3)\n    {\n        return thrust::make_tuple((volatile T0*) t0, (volatile T1*) t1, (volatile T2*) t2, (volatile T3*) t3);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/reduce.hpp", "function_name": "__forceinline__\n    thrust::tuple<volatile T0*, volatile T1*, volatile T2*, volatile T3*>\n    smem_tuple", "index": 2600, "label": 0}
{"input": "inline bool isTaitBryan(QuatEnum::EulerAnglesType eulerAnglesType)\n{\n    return eulerAnglesType/6 == 1 || eulerAnglesType/6 == 3;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "isTaitBryan", "index": 2601, "label": 0}
{"input": "inline\nMatx<_Tp,m,n> Matx<_Tp,m,n>::randu(_Tp a, _Tp b)\n{\n    Matx<_Tp,m,n> M;\n    cv::randu(M, Scalar(a), Scalar(b));\n    return M;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/operations.hpp", "function_name": "Matx<_Tp,m,n>::randu", "index": 2602, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline explicit AlignedBox(const MatrixBase<Derived>& p) : m_min(p), m_max(m_min)\n  { }\n\n  EIGEN_DEVICE_FUNC ~AlignedBox() {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/AlignedBox.h", "function_name": "~AlignedBox", "index": 2603, "label": 0}
{"input": "inline T Dict::get(const String &key, const T &defaultValue) const\n{\n    _Dict::const_iterator i = dict.find(key);\n\n    if (i != dict.end())\n        return i->second.get<T>();\n    else\n        return defaultValue;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/dnn.inl.hpp", "function_name": "Dict::get", "index": 2604, "label": 0}
{"input": "void setOutputDir(std::string_view outputDir)\n        {\n            setOutputDir(std::filesystem::path(outputDir));\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Logging/BinaryLogger.hpp", "function_name": "std::string_view", "index": 2605, "label": 0}
{"input": "Charge(i2c_master_bus_handle_t i2c_bus, uint8_t addr) : I2cDevice(i2c_bus, addr) {\n        read_buffer_ = new uint8_t[8];\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ad2c1874332c3d97dc0d50eab5dd6b879c61a865", "file_path": "main/boards/echoear/EchoEar.cc", "function_name": "Charge", "index": 2606, "label": 0}
{"input": "inline\nsize_t Mat_<_Tp>::elemSize1() const\n{\n    CV_DbgAssert( Mat::elemSize1() == sizeof(_Tp) / DataType<_Tp>::channels );\n    return sizeof(_Tp) / DataType<_Tp>::channels;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::elemSize1", "index": 2607, "label": 0}
{"input": "inline\nvoid CompressedRectilinearProjector::mapForward(float x, float y, float &u, float &v)\n{\n    float x_ = r_kinv[0] * x + r_kinv[1] * y + r_kinv[2];\n    float y_ = r_kinv[3] * x + r_kinv[4] * y + r_kinv[5];\n    float z_ = r_kinv[6] * x + r_kinv[7] * y + r_kinv[8];\n\n    float u_ = atan2f(x_, z_);\n    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));\n\n    u = scale * a * tanf(u_ / a);\n    v = scale * b * tanf(v_) / cosf(u_);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "CompressedRectilinearProjector::mapForward", "index": 2608, "label": 0}
{"input": "static void generate_get_internal_format_parameter(SourceGenerator& generator)\n{\n    generator.append(R\"~~~(\n    switch (pname) {\n    case GL_SAMPLES: {\n        GLint num_sample_counts { 0 };\n        glGetInternalformativRobustANGLE(target, internalformat, GL_NUM_SAMPLE_COUNTS, 1, nullptr, &num_sample_counts);\n        size_t buffer_size = num_sample_counts * sizeof(GLint);\n        auto samples_buffer = MUST(ByteBuffer::create_zeroed(buffer_size));\n        glGetInternalformativRobustANGLE(target, internalformat, GL_SAMPLES, buffer_size, nullptr, reinterpret_cast<GLint*>(samples_buffer.data()));\n        auto array_buffer = JS::ArrayBuffer::create(m_realm, move(samples_buffer));\n        return JS::Int32Array::create(m_realm, num_sample_counts, array_buffer);\n    }\n    default:\n        dbgln(\"Unknown WebGL internal format parameter name: {:x}\", pname);\n        set_error(GL_INVALID_ENUM);\n        return JS::js_null();\n    }\n)~~~\");\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "454bf0b7cd9f5b5a424fc4a6f58595cafe28d70a", "file_path": "Meta/Lagom/Tools/CodeGenerators/LibWeb/GenerateWebGLRenderingContext.cpp", "function_name": "generate_get_internal_format_parameter", "index": 2609, "label": 0}
{"input": "int GDigit::initCurl(char* cacertfn,int timeoutms){\n    guiji_curl_init(cacertfn);\n    m_timeoutms = timeoutms;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::initCurl", "index": 2610, "label": 0}
{"input": "void Benchmark::RunRepeatedlyWithArg(int iterations, int arg) {\n  g_flops_processed = 0;\n  g_benchmark_total_time_ns = 0;\n  g_benchmark_start_time_ns = NanoTime();\n  if (fn_ != NULL) {\n    fn_(iterations);\n  } else {\n    fn_range_(iterations, arg);\n  }\n  if (g_benchmark_start_time_ns != 0) {\n    g_benchmark_total_time_ns += NanoTime() - g_benchmark_start_time_ns;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/benchmark_main.cc", "function_name": "Benchmark::RunRepeatedlyWithArg", "index": 2611, "label": 0}
{"input": "JSVMHostObjectProxy::JSVMHostObjectProxy(JSVMRuntime* rt,\n                                         std::shared_ptr<piper::HostObject> ho)\n    : HostObjectWrapperBase(rt, ho){}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_host_object.cc", "function_name": "JSVMHostObjectProxy::JSVMHostObjectProxy", "index": 2612, "label": 0}
{"input": "bool saveMarket(const SparseMatrixType& mat, const std::string& filename, int sym = 0)\n{\n  typedef typename SparseMatrixType::Scalar Scalar;\n  std::ofstream out(filename.c_str(),std::ios::out);\n  if(!out)\n    return false;\n  \n  out.flags(std::ios_base::scientific);\n  out.precision(64);\n  std::string header; \n  internal::putMarketHeader<Scalar>(header, sym); \n  out << header << std::endl; \n  out << mat.rows() << \" \" << mat.cols() << \" \" << mat.nonZeros() << \"\\n\";\n  int count = 0;\n  for(int j=0; j<mat.outerSize(); ++j)\n    for(typename SparseMatrixType::InnerIterator it(mat,j); it; ++it)\n    {\n      ++ count;\n      internal::PutMatrixElt(it.value(), it.row()+1, it.col()+1, out);\n      \n    }\n  out.close();\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/MarketIO.h", "function_name": "saveMarket", "index": 2613, "label": 0}
{"input": "static ModelConfig ConfigGemma3_12B() {\n  ModelConfig config = ConfigGemma3_12B_LM();\n  config.model_name = \"Gemma3_12B\";\n  config.model = Model::GEMMA3_12B;\n  AddVitConfig(config, 896);\n  config.vocab_size = 262144;\n  config.vit_config.pool_dim = 4;\n  const size_t num_patches =\n      config.vit_config.image_size / config.vit_config.patch_width;\n  config.vit_config.seq_len = (num_patches * num_patches);\n  \n  for (auto& layer_config : config.layer_configs) {\n    layer_config.optimized_gating = true;\n  }\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "4ab601da1089ea74eb9e84e22657a240d8182be6", "file_path": "gemma/configs.cc", "function_name": "ConfigGemma3_12B", "index": 2614, "label": 0}
{"input": "inline\nsize_t Mat_<_Tp>::elemSize() const\n{\n    CV_DbgAssert( Mat::elemSize() == sizeof(_Tp) );\n    return sizeof(_Tp);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "Mat_<_Tp>::elemSize", "index": 2615, "label": 0}
{"input": "void StaggeredGridLayoutManager::OnLayoutAfter() {\n  HandleLayoutOrScrollResult(true);\n\n  \n  \n  \n  list_container_->StopInterceptListElementUpdated();\n  float scroll_delta = content_offset_ - last_content_offset_;\n  last_content_offset_ = content_offset_;\n  list_container_->RecordVisibleItemIfNeeded(false);\n  list::EventSource event_source = list_container_->has_valid_diff()\n                                       ? list::EventSource::kDiff\n                                       : list::EventSource::kLayout;\n  SendLayoutCompleteEvent();\n  SendScrollEvents(scroll_delta, content_offset_, event_source);\n  list_container_->ClearValidDiff();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "a0dcde9c711d8fb582d9df9920816808b9a1f177", "file_path": "core/renderer/ui_component/list/staggered_grid_layout_manager.cc", "function_name": "StaggeredGridLayoutManager::OnLayoutAfter", "index": 2616, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const IsFiniteReturnType\nisFinite() const\n{\n  return IsFiniteReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "IsFiniteReturnType\nisFinite", "index": 2617, "label": 0}
{"input": "void EmojiWidget::InitializePlayer(esp_lcd_panel_handle_t panel, esp_lcd_panel_io_handle_t panel_io)\n{\n    player_ = std::make_unique<EmojiPlayer>(panel, panel_io);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/emoji_display.cc", "function_name": "EmojiWidget::InitializePlayer", "index": 2618, "label": 0}
{"input": "void JSVMStringValue::invalidate() {\n  if (str_ref_) {\n    uint32_t result = 0;\n    JSVM_CALL(OH_JSVM_ReferenceUnref(env_, str_ref_, &result));\n  }\n  delete this;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_helper.cc", "function_name": "JSVMStringValue::invalidate", "index": 2619, "label": 0}
{"input": "EIGEN_DEVICE_FUNC Quaternion<Scalar,Options> Quaternion<Scalar,Options>::UnitRandom()\n{\n  EIGEN_USING_STD_MATH(sqrt)\n  EIGEN_USING_STD_MATH(sin)\n  EIGEN_USING_STD_MATH(cos)\n  const Scalar u1 = internal::random<Scalar>(0, 1),\n               u2 = internal::random<Scalar>(0, 2*EIGEN_PI),\n               u3 = internal::random<Scalar>(0, 2*EIGEN_PI);\n  const Scalar a = sqrt(1 - u1),\n               b = sqrt(u1);\n  return Quaternion (a * sin(u2), a * cos(u2), b * sin(u3), b * cos(u3));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "Quaternion<Scalar,Options> Quaternion<Scalar,Options>::UnitRandom", "index": 2620, "label": 0}
{"input": "void matrix_sqrt_quasi_triangular_off_diagonal(const MatrixType& T, ResultType& sqrtT)\n{\n  const Index size = T.rows();\n  for (Index j = 1; j < size; j++) {\n      if (T.coeff(j, j-1) != 0)  \n\tcontinue;\n    for (Index i = j-1; i >= 0; i--) {\n      if (i > 0 && T.coeff(i, i-1) != 0)  \n\tcontinue;\n      bool iBlockIs2x2 = (i < size - 1) && (T.coeff(i+1, i) != 0);\n      bool jBlockIs2x2 = (j < size - 1) && (T.coeff(j+1, j) != 0);\n      if (iBlockIs2x2 && jBlockIs2x2) \n        matrix_sqrt_quasi_triangular_2x2_off_diagonal_block(T, i, j, sqrtT);\n      else if (iBlockIs2x2 && !jBlockIs2x2) \n        matrix_sqrt_quasi_triangular_2x1_off_diagonal_block(T, i, j, sqrtT);\n      else if (!iBlockIs2x2 && jBlockIs2x2) \n        matrix_sqrt_quasi_triangular_1x2_off_diagonal_block(T, i, j, sqrtT);\n      else if (!iBlockIs2x2 && !jBlockIs2x2) \n        matrix_sqrt_quasi_triangular_1x1_off_diagonal_block(T, i, j, sqrtT);\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixSquareRoot.h", "function_name": "matrix_sqrt_quasi_triangular_off_diagonal", "index": 2621, "label": 0}
{"input": "static v128_t wasm_unpackhi_i32x4(v128_t a, v128_t b) {\n    return wasm_v8x16_shuffle(a, b, 8,9,10,11,24,25,26,27,12,13,14,15,28,29,30,31);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "wasm_unpackhi_i32x4", "index": 2622, "label": 0}
{"input": "inline __m256d _v256_shuffle_odd_64(const __m256d& v)\n{ return __m256d(__lasx_xvpermi_d(*((__m256i*)&v), 0xd8)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "_v256_shuffle_odd_64", "index": 2623, "label": 0}
{"input": "void Scrfd::recal(int nw ,int nh){\n    if((nw==m_width)&&(nh==m_height))return;\n    m_width = nw;\n    m_height = nh;\n    int w = m_width;\n    int h = m_height;\n    scale = 1.f;\n    if (w > h) {\n        scale = (float)target_size / w;\n        w = target_size;\n        h = h * scale;\n    } else {\n        scale = (float)target_size / h;\n        h = target_size;\n        w = w * scale;\n    }\n    scale_h = h;\n    scale_w = w;\n    wpad = (w + 31) / 32 * 32 - w;\n    hpad = (h + 31) / 32 * 32 - h;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/scrfd.cpp", "function_name": "Scrfd::recal", "index": 2624, "label": 0}
{"input": "InputShadowNode::InputShadowNode(int sign, const std::string& tag)\n    : BaseTextShadowNode(sign, tag) {\n  paragraph_style_ = std::make_unique<ParagraphStyleHarmony>();\n  text_style_ = std::make_unique<TextStyleHarmony>();\n  text_style_->SetFontSize(INPUT_DEFAULT_FONT_SIZE);\n  PrepareTextProps();\n  text_props_->line_height = INPUT_DEFAULT_FONT_SIZE;\n  font_collection_ = std::make_shared<FontCollectionHarmony>();\n  paragraph_builder_ = std::make_unique<ParagraphBuilderHarmony>(\n      paragraph_style_.get(), font_collection_.get());\n  paragraph_builder_->AddText(\" \");\n  paragraph_builder_->PushTextStyle(*text_style_);\n  SetCustomMeasureFunc(this);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/input_shadow_node.cc", "function_name": "InputShadowNode::InputShadowNode", "index": 2625, "label": 0}
{"input": "static inline\ndouble jaccardDistance(const Rect_<_Tp>& a, const Rect_<_Tp>& b) {\n    _Tp Aa = a.area();\n    _Tp Ab = b.area();\n\n    if ((Aa + Ab) <= std::numeric_limits<_Tp>::epsilon()) {\n        \n        return 0.0;\n    }\n\n    double Aab = (a & b).area();\n    \n    return 1.0 - Aab / (Aa + Ab - Aab);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "jaccardDistance", "index": 2626, "label": 0}
{"input": "CvPoint3D32f cvPoint3D32f(const cv::Point3_<_Tp>& pt)\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvPoint3D32f p  = { (float)pt.x, (float)pt.y, (float)pt.z };\n#else\n    CvPoint3D32f p((float)pt.x, (float)pt.y, (float)pt.z);\n#endif\n    return p;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvPoint3D32f", "index": 2627, "label": 0}
{"input": "Rect RotationWarperBase<P>::warpRoi(Size src_size, InputArray K, InputArray R)\n{\n    projector_.setCameraParams(K, R);\n\n    Point dst_tl, dst_br;\n    detectResultRoi(src_size, dst_tl, dst_br);\n\n    return Rect(dst_tl, Point(dst_br.x + 1, dst_br.y + 1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "RotationWarperBase<P>::warpRoi", "index": 2628, "label": 0}
{"input": "inline typename internal::conditional<Enable,ForceAlignedAccess<Derived>,Derived&>::type\nMatrixBase<Derived>::forceAlignedAccessIf()\n{\n  return derived();  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/ForceAlignedAccess.h", "function_name": "MatrixBase<Derived>::forceAlignedAccessIf", "index": 2629, "label": 0}
{"input": "EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)\n{\n  Packet2d b, res;\n  b   = pmax<Packet2d>(a.v4f[0], a.v4f[1]);\n  res = pmax<Packet2d>(b, reinterpret_cast<Packet2d>(vec_sld(reinterpret_cast<Packet4i>(b), reinterpret_cast<Packet4i>(b), 8)));\n  return static_cast<float>(pfirst(res));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "predux_max", "index": 2630, "label": 0}
{"input": "inline void AllocatorImpl<T>::Free(void* p) {\n  ThrowOnError(GetApi().AllocatorFree(this->p_, p));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "AllocatorImpl<T>::Free", "index": 2631, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b)\n{\n  Packet4f res;\n  res.v4f[0] = pand(a.v4f[0], b.v4f[0]);\n  res.v4f[1] = pand(a.v4f[1], b.v4f[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pxor", "index": 2632, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet2d psub<Packet2d>(const Packet2d& a, const Packet2d& b) { return (a - b); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "psub", "index": 2633, "label": 0}
{"input": "bool JSVMRuntime::isArrayBuffer(const piper::Object& obj) const {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n\n  bool result;\n  JSVM_CALL_RETURN(OH_JSVM_IsArraybuffer(getEnv(), obj_value, &result), false);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::isArrayBuffer", "index": 2634, "label": 0}
{"input": "void MakeMask(const uint32_t* instructions, size_t count)\n{\n    ppc_insn insn;\n    for (size_t i = 0; i < count; i++)\n    {\n        ppc::Disassemble(&instructions[i], 0, insn);\n        fmt::println(\"0x{:X}, // {}\", ByteSwap(insn.opcode->opcode | (insn.instruction & insn.opcode->mask)), insn.opcode->name);\n    }\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "847842cd28a2427b9db520d2aaa7416e5dec3822", "file_path": "PowerAnalyse/main.cpp", "function_name": "MakeMask", "index": 2635, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const Log10ReturnType\nlog10() const\n{\n  return Log10ReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "Log10ReturnType\nlog10", "index": 2636, "label": 0}
{"input": "__attribute__((visibility(\"default\"))) void RequestCacheGenerationV8(\n    const std::string &source_url, const std::string &template_url,\n    const std::shared_ptr<const Buffer> &buffer,\n    std::unique_ptr<CacheGenerator> cache_generator, bool force) {\n  std::vector<std::unique_ptr<cache::CacheGenerator>> generators;\n  generators.push_back(std::move(cache_generator));\n  JsCacheManager::GetV8Instance().RequestCacheGeneration(\n      template_url, std::move(generators), force);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c46844cade09ee740a53896f002c74bfb01d95", "file_path": "core/runtime/jscache/js_cache_manager.cc", "function_name": "RequestCacheGenerationV8", "index": 2637, "label": 0}
{"input": "inline\nMatx<_Tp, m, n> Matx<_Tp, m, n>::div(const Matx<_Tp, m, n>& a) const\n{\n    return Matx<_Tp, m, n>(*this, a, Matx_DivOp());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Matx<_Tp, m, n>::div", "index": 2638, "label": 0}
{"input": "LLT<_MatrixType,_UpLo> LLT<_MatrixType,_UpLo>::rankUpdate(const VectorType& v, const RealScalar& sigma)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(VectorType);\n  eigen_assert(v.size()==m_matrix.cols());\n  eigen_assert(m_isInitialized);\n  if(internal::llt_inplace<typename MatrixType::Scalar, UpLo>::rankUpdate(m_matrix,v,sigma)>=0)\n    m_info = NumericalIssue;\n  else\n    m_info = Success;\n\n  return *this;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LLT.h", "function_name": "LLT<_MatrixType,_UpLo>::rankUpdate", "index": 2639, "label": 0}
{"input": "TEST(StyleObjectParser, ParseSimpleStyleObject) {\n  rapidjson::Document document;\n  document.Parse(kStyleObjectsJson);\n  if (document.HasMember(\"simpleStyleObjects\")) {\n    CompileOptions encoder_options;\n    encoder_options.enable_simple_styling_ = true;\n    auto style_object_parser =\n        std::make_unique<StyleObjectParser>(encoder_options);\n    style_object_parser->Parse(document[\"simpleStyleObjects\"]);\n    auto& style_objects = style_object_parser->StyleObjects();\n    ASSERT_EQ(style_objects.size(), 28);\n    auto& style_rule_min_height = style_objects.front();\n    ASSERT_EQ(style_rule_min_height.Properties().size(), 1);\n    ASSERT_TRUE(\n        style_rule_min_height.Properties().contains(kPropertyIDMinHeight));\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "af91be4e86f1918250dc41ea96c1430acbb38233", "file_path": "core/template_bundle/template_codec/binary_encoder/style_object_encoder/style_object_parser_unittest.cc", "function_name": "TEST", "index": 2640, "label": 0}
{"input": "int KWav::calcbuf(int calcinx,float** ppwav,float** ppmfcc,float** ppbnf,int* pmel,int* pbnf){\n    if(calcinx>m_calcsize)return -1;\n    if(calcinx<1)return -2;\n    int index = calcinx -1;\n    \n    *ppwav = m_wavmat->frow(index);\n    *ppmfcc = m_melmat->frow(index);\n    \n    *ppbnf = m_bnfcache->secBuf(index)->fdata();\n    if(calcinx==m_calcsize){\n        *pmel = m_mellast;\n        *pbnf = m_bnflast;\n    }else{\n        *pmel = MFCC_MELBASE;\n        *pbnf = MFCC_BNFBASE;\n    }\n    return calcinx;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/netwav.cpp", "function_name": "KWav::calcbuf", "index": 2641, "label": 0}
{"input": "typename UmfPackLU<MatrixType>::Scalar UmfPackLU<MatrixType>::determinant() const\n{\n  Scalar det;\n  umfpack_get_determinant(&det, 0, m_numeric, 0);\n  return det;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "UmfPackLU<MatrixType>::determinant", "index": 2642, "label": 0}
{"input": "inline cl_int clEnqueueFillImage(cl_command_queue p0, cl_mem p1, const void* p2, const size_t* p3, const size_t* p4, cl_uint p5, const cl_event* p6, cl_event* p7) { return clEnqueueFillImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueFillImage", "index": 2643, "label": 0}
{"input": "inline\nSparseMatIterator_<_Tp> SparseMatIterator_<_Tp>::operator ++(int)\n{\n    SparseMatIterator_<_Tp> it = *this;\n    SparseMatConstIterator::operator ++();\n    return it;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMatIterator_<_Tp>::operator ++", "index": 2644, "label": 0}
{"input": "lynx_api_status lynx_value_is_function(lynx_api_env env, lynx_value value,\n                                       bool* result) {\n  return lynx_api_not_support;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d2c187cde020511e2e8e49819570125638d7dc69", "file_path": "base/src/value/lynx_value_extended_empty.cc", "function_name": "lynx_value_is_function", "index": 2645, "label": 0}
{"input": "XDBFBlock XDBFWrapper::GetResource(EXDBFNamespace ns, uint64_t id) const\n{\n    for (int i = 0; i < pHeader->EntryCount; i++)\n    {\n        auto& entry = pEntries[i];\n\n        if (entry.NamespaceID == ns && entry.ResourceID == id)\n        {\n            XDBFBlock block{};\n            block.pBuffer = pContent + entry.Offset;\n            block.BufferSize = entry.Length;\n            return block;\n        }\n    }\n\n    return { nullptr };\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "dd85501f1166d368fe0d5fa8ff91387b9c2abaf8", "file_path": "PowerUtils/xdbf_wrapper.cpp", "function_name": "XDBFWrapper::GetResource", "index": 2646, "label": 0}
{"input": "void MessagePort::read_from_transport()\n{\n    VERIFY(m_enabled);\n\n    auto schedule_shutdown = m_transport->read_as_many_messages_as_possible_without_blocking([this](auto&& raw_message) {\n        FixedMemoryStream stream { raw_message.bytes.span(), FixedMemoryStream::Mode::ReadOnly };\n        IPC::Decoder decoder { stream, raw_message.fds };\n\n        auto serialized_transfer_record = MUST(decoder.decode<SerializedTransferRecord>());\n\n        queue_global_task(Task::Source::PostedMessage, relevant_global_object(*this), GC::create_function(heap(), [this, serialized_transfer_record = move(serialized_transfer_record)]() mutable {\n            this->post_message_task_steps(serialized_transfer_record);\n        }));\n    });\n\n    if (schedule_shutdown == IPC::Transport::ShouldShutdown::Yes) {\n        queue_global_task(Task::Source::PostedMessage, relevant_global_object(*this), GC::create_function(heap(), [this] {\n            this->close();\n        }));\n    }\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "dbba6c0df948b616ee313baaa2d5fe57169fe6cc", "file_path": "Libraries/LibWeb/HTML/MessagePort.cpp", "function_name": "MessagePort::read_from_transport", "index": 2647, "label": 0}
{"input": "EspS3Cat() : boot_button_(BOOT_BUTTON_GPIO) {\n        InitializeI2c();\n        InitializeCharge();\n        InitializeCst816sTouchPad();\n        \n        InitializeSpi();\n        Initializest77916Display();\n        InitializeButtons();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ad2c1874332c3d97dc0d50eab5dd6b879c61a865", "file_path": "main/boards/echoear/EchoEar.cc", "function_name": "EspS3Cat", "index": 2648, "label": 0}
{"input": "static void run(const Self& self, Op& reducer, const GpuDevice& device, half* output, typename Self::Index num_coeffs) {\n    typedef typename Self::Index Index;\n\n    const int block_size = 256;\n    const int num_per_thread = 128;\n    const int num_blocks = divup<int>(num_coeffs, block_size * num_per_thread);\n    half2* scratch = static_cast<half2*>(device.scratchpad());\n\n    if (num_blocks > 1) {\n      \n      LAUNCH_CUDA_KERNEL((ReductionInitFullReduxKernelHalfFloat<Self, Op, Index>),\n                         1, 1, 0, device, reducer, self, num_coeffs, scratch);\n    }\n\n    LAUNCH_CUDA_KERNEL((FullReductionKernelHalfFloat<block_size, num_per_thread, Self, Op, Index>),\n                       num_blocks, block_size, 0, device, reducer, self, num_coeffs, output, scratch);\n\n    if (num_blocks > 1) {\n      LAUNCH_CUDA_KERNEL((ReductionCleanupKernelHalfFloat<Op>),\n                         1, 1, 0, device, reducer, output, scratch);\n    }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "num_coeffs", "index": 2649, "label": 0}
{"input": "void GCGraph<TWeight>::addTermWeights( int i, TWeight sourceW, TWeight sinkW )\n{\n    CV_Assert( i>=0 && i<(int)vtcs.size() );\n\n    TWeight dw = vtcs[i].weight;\n    if( dw > 0 )\n        sourceW += dw;\n    else\n        sinkW -= dw;\n    flow += (sourceW < sinkW) ? sourceW : sinkW;\n    vtcs[i].weight = sourceW - sinkW;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/detail/gcgraph.hpp", "function_name": "GCGraph<TWeight>::addTermWeights", "index": 2650, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_product_op<Scalar>, const Derived, const OtherDerived>\n    operator*(const OtherDerived& other) const {\n      return binaryExpr(other.derived(), internal::scalar_product_op<Scalar>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorCwiseBinaryOp<internal::scalar_product_op<Scalar>, const Derived, const OtherDerived>\n    operator*", "index": 2651, "label": 0}
{"input": "CV_INLINE CvAttrList cvAttrList( const char** attr CV_DEFAULT(NULL),\n                                 CvAttrList* next CV_DEFAULT(NULL) )\n{\n    CvAttrList l;\n    l.attr = attr;\n    l.next = next;\n\n    return l;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvAttrList", "index": 2652, "label": 0}
{"input": "inline\n_OutputArray _OutputArray::rawOut(std::array<_Tp, _Nm>& arr)\n{\n    _OutputArray v;\n    v.flags = FIXED_TYPE + FIXED_SIZE + MATX + traits::Type<_Tp>::value + ACCESS_WRITE;\n    v.obj = (void*)arr.data();\n    v.sz = Size(1, _Nm);\n    return v;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "_OutputArray::rawOut", "index": 2653, "label": 0}
{"input": "void insert(const_iterator position, size_type new_size, const value_type& x)\n  { vector_base::insert(position, new_size, x); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/StlSupport/StdVector.h", "function_name": "position", "index": 2654, "label": 0}
{"input": "EIGEN_STRONG_INLINE void\npbroadcast4<Packet2d>(const double *a,\n                      Packet2d& a0, Packet2d& a1, Packet2d& a2, Packet2d& a3)\n{\n  a1 = pload<Packet2d>(a);\n  a0 = vec_splat(a1, 0);\n  a1 = vec_splat(a1, 1);\n  a3 = pload<Packet2d>(a+2);\n  a2 = vec_splat(a3, 0);\n  a3 = vec_splat(a3, 1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pbroadcast4", "index": 2655, "label": 0}
{"input": "inline size_t Session::GetOverridableInitializerCount() const {\n  size_t out;\n  ThrowOnError(GetApi().SessionGetOverridableInitializerCount(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Session::GetOverridableInitializerCount", "index": 2656, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE std::ptrdiff_t array_prod(const Sizes<Indices...>&) {\n  return Sizes<Indices...>::total_size;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDimensions.h", "function_name": "EIGEN_STRONG_INLINE std::ptrdiff_t array_prod", "index": 2657, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    MatrixType operatorInverseSqrt() const\n    {\n      eigen_assert(m_isInitialized && \"SelfAdjointEigenSolver is not initialized.\");\n      eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\");\n      return m_eivec * m_eivalues.cwiseInverse().cwiseSqrt().asDiagonal() * m_eivec.adjoint();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h", "function_name": "operatorInverseSqrt", "index": 2658, "label": 0}
{"input": "void test_cxx11_tensor_expr()\n{\n  CALL_SUBTEST(test_1d());\n  CALL_SUBTEST(test_2d());\n  CALL_SUBTEST(test_3d());\n  CALL_SUBTEST(test_constants());\n  CALL_SUBTEST(test_boolean());\n  CALL_SUBTEST(test_functors());\n  CALL_SUBTEST(test_type_casting());\n  CALL_SUBTEST(test_select());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_expr.cpp", "function_name": "test_cxx11_tensor_expr", "index": 2659, "label": 0}
{"input": "int mainenc(int argc,char** argv){\n    char result[255] ;\n    memset(result,0,255);\n    char* key = \"yymrjzbwyrbjszrk\";\n    char* aiv = \"yymrjzbwyrbjszrk\";\n    int base64 = 1;\n    int outlen = 0;\n    gj_aesc_t* aesc = NULL;\n    init_aesc(key,aiv,1,&aesc);\n    char* fn1 = argv[1];\n    char* fn2 = argv[2];\n    FILE* fr = fopen(fn1,\"rb\");\n    FILE* fw = fopen(fn2,\"wb\");\n    fwrite(\"abcdefgh\",1,8,fw);\n    uint64_t size = 0;\n    fwrite(&size,1,8,fw);\n    fwrite(&size,1,8,fw);\n    fwrite(&size,1,8,fw);\n    while(!feof(fr)){\n        char data[16];\n        memset(data,0,16);\n        uint64_t rst = fread(data,1,16,fr);\n        printf(\"===rst %d\\n\",rst);\n        if(rst){\n            size +=rst;\n            do_aesc(aesc,data,16,result,&outlen);\n            printf(\"===out %d\\n\",outlen);\n            fwrite(result,1,16,fw);\n        }\n    }\n    fseek(fw,8,0);\n    fwrite(&size,1,8,fw);\n    fclose(fr);\n    fclose(fw);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aes/gaes_stream.cc", "function_name": "mainenc", "index": 2660, "label": 0}
{"input": "bool calculateParity(const std::bitset<DataBits>& data, IntType parityBit)\n        {\n            const auto bitsCovered = dataBitsCovered(DataBits, parityBit);\n            return std::accumulate(bitsCovered.begin(),\n                                   bitsCovered.end(),\n                                   false,\n                                   [&data](bool parity, const auto value) noexcept -> bool { return parity ^= value; });\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/hammingEncode.hpp", "function_name": "calculateParity", "index": 2661, "label": 0}
{"input": "std::string output_str(struct whisper_context * ctx, const whisper_params & params, std::vector<std::vector<float>> pcmf32s) {\n    std::stringstream result;\n    const int n_segments = whisper_full_n_segments(ctx);\n    for (int i = 0; i < n_segments; ++i) {\n        const char * text = whisper_full_get_segment_text(ctx, i);\n        std::string speaker = \"\";\n\n        if (params.diarize && pcmf32s.size() == 2)\n        {\n            const int64_t t0 = whisper_full_get_segment_t0(ctx, i);\n            const int64_t t1 = whisper_full_get_segment_t1(ctx, i);\n            speaker = estimate_diarization_speaker(pcmf32s, t0, t1);\n        }\n\n        result << speaker << text << \"\\n\";\n    }\n    return result.str();\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/server.cpp", "function_name": "output_str", "index": 2662, "label": 0}
{"input": "LepusGesture::LepusGesture(int32_t element_id, tasm::TemplateAssembler* tasm)\n    : element_id_(element_id), tasm_(tasm) {}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "f97fe29c933bd307c6288139a3859f61243d990b", "file_path": "core/renderer/worklet/lepus_gesture.cc", "function_name": "LepusGesture::LepusGesture", "index": 2663, "label": 0}
{"input": "static void wifi_event_handler(void* arg, esp_event_base_t event_base,\n                                 int32_t event_id, void* event_data)\n    {\n        if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_CONNECTED) {\n            EspHi* instance = static_cast<EspHi*>(arg);\n            if (!instance->web_server_initialized_) {\n                ESP_LOGI(TAG, \"WiFi connected, init web control server\");\n                esp_err_t err = esp_hi_web_control_server_init();\n                if (err != ESP_OK) {\n                    ESP_LOGE(TAG, \"Failed to initialize web control server: %d\", err);\n                } else {\n                    ESP_LOGI(TAG, \"Web control server initialized\");\n                    instance->web_server_initialized_ = true;\n                }\n            }\n        }\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "9122664f0f387618aef8a030eec983d82a518113", "file_path": "main/boards/esp-hi/esp_hi.cc", "function_name": "event_base", "index": 2664, "label": 0}
{"input": "std::vector<uint32_t> RepeatedAttentionWindowSizes(\n    const std::array<uint32_t, kPatternSize>& window_size_pattern) {\n  static_assert(kNum % kPatternSize == 0,\n                \"kNum must be a multiple of kPatternSize\");\n  std::vector<uint32_t> window_size_configs(kNum);\n  for (uint32_t i = 0; i < kNum; ++i) {\n    window_size_configs[i] = window_size_pattern[i % kPatternSize];\n  }\n  return window_size_configs;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "9d40f0117e45c12eca0945ad7b35bb4f61869df4", "file_path": "gemma/configs.h", "function_name": "RepeatedAttentionWindowSizes", "index": 2665, "label": 0}
{"input": "EIGEN_STRONG_INLINE std::complex<float> predux<Packet4cf>(const Packet4cf& a)\n{\n  return predux(padd(Packet2cf(_mm256_extractf128_ps(a.v,0)),\n                     Packet2cf(_mm256_extractf128_ps(a.v,1))));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/AVX/Complex.h", "function_name": "std::complex<float> predux<Packet4cf>", "index": 2666, "label": 0}
{"input": "void testMatrixSqrt(const MatrixType& m)\n{\n  MatrixType A;\n  generateTestMatrix<MatrixType>::run(A, m.rows());\n  MatrixType sqrtA = A.sqrt();\n  VERIFY_IS_APPROX(sqrtA * sqrtA, A);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/matrix_square_root.cpp", "function_name": "testMatrixSqrt", "index": 2667, "label": 0}
{"input": "inline void Response::set_content(const std::string &s,\n                                  const std::string &content_type) {\n  set_content(s.data(), s.size(), content_type);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Response::set_content", "index": 2668, "label": 0}
{"input": "inline cl_program clCreateProgramWithBinary(cl_context p0, cl_uint p1, const cl_device_id* p2, const size_t* p3, const unsigned char** p4, cl_int* p5, cl_int* p6) { return clCreateProgramWithBinary_pfn(p0, p1, p2, p3, p4, p5, p6); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clCreateProgramWithBinary", "index": 2669, "label": 0}
{"input": "MediaData::MediaData(JMat* fmat,JMat* mmat,JMat* bmat,bool ref ){\n    m_data =  fmat;\n    m_msk =  mmat;\n    m_bg =  bmat;\n    data = fmat->udata();\n    size = fmat->size();\n    data1 = mmat->udata();\n    size1 = mmat->size();\n    data2 = bmat->udata();\n    size2 = bmat->size();\n    width = fmat->width();;\n    height = fmat->height();\n    m_ref = ref;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/MediaData.cpp", "function_name": "MediaData::MediaData", "index": 2670, "label": 0}
{"input": "void test_gmres_T()\n{\n  GMRES<SparseMatrix<T>, DiagonalPreconditioner<T> > gmres_colmajor_diag;\n  GMRES<SparseMatrix<T>, IdentityPreconditioner    > gmres_colmajor_I;\n  GMRES<SparseMatrix<T>, IncompleteLUT<T> >           gmres_colmajor_ilut;\n  \n\n  CALL_SUBTEST( check_sparse_square_solving(gmres_colmajor_diag)  );\n\n  CALL_SUBTEST( check_sparse_square_solving(gmres_colmajor_ilut)     );\n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/gmres.cpp", "function_name": "test_gmres_T", "index": 2671, "label": 0}
{"input": "napi_value DevToolEnvHarmony::GetSwitchNAPI(napi_env env,\n                                            napi_callback_info info) {\n  size_t argc = 1;\n  napi_value args[1] = {nullptr};\n  \n  napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n  std::string key = base::NapiUtil::ConvertToString(env, args[0]);\n  napi_value result = nullptr;\n  napi_status ret = napi_get_boolean(\n      env, DevToolEnvHarmony::GetInstance().GetSwitch(key), &result);\n  if (ret != napi_ok) {\n    LOGW(\"Failed to convert boolean value to napi_value\");\n    return nullptr;\n  }\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::GetSwitchNAPI", "index": 2672, "label": 0}
{"input": "void RenderingWidget::mousePressEvent(QMouseEvent* e)\n{\n  mMouseCoords = Vector2i(e->pos().x(), e->pos().y());\n  bool fly = (mNavMode==NavFly) || (e->modifiers()&Qt::ControlModifier);\n  switch(e->button())\n  {\n    case Qt::LeftButton:\n      if(fly)\n      {\n        mCurrentTrackingMode = TM_LOCAL_ROTATE;\n        mTrackball.start(Trackball::Local);\n      }\n      else\n      {\n        mCurrentTrackingMode = TM_ROTATE_AROUND;\n        mTrackball.start(Trackball::Around);\n      }\n      mTrackball.track(mMouseCoords);\n      break;\n    case Qt::MidButton:\n      if(fly)\n        mCurrentTrackingMode = TM_FLY_Z;\n      else\n        mCurrentTrackingMode = TM_ZOOM;\n      break;\n    case Qt::RightButton:\n        mCurrentTrackingMode = TM_FLY_PAN;\n      break;\n    default:\n      break;\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/quaternion_demo.cpp", "function_name": "RenderingWidget::mousePressEvent", "index": 2673, "label": 0}
{"input": "void LcdDisplay::SetIcon(const char* icon) {\n    DisplayLockGuard lock(this);\n    if (emotion_label_ == nullptr) {\n        return;\n    }\n    lv_obj_set_style_text_font(emotion_label_, &font_awesome_30_4, 0);\n    lv_label_set_text(emotion_label_, icon);\n\n#if !CONFIG_USE_WECHAT_MESSAGE_STYLE\n    \n    lv_obj_clear_flag(emotion_label_, LV_OBJ_FLAG_HIDDEN);\n    if (preview_image_ != nullptr) {\n        lv_obj_add_flag(preview_image_, LV_OBJ_FLAG_HIDDEN);\n    }\n#endif\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "24ede2219728cee2ce8517c831105eced21901c0", "file_path": "main/display/lcd_display.cc", "function_name": "LcdDisplay::SetIcon", "index": 2674, "label": 0}
{"input": "Symbol(std::string name, size_t address, size_t size, SymbolType type)\n        : name(std::move(name)), address(address), size(size), type(type)\n    {\n    }", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "847842cd28a2427b9db520d2aaa7416e5dec3822", "file_path": "PowerUtils/symbol.h", "function_name": "Symbol", "index": 2675, "label": 0}
{"input": "inline Quat<T> Quat<T>::asin() const\n{\n    Quat<T> v(0, x, y, z);\n    T vNorm = v.norm();\n    T k = vNorm < CV_QUAT_EPS ? 1 : vNorm;\n    return -v / k * (*this * v / k).asinh();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::asin", "index": 2676, "label": 0}
{"input": "void test_return_by_value(int len)\n{\n    VectorXf in;\n    VectorXf in1;\n    in.setRandom( len );\n    VectorXcf out1,out2;\n    FFT<float> fft;\n\n    fft.SetFlag(fft.HalfSpectrum );\n\n    fft.fwd(out1,in);\n    out2 = fft.fwd(in);\n    VERIFY( (out1-out2).norm() < test_precision<float>() );\n    in1 = fft.inv(out1);\n    VERIFY( (in1-in).norm() < test_precision<float>() );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/FFTW.cpp", "function_name": "test_return_by_value", "index": 2677, "label": 0}
{"input": "ForwardIt min_element(ForwardIt first, ForwardIt last, Compare comp) CONDITIONAL_NO_EXCEPT\n    {\n        return std::min_element(\n#ifdef PARALLEL_ALGORITHMS_SUPPORTED\n            std::execution::par_unseq,\n#endif\n            first,\n            last,\n            comp);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp", "function_name": "min_element", "index": 2678, "label": 0}
{"input": "CV_INLINE  void  cvCalcHist( IplImage** image, CvHistogram* hist,\n                             int accumulate CV_DEFAULT(0),\n                             const CvArr* mask CV_DEFAULT(NULL) )\n{\n    cvCalcArrHist( (CvArr**)image, hist, accumulate, mask );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/imgproc_c.h", "function_name": "cvCalcHist", "index": 2679, "label": 0}
{"input": "static LayerConfig LayerConfigGemma3_12B_LM(size_t model_dim) {\n  LayerConfig config;\n  config.model_dim = model_dim;\n  config.ff_hidden_dim = 15360;\n  config.heads = 16;\n  config.kv_heads = 8;\n  config.qkv_dim = 256;\n  config.optimized_gating = true;\n  config.post_norm = PostNormType::Scale;\n  config.use_qk_norm = true;\n  return config;\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "4ab601da1089ea74eb9e84e22657a240d8182be6", "file_path": "gemma/configs.cc", "function_name": "LayerConfigGemma3_12B_LM", "index": 2680, "label": 0}
{"input": "inline GOptRunArgsP gout(optional<T>&arg, optional<Ts>&... args)\n{\n    return GOptRunArgsP{ detail::wrap_opt_arg(arg), detail::wrap_opt_arg(args)... };\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gstreaming.hpp", "function_name": "gout", "index": 2681, "label": 0}
{"input": "[[nodiscard]] inline reference_frames::ENU AERtoENU(const reference_frames::AER aer) noexcept\n    {\n        return NEDtoENU(AERtoNED(aer));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/Transforms/AERtoENU.hpp", "function_name": "AERtoENU", "index": 2682, "label": 0}
{"input": "static inline size_t alignSize(size_t sz, int n)\n{\n    CV_DbgAssert((n & (n - 1)) == 0); \n    return (sz + n-1) & -n;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/utility.hpp", "function_name": "alignSize", "index": 2683, "label": 0}
{"input": "int GDigit::initWenet(char* fnwenet){\n    if(ai_wenet){\n        asyncWenet(1,ai_wenet);\n        ai_wenet = nullptr;\n    }\n    ai_wenet = new Wenet(fnwenet);\n    asyncWenet(0,ai_wenet);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GDigit.cpp", "function_name": "GDigit::initWenet", "index": 2684, "label": 0}
{"input": "void WakeWordDetect::StartDetection() {\n    xEventGroupSetBits(event_group_, DETECTION_RUNNING_EVENT);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_processing/wake_word_no_afe.cc", "function_name": "WakeWordDetect::StartDetection", "index": 2685, "label": 0}
{"input": "inline\nvoid SphericalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)\n{\n    float x0_ = r_kinv[0] * x + r_kinv[1] * y + r_kinv[2];\n    float y0_ = r_kinv[3] * x + r_kinv[4] * y + r_kinv[5];\n    float z_ = r_kinv[6] * x + r_kinv[7] * y + r_kinv[8];\n\n    float x_ = y0_;\n    float y_ = x0_;\n    float u, v;\n\n    u = scale * atan2f(x_, z_);\n    v = scale * (static_cast<float>(CV_PI) - acosf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_)));\n\n    u0 = -u;\n    v0 = v;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "SphericalPortraitProjector::mapForward", "index": 2686, "label": 0}
{"input": "typename CompleteOrthogonalDecomposition<MatrixType>::HouseholderSequenceType\nCompleteOrthogonalDecomposition<MatrixType>::householderQ() const {\n  return m_cpqr.householderQ();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/CompleteOrthogonalDecomposition.h", "function_name": "CompleteOrthogonalDecomposition<MatrixType>::householderQ", "index": 2687, "label": 0}
{"input": "inline bool compare_case_ignore(const std::string &a, const std::string &b) {\n  if (a.size() != b.size()) { return false; }\n  for (size_t i = 0; i < b.size(); i++) {\n    if (::tolower(a[i]) != ::tolower(b[i])) { return false; }\n  }\n  return true;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "compare_case_ignore", "index": 2688, "label": 0}
{"input": "int gjdigit_stopgpg(gjdigit_t* dg){\n    if(dg->mat_gpg){\n        delete dg->mat_gpg;\n        dg->mat_gpg = NULL;\n    }\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_stopgpg", "index": 2689, "label": 0}
{"input": "inline\nPoint3_<_Tp>::operator Point3_<_Tp2>() const\n{\n    return Point3_<_Tp2>(saturate_cast<_Tp2>(x), saturate_cast<_Tp2>(y), saturate_cast<_Tp2>(z));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Point3_", "index": 2690, "label": 0}
{"input": "std::complex<double> spherical_harmonic(uint32 n, int32 m, dtype1 theta, dtype2 phi)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype1);\n        STATIC_ASSERT_ARITHMETIC(dtype2);\n\n        return boost::math::spherical_harmonic(m, n, static_cast<double>(phi), static_cast<double>(theta));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Polynomial/spherical_harmonic.hpp", "function_name": "spherical_harmonic", "index": 2691, "label": 0}
{"input": "LevenbergMarquardtSpace::Status\nLevenbergMarquardt<FunctorType,Scalar>::minimize(FVectorType  &x)\n{\n    LevenbergMarquardtSpace::Status status = minimizeInit(x);\n    if (status==LevenbergMarquardtSpace::ImproperInputParameters)\n        return status;\n    do {\n        status = minimizeOneStep(x);\n    } while (status==LevenbergMarquardtSpace::Running);\n    return status;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h", "function_name": "LevenbergMarquardt<FunctorType,Scalar>::minimize", "index": 2692, "label": 0}
{"input": "void insertCoefficient(int id, int i, int j, double w, std::vector<T>& coeffs,\n                       Eigen::VectorXd& b, const Eigen::VectorXd& boundary)\n{\n  int n = int(boundary.size());\n  int id1 = i+j*n;\n\n        if(i==-1 || i==n) b(id) -= w * boundary(j); \n  else  if(j==-1 || j==n) b(id) -= w * boundary(i); \n  else  coeffs.push_back(T(id,id1,w));              \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/special_examples/Tutorial_sparse_example_details.cpp", "function_name": "insertCoefficient", "index": 2693, "label": 0}
{"input": "explicit BoostNdarrayHelper(boost::python::tuple inShape) :\n                theArray_(boost::python::numpy::zeros(inShape, boost::python::numpy::dtype::get_builtin<dtype>())),\n                numDimensions_(static_cast<uint8>(theArray_.get_nd())),\n                shape_(numDimensions_),\n                strides_(numDimensions_),\n                order_(Order::C)\n            {\n                Py_intptr_t const* shapePtr = theArray_.get_shape();\n                for (uint8 i = 0; i < numDimensions_; ++i)\n                {\n                    strides_[i] = static_cast<uint32>(theArray_.strides(i));\n                    shape_[i]   = shapePtr[i];\n                }\n\n                if (numDimensions_ > 1 && theArray_.strides(0) < theArray_.strides(1))\n                {\n                    order_ = Order::F;\n                }\n            }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/BoostNumpyNdarrayHelper.hpp", "function_name": "BoostNdarrayHelper", "index": 2694, "label": 0}
{"input": "inline uint64_t Session::GetProfilingStartTimeNs() const {\n  uint64_t out;\n  ThrowOnError(GetApi().SessionGetProfilingStartTimeNs(p_, &out));\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Session::GetProfilingStartTimeNs", "index": 2695, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE t array_prod(const std::vector<t>& a) {\n  eigen_assert(a.size() > 0);\n  t prod = 1;\n  for (size_t i = 0; i < a.size(); ++i) { prod *= a[i]; }\n  return prod;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/EmulateCXX11Meta.h", "function_name": "array_prod", "index": 2696, "label": 0}
{"input": "ArkUI_NodeAttributeType UITextArea::GetSelectionAttributeType() const {\n  return NODE_TEXT_INPUT_TEXT_SELECTION;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "5c2108848293dc64f2b7a84a2db25aee68369998", "file_path": "platform/harmony/lynx_xelement/input/ui_textarea.cc", "function_name": "UITextArea::GetSelectionAttributeType", "index": 2697, "label": 0}
{"input": "inline\nvoid SphericalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)\n{\n    float u, v;\n    u = -u0;\n    v = v0;\n\n    u /= scale;\n    v /= scale;\n\n    float sinv = sinf(static_cast<float>(CV_PI) - v);\n    float x0_ = sinv * sinf(u);\n    float y0_ = cosf(static_cast<float>(CV_PI) - v);\n    float z_ = sinv * cosf(u);\n\n    float x_ = y0_;\n    float y_ = x0_;\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "SphericalPortraitProjector::mapBackward", "index": 2698, "label": 0}
{"input": "void set_from_triplets(const InputIterator& begin, const InputIterator& end, SparseMatrixType& mat, DupFunctor dup_func)\n{\n  enum { IsRowMajor = SparseMatrixType::IsRowMajor };\n  typedef typename SparseMatrixType::Scalar Scalar;\n  typedef typename SparseMatrixType::StorageIndex StorageIndex;\n  SparseMatrix<Scalar,IsRowMajor?ColMajor:RowMajor,StorageIndex> trMat(mat.rows(),mat.cols());\n\n  if(begin!=end)\n  {\n    \n    typename SparseMatrixType::IndexVector wi(trMat.outerSize());\n    wi.setZero();\n    for(InputIterator it(begin); it!=end; ++it)\n    {\n      eigen_assert(it->row()>=0 && it->row()<mat.rows() && it->col()>=0 && it->col()<mat.cols());\n      wi(IsRowMajor ? it->col() : it->row())++;\n    }\n\n    \n    trMat.reserve(wi);\n    for(InputIterator it(begin); it!=end; ++it)\n      trMat.insertBackUncompressed(it->row(),it->col()) = it->value();\n\n    \n    trMat.collapseDuplicates(dup_func);\n  }\n\n  \n  mat = trMat;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseMatrix.h", "function_name": "set_from_triplets", "index": 2699, "label": 0}
{"input": "GRender::~GRender() {\n    delete audioRenderThread;\n    delete videoRenderThread;\n    delete messageThread;\n\n    delete renderHelper;\n    delete messageHelper;\n    delete frameSource;\n    delete messageSource;\n    LOGI(TAG, \"CoreFlow : GRenderImp destroyed\");\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::~GRender", "index": 2700, "label": 0}
{"input": "bool MatrixBase<Derived>::isUpperTriangular(const RealScalar& prec) const\n{\n  RealScalar maxAbsOnUpperPart = static_cast<RealScalar>(-1);\n  for(Index j = 0; j < cols(); ++j)\n  {\n    Index maxi = numext::mini(j, rows()-1);\n    for(Index i = 0; i <= maxi; ++i)\n    {\n      RealScalar absValue = numext::abs(coeff(i,j));\n      if(absValue > maxAbsOnUpperPart) maxAbsOnUpperPart = absValue;\n    }\n  }\n  RealScalar threshold = maxAbsOnUpperPart * prec;\n  for(Index j = 0; j < cols(); ++j)\n    for(Index i = j+1; i < rows(); ++i)\n      if(numext::abs(coeff(i, j)) > threshold) return false;\n  return true;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "MatrixBase<Derived>::isUpperTriangular", "index": 2701, "label": 0}
{"input": "NdArray<std::complex<double>> var(const NdArray<std::complex<dtype>>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_ARITHMETIC(dtype);\n\n        NdArray<std::complex<double>> stdValues = stdev(inArray, inAxis);\n        const auto                    function  = [](std::complex<double>& value) -> void { value *= value; };\n\n        stl_algorithms::for_each(stdValues.begin(), stdValues.end(), function);\n        return stdValues;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/var.hpp", "function_name": "var", "index": 2702, "label": 0}
{"input": "std::size_t numSecdedParityBitsNeeded(IntType numDataBits)\n        {\n            const auto n               = nextPowerOfTwo(numDataBits);\n            const auto lowerBin        = static_cast<std::size_t>(std::floor(std::log2(n)));\n            const auto upperBin        = lowerBin + 1;\n            const auto dataBitBoundary = n - lowerBin - 1;\n            const auto numParityBits   = numDataBits <= dataBitBoundary ? lowerBin + 1 : upperBin + 1;\n\n            if (!isPowerOfTwo(numParityBits + numDataBits))\n            {\n                throw std::runtime_error(\"input number of data bits is not a valid Hamming SECDED code configuration.\");\n            }\n\n            return numParityBits;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/hammingEncode.hpp", "function_name": "numSecdedParityBitsNeeded", "index": 2703, "label": 0}
{"input": "Spotpear_ESP32_S3_1_28_BOX() : boot_button_(BOOT_BUTTON_GPIO) {\n\n        gpio_set_direction(TP_PIN_NUM_TP_INT, GPIO_MODE_INPUT);\n        int level = gpio_get_level(TP_PIN_NUM_TP_INT);\n        if (level == 1) {\n            InitializeCodecI2c_Touch();\n            InitializeCst816DTouchPad();\n        }\n        InitializePowerSaveTimer();\n        InitializeCodecI2c();\n        InitializeSpi();\n        InitializeGc9a01Display();\n        InitializeButtons();\n        InitializeIot();\n        GetBacklight()->RestoreBrightness();\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "34a77f75dfc1135c48acf5f95440a79dea4a4e72", "file_path": "main/boards/sp-esp32-s3-1.28-box/sp-esp32-s3-1.28-box.cc", "function_name": "Spotpear_ESP32_S3_1_28_BOX", "index": 2704, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const CwiseSqrtReturnType\ncwiseSqrt() const { return CwiseSqrtReturnType(derived()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h", "function_name": "CwiseSqrtReturnType\ncwiseSqrt", "index": 2705, "label": 0}
{"input": "static std::string bytesToStringRepr(size_t value)\n{\n    size_t b = value % 1024;\n    value /= 1024;\n\n    size_t kb = value % 1024;\n    value /= 1024;\n\n    size_t mb = value % 1024;\n    value /= 1024;\n\n    size_t gb = value;\n\n    std::ostringstream stream;\n\n    if (gb > 0)\n        stream << gb << \" GB \";\n    if (mb > 0)\n        stream << mb << \" MB \";\n    if (kb > 0)\n        stream << kb << \" KB \";\n    if (b > 0)\n        stream << b << \" B\";\n\n    std::string s = stream.str();\n    if (s[s.size() - 1] == ' ')\n        s = s.substr(0, s.size() - 1);\n    return s;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/opencl_info.hpp", "function_name": "bytesToStringRepr", "index": 2706, "label": 0}
{"input": "inline void Value::GetStringTensorElement(size_t buffer_length, size_t element_index, void* buffer) const {\n  ThrowOnError(GetApi().GetStringTensorElement(p_, buffer_length, element_index, buffer));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetStringTensorElement", "index": 2707, "label": 0}
{"input": "void signed_integer_type_tests(const MatrixType& m)\n{\n  typedef typename MatrixType::Scalar Scalar;\n\n  enum { is_signed = (Scalar(-1) > Scalar(0)) ? 0 : 1 };\n  VERIFY(is_signed == 1);\n\n  Index rows = m.rows();\n  Index cols = m.cols();\n\n  MatrixType m1(rows, cols),\n             m2 = MatrixType::Random(rows, cols),\n             mzero = MatrixType::Zero(rows, cols);\n\n  do {\n    m1 = MatrixType::Random(rows, cols);\n  } while(m1 == mzero || m1 == m2);\n\n  \n\n  Scalar s1;\n  do {\n    s1 = internal::random<Scalar>();\n  } while(s1 == 0);\n\n  VERIFY_IS_EQUAL(-(-m1),                  m1);\n  VERIFY_IS_EQUAL(-m2+m1+m2,               m1);\n  VERIFY_IS_EQUAL((-m1+m2)*s1,             -s1*m1+s1*m2);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/integer_types.cpp", "function_name": "signed_integer_type_tests", "index": 2708, "label": 0}
{"input": "inline bool operator != (const GBackend &lhs, const GBackend &rhs)\n    {\n        return !(lhs == rhs);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gkernel.hpp", "function_name": "operator !=", "index": 2709, "label": 0}
{"input": "void wrap_span_typed(SbsWriter& writer, std::string name,\n                     py::array_t<float> data, gcpp::Type type,\n                     gcpp::TensorInfo tensor_info, float scale) {\n  if (data.ndim() != 1 || data.strides(0) != sizeof(float)) {\n    throw std::domain_error(\"Input array must be 1D and densely packed.\");\n  }\n  std::invoke(Func, writer, name, absl::MakeSpan(data.data(0), data.size()),\n              type, tensor_info, scale);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "e69bc3bc1c5e9b478662437a3bf7c9a0d9d2eace", "file_path": "compression/python/compression_extension.cc", "function_name": "wrap_span_typed", "index": 2710, "label": 0}
{"input": "bool Contains(size_t detected, size_t idx) const {\n    return Begin() <= idx && idx < End(detected);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/topology.h", "function_name": "detected", "index": 2711, "label": 0}
{"input": "esp_err_t SetLedColor(uint8_t r, uint8_t g, uint8_t b) {\n        esp_err_t ret = ESP_OK;\n\n        ret |= led_strip_set_pixel(led_strip_, 0, r, g, b);\n        ret |= led_strip_set_pixel(led_strip_, 1, r, g, b);\n        ret |= led_strip_set_pixel(led_strip_, 2, r, g, b);\n        ret |= led_strip_set_pixel(led_strip_, 3, r, g, b);\n        ret |= led_strip_refresh(led_strip_);\n        return ret;\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "bfc695b1eec27d16bee909416397d117a2486d46", "file_path": "main/boards/esp-hi/esp_hi.cc", "function_name": "r", "index": 2712, "label": 0}
{"input": "Vec3(const NdArray<double>& ndArray)\n        {\n            if (ndArray.size() != 3)\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"input NdArray must have a size = 3\");\n            }\n\n            x = ndArray[0];\n            y = ndArray[1];\n            z = ndArray[2];\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Vector/Vec3.hpp", "function_name": "Vec3", "index": 2713, "label": 0}
{"input": "GOCVFunctor(const char* id, const Meta &meta, const Impl& impl)\n        : gapi::GFunctor(id), impl_{GCPUKernel(impl), meta}\n    {\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/cpu/gcpukernel.hpp", "function_name": "GOCVFunctor", "index": 2714, "label": 0}
{"input": "void TestRecompiler::Analyse(const std::string_view& testName)\n{\n    for (const auto& section : image.sections)\n    {\n        if (!(section.flags & SectionFlags_Code))\n        {\n            continue;\n        }\n        size_t base = section.base;\n        uint8_t* data = section.data;\n        uint8_t* dataEnd = section.data + section.size;\n\n        while (data < dataEnd)\n        {\n            if (*(uint32_t*)data == 0)\n            {\n                data += 4;\n                base += 4;\n                continue;\n            }\n\n            auto& fn = functions.emplace_back(Function::Analyze(data, dataEnd - data, base));\n            image.symbols.emplace(fmt::format(\"{}_{:X}\", testName, fn.base), fn.base, fn.size, Symbol_Function);\n            \n            base += fn.size;\n            data += fn.size;\n        }\n    }\n\n    std::sort(functions.begin(), functions.end(), [](auto& lhs, auto& rhs) { return lhs.base < rhs.base; });\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "847842cd28a2427b9db520d2aaa7416e5dec3822", "file_path": "PowerRecomp/test_recompiler.cpp", "function_name": "TestRecompiler::Analyse", "index": 2715, "label": 0}
{"input": "typename enable_if<Rhs::ColsAtCompileTime==1 || Dest::ColsAtCompileTime==1>::type\nsolve_sparse_through_dense_panels(const Decomposition &dec, const Rhs& rhs, Dest &dest)\n{\n  typedef typename Dest::Scalar DestScalar;\n  Index size = rhs.rows();\n  Eigen::Matrix<DestScalar,Dynamic,1> rhs_dense(rhs);\n  Eigen::Matrix<DestScalar,Dynamic,1> dest_dense(size);\n  dest_dense = dec.solve(rhs_dense);\n  dest = dest_dense.sparseView();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseSolverBase.h", "function_name": "solve_sparse_through_dense_panels", "index": 2716, "label": 0}
{"input": "static __device__ __forceinline__ void yota(OutIt beg, OutIt end, T value)\n        {\n            unsigned int lane = laneId();\n            value += lane;\n\n            for(OutIt t = beg + lane; t < end; t += STRIDE, value += STRIDE)\n                *t = value;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/warp.hpp", "function_name": "yota", "index": 2717, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    const typename ReduxReturnType<BinaryOp>::Type\n    redux(const BinaryOp& func = BinaryOp()) const\n    { return typename ReduxReturnType<BinaryOp>::Type(_expression(), internal::member_redux<BinaryOp,Scalar>(func)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/VectorwiseOp.h", "function_name": "redux", "index": 2718, "label": 0}
{"input": "const internal::triangular_solve_retval<Side,TriangularView<Derived,Mode>,Other>\nTriangularViewImpl<Derived,Mode,Dense>::solve(const MatrixBase<Other>& other) const\n{\n  return internal::triangular_solve_retval<Side,TriangularViewType,Other>(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/SolveTriangular.h", "function_name": "TriangularViewImpl<Derived,Mode,Dense>::solve", "index": 2719, "label": 0}
{"input": "static int hf3fs_usrbio_init(struct thread_data *td) {\n    td->io_ops_data = static_cast<void *>(new hf3fs_usrbio_data);\n    struct hf3fs_usrbio_options *options = td->eo;\n\n    auto &ior_r = static_cast<hf3fs_usrbio_data *>(td->io_ops_data)->ior_r;\n    auto res = hf3fs_iorcreate3(&ior_r, options->mountpoint, td->o.iodepth, true, options->ior_depth, 0, options->ior_timeout, -1);\n    if (res < 0) {\n        return res;\n    }\n\n    auto &ior_w = static_cast<hf3fs_usrbio_data *>(td->io_ops_data)->ior_w;\n    res = hf3fs_iorcreate(&ior_w, options->mountpoint, td->o.iodepth, false, options->ior_depth, -1);\n    if (res < 0) {\n        return res;\n    }\n\n    auto *data = static_cast<hf3fs_usrbio_data *>(td->io_ops_data);\n    data->io_us.resize(td->o.iodepth);\n    data->queued = 0;\n    data->events = 0;\n\n    return 0;\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "799b9a5d2f714c9d11c1599c8015a0224b7560cb", "file_path": "benchmarks/fio_usrbio/hf3fs_usrbio.cpp", "function_name": "hf3fs_usrbio_init", "index": 2720, "label": 0}
{"input": "inline _Tpvec v_rotate_right(const _Tpvec &a, const _Tpvec &b)\n{\n    using namespace hal_wasm_internal;\n    enum { imm2 = (imm * sizeof(typename _Tpvec::lane_type)) };\n    return _Tpvec(v_wasm_palignr_u8<imm2>(a.val, b.val));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_rotate_right", "index": 2721, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b)\n{\n  Packet4f res;\n  res.v4f[0] = pmin(a.v4f[0], b.v4f[0]);\n  res.v4f[1] = pmin(a.v4f[1], b.v4f[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pmin", "index": 2722, "label": 0}
{"input": "void AudioTrackJni::stop() {\n    bool attach = JniHelper::attachCurrentThread();\n    if (audioTrackObj != nullptr && audioTrackStop != nullptr) {\n        JniHelper::callVoidMethod(audioTrackObj, audioTrackStop);\n    }\n    if (attach) {\n        JniHelper::detachCurrentThread();\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/AudioTrackJni.cpp", "function_name": "AudioTrackJni::stop", "index": 2723, "label": 0}
{"input": "void real_2x2_jacobi_svd(const MatrixType& matrix, Index p, Index q,\n                         JacobiRotation<RealScalar> *j_left,\n                         JacobiRotation<RealScalar> *j_right)\n{\n  using std::sqrt;\n  using std::abs;\n  Matrix<RealScalar,2,2> m;\n  m << numext::real(matrix.coeff(p,p)), numext::real(matrix.coeff(p,q)),\n       numext::real(matrix.coeff(q,p)), numext::real(matrix.coeff(q,q));\n  JacobiRotation<RealScalar> rot1;\n  RealScalar t = m.coeff(0,0) + m.coeff(1,1);\n  RealScalar d = m.coeff(1,0) - m.coeff(0,1);\n\n  if(abs(d) < (std::numeric_limits<RealScalar>::min)())\n  {\n    rot1.s() = RealScalar(0);\n    rot1.c() = RealScalar(1);\n  }\n  else\n  {\n    \n    \n    RealScalar u = t / d;\n    RealScalar tmp = sqrt(RealScalar(1) + numext::abs2(u));\n    rot1.s() = RealScalar(1) / tmp;\n    rot1.c() = u / tmp;\n  }\n  m.applyOnTheLeft(0,1,rot1);\n  j_right->makeJacobi(m,0,1);\n  *j_left = rot1 * j_right->transpose();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/misc/RealSvd2x2.h", "function_name": "real_2x2_jacobi_svd", "index": 2724, "label": 0}
{"input": "inline int sinh_cosh(mpreal& s, mpreal& c, const mpreal& v, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    return mpfr_sinh_cosh(s.mp,c.mp,v.mp,rnd_mode);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "sinh_cosh", "index": 2725, "label": 0}
{"input": "static Matrixcf stft(Vectorf &x, int n_fft, int n_hop, const std::string &win, bool center, const std::string &mode){\n  \n  Vectorf window = 0.5*(1.f-(Vectorf::LinSpaced(n_fft, 0.f, static_cast<float>(n_fft-1))*2.f*M_PI/n_fft).array().cos());\n\n  int pad_len = center ? n_fft / 2 : 0;\n  Vectorf x_paded = pad(x, pad_len, pad_len, mode, 0.f);\n\n  int n_f = n_fft/2+1;\n  int n_frames = 1+(x_paded.size()-n_fft) / n_hop;\n  Matrixcf X(n_frames, n_fft);\n  Eigen::FFT<float> fft;\n\n  for (int i = 0; i < n_frames; ++i){\n    Vectorf x_frame = window.array()*x_paded.segment(i*n_hop, n_fft).array();\n    X.row(i) = fft.fwd(x_frame);\n  }\n  return X.leftCols(n_f);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/librosa.h", "function_name": "stft", "index": 2726, "label": 0}
{"input": "void ForRangeMC(const IndexRange& range_mc, size_t pkg_idx,\n                  const Func& func) {\n    pools_.Pool(pkg_idx).Run(\n        range_mc.begin(), range_mc.end(),\n        [&](uint64_t row_a, size_t ) { func(row_a); });\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "ForRangeMC", "index": 2727, "label": 0}
{"input": "NdArray<dtype> vstack(std::vector<NdArray<dtype>> inArrayList)\n    {\n        return detail::row_stack<dtype>(inArrayList.begin(), inArrayList.end());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/vstack.hpp", "function_name": "vstack", "index": 2728, "label": 0}
{"input": "void RawTextElement::SetAttributeInternal(const base::String& key,\n                                          const lepus::Value& value) {\n  if (EnableLayoutInElementMode()) {\n    \n    if (key.IsEqual(kTextAttr)) {\n      content_ = value.String();\n      return;\n    }\n  }\n  FiberElement::SetAttributeInternal(key, value);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "ff3d1a5ec243e04fc83365c13d15653a8aabb4df", "file_path": "core/renderer/dom/fiber/raw_text_element.cc", "function_name": "RawTextElement::SetAttributeInternal", "index": 2729, "label": 0}
{"input": "BoundedTopology::BoundedTopology(BoundedSlice package_slice,\n                                 BoundedSlice cluster_slice,\n                                 BoundedSlice lp_slice) {\n  const LPS enabled_lps = GetPinning().EnabledLPs(lp_slice);\n\n#if !GEMMA_DISABLE_TOPOLOGY\n  if (HWY_LIKELY(!topology_.packages.empty())) {\n    InitFromTopology(enabled_lps, package_slice, cluster_slice);\n  }\n#endif\n\n  \n  \n  if (HWY_UNLIKELY(NumPackages() == 0)) {\n    InitFromLPs(enabled_lps);\n  }\n\n  HWY_ASSERT(NumPackages() != 0 && NumClusters(0) != 0 && NumNodes() != 0);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a248f7624546eb6be80e52eaee5d03e03bded7a6", "file_path": "util/threading.cc", "function_name": "BoundedTopology::BoundedTopology", "index": 2730, "label": 0}
{"input": "inline void realRoots( Stl_back_insertion_sequence& bi_seq,\n        const RealScalar& absImaginaryThreshold = NumTraits<Scalar>::dummy_precision() ) const\n    {\n      using std::abs;\n      bi_seq.clear();\n      for(Index i=0; i<m_roots.size(); ++i )\n      {\n        if( abs( m_roots[i].imag() ) < absImaginaryThreshold ){\n          bi_seq.push_back( m_roots[i].real() ); }\n      }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h", "function_name": "realRoots", "index": 2731, "label": 0}
{"input": "void find_partition_with_efficiency_higher_than(\n       const vector<preprocessed_inputfile_t>& preprocessed_inputfiles,\n       float required_efficiency_to_beat,\n       vector<vector<size_t>>& out_partition)\n{\n  out_partition.resize(0);\n\n  vector<size_t> remainder;\n  for (size_t i = 0; i < preprocessed_inputfiles.size(); i++) {\n    remainder.push_back(i);\n  }\n\n  while (!remainder.empty()) {\n    vector<size_t> new_subset;\n    find_subset_with_efficiency_higher_than(\n      preprocessed_inputfiles,\n      required_efficiency_to_beat,\n      remainder,\n      new_subset);\n    out_partition.push_back(new_subset);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "find_partition_with_efficiency_higher_than", "index": 2732, "label": 0}
{"input": "void TriangularViewImpl<MatrixType, Mode, Dense>::lazyAssign(const TriangularBase<OtherDerived>& other)\n{\n  eigen_assert(Mode == int(OtherDerived::Mode));\n  internal::call_assignment_no_alias(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "TriangularViewImpl<MatrixType, Mode, Dense>::lazyAssign", "index": 2733, "label": 0}
{"input": "inline\ntypename NumTraits<typename Polynomial::Scalar>::Real cauchy_min_bound( const Polynomial& poly )\n{\n  using std::abs;\n  typedef typename Polynomial::Scalar Scalar;\n  typedef typename NumTraits<Scalar>::Real Real;\n\n  DenseIndex i=0;\n  while( i<poly.size()-1 && Scalar(0) == poly(i) ){ ++i; }\n  if( poly.size()-1 == i ){\n    return Real(1); }\n\n  const Scalar inv_min_coeff = Scalar(1)/poly[i];\n  Real cb(1);\n  for( DenseIndex j=i+1; j<poly.size(); ++j ){\n    cb += abs(poly[j]*inv_min_coeff); }\n  return Real(1)/cb;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h", "function_name": "cauchy_min_bound", "index": 2734, "label": 0}
{"input": "inline std::pair<std::string, std::string>\nmake_bearer_token_authentication_header(const std::string &token,\n                                        bool is_proxy = false) {\n  auto field = \"Bearer \" + token;\n  auto key = is_proxy ? \"Proxy-Authorization\" : \"Authorization\";\n  return std::make_pair(key, std::move(field));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "make_bearer_token_authentication_header", "index": 2735, "label": 0}
{"input": "EIGEN_DONT_INLINE void LU_kernel_bmod<1>::run(const Index , BlockScalarVector& dense, ScalarVector& , ScalarVector& lusup, Index& luptr,\n                                              const Index lda, const Index nrow, IndexVector& lsub, const Index lptr, const Index no_zeros)\n{\n  typedef typename ScalarVector::Scalar Scalar;\n  typedef typename IndexVector::Scalar StorageIndex;\n  Scalar f = dense(lsub(lptr + no_zeros));\n  luptr += lda * no_zeros + no_zeros + 1;\n  const Scalar* a(lusup.data() + luptr);\n  const StorageIndex*  irow(lsub.data()+lptr + no_zeros + 1);\n  Index i = 0;\n  for (; i+1 < nrow; i+=2)\n  {\n    Index i0 = *(irow++);\n    Index i1 = *(irow++);\n    Scalar a0 = *(a++);\n    Scalar a1 = *(a++);\n    Scalar d0 = dense.coeff(i0);\n    Scalar d1 = dense.coeff(i1);\n    d0 -= f*a0;\n    d1 -= f*a1;\n    dense.coeffRef(i0) = d0;\n    dense.coeffRef(i1) = d1;\n  }\n  if(i<nrow)\n    dense.coeffRef(*(irow++)) -= f * *(a++);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseLU/SparseLU_kernel_bmod.h", "function_name": "LU_kernel_bmod<1>::run", "index": 2736, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nstd::complex<float> RandomToTypeNormal<std::complex<float> >(uint64_t* state) {\n  return std::complex<float>(RandomToTypeNormal<float>(state),\n                             RandomToTypeNormal<float>(state));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "EIGEN_STRONG_INLINE\nstd::complex<float> RandomToTypeNormal<std::complex<float> >", "index": 2737, "label": 0}
{"input": "inline TypeInfo Value::GetTypeInfo() const {\n  OrtTypeInfo* output;\n  ThrowOnError(GetApi().GetTypeInfo(p_, &output));\n  return TypeInfo{output};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "Value::GetTypeInfo", "index": 2738, "label": 0}
{"input": "Quat<T> Quat<T>::createFromYRot(const T theta)\n{\n    return Quat<T>{std::cos(theta * 0.5f), 0, std::sin(theta * 0.5f), 0};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::createFromYRot", "index": 2739, "label": 0}
{"input": "inline gzip_compressor::gzip_compressor() {\n  std::memset(&strm_, 0, sizeof(strm_));\n  strm_.zalloc = Z_NULL;\n  strm_.zfree = Z_NULL;\n  strm_.opaque = Z_NULL;\n\n  is_valid_ = deflateInit2(&strm_, Z_DEFAULT_COMPRESSION, Z_DEFLATED, 31, 8,\n                           Z_DEFAULT_STRATEGY) == Z_OK;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "gzip_compressor::gzip_compressor", "index": 2740, "label": 0}
{"input": "unsigned long FrameSource::pushVidRecyle(JMat *frame) {\n    if(!frame)return 0;\n    return videoRecyleQueue->push(frame);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/FrameSource.cpp", "function_name": "FrameSource::pushVidRecyle", "index": 2741, "label": 0}
{"input": "inline tensor_symmetry_value_setter(Tensor_& tensor, Symmetry_ const& symmetry, std::array<Index, NumIndices> const& indices)\n      : m_tensor(tensor), m_symmetry(symmetry), m_indices(indices) { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/Symmetry.h", "function_name": "tensor_symmetry_value_setter", "index": 2742, "label": 0}
{"input": "inline\nScalar_<_Tp> Scalar_<_Tp>::mul(const Scalar_<_Tp>& a, double scale ) const\n{\n    return Scalar_<_Tp>(saturate_cast<_Tp>(this->val[0] * a.val[0] * scale),\n                        saturate_cast<_Tp>(this->val[1] * a.val[1] * scale),\n                        saturate_cast<_Tp>(this->val[2] * a.val[2] * scale),\n                        saturate_cast<_Tp>(this->val[3] * a.val[3] * scale));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Scalar_<_Tp>::mul", "index": 2743, "label": 0}
{"input": "MaxSizeVector(size_t n, const T& init)\n      : reserve_(n), size_(n),\n        data_(static_cast<T*>(internal::aligned_malloc(n * sizeof(T)))) {\n    for (size_t i = 0; i < n; ++i) { new (&data_[i]) T(init); }\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/MaxSizeVector.h", "function_name": "MaxSizeVector", "index": 2744, "label": 0}
{"input": "void test_add() {\n  uint64_t incr = internal::random<uint64_t>(1, 9999999999);\n  for (uint64_t i1 = 0; i1 < 100; ++i1) {\n    for (uint64_t i2 = 1; i2 < 100 * incr; i2 += incr) {\n      TensorUInt128<uint64_t, uint64_t> i(i1, i2);\n      uint128_t a = (static_cast<uint128_t>(i1) << 64) + static_cast<uint128_t>(i2);\n      for (uint64_t j1 = 0; j1 < 100; ++j1) {\n        for (uint64_t j2 = 1; j2 < 100 * incr; j2 += incr) {\n          TensorUInt128<uint64_t, uint64_t> j(j1, j2);\n          uint128_t b = (static_cast<uint128_t>(j1) << 64) + static_cast<uint128_t>(j2);\n          TensorUInt128<uint64_t, uint64_t> actual = i + j;\n          uint128_t expected = a + b;\n          VERIFY_EQUAL(actual, expected);\n        }\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_uint128.cpp", "function_name": "test_add", "index": 2745, "label": 0}
{"input": "inline\nvoid StereographicProjector::mapForward(float x, float y, float &u, float &v)\n{\n    float x_ = r_kinv[0] * x + r_kinv[1] * y + r_kinv[2];\n    float y_ = r_kinv[3] * x + r_kinv[4] * y + r_kinv[5];\n    float z_ = r_kinv[6] * x + r_kinv[7] * y + r_kinv[8];\n\n    float u_ = atan2f(x_, z_);\n    float v_ = (float)CV_PI - acosf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));\n\n    float r = sinf(v_) / (1 - cosf(v_));\n\n    u = scale * r * std::cos(u_);\n    v = scale * r * std::sin(u_);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "StereographicProjector::mapForward", "index": 2746, "label": 0}
{"input": "void variant<Ts...>::swap(variant<Ts...> &rhs) noexcept\n    {\n        if (m_index == rhs.index())\n        {\n            (swprs()[m_index](memory, rhs.memory));\n        }\n        else\n        {\n            variant<Ts...> tmp(std::move(*this));\n            *this = std::move(rhs);\n            rhs   = std::move(tmp);\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/variant.hpp", "function_name": "variant<Ts...>::swap", "index": 2747, "label": 0}
{"input": "void GenerateSingle(  \n    GEMMA_TYPE, const ModelWeightsStorage& model,\n    const RuntimeConfig& runtime_config, const PromptTokens& prompt, size_t pos,\n    size_t prefix_end, KVCache& kv_cache, MatMulEnv* env,\n    TimingInfo& timing_info) {\n  HWY_EXPORT_AND_DYNAMIC_DISPATCH_T(GenerateSingleT<GEMMA_TYPE>)\n  (model, runtime_config, prompt, pos, prefix_end, kv_cache, env, timing_info);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "gemma/gemma-inl.h", "function_name": "GenerateSingle", "index": 2748, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_startgpg(JNIEnv *env, jobject thiz, jstring picfn,jstring gpgfn){\n            std::string s_pic = getStringUTF(env,picfn);\n            std::string s_gpg = getStringUTF(env,gpgfn);\n            if(!g_gpgmat)g_gpgmat = new JMat();\n            int rst = g_gpgmat->loadjpg(s_pic);\n            if(rst)return rst;\n            rst = g_gpgmat->savegpg(s_gpg);\n            return rst;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_startgpg", "index": 2749, "label": 0}
{"input": "inline v_float64 v_select(const v_float64& mask, const v_float64& a, const v_float64& b) \\\n{ \\\n    return vmerge(vmfne(mask, 0, VTraits<v_float64>::vlanes()), b, a, VTraits<v_float64>::vlanes()); \\\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv_scalable.hpp", "function_name": "v_select", "index": 2750, "label": 0}
{"input": "inline const mpreal expm1   (const mpreal& x, mp_rnd_t r = mpreal::get_default_rnd()) {   MPREAL_UNARY_MATH_FUNCTION_BODY(expm1  );    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "expm1", "index": 2751, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b)\n{\n  Packet4f res;\n  res.v4f[0] = pand(a.v4f[0], b.v4f[0]);\n  res.v4f[1] = pand(a.v4f[1], b.v4f[1]);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pand", "index": 2752, "label": 0}
{"input": "T test_relative_error(const AlignedVector3<T> &a, const MatrixBase<Derived> &b)\n{\n  return test_relative_error(a.coeffs().template head<3>(), b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/alignedvector3.cpp", "function_name": "test_relative_error", "index": 2753, "label": 0}
{"input": "void compare_using_data_and_stride(const MatrixType& m)\n{\n  Index rows = m.rows();\n  Index cols = m.cols();\n  Index size = m.size();\n  Index innerStride = m.innerStride();\n  Index outerStride = m.outerStride();\n  Index rowStride = m.rowStride();\n  Index colStride = m.colStride();\n  const typename MatrixType::Scalar* data = m.data();\n\n  for(int j=0;j<cols;++j)\n    for(int i=0;i<rows;++i)\n      VERIFY(m.coeff(i,j) == data[i*rowStride + j*colStride]);\n\n  if(!MatrixType::IsVectorAtCompileTime)\n  {\n    for(int j=0;j<cols;++j)\n      for(int i=0;i<rows;++i)\n        VERIFY(m.coeff(i,j) == data[(MatrixType::Flags&RowMajorBit)\n                                     ? i*outerStride + j*innerStride\n                                     : j*outerStride + i*innerStride]);\n  }\n\n  if(MatrixType::IsVectorAtCompileTime)\n  {\n    VERIFY(innerStride == int((&m.coeff(1))-(&m.coeff(0))));\n    for (int i=0;i<size;++i)\n      VERIFY(m.coeff(i) == data[i*innerStride]);\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/block.cpp", "function_name": "compare_using_data_and_stride", "index": 2754, "label": 0}
{"input": "void Otto::Home(bool hands_down) {\n    if (is_otto_resting_ == false) {  \n        \n        int homes[SERVO_COUNT];\n        for (int i = 0; i < SERVO_COUNT; i++) {\n            if (i == LEFT_HAND || i == RIGHT_HAND) {\n                if (hands_down) {\n                    \n                    if (i == LEFT_HAND) {\n                        homes[i] = HAND_HOME_POSITION;\n                    } else {                                  \n                        homes[i] = 180 - HAND_HOME_POSITION;  \n                    }\n                } else {\n                    \n                    homes[i] = servo_[i].GetPosition();\n                }\n            } else {\n                \n                homes[i] = 90;\n            }\n        }\n\n        MoveServos(500, homes);\n        is_otto_resting_ = true;\n    }\n\n    vTaskDelay(pdMS_TO_TICKS(200));\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::Home", "index": 2755, "label": 0}
{"input": "vint16mf2_t(const short* ptr)\n    {\n        for (int i = 0; i < 4; ++i)\n        {\n            val[i] = ptr[i];\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv.hpp", "function_name": "vint16mf2_t", "index": 2756, "label": 0}
{"input": "JNIEXPORT jint JNICALL Java_com_btows_ncnntest_SCRFDNcnn_mskrstbuf(JNIEnv* env, jobject thiz,jstring picfile, jstring mskfile,jintArray arrbox, jint index,jstring fgfile,jbyteArray arrbuf,jbyteArray mskbuf,jint bufsize){\n        std::string s_pic = getStringUTF(env,picfile);\n        std::string s_msk = getStringUTF(env,mskfile);\n        std::string s_fg = getStringUTF(env,fgfile);\n        jint *boxData = (jint*) env->GetIntArrayElements( arrbox, NULL);\n        jbyte *pixels = (jbyte *) env->GetPrimitiveArrayCritical(arrbuf, 0);\n        jbyte *pmsk = (jbyte *) env->GetPrimitiveArrayCritical(mskbuf, 0);\n        int size = bufsize;\n        int rst =  g_digit->mskrstbuf(index,s_pic.c_str(),(int*)boxData,s_msk.c_str(),s_fg.c_str(),(char*) pixels,(char*)pmsk,size);\n        env->ReleasePrimitiveArrayCritical(arrbuf, pixels, 0);\n        env->ReleasePrimitiveArrayCritical(mskbuf, pmsk, 0);\n        env->ReleaseIntArrayElements( arrbox, boxData, 0);\n        return rst;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_mskrstbuf", "index": 2757, "label": 0}
{"input": "void Camera::localTranslate(const Vector3f& t)\n{\n  Vector3f trans = orientation() * t;\n  setPosition( position() + trans );\n  setTarget( mTarget + trans );\n\n  mViewIsUptodate = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::localTranslate", "index": 2758, "label": 0}
{"input": "inline\ncv::Affine3<T>::operator Eigen::Transform<T, 3, Eigen::Affine>() const\n{\n    return this->operator Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/affine.hpp", "function_name": "Eigen::Transform<T, 3, Eigen::Affine>", "index": 2759, "label": 0}
{"input": "inline void default_socket_options(socket_t sock) {\n  int yes = 1;\n#ifdef _WIN32\n  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,\n             reinterpret_cast<const char *>(&yes), sizeof(yes));\n  setsockopt(sock, SOL_SOCKET, SO_EXCLUSIVEADDRUSE,\n             reinterpret_cast<const char *>(&yes), sizeof(yes));\n#else\n#ifdef SO_REUSEPORT\n  setsockopt(sock, SOL_SOCKET, SO_REUSEPORT,\n             reinterpret_cast<const void *>(&yes), sizeof(yes));\n#else\n  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,\n             reinterpret_cast<const void *>(&yes), sizeof(yes));\n#endif\n#endif\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "default_socket_options", "index": 2760, "label": 0}
{"input": "EIGEN_DEVICE_FUNC void Transform<Scalar,Dim,Mode,Options>::computeScalingRotation(ScalingMatrixType *scaling, RotationMatrixType *rotation) const\n{\n  JacobiSVD<LinearMatrixType> svd(linear(), ComputeFullU | ComputeFullV);\n\n  Scalar x = (svd.matrixU() * svd.matrixV().adjoint()).determinant(); \n  VectorType sv(svd.singularValues());\n  sv.coeffRef(0) *= x;\n  if(scaling) scaling->lazyAssign(svd.matrixU() * sv.asDiagonal() * svd.matrixU().adjoint());\n  if(rotation)\n  {\n    LinearMatrixType m(svd.matrixU());\n    m.col(0) /= x;\n    rotation->lazyAssign(m * svd.matrixV().adjoint());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Transform.h", "function_name": "Transform<Scalar,Dim,Mode,Options>::computeScalingRotation", "index": 2761, "label": 0}
{"input": "unsigned long MessageSource::readMessage(Message **message) {\n    unsigned long size = msgQueue->front(message);\n    return size;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/base/MessageSource.cpp", "function_name": "MessageSource::readMessage", "index": 2762, "label": 0}
{"input": "auto airy_ai_prime(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(airy_ai_prime(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return airy_ai_prime(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/airy_ai_prime.hpp", "function_name": "airy_ai_prime", "index": 2763, "label": 0}
{"input": "void findNeighborNotXcds(const Pixel<dtype>& inPixel, std::vector<Pixel<dtype>>& outNeighbors)\n        {\n            std::set<Pixel<dtype>> neighbors;\n            findNeighbors(inPixel, neighbors);\n\n            \n            for (auto& pixel : neighbors)\n            {\n                if (!xcds_->operator()(pixel.row, pixel.col))\n                {\n                    outNeighbors.push_back(pixel);\n                }\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/ImageProcessing/ClusterMaker.hpp", "function_name": "std::vector<Pixel<dtype>>", "index": 2764, "label": 0}
{"input": "String OffscreenCanvasRenderingContext2D::filter() const\n{\n    dbgln(\"(STUBBED) OffscreenCanvasRenderingContext2D::filter()\");\n    return String::from_utf8_without_validation(\"none\"sv.bytes());\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::filter", "index": 2765, "label": 0}
{"input": "int  GhMat::resize(GpMat mat,void* stream){\n    if(m_dev!=mat->m_dev)return -1;\n    ppl::cv::cuda::Resize<float, 3>((cudaStream_t)stream,m_height,m_width,m_stride,(float*)m_buf, mat->m_height, mat->m_width, mat->m_stride, (float*)mat->m_buf);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/cuda/kmatcuda.cpp", "function_name": "GhMat::resize", "index": 2766, "label": 0}
{"input": "vint8mf2_t(const schar* ptr)\n    {\n        for (int i = 0; i < 8; ++i)\n        {\n            val[i] = ptr[i];\n        }\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_rvv.hpp", "function_name": "vint8mf2_t", "index": 2767, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void butterfly_2(ComplexScalar* data) {\n    ComplexScalar tmp = data[1];\n    data[1] = data[0] - data[1];\n    data[0] += tmp;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h", "function_name": "butterfly_2", "index": 2768, "label": 0}
{"input": "std::vector<MMConfig> MMCandidates(size_t M, size_t K, size_t N, size_t max_mr,\n                                   size_t nr,\n                                   const IndexRangePartition& ranges_np,\n                                   bool print_config) {\n  return GenerateCandidates(M, K, N, max_mr, nr, ranges_np, print_config)();\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.cc", "function_name": "MMCandidates", "index": 2769, "label": 0}
{"input": "constexpr inline decltype(reduce<product_op, Ts...>::run((*((Ts*)0))...)) arg_prod(Ts... ts)\n{\n  return reduce<product_op, Ts...>::run(ts...);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/CXX11Meta.h", "function_name": "arg_prod", "index": 2770, "label": 0}
{"input": "inline MatConstIterator MatConstIterator::operator ++(int)\n{\n    MatConstIterator b = *this;\n    *this += 1;\n    return b;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "MatConstIterator::operator ++", "index": 2771, "label": 0}
{"input": "inline _Tpvec v256_permute2x128(const _Tpvec& a, const _Tpvec& b)\n{ return _Tpvec(_v256_permute2x128<imm>(a.val, b.val)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_lasx.hpp", "function_name": "v256_permute2x128", "index": 2772, "label": 0}
{"input": "HierarchicalClusteringIndexParams(int branching = 32,\n                                      flann_centers_init_t centers_init = FLANN_CENTERS_RANDOM,\n                                      int trees = 4, int leaf_size = 100)\n    {\n        (*this)[\"algorithm\"] = FLANN_INDEX_HIERARCHICAL;\n        \n        (*this)[\"branching\"] = branching;\n        \n        (*this)[\"centers_init\"] = centers_init;\n        \n        (*this)[\"trees\"] = trees;\n        \n        (*this)[\"leaf_size\"] = leaf_size;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/hierarchical_clustering_index.h", "function_name": "HierarchicalClusteringIndexParams", "index": 2773, "label": 0}
{"input": "constexpr inline decltype(reduce<sum_op, Ts...>::run((*((Ts*)0))...)) arg_sum(Ts... ts)\n{\n  return reduce<sum_op, Ts...>::run(ts...);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/CXX11Meta.h", "function_name": "arg_sum", "index": 2774, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline typename ConstFixedSegmentReturnType<N>::Type tail(Index n = N) const\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return typename ConstFixedSegmentReturnType<N>::Type(derived(), size() - n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "tail", "index": 2775, "label": 0}
{"input": "CV_INLINE  void  cvmSet( CvMat* mat, int row, int col, double value )\n{\n    int type;\n    type = CV_MAT_TYPE(mat->type);\n    assert( (unsigned)row < (unsigned)mat->rows &&\n            (unsigned)col < (unsigned)mat->cols );\n\n    if( type == CV_32FC1 )\n        ((float*)(void*)(mat->data.ptr + (size_t)mat->step*row))[col] = (float)value;\n    else\n    {\n        assert( type == CV_64FC1 );\n        ((double*)(void*)(mat->data.ptr + (size_t)mat->step*row))[col] = value;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "cvmSet", "index": 2776, "label": 0}
{"input": "NdArray<bool> logical_and(const NdArray<dtype>& inArray1, const NdArray<dtype>& inArray2)\n    {\n        return inArray1 && inArray2;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/logical_and.hpp", "function_name": "logical_and", "index": 2777, "label": 0}
{"input": "bool parse_str_to_bool(const std::string & s) {\n    if (s == \"true\" || s == \"1\" || s == \"yes\" || s == \"y\") {\n        return true;\n    }\n    return false;\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/server.cpp", "function_name": "parse_str_to_bool", "index": 2778, "label": 0}
{"input": "Through(const VectorType& p0, const VectorType& p1)\n  { return ParametrizedLine(p0, (p1-p0).normalized()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/ParametrizedLine.h", "function_name": "Through", "index": 2779, "label": 0}
{"input": "static void test_dynamic_size()\n{\n  Eigen::DSizes<int, 3> dimensions(2,3,7);\n\n  VERIFY_IS_EQUAL((int)Eigen::internal::array_get<0>(dimensions), 2);\n  VERIFY_IS_EQUAL((int)Eigen::internal::array_get<1>(dimensions), 3);\n  VERIFY_IS_EQUAL((int)Eigen::internal::array_get<2>(dimensions), 7);\n  VERIFY_IS_EQUAL((int)dimensions.TotalSize(), 2*3*7);\n  VERIFY_IS_EQUAL((int)dimensions[0], 2);\n  VERIFY_IS_EQUAL((int)dimensions[1], 3);\n  VERIFY_IS_EQUAL((int)dimensions[2], 7);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_dimension.cpp", "function_name": "test_dynamic_size", "index": 2780, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& x, const Packet& a, const Packet& b) const\n  {\n    return internal::pbetainc(x, a, b);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsFunctors.h", "function_name": "packetOp", "index": 2781, "label": 0}
{"input": "void testLmdif()\n{\n  const int m=15, n=3;\n  int info;\n  double fnorm, covfac;\n  VectorXd x(n);\n\n  \n  x.setConstant(n, 1.);\n\n  \n  lmdif_functor functor;\n  NumericalDiff<lmdif_functor> numDiff(functor);\n  LevenbergMarquardt<NumericalDiff<lmdif_functor> > lm(numDiff);\n  info = lm.minimize(x);\n\n  \n  VERIFY_IS_EQUAL(info, 1);\n\n\n  \n  fnorm = lm.fvec().blueNorm();\n  VERIFY_IS_APPROX(fnorm, 0.09063596);\n\n  \n  VectorXd x_ref(n);\n  x_ref << 0.08241058, 1.133037, 2.343695;\n  VERIFY_IS_APPROX(x, x_ref);\n\n  \n  covfac = fnorm*fnorm/(m-n);\n  internal::covar(lm.matrixR(), lm.permutation().indices()); \n\n  MatrixXd cov_ref(n,n);\n  cov_ref <<\n      0.0001531202,   0.002869942,  -0.002656662,\n      0.002869942,    0.09480937,   -0.09098997,\n      -0.002656662,   -0.09098997,    0.08778729;\n\n\n\n  MatrixXd cov;\n  cov =  covfac*lm.matrixR().topLeftCorner<n,n>();\n  VERIFY_IS_APPROX( cov, cov_ref);\n  \n  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/levenberg_marquardt.cpp", "function_name": "testLmdif", "index": 2782, "label": 0}
{"input": "const MatrixLogarithmReturnValue<Derived> MatrixBase<Derived>::log() const\n{\n  eigen_assert(rows() == cols());\n  return MatrixLogarithmReturnValue<Derived>(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixLogarithm.h", "function_name": "MatrixBase<Derived>::log", "index": 2783, "label": 0}
{"input": "mapbase_evaluator(const XprType& map)\n    : m_data(const_cast<PointerType>(map.data())),\n      m_innerStride(map.innerStride()),\n      m_outerStride(map.outerStride())\n  {\n    EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(evaluator<Derived>::Flags&PacketAccessBit, internal::inner_stride_at_compile_time<Derived>::ret==1),\n                        PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1);\n    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CoreEvaluators.h", "function_name": "mapbase_evaluator", "index": 2784, "label": 0}
{"input": "Index AmbiVector<_Scalar,_StorageIndex>::nonZeros() const\n{\n  if (m_mode==IsSparse)\n    return m_llSize;\n  else\n    return m_end - m_start;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/AmbiVector.h", "function_name": "AmbiVector<_Scalar,_StorageIndex>::nonZeros", "index": 2785, "label": 0}
{"input": "inline void Client::set_digest_auth(const std::string &username,\n                                    const std::string &password) {\n  cli_->set_digest_auth(username, password);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_digest_auth", "index": 2786, "label": 0}
{"input": "CV_INLINE CvFont cvFont( double scale, int thickness CV_DEFAULT(1) )\n{\n    CvFont font;\n    cvInitFont( &font, CV_FONT_HERSHEY_PLAIN, scale, scale, 0, thickness, CV_AA );\n    return font;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/imgproc/imgproc_c.h", "function_name": "cvFont", "index": 2787, "label": 0}
{"input": "napi_value DebugRouterWrapper::AddSessionHandler(napi_env env,\n                                                 napi_callback_info info) {\n  napi_value js_this;\n  size_t argc = 1;\n  napi_value argv[1];\n  napi_get_cb_info(env, info, &argc, argv, &js_this, nullptr);\n  if (session_handlers_.find(argv[0]) == session_handlers_.end()) {\n    auto sessionHandler = std::make_shared<HarmonySessionHandler>(env, argv[0]);\n    session_handlers_[argv[0]] = sessionHandler;\n    debugrouter::common::DebugRouter::GetInstance().AddSessionHandler(\n        sessionHandler.get());\n  }\n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/debug_router_wrapper.cc", "function_name": "DebugRouterWrapper::AddSessionHandler", "index": 2788, "label": 0}
{"input": "inline\n_Tp SparseMat::value(const int* idx, size_t* hashval) const\n{\n    const _Tp* p = (const _Tp*)((SparseMat*)this)->ptr(idx, false, hashval);\n    return p ? *p : _Tp();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat::value", "index": 2789, "label": 0}
{"input": "inline boost::python::list vector2list(std::vector<T>& inVector)\n        {\n            boost::python::list outList;\n            for (auto& value : inVector)\n            {\n                outList.append(value);\n            }\n\n            return outList;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/PythonInterface/BoostInterface.hpp", "function_name": "vector2list", "index": 2790, "label": 0}
{"input": "void test_sparse_ref()\n{\n  for(int i = 0; i < g_repeat; i++) {\n    CALL_SUBTEST_1( check_const_correctness(SparseMatrix<float>()) );\n    CALL_SUBTEST_1( check_const_correctness(SparseMatrix<double,RowMajor>()) );\n    CALL_SUBTEST_2( call_ref() );\n\n    CALL_SUBTEST_3( check_const_correctness(SparseVector<float>()) );\n    CALL_SUBTEST_3( check_const_correctness(SparseVector<double,RowMajor>()) );\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_ref.cpp", "function_name": "test_sparse_ref", "index": 2791, "label": 0}
{"input": "static void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)\n  {\n    generic_product_impl<Lhs, Rhs>::subTo(dst,src.lhs(),src.rhs());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCore/SparseProduct.h", "function_name": "internal::sub_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>", "index": 2792, "label": 0}
{"input": "void newArray(const Shape& inShape)\n        {\n            deleteArray();\n\n            shape_ = inShape;\n            size_  = inShape.size();\n            newArray();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/NdArray/NdArrayCore.hpp", "function_name": "inShape", "index": 2793, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nvoid call_triangular_assignment_loop(DstXprType& dst, const SrcXprType& src)\n{\n  call_triangular_assignment_loop<Mode,SetOpposite>(dst, src, internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "call_triangular_assignment_loop", "index": 2794, "label": 0}
{"input": "void Otto::HandsUp(int period, int dir) {\n    if (!has_hands_) {\n        return;\n    }\n\n    int initial[SERVO_COUNT] = {90, 90, 90, 90, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n    int target[SERVO_COUNT] = {90, 90, 90, 90, HAND_HOME_POSITION, 180 - HAND_HOME_POSITION};\n\n    if (dir == 0) {\n        target[LEFT_HAND] = 170;\n        target[RIGHT_HAND] = 10;\n    } else if (dir == 1) {\n        target[LEFT_HAND] = 170;\n        target[RIGHT_HAND] = servo_[RIGHT_HAND].GetPosition();\n    } else if (dir == -1) {\n        target[RIGHT_HAND] = 10;\n        target[LEFT_HAND] = servo_[LEFT_HAND].GetPosition();\n    }\n\n    MoveServos(period, target);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::HandsUp", "index": 2795, "label": 0}
{"input": "void print_partition(\n       const vector<preprocessed_inputfile_t>& preprocessed_inputfiles,\n       const vector<vector<size_t>>& partition)\n{\n  float efficiency = efficiency_of_partition(preprocessed_inputfiles, partition);\n  cout << \"Partition into \" << partition.size() << \" subsets for \" << efficiency * 100.0f << \"% efficiency\"  << endl;\n  for (auto subset = partition.begin(); subset != partition.end(); ++subset) {\n    cout << \"  Subset \" << (subset - partition.begin())\n         << \", efficiency \" << efficiency_of_subset(preprocessed_inputfiles, *subset) * 100.0f << \"%:\"\n         << endl;\n    for (auto file = subset->begin(); file != subset->end(); ++file) {\n      cout << \"    \" << preprocessed_inputfiles[*file].filename << endl;\n    }\n    if (dump_tables) {\n      cout << \"  Table:\" << endl;\n      dump_table_for_subset(preprocessed_inputfiles, *subset);\n    }\n  }\n  cout << endl;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/analyze-blocking-sizes.cpp", "function_name": "print_partition", "index": 2796, "label": 0}
{"input": "void GRender::setSurface(NativeWindowType window) {\n    nativeWindow = window;\n    LOGI(TAG, \"setSurface %p\", nativeWindow);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/GRender.cpp", "function_name": "GRender::setSurface", "index": 2797, "label": 0}
{"input": "void DistributionRecorder::addSample(double val, const TagSet &tag) { getRecorderWithTag(tag)->addSample(val); }", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "b68df2817be64097f5030b66172dff6a20ba3300", "file_path": "src/common/monitor/Recorder.cc", "function_name": "DistributionRecorder::addSample", "index": 2798, "label": 0}
{"input": "static Matrixf mfcc(Vectorf &x, int sr,\n                                              int n_fft, int n_hop, const std::string &win, bool center, const std::string &mode,\n                                              float power, int n_mels, int fmin, int fmax,\n                                              int n_mfcc, bool norm, int type) {\n\n      \n      Matrixf mel = internal::melspectrogram(x, sr, n_fft, n_hop, win, center, mode, power, n_mels, fmin, fmax).transpose();\n      printf(\"mel rows %d cols %d\\n\",mel.rows(),mel.cols());\n      Matrixf mel_db = internal::power2db(mel);\n      Matrixf dct = internal::dct(mel_db, norm, type).leftCols(n_mfcc);\n      return dct;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/librosa.h", "function_name": "sr", "index": 2799, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool index_statically_gt(DenseIndex i, DenseIndex value) {\n  return index_statically_gt_impl<T>::run(i, value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "index_statically_gt", "index": 2800, "label": 0}
{"input": "DenseIndex Spline<_Scalar, _Dim, _Degree>::span(Scalar u) const\n  {\n    return Spline::Span(u, degree(), knots());\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/Spline.h", "function_name": "Spline<_Scalar, _Dim, _Degree>::span", "index": 2801, "label": 0}
{"input": "void Map_MatrixXd_copy(C_Map_MatrixXd *dst, const C_Map_MatrixXd *src)\n{\n  c_to_eigen(dst) = c_to_eigen(src);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/mix_eigen_and_c/binary_library.cpp", "function_name": "Map_MatrixXd_copy", "index": 2802, "label": 0}
{"input": "BenchmarkSuite(const Device& device, size_t m)\n      : m_(m), k_(m), n_(m), device_(device) {\n    initialize();\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/tensors/tensor_benchmarks.h", "function_name": "BenchmarkSuite", "index": 2803, "label": 0}
{"input": "static inline std::string toUpperCase(const std::string& str)\n{\n    std::string result(str);\n    std::transform(result.begin(), result.end(), result.begin(), details::char_toupper);\n    return result;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cvstd.hpp", "function_name": "toUpperCase", "index": 2804, "label": 0}
{"input": "static inline MatShape shape(int a0, int a1=-1, int a2=-1, int a3=-1)\n{\n    int dims[] = {a0, a1, a2, a3};\n    MatShape s = shape(dims, 4);\n    s.erase(std::remove_if(s.begin(), s.end(), is_neg), s.end());\n    return s;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/shape_utils.hpp", "function_name": "shape", "index": 2805, "label": 0}
{"input": "Result<meta::Inode> UserConfig::statConfig(meta::InodeId iid, const meta::UserInfo &ui) {\n  auto kidx = (int64_t)(meta::InodeId::getConf().u64() - 1 - iid.u64());\n  if (kidx < 0 || kidx >= (int64_t)(systemKeys.size() + userKeys.size())) {\n    return makeError(MetaCode::kNotFound, \"iid not a config entry\");\n  }\n  auto isSys = kidx < (int64_t)systemKeys.size();\n  if (!isSys) {\n    kidx -= (int)systemKeys.size();\n  }\n\n  auto config = isSys ? *config_ : getConfig(ui);\n  auto key = isSys ? systemKeys[kidx] : userKeys[kidx];\n  return meta::Inode{iid,\n                     {meta::Symlink{config.find(key).value()->toString()},\n                      meta::Acl{ui.uid, ui.gid, meta::Permission{isSys ? 0444u : 0400u}}}};\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "34612f3b4fde54e5b897399eb2f96d6bb2466f55", "file_path": "src/fuse/UserConfig.cc", "function_name": "UserConfig::statConfig", "index": 2806, "label": 0}
{"input": "int KMat::cvtfloat(KMat* dst,float scale,float delta){\n    ppl::cv::x86::ConvertTo<uint8_t,3,float>(m_height,m_width,m_width*m_channel,(uint8_t*)m_buf\n        ,scale,m_width*m_channel,(float*)m_buf);\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/src/kmatx86.cpp", "function_name": "KMat::cvtfloat", "index": 2807, "label": 0}
{"input": "Iteration(double epsilon, uint32 maxNumIterations) noexcept :\n            epsilon_(epsilon),\n            maxNumIterations_(maxNumIterations)\n        {\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Roots/Iteration.hpp", "function_name": "Iteration", "index": 2808, "label": 0}
{"input": "inline DualQuat<T> DualQuat<T>::power(const DualQuat<T> &q, QuatAssumeType assumeUnit) const\n{\n    return (q * log(assumeUnit)).exp();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::power", "index": 2809, "label": 0}
{"input": "intersector_helper1(const Object2 &inStored, Intersector &in) : stored(inStored), intersector(in) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h", "function_name": "intersector_helper1", "index": 2810, "label": 0}
{"input": "void smooth_curve(const vector<double> & tab_mflops, vector<double> & smooth_tab_mflops,int window_half_width){\n  \n  int window_width=2*window_half_width+1;\n\n  int size=tab_mflops.size();\n\n  vector<double> sample(window_width);\n  \n  for (int i=0 ; i < size ; i++){\n    \n    for ( int j=0 ; j < window_width ; j++ ){\n      \n      int shifted_index=i+j-window_half_width;\n      if (shifted_index<0) shifted_index=0;\n      if (shifted_index>size-1) shifted_index=size-1;\n      sample[j]=tab_mflops[shifted_index];\n      \n    }\n\n    smooth_tab_mflops.push_back(weighted_mean(sample));\n\n  }\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/btl/data/smooth.cxx", "function_name": "smooth_curve", "index": 2811, "label": 0}
{"input": "OutputIt set_intersection(InputIt1 first1,\n                              InputIt1 last1,\n                              InputIt2 first2,\n                              InputIt2 last2,\n                              OutputIt destination,\n                              Compare  comp) CONDITIONAL_NO_EXCEPT\n    {\n        return std::set_intersection(\n#ifdef PARALLEL_ALGORITHMS_SUPPORTED\n            std::execution::par_unseq,\n#endif\n            first1,\n            last1,\n            first2,\n            last2,\n            destination,\n            comp);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp", "function_name": "set_intersection", "index": 2812, "label": 0}
{"input": "void pardisoInit(int type)\n    {\n      m_type = type;\n      bool symmetric = std::abs(m_type) < 10;\n      m_iparm[0] = 1;   \n      m_iparm[1] = 2;   \n      m_iparm[2] = 0;   \n      m_iparm[3] = 0;   \n      m_iparm[4] = 0;   \n      m_iparm[5] = 0;   \n      m_iparm[6] = 0;   \n      m_iparm[7] = 2;   \n      m_iparm[8] = 0;   \n      m_iparm[9] = 13;  \n      m_iparm[10] = symmetric ? 0 : 1; \n      m_iparm[11] = 0;  \n      m_iparm[12] = symmetric ? 0 : 1;  \n                                        \n      m_iparm[13] = 0;  \n      m_iparm[14] = 0;  \n      m_iparm[15] = 0;  \n      m_iparm[16] = 0;  \n      m_iparm[17] = -1; \n      m_iparm[18] = -1; \n      m_iparm[19] = 0;  \n      \n      m_iparm[20] = 0;  \n      m_iparm[26] = 0;  \n      m_iparm[27] = (sizeof(RealScalar) == 4) ? 1 : 0;\n      m_iparm[34] = 1;  \n      m_iparm[36] = 0;  \n      m_iparm[59] = 0;  \n      \n      memset(m_pt, 0, sizeof(m_pt));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/PardisoSupport/PardisoSupport.h", "function_name": "type", "index": 2813, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline SegmentReturnType head(Index n)\n{\n  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)\n  return SegmentReturnType(derived(), 0, n);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/BlockMethods.h", "function_name": "SegmentReturnType head", "index": 2814, "label": 0}
{"input": "inline\nvoid CompressedRectilinearPortraitProjector::mapBackward(float u, float v, float &x, float &y)\n{\n    u /= - scale;\n    v /= scale;\n\n    float aatg = a * atanf(u / a);\n    float u_ = aatg;\n    float v_ = atanf(v * cosf( aatg ) / b);\n\n    float cosv = cosf(v_);\n    float y_ = cosv * sinf(u_);\n    float x_ = sinf(v_);\n    float z_ = cosv * cosf(u_);\n\n    float z;\n    x = k_rinv[0] * x_ + k_rinv[1] * y_ + k_rinv[2] * z_;\n    y = k_rinv[3] * x_ + k_rinv[4] * y_ + k_rinv[5] * z_;\n    z = k_rinv[6] * x_ + k_rinv[7] * y_ + k_rinv[8] * z_;\n\n    if (z > 0) { x /= z; y /= z; }\n    else x = y = -1;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/stitching/detail/warpers_inl.hpp", "function_name": "CompressedRectilinearPortraitProjector::mapBackward", "index": 2815, "label": 0}
{"input": "auto arcsinh(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(arcsinh(dtype{ 0 }))> returnArray(inArray.shape());\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) noexcept -> auto{ return arcsinh(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/arcsinh.hpp", "function_name": "arcsinh", "index": 2816, "label": 0}
{"input": "inline ssize_t SocketStream::write(const char *ptr, size_t size) {\n  if (!is_writable()) { return -1; }\n\n#if defined(_WIN32) && !defined(_WIN64)\n  size =\n      (std::min)(size, static_cast<size_t>((std::numeric_limits<int>::max)()));\n#endif\n\n  return send_socket(sock_, ptr, size, CPPHTTPLIB_SEND_FLAGS);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "SocketStream::write", "index": 2817, "label": 0}
{"input": "EIGEN_DEVICE_FUNC \ninline typename MatrixType::Scalar cofactor_4x4(const MatrixType& matrix)\n{\n  enum {\n    i1 = (i+1) % 4,\n    i2 = (i+2) % 4,\n    i3 = (i+3) % 4,\n    j1 = (j+1) % 4,\n    j2 = (j+2) % 4,\n    j3 = (j+3) % 4\n  };\n  return general_det3_helper(matrix, i1, i2, i3, j1, j2, j3)\n       + general_det3_helper(matrix, i2, i3, i1, j1, j2, j3)\n       + general_det3_helper(matrix, i3, i1, i2, j1, j2, j3);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/LU/InverseImpl.h", "function_name": "cofactor_4x4", "index": 2818, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    ComputationInfo info() const\n    {\n      eigen_assert(m_isInitialized && \"SelfAdjointEigenSolver is not initialized.\");\n      return m_info;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h", "function_name": "ComputationInfo info", "index": 2819, "label": 0}
{"input": "void ScaleBuffer(TypeDest* dest, const TypeSrc* src, const TypeFactor factor, size_t len)\n        {\n          for (size_t i=0; i<len; ++i)\n          {\n            dest[i] = static_cast<TypeDest>(static_cast<TypeFactor>(src[i]) * factor);\n          }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "ScaleBuffer", "index": 2820, "label": 0}
{"input": "PooledAllocator(int blockSize = BLOCKSIZE)\n    {\n        blocksize = blockSize;\n        remaining = 0;\n        base = NULL;\n        loc = NULL;\n\n        usedMemory = 0;\n        wastedMemory = 0;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/allocator.h", "function_name": "PooledAllocator", "index": 2821, "label": 0}
{"input": "void makect(int nc, int *ip, double *c)\n        {\n          int j, nch;\n          double delta;\n\n          ip[1] = nc;\n          if (nc > 1) {\n            nch = nc >> 1;\n            delta = atan(1.0) / nch;\n            c[0] = cos(delta * nch);\n            c[nch] = 0.5 * c[0];\n            for (j = 1; j < nch; j++) {\n              c[j] = 0.5 * cos(delta * j);\n              c[nc - j] = 0.5 * sin(delta * j);\n            }\n          }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/mfcc/AudioFFT.hpp", "function_name": "nc", "index": 2822, "label": 0}
{"input": "explicit Tensor(const array<Index, NumIndices>& dimensions)\n        : m_storage(internal::array_prod(dimensions), dimensions)\n    {\n      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/Tensor.h", "function_name": "Tensor", "index": 2823, "label": 0}
{"input": "inline v_uint16x8 v_pack_u(const v_int32x4& a, const v_int32x4& b)\n{\n    v128_t maxval = wasm_i32x4_splat(65535);\n    v128_t minval = wasm_i32x4_splat(0);\n    v128_t a1 = wasm_v128_bitselect(maxval, a.val, wasm_i32x4_gt(a.val, maxval));\n    v128_t b1 = wasm_v128_bitselect(maxval, b.val, wasm_i32x4_gt(b.val, maxval));\n    v128_t a2 = wasm_v128_bitselect(minval, a1, wasm_i32x4_lt(a1, minval));\n    v128_t b2 = wasm_v128_bitselect(minval, b1, wasm_i32x4_lt(b1, minval));\n    return v_uint16x8(wasm_v8x16_shuffle(a2, b2, 0,1,4,5,8,9,12,13,16,17,20,21,24,25,28,29));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_pack_u", "index": 2824, "label": 0}
{"input": "inline cl_int clEnqueueReadBufferRect(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, const size_t* p5, size_t p6, size_t p7, size_t p8, size_t p9, void* p10, cl_uint p11, const cl_event* p12, cl_event* p13) { return clEnqueueReadBufferRect_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueReadBufferRect", "index": 2825, "label": 0}
{"input": "void test_sparseqr()\n{\n  for(int i=0; i<g_repeat; ++i)\n  {\n    CALL_SUBTEST_1(test_sparseqr_scalar<double>());\n    CALL_SUBTEST_2(test_sparseqr_scalar<std::complex<double> >());\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparseqr.cpp", "function_name": "test_sparseqr", "index": 2826, "label": 0}
{"input": "void test_cxx11_tensor_random()\n{\n  CALL_SUBTEST(test_default());\n  CALL_SUBTEST(test_normal());\n  CALL_SUBTEST(test_custom());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_random.cpp", "function_name": "test_cxx11_tensor_random", "index": 2827, "label": 0}
{"input": "EmojiPlayer::EmojiPlayer(esp_lcd_panel_handle_t panel, esp_lcd_panel_io_handle_t panel_io)\n{\n    ESP_LOGI(TAG, \"Create EmojiPlayer, panel: %p, panel_io: %p\", panel, panel_io);\n    const mmap_assets_config_t assets_cfg = {\n        .partition_label = \"assets_A\",\n        .max_files = MMAP_EMOJI_FILES,\n        .checksum = MMAP_EMOJI_CHECKSUM,\n        .flags = {.mmap_enable = true, .full_check = true}\n    };\n\n    mmap_assets_new(&assets_cfg, &assets_handle_);\n\n    anim_player_config_t player_cfg = {\n        .flush_cb = OnFlush,\n        .update_cb = NULL,\n        .user_data = panel,\n        .flags = {.swap = true},\n        .task = ANIM_PLAYER_INIT_CONFIG()\n    };\n\n    player_handle_ = anim_player_init(&player_cfg);\n\n    const esp_lcd_panel_io_callbacks_t cbs = {\n        .on_color_trans_done = OnFlushIoReady,\n    };\n    esp_lcd_panel_io_register_event_callbacks(panel_io, &cbs, player_handle_);\n    StartPlayer(MMAP_EMOJI_CONNECTING_AAF, true, 15);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/emoji_display.cc", "function_name": "EmojiPlayer::EmojiPlayer", "index": 2828, "label": 0}
{"input": "static __host__ __device__ __forceinline__ int8 make_int8(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7)\n    {\n        int8 val = {a0, a1, a2, a3, a4, a5, a6, a7};\n        return val;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_traits.hpp", "function_name": "make_int8", "index": 2829, "label": 0}
{"input": "Pmic(i2c_master_bus_handle_t i2c_bus, uint8_t addr) : Axp2101(i2c_bus, addr) {\n            WriteReg(0x22, 0b110); \n            WriteReg(0x27, 0x10);  \n    \n            \n            WriteReg(0x80, 0x01);\n            \n            WriteReg(0x90, 0x00);\n            WriteReg(0x91, 0x00);\n    \n            \n            WriteReg(0x82, (3300 - 1500) / 100);\n    \n            \n            WriteReg(0x92, (3300 - 500) / 100);\n\n            WriteReg(0x96, (1500 - 500) / 100);\n            WriteReg(0x97, (2800 - 500) / 100);\n    \n            \n            WriteReg(0x90, 0x31);\n        \n            WriteReg(0x64, 0x02); \n            \n            WriteReg(0x61, 0x02); \n            WriteReg(0x62, 0x08); \n            WriteReg(0x63, 0x01); \n        }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "dc4e82abaf84c008357394562fd1b7e28334f8a3", "file_path": "main/boards/esp32-s3-touch-lcd-3.5/esp32-s3-touch-lcd-3.5.cc", "function_name": "Pmic", "index": 2830, "label": 0}
{"input": "inline\n_Tp SparseMat_<_Tp>::operator()(const int* idx, size_t* hashval) const\n{\n    return SparseMat::value<_Tp>(idx, hashval);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMat_<_Tp>::operator()", "index": 2831, "label": 0}
{"input": "AfeWakeWord::~AfeWakeWord() {\n    if (afe_data_ != nullptr) {\n        afe_iface_->destroy(afe_data_);\n    }\n\n    if (wake_word_encode_task_stack_ != nullptr) {\n        heap_caps_free(wake_word_encode_task_stack_);\n    }\n\n    vEventGroupDelete(event_group_);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/afe_wake_word.cc", "function_name": "AfeWakeWord::~AfeWakeWord", "index": 2832, "label": 0}
{"input": "size_t PrevDivisor(const size_t begin, const size_t end, const size_t dim,\n                   const size_t multiple) {\n  HWY_DASSERT(end != 0 && dim != 0 && multiple != 0);\n  size_t prev = RoundDownWithFloor(end, multiple);\n  \n  if (prev == end) prev -= multiple;\n  for (;;) {\n    if (prev == 0) return 0;  \n    if (dim % prev == 0) return prev;\n    if (prev <= begin) return 0;\n    prev -= multiple;\n  }\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.cc", "function_name": "PrevDivisor", "index": 2833, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    const Product<OtherDerived,TriangularViewType>\n    operator*(const MatrixBase<OtherDerived>& lhs, const TriangularViewImpl& rhs)\n    {\n      return Product<OtherDerived,TriangularViewType>(lhs.derived(),rhs.derived());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "Product<OtherDerived,TriangularViewType>\n    operator*", "index": 2834, "label": 0}
{"input": "void test_minres_T()\n{\n  \n  MINRES<SparseMatrix<T>, Lower, IdentityPreconditioner    > minres_colmajor_lower_I;\n  MINRES<SparseMatrix<T>, Upper, IdentityPreconditioner    > minres_colmajor_upper_I;\n\n  \n  MINRES<SparseMatrix<T>, Lower, DiagonalPreconditioner<T> > minres_colmajor_lower_diag;\n  MINRES<SparseMatrix<T>, Upper, DiagonalPreconditioner<T> > minres_colmajor_upper_diag;\n  MINRES<SparseMatrix<T>, Lower|Upper, DiagonalPreconditioner<T> > minres_colmajor_uplo_diag;\n  \n  \n  CALL_SUBTEST( check_sparse_spd_solving(minres_colmajor_lower_I) );\n  CALL_SUBTEST( check_sparse_spd_solving(minres_colmajor_upper_I) );\n    \n  CALL_SUBTEST( check_sparse_spd_solving(minres_colmajor_lower_diag)  );\n  CALL_SUBTEST( check_sparse_spd_solving(minres_colmajor_upper_diag)  );\n  CALL_SUBTEST( check_sparse_spd_solving(minres_colmajor_uplo_diag)  );\n    \n  \n  \n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/minres.cpp", "function_name": "test_minres_T", "index": 2835, "label": 0}
{"input": "void map_class_vector(const VectorType& m)\n{\n  typedef typename VectorType::Scalar Scalar;\n\n  Index size = m.size();\n\n  VectorType v = VectorType::Random(size);\n\n  Index arraysize = 3*size;\n  \n  Scalar* a_array = internal::aligned_new<Scalar>(arraysize+1);\n  Scalar* array = a_array;\n  if(Alignment!=Aligned)\n    array = (Scalar*)(internal::IntPtr(a_array) + (internal::packet_traits<Scalar>::AlignedOnScalar?sizeof(Scalar):sizeof(typename NumTraits<Scalar>::Real)));\n\n  {\n    Map<VectorType, Alignment, InnerStride<3> > map(array, size);\n    map = v;\n    for(int i = 0; i < size; ++i)\n    {\n      VERIFY(array[3*i] == v[i]);\n      VERIFY(map[i] == v[i]);\n    }\n  }\n\n  {\n    Map<VectorType, Unaligned, InnerStride<Dynamic> > map(array, size, InnerStride<Dynamic>(2));\n    map = v;\n    for(int i = 0; i < size; ++i)\n    {\n      VERIFY(array[2*i] == v[i]);\n      VERIFY(map[i] == v[i]);\n    }\n  }\n\n  internal::aligned_delete(a_array, arraysize+1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/mapstride.cpp", "function_name": "map_class_vector", "index": 2836, "label": 0}
{"input": "void enqueue(std::function<void()> fn) override {\n    {\n      std::unique_lock<std::mutex> lock(mutex_);\n      jobs_.push_back(std::move(fn));\n    }\n\n    cond_.notify_one();\n  }", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "std::function<void()>", "index": 2837, "label": 0}
{"input": "JSVMContextWrapper::JSVMContextWrapper(std::shared_ptr<VMInstance> vm)\n    : JSIContext(vm) {\n  if (!vm) {\n    LOGE(\"vm is nullptr\");\n    return;\n  }\n  auto jsvm_instance = std::static_pointer_cast<JSVMRuntimeInstance>(vm);\n  env_ = jsvm_instance->Env();\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_context_wrapper.cc", "function_name": "JSVMContextWrapper::JSVMContextWrapper", "index": 2838, "label": 0}
{"input": "float bicubicCoeff(float x_)\n        {\n            float x = fabsf(x_);\n            if (x <= 1.0f)\n            {\n                return x * x * (1.5f * x - 2.5f) + 1.0f;\n            }\n            else if (x < 2.0f)\n            {\n                return x * (x * (-0.5f * x + 2.5f) - 4.0f) + 2.0f;\n            }\n            else\n            {\n                return 0.0f;\n            }\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/filters.hpp", "function_name": "x_", "index": 2839, "label": 0}
{"input": "inline Value Value::CreateMap(const Value& keys, const Value& values) {\n  OrtValue* out;\n  const OrtValue* inputs[2] = {keys, values};\n  ThrowOnError(GetApi().CreateValue(inputs, 2, ONNX_TYPE_MAP, &out));\n  return Value{out};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "Value::CreateMap", "index": 2840, "label": 0}
{"input": "inline void Client::set_proxy_basic_auth(const std::string &username,\n                                         const std::string &password) {\n  cli_->set_proxy_basic_auth(username, password);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_proxy_basic_auth", "index": 2841, "label": 0}
{"input": "const FullPivHouseholderQR<typename MatrixBase<Derived>::PlainObject>\nMatrixBase<Derived>::fullPivHouseholderQr() const\n{\n  return FullPivHouseholderQR<PlainObject>(eval());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h", "function_name": "MatrixBase<Derived>::fullPivHouseholderQr", "index": 2842, "label": 0}
{"input": "explicit HessenbergDecomposition(const EigenBase<InputType>& matrix)\n      : m_matrix(matrix.derived()),\n        m_temp(matrix.rows()),\n        m_isInitialized(false)\n    {\n      if(matrix.rows()<2)\n      {\n        m_isInitialized = true;\n        return;\n      }\n      m_hCoeffs.resize(matrix.rows()-1,1);\n      _compute(m_matrix, m_hCoeffs, m_temp);\n      m_isInitialized = true;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h", "function_name": "HessenbergDecomposition", "index": 2843, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half igamma(const Eigen::half& a, const Eigen::half& x) {\n  return Eigen::half(Eigen::numext::igamma(static_cast<float>(a), static_cast<float>(x)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half igamma", "index": 2844, "label": 0}
{"input": "void HandleMoveWakePressUp(int64_t current_time, int64_t &last_trigger_time, int &gesture_state)\n    {\n        int64_t interval = current_time - last_trigger_time;\n\n        if (interval > 1000) {\n            gesture_state = 0;\n        } else {\n            switch (gesture_state) {\n            case 0:\n                if (interval > 300) {\n                    gesture_state = 1;\n                }\n                break;\n            case 1:\n                break;\n            case 2:\n                if (interval < 100) {\n                    ESP_LOGI(TAG, \"gesture detected\");\n                    gesture_state = 0;\n                    auto &app = Application::GetInstance();\n                    app.ToggleChatState();\n                }\n                break;\n            }\n        }\n    }", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/boards/esp-hi/esp_hi.cc", "function_name": "current_time", "index": 2845, "label": 0}
{"input": "inline\nVec<_Tp, cn> Vec<_Tp, cn>::mul(const Vec<_Tp, cn>& v) const\n{\n    Vec<_Tp, cn> w;\n    for( int i = 0; i < cn; i++ ) w.val[i] = saturate_cast<_Tp>(this->val[i]*v.val[i]);\n    return w;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/matx.hpp", "function_name": "Vec<_Tp, cn>::mul", "index": 2846, "label": 0}
{"input": "BlockVectorView(const BlockSparseMatrixT& spblockmat, const VectorType& vec)\n    : m_spblockmat(spblockmat),m_vec(vec)\n    { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h", "function_name": "BlockVectorView", "index": 2847, "label": 0}
{"input": "explicit LeastSquareDiagonalPreconditioner(const MatType& mat) : Base()\n    {\n      compute(mat);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h", "function_name": "LeastSquareDiagonalPreconditioner", "index": 2848, "label": 0}
{"input": "void optional<T>::swap(optional<T> &other) noexcept\n    {\n        m_holder.swap(other.m_holder);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/util/optional.hpp", "function_name": "optional<T>::swap", "index": 2849, "label": 0}
{"input": "typename InferROITraits<InferType>::outType\ninferGenericROI(const std::string& tag,\n         const typename InferROITraits<InferType>::inType& in,\n         const cv::GInferInputs& inputs)\n{\n    std::vector<cv::GArg> args;\n    std::vector<std::string> names;\n    cv::GKinds kinds;\n\n    args.emplace_back(in);\n    kinds.emplace_back(cv::detail::OpaqueKind::CV_RECT);\n\n    unpackBlobs(inputs.getBlobs(), args, names, kinds);\n\n    auto call = cv::detail::makeCall<InferType>(tag,\n                                                std::move(args),\n                                                std::move(names),\n                                                std::move(kinds));\n\n    return {std::move(call)};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/infer.hpp", "function_name": "inferGenericROI", "index": 2850, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool index_statically_lt(DenseIndex i, DenseIndex value) {\n  return index_statically_lt_impl<T>::run(i, value);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIndexList.h", "function_name": "index_statically_lt", "index": 2851, "label": 0}
{"input": "SluMatrix(const SluMatrix& other)\n    : SuperMatrix(other)\n  {\n    Store = &storage;\n    storage = other.storage;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SuperLUSupport/SuperLUSupport.h", "function_name": "SluMatrix", "index": 2852, "label": 0}
{"input": "inline long Client::get_openssl_verify_result() const {\n  if (is_ssl_) {\n    return static_cast<SSLClient &>(*cli_).get_openssl_verify_result();\n  }\n  return -1; \n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::get_openssl_verify_result", "index": 2853, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\n    EIGEN_STRONG_INLINE void copyCoeff(Index row, Index col, Other& other)\n    {\n      derived().coeffRef(row, col) = other.coeff(row, col);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/TriangularMatrix.h", "function_name": "copyCoeff", "index": 2854, "label": 0}
{"input": "static void expand_impl(GCompoundContext &ctx, detail::Seq<IIs...>, detail::Seq<OIs...>)\n    {\n        auto result = Impl::expand(get_compound_in<Ins>::get(ctx, IIs)...);\n        auto tuple_return = tuple_wrap_helper<decltype(result)>::get(std::move(result));\n        ctx.m_results = { cv::GArg(std::get<OIs>(tuple_return))... };\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gcompoundkernel.hpp", "function_name": "expand_impl", "index": 2855, "label": 0}
{"input": "inline Scalar coeffDiag(Index idx) const {\n        eigen_assert(idx < outerSize());\n        eigen_assert(idx < innerSize());\n        return this->m_data.diag(idx);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "coeffDiag", "index": 2856, "label": 0}
{"input": "inline void IoBindingImpl<T>::SynchronizeOutputs() {\n  ThrowOnError(GetApi().SynchronizeBoundOutputs(this->p_));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "IoBindingImpl<T>::SynchronizeOutputs", "index": 2857, "label": 0}
{"input": "int syncthreadsOr(int pred)\n        {\n#if defined (__CUDA_ARCH__) && (__CUDA_ARCH__ < 200)\n                \n                return 0;\n#else\n                return __syncthreads_or(pred);\n#endif\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/emulation.hpp", "function_name": "pred", "index": 2858, "label": 0}
{"input": "inline int umfpack_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric, std::complex<double>)\n{\n  return umfpack_zi_get_lunz(lnz,unz,n_row,n_col,nz_udiag,Numeric);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/UmfPackSupport/UmfPackSupport.h", "function_name": "umfpack_get_lunz", "index": 2859, "label": 0}
{"input": "NdArray<dtype> nancumsum(const NdArray<dtype>& inArray, Axis inAxis = Axis::NONE)\n    {\n        STATIC_ASSERT_FLOAT(dtype);\n\n        NdArray<dtype> arrayCopy(inArray);\n        stl_algorithms::for_each(arrayCopy.begin(),\n                                 arrayCopy.end(),\n                                 [](dtype& value) noexcept -> void\n                                 {\n                                     if (std::isnan(value))\n                                     {\n                                         value = dtype{ 0 };\n                                     };\n                                 });\n\n        return cumsum(arrayCopy, inAxis);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/nancumsum.hpp", "function_name": "nancumsum", "index": 2860, "label": 0}
{"input": "float OffscreenCanvasRenderingContext2D::global_alpha() const\n{\n    return drawing_state().global_alpha;\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::global_alpha", "index": 2861, "label": 0}
{"input": "inline std::pair<std::string, std::string> make_range_header(Ranges ranges) {\n  std::string field = \"bytes=\";\n  auto i = 0;\n  for (auto r : ranges) {\n    if (i != 0) { field += \", \"; }\n    if (r.first != -1) { field += std::to_string(r.first); }\n    field += '-';\n    if (r.second != -1) { field += std::to_string(r.second); }\n    i++;\n  }\n  return std::make_pair(\"Range\", std::move(field));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "make_range_header", "index": 2862, "label": 0}
{"input": "inline mpreal maxval(mp_prec_t prec)\n{\n    \n    return (mpreal(1, prec) - machine_epsilon(prec)) << mpreal::get_emax();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "maxval", "index": 2863, "label": 0}
{"input": "static void qsort_descent_inplace(std::vector<FaceObject>& faceobjects)\n{\n    if (faceobjects.empty())\n        return;\n\n    qsort_descent_inplace(faceobjects, 0, faceobjects.size() - 1);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/aisdk/scrfd.cpp", "function_name": "qsort_descent_inplace", "index": 2864, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::SwitchLogBox(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return SetSwitch(std::move(args), tasm::LynxEnv::kLynxEnableLogBox);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::SwitchLogBox", "index": 2865, "label": 0}
{"input": "void RadonComponent::SetCSSVariables(\n    const std::string& id_selector, const lepus::Value& properties,\n    std::shared_ptr<PipelineOptions>& pipeline_options) {\n  set_variable_ops_->emplace_back(SetCSSVariableOp(id_selector, properties));\n  DispatchOption dispatch_option(page_proxy_);\n  dispatch_option.css_variable_changed_ = true;\n  Refresh(dispatch_option, pipeline_options);\n  if (dispatch_option.has_patched_) {\n    page_proxy_->element_manager()->SetNeedsLayout();\n  };\n\n  page_proxy_->RequestResolve(pipeline_options);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "46d7efb240e97f9e8fb7c3167b9dd405efbf5a0c", "file_path": "core/renderer/dom/vdom/radon/radon_component.cc", "function_name": "RadonComponent::SetCSSVariables", "index": 2866, "label": 0}
{"input": "static bool run(const Self&, Op&, const GpuDevice&, half*, typename Self::Index, typename Self::Index) {\n    assert(false && \"Should not be called since there is no packet accessor\");\n    return true;\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorReductionCuda.h", "function_name": "Self::Index", "index": 2867, "label": 0}
{"input": "static void print(const Path &path) {\n  fmt::print(\"path {}\\n\", path);\n  fmt::print(\"abs {}, relative {}\\n\", path.is_absolute(), path.is_relative());\n  fmt::print(\"has root {}, {}\\n\", path.has_root_path(), path.root_path());\n  fmt::print(\"has relative {}, {}\\n\", path.has_relative_path(), path.relative_path());\n  fmt::print(\"has branch {}, {}\\n\", path.has_parent_path(), path.parent_path());\n  fmt::print(\"has stem {}, {}\\n\", path.has_stem(), path.stem());\n  fmt::print(\"has filename {}, {}, is dot {}, is dot dot {}\\n\",\n             path.has_filename(),\n             path.filename(),\n             path.filename_is_dot(),\n             path.filename_is_dot_dot());\n  fmt::print(\"has leaf {}, {}\", !path.empty(), path.filename());\n  fmt::print(\"size {}, components {}, first {}, last {}\\n\",\n             path.size(),\n             std::distance(path.begin(), path.end()),\n             *path.begin(),\n             *path.rbegin());\n}", "repository_name": "3FS", "repository_url": "https://github.com/deepseek-ai/3FS", "commit_hash": "3b273a6de226387566d10c2f9da099b70fa0d342", "file_path": "tests/meta/TestCommon.cc", "function_name": "print", "index": 2868, "label": 0}
{"input": "void test_sparselu_T()\n{\n  SparseLU<SparseMatrix<T, ColMajor>  > sparselu_colamd; \n  SparseLU<SparseMatrix<T, ColMajor>, AMDOrdering<int> > sparselu_amd; \n  SparseLU<SparseMatrix<T, ColMajor, long int>, NaturalOrdering<long int> > sparselu_natural;\n  \n  check_sparse_square_solving(sparselu_colamd,  300, 100000, true); \n  check_sparse_square_solving(sparselu_amd,     300,  10000, true);\n  check_sparse_square_solving(sparselu_natural, 300,   2000, true);\n  \n  check_sparse_square_abs_determinant(sparselu_colamd);\n  check_sparse_square_abs_determinant(sparselu_amd);\n  \n  check_sparse_square_determinant(sparselu_colamd);\n  check_sparse_square_determinant(sparselu_amd);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparselu.cpp", "function_name": "test_sparselu_T", "index": 2869, "label": 0}
{"input": "NCNN_FORCEINLINE const Mat Mat::row_range(int y, int rows) const\n{\n    return Mat(w, rows, (unsigned char*)data + (size_t)w * y * elemsize, elemsize, elempack, allocator);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/mat.h", "function_name": "Mat::row_range", "index": 2870, "label": 0}
{"input": "static NCNN_FORCEINLINE void fastFree(void* ptr)\n{\n    if (ptr)\n    {\n#if _MSC_VER\n        _aligned_free(ptr);\n#elif (defined(__unix__) || defined(__APPLE__)) && _POSIX_C_SOURCE >= 200112L || (__ANDROID__ && __ANDROID_API__ >= 17)\n        free(ptr);\n#elif __ANDROID__ && __ANDROID_API__ < 17\n        free(ptr);\n#else\n        unsigned char* udata = ((unsigned char**)ptr)[-1];\n        free(udata);\n#endif\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/ncnn.framework/Versions/A/Headers/ncnn/allocator.h", "function_name": "fastFree", "index": 2871, "label": 0}
{"input": "inline std::vector<std::string> GetAvailableProviders() {\n  char** providers;\n  int len;\n\n  auto release_fn = [&len](char** providers) {\n    \n    ThrowOnError(GetApi().ReleaseAvailableProviders(providers, len));\n  };\n\n  ThrowOnError(GetApi().GetAvailableProviders(&providers, &len));\n  std::unique_ptr<char*, decltype(release_fn)> guard(providers, release_fn);\n  std::vector<std::string> available_providers;\n  available_providers.reserve(static_cast<size_t>(len));\n  for (int i = 0; i < len; ++i) {\n    available_providers.emplace_back(providers[i]);\n  }\n  return available_providers;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "GetAvailableProviders", "index": 2872, "label": 0}
{"input": "inline __m128i _v128_cvtepu16_epi32(const __m128i& a)\n{\n    const __m128i z = _mm_setzero_si128();\n    return _mm_unpacklo_epi16(a, z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_cvtepu16_epi32", "index": 2873, "label": 0}
{"input": "typename NumTraits<typename MatrixType::Scalar>::Real matrix_function_compute_mu(const MatrixType& A)\n{\n  typedef typename plain_col_type<MatrixType>::type VectorType;\n  typename MatrixType::Index rows = A.rows();\n  const MatrixType N = MatrixType::Identity(rows, rows) - A;\n  VectorType e = VectorType::Ones(rows);\n  N.template triangularView<Upper>().solveInPlace(e);\n  return e.cwiseAbs().maxCoeff();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h", "function_name": "matrix_function_compute_mu", "index": 2874, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline Scalar dot(const QuaternionBase<OtherDerived>& other) const { return coeffs().dot(other.coeffs()); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/Quaternion.h", "function_name": "dot", "index": 2875, "label": 0}
{"input": "EIGEN_DEVICE_FUNC \n    EIGEN_STRONG_INLINE void resizeLike(const EigenBase<OtherDerived>& _other)\n    {\n      const OtherDerived& other = _other.derived();\n      internal::check_rows_cols_for_overflow<MaxSizeAtCompileTime>::run(other.rows(), other.cols());\n      const Index othersize = other.rows()*other.cols();\n      if(RowsAtCompileTime == 1)\n      {\n        eigen_assert(other.rows() == 1 || other.cols() == 1);\n        resize(1, othersize);\n      }\n      else if(ColsAtCompileTime == 1)\n      {\n        eigen_assert(other.rows() == 1 || other.cols() == 1);\n        resize(othersize, 1);\n      }\n      else resize(other.rows(), other.cols());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/PlainObjectBase.h", "function_name": "resizeLike", "index": 2876, "label": 0}
{"input": "void sparse_product_regression_test()\n{\n  \n  SparseMatrixType sm1(3,2);\n  DenseMatrixType m2(2,2);\n  sm1.setZero();\n  m2.setZero();\n\n  DenseMatrixType m3 = sm1*m2;\n\n\n  \n  \n\n  SparseMatrixType sm2(20000,2);\n  sm2.setZero();\n  DenseMatrixType m4(sm2*m2);\n\n  VERIFY_IS_APPROX( m4(0,0), 0.0 );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/sparse_product.cpp", "function_name": "sparse_product_regression_test", "index": 2877, "label": 0}
{"input": "inline void verify_impl(bool condition, const char *testname, const char *file, int line, const char *condition_as_string)\n{\n  if (!condition)\n  {\n    if(Eigen::g_test_level>0)\n      std::cerr << \"WARNING: \";\n    std::cerr << \"Test \" << testname << \" failed in \" << file << \" (\" << line << \")\"\n      << std::endl << \"    \" << condition_as_string << std::endl;\n    std::cerr << \"Stack:\\n\";\n    const int test_stack_size = static_cast<int>(Eigen::g_test_stack.size());\n    for(int i=test_stack_size-1; i>=0; --i)\n      std::cerr << \"  - \" << Eigen::g_test_stack[i] << \"\\n\";\n    std::cerr << \"\\n\";\n    if(Eigen::g_test_level==0)\n      abort();\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/main.h", "function_name": "verify_impl", "index": 2878, "label": 0}
{"input": "void test_cxx11_tensor_broadcasting()\n{\n  CALL_SUBTEST(test_simple_broadcasting<ColMajor>());\n  CALL_SUBTEST(test_simple_broadcasting<RowMajor>());\n  CALL_SUBTEST(test_vectorized_broadcasting<ColMajor>());\n  CALL_SUBTEST(test_vectorized_broadcasting<RowMajor>());\n  CALL_SUBTEST(test_static_broadcasting<ColMajor>());\n  CALL_SUBTEST(test_static_broadcasting<RowMajor>());\n  CALL_SUBTEST(test_fixed_size_broadcasting<ColMajor>());\n  CALL_SUBTEST(test_fixed_size_broadcasting<RowMajor>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_broadcasting.cpp", "function_name": "test_cxx11_tensor_broadcasting", "index": 2879, "label": 0}
{"input": "inline Index RealSchur<MatrixType>::findSmallSubdiagEntry(Index iu)\n{\n  using std::abs;\n  Index res = iu;\n  while (res > 0)\n  {\n    Scalar s = abs(m_matT.coeff(res-1,res-1)) + abs(m_matT.coeff(res,res));\n    if (abs(m_matT.coeff(res,res-1)) <= NumTraits<Scalar>::epsilon() * s)\n      break;\n    res--;\n  }\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Eigenvalues/RealSchur.h", "function_name": "RealSchur<MatrixType>::findSmallSubdiagEntry", "index": 2880, "label": 0}
{"input": "void matlab_cplx_cplx(const M& ar, const M& ai, const M& br, const M& bi, M& cr, M& ci)\n{\n  cr.noalias() += ar * br;\n  cr.noalias() -= ai * bi;\n  ci.noalias() += ar * bi;\n  ci.noalias() += ai * br;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/bench_gemm.cpp", "function_name": "matlab_cplx_cplx", "index": 2881, "label": 0}
{"input": "__device__ __forceinline__ void reduceAll(int* smem, int tid)\n        {\n            reduce<THREAD_DIM>(smem, mySum, tid, plus<int>());\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/vec_distance.hpp", "function_name": "reduceAll", "index": 2882, "label": 0}
{"input": "void DispatchQueue::dispatch(fp_t&& op) {\n    std::unique_lock<std::mutex> lock(lockMutex);\n    queue.push(std::move(op));\n\n    \n    \n    lock.unlock();\n    condition.notify_one();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/digit/dispatchqueue.cpp", "function_name": "DispatchQueue::dispatch", "index": 2883, "label": 0}
{"input": "static void test_varlist_as_index()\n{\n#ifdef EIGEN_HAS_SFINAE\n  Tensor<float, 4, DataLayout> tensor(2, 3, 5, 7);\n  tensor.setRandom();\n\n  DSizes<ptrdiff_t, 4> coeff(1,2,4,1);\n\n  VERIFY_IS_EQUAL(tensor.coeff({1,2,4,1}), tensor.coeff(coeff));\n  VERIFY_IS_EQUAL(tensor.coeffRef({1,2,4,1}), tensor.coeffRef(coeff));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_custom_index.cpp", "function_name": "test_varlist_as_index", "index": 2884, "label": 0}
{"input": "bool JSVMRuntime::isHostObject(const piper::Object& obj) const {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value obj_value = nullptr;\n  JSVMHelper::objectRef(obj, &obj_value);\n  bool result;\n  JSVM_CALL_RETURN(\n      OH_JSVM_CheckObjectTypeTag(\n          getEnv(), obj_value, detail::JSVMHostObjectProxy::GetHostObjectTag(),\n          &result),\n      false);\n  return result;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::isHostObject", "index": 2885, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n    const TensorStridingOp<const Strides, const Derived>\n    stride(const Strides& strides) const {\n      return TensorStridingOp<const Strides, const Derived>(derived(), strides);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "EIGEN_STRONG_INLINE\n    const TensorStridingOp<const Strides, const Derived>\n    stride", "index": 2886, "label": 0}
{"input": "void test_cxx11_tensor_device_sycl() {\n  cl::sycl::gpu_selector s;\n  Eigen::SyclDevice sycl_device(s);\n  CALL_SUBTEST(test_device_sycl(sycl_device));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_device_sycl.cpp", "function_name": "test_cxx11_tensor_device_sycl", "index": 2887, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void reducePacket(const Packet& p, Packet* accum) const {\n    (*accum) = pmul<Packet>(*accum, p);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorFunctors.h", "function_name": "reducePacket", "index": 2888, "label": 0}
{"input": "RadiusResultSet(DistanceType radius_, int* indices_, DistanceType* dists_, int capacity_) :\n        radius(radius_), indices(indices_), dists(dists_), capacity(capacity_)\n    {\n        init();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/result_set.h", "function_name": "RadiusResultSet", "index": 2889, "label": 0}
{"input": "void GenerateBatch(  \n    GEMMA_TYPE, const ModelWeightsStorage& model,\n    const RuntimeConfig& runtime_config,\n    const QueriesPromptTokens& queries_prompt, const QueriesPos& queries_pos,\n    const QueriesPos& queries_prefix_end, const KVCaches& kv_caches,\n    MatMulEnv* env, TimingInfo& timing_info) {\n  HWY_EXPORT_AND_DYNAMIC_DISPATCH_T(GenerateBatchT<GEMMA_TYPE>)\n  (model, runtime_config, queries_prompt, queries_pos, queries_prefix_end,\n   kv_caches, env, timing_info);\n}", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "a60b564b883fb2f85f11031e5421178b67cd794d", "file_path": "gemma/gemma-inl.h", "function_name": "GenerateBatch", "index": 2890, "label": 0}
{"input": "inline Quat<T> Quat<T>::normalize() const\n{\n    T normVal = norm();\n    if (normVal < CV_QUAT_EPS)\n    {\n        CV_Error(Error::StsBadArg, \"Cannot normalize this quaternion: the norm is too small.\");\n    }\n    return Quat<T>(w / normVal, x / normVal, y / normVal, z / normVal) ;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::normalize", "index": 2891, "label": 0}
{"input": "inline v128_t v128_cvti8x16_i16x8_high(const v128_t& a)\n{ return wasm_i16x8_shr(wasm_unpackhi_i8x16(a, a), 8); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvti8x16_i16x8_high", "index": 2892, "label": 0}
{"input": "WakeWordDetect::~WakeWordDetect() {\n    if (wakenet_data_ != nullptr) {\n        wakenet_iface_->destroy(wakenet_data_);\n        esp_srmodel_deinit(wakenet_model_);\n    }\n\n    vEventGroupDelete(event_group_);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "f5c1c30c5ea9d626b1b80dead763172c56321bdb", "file_path": "main/audio_processing/wake_word_no_afe.cc", "function_name": "WakeWordDetect::~WakeWordDetect", "index": 2893, "label": 0}
{"input": "OffscreenCanvasRenderingContext2D::OffscreenCanvasRenderingContext2D(JS::Realm& realm, OffscreenCanvas& offscreen_canvas, CanvasRenderingContext2DSettings context_attributes)\n    : PlatformObject(realm)\n    , CanvasPath(static_cast<Bindings::PlatformObject&>(*this), *this)\n    , m_canvas(offscreen_canvas)\n    , m_size(offscreen_canvas.bitmap_size_for_canvas())\n    , m_context_attributes(context_attributes)\n{\n}", "repository_name": "ladybird", "repository_url": "https://github.com/LadybirdBrowser/ladybird", "commit_hash": "2ad3ce5d37758913cb5e86cafc8f568430d4a864", "file_path": "Libraries/LibWeb/HTML/OffscreenCanvasRenderingContext2D.cpp", "function_name": "OffscreenCanvasRenderingContext2D::OffscreenCanvasRenderingContext2D", "index": 2894, "label": 0}
{"input": "static void test_sizes_as_index()\n{\n#ifdef EIGEN_HAS_SFINAE\n  Tensor<float, 4, DataLayout> tensor(2, 3, 5, 7);\n  tensor.setRandom();\n\n  DSizes<ptrdiff_t, 4> coeff(1,2,4,1);\n  Sizes<1,2,4,1> coeffC;\n\n  VERIFY_IS_EQUAL(tensor.coeff(coeffC), tensor.coeff(coeff));\n  VERIFY_IS_EQUAL(tensor.coeffRef(coeffC), tensor.coeffRef(coeff));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_custom_index.cpp", "function_name": "test_sizes_as_index", "index": 2895, "label": 0}
{"input": "inline const mpreal modf(const mpreal& v, mpreal& n)\n{\n    mpreal f(v);\n\n    \n    mpfr_frac (f.mpfr_ptr(),f.mpfr_srcptr(),mpreal::get_default_rnd());\n    mpfr_trunc(n.mpfr_ptr(),v.mpfr_srcptr());\n    return f;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "modf", "index": 2896, "label": 0}
{"input": "inline __m128i _v128_cvtepu8_epi16_high(const __m128i& a)\n{\n    const __m128i z = _mm_setzero_si128();\n    return _mm_unpackhi_epi8(a, z);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_cvtepu8_epi16_high", "index": 2897, "label": 0}
{"input": "EIGEN_STRONG_INLINE Eigen::half pfirst<Packet8h>(const Packet8h& from) {\n  return half_impl::raw_uint16_to_half(static_cast<unsigned short>(_mm_extract_epi16(from.x, 0)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "Eigen::half pfirst<Packet8h>", "index": 2898, "label": 0}
{"input": "inline Index lowerNonZeros(Index j) const {\n        return m_rowStartIndex[j + 1] - m_rowStartIndex[j];\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h", "function_name": "lowerNonZeros", "index": 2899, "label": 0}
{"input": "inline Quat<T> Quat<T>::operator*(const Quat<T> &q1) const\n{\n    Vec<T, 4> q{w, x, y, z};\n    Vec<T, 4> q2{q1.w, q1.x, q1.y, q1.z};\n    return Quat<T>(q * q2);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/quaternion.inl.hpp", "function_name": "Quat<T>::operator*", "index": 2900, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE\n  typename internal::enable_if<sizeof(T)==4,int>::type count_leading_zeros(const T val)\n  {\n#ifdef __CUDA_ARCH__\n    return __clz(val);\n#elif EIGEN_COMP_MSVC\n    unsigned long index;\n    _BitScanReverse(&index, val);\n    return 31 - index;\n#else\n    EIGEN_STATIC_ASSERT(sizeof(unsigned long long) == 8, YOU_MADE_A_PROGRAMMING_MISTAKE);\n    return __builtin_clz(static_cast<uint32_t>(val));\n#endif\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorIntDiv.h", "function_name": "EIGEN_ALWAYS_INLINE\n  typename internal::enable_if<sizeof(T)==4,int>::type count_leading_zeros", "index": 2901, "label": 0}
{"input": "ThreadPoolDevice(ThreadPoolInterface* pool, int num_cores) : pool_(pool), num_threads_(num_cores) { }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h", "function_name": "ThreadPoolDevice", "index": 2902, "label": 0}
{"input": "void SetWaitMode(hwy::PoolWaitMode wait_mode) {\n    all_packages_[0].SetWaitMode(wait_mode);\n    for (Package& package : packages_) {\n      package.SetWaitMode(wait_mode);\n    }\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "1b72c223450a9e009e2501fd35de46374d894634", "file_path": "util/threading.h", "function_name": "hwy::PoolWaitMode", "index": 2903, "label": 0}
{"input": "inline __m128i _v128_comgt_epu32(const __m128i& a, const __m128i& b)\n{\n    const __m128i delta = _mm_set1_epi32((int)0x80000000);\n    return _mm_cmpgt_epi32(_mm_xor_si128(a, delta), _mm_xor_si128(b, delta));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_sse_em.hpp", "function_name": "_v128_comgt_epu32", "index": 2904, "label": 0}
{"input": "inline cl_int clEnqueueCopyImageToBuffer(cl_command_queue p0, cl_mem p1, cl_mem p2, const size_t* p3, const size_t* p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyImageToBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp", "function_name": "clEnqueueCopyImageToBuffer", "index": 2905, "label": 0}
{"input": "__attribute__ ((noinline)) void bench_reverse(const MatrixType& m)\n{\n  int rows = m.rows();\n  int cols = m.cols();\n  int size = m.size();\n\n  int repeats = (REPEAT*1000)/size;\n  MatrixType a = MatrixType::Random(rows,cols);\n  MatrixType b = MatrixType::Random(rows,cols);\n\n  BenchTimer timerB, timerH, timerV;\n\n  Scalar acc = 0;\n  int r = internal::random<int>(0,rows-1);\n  int c = internal::random<int>(0,cols-1);\n  for (int t=0; t<TRIES; ++t)\n  {\n    timerB.start();\n    for (int k=0; k<repeats; ++k)\n    {\n      asm(\"#begin foo\");\n      b = a.reverse();\n      asm(\"#end foo\");\n      acc += b.coeff(r,c);\n    }\n    timerB.stop();\n  }\n\n  if (MatrixType::RowsAtCompileTime==Dynamic)\n    std::cout << \"dyn   \";\n  else\n    std::cout << \"fixed \";\n  std::cout << rows << \" x \" << cols << \" \\t\"\n            << (timerB.value() * REPEAT) / repeats << \"s \"\n            << \"(\" << 1e-6 * size*repeats/timerB.value() << \" MFLOPS)\\t\";\n\n  std::cout << \"\\n\";\n  \n  if (acc==123)\n    std::cout << acc;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/bench/bench_reverse.cpp", "function_name": "bench_reverse", "index": 2906, "label": 0}
{"input": "EIGEN_DEVICE_FUNC static inline Matrix<Scalar,2,2> toRotationMatrix(const Scalar& s)\n{\n  EIGEN_STATIC_ASSERT(Dim==2,YOU_MADE_A_PROGRAMMING_MISTAKE)\n  return Rotation2D<Scalar>(s).toRotationMatrix();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Geometry/RotationBase.h", "function_name": "Matrix<Scalar,2,2> toRotationMatrix", "index": 2907, "label": 0}
{"input": "inline bool array_zip_and_reduce(const array<A, N>& a, const array<B, N>& b) {\n  return ArrayZipAndReduce<Reducer, Op, A, B, N>::run(a, b);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/util/EmulateCXX11Meta.h", "function_name": "array_zip_and_reduce", "index": 2908, "label": 0}
{"input": "void Otto::DisableServoLimit() {\n    for (int i = 0; i < SERVO_COUNT; i++) {\n        if (servo_pins_[i] != -1) {\n            servo_[i].DisableLimiter();\n        }\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "7bb12f31f08f2e4353f3e3103f5910ecb54e5b1f", "file_path": "main/boards/otto-robot/otto_movements.cc", "function_name": "Otto::DisableServoLimit", "index": 2909, "label": 0}
{"input": "inline float v_reduce_sad(const v_float32x4& a, const v_float32x4& b)\n{\n    return v_reduce_sum(v_absdiff(a, b));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_reduce_sad", "index": 2910, "label": 0}
{"input": "inline void Client::set_default_headers(Headers headers) {\n  cli_->set_default_headers(std::move(headers));\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::set_default_headers", "index": 2911, "label": 0}
{"input": "inline\nSparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMatConstIterator_<_Tp>& it)\n    : SparseMatConstIterator(it)\n{}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/mat.inl.hpp", "function_name": "SparseMatConstIterator_<_Tp>::SparseMatConstIterator_", "index": 2912, "label": 0}
{"input": "static void test_const_inputs()\n{\n  Tensor<float, 2, DataLayout> in1(2, 3);\n  Tensor<float, 2, DataLayout> in2(3, 2);\n  in1.setRandom();\n  in2.setRandom();\n\n  TensorMap<Tensor<const float, 2, DataLayout> > mat1(in1.data(), 2, 3);\n  TensorMap<Tensor<const float, 2, DataLayout> > mat2(in2.data(), 3, 2);\n  Tensor<float, 2, DataLayout> mat3(2,2);\n\n  Eigen::array<DimPair, 1> dims = {{DimPair(1, 0)}};\n  mat3 = mat1.contract(mat2, dims);\n\n  VERIFY_IS_APPROX(mat3(0,0), mat1(0,0)*mat2(0,0) + mat1(0,1)*mat2(1,0) + mat1(0,2)*mat2(2,0));\n  VERIFY_IS_APPROX(mat3(0,1), mat1(0,0)*mat2(0,1) + mat1(0,1)*mat2(1,1) + mat1(0,2)*mat2(2,1));\n  VERIFY_IS_APPROX(mat3(1,0), mat1(1,0)*mat2(0,0) + mat1(1,1)*mat2(1,0) + mat1(1,2)*mat2(2,0));\n  VERIFY_IS_APPROX(mat3(1,1), mat1(1,0)*mat2(0,1) + mat1(1,1)*mat2(1,1) + mat1(1,2)*mat2(2,1));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_contraction.cpp", "function_name": "test_const_inputs", "index": 2913, "label": 0}
{"input": "void BoxAudioCodec::EnableInput(bool enable) {\n    if (enable == input_enabled_) {\n        return;\n    }\n    if (enable) {\n        esp_codec_dev_sample_info_t fs = {\n            .bits_per_sample = 16,\n            .channel = 4,\n            .channel_mask = ESP_CODEC_DEV_MAKE_CHANNEL_MASK(0),\n            .sample_rate = (uint32_t)output_sample_rate_,\n            .mclk_multiple = 0,\n        };\n        if (input_reference_) {\n            fs.channel_mask |= ESP_CODEC_DEV_MAKE_CHANNEL_MASK(1);\n        }\n        ESP_ERROR_CHECK(esp_codec_dev_open(input_dev_, &fs));\n        ESP_ERROR_CHECK(esp_codec_dev_set_in_channel_gain(input_dev_, ESP_CODEC_DEV_MAKE_CHANNEL_MASK(0), 36.0));\n    } else {\n        ESP_ERROR_CHECK(esp_codec_dev_close(input_dev_));\n    }\n    AudioCodec::EnableInput(enable);\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "8729fad9a845d99a980afc40c7e0c3a4bbcda5bf", "file_path": "main/audio_codecs/box_audio_codec.cc", "function_name": "BoxAudioCodec::EnableInput", "index": 2914, "label": 0}
{"input": "float test_index_checks(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,\n                        const Matrix<typename Distance::ElementType>& testData, const Matrix<int>& matches,\n                        int checks, float& precision, const Distance& distance, int nn = 1, int skipMatches = 0)\n{\n    typedef typename Distance::ResultType DistanceType;\n\n    Logger::info(\"  Nodes  Precision(%)   Time(s)   Time/vec(ms)  Mean dist\\n\");\n    Logger::info(\"---------------------------------------------------------\\n\");\n\n    float time = 0;\n    DistanceType dist = 0;\n    precision = search_with_ground_truth(index, inputData, testData, matches, nn, checks, time, dist, distance, skipMatches);\n\n    return time;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/index_testing.h", "function_name": "test_index_checks", "index": 2915, "label": 0}
{"input": "const TensorCwiseUnaryOp<internal::scalar_mod_op<Scalar>, const Derived>\n    operator% (Scalar rhs) const {\n      EIGEN_STATIC_ASSERT(NumTraits<Scalar>::IsInteger, YOU_MADE_A_PROGRAMMING_MISTAKE_TRY_MOD);\n      return unaryExpr(internal::scalar_mod_op<Scalar>(rhs));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorBase.h", "function_name": "operator%", "index": 2916, "label": 0}
{"input": "inline int _v_cvtsi512_si32(const __m512i& a)\n{ return _mm_cvtsi128_si32(_mm512_castsi512_si128(a)); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_avx512.hpp", "function_name": "_v_cvtsi512_si32", "index": 2917, "label": 0}
{"input": "inline void v_zip(const _Tpvec& a0, const _Tpvec& a1, _Tpvec& b0, _Tpvec& b1)\n{\n    b0.val = vec_mergeh(a0.val, a1.val);\n    b1.val = vec_mergel(a0.val, a1.val);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_vsx.hpp", "function_name": "v_zip", "index": 2918, "label": 0}
{"input": "explicit MMStorage(MMParallel& parallel) {\n    \n    parallel.ForPkg(MMParallel::kMaxPackages, [&](size_t pkg_idx) {\n      pkg_A_[pkg_idx] = AllocateAlignedRows<BF16>(Extents2D(kMaxM, kMaxK));\n\n      if (Allocator::ShouldBind()) {\n        const size_t node = parallel.Node(pkg_idx);\n        if (!Allocator::BindMemory(pkg_A_[pkg_idx].All(),\n                                   pkg_A_[pkg_idx].NumBytes(), node)) {\n          HWY_WARN(\"Failed to bind memory for package %zu\", pkg_idx);\n        }\n      }\n    });\n\n    \n    \n    \n    partial_storage_ = AllocateAlignedRows<double>(Extents2D(kMaxM, kMaxN));\n    \n    partial_ = RowPtrD(partial_storage_.All(), kMaxN,\n                       StrideForCyclicOffsets<double>(kMaxN));\n    \n    BindC(kMaxM, partial_, parallel);\n  }", "repository_name": "gemma.cpp", "repository_url": "https://github.com/google/gemma.cpp", "commit_hash": "f9d93e4a426e4121e39ac454a1e269cecc965069", "file_path": "ops/matmul.h", "function_name": "MMStorage", "index": 2919, "label": 0}
{"input": "EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::half digamma(const Eigen::half& a) {\n  return Eigen::half(Eigen::numext::digamma(static_cast<float>(a)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/SpecialFunctionsHalf.h", "function_name": "EIGEN_DEVICE_FUNC Eigen::half digamma", "index": 2920, "label": 0}
{"input": "inline const mpreal rec_sqrt(const mpreal& v, mp_rnd_t rnd_mode = mpreal::get_default_rnd())\n{\n    mpreal x(v);\n    mpfr_rec_sqrt(x.mp,v.mp,rnd_mode);\n    return x;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "rec_sqrt", "index": 2921, "label": 0}
{"input": "piper::PropNameID JSVMRuntime::createPropNameIDFromUtf8(const uint8_t* utf8,\n                                                        size_t length) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value valueStr = nullptr;\n  JSVM_CALL(OH_JSVM_CreateStringUtf8(\n      getEnv(), reinterpret_cast<const char*>(utf8), length, &valueStr));\n  auto res = JSVMHelper::createPropNameID(valueStr, getEnv());\n  return res;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createPropNameIDFromUtf8", "index": 2922, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\ndouble2 pigamma<double2>(const double2& a, const double2& x)\n{\n  using numext::igamma;\n  return make_double2(igamma(a.x, x.x), igamma(a.y, x.y));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/SpecialFunctions/arch/CUDA/CudaSpecialFunctions.h", "function_name": "pigamma", "index": 2923, "label": 0}
{"input": "static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE uint64_t PCG_XSH_RS_state(uint64_t seed) {\n  seed = seed ? seed : get_random_seed();\n  return seed * 6364136223846793005ULL + 0xda3e39cb94b95bdbULL;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h", "function_name": "PCG_XSH_RS_state", "index": 2924, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n typename Tensor::PacketReturnType packet(typename Tensor::Index index) const\n  {\n    return internal::ploadt_ro<typename Tensor::PacketReturnType, LoadMode>(m_data + index);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorContractionMapper.h", "function_name": "EIGEN_STRONG_INLINE\n typename Tensor::PacketReturnType packet", "index": 2925, "label": 0}
{"input": "static bool isValid(const NdArray<double>& inArray)\n        {\n            const Shape inShape = inArray.shape();\n            return inShape.rows == inShape.cols &&\n                   utils::essentiallyEqual(round(linalg::det<double>(inArray), 2), 1.) &&\n                   utils::essentiallyEqual(round(linalg::det<double>(inArray.transpose()), 2), 1.);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Rotations/DCM.hpp", "function_name": "inArray", "index": 2926, "label": 0}
{"input": "void verify_is_approx_upto_permutation(const VectorType& vec1, const VectorType& vec2)\n{\n  typedef typename VectorType::Scalar Scalar;\n  typedef typename NumTraits<Scalar>::Real RealScalar;\n\n  VERIFY(vec1.cols() == 1);\n  VERIFY(vec2.cols() == 1);\n  VERIFY(vec1.rows() == vec2.rows());\n  \n  Index n = vec1.rows();\n  RealScalar tol = test_precision<RealScalar>()*test_precision<RealScalar>()*numext::maxi(vec1.squaredNorm(),vec2.squaredNorm());\n  Matrix<RealScalar,Dynamic,Dynamic> diffs = (vec1.rowwise().replicate(n) - vec2.rowwise().replicate(n).transpose()).cwiseAbs2();\n  \n  VERIFY( find_pivot(tol, diffs) );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/eigensolver_complex.cpp", "function_name": "verify_is_approx_upto_permutation", "index": 2927, "label": 0}
{"input": "EIGEN_DEVICE_FUNC inline MapBase(PointerType dataPtr, Index rows, Index cols) : Base(dataPtr, rows, cols) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/MapBase.h", "function_name": "dataPtr", "index": 2928, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\ninline const IsNaNReturnType\nisNaN() const\n{\n  return IsNaNReturnType(derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h", "function_name": "IsNaNReturnType\nisNaN", "index": 2929, "label": 0}
{"input": "[[nodiscard]] Quaternion slerp(const Quaternion& inQuat2, double inPercent) const\n        {\n            return slerp(*this, inQuat2, inPercent);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Rotations/Quaternion.hpp", "function_name": "inPercent", "index": 2930, "label": 0}
{"input": "EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS\nPacket psinh(const Packet& a) { using std::sinh; return sinh(a); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/GenericPacketMath.h", "function_name": "psinh", "index": 2931, "label": 0}
{"input": "void test_nesting_ops()\n{\n  CALL_SUBTEST_1(run_nesting_ops_1(MatrixXf::Random(25,25)));\n  CALL_SUBTEST_2(run_nesting_ops_1(MatrixXcd::Random(25,25)));\n  CALL_SUBTEST_3(run_nesting_ops_1(Matrix4f::Random()));\n  CALL_SUBTEST_4(run_nesting_ops_1(Matrix2d::Random()));\n\n  Index s = internal::random<int>(1,EIGEN_TEST_MAX_SIZE);\n  CALL_SUBTEST_1( run_nesting_ops_2(MatrixXf(s,s)) );\n  CALL_SUBTEST_2( run_nesting_ops_2(MatrixXcd(s,s)) );\n  CALL_SUBTEST_3( run_nesting_ops_2(Matrix4f()) );\n  CALL_SUBTEST_4( run_nesting_ops_2(Matrix2d()) );\n  TEST_SET_BUT_UNUSED_VARIABLE(s)\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/nesting_ops.cpp", "function_name": "test_nesting_ops", "index": 2932, "label": 0}
{"input": "piper::String JSVMRuntime::createStringFromUtf8(const uint8_t* str,\n                                                size_t length) {\n  HandleScopeWrapper scope(getEnv());\n  JSVM_Value str_value = nullptr;\n  JSVM_CALL(OH_JSVM_CreateStringUtf8(\n      getEnv(), reinterpret_cast<const char*>(str), length, &str_value));\n  return JSVMHelper::createString(str_value, getEnv());\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::createStringFromUtf8", "index": 2933, "label": 0}
{"input": "CV_INLINE  CvSize2D32f  cvSize2D32f( double width, double height )\n{\n#if !(defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus))\n    CvSize2D32f s = { (float)width, (float)height };\n#else\n    CvSize2D32f s((float)width, (float)height);\n#endif\n    return s;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types_c.h", "function_name": "CvSize2D32f  cvSize2D32f", "index": 2934, "label": 0}
{"input": "void LDLT<_MatrixType,_UpLo>::_solve_impl(const RhsType &rhs, DstType &dst) const\n{\n  eigen_assert(rhs.rows() == rows());\n  \n  dst = m_transpositions * rhs;\n\n  \n  matrixL().solveInPlace(dst);\n\n  \n  \n  using std::abs;\n  const typename Diagonal<const MatrixType>::RealReturnType vecD(vectorD());\n  \n  \n  \n  RealScalar tolerance = (std::numeric_limits<RealScalar>::min)();\n\n  for (Index i = 0; i < vecD.size(); ++i)\n  {\n    if(abs(vecD(i)) > tolerance)\n      dst.row(i) /= vecD(i);\n    else\n      dst.row(i).setZero();\n  }\n\n  \n  matrixU().solveInPlace(dst);\n\n  \n  dst = m_transpositions.transpose() * dst;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Cholesky/LDLT.h", "function_name": "LDLT<_MatrixType,_UpLo>::_solve_impl", "index": 2935, "label": 0}
{"input": "void NoAudioProcessor::EnableDeviceAec(bool enable) {\n    if (enable) {\n        ESP_LOGE(TAG, \"Device AEC is not supported\");\n    }\n}", "repository_name": "xiaozhi-esp32", "repository_url": "https://github.com/78/xiaozhi-esp32", "commit_hash": "ae57131c1575dbc54806c94a6d96fce7c7e1252b", "file_path": "main/audio_processing/no_audio_processor.cc", "function_name": "NoAudioProcessor::EnableDeviceAec", "index": 2936, "label": 0}
{"input": "napi_value DebugRouterWrapper::AddGlobalHandler(napi_env env,\n                                                napi_callback_info info) {\n  napi_value js_this;\n  size_t argc = 1;\n  napi_value argv[1];\n  napi_get_cb_info(env, info, &argc, argv, &js_this, nullptr);\n  if (global_handlers_.find(argv[0]) == global_handlers_.end()) {\n    auto globalHandler = std::make_shared<HarmonyGlobalHandler>(env, argv[0]);\n    global_handlers_[argv[0]] = globalHandler;\n    debugrouter::common::DebugRouter::GetInstance().AddGlobalHandler(\n        globalHandler.get());\n  }\n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/debug_router_wrapper.cc", "function_name": "DebugRouterWrapper::AddGlobalHandler", "index": 2937, "label": 0}
{"input": "EIGEN_STRONG_INLINE void        vst1q_f32(float* to, float32x4_t from) { ::vst1q_f32((float32_t*)to,from); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h", "function_name": "vst1q_f32", "index": 2938, "label": 0}
{"input": "Celestial(const NdArray<double>& inCartesianVector)\n        {\n            if (inCartesianVector.size() != 3)\n            {\n                THROW_INVALID_ARGUMENT_ERROR(\"NdArray input must be of length 3.\");\n            }\n\n            x_ = inCartesianVector[0];\n            y_ = inCartesianVector[1];\n            z_ = inCartesianVector[2];\n\n            cartesianToPolar();\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Coordinates/ReferenceFrames/Celestial.hpp", "function_name": "Celestial", "index": 2939, "label": 0}
{"input": "base::expected<Value, JSINativeException>\nJSVMRuntime::evaluateJavaScriptBytecode(\n    const std::shared_ptr<const Buffer>& buffer,\n    const std::string& source_url) {\n  LOGE(\"evaluateJavaScriptBytecode not supported in harmony jsvm\");\n  return base::unexpected(BUILD_JSI_NATIVE_EXCEPTION(\n      \"evaluateJavaScriptBytecode not supported in harmony jsvm\"));\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.cc", "function_name": "JSVMRuntime::evaluateJavaScriptBytecode", "index": 2940, "label": 0}
{"input": "auto riemann_zeta(const NdArray<dtype>& inArray)\n    {\n        NdArray<decltype(riemann_zeta(dtype{ 0 }))> returnArray(inArray.shape());\n\n        stl_algorithms::transform(\n            inArray.cbegin(),\n            inArray.cend(),\n            returnArray.begin(),\n            [](dtype inValue) -> auto{ return riemann_zeta(inValue); });\n\n        return returnArray;\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Special/riemann_zeta.hpp", "function_name": "riemann_zeta", "index": 2941, "label": 0}
{"input": "void copyUpperTriangularPart(MatrixXf& dst, const MatrixXf& src)\n{\n  dst.triangularView<Upper>() = src.triangularView<Upper>();\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/doc/examples/TemplateKeyword_simple.cpp", "function_name": "copyUpperTriangularPart", "index": 2942, "label": 0}
{"input": "inline\nRect_<_Tp>::operator Rect_<_Tp2>() const\n{\n    return Rect_<_Tp2>(saturate_cast<_Tp2>(x), saturate_cast<_Tp2>(y), saturate_cast<_Tp2>(width), saturate_cast<_Tp2>(height));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/types.hpp", "function_name": "Rect_", "index": 2943, "label": 0}
{"input": "NdArray<dtype> randFloat(const Shape& inShape, dtype inLow, dtype inHigh = 0.)\n    {\n        return detail::randFloat(generator_, inShape, inLow, inHigh);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/randFloat.hpp", "function_name": "randFloat", "index": 2944, "label": 0}
{"input": "inline v128_t v128_cvti16x8_i32x4_high(const v128_t& a)\n{ return wasm_i32x4_shr(wasm_unpackhi_i16x8(a, a), 16); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v128_cvti16x8_i32x4_high", "index": 2945, "label": 0}
{"input": "inline T DualQuat<T>::dot(DualQuat<T> q) const\n{\n    return q.w * w + q.x * x + q.y * y + q.z * z + q.w_ * w_ + q.x_ * x_ + q.y_ * y_ + q.z_ * z_;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::dot", "index": 2946, "label": 0}
{"input": "explicit __host__ __device__ __forceinline__ BrdRowConstant(int width_, const D& val_ = VecTraits<D>::all(0)) : width(width_), val(val_) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/border_interpolate.hpp", "function_name": "BrdRowConstant", "index": 2947, "label": 0}
{"input": "void test_cxx11_tensor_empty()\n{\n   CALL_SUBTEST(test_empty_tensor());\n   CALL_SUBTEST(test_empty_fixed_size_tensor());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_empty.cpp", "function_name": "test_cxx11_tensor_empty", "index": 2948, "label": 0}
{"input": "inline Unowned<SequenceTypeInfo> TypeInfo::GetSequenceTypeInfo() const {\n  const OrtSequenceTypeInfo* out;\n  ThrowOnError(GetApi().CastTypeInfoToSequenceTypeInfo(p_, &out));\n  return Unowned<SequenceTypeInfo>{const_cast<OrtSequenceTypeInfo*>(out)};\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "TypeInfo::GetSequenceTypeInfo", "index": 2949, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\nvoid call_assignment_no_alias(Dst& dst, const Src& src)\n{\n  call_assignment_no_alias(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/AssignEvaluator.h", "function_name": "call_assignment_no_alias", "index": 2950, "label": 0}
{"input": "inline std::string CustomOpApi::KernelInfoGetAttribute<std::string>(_In_ const OrtKernelInfo* info, _In_ const char* name) {\n  size_t size = 0;\n  std::string out;\n\n  \n  OrtStatus* status = api_.KernelInfoGetAttribute_string(info, name, nullptr, &size);\n\n  if (status == nullptr) {\n    out.resize(size);\n    ThrowOnError(api_.KernelInfoGetAttribute_string(info, name, &out[0], &size));\n    out.resize(size - 1);  \n  } else {\n    ThrowOnError(status);\n  }\n  return out;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::KernelInfoGetAttribute<std::string>", "index": 2951, "label": 0}
{"input": "DoublePacket<Packet> padd(const DoublePacket<Packet> &a, const DoublePacket<Packet> &b)\n{\n  DoublePacket<Packet> res;\n  res.first  = padd(a.first, b.first);\n  res.second = padd(a.second,b.second);\n  return res;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h", "function_name": "padd", "index": 2952, "label": 0}
{"input": "__device__ EIGEN_STRONG_INLINE Eigen::half pfirst<half2>(const half2& a) {\n  return __low2half(a);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/CUDA/PacketMathHalf.h", "function_name": "EIGEN_STRONG_INLINE Eigen::half pfirst<half2>", "index": 2953, "label": 0}
{"input": "JNIEXPORT jint JNICALL\n        Java_com_btows_ncnntest_SCRFDNcnn_config(JNIEnv *env, jobject thiz, jstring cfgtxt){\n            std::string str = getStringUTF(env,cfgtxt);\n            LOGI(TAG,\"cfgstr %s\",str.c_str());\n            g_digit->config(str.c_str());\n            LOGI(TAG,\"cfgstr %s\",str.c_str());\n            g_digit->prepare();\n            return 0;\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/android/DigitJni.cpp", "function_name": "Java_com_btows_ncnntest_SCRFDNcnn_config", "index": 2954, "label": 0}
{"input": "void Camera::setDirection(const Vector3f& newDirection)\n{\n    \n    Vector3f up = this->up();\n    \n    Matrix3f camAxes;\n\n    camAxes.col(2) = (-newDirection).normalized();\n    camAxes.col(0) = up.cross( camAxes.col(2) ).normalized();\n    camAxes.col(1) = camAxes.col(2).cross( camAxes.col(0) ).normalized();\n    setOrientation(Quaternionf(camAxes));\n    \n    mViewIsUptodate = false;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/demos/opengl/camera.cpp", "function_name": "Camera::setDirection", "index": 2955, "label": 0}
{"input": "EIGEN_STRONG_INLINE void pstore<double>(double*   to, const Packet2d& from)\n{\n  \n  EIGEN_DEBUG_ALIGNED_STORE\n  Packet *vto;\n  vto = (Packet *) to;\n  vto->v2d = from;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/ZVector/PacketMath.h", "function_name": "pstore", "index": 2956, "label": 0}
{"input": "lynx::piper::QuickjsRuntime::~QuickjsRuntime() {\n  *is_runtime_destroyed_ = true;\n  ClearHostContainers();\n  if (quickjs_runtime_wrapper_) {\n    quickjs_runtime_wrapper_->RemoveObserver(this);\n  }\n  context_->Release();\n  context_.reset();\n  LOGI(\"LYNX free quickjs context\");\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/runtime/jsi/quickjs/quickjs_runtime.cc", "function_name": "lynx::piper::QuickjsRuntime::~QuickjsRuntime", "index": 2957, "label": 0}
{"input": "void test_prec_inverse_4x4()\n{\n  CALL_SUBTEST_1((inverse_permutation_4x4<Matrix4f>()));\n  CALL_SUBTEST_1(( inverse_general_4x4<Matrix4f>(200000 * g_repeat) ));\n  CALL_SUBTEST_1(( inverse_general_4x4<Matrix<float,4,4,RowMajor> >(200000 * g_repeat) ));\n\n  CALL_SUBTEST_2((inverse_permutation_4x4<Matrix<double,4,4,RowMajor> >()));\n  CALL_SUBTEST_2(( inverse_general_4x4<Matrix<double,4,4,ColMajor> >(200000 * g_repeat) ));\n  CALL_SUBTEST_2(( inverse_general_4x4<Matrix<double,4,4,RowMajor> >(200000 * g_repeat) ));\n\n  CALL_SUBTEST_3((inverse_permutation_4x4<Matrix4cf>()));\n  CALL_SUBTEST_3((inverse_general_4x4<Matrix4cf>(50000 * g_repeat)));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/prec_inverse_4x4.cpp", "function_name": "test_prec_inverse_4x4", "index": 2958, "label": 0}
{"input": "LevenbergMarquardtSpace::Status\nLevenbergMarquardt<FunctorType>::minimize(FVectorType  &x)\n{\n    LevenbergMarquardtSpace::Status status = minimizeInit(x);\n    if (status==LevenbergMarquardtSpace::ImproperInputParameters) {\n      m_isInitialized = true;\n      return status;\n    }\n    do {\n\n        status = minimizeOneStep(x);\n    } while (status==LevenbergMarquardtSpace::Running);\n     m_isInitialized = true;\n     return status;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/LevenbergMarquardt/LevenbergMarquardt.h", "function_name": "LevenbergMarquardt<FunctorType>::minimize", "index": 2959, "label": 0}
{"input": "DenseIndex Spline<_Scalar, _Dim, _Degree>::Span(\n    typename SplineTraits< Spline<_Scalar, _Dim, _Degree> >::Scalar u,\n    DenseIndex degree,\n    const typename SplineTraits< Spline<_Scalar, _Dim, _Degree> >::KnotVectorType& knots)\n  {\n    \n    if (u <= knots(0)) return degree;\n    const Scalar* pos = std::upper_bound(knots.data()+degree-1, knots.data()+knots.size()-degree-1, u);\n    return static_cast<DenseIndex>( std::distance(knots.data(), pos) - 1 );\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/src/Splines/Spline.h", "function_name": "Spline<_Scalar, _Dim, _Degree>::Span", "index": 2960, "label": 0}
{"input": "typename Distance::ResultType ensureSimpleDistance( typename Distance::ResultType dist )\n{\n    typedef typename Distance::ElementType ElementType;\n\n    simpleDistance<Distance, ElementType> dummy;\n    return dummy( dist );\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/flann/dist.h", "function_name": "ensureSimpleDistance", "index": 2961, "label": 0}
{"input": "Endian endianess(const NdArray<dtype>& inArray) noexcept\n    {\n        return inArray.endianess();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/endianess.hpp", "function_name": "endianess", "index": 2962, "label": 0}
{"input": "inline DualQuat<T> DualQuat<T>::operator*(const DualQuat<T> &q) const\n{\n    Quat<T> A = getRealPart();\n    Quat<T> B = getDualPart();\n    Quat<T> C = q.getRealPart();\n    Quat<T> D = q.getDualPart();\n    return DualQuat<T>::createFromQuat(A * C, A * D + B * C);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/dualquaternion.inl.hpp", "function_name": "DualQuat<T>::operator*", "index": 2963, "label": 0}
{"input": "void bdcsvd(const MatrixType& a = MatrixType(), bool pickrandom = true)\n{\n  MatrixType m = a;\n  if(pickrandom)\n    svd_fill_random(m);\n\n  CALL_SUBTEST(( svd_test_all_computation_options<BDCSVD<MatrixType> >(m, false)  ));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/test/bdcsvd.cpp", "function_name": "bdcsvd", "index": 2964, "label": 0}
{"input": "static void test_array()\n{\n  TensorFixedSize<float, Sizes<2, 3, 7> > mat1;\n  float val = 0.0f;\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        mat1(i,j,k) = val;\n        val += 1.0f;\n      }\n    }\n  }\n\n  TensorFixedSize<float, Sizes<2, 3, 7> > mat3;\n  mat3 = mat1.pow(3.5f);\n\n  val = 0.0f;\n  for (int i = 0; i < 2; ++i) {\n    for (int j = 0; j < 3; ++j) {\n      for (int k = 0; k < 7; ++k) {\n        VERIFY_IS_APPROX(mat3(i,j,k), powf(val, 3.5f));\n        val += 1.0f;\n      }\n    }\n  }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_fixed_size.cpp", "function_name": "test_array", "index": 2965, "label": 0}
{"input": "inline const mpreal random(unsigned int seed = 0)\n{\n#if (MPFR_VERSION >= MPFR_VERSION_NUM(3,0,0))\n    static gmp_randstate_t state;\n    static bool initialize = true;\n\n    if(initialize)\n    {\n        gmp_randinit_default(state);\n        gmp_randseed_ui(state,0);\n        initialize = false;\n    }\n\n    if(seed != 0)    gmp_randseed_ui(state,seed);\n\n    return mpfr::urandom(state);\n#else\n    if(seed != 0)    std::srand(seed);\n    return mpfr::mpreal(std::rand()/(double)RAND_MAX);\n#endif\n\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/mpreal/mpreal.h", "function_name": "random", "index": 2966, "label": 0}
{"input": "static GRunArg exec(cv::gapi::s11n::IIStream& is, uint32_t idx) {\n    if (idx == GRunArg::index_of<RMat>()) {\n        \n        using TA = typename cv::util::find_adapter_impl<RMat::IAdapter, Types...>::type;\n        return deserialize_arg_with_adapter<RMat, TA>::exec(is);\n    } else if (idx == GRunArg::index_of<MediaFrame>()) {\n        \n        using TA = typename cv::util::find_adapter_impl<MediaFrame::IAdapter, Types...>::type;\n        return deserialize_arg_with_adapter<MediaFrame, TA>::exec(is);\n    } else { \n        GRunArg arg;\n        getRunArgByIdx(is, arg, idx);\n        return arg;\n    }\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/s11n.hpp", "function_name": "cv::gapi::s11n::IIStream", "index": 2967, "label": 0}
{"input": "int gjdigit_free(gjdigit_t** pdg){\n    if(!pdg)return -1;\n    gjdigit_t* dg = *pdg;\n    if(dg->lock_munet){\n        dg->lock_munet->lock();\n        dg->lock_munet->unlock();\n        delete dg->lock_munet;\n    }\n    if(dg->ai_wenet){\n        delete dg->ai_wenet;\n        dg->ai_wenet = NULL;\n    }\n    if(dg->ai_munet){\n        delete dg->ai_munet;\n        dg->ai_munet = NULL;\n    }\n    if(dg->bnf_cache){\n        delete dg->bnf_cache;\n        dg->bnf_cache = NULL;\n    }\n    if(dg->lock_wenet){\n        delete dg->lock_wenet;\n        dg->lock_wenet = NULL;\n    }\n    if(dg->mat_gpg){\n        delete dg->mat_gpg;\n        dg->mat_gpg = NULL;\n    }\n    free(dg);\n    *pdg = NULL;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/Cpp/ios/gjdigit.cpp", "function_name": "gjdigit_free", "index": 2968, "label": 0}
{"input": "std::unique_ptr<pub::Value> LynxDevToolSetModule::SwitchDevTool(\n    std::unique_ptr<pub::Value> args, const piper::CallbackMap &callbacks) {\n  return SetSwitch(std::move(args), tasm::LynxEnv::kLynxDevToolEnable);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/lynx_devtool_set_module.cc", "function_name": "LynxDevToolSetModule::SwitchDevTool", "index": 2969, "label": 0}
{"input": "static inline LEPUSValue LEPUS_NewCFunctionMagic(LEPUSContext *ctx,\n                                                 LEPUSCFunctionMagic *func,\n                                                 const char *name, int length,\n                                                 LEPUSCFunctionEnum cproto,\n                                                 int magic) {\n  LEPUSCFunctionType ft = {.generic_magic = func};\n  return LEPUS_NewCFunction2(ctx, ft.generic, name, length, cproto, magic);\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "third_party/quickjs/include/quickjs.h", "function_name": "LEPUS_NewCFunctionMagic", "index": 2970, "label": 0}
{"input": "inline void add_all(internal::type_list<Gen1, GenNext...>)\n    {\n      add(Gen1());\n      add_all(internal::type_list<GenNext...>());\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/TensorSymmetry/DynamicSymmetry.h", "function_name": "add_all", "index": 2971, "label": 0}
{"input": "TensorConcatenationOp(const LhsXprType& lhs, const RhsXprType& rhs, Axis axis)\n        : m_lhs_xpr(lhs), m_rhs_xpr(rhs), m_axis(axis) {}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/Eigen/CXX11/src/Tensor/TensorConcatenation.h", "function_name": "TensorConcatenationOp", "index": 2972, "label": 0}
{"input": "inline int nbThreads()\n{\n  int ret;\n  internal::manage_multi_threading(GetAction, &ret);\n  return ret;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/products/Parallelizer.h", "function_name": "nbThreads", "index": 2973, "label": 0}
{"input": "block_evaluator(const XprType& block)\n    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block) \n  {\n    \n    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && \"data is not aligned\");\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/CoreEvaluators.h", "function_name": "block_evaluator", "index": 2974, "label": 0}
{"input": "NdArray<uint32> flatnonzero(const NdArray<dtype>& inArray)\n    {\n        return inArray.flatnonzero();\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Functions/flatnonzero.hpp", "function_name": "flatnonzero", "index": 2975, "label": 0}
{"input": "napi_value DevToolEnvHarmony::SetAppInfo(napi_env env,\n                                         napi_callback_info info) {\n  size_t argc = 2;\n  napi_value args[2] = {nullptr};\n  napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n  std::vector<std::string> keys;\n  base::NapiUtil::ConvertToArrayString(env, args[0], keys);\n  std::vector<std::string> values;\n  base::NapiUtil::ConvertToArrayString(env, args[1], values);\n  if (keys.size() != values.size()) {\n    return nullptr;\n  }\n  std::unordered_map<std::string, std::string> options;\n  for (size_t i = 0; i < keys.size(); ++i) {\n    options[keys[i]] = values[i];\n  }\n  DebugBridgeEmbedder::GetInstance().SetAppInfo(options);\n  return nullptr;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "b25a31dbf6562299f9062ac143f67e896208b743", "file_path": "platform/harmony/lynx_devtool/src/main/cpp/devtool_env_harmony.cc", "function_name": "DevToolEnvHarmony::SetAppInfo", "index": 2976, "label": 0}
{"input": "Image Image::ParseImage(const uint8_t* data, size_t size)\n{\n    if (data[0] == ELFMAG0 && data[1] == ELFMAG1 && data[2] == ELFMAG2 && data[3] == ELFMAG3)\n    {\n        return ElfLoadImage(data, size);\n    }\n    else if (data[0] == 'X' && data[1] == 'E' && data[2] == 'X' && data[3] == '2')\n    {\n        return Xex2LoadImage(data);\n    }\n\n    return {};\n}", "repository_name": "XenonRecomp", "repository_url": "https://github.com/hedge-dev/XenonRecomp", "commit_hash": "847842cd28a2427b9db520d2aaa7416e5dec3822", "file_path": "PowerUtils/image.cpp", "function_name": "Image::ParseImage", "index": 2977, "label": 0}
{"input": "inline void\nSVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w )\n{\n    CV_StaticAssert( nm == MIN(m, n), \"Invalid size of output vector.\");\n    Mat _a(a, false), _w(w, false);\n    SVD::compute(_a, _w);\n    CV_Assert(_w.data == (uchar*)&w.val[0]);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/operations.hpp", "function_name": "SVD::compute", "index": 2978, "label": 0}
{"input": "int testrender(int argc,char** argv){\n    FrameSource source(100,100);\n    int width = 1080;\n    int height = 1920;\n    std::string fn = \"../mybin/fg.jpg\";\n    JMat fmat(fn,1);\n    fn = \"../mybin/bg.jpg\";\n    JMat bmat(fn,1);\n    fn = \"../mybin/msk.jpg\";\n    JMat mmat(fn,1);\n    MediaData frame(fmat.refclone(),mmat.refclone(),bmat.refclone());\n    RgbVideoRenderer* render = new RgbVideoRenderer(&source);\n    NativeWindowType window = createNativeWindow(width/2,height/2);\n    render->surfaceCreated(window,width,height);\n    source.pushVidFrame(&frame);\n    \n    render->render(10);\n    getchar();\n\n    getchar();\n    render->surfaceDestroyed();\n    delete render;\n    return 0;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/linux/linuxtest.cpp", "function_name": "testrender", "index": 2979, "label": 0}
{"input": "void fwd_inv(size_t nfft)\n{\n    typedef typename NumTraits<T_freq>::Real Scalar;\n    vector<T_time> timebuf(nfft);\n    RandomFill(timebuf);\n\n    vector<T_freq> freqbuf;\n    static FFT<Scalar> fft;\n    fft.fwd(freqbuf,timebuf);\n\n    vector<T_time> timebuf2;\n    fft.inv(timebuf2,freqbuf);\n\n    T_time rmse = mag2(timebuf - timebuf2) / mag2(timebuf);\n    cout << \"roundtrip rmse: \" << rmse << endl;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/doc/examples/FFT.cpp", "function_name": "fwd_inv", "index": 2980, "label": 0}
{"input": "void ValueImpl<T>::UseCooIndices(int64_t* indices_data, size_t indices_num) {\n  ThrowOnError(GetApi().UseCooIndices(this->p_, indices_data, indices_num));\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/onnxruntime.framework/Headers/onnxruntime_cxx_inline.h", "function_name": "ValueImpl<T>::UseCooIndices", "index": 2981, "label": 0}
{"input": "inline Result Client::Delete(const std::string &path, const Headers &headers,\n                             const std::string &body,\n                             const std::string &content_type) {\n  return cli_->Delete(path, headers, body, content_type);\n}", "repository_name": "meeting-minutes", "repository_url": "https://github.com/Zackriya-Solutions/meeting-minutes", "commit_hash": "98e8722aaac81c28ffaa2ce9320aaac4aa9d13f1", "file_path": "backend/whisper-custom/server/httplib.h", "function_name": "Client::Delete", "index": 2982, "label": 0}
{"input": "EIGEN_DEVICE_FUNC\nEIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_min_op<Scalar,Scalar>, const Derived, const OtherDerived>\ncwiseMin(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const\n{\n  return CwiseBinaryOp<internal::scalar_min_op<Scalar,Scalar>, const Derived, const OtherDerived>(derived(), other.derived());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h", "function_name": "EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_min_op<Scalar,Scalar>, const Derived, const OtherDerived>\ncwiseMin", "index": 2983, "label": 0}
{"input": "void SimplicialCholeskyBase<Derived>::ordering(const MatrixType& a, ConstCholMatrixPtr &pmat, CholMatrixType& ap)\n{\n  eigen_assert(a.rows()==a.cols());\n  const Index size = a.rows();\n  pmat = &ap;\n  \n  if(!internal::is_same<OrderingType,NaturalOrdering<Index> >::value)\n  {\n    {\n      CholMatrixType C;\n      C = a.template selfadjointView<UpLo>();\n      \n      OrderingType ordering;\n      ordering(C,m_Pinv);\n    }\n\n    if(m_Pinv.size()>0) m_P = m_Pinv.inverse();\n    else                m_P.resize(0);\n    \n    ap.resize(size,size);\n    ap.template selfadjointView<Upper>() = a.template selfadjointView<UpLo>().twistedBy(m_P);\n  }\n  else\n  {\n    m_Pinv.resize(0);\n    m_P.resize(0);\n    if(int(UpLo)==int(Lower) || MatrixType::IsRowMajor)\n    {\n      \n      ap.resize(size,size);\n      ap.template selfadjointView<Upper>() = a.template selfadjointView<UpLo>();\n    }\n    else\n      internal::simplicial_cholesky_grab_input<CholMatrixType,MatrixType>::run(a, pmat, ap);\n  }  \n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/SparseCholesky/SimplicialCholesky.h", "function_name": "SimplicialCholeskyBase<Derived>::ordering", "index": 2984, "label": 0}
{"input": "void TriangularViewImpl<MatrixType,Mode,Dense>::solveInPlace(const MatrixBase<OtherDerived>& _other) const\n{\n  OtherDerived& other = _other.const_cast_derived();\n  eigen_assert( derived().cols() == derived().rows() && ((Side==OnTheLeft && derived().cols() == other.rows()) || (Side==OnTheRight && derived().cols() == other.cols())) );\n  eigen_assert((!(Mode & ZeroDiag)) && bool(Mode & (Upper|Lower)));\n  \n  if (derived().cols() == 0)\n    return;\n\n  enum { copy = (internal::traits<OtherDerived>::Flags & RowMajorBit)  && OtherDerived::IsVectorAtCompileTime && OtherDerived::SizeAtCompileTime!=1};\n  typedef typename internal::conditional<copy,\n    typename internal::plain_matrix_type_column_major<OtherDerived>::type, OtherDerived&>::type OtherCopy;\n  OtherCopy otherCopy(other);\n\n  internal::triangular_solver_selector<MatrixType, typename internal::remove_reference<OtherCopy>::type,\n    Side, Mode>::run(derived().nestedExpression(), otherCopy);\n\n  if (copy)\n    other = otherCopy;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/SolveTriangular.h", "function_name": "TriangularViewImpl<MatrixType,Mode,Dense>::solveInPlace", "index": 2985, "label": 0}
{"input": "[[noreturn]] inline void assert_abort(const char* str, int line, const char* file, const char* func)\n    {\n        std::stringstream ss;\n        ss << file << \":\" << line << \": Assertion \" << str << \" in function \" << func << \" failed\\n\";\n        cv::util::throw_error(std::logic_error(ss.str()));\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/own/assert.hpp", "function_name": "assert_abort", "index": 2986, "label": 0}
{"input": "void test_cxx11_tensor_notification()\n{\n  CALL_SUBTEST(test_notification_single());\n  CALL_SUBTEST(test_notification_multiple());\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/unsupported/test/cxx11_tensor_notification.cpp", "function_name": "test_cxx11_tensor_notification", "index": 2987, "label": 0}
{"input": "uint32_t MemoryMonitor::ScriptingEngineMode() {\n  uint32_t mode = 0;\n  bool enable_mem_monitor = Enable();\n  if (!enable_mem_monitor) {\n    return mode;\n  }\n  \n  uint32_t mem_increment_threshold_mb = MemoryChangeThresholdMb();\n  if (mem_increment_threshold_mb > 255) {\n    mem_increment_threshold_mb = 255;\n  }\n  mode = (mem_increment_threshold_mb << 24);\n  return mode;\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "0dda93e5345c8d63ac6fe154a0bd93ac04bb7bb1", "file_path": "core/services/performance/memory_monitor/memory_monitor.cc", "function_name": "MemoryMonitor::ScriptingEngineMode", "index": 2988, "label": 0}
{"input": "EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)\n  {\n    Index row = rowIndexByOuterInner(outer, inner); \n    Index col = colIndexByOuterInner(outer, inner); \n    assignCoeff(row, col);\n  }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/AssignEvaluator.h", "function_name": "assignCoeffByOuterInner", "index": 2989, "label": 0}
{"input": "static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, float* dst)\n        {\n            dst[bidx^2] = src.x * c_XYZ2sRGB_D65f[0] + src.y * c_XYZ2sRGB_D65f[1] + src.z * c_XYZ2sRGB_D65f[2];\n            dst[1]      = src.x * c_XYZ2sRGB_D65f[3] + src.y * c_XYZ2sRGB_D65f[4] + src.z * c_XYZ2sRGB_D65f[5];\n            dst[bidx]   = src.x * c_XYZ2sRGB_D65f[6] + src.y * c_XYZ2sRGB_D65f[7] + src.z * c_XYZ2sRGB_D65f[8];\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/cuda/detail/color_detail.hpp", "function_name": "XYZ2RGBConvert", "index": 2990, "label": 0}
{"input": "void ListContainerImpl::OnAttachToElementManager(ElementManager* manager) {\n  physical_pixels_per_layout_unit_ =\n      manager->GetLynxEnvConfig().PhysicalPixelsPerLayoutUnit();\n  if (base::FloatsEqual(physical_pixels_per_layout_unit_, 0.f)) {\n    physical_pixels_per_layout_unit_ = 1.f;\n  }\n}", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "4895fb1cca537816577d98fa40f0aa440d139672", "file_path": "core/renderer/ui_component/list/list_container_impl.cc", "function_name": "ListContainerImpl::OnAttachToElementManager", "index": 2991, "label": 0}
{"input": "NdArray<dtype> geometric(const Shape& inShape, double inP = 0.5)\n    {\n        return detail::geometric<dtype>(generator_, inShape, inP);\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/NumCpp/Random/geometric.hpp", "function_name": "geometric", "index": 2992, "label": 0}
{"input": "inline void CustomOpApi::ReleaseTensorTypeAndShapeInfo(OrtTensorTypeAndShapeInfo* input) {\n  api_.ReleaseTensorTypeAndShapeInfo(input);\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/third/x86/include/onnx/onnxruntime_cxx_inline.h", "function_name": "CustomOpApi::ReleaseTensorTypeAndShapeInfo", "index": 2993, "label": 0}
{"input": "inline v_float64x2 v_dotprod_expand_fast(const v_int32x4& a, const v_int32x4& b, const v_float64x2& c)\n{ return v_dotprod_expand(a, b, c); }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/core/hal/intrin_wasm.hpp", "function_name": "v_dotprod_expand_fast", "index": 2994, "label": 0}
{"input": "static inline void print(const std::vector<_Tp>& shape, const String& name = \"\")\n{\n    std::cout << toString(shape, name) << std::endl;\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/dnn/shape_utils.hpp", "function_name": "print", "index": 2995, "label": 0}
{"input": "virtual void set(const cv::util::any &a) override {\n            wref() = util::any_cast<T>(a);\n        }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/gopaque.hpp", "function_name": "cv::util::any", "index": 2996, "label": 0}
{"input": "EIGEN_STRONG_INLINE Packet2d pinsertlast(const Packet2d& a, double b)\n{\n#ifdef EIGEN_VECTORIZE_SSE4_1\n  return _mm_blend_pd(a,pset1<Packet2d>(b),(1<<1));\n#else\n  const Packet2d mask = _mm_castsi128_pd(_mm_setr_epi32(0x0,0x0,0xFFFFFFFF,0xFFFFFFFF));\n  return _mm_or_pd(_mm_andnot_pd(mask, a), _mm_and_pd(mask, pset1<Packet2d>(b)));\n#endif\n}", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-android/dh_aigc_android/duix-sdk/src/main/cpp/include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h", "function_name": "pinsertlast", "index": 2997, "label": 0}
{"input": "void SetHostObjectTemplate(JSVM_Ref object_template) {\n    host_object_template_ = object_template;\n  }", "repository_name": "lynx", "repository_url": "https://github.com/lynx-family/lynx", "commit_hash": "d472e7a8c2ce1c287fdf63e98506cdf86eed6045", "file_path": "core/runtime/jsi/jsvm/jsvm_runtime.h", "function_name": "object_template", "index": 2998, "label": 0}
{"input": "inline cv::gapi::own::Mat to_own(Mat const& m) {\n        return (m.dims == 2)\n            ?  cv::gapi::own::Mat{m.rows, m.cols, m.type(), m.data, m.step}\n            :  cv::gapi::own::Mat{to_own<int>(m.size), m.type(), m.data};\n    }", "repository_name": "Duix.mobile", "repository_url": "https://github.com/duixcom/Duix.mobile", "commit_hash": "6d54202241d4dcee9f5f8e6935b951e7c23789a5", "file_path": "duix-ios/GJLocalDigitalDemo/GJLocalDigitalSDK/GJLocalDigitalSDK/GJFrameWork/opencv2.framework/Versions/A/Headers/gapi/own/convert.hpp", "function_name": "to_own", "index": 2999, "label": 0}
