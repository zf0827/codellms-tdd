{"input": "public void saveCookiesToSharedDir() {\n\t\t\n\t\tDriverWrapper driver = drivers.values().stream().findFirst().orElse(null);\n\t\tif (driver == null) {\n\t\t\tlog.warn(\"No driver found for saving cookies\");\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tList<com.microsoft.playwright.options.Cookie> cookies = driver.getCurrentPage().context().cookies();\n\t\t\tString cookieFile = sharedDir + \"/cookies.json\";\n\t\t\ttry (java.io.FileWriter writer = new java.io.FileWriter(cookieFile)) {\n\t\t\t\twriter.write(objectMapper.writeValueAsString(cookies));\n\t\t\t}\n\t\t\tlog.info(\"Cookies saved to {}\", cookieFile);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error(\"Failed to save cookies\", e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/ChromeDriverService.java", "function_name": "saveCookiesToSharedDir", "index": 0, "label": 0}
{"input": "private Token lexUnicodeEscape() {\n    if (lookahead != '{') {\n      throw unexpectedChar(lookahead, \"{\");\n    }\n    do {\n      nextChar();\n    } while (lookahead != '}' && lookahead != EOF && Character.isLetterOrDigit(lookahead));\n    if (lookahead == '}') {\n      \n      nextChar();\n    } else {\n      throw lexError(ErrorMessages.create(\"unterminatedUnicodeEscapeSequence\", text()), span());\n    }\n    return Token.STRING_ESCAPE_UNICODE;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexUnicodeEscape", "index": 1, "label": 0}
{"input": "@Test\n  public void testTimeApis() {\n    long expected =\n        new DateTime(2005, 3, 26, 20, 0, 0, 0, DateTimeZone.UTC).plusHours(2).getMillis();\n    assertEquals(\n        expected,\n        evaluator.eval(\n            \"(new DateTime(2005, 3, 26, 12, 0, 0, 0, DateTimeZone.forID(\\\"America/Los_Angeles\\\"))\"\n                + \".toDateTime(DateTimeZone.UTC).plusHours(2).getMillis());\",\n            Collections.emptyMap()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorTest.java", "function_name": "testTimeApis", "index": 2, "label": 0}
{"input": "@Test\n  public void testEnqueueFutureExecutionNoTriggers() {\n    when(executionPlanner.calculatePlannedExecutions(any(), any(), any()))\n        .thenReturn(new ArrayList<>());\n    processor.process(() -> message);\n    Mockito.verify(triggerProducer, Mockito.times(1)).push(any(), anyInt());\n    Mockito.verifyNoInteractions(workflowLauncher);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/messageprocessors/TimeTriggerExecutionProcessorTest.java", "function_name": "testEnqueueFutureExecutionNoTriggers", "index": 3, "label": 0}
{"input": "@Override\n    protected Object callWithOneArg(String methodName, String fieldName) {\n      if (\"getFromInstance\".equals(methodName)) {\n        return \"foo\";\n      }\n      throw new UnsupportedOperationException(\"don't support method: \" + methodName);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "callWithOneArg", "index": 4, "label": 0}
{"input": "private void scanAvailableLanguages() {\n        \n        try {\n            PathMatchingResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver(Main.class.getClassLoader());\n            Resource[] resources = resourcePatternResolver.getResources(\"classpath:lang/**/*.yml\");\n            for (Resource res : resources) {\n                String langName = URLUtil.getParentName(res.getURI());\n                availableLanguages.add(langName.toLowerCase(Locale.ROOT));\n            }\n        } catch (IOException e) {\n            log.warn(\"Failed to scan bundled translations\", e);\n        }\n\n        \n        File[] files = overrideDirectory.listFiles();\n        if (files != null) {\n            for (File file : files) {\n                if (file.isDirectory()) {\n                    availableLanguages.add(file.getName().toLowerCase(Locale.ROOT));\n                }\n            }\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "00640fe4d10cb62782952a75d392f5ca0b48d193", "file_path": "src/main/java/com/ghostchu/peerbanhelper/text/TextManager.java", "function_name": "scanAvailableLanguages", "index": 5, "label": 0}
{"input": "@RequestMapping(value = \"/build\", method = RequestMethod.GET, produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n\tpublic Flux<ChatResponse> buildInteractiveHtml(String reportId) {\n\t\tif (reportId == null || reportId.isEmpty()) {\n\t\t\tlog.error(\"Report ID is null or empty\");\n\t\t\treturn Flux.error(new IllegalArgumentException(\"Report ID cannot be null or empty\"));\n\t\t}\n\t\tlog.info(\"Building interactive HTML report\");\n\t\tString reportInfo = reportService.getReport(reportId);\n\t\t\n\t\treturn interactionAgent.prompt(reportInfo).stream().chatResponse();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "63b82102b6cc53df0c79afb00ef14c4c89ca35a8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/controller/InteractiveHtmlController.java", "function_name": "buildInteractiveHtml", "index": 6, "label": 0}
{"input": "private void readAndWrite07(File file) {\n        EasyExcel.write(file, TemplateData.class)\n                .withTemplate(TestFileUtil.readFile(\"template\" + File.separator + \"template07.xlsx\")).sheet()\n                .doWrite(data());\n        EasyExcel.read(file, TemplateData.class, new TemplateDataListener()).headRowNumber(3).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/template/TemplateDataTest.java", "function_name": "readAndWrite07", "index": 7, "label": 0}
{"input": "private boolean jj_3R_94() {\n    if (jj_scan_token(LBRACE)) return true;\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_96()) jj_scanpos = xsp;\n    xsp = jj_scanpos;\n    if (jj_scan_token(81)) jj_scanpos = xsp;\n    if (jj_scan_token(RBRACE)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_94", "index": 8, "label": 0}
{"input": "private ParserError parserError(String messageKey, Object... args) {\n    return new ParserError(ErrorMessages.create(messageKey, args), spanLookahead);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parserError", "index": 9, "label": 0}
{"input": "private FunctionLiteralExpr parseFunctionLiteral(Span start) {\n    \n    var params = parseListOfParameter(Token.COMMA);\n    var endParen = expect(Token.RPAREN, \"unexpectedToken2\", \",\", \")\").span;\n    var paramList = new ParameterList(params, start.endWith(endParen));\n    expect(Token.ARROW, \"unexpectedToken\", \"->\");\n    var expr = parseExpr();\n    return new FunctionLiteralExpr(paramList, expr, start.endWith(expr.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseFunctionLiteral", "index": 10, "label": 0}
{"input": "@Test\n    public void hh1() throws IOException {\n        ExcelReader reader = EasyExcel.read(new FileInputStream(\"D:\\\\test\\\\hg2.xls\"), LockData.class,\n                new RepeatListener()).headRowNumber(0).build();\n        ReadSheet r2 = EasyExcel.readSheet(0).build();\n        reader.read(r2);\n        reader.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "hh1", "index": 11, "label": 0}
{"input": "public long getLong() {\n    Checks.notNull(\n        longValue,\n        \"getLong() should not be called on ParsableLong that is not parsed yet. \"\n            + \"Use isLong() to check if ParsableLong is a long first.\");\n    return longValue;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/ParsableLong.java", "function_name": "getLong", "index": 12, "label": 0}
{"input": "@Test\n  public void testAddSignal() throws Exception {\n    SignalCreateRequest request =\n        loadObject(\"fixtures/api/sample-signal-create-request.json\", SignalCreateRequest.class);\n    when(instanceDao.addSignalInstance(any(), any(), any(), any())).thenReturn(12L);\n    var instance = brokerDao.addSignal(request);\n    assertEquals(\"signal_a\", instance.getName());\n    assertEquals(\"test-request-id\", instance.getInstanceId());\n    assertEquals(12L, instance.getSeqId());\n    assertNull(instance.getDetails());\n    verify(instanceDao, times(1)).addSignalInstance(any(), any(), any(), any());\n    verify(paramDao, times(1)).addSignalParams(any(), any(), anyLong());\n    verify(queueProducer, times(1)).push(any(SignalInstance.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testAddSignal", "index": 13, "label": 0}
{"input": "public Builder clearField4() {\n                bitField0_ = (bitField0_ & ~0x00000008);\n                field4_ = 0;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "clearField4", "index": 14, "label": 0}
{"input": "private char nextChar() {\n    var tmp = lookahead;\n    cursor++;\n    if (cursor >= size) {\n      lookahead = EOF;\n    } else {\n      lookahead = source[cursor];\n    }\n    return tmp;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "nextChar", "index": 15, "label": 0}
{"input": "@Test\n  public void testVersionChangeEventRoundTripSerde() throws Exception {\n    WorkflowVersionUpdateJobEvent sampleEvent =\n        loadObject(\n            \"fixtures/jobevents/sample-workflow-version-job-event.json\",\n            WorkflowVersionUpdateJobEvent.class);\n    assertEquals(\n        sampleEvent,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(sampleEvent), WorkflowVersionUpdateJobEvent.class));\n\n    MaestroEvent event = sampleEvent.toMaestroEvent(\"test-cluster\");\n    assertEquals(MaestroEvent.Type.WORKFLOW_VERSION_CHANGE_EVENT, event.getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/jobevents/WorkflowVersionUpdateJobEventTest.java", "function_name": "testVersionChangeEventRoundTripSerde", "index": 16, "label": 0}
{"input": "private boolean jj_3R_21() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_32()) {\n      jj_scanpos = xsp;\n      if (jj_3R_33()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_21", "index": 17, "label": 0}
{"input": "@Test\n  public void shouldByPassStepDependencies() {\n    User user = User.create(\"maestro\");\n    long actionTime = 12345L;\n    stepDependencies.bypass(user, actionTime);\n    assertThat(stepDependencies.isSatisfied()).isTrue();\n    assertThat(stepDependencies.getInfo())\n        .extracting(\"message\")\n        .isEqualTo(\"Step dependencies have been bypassed by user maestro\");\n    assertThat(stepDependencies.getInfo()).extracting(\"timestamp\").isEqualTo(actionTime);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/StepDependenciesTest.java", "function_name": "shouldByPassStepDependencies", "index": 18, "label": 0}
{"input": "@Test\n  public void testCallIncrementDateInt() {\n    SelType res =\n        SelUtilFunc.INSTANCE.call(\n            \"incrementDateInt\", new SelType[] {SelString.of(\"20190101\"), SelLong.of(5)});\n    assertEquals(\"STRING: 20190106\", res.type() + \": \" + res.toString());\n    res =\n        SelUtilFunc.INSTANCE.call(\n            \"incrementDateInt\", new SelType[] {SelLong.of(\"20190101\"), SelLong.of(5)});\n    assertEquals(\"STRING: 20190106\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallIncrementDateInt", "index": 19, "label": 0}
{"input": "@Bean\n  @DependsOn({\"TaskMappers\"})\n  public MaestroGateTask maestroGateTask(\n      MaestroStepInstanceDao stepInstanceDao,\n      @Qualifier(MAESTRO_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating Maestro gateTask within Spring boot...\");\n    return new MaestroGateTask(stepInstanceDao, objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "maestroGateTask", "index": 20, "label": 0}
{"input": "Operator(int prec, boolean isLeftAssoc) {\n    this.prec = prec;\n    this.isLeftAssoc = isLeftAssoc;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "fe2e4aa1a44e6e6562af8bc12229350855cc5ed4", "file_path": "pkl-parser/src/main/java/org/pkl/parser/syntax/Operator.java", "function_name": "Operator", "index": 21, "label": 0}
{"input": "public void addLog(String log) {\n        sharedPreferences.edit().putString(\"APP_LOG\", log).apply();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/FileManager.java", "function_name": "addLog", "index": 22, "label": 0}
{"input": "private static void jj_la1_init_3() {\n    jj_la1_3 =\n        new int[] {\n          0x0, 0xc, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x11e000, 0x0, 0x0, 0x0, 0x0,\n          0x0, 0x0, 0x0, 0xc, 0xc, 0x230, 0x230, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0,\n          0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0,\n        };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_la1_init_3", "index": 23, "label": 0}
{"input": "private static boolean isValidTaskWithParamData(Task task) {\n    return task.getStatus().isSuccessful()\n        && task.getStatus().isTerminal()\n        && isUserDefinedTask(task);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "isValidTaskWithParamData", "index": 24, "label": 0}
{"input": "@Bean\n  public WorkflowHelper getWorkflowHelper(\n      ParamsManager paramsManager,\n      ParamEvaluator paramEvaluator,\n      DagTranslator dagTranslator,\n      MaestroParamExtensionRepo paramExtensionRepo,\n      MaestroJobEventPublisher maestroJobEventPublisher) {\n    LOG.info(\"Creating WorkflowHelper via spring boot...\");\n    return new WorkflowHelper(\n        paramsManager, paramEvaluator, dagTranslator, paramExtensionRepo, maestroJobEventPublisher);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "getWorkflowHelper", "index": 25, "label": 0}
{"input": "private void copyLast100LinesToClipboard() {\n        String logText = logs.getText().toString();\n        String[] logLines = logText.split(\"\\n\");\n        int totalLines = logLines.length;\n\n        \n        Deque<String> last100Lines = new ArrayDeque<>(100);\n        last100Lines.addAll(Arrays.asList(logLines).subList(Math.max(0, totalLines - 100), totalLines));\n\n        StringBuilder sb = new StringBuilder();\n        for (String line : last100Lines) {\n            sb.append(line).append(\"\\n\");\n        }\n\n        String last100Log = sb.toString();\n        ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);\n        ClipData clip = ClipData.newPlainText(\"Log\", last100Log);\n        clipboard.setPrimaryClip(clip);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "9e764c3cdf47f8726f4312638f875fe4ad14ab4e", "file_path": "app/src/main/java/org/bepass/oblivion/LogActivity.java", "function_name": "copyLast100LinesToClipboard", "index": 26, "label": 0}
{"input": "public Map<String, String> getMetadata() {\n    return Map.of(\n        \"orchestrator\", \"maestro\",\n        \"workflow_identity\", workflowSummary.getIdentity(),\n        \"step_identity\", runtimeSummary.getIdentity());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/kubernetes/KubernetesStepContext.java", "function_name": "getMetadata", "index": 27, "label": 0}
{"input": "@Override\n    public void tagInitSpan(\n        Span initSpan, WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n      initSpan.tag(\"id\", workflowSummary.getWorkflowId());\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tracing/MaestroTracingManagerTest.java", "function_name": "tagInitSpan", "index": 28, "label": 0}
{"input": "@Autowired\n\tpublic ChatController(@Qualifier(\"deepResearch\") StateGraph stateGraph, SearchBeanUtil searchBeanUtil)\n\t\t\tthrows GraphStateException {\n\t\tSaverConfig saverConfig = SaverConfig.builder().register(SaverConstant.MEMORY, new MemorySaver()).build();\n\t\tthis.compiledGraph = stateGraph\n\t\t\t.compile(CompileConfig.builder().saverConfig(saverConfig).interruptBefore(\"human_feedback\").build());\n\t\tthis.searchBeanUtil = searchBeanUtil;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "04365b73df2bba24e112a8a8d24969cd4ce844b8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/controller/ChatController.java", "function_name": "ChatController", "index": 29, "label": 0}
{"input": "@Test\n    public void lastRowNumXSSF2() throws IOException {\n        String sourceFile = \"src/test/resources/poi/last_row_number_xssf_date_test.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        XSSFWorkbook xssfWorkbook = new XSSFWorkbook(file);\n        LOGGER.info(\"一共:{}个sheet\", xssfWorkbook.getNumberOfSheets());\n        XSSFSheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n        XSSFRow row = xssfSheet.getRow(0);\n        LOGGER.info(\"第一行数据:{}\", row);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "lastRowNumXSSF2", "index": 30, "label": 0}
{"input": "@JsonIgnore\n  public void addOne(\n      long iterationId, WorkflowInstance.Status status, WorkflowRollupOverview overview) {\n    if (status.isTerminal()) {\n      addTerminalOne(status, overview);\n    } else {\n      addRunningOne(status, overview);\n    }\n    if (details == null) {\n      details = new ForeachDetails(new EnumMap<>(WorkflowInstance.Status.class));\n    }\n    details.add(iterationId, status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "addOne", "index": 31, "label": 0}
{"input": "private void readAndWriteInputStream(File file, ExcelTypeEnum excelTypeEnum) throws Exception {\n        EasyExcel.write(new FileOutputStream(file), SimpleData.class).excelType(excelTypeEnum).sheet().doWrite(data());\n        \n        EasyExcel.read(new FileInputStream(file), SimpleData.class, new SimpleDataListener()).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "a58eb2fbe032b79f9012cb8f0af034c47183f723", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/simple/SimpleDataTest.java", "function_name": "readAndWriteInputStream", "index": 32, "label": 0}
{"input": "@Test\n  public void testStepParamSanity() {\n    Map<String, Parameter> stepParams =\n        paramsManager.generateMergedStepParams(workflowSummary, step, stepRuntime, runtimeSummary);\n    Assert.assertTrue(stepParams.isEmpty());\n    when(defaultParamManager.getDefaultStepParams())\n        .thenReturn(\n            Collections.singletonMap(\n                \"workflow_id\",\n                ParamDefinition.buildParamDefinition(\"workflow_id\", \"test-workflow\")));\n    stepParams =\n        paramsManager.generateMergedStepParams(workflowSummary, step, stepRuntime, runtimeSummary);\n    Assert.assertFalse(stepParams.isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsManagerTest.java", "function_name": "testStepParamSanity", "index": 33, "label": 0}
{"input": "@Test\n  public void testGetBatchStepInstancesArtifactsFromListStepNonExistent() throws IOException {\n    MaestroStepInstanceDao stepDaoSpy = Mockito.spy(stepDao);\n    StepInstance siSubWf = loadObject(TEST_STEP_INSTANCE_SUBWORKFLOW, StepInstance.class);\n    Map<String, Long> stepIdToRunId = new LinkedHashMap<>();\n    stepIdToRunId.put(\"step_113154651215\", 1L);\n\n    AssertHelper.assertThrows(\n        \"step doesn't exist\",\n        MaestroNotFoundException.class,\n        \"not found (either empty, not created, or deleted)\",\n        () ->\n            stepDaoSpy.getBatchStepInstancesArtifactsFromList(\n                siSubWf.getWorkflowId(), siSubWf.getWorkflowInstanceId(), stepIdToRunId));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetBatchStepInstancesArtifactsFromListStepNonExistent", "index": 34, "label": 0}
{"input": "@Test\n  public void testScheduleWithoutDelay() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    groupActor.schedule(Action.GROUP_START, 0);\n    verify(context, times(0)).schedule(any(), anyLong());\n    verifyActions(groupActor, Action.GROUP_START);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testScheduleWithoutDelay", "index": 35, "label": 0}
{"input": "private void doEvalMap(VirtualFrame frame, VmClass parent, ObjectData data, VmMap iterable) {\n    if (isTypedObjectClass(parent) || parent == getListingClass()) {\n      CompilerDirectives.transferToInterpreter();\n      throw exceptionBuilder()\n          .evalError(\"cannotSpreadObject\", iterable.getVmClass(), parent)\n          .withHint(\"`Map` can only be spread into objects of type `Dynamic` and `Mapping`.\")\n          .withProgramValue(\"Value\", iterable)\n          .build();\n    }\n    for (var entry : iterable) {\n      var member = VmUtils.createSyntheticObjectEntry(\"\", VmUtils.getValue(entry));\n      data.addMember(frame, VmUtils.getKey(entry), member, this);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "doEvalMap", "index": 36, "label": 0}
{"input": "@Override\n  public long getInProgressTaskCount(String taskDefName) {\n    return searchInProgressTaskIdsByName(taskDefName).size();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getInProgressTaskCount", "index": 37, "label": 0}
{"input": "public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest chatRequest,\n\t\t\tMultiValueMap<String, String> additionalHttpHeader) {\n\n\t\tAssert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(!chatRequest.stream(), \"Request must set the stream property to false.\");\n\t\tAssert.notNull(additionalHttpHeader, \"The additional HTTP headers can not be null.\");\n\n\t\tvar chatCompletionUri = this.completionsPath;\n\t\tif (chatRequest.multiModel()) {\n\t\t\tchatCompletionUri = \"/api/v1/services/aigc/multimodal-generation/generation\";\n\t\t}\n\n\t\t\n\t\treturn this.restClient.post()\n\t\t\t\t.uri(chatCompletionUri)\n\t\t\t\t.headers(headers -> {\n\t\t\t\t\theaders.addAll(additionalHttpHeader);\n\t\t\t\t\taddDefaultHeadersIfMissing(headers);\n\t\t\t\t})\n\t\t\t\t.body(chatRequest)\n\t\t\t\t.retrieve()\n\t\t\t\t.toEntity(ChatCompletion.class);\n\t\t\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "chatCompletionEntity", "index": 38, "label": 0}
{"input": "@JsonSetter(\"actions\")\n  public void deserializeActions(final Set<String> actionsStr) {\n    if (actionsStr != null && !actionsStr.isEmpty()) {\n      actions = new HashSet<>();\n      actionsStr.forEach(s -> actions.add(Action.valueOf(s.toUpperCase(Locale.US))));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/alerting/AlertingTypeConfig.java", "function_name": "deserializeActions", "index": 39, "label": 0}
{"input": "private static SheetHandlerExecutionChain getSheetHandlerExecutionChain(SheetWriteHandlerContext context,\n            boolean runOwn) {\n        AbstractWriteHolder abstractWriteHolder = (AbstractWriteHolder) context.getWriteContext().currentWriteHolder();\n        if (runOwn) {\n            return abstractWriteHolder.getOwnSheetHandlerExecutionChain();\n        } else {\n            return abstractWriteHolder.getSheetHandlerExecutionChain();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/WriteHandlerUtils.java", "function_name": "getSheetHandlerExecutionChain", "index": 40, "label": 0}
{"input": "@Bean\n  public StringCodec stringCodec() {\n    return new StringCodec(Collections.singletonList(new GZIPCompressor()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "stringCodec", "index": 41, "label": 0}
{"input": "@Test\n  public void testMergeCannotModifySource() {\n    \n            ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeCannotModifySource", "index": 42, "label": 0}
{"input": "private void setStepInstanceRuntimeState(StepInstance.Status status) {\n    Mockito.when(stepRuntimeState.getStatus()).thenReturn(status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "setStepInstanceRuntimeState", "index": 43, "label": 0}
{"input": "private void analysisUse1904WindowDate(XSSFReader xssfReader, XlsxReadWorkbookHolder xlsxReadWorkbookHolder)\n            throws Exception {\n        if (xlsxReadWorkbookHolder.globalConfiguration().getUse1904windowing() != null) {\n            return;\n        }\n        InputStream workbookXml = xssfReader.getWorkbookData();\n        WorkbookDocument ctWorkbook = WorkbookDocument.Factory.parse(workbookXml);\n        CTWorkbook wb = ctWorkbook.getWorkbook();\n        CTWorkbookPr prefix = wb.getWorkbookPr();\n        if (prefix != null && prefix.getDate1904()) {\n            xlsxReadWorkbookHolder.getGlobalConfiguration().setUse1904windowing(Boolean.TRUE);\n        } else {\n            xlsxReadWorkbookHolder.getGlobalConfiguration().setUse1904windowing(Boolean.FALSE);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/XlsxSaxAnalyser.java", "function_name": "analysisUse1904WindowDate", "index": 44, "label": 0}
{"input": "@Override\n    protected @Nullable Object executeImpl(VirtualFrame frame) {\n      var repetitions = (long) frame.getArguments()[2];\n      for (long i = 0; i < repetitions; i++) {\n        blackholeNode.executeGeneric(frame);\n      }\n      LoopNode.reportLoopCount(\n          this, repetitions > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) repetitions);\n      return null;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "17f431370a9560776d7e23c5ebe3459d4273eb54", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/benchmark/MicrobenchmarkNodes.java", "function_name": "executeImpl", "index": 45, "label": 0}
{"input": "@Bean\n  public MaestroSignalTriggerDao maestroSignalTriggerDao(\n      DataSource maestroDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroEngineProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating maestroSignalTriggerDao within Spring boot...\");\n    return new MaestroSignalTriggerDao(maestroDataSource, objectMapper, props, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroSignalTriggerDao", "index": 46, "label": 0}
{"input": "@Test\n  public void testGetNewProperties() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID1);\n    Properties newProps = new Properties();\n    newProps.setAlerting(null);\n    PropertiesSnapshot ps = wfd.getPropertiesSnapshot();\n\n    \n    Properties resetAllowed =\n        PropertiesUpdateType.ADD_WORKFLOW_DEFINITION.getNewProperties(newProps, ps);\n    assertNull(resetAllowed.getAlerting());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testGetNewProperties", "index": 47, "label": 0}
{"input": "private Cell createCellIfNecessary(Row row, Integer lastColumnIndex,\n            CellWriteHandlerContext cellWriteHandlerContext) {\n        Cell cell = row.getCell(lastColumnIndex);\n        if (cell != null) {\n            return cell;\n        }\n        WriteHandlerUtils.beforeCellCreate(cellWriteHandlerContext);\n        cell = row.createCell(lastColumnIndex);\n        cellWriteHandlerContext.setCell(cell);\n        \n        WriteHandlerUtils.afterCellCreate(cellWriteHandlerContext);\n        return cell;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/executor/ExcelWriteFillExecutor.java", "function_name": "createCellIfNecessary", "index": 48, "label": 0}
{"input": "@Test\n  public void testMatchSignalForStepDependencyWithParams() {\n    SignalMatchDto matchDto =\n        new SignalMatchDto(\n            \"signal_a\",\n            List.of(\n                new SignalMatchDto.ParamMatchDto(\n                    \"foo\", SignalParamValue.of(123), SignalOperator.EQUALS_TO)));\n    brokerDao.matchSignalForStepDependency(matchDto);\n    verify(paramDao, times(1)).matchSignalDependency(matchDto);\n    verify(instanceDao, times(0)).matchSignalDependency(matchDto);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testMatchSignalForStepDependencyWithParams", "index": 49, "label": 0}
{"input": "private float getExcelHeight(XSSFSheet sheet) {\n        float totalHeight = 0;\n        for (int i = 0; i < sheet.getPhysicalNumberOfRows(); i++) {\n            totalHeight += sheet.getRow(i).getHeight();\n        }\n        return totalHeight;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxImageTableRenderer.java", "function_name": "getExcelHeight", "index": 50, "label": 0}
{"input": "@JsonIgnore\n  public void refreshDetail() {\n    if (details != null) {\n      details.refresh();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "refreshDetail", "index": 51, "label": 0}
{"input": "@Bean\n  public MaestroStartTask maestroStartTask(\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      ExecutionDAO executionDao,\n      @Qualifier(MAESTRO_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating Maestro startTask within Spring boot...\");\n    return new MaestroStartTask(instanceDao, stepInstanceDao, executionDao, objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "maestroStartTask", "index": 52, "label": 0}
{"input": "@Test\n  public void testLargeNestedForLoopExpr() throws Exception {\n    visitor = new SelParserEvaluationVisitor(128, 10000, 10000, 1000000000L);\n    MemoryCounter.setMemoryLimit(500000000);\n    SelType res =\n        run(\n            \"m=0; \"\n                + \"for(i = 0;i < 1000;i += 1) {\"\n                + \"  for(j = 0; j < 100; j += 1) {\"\n                + \"    for(k = 0; k < 100; k += 1) {\\n\"\n                + \"      m += 1;\"\n                + \"  }}}\"\n                + \"for(i = 0;i < 100;i += 1) {\"\n                + \"  for(j = 0; j < 100; j += 1) {\"\n                + \"    for(k = 0; k < 100; k += 1) {\\n\"\n                + \"      m += 1;\"\n                + \"  }}}\"\n                + \"for(i = 0;i < 1000;i += 1) {\"1);\n    assertEquals(\"for(i = 0;i < 1000;i += 1) {\"2, res.type() + \"for(i = 0;i < 1000;i += 1) {\"3 + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testLargeNestedForLoopExpr", "index": 53, "label": 0}
{"input": "@Test\n  public void testStepWorkflowCreate() {\n    ParamsMergeHelper.MergeContext mergeContext =\n        ParamsMergeHelper.MergeContext.workflowCreate(ParamSource.DEFINITION, true);\n    assertEquals(ParamSource.DEFINITION, mergeContext.getMergeSource());\n    assertTrue(mergeContext.isUpstreamMerge());\n    assertFalse(mergeContext.isSystem());\n\n    mergeContext = ParamsMergeHelper.MergeContext.workflowCreate(ParamSource.SYSTEM, false);\n    assertEquals(ParamSource.SYSTEM, mergeContext.getMergeSource());\n    assertFalse(mergeContext.isUpstreamMerge());\n    assertTrue(mergeContext.isSystem());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testStepWorkflowCreate", "index": 54, "label": 0}
{"input": "private void connected() {\n        stateText.setText(\"اتصال برقرار شد\");\n        switchButton.setChecked(true, false);\n        getIPDetails();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef0fcfd4c01010bae03a588b4a50ce4b33749f7d", "file_path": "app/src/main/java/org/bepass/oblivion/MainActivity.java", "function_name": "connected", "index": 55, "label": 0}
{"input": "@Test\n  public void testIsDone() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-dag-test-3-wf.json\", WorkflowCreateRequest.class);\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setRuntimeWorkflow(request.getWorkflow());\n    Map<String, Boolean> idStatusMap = new LinkedHashMap<>();\n    idStatusMap.put(\"job_1\", Boolean.FALSE);\n    Assert.assertTrue(\n        DagHelper.isDone(new DagTranslator(MAPPER).translate(instance), idStatusMap, null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testIsDone", "index": 56, "label": 0}
{"input": "@Test\n  public void testActivate() {\n    when(workflowDao.activate(\"sample-minimal-wf\", \"1\", tester))\n        .thenReturn(\n            WorkflowVersionUpdateJobEvent.create(\"sample-minimal-wf\", 1L, 0L, tester, \"test log\"));\n    WorkflowActionResponse response = actionHandler.activate(\"sample-minimal-wf\", \"1\", tester);\n    verify(workflowDao, times(1)).activate(\"sample-minimal-wf\", \"1\", tester);\n    assertEquals(\"sample-minimal-wf\", response.getWorkflowId());\n    assertEquals(1, response.getWorkflowVersionId());\n    assertEquals(\"test log\", response.getTimelineEvent().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testActivate", "index": 57, "label": 0}
{"input": "@Test\n  public void testShouldAllowOverrideTimeout() {\n    String entrypoint = papermillEntrypointBuilder.generatePapermillRuntime(context).entrypoint();\n    assertTrue(entrypoint.contains(\"'--start_timeout' '100'\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilderTest.java", "function_name": "testShouldAllowOverrideTimeout", "index": 58, "label": 0}
{"input": "@Test\n  public void testRunForActionFlowLaunchStart() {\n    groupActor.runForAction(new Action.FlowLaunch(flow, false));\n\n    verify(context, times(1)).run(any());\n    var child = groupActor.getChild(flow.getReference());\n    verifyActions(child, Action.FLOW_START);\n\n    groupActor.runForAction(new Action.FlowLaunch(flow, true));\n    verify(context, times(1)).run(any());\n    assertEquals(child, groupActor.getChild(flow.getReference()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/GroupActorTest.java", "function_name": "testRunForActionFlowLaunchStart", "index": 59, "label": 0}
{"input": "@Override\n    public XlsxReadWorkbookHolder xlsxReadWorkbookHolder() {\n        return (XlsxReadWorkbookHolder) readWorkbookHolder();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/xlsx/DefaultXlsxReadContext.java", "function_name": "xlsxReadWorkbookHolder", "index": 60, "label": 0}
{"input": "@Test\n  public void isEmpty() {\n    Set<ConstraintViolation<TestId>> violations = validator.validate(new TestId(\"\"));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestId> violation = violations.iterator().next();\n    assertEquals(\"\", violation.getInvalidValue());\n    assertEquals(\"[maestro id or name reference] cannot be null or empty\", violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/MaestroReferenceIdConstraintTest.java", "function_name": "isEmpty", "index": 61, "label": 0}
{"input": "private TimeTriggerExecution convertToExecution(Workflow workflow, TriggerUuids current) {\n    var timeTriggerWithWatermarks =\n        workflow.getTimeTriggers().stream()\n            .map(\n                t ->\n                    TimeTriggerWithWatermark.builder()\n                        .lastTriggerTimestamp(System.currentTimeMillis())\n                        .timeTrigger(t)\n                        .build())\n            .toList();\n    return TimeTriggerExecution.builder()\n        .workflowId(workflow.getId())\n        .workflowVersion(Constants.TIME_TRIGGER_WORKFLOW_VERSION)\n        .workflowTriggerUuid(current.getTimeTriggerUuid())\n        .timeTriggersWithWatermarks(timeTriggerWithWatermarks)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/TimeTriggerSubscriptionClient.java", "function_name": "convertToExecution", "index": 62, "label": 0}
{"input": "public ViewHolder(@NonNull View itemView) {\n            super(itemView);\n            showSystemApps = itemView.findViewById(R.id.showSystemApps);\n            disabled = itemView.findViewById(R.id.disabled);\n            blacklist = itemView.findViewById(R.id.blacklist);\n        }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/SplitTunnelOptionsAdapter.java", "function_name": "ViewHolder", "index": 63, "label": 0}
{"input": "@Override\n  public List<String> searchRecentRunningWorkflows(\n      int lastModifiedHoursAgoFrom, int lastModifiedHoursAgoTo) {\n    throw new UnsupportedOperationException(\n        \"This method is not implemented in CockroachDBIndexDAO.\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "searchRecentRunningWorkflows", "index": 64, "label": 0}
{"input": "@JsonIgnore\n  public Map<WorkflowInstance.Status, List<Long>> flatten(\n      Predicate<WorkflowInstance.Status> condition) {\n    return info.entrySet().stream()\n        .filter(e -> condition.test(e.getKey()))\n        .collect(\n            Collectors.toMap(\n                Map.Entry::getKey,\n                e -> {\n                  List<Long> instanceIds = new ArrayList<>();\n                  for (Interval interval : e.getValue()) {\n                    for (long id = interval.start; id <= interval.end; ++id) {\n                      instanceIds.add(id);\n                    }\n                  }\n                  return instanceIds;\n                }));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachDetails.java", "function_name": "flatten", "index": 65, "label": 0}
{"input": "@Test\n  public void testGetFlowsFromWithError() {\n    Mockito.doThrow(new MaestroInternalError(\"test\")).when(flowDao).getFlows(group, 10, \"\");\n    assertNull(context.getFlowsFrom(group, 10, \"\"));\n    verify(flowDao, times(1)).getFlows(group, 10, \"\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testGetFlowsFromWithError", "index": 66, "label": 0}
{"input": "private boolean joinKeysWithDifferentSize(\n        SignalTrigger trigger, ConstraintValidatorContext context) {\n      long keyCount =\n          trigger.getDefinitions().values().stream()\n              .mapToInt(entry -> entry.getJoinKeys() == null ? 0 : entry.getJoinKeys().length)\n              .distinct()\n              .count();\n      if (keyCount > 1) {\n        context\n            .buildConstraintViolationWithTemplate(\n                \"[signal-trigger] the join_keys lengths between signals in the signal triggers must be the same\")\n            .addConstraintViolation();\n        return true;\n      }\n      return false;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/SignalTriggerConstraint.java", "function_name": "joinKeysWithDifferentSize", "index": 67, "label": 0}
{"input": "private StepRuntimeSummary cloneSummary(StepRuntimeSummary summary) {\n    StepAction latestAction = summary.getPendingAction();\n    StepRuntimeSummary cloned = objectMapper.convertValue(summary, StepRuntimeSummary.class);\n    cloned.setPendingAction(latestAction);\n    return cloned;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeManager.java", "function_name": "cloneSummary", "index": 68, "label": 0}
{"input": "private String decompileFunctionByName(String name) {\n        Program program = getCurrentProgram();\n        if (program == null) return \"No program loaded\";\n        DecompInterface decomp = new DecompInterface();\n        decomp.openProgram(program);\n        for (Function func : program.getFunctionManager().getFunctions(true)) {\n            if (func.getName().equals(name)) {\n                DecompileResults result = decomp.decompileFunction(func, 30, new ConsoleTaskMonitor());\n                if (result != null && result.decompileCompleted()) {\n                    return result.getDecompiledFunction().getC();\n                } else return \"Decompilation failed\";\n            }\n        }\n        return \"Function not found\";\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "decompileFunctionByName", "index": 69, "label": 0}
{"input": "private List<SignalParamDto> createSignalParams(SignalCreateRequest request) {\n    if (request.getParams() == null) {\n      return null;\n    }\n    return request.getParams().entrySet().stream()\n        .map(\n            e ->\n                new SignalParamDto(\n                    request.getName(), e.getKey(), IdHelper.encodeValue(e.getValue())))\n        .toList();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "createSignalParams", "index": 70, "label": 0}
{"input": "Span modifierSpan(Span or) {\n      if (!modifiers.isEmpty()) {\n        return modifiers.get(0).span();\n      }\n      return or;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "modifierSpan", "index": 71, "label": 0}
{"input": "private int terminateQueuedInstance(\n      Connection conn, WorkflowInstance instance, WorkflowInstance.Status status, String reason)\n      throws SQLException {\n    TimelineEvent timelineEvent =\n        TimelineLogEvent.warn(TERMINATION_MESSAGE_TEMPLATE, status.name(), reason);\n    try (PreparedStatement stmt = conn.prepareStatement(TERMINATE_QUEUED_INSTANCE_QUERY)) {\n      int idx = 0;\n      stmt.setString(++idx, status.name());\n      stmt.setString(++idx, toJson(timelineEvent));\n      stmt.setString(++idx, instance.getWorkflowId());\n      stmt.setLong(++idx, instance.getWorkflowInstanceId());\n      stmt.setLong(++idx, instance.getWorkflowRunId());\n      return stmt.executeUpdate();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "terminateQueuedInstance", "index": 72, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeInterval() throws Exception {\n    TimeTrigger expected =\n        loadObject(\"fixtures/time_triggers/sample-interval-time-trigger.json\", TimeTrigger.class);\n    assertEquals(TimeTrigger.Type.INTERVAL, expected.getType());\n    String ser1 = MAPPER.writeValueAsString(expected);\n    TimeTrigger actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), TimeTrigger.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/trigger/TimeTriggerTest.java", "function_name": "testRoundTripSerdeInterval", "index": 73, "label": 0}
{"input": "@Test\n  public void testRunForActionStopForActiveRunningTask() {\n    taskActor.runForAction(Action.TASK_STOP);\n    verify(context, times(1)).cancel(any(), any());\n    assertEquals(Set.of(Action.TASK_STOP), taskActor.getScheduledActions().keySet());\n    verifyEmptyAction(taskActor);\n    assertTrue(taskActor.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionStopForActiveRunningTask", "index": 74, "label": 0}
{"input": "@Test\n    public void write0() throws IOException {\n        FileOutputStream fileOutputStream = new FileOutputStream(\n                \"D://test//tt132\" + System.currentTimeMillis() + \".xlsx\");\n        SXSSFWorkbook sxxsFWorkbook = new SXSSFWorkbook();\n        SXSSFSheet sheet = sxxsFWorkbook.createSheet(\"t1\");\n        SXSSFRow row = sheet.createRow(0);\n        SXSSFCell cell1 = row.createCell(0);\n        cell1.setCellValue(999999999999999L);\n        SXSSFCell cell2 = row.createCell(1);\n        cell2.setCellValue(1000000000000001L);\n        SXSSFCell cell32 = row.createCell(2);\n        cell32.setCellValue(300.35f);\n        sxxsFWorkbook.write(fileOutputStream);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiWriteTest.java", "function_name": "write0", "index": 75, "label": 0}
{"input": "@Bean\n  public KubernetesCommandGenerator kubernetesCommandGenerator(\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating kubernetesCommandGenerator within Spring boot...\");\n    return new KubernetesCommandGenerator(objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "kubernetesCommandGenerator", "index": 76, "label": 0}
{"input": "void prepareQuery(PreparedStatement stmt, String workflowId, long internalId)\n        throws SQLException {\n      stmt.setString(1, workflowId);\n      stmt.setInt(2, Constants.BATCH_DELETION_LIMIT);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDeletionDao.java", "function_name": "prepareQuery", "index": 77, "label": 0}
{"input": "private Optional<String> extractExternalJobId(StepRuntimeSummary runtimeSummary) {\n    Map<String, Artifact> artifacts = runtimeSummary.getArtifacts();\n    if (artifacts.containsKey(Artifact.Type.TITUS.key())) {\n      String titusJobId = artifacts.get(Artifact.Type.TITUS.key()).asTitus().getTitusTaskId();\n      if (!Strings.isNullOrEmpty(titusJobId)) {\n        return Optional.of(titusJobId);\n      }\n    }\n    return Optional.empty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/OutputDataManager.java", "function_name": "extractExternalJobId", "index": 78, "label": 0}
{"input": "public static MsgStrategy getStrategy(Integer type, Integer subType) {\n        \n        Map<String, MsgStrategy> msgStrategyList = SpringUtil.getBeansOfType(MsgStrategy.class);\n        \n        AtomicReference<MsgStrategy> findMsgStrategy = new AtomicReference<>();\n        \n        msgStrategyList.forEach((key, msgStrategy) -> {\n            \n            if (msgStrategy.support(type, subType)) {\n                findMsgStrategy.set(msgStrategy);\n            }\n        });\n        \n        return findMsgStrategy.get();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/msg/MsgStrategyFactory.java", "function_name": "getStrategy", "index": 79, "label": 0}
{"input": "@Test\n  public void testGetCompletedByTsParamWithDurationMinutes() {\n    Tct tct = new Tct();\n    tct.setDurationMinutes(60);\n    tct.setTz(\"UTC\");\n    LongParamDefinition expected =\n        LongParamDefinition.builder()\n            .name(\"completed_by_ts\")\n            .expression(\"return new DateTime(RUN_TS).plusMinutes(60).getMillis();\")\n            .build();\n\n    LongParamDefinition actual = tct.getCompletedByTsParam();\n    assertEquals(expected, actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/TctTest.java", "function_name": "testGetCompletedByTsParamWithDurationMinutes", "index": 80, "label": 0}
{"input": "private Workflow workflowFromResult(ResultSet result) throws SQLException {\n    Workflow workflow = null;\n    List<Task> tasks = new ArrayList<>();\n    while (result.next()) {\n      String payload = result.getString(PAYLOAD_COLUMN);\n      if (payload != null && !payload.isEmpty()) {\n        if (result.getBoolean(WORKFLOW_FLAG_COLUMN)) {\n          workflow = fromJson(payload, Workflow.class);\n        } else {\n          tasks.add(fromJson(payload, Task.class));\n        }\n      }\n    }\n    if (workflow != null && !tasks.isEmpty()) {\n      tasks.sort(Comparator.comparingInt(Task::getSeq));\n      workflow.setTasks(tasks);\n    }\n    return workflow;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "workflowFromResult", "index": 81, "label": 0}
{"input": "@Override\n    public void setButtonEvent(Runnable buttonEvent) {\n        display.asyncExec(() -> {\n            if (!stopButton.isDisposed()) {\n                \n                for (Listener listener : stopButton.getListeners(SWT.Selection)) {\n                    stopButton.removeListener(SWT.Selection, listener);\n                }\n\n                \n                if (buttonEvent != null) {\n                    stopButton.addListener(SWT.Selection, e -> buttonEvent.run());\n                }\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtProgressDialog.java", "function_name": "setButtonEvent", "index": 82, "label": 0}
{"input": "@Test\n  public void testScheduleForDuplicatePendingAction() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    groupActor.schedule(Action.GROUP_START, 10000);\n    groupActor.schedule(Action.GROUP_START, 10000);\n    verify(context, times(1)).schedule(any(), anyLong());\n    assertEquals(Set.of(Action.GROUP_START), groupActor.getScheduledActions().keySet());\n    verifyEmptyAction(groupActor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testScheduleForDuplicatePendingAction", "index": 83, "label": 0}
{"input": "private FeedsLocationVO getLocation(TimelineObjectBO timelineObjectBO) {\n        TimelineObjectBO.Location location = timelineObjectBO.getLocation();\n        \n        if (ObjUtil.isNotEmpty(location)) {\n            FeedsLocationVO feedsLocationVO = new FeedsLocationVO();\n            feedsLocationVO.setCity(location.getCity());\n            feedsLocationVO.setPoiAddress(location.getPoiAddress());\n            feedsLocationVO.setPoiClassifyId(location.getPoiClassifyId());\n            feedsLocationVO.setPoiName(location.getPoiName());\n            feedsLocationVO.setPoiClassifyType(location.getPoiClassifyType());\n            return feedsLocationVO;\n        }\n        return null;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/FeedsServiceImpl.java", "function_name": "getLocation", "index": 84, "label": 0}
{"input": "@Test\n  public void testCalculateEarliestExecutionDateWithFuzzy() {\n    var triggers =\n        generateTriggers(\n            \"0 30 2 7 5 ? 2021\",\n            \"2021-01-01T00:00:00-00:00\",\n            US_PACIFIC,\n            ParsableLong.of(\"5 mins\"));\n    Optional<Date> earliestDate =\n        executionPlanner.calculateEarliestExecutionDate(triggers, \"test-workflow\");\n\n    var dateTime = ZonedDateTime.parse(\"2021-05-07T02:30:00-07:00\");\n    Date minDate = Date.from(dateTime.toInstant());\n    Date maxDate = Date.from(dateTime.plusMinutes(5).toInstant());\n\n    assertFalse(minDate.after(earliestDate.get()));\n    assertTrue(maxDate.after(earliestDate.get()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculateEarliestExecutionDateWithFuzzy", "index": 85, "label": 0}
{"input": "@Test\n  public void testRunActionFor() {\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n\n    verify(context, times(1)).run(any());\n    verifyActions(flowActor, Action.FLOW_START);\n    assertEquals(flowActor, groupActor.getChild(\"test-flow-ref\"));\n\n    doThrow(new RejectedExecutionException()).when(context).run(flowActor);\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    verifyEmptyAction(flowActor);\n\n    doThrow(new RuntimeException(\"test unhandled error\")).when(context).run(flowActor);\n    AssertHelper.assertThrows(\n        \"should throw instead of ignore the error\",\n        RuntimeException.class,\n        \"test unhandled error\",\n        () -> groupActor.runActionFor(flowActor, Action.FLOW_START));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testRunActionFor", "index": 86, "label": 0}
{"input": "@Override\n  public void checkLink(String lib) {\n    if (accs.get() != null) {\n      super.checkLink(lib);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkLink", "index": 87, "label": 0}
{"input": "@Test\n  public void testExistsNotCreatedStep() throws Exception {\n    WorkflowRuntimeOverview overview =\n        loadObject(\n            \"fixtures/instances/sample-workflow-runtime-overview.json\",\n            WorkflowRuntimeOverview.class);\n    assertFalse(overview.existsNotCreatedStep());\n\n    overview.setTotalStepCount(2);\n    assertTrue(overview.existsNotCreatedStep());\n\n    overview\n        .getStepOverview()\n        .put(StepInstance.Status.NOT_CREATED, WorkflowStepStatusSummary.of(1));\n    assertTrue(overview.existsNotCreatedStep());\n\n    overview.getStepOverview().put(StepInstance.Status.CREATED, WorkflowStepStatusSummary.of(0));\n    assertTrue(overview.existsNotCreatedStep());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/WorkflowRuntimeOverviewTest.java", "function_name": "testExistsNotCreatedStep", "index": 88, "label": 0}
{"input": "@Test\n  public void testMergeAllowMoreRestrictiveMode() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': 'MUTABLE'}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'tomerge': {'type': 'STRING', 'value': 'goodbye', 'mode': 'MUTABLE_ON_START'}}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n    assertEquals(1, allParams.size());\n    assertEquals(\"goodbye\", allParams.get(\"tomerge\").asStringParamDef().getValue());\n    assertEquals(ParamMode.MUTABLE_ON_START, allParams.get(\"tomerge\").asStringParamDef().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeAllowMoreRestrictiveMode", "index": 89, "label": 0}
{"input": "private static boolean definitionsAreNullOrEmpty(\n        StepOutputsDefinition stepOutputsDefinition, ConstraintValidatorContext context) {\n      if (stepOutputsDefinition.getType() == StepOutputsDefinition.StepOutputType.SIGNAL) {\n        SignalOutputsDefinition def = stepOutputsDefinition.asSignalOutputsDefinition();\n        if (def.getDefinitions() == null\n            || def.getDefinitions().isEmpty()\n            || def.getDefinitions().stream().anyMatch(Objects::isNull)) {\n          context\n              .buildConstraintViolationWithTemplate(\n                  \"step outputs definitions cannot be null or empty or contain null elements\")\n              .addConstraintViolation();\n          return true;\n        }\n      }\n      return false;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/StepOutputsDefinitionConstraint.java", "function_name": "definitionsAreNullOrEmpty", "index": 90, "label": 0}
{"input": "public PlannerNode(ChatClient plannerAgent) {\n\t\tthis.plannerAgent = plannerAgent;\n\t\tthis.converter = new BeanOutputConverter<>(new ParameterizedTypeReference<Plan>() {\n\t\t});\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/node/PlannerNode.java", "function_name": "PlannerNode", "index": 91, "label": 0}
{"input": "@Override\n    public List<Integer> wechatPid() {\n        List<Integer> pidList = new ArrayList<>();\n        \n        Kernel32 kernel32 = Kernel32.INSTANCE;\n\n        \n        WinNT.HANDLE hSnapshot = kernel32.CreateToolhelp32Snapshot(Tlhelp32.TH32CS_SNAPPROCESS, new WinDef.DWORD(0));\n        \n        Tlhelp32.PROCESSENTRY32.ByReference pe32 = new Tlhelp32.PROCESSENTRY32.ByReference();\n\n        \n        if (kernel32.Process32First(hSnapshot, pe32)) {\n            do {\n                \n                String exeName = Native.toString(pe32.szExeFile);\n                \n                if (exeName.equalsIgnoreCase(EXE_NAME)) {\n                    \n                    pidList.add(pe32.th32ProcessID.intValue());\n                }\n                \n            } while (kernel32.Process32Next(hSnapshot, pe32));\n        }\n        \n        kernel32.CloseHandle(hSnapshot);\n        \n        return pidList;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "wechatPid", "index": 92, "label": 0}
{"input": "@Test\n    public void Encryption2() throws Exception {\n        Biff8EncryptionKey.setCurrentUserPassword(\"123456\");\n        POIFSFileSystem fs = new POIFSFileSystem(new File(\"d:/test/simple03.xls\"), true);\n        HSSFWorkbook hwb = new HSSFWorkbook(fs.getRoot(), true);\n        Biff8EncryptionKey.setCurrentUserPassword(null);\n        System.out.println(hwb.getSheetAt(0).getSheetName());\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/Poi3Test.java", "function_name": "Encryption2", "index": 93, "label": 0}
{"input": "@Test\n  public void ex1_constructor_properties() {\n    var ex1 = module.getProperty(\"ex1\");\n    assertThat(mapper.map(ex1, PersonConstructorProperties.class)).isEqualTo(pigeon2);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d9c65d484a95316736712f0e0db91c45b7fe8a78", "file_path": "pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToDataObjectTest.java", "function_name": "ex1_constructor_properties", "index": 94, "label": 0}
{"input": "private BaseAgent getExecutorForStep(String stepType, ExecutionContext context, Map<String, Object> initSettings) {\n\t\t\n\t\tfor (DynamicAgentEntity agent : agents) {\n\t\t\tif (agent.getAgentName().equalsIgnoreCase(stepType)) {\n\t\t\t\treturn agentService.createDynamicBaseAgent(agent.getAgentName(), context.getPlan().getPlanId(),\n\t\t\t\t\t\tinitSettings);\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"No Agent Executor found for step type, check your agents list : \" + stepType);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/executor/PlanExecutor.java", "function_name": "getExecutorForStep", "index": 95, "label": 0}
{"input": "public boolean getBoolean(String name, boolean defaultValue) {\n        return sharedPreferences.getBoolean(name, defaultValue);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/FileManager.java", "function_name": "getBoolean", "index": 96, "label": 0}
{"input": "public static int getColor(int resource) {\n        return ContextCompat.getColor(ApplicationLoader.getAppCtx(), resource);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocalController.java", "function_name": "getColor", "index": 97, "label": 0}
{"input": "private boolean jj_3R_19() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_30()) {\n      jj_scanpos = xsp;\n      if (jj_3R_31()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_19", "index": 98, "label": 0}
{"input": "private void analysisCtSheetMap(XSSFReader xssfReader, XlsxReadWorkbookHolder xlsxReadWorkbookHolder)\n        throws Exception {\n        CTWorkbook wb = WorkbookDocument.Factory.parse(xssfReader.getWorkbookData()).getWorkbook();\n        for (CTSheet ctSheet : wb.getSheets().getSheetList()) {\n            boolean isHidden = (ctSheet.getState() == STSheetState.HIDDEN)\n                || (ctSheet.getState() == STSheetState.VERY_HIDDEN);\n            if (Boolean.FALSE.equals(xlsxReadWorkbookHolder.getIgnoreHiddenSheet())\n                || !isHidden) {\n                ctSheetMap.put(ctSheet.getName(), ctSheet);\n            }\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/XlsxSaxAnalyser.java", "function_name": "analysisCtSheetMap", "index": 99, "label": 0}
{"input": "default BooleanArrayParameter asBooleanArrayParam() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as BOOLEAN_ARRAY\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/Parameter.java", "function_name": "asBooleanArrayParam", "index": 100, "label": 0}
{"input": "public SignalReference(String signalInstanceId, Instant timestamp) {\n    this.signalInstanceId = signalInstanceId;\n    this.timestamp = timestamp;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/SignalReference.java", "function_name": "SignalReference", "index": 101, "label": 0}
{"input": "@Override\n  public TableDataInfo<KnowledgeInfoVo> queryPageList(KnowledgeInfoBo bo, PageQuery pageQuery) {\n    LambdaQueryWrapper<KnowledgeInfo> lqw = buildQueryWrapper(bo);\n    Page<KnowledgeInfoVo> result = baseMapper.selectVoPage(pageQuery.build(), lqw);\n    return TableDataInfo.build(result);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "queryPageList", "index": 102, "label": 0}
{"input": "@Test\n  public void testCreateWorkflowSummaryFromInstance() {\n    WorkflowSummary summary = workflowHelper.createWorkflowSummaryFromInstance(instance);\n    assertEquals(instance.getWorkflowId(), summary.getWorkflowId());\n    assertEquals(instance.getWorkflowVersionId(), summary.getWorkflowVersionId());\n    assertEquals(instance.getCreateTime(), summary.getCreationTime());\n    assertEquals(instance.getInternalId(), summary.getInternalId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/WorkflowHelperTest.java", "function_name": "testCreateWorkflowSummaryFromInstance", "index": 103, "label": 0}
{"input": "private String parseUnicodeEscape(FullToken tk) {\n    var text = tk.text(lexer);\n    var lastIndex = text.length() - 1;\n    var startIndex = text.indexOf('{', 2);\n    try {\n      var codepoint = Integer.parseInt(text.substring(startIndex + 1, lastIndex), 16);\n      return Character.toString(codepoint);\n    } catch (NumberFormatException e) {\n      throw new ParserError(\n          ErrorMessages.create(\"invalidUnicodeEscapeSequence\", text, text.substring(0, startIndex)),\n          tk.span);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2ffd201172a2416d00fbfba9de2ada7feb39ea65", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseUnicodeEscape", "index": 104, "label": 0}
{"input": "private Message currentStepEnvMessage() {\n\t\tString envPrompt = \"\"\"\n\n\t\t\t\t- 当前步骤的环境信息:\n\n\t\t\t\t{current_step_env_data}\n\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(envPrompt);\n\t\tMessage stepEnvMessage = promptTemplate.createMessage(getMergedData());\n\t\t\n\t\tstepEnvMessage.getMetadata().put(CURRENT_STEP_ENV_DATA_KEY, Boolean.TRUE);\n\t\treturn stepEnvMessage;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "901b631f50afa6dca4383de7a98863d4aa5a14a9", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/DynamicAgent.java", "function_name": "currentStepEnvMessage", "index": 105, "label": 0}
{"input": "@Test\n  public void testUnexpectedAction() {\n    AssertHelper.assertThrows(\n        \"should throw for unexpected action\",\n        MaestroUnprocessableEntityException.class,\n        \"Unexpected action: [TaskDown[]] for FlowGroup [group-1]\",\n        () -> groupActor.runForAction(Action.TASK_DOWN));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/GroupActorTest.java", "function_name": "testUnexpectedAction", "index": 106, "label": 0}
{"input": "static boolean isUserDefinedRealTask(Task task) {\n    return isUserDefinedTask(task) && isRealTask(task);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "isUserDefinedRealTask", "index": 107, "label": 0}
{"input": "@Override\n\tpublic String toString() {\n\t\tString content = text.isEmpty() ? outerHtml : text;\n\t\t\n\t\t\n\t\tif (text.isEmpty() && content != null) {\n\t\t\tcontent = content.replaceAll(\"\\\\s+jmanus-id=\\\"[^\\\"]*\\\"\", \"\");\n\t\t\tcontent = content.replaceAll(\"\\\\s+style=\\\"[^\\\"]*\\\"\", \"\");\n\t\t}\n\t\t\n\t\tif (content.length() > 500) {\n\t\t\tcontent = content.substring(0, 500) + \" ... \" + content.substring(content.length() - 100);\n\t\t}\n\t\treturn String.format(\"[%d] %s: %s\", index, tagName, content);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "5bba7ad6d92953d9f67f5cb7d6d645a1f3ed2156", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/InteractiveElement.java", "function_name": "toString", "index": 108, "label": 0}
{"input": "@Bean\n  public IndexDAO indexDAO(\n      DataSource crdbDataSource,\n      @Qualifier(ConductorConfiguration.CONDUCTOR_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props) {\n    LOG.info(\"Creating IndexDAO within Spring boot...\");\n    return new CockroachDBIndexDAO(crdbDataSource, objectMapper, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "indexDAO", "index": 109, "label": 0}
{"input": "void resetWithInput(Map<String, Object> input, Extension ext) {\n    if (top != -1) {\n      throw new IllegalStateException(\n          \"Reset visitor state while stack is not clear: \" + Arrays.toString(stack));\n    }\n    clear();\n\n    this.symtab.putAll(STATIC_OBJECTS); \n    this.symtab.put(\"params\", SelParams.of(input, ext));\n\n    this.inputTab = input;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelVisitorState.java", "function_name": "resetWithInput", "index": 110, "label": 0}
{"input": "private void setupScrollListener() {\n        binding.logScrollView.getViewTreeObserver().addOnScrollChangedListener(() -> {\n            int scrollY = binding.logScrollView.getScrollY();\n            int maxScrollY = binding.logs.getHeight() - binding.logScrollView.getHeight();\n            isUserScrollingUp = scrollY < maxScrollY;\n        });\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/LogActivity.java", "function_name": "setupScrollListener", "index": 111, "label": 0}
{"input": "@Test(expected = IllegalStateException.class)\n  public void testMapOverLimit() throws Exception {\n    visitor = new SelParserEvaluationVisitor(128, 10000, 10000, 10000);\n    MemoryCounter.setMemoryLimit(100);\n    run(\n        \"m = new HashMap(); for (i = 0; i < 100; i += 1) m.put(String.valueOf(i), String.valueOf(i)); return m;\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testMapOverLimit", "index": 112, "label": 0}
{"input": "@Override\n  public Object convertBytes(VmBytes value, Iterable<Object> path) {\n    return doConvert(value, path, bytesConverter);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/PklConverter.java", "function_name": "convertBytes", "index": 113, "label": 0}
{"input": "public static String[] unzip(byte[] zipData, String destDir) throws IOException {\n        File destDirFile = new File(destDir);\n        if (!destDirFile.exists()) {\n            destDirFile.mkdirs();\n        }\n\n        List<String> extractedPaths = new ArrayList<>();\n        try (ByteArrayInputStream bis = new ByteArrayInputStream(zipData);\n             ZipInputStream zis = new ZipInputStream(bis)) {\n\n            ZipEntry zipEntry;\n            while ((zipEntry = zis.getNextEntry()) != null) {\n                String filePath = destDir + File.separator + zipEntry.getName();\n                if (!zipEntry.isDirectory()) {\n                    extractFile(zis, filePath);\n                    extractedPaths.add(filePath);\n                } else {\n                    new File(filePath).mkdirs();\n                }\n                zis.closeEntry();\n            }\n        }\n        return extractedPaths.toArray(new String[0]);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/utils/ZipUtils.java", "function_name": "unzip", "index": 114, "label": 0}
{"input": "@Test\n  public void testMergeDisallowUpstreamChangesNoSource() throws JsonProcessingException {\n    for (ParamMode mode : Arrays.asList(ParamMode.CONSTANT, ParamMode.IMMUTABLE)) {\n      Map<String, ParamDefinition> allParams =\n          parseParamDefMap(\n              String.format(\n                  \"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': '%s'}}\",\n                  mode.toString()));\n      Map<String, ParamDefinition> paramsToMergeNoSource =\n          parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye'}}\");\n      AssertHelper.assertThrows(\n          String.format(\"Should not allow modifying reserved modes, mode [%s]\", mode),\n          MaestroValidationException.class,\n          String.format(\"Cannot modify param with mode [%s] for parameter [tomerge]\", mode),\n          () ->\n              ParamsMergeHelper.mergeParams(\n                  allParams, paramsToMergeNoSource, upstreamMergeContext));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeDisallowUpstreamChangesNoSource", "index": 115, "label": 0}
{"input": "@Test(expected = AccessControlException.class)\n  public void testNoAccessProcess() throws Exception {\n    Runtime.getRuntime().exec(\"ping www.netflix.com\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessProcess", "index": 116, "label": 0}
{"input": "@Test\n  public void testMergeEmpty() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams = parseParamDefMap(\"{}\");\n    Map<String, ParamDefinition> paramsToMerge = parseParamDefMap(\"{}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, restartContext);\n    assertEquals(0, allParams.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeEmpty", "index": 117, "label": 0}
{"input": "private DashScopeApi.EmbeddingRequest createRequest(EmbeddingRequest request) {\n\t\tDashScopeEmbeddingOptions requestOptions = (DashScopeEmbeddingOptions) request.getOptions();\n\t\treturn DashScopeApi.EmbeddingRequest.builder()\n\t\t\t.model(requestOptions.getModel())\n\t\t\t.texts(request.getInstructions())\n\t\t\t.textType(requestOptions.getTextType())\n\t\t\t.dimension(requestOptions.getDimensions())\n\t\t\t.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57d0b6295b47a9bc0de24bbad89345bf03251a7f", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/embedding/DashScopeEmbeddingModel.java", "function_name": "createRequest", "index": 118, "label": 0}
{"input": "public static JSONObject postNameCard(String appId, String toWxid, String nickName, String nameCardWxid) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"nickName\", nickName);\r\n        param.put(\"nameCardWxid\", nameCardWxid);\r\n        return OkhttpUtil.postJSON(\"/message/postNameCard\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postNameCard", "index": 119, "label": 0}
{"input": "@Test\n  public void testStepInstanceUpdateJobEventPublisher() throws Exception {\n    sqsMaestroJobEventPublisher.publish(stepInstanceUpdateJobEvent, 2000);\n\n    String stepInstanceUpdateJobEventStr = MAPPER.writeValueAsString(stepInstanceUpdateJobEvent);\n    verify(amazonSqs, times(1))\n        .sendMessage(\n            new SendMessageRequest()\n                .withQueueUrl(PUBLISH_JOB_QUEUE_URL)\n                .withMessageBody(stepInstanceUpdateJobEventStr)\n                .withDelaySeconds(2));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_JOB_EVENT_PUBLISH_SUCCESS_METRIC,\n                SqsMaestroJobEventPublisher.class,\n                AwsMetricConstants.JOB_TYPE_TAG,\n                StepInstanceUpdateJobEvent.class.getSimpleName())\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisherTest.java", "function_name": "testStepInstanceUpdateJobEventPublisher", "index": 120, "label": 0}
{"input": "@JsonIgnore\n  public Set<Long> getSkippedIterationsWithCheckpoint() {\n    Set<Long> skipList = new HashSet<>();\n    if (restartInfo != null) {\n      skipList.addAll(restartInfo);\n    }\n    if (details != null) {\n      details.flatten(WorkflowInstance.Status::isTerminal).entrySet().stream()\n          .flatMap(e -> e.getValue().stream())\n          .filter(i -> i >= checkpoint)\n          .forEach(skipList::add);\n    }\n    return skipList;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "getSkippedIterationsWithCheckpoint", "index": 121, "label": 0}
{"input": "@Test\n    public void poi() throws Exception {\n        InputStream is = new FileInputStream(\"D:\\\\test\\\\styleTest.xls\");\n        HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);\n        HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(0);\n        HSSFRow hssfRow = hssfSheet.getRow(0);\n        System.out.println(hssfRow.getCell(0).getCellStyle().getDataFormatString());\n        DataFormatter formatter = new DataFormatter();\n        System.out.println(hssfRow.getCell(0).getNumericCellValue());\n        System.out.println(hssfRow.getCell(1).getNumericCellValue());\n        System.out.println(hssfRow.getCell(2).getNumericCellValue());\n        System.out.println(hssfRow.getCell(0).getCellStyle().getDataFormatString());\n        System.out.println(hssfRow.getCell(1).getCellStyle().getDataFormatString());\n        System.out.println(hssfRow.getCell(2).getCellStyle().getDataFormatString());\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/StyleTest.java", "function_name": "poi", "index": 122, "label": 0}
{"input": "public static Map<StepOutputsDefinition.StepOutputType, List<MapParameter>>\n      getStepOutputsParameters(Collection<StepOutputsDefinition> outputs) {\n    if (ObjectHelper.isCollectionEmptyOrNull(outputs)) {\n      return Collections.emptyMap();\n    }\n    return outputs.stream()\n        .collect(\n            MapHelper.toListMap(\n                StepOutputsDefinition::getType,\n                e ->\n                    e.asSignalOutputsDefinition().getDefinitions().stream()\n                        .map(v -> (MapParameter) v.toParameter())\n                        .collect(Collectors.toList())));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getStepOutputsParameters", "index": 123, "label": 0}
{"input": "private void upsertEventHandler(EventHandler eventHandler, String methodName) {\n    withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                UPSERT_EVENT_HANDLER_STATEMENT,\n                statement -> {\n                  statement.setString(1, eventHandler.getName());\n                  statement.setString(2, toJson(eventHandler));\n                }),\n        methodName,\n        \"Failed {} for handler: {}\",\n        methodName,\n        eventHandler);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBEventHandlerDAO.java", "function_name": "upsertEventHandler", "index": 124, "label": 0}
{"input": "private HighSymbol findHighSymbol(ghidra.program.model.pcode.HighFunction highFunction, String symbolName) {\n            \n            Iterator<HighSymbol> symbols = highFunction.getLocalSymbolMap().getSymbols();\n            while (symbols.hasNext()) {\n                HighSymbol symbol = symbols.next();\n                if (symbol.getName().equals(symbolName)) {\n                    Msg.info(this, \"Found exact match for symbol: \" + symbolName);\n                    return symbol;\n                }\n            }\n            \n            \n            StringBuilder availableSymbols = new StringBuilder(\"Available symbols in function: \");\n            symbols = highFunction.getLocalSymbolMap().getSymbols();\n            while (symbols.hasNext()) {\n                HighSymbol symbol = symbols.next();\n                availableSymbols.append(symbol.getName()).append(\", \");\n            }\n            Msg.debug(this, availableSymbols.toString());\n            \n            return null;\n        }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "findHighSymbol", "index": 125, "label": 0}
{"input": "private SelResult processConditionBlock(\n      SelBaseNode node, Object data, boolean hasFalseStatement) {\n    node.jjtGetChild(0).jjtAccept(this, data);\n    SelBoolean condResult = (SelBoolean) state.pop();\n    if (condResult.booleanVal()) {\n      return (SelResult) node.jjtGetChild(1).jjtAccept(this, data); \n    } else if (hasFalseStatement) {\n      return (SelResult) node.jjtGetChild(2).jjtAccept(this, data); \n    } else {\n      return SelResult.NONE;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelParserEvaluationVisitor.java", "function_name": "processConditionBlock", "index": 126, "label": 0}
{"input": "public RunStrategy getRunStrategy(String workflowId) {\n    PropertiesSnapshot properties = getCurrentPropertiesSnapshot(workflowId);\n    LOG.debug(\"Properties for workflow [{}] are {}\", workflowId, properties);\n    return ObjectHelper.valueOrDefault(properties.getRunStrategy(), Defaults.DEFAULT_RUN_STRATEGY);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getRunStrategy", "index": 127, "label": 0}
{"input": "private void setLastKnownState(ConnectionState lastKnownState) {\n        this.lastKnownState = lastKnownState;\n        publishConnectionState(lastKnownState);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "dda4501b0221510d1c8a3c02efe46686c33a06f9", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "setLastKnownState", "index": 128, "label": 0}
{"input": "private boolean jj_3R_20() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_scan_token(13)) {\n      jj_scanpos = xsp;\n      if (jj_scan_token(37)) {\n        jj_scanpos = xsp;\n        if (jj_scan_token(39)) {\n          jj_scanpos = xsp;\n          if (jj_scan_token(30)) {\n            jj_scanpos = xsp;\n            if (jj_scan_token(24)) return true;\n          }\n        }\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_20", "index": 129, "label": 0}
{"input": "private static Optional<String> extractEscapedValue(Matcher m) {\n    Optional<String> result = maybeGroup(m, 3);\n    if (!result.isPresent()) {\n      result = maybeGroup(m, 4);\n      if (!result.isPresent()) {\n        result = maybeGroup(m, 5).map(v -> \"$\");\n      }\n    }\n    return result;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/LiteralEvaluator.java", "function_name": "extractEscapedValue", "index": 130, "label": 0}
{"input": "@GetMapping(\"/detail\")\n    public ResponseVO<ChatRoomDetailVO> detail(@RequestParam String chatRoomName) {\n        return ResponseVO.ok(chatRoomService.queryChatRoomDetail(chatRoomName));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/ChatRoomController.java", "function_name": "detail", "index": 131, "label": 0}
{"input": "private void prepareCreateInstanceStatement(PreparedStatement wfiStmt, WorkflowInstance instance)\n      throws SQLException {\n    wfiStmt.setString(1, toJson(instance));\n    wfiStmt.setString(2, WorkflowInstance.Status.CREATED.name());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "prepareCreateInstanceStatement", "index": 132, "label": 0}
{"input": "private com.itextpdf.layout.element.Cell createPdfCell(int rowspan, int colspan, Cell cell, String value, float maxWidth, String fontPath) throws IOException {\n        com.itextpdf.layout.element.Cell pdfCell = new com.itextpdf.layout.element.Cell(rowspan, colspan)\n                .setHeight(cell.getRow().getHeightInPoints() * 1.2f)\n                .setPadding(0);\n        Text text = new Text(value);\n        setPdfCellFont((XSSFCell) cell, text, fontPath);\n        Paragraph paragraph = new Paragraph(text).setPadding(0f).setMargin(0f);\n        XSSFCellStyle cellStyle = ((XSSFCell) cell).getCellStyle();\n        if (cellStyle.getWrapText()) {\n            paragraph.setMaxWidth(maxWidth);\n        }\n        pdfCell.add(paragraph);\n        setCellStyles((XSSFCell)cell, pdfCell);\n        return pdfCell;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "createPdfCell", "index": 133, "label": 0}
{"input": "private void createPOIFilesDirectory() throws IOException {\n        \n        \n        if (dir == null || !dir.exists()) {\n            dirLock.lock();\n            try {\n                if (dir == null || !dir.exists()) {\n                    String tmpDir = System.getProperty(JAVA_IO_TMPDIR);\n                    if (tmpDir == null) {\n                        throw new IOException(\"System's temporary directory not defined - set the -D\" + JAVA_IO_TMPDIR\n                                + \" jvm property!\");\n                    }\n                    Path dirPath = Paths.get(tmpDir, POIFILES);\n                    dir = Files.createDirectories(dirPath).toFile();\n                }\n            } finally {\n                dirLock.unlock();\n            }\n            return;\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/EasyExcelTempFileCreationStrategy.java", "function_name": "createPOIFilesDirectory", "index": 134, "label": 0}
{"input": "@Test\n  public void testGetAllLatestStepFromAncestors() throws Exception {\n    si = loadObject(\"fixtures/instances/sample-step-instance-finishing.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    StepInstance expected = si;\n    expected.setArtifacts(Collections.emptyMap());\n    si = loadObject(\"fixtures/instances/sample-step-instance-failed.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n\n    Map<String, StepInstance> res =\n        stepDao.getAllLatestStepFromAncestors(\"sample-dag-test-3\", 1L, List.of(\"job1\"));\n    assertEquals(Collections.singletonMap(\"job1\", expected), res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetAllLatestStepFromAncestors", "index": 135, "label": 0}
{"input": "public RestartConfigBuilder setRestartPolicy(RestartPolicy input) {\n      if (input != null) {\n        this.restartPolicy = RunPolicy.valueOf(input.name());\n      }\n      return this;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/RestartConfig.java", "function_name": "setRestartPolicy", "index": 136, "label": 0}
{"input": "public WriteSheetHolder(WriteSheet writeSheet, WriteWorkbookHolder writeWorkbookHolder) {\n        super(writeSheet, writeWorkbookHolder);\n        \n        \n        initHandler(writeSheet, writeWorkbookHolder);\n        \n        this.writeSheet = writeSheet;\n        if (writeSheet.getSheetNo() == null && StringUtils.isEmpty(writeSheet.getSheetName())) {\n            this.sheetNo = 0;\n        } else {\n            this.sheetNo = writeSheet.getSheetNo();\n        }\n        this.sheetName = writeSheet.getSheetName();\n        this.parentWriteWorkbookHolder = writeWorkbookHolder;\n        this.hasBeenInitializedTable = new HashMap<>();\n        if (writeWorkbookHolder.getTempTemplateInputStream() != null) {\n            writeLastRowTypeEnum = WriteLastRowTypeEnum.TEMPLATE_EMPTY;\n        } else {\n            writeLastRowTypeEnum = WriteLastRowTypeEnum.COMMON_EMPTY;\n        }\n        lastRowIndex = 0;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/metadata/holder/WriteSheetHolder.java", "function_name": "WriteSheetHolder", "index": 137, "label": 0}
{"input": "@Test\n  public void testSaveFlow() {\n    context.saveFlow(flow);\n    verify(flowDao, times(1)).insertFlow(flow);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testSaveFlow", "index": 138, "label": 0}
{"input": "@PostMapping(\"/extract-images\")\n  @Operation(summary = \"提取PDF中的图片并调用大模型,识别图片内容并返回\", description = \"提取PDF中的图片并调用gpt-4o-mini,识别图片内容并返回\")\n  public R<List<PdfFileContentResult>> extractImages(\n      @RequestPart(\"file\") MultipartFile file\n  ) throws IOException {\n    return R.ok(pdfImageExtractService.extractImages(file));\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "extractImages", "index": 139, "label": 0}
{"input": "@JsonCreator\n  public WorkflowTimeline(\n      @JsonProperty(\"workflow_id\") String workflowId,\n      @JsonProperty(\"timeline_events\") List<WorkflowTimelineEvent> timelineEvents) {\n    this.workflowId = workflowId;\n    this.timelineEvents = timelineEvents;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/WorkflowTimeline.java", "function_name": "WorkflowTimeline", "index": 140, "label": 0}
{"input": "@Override\n  public List<TaskExecLog> getTaskExecutionLogs(String taskId) {\n    try {\n      return withReadOnlyQuery(\n          GET_TASK_EXECUTION_LOGS_STATEMENT,\n          statement -> statement.setString(1, taskId),\n          this::taskExecLogsFromResult);\n    } catch (Exception e) {\n      LOG.warn(\n          \"Cannot get task execution logs for task {} due to message = [{}]\",\n          taskId,\n          e.getMessage());\n      \n      return Collections.emptyList();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "getTaskExecutionLogs", "index": 141, "label": 0}
{"input": "@Test\n  public void testRunForActionFlowResumeWithRunningFlow() {\n    assertNull(flow.getPrepareTask());\n    assertNull(flow.getMonitorTask());\n\n    flowActor.runForAction(Action.FLOW_RESUME);\n    assertNull(flow.getPrepareTask());\n    assertNull(flow.getMonitorTask());\n    verify(context, times(1)).resumeFlow(flow);\n    verify(context, times(0)).prepare(flow);\n    assertEquals(Set.of(Action.FLOW_TIMEOUT), flowActor.getScheduledActions().keySet());\n\n    var actions = flowActor.getActions();\n    assertEquals(1, actions.size());\n    assertEquals(Action.FlowReconcile.class, actions.poll().getClass());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testRunForActionFlowResumeWithRunningFlow", "index": 142, "label": 0}
{"input": "@Override\n  public long getPendingWorkflowCount(String workflowName) {\n    return searchRunningWorkflowIdsByName(workflowName, -1).size();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getPendingWorkflowCount", "index": 143, "label": 0}
{"input": "@TruffleBoundary\n    private String doDecode(VmBytes self, String charset) throws CharacterCodingException {\n      var byteBuffer = ByteBuffer.wrap(self.getBytes());\n      var decoder = Charset.forName(charset).newDecoder();\n      return decoder.decode(byteBuffer).toString();\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d6fd7e0942f735a7fb28ef36dcc841d6d6454e5e", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/base/BytesNodes.java", "function_name": "doDecode", "index": 144, "label": 0}
{"input": "@SuppressWarnings({\"PMD.NullAssignment\"})\n  public void preDestroy() {\n    if (evaluator != null) {\n      LOG.info(\"Destroying ExprEvaluator within Spring boot...\");\n      evaluator.stop();\n      evaluator = null;\n    }\n    if (extensionRepo != null) {\n      extensionRepo.shutdown();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ExprEvaluator.java", "function_name": "preDestroy", "index": 145, "label": 0}
{"input": "private String getLanguageName(String languageCode) {\n        switch (languageCode) {\n            case \"fa\":\n                return \"Persian\";\n            case \"en\":\n                return \"English\";\n            case \"ru\":\n                return \"Russian\";\n            case \"zh\":\n                return \"Chinese\";\n            default:\n                return languageCode;\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "2f3b84a45acbf027ab617f69cb6bdd3f251bcd76", "file_path": "app/src/main/java/org/bepass/oblivion/LocaleHandler.java", "function_name": "getLanguageName", "index": 146, "label": 0}
{"input": "public TimeTriggerExecutionPlanner(int maxFutureItems) {\n    this.maxFutureItems = maxFutureItems;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlanner.java", "function_name": "TimeTriggerExecutionPlanner", "index": 147, "label": 0}
{"input": "ExternalResourceResolverImpl(MessageTransport transport, long evaluatorId) {\n    this.transport = transport;\n    this.evaluatorId = evaluatorId;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "52a86d3f329d264b9b9a8e0f9f3a6df39165bbfb", "file_path": "pkl-core/src/main/java/org/pkl/core/externalreader/ExternalResourceResolverImpl.java", "function_name": "ExternalResourceResolverImpl", "index": 148, "label": 0}
{"input": "public Builder setField4(int value) {\n\n                field4_ = value;\n                bitField0_ |= 0x00000008;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setField4", "index": 149, "label": 0}
{"input": "public CockroachDBRateLimitingDAO(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBRateLimitingDAO.java", "function_name": "CockroachDBRateLimitingDAO", "index": 150, "label": 0}
{"input": "public WorkflowActionResponse deactivate(String workflowId, User caller) {\n    Checks.notNull(caller, \"caller cannot be null to deactivate workflow [%s]\", workflowId);\n    String timeline = workflowDao.deactivate(workflowId, caller);\n    LOG.info(timeline);\n    TimelineEvent event =\n        TimelineActionEvent.builder()\n            .action(Actions.WorkflowAction.DEACTIVATE)\n            .author(caller)\n            .message(timeline)\n            .build();\n    return WorkflowActionResponse.from(workflowId, event);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowActionHandler.java", "function_name": "deactivate", "index": 151, "label": 0}
{"input": "@Test\n  public void testSet() {\n    assertEquals(\"STRING_ARRAY: [foo, bar]\", one.type() + \": \" + one);\n    one.set(1, SelString.of(\"baz\"));\n    assertEquals(\"STRING_ARRAY: [foo, baz]\", one.type() + \": \" + one);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelArrayTest.java", "function_name": "testSet", "index": 152, "label": 0}
{"input": "@Override\n    public List<ContactLabelVO> queryContactLabel() {\n        \n        return Optional.ofNullable(contactLabelRepository.queryContactLabelAsList())\n                \n                .map(contactLabelMapping::convert)\n                \n                .orElse(Collections.emptyList());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ContactServiceImpl.java", "function_name": "queryContactLabel", "index": 153, "label": 0}
{"input": "private boolean jj_3R_65() {\n    if (jj_scan_token(STAR)) return true;\n    if (jj_3R_59()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_65", "index": 154, "label": 0}
{"input": "@Test\n  public void testNextExecutionDateForPredefined() throws Exception {\n    TimeTrigger trigger =\n        loadObject(\"fixtures/time_triggers/sample-predefined-time-trigger.json\", TimeTrigger.class);\n    Optional<Date> actual =\n        TriggerHelper.nextExecutionDate(trigger, Date.from(Instant.EPOCH), \"test-id\");\n    assertEquals(Optional.of(Date.from(Instant.ofEpochSecond(28800))), actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/TriggerHelperTest.java", "function_name": "testNextExecutionDateForPredefined", "index": 155, "label": 0}
{"input": "private void loadEndpoints() {\n        Set<String> savedEndpoints = FileManager.getStringSet(\"saved_endpoints\", new HashSet<>());\n        for (String endpoint : savedEndpoints) {\n            String[] parts = endpoint.split(\"::\");\n            if (parts.length == 2) {\n                endpointsList.add(new Endpoint(parts[0], parts[1]));\n            }\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/EndpointsBottomSheet.java", "function_name": "loadEndpoints", "index": 156, "label": 0}
{"input": "public AliyunAiSearchProperties() {\n\t\tsuper(\"\");\n\t\tthis.setPropertiesFromEnv(AliyunAiSearchConstants.API_KEY_ENV, null, null, null);\n\t\tif (!StringUtils.hasText(this.getBaseUrl())) {\n\t\t\tthis.setBaseUrl(System.getenv(AliyunAiSearchConstants.BASE_URL_ENV));\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-aliyunaisearch/src/main/java/com/alibaba/cloud/ai/toolcalling/aliyunaisearch/AliyunAiSearchProperties.java", "function_name": "AliyunAiSearchProperties", "index": 157, "label": 0}
{"input": "private ClassBody parseClassBody() {\n    var start = expect(Token.LBRACE, \"missingDelimiter\", \"{\").span;\n    var children = new ArrayList<Node>();\n    while (lookahead != Token.RBRACE && lookahead != Token.EOF) {\n      var entryHeader = parseMemberHeader();\n      if (lookahead == Token.FUNCTION) {\n        children.add(parseClassMethod(entryHeader));\n      } else {\n        children.add(parseClassProperty(entryHeader));\n      }\n    }\n    if (lookahead == Token.EOF) {\n      throw new ParserError(\n          ErrorMessages.create(\"missingDelimiter\", \"}\"), prev.span.stopSpan().move(1));\n    }\n    var end = expect(Token.RBRACE, \"missingDelimiter\", \"}\").span;\n    return new ClassBody(children, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseClassBody", "index": 158, "label": 0}
{"input": "@Test\n\t@DisplayName(\"Abstract Search Test\")\n\t@EnabledIfEnvironmentVariable(named = SerpApiConstants.API_KEY_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\tpublic void testAbstractSearch() {\n\t\tvar resp = searchService.query(\"Spring AI Alibaba\");\n\t\tassert resp != null && resp.getSearchResult() != null && resp.getSearchResult().results() != null\n\t\t\t\t&& !resp.getSearchResult().results().isEmpty();\n\t\tlog.info(\"results: \" + resp.getSearchResult());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-serpapi/src/test/java/com/alibaba/cloud/ai/toolcalling/serpapi/SerpApiServiceTest.java", "function_name": "testAbstractSearch", "index": 159, "label": 0}
{"input": "@Test\n  public void testRunAccessDenied() throws Exception {\n    System.setSecurityManager(new SelSecurityManager());\n    t1.start();\n    t1.join();\n    assertEquals(-10, i);\n    assertTrue(ex instanceof AccessControlException);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelThreadTest.java", "function_name": "testRunAccessDenied", "index": 160, "label": 0}
{"input": "BaseActor(ExecutionContext context, @Nullable Actor parent) {\n    this.context = context;\n    this.parent = parent;\n    this.retryInterval = context.getProperties().getActorErrorRetryIntervalInMillis();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "BaseActor", "index": 161, "label": 0}
{"input": "@Override\n  public List<SysOssVo> listByIds(Collection<Long> ossIds) {\n    List<SysOssVo> list = new ArrayList<>();\n    for (Long id : ossIds) {\n      SysOssVo vo = SpringUtils.getAopProxy(this).getById(id);\n      if (ObjectUtil.isNotNull(vo)) {\n        list.add(this.matchingUrl(vo));\n      }\n    }\n    return list;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOssServiceImpl.java", "function_name": "listByIds", "index": 162, "label": 0}
{"input": "public static VmException toVmException(ParserError e, Source source, String moduleName) {\n    return new VmExceptionBuilder()\n        .adhocEvalError(e.getMessage())\n        .withSourceSection(source.createSection(e.span().charIndex(), e.span().length()))\n        .withMemberName(moduleName)\n        .build();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java", "function_name": "toVmException", "index": 163, "label": 0}
{"input": "protected void doEvalDynamic(VirtualFrame frame, ObjectData data, VmObject iterable) {\n    iterable.forceAndIterateMemberValues(\n        (key, member, value) -> {\n          if (member.isElement()) {\n            data.addElement(frame, createMember(member, value), this);\n          } else {\n            data.addMember(frame, key, createMember(member, value), this);\n          }\n          return true;\n        });\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "doEvalDynamic", "index": 164, "label": 0}
{"input": "@Test\n  public void testMergeOutputDataParamsInvalidException() {\n    Map<String, Parameter> allParams = new LinkedHashMap<>();\n    Map<String, Parameter> paramsToMerge = new LinkedHashMap<>();\n    paramsToMerge.put(\"key\", StringParameter.builder().value(\"test\").build());\n    AssertHelper.assertThrows(\n        \"throws exception when output params to merge are not present in all params\",\n        MaestroValidationException.class,\n        \"Invalid output parameter [key], not defined in params\",\n        () -> ParamsMergeHelper.mergeOutputDataParams(allParams, paramsToMerge));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeOutputDataParamsInvalidException", "index": 165, "label": 0}
{"input": "@Bean\n  public TimeTriggerExecutionPlanner timeTriggerExecutionPlanner(TriggersProperties properties) {\n    LOG.info(\"Creating timeTriggerExecutionPlanner within Spring boot...\");\n    return new TimeTriggerExecutionPlanner(properties.getTimeTrigger().getMaxTriggersPerMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "timeTriggerExecutionPlanner", "index": 166, "label": 0}
{"input": "public static void assertThrows(\n      String message,\n      Class<? extends Exception> expected,\n      String containedInMessage,\n      Callable<?> callable) {\n    try {\n      callable.call();\n      Assert.fail(\n          String.format(\n              \"No expected exception (%s) was thrown with message: (%s)\",\n              expected.getName(), message));\n    } catch (Exception actual) {\n      Assert.assertEquals(message, expected, actual.getClass());\n      Assert.assertTrue(\n          String.format(\n              \"Actual exception message (%s) did not contain (%s)\",\n              actual.getMessage(), containedInMessage),\n          actual.getMessage().contains(containedInMessage));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/testFixtures/java/com/netflix/maestro/AssertHelper.java", "function_name": "assertThrows", "index": 167, "label": 0}
{"input": "public FunctionLiteralExpr(ParameterList parameterList, Expr expr, Span span) {\n      super(span, List.of(parameterList, expr));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "FunctionLiteralExpr", "index": 168, "label": 0}
{"input": "@Override\n    public List<MsgTypeDistributionVO> msgTypeDistribution() {\n        \n        return Opt.ofNullable(msgRepository.msgTypeDistribution())\n                \n                .map(msgTypes -> msgTypes.stream().collect(Collectors.groupingBy(MsgTypeDistributionVO::getType, Collectors.summingInt(MsgTypeDistributionVO::getValue))))\n                \n                .map(summedMap -> summedMap.entrySet().stream().map(entry -> new MsgTypeDistributionVO(entry.getKey(), entry.getValue())).collect(Collectors.toList()))\n                \n                .orElse(Collections.emptyList());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DashboardServiceImpl.java", "function_name": "msgTypeDistribution", "index": 169, "label": 0}
{"input": "@JsonIgnore\n  public long getRunningStatsCount(boolean strict) {\n    if (runningStats == null) {\n      return 0L;\n    }\n    if (strict) {\n      Set<Map.Entry<WorkflowInstance.Status, List<Long>>> detailSet =\n          details.flatten(e -> true).entrySet();\n      long maxIterationId =\n          detailSet.stream().flatMap(e -> e.getValue().stream()).reduce(0L, Long::max);\n      return maxIterationId\n          - detailSet.stream()\n              .filter(e -> !e.getKey().isTerminal())\n              .flatMap(e -> e.getValue().stream())\n              .reduce(maxIterationId + 1, Long::min)\n          + 1;\n    } else {\n      return runningStats.values().stream().reduce(0L, Long::sum);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "getRunningStatsCount", "index": 170, "label": 0}
{"input": "@Test\n  public void testFlowTimeoutWithoutTasks() {\n    flowActor.runForAction(Action.FLOW_TIMEOUT);\n    assertEquals(Flow.Status.TIMED_OUT, flow.getStatus());\n    assertEquals(Set.of(Action.FLOW_TIMEOUT), flowActor.getScheduledActions().keySet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testFlowTimeoutWithoutTasks", "index": 171, "label": 0}
{"input": "@JsonIgnore\n  public WorkflowInstance.Status getRunStatus() {\n    if (runtimeOverview == null || runtimeOverview.getRunStatus() == null) {\n      return status;\n    }\n    return runtimeOverview.getRunStatus();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowInstance.java", "function_name": "getRunStatus", "index": 172, "label": 0}
{"input": "private List<DemoData> dataHex() {\n        List<DemoData> list = ListUtils.newArrayList();\n        for (int i = 0; i < 10; i++) {\n            DemoData data = new DemoData();\n            data.setString(\"_xB9f0_\");\n            data.setDate(new Date());\n            data.setDoubleData(0.56);\n            list.add(data);\n        }\n        return list;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "58ae8159d317290e2c442ef7ab0cf86f9d3b9b00", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "dataHex", "index": 173, "label": 0}
{"input": "public void copyBasicParameter(ReadSheet other) {\n        if (other == null) {\n            return;\n        }\n        this.setHeadRowNumber(other.getHeadRowNumber());\n        this.setCustomReadListenerList(other.getCustomReadListenerList());\n        this.setHead(other.getHead());\n        this.setClazz(other.getClazz());\n        this.setCustomConverterList(other.getCustomConverterList());\n        this.setAutoTrim(other.getAutoTrim());\n        this.setUse1904windowing(other.getUse1904windowing());\n        this.setNumRows(other.getNumRows());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/metadata/ReadSheet.java", "function_name": "copyBasicParameter", "index": 174, "label": 0}
{"input": "public Counter getCounter(String name, Class<?> clazz, String... tags) {\n    final List<Tag> metricTags = toTags(clazz, tags);\n    return counters\n        .computeIfAbsent(name, v -> new ConcurrentHashMap<>())\n        .computeIfAbsent(\n            metricTags,\n            m -> {\n              Id id = registry.createId(name, m);\n              return registry.counter(id);\n            });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/metrics/MaestroMetricRepo.java", "function_name": "getCounter", "index": 175, "label": 0}
{"input": "@Test\n  public void testProcessStartWithWorkflowNotActiveError() throws Exception {\n    SignalTriggerExecution execution =\n        loadObject(\"fixtures/sample-signal-trigger-execution.json\", SignalTriggerExecution.class);\n    execution.setCondition(\"135 > 2\");\n    Supplier<SignalTriggerExecution> messageSupplier = () -> execution;\n    when(actionHandler.start(any(), any(), any()))\n        .thenThrow(new MaestroNotFoundException(\"Cannot find an active version for workflow\"));\n    processor.process(messageSupplier);\n    verify(actionHandler, times(1)).start(any(), any(), any());\n    verify(brokerDao, times(1)).deleteTrigger(any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_EXECUTION_FAILURE,\n                SignalTriggerExecutionProcessor.class,\n                MetricConstants.TYPE_TAG,\n                \"inactive\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerExecutionProcessorTest.java", "function_name": "testProcessStartWithWorkflowNotActiveError", "index": 176, "label": 0}
{"input": "public static String getDirFileName(String fileName, String... dirs) {\n        return getDir(dirs) + fileName;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getDirFileName", "index": 177, "label": 0}
{"input": "public static Map<String, Map<String, Object>> getAllStepOutputData(Workflow workflow) {\n    return workflow.getTasks().stream()\n        \n        .filter(TaskHelper::isValidTaskWithParamData)\n        .collect(\n            Collectors.toMap(\n                Task::getReferenceTaskName,\n                Task::getOutputData,\n                \n                (task1, task2) -> task2));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "getAllStepOutputData", "index": 178, "label": 0}
{"input": "@Test\n    public void t02() {\n        \n        List<Map<Integer, Object>> list = EasyExcel.read(TestFileUtil.getPath() + \"compatibility/t02.xlsx\").sheet()\n                .headRowNumber(0).doReadSync();\n        log.info(\"data:{}\", JSON.toJSONString(list));\n        Assertions.assertEquals(3, list.size());\n        Map<Integer, Object> row2 = list.get(2);\n        Assertions.assertEquals(\"1，2-戊二醇\", row2.get(2));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t02", "index": 179, "label": 0}
{"input": "public SemanticConsistencNode(ChatClient.Builder chatClientBuilder, BaseNl2SqlService baseNl2SqlService,\n\t\t\tDbConfig dbConfig) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t\tthis.dbConfig = dbConfig;\n\t\tthis.baseNl2SqlService = baseNl2SqlService;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/SemanticConsistencNode.java", "function_name": "SemanticConsistencNode", "index": 180, "label": 0}
{"input": "@Test\n  public void testStartShutdownFromRootWithChildActors() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    assertTrue(groupActor.isRunning());\n\n    groupActor.schedule(Action.GROUP_START, 10000);\n    assertEquals(Set.of(Action.GROUP_START), groupActor.getScheduledActions().keySet());\n\n    groupActor.startShutdown(Action.FLOW_SHUTDOWN);\n    verify(future, times(1)).cancel(true);\n\n    assertTrue(groupActor.isRunning());\n    verifyActions(flowActor, Action.FLOW_START, Action.FLOW_SHUTDOWN);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testStartShutdownFromRootWithChildActors", "index": 181, "label": 0}
{"input": "@Test(expected = IllegalStateException.class)\n  public void testCallBadForeachReturn() {\n    new BadParamExtension()\n        .call(\n            \"getFromForeach\",\n            new SelType[] {SelString.of(\"foo\"), SelString.of(\"bar\"), SelString.of(\"bat\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallBadForeachReturn", "index": 182, "label": 0}
{"input": "private Compressor getCompressor(String compressorName) {\n    Compressor compressor = compressors.get(compressorName);\n    Checks.notNull(compressor, \"unknown compressorName: %s\", compressorName);\n    return compressor;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/compression/StringCodec.java", "function_name": "getCompressor", "index": 183, "label": 0}
{"input": "public static Optional<Details> sleep(long millis) {\n    try {\n      Thread.sleep(millis);\n      return Optional.empty();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n      return Optional.of(Details.create(ie, true, \"sleep interrupted\"));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TimeUtils.java", "function_name": "sleep", "index": 184, "label": 0}
{"input": "public static JSONObject removeMember(String appId, List<String> wxids,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxids\",wxids);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/removeMember\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "removeMember", "index": 185, "label": 0}
{"input": "public String generatePlanId() {\n\t\tString planId = PLAN_ID_PREFIX + System.currentTimeMillis();\n\t\tlogger.debug(\"Generated new planId: {}\", planId);\n\t\treturn planId;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/coordinator/PlanIdDispatcher.java", "function_name": "generatePlanId", "index": 186, "label": 0}
{"input": "public CockroachDBQueueDAO(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBQueueDAO.java", "function_name": "CockroachDBQueueDAO", "index": 187, "label": 0}
{"input": "@Test\n  public void testCloneTaskException() {\n    Task task = flow.newTask(new TaskDef(\"task\", \"noop\", null, null), false);\n    Mockito.doThrow(new RuntimeException(\"test\")).when(executionPreparer).cloneTask(task);\n    AssertHelper.assertThrows(\n        \"should throw\",\n        MaestroUnprocessableEntityException.class,\n        \"cannot clone task: [task]\",\n        () -> context.cloneTask(task));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testCloneTaskException", "index": 188, "label": 0}
{"input": "@JsonCreator\n  public TagList(List<Tag> input) {\n    if (input == null) {\n      tags = new ArrayList<>();\n    } else {\n      tags = input;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/TagList.java", "function_name": "TagList", "index": 189, "label": 0}
{"input": "@Test\n  public void testStepWorkflowCreateFromRequest() {\n    RunRequest mockRequest = Mockito.mock(RunRequest.class);\n\n    when(mockRequest.isSystemInitiatedRun()).thenReturn(false);\n    ParamsMergeHelper.MergeContext mergeContext =\n        ParamsMergeHelper.MergeContext.workflowCreate(ParamSource.DEFINITION, mockRequest);\n    assertEquals(ParamSource.DEFINITION, mergeContext.getMergeSource());\n    assertFalse(mergeContext.isUpstreamMerge());\n    assertFalse(mergeContext.isSystem());\n\n    when(mockRequest.isSystemInitiatedRun()).thenReturn(false);\n    mergeContext = ParamsMergeHelper.MergeContext.workflowCreate(ParamSource.SYSTEM, false);\n    assertEquals(ParamSource.SYSTEM, mergeContext.getMergeSource());\n    assertFalse(mergeContext.isUpstreamMerge());\n    assertTrue(mergeContext.isSystem());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testStepWorkflowCreateFromRequest", "index": 190, "label": 0}
{"input": "@Test\n  public void testIsDeletionInProgress() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID1);\n    workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    assertFalse(deletionDao.isDeletionInProgress(TEST_WORKFLOW_ID1));\n    workflowDao.deleteWorkflow(TEST_WORKFLOW_ID1, User.create(\"tester\"));\n    assertTrue(deletionDao.isDeletionInProgress(TEST_WORKFLOW_ID1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDeletionDaoTest.java", "function_name": "testIsDeletionInProgress", "index": 191, "label": 0}
{"input": "private float calculateWidthRate(Rectangle rect2) {\n        return (super.getOccupiedAreaBBox().getWidth() + rect2.getWidth()) / getExcelWidth(sheet);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v03/XlsImageTableRenderer.java", "function_name": "calculateWidthRate", "index": 192, "label": 0}
{"input": "@Test\n  public void testWorkflowTerminated() {\n    when(workflow.getStatus()).thenReturn(Workflow.WorkflowStatus.FAILED);\n    statusListener.onWorkflowTerminated(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowTerminated\",\n                \"status\",\n                \"FAILED\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowTerminated", "index": 193, "label": 0}
{"input": "@Override\n    protected void onResume() {\n        super.onResume();\n        observeConnectionStatus();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "onResume", "index": 194, "label": 0}
{"input": "@Test\n  public void testRunWithProcessAndPiggybackProcess() throws InterruptedException {\n    when(messageQueue.take()).thenReturn(message).thenThrow(new InterruptedException(\"test\"));\n    when(dispatcher.processJobEvent(any())).thenReturn(Optional.of(jobEvent));\n    queueWorker.run();\n    verify(dispatcher, times(2)).processJobEvent(any());\n    verify(queueDao, times(0)).replace(eq(message), eq(jobEvent), anyLong());\n    verify(queueDao, times(1)).remove(eq(message));\n    verify(messageQueue, times(1)).drainTo(any(), anyInt());\n    verify(queueDao, times(1)).release(anyInt(), anyLong(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/worker/MaestroQueueWorkerTest.java", "function_name": "testRunWithProcessAndPiggybackProcess", "index": 195, "label": 0}
{"input": "private boolean isFirstPolling(Task task, StepRuntimeSummary runtimeSummary) {\n    StepRuntimeState state = runtimeSummary.getRuntimeState();\n    boolean isFirst =\n        (runtimeSummary.getType() == StepType.SUBWORKFLOW\n                || runtimeSummary.getType() == StepType.FOREACH)\n            && state.getStatus() == StepInstance.Status.CREATED\n            && state.getCreateTime() != null\n            && System.currentTimeMillis() - state.getCreateTime()\n                < Constants.FIRST_POLL_TIME_BUFFER_IN_MILLIS\n            && task.getPollCount() <= Constants.FIRST_POLLING_COUNT_LIMIT;\n    if (isFirst) {\n      LOG.info(\n          \"Execute a step instance {} for the first time, which has a status [{}]\",\n          runtimeSummary.getIdentity(),\n          state.getStatus().name());\n    }\n    return isFirst;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "isFirstPolling", "index": 196, "label": 0}
{"input": "public List<Tag> getRuntimeTags(Step stepDefinition) {\n    return getStepRuntime(stepDefinition.getType()).injectRuntimeTags();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeManager.java", "function_name": "getRuntimeTags", "index": 197, "label": 0}
{"input": "@Test\n  public void testGetStepInstances() {\n    List<StepInstance> instances = stepDao.getStepInstances(TEST_WORKFLOW_ID, 1, 1, \"job1\");\n    assertEquals(1, instances.size());\n    StepInstance instance = instances.get(0);\n    assertEquals(StepInstance.Status.RUNNING, instance.getRuntimeState().getStatus());\n    assertFalse(instance.getSignalDependencies().isSatisfied());\n    assertEquals(\n        2,\n        instance\n            .getOutputs()\n            .get(StepOutputsDefinition.StepOutputType.SIGNAL)\n            .asSignalStepOutputs()\n            .getOutputs()\n            .size());\n    assertTrue(instance.getArtifacts().isEmpty());\n    assertTrue(instance.getTimeline().isEmpty());\n    instance.setArtifacts(null);\n    instance.setTimeline(null);\n    Assertions.assertThat(instance).usingRecursiveComparison().isEqualTo(si);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstances", "index": 198, "label": 0}
{"input": "private static String encodeBase62(long value, boolean isOrdered) {\n    Checks.checkTrue(value > 0, \"Input value must be positive: %s\", value);\n\n    StringBuilder sb = new StringBuilder();\n    long val = value; \n    while (val != 0) {\n      sb.append(BASE62_CHARS[(int) (val % BASE)]);\n      val /= BASE;\n    }\n\n    if (isOrdered) {\n      sb.append(BASE62_CHARS[sb.length()]);\n      sb.reverse();\n    }\n    return sb.toString();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/IdHelper.java", "function_name": "encodeBase62", "index": 199, "label": 0}
{"input": "@Test\n  public void testCallTimeoutForDateTimeDeadline() {\n    SelType res =\n        SelUtilFunc.INSTANCE.call(\n            \"timeoutForDateTimeDeadline\",\n            new SelType[] {\n              SelJodaDateTime.of(new DateTime(\"2019-01-01\", DateTimeZone.UTC)),\n              SelString.of(\"1 day\")\n            });\n    assertEquals(\"STRING: 1546387187655 milliseconds\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallTimeoutForDateTimeDeadline", "index": 200, "label": 0}
{"input": "private void wakeup(String taskRef) {\n    Task snapshot = flow.getRunningTasks().get(taskRef);\n    if (snapshot == null) {\n      if (dequeRetryAction(taskRef)) {\n        retryTask(taskRef);\n      }\n    } else if (!snapshot.isActive()) {\n      snapshot.setActive(true);\n    }\n    wakeUpChildActor(taskRef, Action.TASK_ACTIVATE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "wakeup", "index": 201, "label": 0}
{"input": "@Test\n  public void testGetFromStep() throws Exception {\n    StepRuntimeSummary summary = loadObject(TEST_STEP_RUNTIME_SUMMARY, StepRuntimeSummary.class);\n    when(allStepOutputData.get(\"step1\"))\n        .thenReturn(Collections.singletonMap(\"maestro_step_runtime_summary\", summary));\n    assertEquals(\"foo\", paramExtension.getFromStep(\"step1\", \"param1\"));\n    assertEquals(\"SUCCEEDED\", paramExtension.getFromStep(\"step1\", Constants.STEP_STATUS_PARAM));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionTest.java", "function_name": "testGetFromStep", "index": 202, "label": 0}
{"input": "@Test\n    public void noModelRead() throws Exception {\n        ZipSecureFile.setMaxEntrySize(Long.MAX_VALUE);\n        long start = System.currentTimeMillis();\n        EasyExcel.read(TestFileUtil.readUserHomeFile(\"test/ld.xlsx\"), new NoModelLargeDataListener()).sheet().doRead();\n        LOGGER.info(\"Large data total time spent:{}\", System.currentTimeMillis() - start);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/large/TempLargeDataTest.java", "function_name": "noModelRead", "index": 203, "label": 0}
{"input": "@Test\n\tvoid testTemplateConfigure() {\n\t\tPromptTemplateBuilderConfigure configure = new PromptTemplateBuilderConfigure();\n\t\tconfigure.setPromptTemplateBuilderCustomizers(List.of(builder -> {\n\t\t\tbuilder.variables(Map.of(\"name\", \"yuhuangbin\")).renderer(StTemplateRenderer.builder().build());\n\t\t}));\n\t\tfactory = new ConfigurablePromptTemplateFactory(configure);\n\n\t\tList<ConfigurablePromptTemplateFactory.ConfigurablePromptTemplateModel> configList = new ArrayList<>();\n\t\tMap<String, Object> model = new HashMap<>();\n\t\tmodel.put(\"name\", \"John\");\n\n\t\tconfigList.add(new ConfigurablePromptTemplateFactory.ConfigurablePromptTemplateModel(TEST_TEMPLATE_NAME,\n\t\t\t\tTEST_TEMPLATE_CONTENT, model));\n\n\t\tfactory.onConfigChange(configList);\n\t\tConfigurablePromptTemplate template = factory.getTemplate(TEST_TEMPLATE_NAME);\n\t\tassertThat(template.render()).isNotEqualTo(\"Hello, John!\");\n\t\tassertThat(template.render()).isEqualTo(\"Hello, yuhuangbin!\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57c9ddbb8f0c222fa73a69fa8ca0cd63deace926", "file_path": "spring-ai-alibaba-prompt/spring-ai-alibaba-prompt-nacos/src/test/java/com/alibaba/cloud/ai/prompt/ConfigurablePromptTemplateFactoryTests.java", "function_name": "testTemplateConfigure", "index": 204, "label": 0}
{"input": "public static String generateSubAibRpcId(String aibRpcId, Long subRpcIdIndex) {\n\t\t\n\t\tif (StringUtils.isEmpty(aibRpcId)) {\n\t\t\treturn DEFAULT_INIT_AIB_RPC_ID;\n\t\t}\n\t\tif (Objects.isNull(subRpcIdIndex)) {\n\t\t\treturn String.format(format, aibRpcId, \"1\");\n\t\t}\n\t\treturn String.format(format, aibRpcId, subRpcIdIndex);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/code/LogIdGenerator.java", "function_name": "generateSubAibRpcId", "index": 205, "label": 0}
{"input": "public Builder setField3(int value) {\n\n                field3_ = value;\n                bitField0_ |= 0x00000004;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setField3", "index": 206, "label": 0}
{"input": "@Test\n  public void testAddBackDeletedWorkflowDef() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID1);\n    workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    WorkflowInstance instance =\n        loadObject(\n            \"fixtures/instances/sample-workflow-instance-created.json\", WorkflowInstance.class);\n    instance.setWorkflowId(TEST_WORKFLOW_ID1);\n    runStrategyDao.startWithRunStrategy(instance, RunStrategy.create(\"SEQUENTIAL\"));\n    MaestroTestHelper.deleteWorkflow(dataSource, TEST_WORKFLOW_ID1);\n    WorkflowDefinition wfdAnother = loadWorkflow(TEST_WORKFLOW_ID1);\n    workflowDao.addWorkflowDefinition(\n        wfdAnother, wfdAnother.getPropertiesSnapshot().extractProperties());\n    WorkflowOverviewResponse response = workflowDao.getWorkflowOverview(TEST_WORKFLOW_ID1);\n    assertEquals(Long.valueOf(1), response.getLatestInstanceId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testAddBackDeletedWorkflowDef", "index": 207, "label": 0}
{"input": "private Object evalEager(VirtualFrame frame, VmMap value) {\n      if (skipEntryTypeChecks) return value;\n      for (var entry : value) {\n        keyTypeNode.executeEagerly(frame, VmUtils.getKey(entry));\n        valueTypeNode.executeLazily(frame, VmUtils.getValue(entry));\n      }\n\n      LoopNode.reportLoopCount(this, value.getLength());\n      return value;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "643c6f5a76d0a2b81b7f8e22e0013037826ce2b5", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "evalEager", "index": 208, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(\n      value = \"maestro.redis.enabled\",\n      havingValue = \"false\",\n      matchIfMissing = true)\n  public InstanceStepConcurrencyHandler noopInstanceStepConcurrencyHandler() {\n    LOG.info(\"Creating maestro noop instanceStepConcurrencyHandler within Spring boot...\");\n    return InstanceStepConcurrencyHandler.NOOP_CONCURRENCY_HANDLER;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "noopInstanceStepConcurrencyHandler", "index": 209, "label": 0}
{"input": "@Bean\n  public OutputDataDao outputDataDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props) {\n    LOG.info(\"Creating outputDataDao within Spring boot...\");\n    return new OutputDataDao(crdbDataSource, objectMapper, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "outputDataDao", "index": 210, "label": 0}
{"input": "public void setAvailableToolKeys(List<String> availableToolKeys) {\n\t\t\tthis.availableToolKeys = availableToolKeys;\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/startupAgent/StartupAgentConfigLoader.java", "function_name": "setAvailableToolKeys", "index": 211, "label": 0}
{"input": "@Bean(initMethod = \"init\")\n  public DefaultParamManager defaultParamManager(\n      @Qualifier(OBJECT_MAPPER_WITH_YAML_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating DefaultParamManager within Spring boot...\");\n    return new DefaultParamManager(objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "defaultParamManager", "index": 212, "label": 0}
{"input": "@Transactional\n\tpublic void savePlanTemplate(String planTemplateId, String title, String userRequest, String planJson) {\n\t\t\n\t\tPlanTemplate template = new PlanTemplate(planTemplateId, title, userRequest);\n\t\tplanTemplateRepository.save(template);\n\n\t\t\n\t\tsaveToVersionHistory(planTemplateId, planJson);\n\n\t\tlogger.info(\"Saved plan template {} and its first version\", planTemplateId);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/service/PlanTemplateService.java", "function_name": "savePlanTemplate", "index": 213, "label": 0}
{"input": "public ResourceManager(SecurityManager securityManager, Collection<ResourceReader> readers) {\n    this.securityManager = securityManager;\n\n    for (var reader : readers) {\n      resourceReaders.put(reader.getUriScheme(), reader);\n    }\n\n    resourceFactory =\n        new VmObjectFactory<Resource>(BaseModule::getResourceClass)\n            .addProperty(\"uri\", resource -> resource.uri().toString())\n            .addProperty(\"text\", Resource::getText)\n            .addProperty(\"bytes\", resource -> new VmBytes(resource.bytes()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/ResourceManager.java", "function_name": "ResourceManager", "index": 214, "label": 0}
{"input": "public StringConstant getUrl() {\n    assert children != null;\n    return (StringConstant) children.get(0);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ExtendsOrAmendsClause.java", "function_name": "getUrl", "index": 215, "label": 0}
{"input": "@Test\n  public void testPendingRecordsPublish() {\n    StepRuntimeSummary stepRuntimeSummary =\n        StepRuntimeSummary.builder()\n            .stepId(\"test-summary\")\n            .stepAttemptId(2)\n            .stepInstanceId(1)\n            .dbOperation(DbOperation.UPDATE)\n            .pendingRecords(\n                Collections.singletonList(\n                    mock(StepInstanceUpdateJobEvent.StepInstancePendingRecord.class)))\n            .build();\n    Optional<Details> details = syncManager.sync(instance, workflowSummary, stepRuntimeSummary);\n    assertFalse(details.isPresent());\n    verify(instanceDao, times(1)).updateStepInstance(workflowSummary, stepRuntimeSummary);\n    verify(publisher, times(1)).publish(any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepSyncManagerTest.java", "function_name": "testPendingRecordsPublish", "index": 216, "label": 0}
{"input": "public Builder clearField2() {\n                field2_ = getDefaultInstance().getField2();\n                bitField0_ = (bitField0_ & ~0x00000002);\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "clearField2", "index": 217, "label": 0}
{"input": "private ObjectMember.WhenGenerator parseWhenGenerator() {\n    var start = next().span;\n    expect(Token.LPAREN, \"unexpectedToken\", \"(\");\n    var pred = parseExpr(\")\");\n    expect(Token.RPAREN, \"unexpectedToken\", \")\");\n    var body = parseObjectBody();\n    var end = body.span();\n    ObjectBody elseBody = null;\n    if (lookahead == Token.ELSE) {\n      next();\n      elseBody = parseObjectBody();\n      end = elseBody.span();\n    }\n    return new ObjectMember.WhenGenerator(pred, body, elseBody, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseWhenGenerator", "index": 218, "label": 0}
{"input": "public DynamicAgent(LlmService llmService, PlanExecutionRecorder planExecutionRecorder,\n\t\t\tManusProperties manusProperties, String name, String description, String nextStepPrompt,\n\t\t\tList<String> availableToolKeys, ToolCallingManager toolCallingManager,\n\t\t\tMap<String, Object> initialAgentSetting, UserInputService userInputService, PromptLoader promptLoader) {\n\t\tsuper(llmService, planExecutionRecorder, manusProperties, initialAgentSetting, promptLoader);\n\t\tthis.agentName = name;\n\t\tthis.agentDescription = description;\n\t\tthis.nextStepPrompt = nextStepPrompt;\n\t\tthis.availableToolKeys = availableToolKeys;\n\t\tthis.toolCallingManager = toolCallingManager;\n\t\tthis.userInputService = userInputService;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/DynamicAgent.java", "function_name": "DynamicAgent", "index": 219, "label": 0}
{"input": "public ImportExpr(StringConstant importStr, boolean isGlob, Span span) {\n      super(span, List.of(importStr));\n      this.isGlob = isGlob;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "ImportExpr", "index": 220, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testInvalidIndexAccess() throws Exception {\n    run(\"param['ab'];\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testInvalidIndexAccess", "index": 221, "label": 0}
{"input": "public List<ClassMethod> getMethods() {\n    var res = new ArrayList<ClassMethod>();\n    for (var child : children) {\n      if (child instanceof ClassMethod classMethod) {\n        res.add(classMethod);\n      }\n    }\n    return res;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Module.java", "function_name": "getMethods", "index": 222, "label": 0}
{"input": "@Override\n  @SuppressWarnings(\"deprecation\")\n  public void checkAwtEventQueueAccess() {\n    if (accs.get() != null) {\n      super.checkAwtEventQueueAccess();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkAwtEventQueueAccess", "index": 223, "label": 0}
{"input": "@Test\n  public void testSend() {\n    MaestroEvent event = WorkflowDefinitionChangeEvent.builder().workflowId(\"test-wf\").build();\n    when(amazonSns.publish(eq(\"sns-topic-test\"), any())).thenReturn(mock(PublishResult.class));\n    client.send(event);\n    verify(amazonSns, Mockito.times(1)).publish(anyString(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/publisher/SnsEventNotificationPublisherTest.java", "function_name": "testSend", "index": 224, "label": 0}
{"input": "public static JSONObject getSafetyInfo(String appId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        return OkhttpUtil.postJSON(\"/personal/getSafetyInfo\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/PersonalApi.java", "function_name": "getSafetyInfo", "index": 225, "label": 0}
{"input": "@Test\n  public void testParseRetryPolicyWithErrorFallback() throws Exception {\n    WorkflowSummary workflowSummary = new WorkflowSummary();\n    workflowSummary.setParams(\n        Map.of(\n            \"foo\", buildParam(\"foo\", 3L),\n            \"far\", buildParam(\"far\", 100L),\n            \"bar\", buildParam(\"bar\", 100L),\n            \"bat\", buildParam(\"bat\", \"2\"),\n            \"baz\", buildParam(\"baz\", \"foo\"1)));\n    StepInstance.StepRetry actual = initializeStepRetry(true, workflowSummary);\n\n    \n    Assert.assertEquals(2, actual.getErrorRetryLimit());\n    Assert.assertEquals(10, actual.getPlatformRetryLimit());\n    Assert.assertEquals(0, actual.getTimeoutRetryLimit());\n    Assert.assertEquals(Defaults.DEFAULT_EXPONENTIAL_BACK_OFF, actual.getBackoff());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tasks/MaestroTaskTest.java", "function_name": "testParseRetryPolicyWithErrorFallback", "index": 226, "label": 0}
{"input": "private ToolExecuteResult executeAction(String action, String url, Integer index, String text) {\n\t\tBrowserRequestVO request = new BrowserRequestVO();\n\t\trequest.setAction(action);\n\n\t\tif (url != null) {\n\t\t\trequest.setUrl(url);\n\t\t}\n\n\t\tif (index != null) {\n\t\t\trequest.setIndex(index);\n\t\t}\n\n\t\tif (text != null) {\n\t\t\trequest.setText(text);\n\t\t}\n\n\t\treturn browserUseTool.run(request);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b519b7c9cc1f88dafec21315dbc4bc5cb5ac4fe1", "file_path": "spring-ai-alibaba-jmanus/src/test/java/com/alibaba/cloud/ai/example/manus/tool/BrowserUseToolSpringTest.java", "function_name": "executeAction", "index": 227, "label": 0}
{"input": "@SneakyThrows(InvalidConfigurationException.class)\n    public void register(@NotNull String locale, @NotNull String path, @NotNull String text) {\n        locale = locale.toLowerCase(Locale.ROOT).replace(\"-\", \"_\");\n\n        \n        if (!loadedLanguages.contains(locale)) {\n            loadLanguage(locale);\n        }\n\n        YamlConfiguration configuration = languageFilesManager.getDistribution(locale);\n        if (configuration == null) {\n            configuration = new YamlConfiguration();\n            configuration.loadFromString(languageFilesManager.getDistribution(\"en_us\").saveToString());\n        }\n        configuration.set(path, text);\n        languageFilesManager.deploy(locale, configuration);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "00640fe4d10cb62782952a75d392f5ca0b48d193", "file_path": "src/main/java/com/ghostchu/peerbanhelper/text/TextManager.java", "function_name": "register", "index": 228, "label": 0}
{"input": "private static Workflow createInlineWorkflow(\n      String foreachWorkflowId, String foreachIdentity, ForeachStep foreachStep) {\n    return Workflow.builder()\n        .id(foreachWorkflowId)\n        .name(foreachIdentity)\n        .description(\n            \"Maestro foreach inline workflow including steps within foreach created by \"\n                + foreachIdentity)\n        .tags(foreachStep.getTags())\n        \n        .params(Collections.emptyMap()) \n        .steps(foreachStep.getSteps())\n        .build(); \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "createInlineWorkflow", "index": 229, "label": 0}
{"input": "private static int getDelayInSeconds(TimeTriggerWithJitter trigger, String salt) {\n    if (trigger.getFuzzyMaxDelay() == null) {\n      return 0;\n    }\n    long delayInMillis = DurationParser.getDurationInMillis(trigger.getFuzzyMaxDelay());\n    if (delayInMillis == 0) {\n      return 0;\n    }\n    UUID triggerUUID = IdHelper.createUuid(trigger + salt);\n    Random rng = ThreadLocalRandom.current();\n    rng.setSeed(triggerUUID.getLeastSignificantBits());\n    return rng.nextInt((int) (delayInMillis / TimeTrigger.MS_IN_SECONDS));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/TriggerHelper.java", "function_name": "getDelayInSeconds", "index": 230, "label": 0}
{"input": "public void prepareForInteraction(Page page) {\n\t\tif (iframePath != null && !iframePath.isEmpty()) {\n\t\t\t\n\t\t\tFrame currentFrame = page.mainFrame();\n\n\t\t\t\n\t\t\tString[] indices = iframePath.split(\"/\");\n\t\t\tfor (String index : indices) {\n\t\t\t\tint frameIndex = Integer.parseInt(index);\n\t\t\t\tcurrentFrame = currentFrame.childFrames().get(frameIndex);\n\t\t\t}\n\n\t\t\tthis.iframeElement = currentFrame;\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/WebElementWrapper.java", "function_name": "prepareForInteraction", "index": 231, "label": 0}
{"input": "@Override\n    public String currentUser() {\n        String userConfigPath = getUserConfigPath();\n        if (!FileUtil.exist(userConfigPath)) {\n            return Optional.of(getWxIds()).filter(items -> !items.isEmpty()).map(items -> items.get(0)).orElse(null);\n        }\n        return FileUtil.readUtf8String(getUserConfigPath());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "currentUser", "index": 232, "label": 0}
{"input": "@Test\n        void asChainedAccessorsJavaBean() {\n            String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.csv\";\n            try (ExcelReader excelReader = EasyExcel.read(fileName, DemoChainAccessorsData.class, new ReadListener<DemoChainAccessorsData>() {\n                @Override\n                public void invoke(DemoChainAccessorsData data, AnalysisContext context) {\n                    Assertions.assertNotNull(data.getString());\n                    Assertions.assertNotNull(data.getDate());\n                    Assertions.assertNotNull(data.getDoubleData());\n                }\n\n                @Override\n                public void doAfterAllAnalysed(AnalysisContext context) {\n                }\n            }).build()) {\n                excelReader.readAll();\n            }\n        }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "67fb5e8a93ccb26f98953e3170c869f1d5afc109", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "asChainedAccessorsJavaBean", "index": 233, "label": 0}
{"input": "public Builder clearField1() {\n                bitField0_ = (bitField0_ & ~0x00000001);\n                field1_ = 0;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "clearField1", "index": 234, "label": 0}
{"input": "@Override\n    public void cleanOnlineUserByRole(Long roleId) {\n        List<String> keys = StpUtil.searchTokenValue(\"\", 0, -1, false);\n        if (CollUtil.isEmpty(keys)) {\n            return;\n        }\n        \n        keys.forEach(key -> {\n            String token = StringUtils.substringAfterLast(key, \":\");\n            \n            if (StpUtil.stpLogic.getTokenActivityTimeoutByToken(token) < -1) {\n                return;\n            }\n            \n            LoginUser loginUser = LoginHelper.getLoginUser();\n            if (loginUser.getRoles().stream().anyMatch(r -> r.getRoleId().equals(roleId))) {\n                try {\n                    StpUtil.logoutByTokenValue(token);\n                } catch (NotLoginException ignored) {\n                }\n            }\n        });\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "4e2ec2dc82a79b96a000015482d73a52c2fb6bb1", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysRoleServiceImpl.java", "function_name": "cleanOnlineUserByRole", "index": 235, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testNotSupportedCall() {\n    orig.call(\"parse\", new SelType[] {SelLong.of(1)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelLongTest.java", "function_name": "testNotSupportedCall", "index": 236, "label": 0}
{"input": "private void startTask(TaskDef def) {\n    Task task = flow.newTask(def, false);\n    runTask(task, Action.TASK_START);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "startTask", "index": 237, "label": 0}
{"input": "@Override\n    public Backoff mergeWithDefault() {\n      RetryPolicy.FixedBackoff defaultFixedBackoff = Defaults.DEFAULT_FIXED_BACK_OFF;\n      RetryPolicy.FixedBackoff.FixedBackoffBuilder fixedBackoffBuilder = this.toBuilder();\n      if (fixedBackoffBuilder.errorRetryBackoffInSecs == null) {\n        fixedBackoffBuilder.errorRetryBackoffInSecs = defaultFixedBackoff.errorRetryBackoffInSecs;\n      }\n      if (fixedBackoffBuilder.platformRetryBackoffInSecs == null) {\n        fixedBackoffBuilder.platformRetryBackoffInSecs =\n            defaultFixedBackoff.platformRetryBackoffInSecs;\n      }\n      return fixedBackoffBuilder.build();\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/RetryPolicy.java", "function_name": "mergeWithDefault", "index": 238, "label": 0}
{"input": "@Test\n  public void testProcessWithoutMatch() {\n    SignalInstance instance = new SignalInstance();\n    instance.setSeqId(12);\n    Supplier<SignalInstance> messageSupplier = () -> instance;\n    when(brokerDao.getSubscribedTriggers(any())).thenReturn(List.of());\n    processor.process(messageSupplier);\n    verify(producer, times(0)).push(any(SignalTriggerMatch.class));\n    assertEquals(\n        0L,\n        metricRepo\n            .getCounter(MetricConstants.SIGNAL_TRIGGER_MATCH_FOUND, SignalInstanceProcessor.class)\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalInstanceProcessorTest.java", "function_name": "testProcessWithoutMatch", "index": 239, "label": 0}
{"input": "public static Optional<SearchService> getAvailableSearchService(ApplicationContext context) {\n\t\tString toolName = getAvailableSearchToolName(context).orElse(null);\n\t\tif (toolName == null) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\treturn getSearchService(context, toolName);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-searches/src/main/java/com/alibaba/cloud/ai/toolcalling/searches/SearchUtil.java", "function_name": "getAvailableSearchService", "index": 240, "label": 0}
{"input": "private boolean isAlertingValid(\n        @Nullable Alerting alerting, ConstraintValidatorContext context) {\n      return alertingValidator == null || alertingValidator.isValid(alerting, context);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/PropertiesConstraint.java", "function_name": "isAlertingValid", "index": 241, "label": 0}
{"input": "@Test\n  public void testProcessInvalidSignalInstance() {\n    Supplier<SignalInstance> messageSupplier = SignalInstance::new;\n    AssertHelper.assertThrows(\n        \"Invalid seq id\",\n        IllegalArgumentException.class,\n        \"it must be positive\",\n        () -> processor.process(messageSupplier));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalInstanceProcessorTest.java", "function_name": "testProcessInvalidSignalInstance", "index": 242, "label": 0}
{"input": "TestWorkflowCreateRequest500BytesLimit(WorkflowCreateRequest workflowCreateRequest) {\n      this.workflowCreateRequest = workflowCreateRequest;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/JsonSizeConstraintTest.java", "function_name": "TestWorkflowCreateRequest500BytesLimit", "index": 243, "label": 0}
{"input": "GroupActor(FlowGroup group, ExecutionContext context) {\n    super(context, null);\n    this.group = group;\n    this.heartbeatInterval = context.getProperties().getHeartbeatIntervalInMillis();\n    this.fetchLimit = context.getProperties().getGroupFlowFetchLimit();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/GroupActor.java", "function_name": "GroupActor", "index": 244, "label": 0}
{"input": "@Test\n    public void cellDataRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"cellDataDemo.xlsx\";\n        \n        EasyExcel.read(fileName, CellDataReadDemoData.class, new CellDataDemoHeadDataListener()).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "d696a25ef6e5aa3d84fdc5ff3b823e9bb1fdd746", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "cellDataRead", "index": 245, "label": 0}
{"input": "@ConstructorProperties({\"name\", \"age\", \"hobbies\", \"address\"})\n    PersonConstructorProperties(String name, int age, Set<Hobby> hobbies, Address address) {\n      this.name = name;\n      this.age = age;\n      this.hobbies = hobbies;\n      this.address = address;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d9c65d484a95316736712f0e0db91c45b7fe8a78", "file_path": "pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToDataObjectTest.java", "function_name": "PersonConstructorProperties", "index": 246, "label": 0}
{"input": "public Parameterized(\n        SourceSection sourceSection,\n        VmLanguage language,\n        ExpressionNode resolveTypeNode,\n        UnresolvedTypeNode[] typeArgumentNodes) {\n      super(sourceSection);\n      this.language = language;\n      this.resolveTypeNode = resolveTypeNode;\n      this.typeArgumentNodes = typeArgumentNodes;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/UnresolvedTypeNode.java", "function_name": "Parameterized", "index": 247, "label": 0}
{"input": "@Override\n  public void onWorkflowCompleted(Workflow workflow) {\n    LOG.trace(\"Workflow {} is completed\", workflow.getWorkflowId());\n    metrics.counter(\n        MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n        getClass(),\n        TYPE_TAG,\n        \"onWorkflowCompleted\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListener.java", "function_name": "onWorkflowCompleted", "index": 248, "label": 0}
{"input": "private String getLaunchedJobId(StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary.getArtifacts().containsKey(Artifact.Type.KUBERNETES.key())) {\n      KubernetesArtifact artifact =\n          runtimeSummary.getArtifacts().get(Artifact.Type.KUBERNETES.key()).asKubernetes();\n      return artifact.getJobId();\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntime.java", "function_name": "getLaunchedJobId", "index": 249, "label": 0}
{"input": "public static Optional<Long> toNumeric(String input) {\n    if (input == null) {\n      return Optional.empty();\n    }\n    try {\n      return Optional.of(Long.parseLong(input));\n    } catch (NumberFormatException nfe) {\n      return Optional.empty();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/Checks.java", "function_name": "toNumeric", "index": 250, "label": 0}
{"input": "@Bean\n  public DryRunValidator getDryRunValidator(\n      @Qualifier(STEP_RUNTIME_QUALIFIER) Map<StepType, StepRuntime> stepRuntimeMap,\n      DefaultParamManager defaultParamManager,\n      ParamsManager paramsManager,\n      WorkflowHelper workflowHelper) {\n    LOG.info(\"Creating DryRunValidator via spring boot...\");\n    return new DryRunValidator(stepRuntimeMap, defaultParamManager, paramsManager, workflowHelper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "getDryRunValidator", "index": 251, "label": 0}
{"input": "@Test\n  public void testGetFlows() {\n    Flow flow = createFlow();\n    dao.insertFlow(flow);\n    var flows = dao.getFlows(new FlowGroup(10, 1, \"testAddress\"), 10, \"test\");\n    assertTrue(flows.isEmpty());\n    flows = dao.getFlows(new FlowGroup(9, 2, \"testAddress\"), 10, \"test\");\n    assertTrue(flows.isEmpty());\n    flows = dao.getFlows(new FlowGroup(9, 2, \"testAddress\"), 10, \"z\");\n    assertTrue(flows.isEmpty());\n    dao.deleteFlow(flow);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/dao/MaestroFlowDaoTest.java", "function_name": "testGetFlows", "index": 252, "label": 0}
{"input": "@Test\n  public void testDeleteTrigger() {\n    brokerDao.deleteTrigger(\"test-wf1\", \"uuid1\");\n    verify(triggerDao, times(1)).delete(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testDeleteTrigger", "index": 253, "label": 0}
{"input": "private static SelString varArgsFormat(SelType[] args) {\n    if (args.length > 0) {\n      String arg0 = ((SelString) args[0]).val;\n      if (args.length == 2 && args[1] instanceof SelArray) {\n        return SelString.of(String.format(arg0, args[1].unbox()));\n      } else {\n        Object[] varargs = new Object[args.length - 1];\n        for (int i = 0; i < varargs.length; ++i) {\n          varargs[i] = args[i + 1].unbox();\n        }\n        return SelString.of(String.format(arg0, varargs));\n      }\n    }\n    throw new IllegalArgumentException(\"Invalid empty input args for String.format method\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelString.java", "function_name": "varArgsFormat", "index": 254, "label": 0}
{"input": "@Test\n  public void testCleanupNonOptionalNestedEmptyParamsThrowException()\n      throws JsonProcessingException {\n    for (InternalParamMode mode : InternalParamMode.values()) {\n      if (!mode.equals(InternalParamMode.OPTIONAL)) {\n        Map<String, ParamDefinition> allParams =\n            parseParamDefMap(\n                String.format(\n                    \"{'map': {'type': 'MAP','value': {'empty': {'type': 'STRING', 'internal_mode': '%s'}}}}\",\n                    mode));\n        AssertHelper.assertThrows(\n            String.format(\"Should not allow empty for internal_mode, mode [%s]\", mode.name()),\n            IllegalArgumentException.class,\n            \"[empty] is a required parameter (type=[STRING])\",\n            () -> ParamsMergeHelper.cleanupParams(allParams));\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testCleanupNonOptionalNestedEmptyParamsThrowException", "index": 255, "label": 0}
{"input": "protected InterpolationScope(int quotes, int pounds) {\n      this.quotes = quotes;\n      this.pounds = pounds;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "InterpolationScope", "index": 256, "label": 0}
{"input": "@VisibleForTesting\n  void annotate(MaestroTracingContext tracingContext, String value) {\n    try {\n      if (tracingContext == null) {\n        return;\n      }\n      Span span = getSpan(tracingContext);\n      LOG.trace(\n          \"Annotating span traceID: {}, spanID: {} with value {}\",\n          span.context().traceIdString(),\n          span.context().spanIdString(),\n          value);\n      span.annotate(value);\n    } catch (Exception ex) {\n      LOG.trace(\"Exception caught when annotating {} with {}\", tracingContext, value, ex);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tracing/MaestroTracingManager.java", "function_name": "annotate", "index": 257, "label": 0}
{"input": "public void markStarting(MaestroTracingManager tracingManager) {\n    runtimeState.setStartTime(updateStatus(StepInstance.Status.STARTING, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markStarting", "index": 258, "label": 0}
{"input": "public RunRequestBuilder requester(User user) {\n      ManualInitiator initiator = new ManualInitiator();\n      initiator.setDepth(0);\n      initiator.setUser(user);\n      this.initiator = initiator;\n      return this;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunRequest.java", "function_name": "requester", "index": 259, "label": 0}
{"input": "public VmMapping(\n      MaterializedFrame enclosingFrame,\n      VmObject parent,\n      UnmodifiableEconomicMap<Object, ObjectMember> members,\n      ListingOrMappingTypeCastNode typeCastNode,\n      Object typeCheckReceiver,\n      VmObjectLike typeCheckOwner) {\n    super(enclosingFrame, parent, members, typeCastNode, typeCheckReceiver, typeCheckOwner);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmMapping.java", "function_name": "VmMapping", "index": 260, "label": 0}
{"input": "private List<Modifier> parseModifierList() {\n    var modifiers = new ArrayList<Modifier>();\n    while (lookahead.isModifier()) {\n      modifiers.add(parseModifier());\n    }\n    return modifiers;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseModifierList", "index": 261, "label": 0}
{"input": "@Bean\n  public PublishJobEventProcessor publishJobEventProcessor(\n      WorkflowHelper workflowHelper,\n      MaestroNotificationPublisher notificationPublisher,\n      MaestroStepInstanceActionDao maestroStepInstanceActionDao,\n      InstanceStepConcurrencyHandler instanceStepConcurrencyHandler,\n      @Value(\"${maestro.cluster.name}\") String clusterName) {\n    LOG.info(\n        \"Creating publishJobEventProcessor for cluster [{}] within Spring boot...\", clusterName);\n    return new PublishJobEventProcessor(\n        workflowHelper,\n        notificationPublisher,\n        TagPermitManager.NOOP_TAG_PERMIT_MANAGER,\n        maestroStepInstanceActionDao,\n        instanceStepConcurrencyHandler,\n        clusterName);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "publishJobEventProcessor", "index": 262, "label": 0}
{"input": "@Test\n  public void testCleanupOptionalEmptyMap() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\"{'map': {'type': 'MAP','value': {}, 'internal_mode': 'OPTIONAL'}}\");\n    Map<String, ParamDefinition> cleanedParams = ParamsMergeHelper.cleanupParams(allParams);\n    assertEquals(0, cleanedParams.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testCleanupOptionalEmptyMap", "index": 263, "label": 0}
{"input": "private OutputData deriveOutputDataWithIdentity(StepOutputDataRequest request) {\n    \n    \n    \n    return OutputData.builder()\n        .externalJobType(StepType.KUBERNETES)\n        \n        \n        \n        .params(request.getParams())\n        .artifacts(request.getArtifacts())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b6aaa4f5d3747068470ced2eb91c4ac7ba18f471", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/OutputDataController.java", "function_name": "deriveOutputDataWithIdentity", "index": 264, "label": 0}
{"input": "@Test\n  public void testLongArrayParameter() {\n    LongArrayParameter param =\n        LongArrayParameter.builder()\n            .name(\"longArrayParam\")\n            .expression(\"return [1, 2, 3];\")\n            .evaluatedResult(new long[] {123L})\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asLongArrayParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testLongArrayParameter", "index": 265, "label": 0}
{"input": "public SelThreadFactory(\n      int stackLimit, int loopLimit, int arrayLimit, int lengthLimit, long visitLimit) {\n    this.stackLimit = stackLimit;\n    this.loopLimit = loopLimit;\n    this.arrayLimit = arrayLimit;\n    this.lengthLimit = lengthLimit;\n    this.visitLimit = visitLimit;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelThreadFactory.java", "function_name": "SelThreadFactory", "index": 266, "label": 0}
{"input": "private DataType searchByNameInAllCategories(DataTypeManager dtm, String name) {\n        \n        Iterator<DataType> allTypes = dtm.getAllDataTypes();\n        while (allTypes.hasNext()) {\n            DataType dt = allTypes.next();\n            \n            if (dt.getName().equals(name)) {\n                return dt;\n            }\n            \n            if (dt.getName().equalsIgnoreCase(name)) {\n                return dt;\n            }\n        }\n        return null;\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "searchByNameInAllCategories", "index": 267, "label": 0}
{"input": "protected void enrichNacosConfigProperties(Properties nacosConfigProperties) {\n\t\tif (environment == null) {\n\t\t\treturn;\n\t\t}\n\t\tConfigurableEnvironment env = (ConfigurableEnvironment) environment;\n\t\tMap<String, Object> properties = getSubProperties(env.getPropertySources(), env, CONFIG_PREFIX);\n\t\tproperties.forEach((k, v) -> nacosConfigProperties.putIfAbsent(resolveKey(k), String.valueOf(v)));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "442bb2a794e6e258541f5ae07eebbd135201dc3a", "file_path": "spring-ai-alibaba-mcp/spring-ai-alibaba-mcp-nacos2/src/main/java/com/alibaba/cloud/ai/mcp/nacos2/NacosMcpProperties.java", "function_name": "enrichNacosConfigProperties", "index": 268, "label": 0}
{"input": "@Test\n    public void indexOrNameRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.xlsx\";\n        \n        EasyExcel.read(fileName, IndexOrNameData.class, new IndexOrNameDataListener()).numRows(1).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "indexOrNameRead", "index": 269, "label": 0}
{"input": "public static JSONObject pinChat(String appId, boolean top,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"top\",top);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/pinChat\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "pinChat", "index": 270, "label": 0}
{"input": "@Test\n  public void testRunForActionTaskPingForActiveRunningTaskWithChange() {\n    task.setStartTime(System.currentTimeMillis());\n    task.setTimeoutInMillis(3600000L);\n    task.setStartDelayInSeconds(3000);\n    when(context.execute(flow, task)).thenReturn(true);\n\n    taskActor.runForAction(Action.TASK_PING);\n    verify(context, times(1)).execute(any(), any());\n    assertEquals(\n        Set.of(Action.TASK_TIMEOUT, Action.TASK_PING), taskActor.getScheduledActions().keySet());\n    assertNull(task.getTimeoutInMillis());\n    assertEquals(1, task.getPollCount());\n    verify(context, times(1)).cloneTask(any());\n    verifyActions(flowActor, new Action.TaskUpdate(task));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionTaskPingForActiveRunningTaskWithChange", "index": 271, "label": 0}
{"input": "public static List<MapParameter> getSignalDependenciesParameters(\n      SignalDependenciesDefinition dependencies) {\n    if (dependencies == null || dependencies.definitions() == null) {\n      return Collections.emptyList();\n    }\n    return dependencies.definitions().stream()\n        .map(SignalTransformer::transform)\n        .collect(Collectors.toList());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getSignalDependenciesParameters", "index": 272, "label": 0}
{"input": "public static String getBuiltinFormat(Short index, String defaultFormat, Locale locale) {\n        if (index == null || index <= 0) {\n            return defaultFormat;\n        }\n        \n        \n        if (index < BUILTIN_FORMATS_ALL_LANGUAGES.length) {\n            String format = BUILTIN_FORMATS_ALL_LANGUAGES[index];\n            if (format != null) {\n                return format;\n            }\n        }\n        \n        \n        if (!StringUtils.isEmpty(defaultFormat) && !defaultFormat.startsWith(RESERVED)) {\n            return defaultFormat;\n        }\n        \n        \n        String[] builtinFormat = switchBuiltinFormats(locale);\n        if (index >= builtinFormat.length) {\n            return defaultFormat;\n        }\n        return builtinFormat[index];\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/constant/BuiltinFormats.java", "function_name": "getBuiltinFormat", "index": 273, "label": 0}
{"input": "public Member.Builder addMembersBuilder(\n                    int index) {\n                return getMembersFieldBuilder().addBuilder(\n                        index, Member.getDefaultInstance());\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "addMembersBuilder", "index": 274, "label": 0}
{"input": "@Test\n    public void cp() throws IOException, InvalidFormatException {\n        String sourceFile = \"src/test/resources/poi/last_row_number_xssf_date_test.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        SXSSFWorkbook xssfWorkbook = new SXSSFWorkbook(new XSSFWorkbook(file));\n        SXSSFSheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n        SXSSFRow row = xssfSheet.getRow(0);\n        LOGGER.info(\"第一行数据:{}\", row);\n        xssfSheet.createRow(20);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "cp", "index": 275, "label": 0}
{"input": "public static JSONObject postLink(String appId, String toWxid, String title, String desc, String linkUrl, String thumbUrl) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"title\", title);\r\n        param.put(\"desc\", desc);\r\n        param.put(\"linkUrl\", linkUrl);\r\n        param.put(\"thumbUrl\", thumbUrl);\r\n        return OkhttpUtil.postJSON(\"/message/postLink\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postLink", "index": 276, "label": 0}
{"input": "private String toSql(\n      String signalName,\n      SignalMatchDto.ParamMatchDto paramMatch,\n      long checkpoint,\n      List<String> queryParams) {\n    boolean isNumeric = paramMatch.paramValue().isLong();\n    String encodedValue = IdHelper.encodeValue(paramMatch.paramValue());\n    String condition =\n        switch (paramMatch.operator()) {\n          case EQUALS_TO -> \"\";\n          case LESS_THAN, LESS_THAN_EQUALS_TO -> isNumeric ? \">'0' AND encoded_val\" : \"\";\n          case GREATER_THAN, GREATER_THAN_EQUALS_TO -> isNumeric ? \"\" : \"<'0' AND encoded_val\";\n        };\n    queryParams.add(signalName);\n    queryParams.add(paramMatch.paramName());\n    queryParams.add(encodedValue);\n    String sql =\n        MATCH_SIGNAL_PARAM_QUERY_PREFIX + condition + paramMatch.operator().getOperatorCode() + \"?\";\n    if (checkpoint > 0) {\n      sql = sql + \" AND signal_seq_id>\" + checkpoint;\n    }\n    return sql;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalParamDao.java", "function_name": "toSql", "index": 277, "label": 0}
{"input": "private void addDefaultHeadersIfMissing(HttpHeaders headers) {\n\n\t\tif (!headers.containsKey(HttpHeaders.AUTHORIZATION) && !(this.apiKey instanceof NoopApiKey)) {\n\t\t\theaders.setBearerAuth(this.apiKey.getValue());\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "addDefaultHeadersIfMissing", "index": 278, "label": 0}
{"input": "@Test(expected = AccessControlException.class)\n  public void testNoAccessToCreateThread() {\n    new Thread();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessToCreateThread", "index": 279, "label": 0}
{"input": "@Override\n  public CompletableFuture<Void> asyncAddEventExecution(EventExecution eventExecution) {\n    \n    return CompletableFuture.completedFuture(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "asyncAddEventExecution", "index": 280, "label": 0}
{"input": "public StringEscape(EscapeType type, Span span) {\n      super(span, null);\n      this.type = type;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringConstantPart.java", "function_name": "StringEscape", "index": 281, "label": 0}
{"input": "@Test\n  public void testTransformSignalOutputDefinitionToMap() throws IOException {\n    SignalOutputsDefinition definition =\n        loadObject(\n            \"fixtures/step_outputs/step_outputs_definition.json\", SignalOutputsDefinition.class);\n    MapParameter param = SignalTransformer.transform(definition.definitions().getFirst());\n    Assert.assertFalse(param.isEvaluated());\n    Assert.assertTrue(param.isLiteral());\n    Assert.assertEquals(\"out\", param.getValue().get(\"name\").getValue());\n    Assert.assertEquals(Long.valueOf(1), param.getValue().get(\"p1\").getValue());\n    Assert.assertEquals(\"1+1\", param.getValue().get(\"p2\").getExpression());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalTransformerTest.java", "function_name": "testTransformSignalOutputDefinitionToMap", "index": 282, "label": 0}
{"input": "TestWorkflowCreateRequest10Point3MBLimit(WorkflowCreateRequest workflowCreateRequest) {\n      this.workflowCreateRequest = workflowCreateRequest;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/JsonSizeConstraintTest.java", "function_name": "TestWorkflowCreateRequest10Point3MBLimit", "index": 283, "label": 0}
{"input": "private void checkExprLength(String expr) {\n    if (expr.length() >= lengthLimit) {\n      throw new IllegalArgumentException(\n          \"Expression length is over the limit: \" + lengthLimit + \" vs length: \" + expr.length());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelThread.java", "function_name": "checkExprLength", "index": 284, "label": 0}
{"input": "@Override\n  public void checkCreateClassLoader() {\n    if (accs.get() != null) {\n      super.checkCreateClassLoader();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkCreateClassLoader", "index": 285, "label": 0}
{"input": "@Test\n  public void testFlowCompleted() {\n    statusListener.onFlowCompleted(flow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowCompleted\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testFlowCompleted", "index": 286, "label": 0}
{"input": "@Override\n  @TruffleBoundary\n  public final @Nullable Object getCachedValue(Object key) {\n    var result = EconomicMaps.get(cachedValues, key);\n    \n    if (result != null || !members.isEmpty()) return result;\n\n    \n    \n    \n    \n        VmUtils.insertStackFrame(member, callTarget, e);\n        throw e;\n      }\n    }\n    setCachedValue(key, result);\n    return result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmListingOrMapping.java", "function_name": "getCachedValue", "index": 287, "label": 0}
{"input": "private Token lexSlash() {\n    switch (lookahead) {\n      case '/':\n        {\n          nextChar();\n          var token = lookahead == '/' ? Token.DOC_COMMENT : Token.LINE_COMMENT;\n          while (lookahead != '\\n' && lookahead != '\\r' && lookahead != EOF) {\n            nextChar();\n          }\n          return token;\n        }\n      case '*':\n        {\n          nextChar();\n          lexBlockComment();\n          return Token.BLOCK_COMMENT;\n        }\n      default:\n        return Token.DIV;\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexSlash", "index": 288, "label": 0}
{"input": "public void markTerminated(\n      StepInstance.Status terminalStatus, MaestroTracingManager tracingManager) {\n    Checks.checkTrue(\n        terminalStatus.isTerminal(),\n        \"Cannot terminate step %s to a non-terminal state [%s]\",\n        getIdentity(),\n        terminalStatus);\n    if (terminalStatus.isRestartable()) {\n      stepRetry.setRetryable(false);\n    }\n    runtimeState.setEndTime(updateStatus(terminalStatus, tracingManager));\n    dbOperation = DbOperation.UPSERT; \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markTerminated", "index": 289, "label": 0}
{"input": "@Test\n  public void testResumeFlowWithException() {\n    Mockito.doThrow(new RuntimeException(\"test\")).when(executionPreparer).resume(flow);\n    AssertHelper.assertThrows(\n        \"should throw and retry\",\n        MaestroRetryableError.class,\n        \"retry resuming flow due to an exception\",\n        () -> context.resumeFlow(flow));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testResumeFlowWithException", "index": 290, "label": 0}
{"input": "private boolean jj_3R_46() {\n    if (jj_scan_token(SC_AND)) return true;\n    if (jj_3R_45()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_46", "index": 291, "label": 0}
{"input": "private FullToken forceNextComment() {\n    var tk = lexer.next();\n    precededBySemicolon = false;\n    while (tk == Token.SEMICOLON) {\n      precededBySemicolon = true;\n      tk = lexer.next();\n    }\n    return new FullToken(\n        tk, lexer.span(), lexer.sCursor, lexer.cursor - lexer.sCursor, lexer.newLinesBetween);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "forceNextComment", "index": 292, "label": 0}
{"input": "private static int getDefaultTrustLevel(URI uri) {\n    return switch (uri.getScheme()) {\n      case \"repl\" -> 40;\n      case \"file\" -> uri.getHost() == null ? 30 : 10;\n      case \"jar\" -> {\n        if (uri.getSchemeSpecificPart().startsWith(\"nested:\")) {\n          \n          yield 20;\n        } else {\n          \n          yield getDefaultTrustLevel(URI.create(uri.toString().substring(4)));\n        }\n      }\n      case \"modulepath\" -> 20;\n      case \"pkl\" -> 0;\n      default -> 10;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "257bd6f699e1b4e85fafa23901f532d72bde4ce4", "file_path": "pkl-core/src/main/java/org/pkl/core/SecurityManagers.java", "function_name": "getDefaultTrustLevel", "index": 293, "label": 0}
{"input": "@Override\n  public void createWorkflowDef(WorkflowDef def) {\n    LOG.info(\"Creating a workflow definition: {}\", def);\n    createOrUpdateWorkflowDefinition(\n        CREATE_WORKFLOW_DEFINITION_STATEMENT, def, \"createWorkflowDef\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "createWorkflowDef", "index": 294, "label": 0}
{"input": "@JsonCreator\n  public RunStrategy(\n      @JsonProperty(\"rule\") Rule rule,\n      @JsonProperty(\"workflow_concurrency\") Long workflowConcurrency) {\n    Checks.notNull(rule, \"rule in run strategy cannot be null\");\n    long concurrency;\n    if (workflowConcurrency == null) {\n      concurrency = (rule == Rule.PARALLEL ? Defaults.DEFAULT_PARALLELISM : 1L);\n    } else {\n      concurrency = workflowConcurrency;\n    }\n    Checks.checkTrue(\n        concurrency <= 1 || rule == Rule.PARALLEL,\n        \"Only PARALLEL run strategy allows a workflow_concurrency greater than 1 \");\n    this.rule = rule;\n    this.workflowConcurrency = concurrency;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/RunStrategy.java", "function_name": "RunStrategy", "index": 295, "label": 0}
{"input": "private int jjMoveStringLiteralDfa10_0(long old0, long active0) {\n    if (((active0 &= old0)) == 0L) return jjStartNfa_0(8, old0, 0L);\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      jjStopStringLiteralDfa_0(9, active0, 0L);\n      return 10;\n    }\n    switch (curChar) {\n      case 101:\n        return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);\n      default:\n        break;\n    }\n    return jjStartNfa_0(9, active0, 0L);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa10_0", "index": 296, "label": 0}
{"input": "public static Message getOptQuryMessage(OverAllState state) throws IOException {\n\t\tList<String> queries = StateUtil.getOptimizeQueries(state);\n\t\tassert queries != null && !queries.isEmpty();\n\t\tString originalQuery = StateUtil.getQuery(state);\n\n\t\tList<String> results = queries.stream()\n\t\t\t.map(optimizeQuery -> \"original query:\" + originalQuery + \"optimize query:\" + optimizeQuery + \"\\n\")\n\t\t\t.collect(Collectors.toList());\n\n\t\tMessage userMessage = new UserMessage(String.valueOf(results));\n\t\treturn userMessage;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "781dd77480081b3a51f41ca6d6c8778b97867ea8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/TemplateUtil.java", "function_name": "getOptQuryMessage", "index": 297, "label": 0}
{"input": "@Test\n    public void t07() {\n        \n        \n        List<Map<Integer, Object>> list = EasyExcel\n            .read(TestFileUtil.getPath() + \"compatibility/t07.xlsx\")\n            .readDefaultReturn(ReadDefaultReturnEnum.ACTUAL_DATA)\n            .sheet()\n            .doReadSync();\n        log.info(\"data:{}\", JSON.toJSONString(list));\n        Assertions.assertEquals(0, new BigDecimal(\"24.1998124\").compareTo((BigDecimal)list.get(0).get(11)));\n\n        list = EasyExcel\n            .read(TestFileUtil.getPath() + \"compatibility/t07.xlsx\")\n            .sheet()\n            .doReadSync();\n        log.info(\"data:{}\", JSON.toJSONString(list));\n        Assertions.assertEquals(\"24.20\", list.get(0).get(11));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48a8c2b36277eef512023b5f9fa6b2615833a274", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t07", "index": 298, "label": 0}
{"input": "@PutMapping(\n      value = \"/{workflowId}/instances/{workflowInstanceId}/actions/kill\",\n      consumes = MediaType.ALL_VALUE)\n  @Operation(\n      summary = \"Kill a given workflow instance's latest run if it is in a non-terminal state\")\n  public WorkflowInstanceActionResponse killWorkflowInstance(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId,\n      @PathVariable(\"workflowInstanceId\") long workflowInstanceId) {\n    return actionHandler.killLatest(workflowId, workflowInstanceId, callerBuilder.build());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowInstanceActionController.java", "function_name": "killWorkflowInstance", "index": 299, "label": 0}
{"input": "@Bean\n  public MaestroWorkflowLauncher maestroWorkflowLauncher(WorkflowActionHandler actionHandler) {\n    LOG.info(\"Creating maestroWorkflowLauncher within Spring boot...\");\n    return new MaestroWorkflowLauncher(actionHandler);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "maestroWorkflowLauncher", "index": 300, "label": 0}
{"input": "@Test\n  public void testParseRetryPolicyWithInvalidDurationFallback() throws Exception {\n    WorkflowSummary workflowSummary = new WorkflowSummary();\n    workflowSummary.setParams(\n        Map.of(\n            \"foo\", buildParam(\"foo\", 3L),\n            \"far\", buildParam(\"far\", 100L),\n            \"bar\", buildParam(\"bar\", 10L),\n            \"bat\", buildParam(\"bat\", \"2\"),\n            \"baz\", buildParam(\"baz\", \"foo\"1)));\n    StepInstance.StepRetry actual = initializeStepRetry(true, workflowSummary);\n\n    \n    Assert.assertEquals(2, actual.getErrorRetryLimit());\n    Assert.assertEquals(10, actual.getPlatformRetryLimit());\n    Assert.assertEquals(0, actual.getTimeoutRetryLimit());\n    Assert.assertEquals(Defaults.DEFAULT_EXPONENTIAL_BACK_OFF, actual.getBackoff());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tasks/MaestroTaskTest.java", "function_name": "testParseRetryPolicyWithInvalidDurationFallback", "index": 301, "label": 0}
{"input": "@SuppressWarnings(\"unchecked\")\n\tprivate void processPageElements(Page page) {\n\t\ttry {\n\t\t\tint index = 0;\n\t\t\tfor (Frame frame : page.frames()) {\n\t\t\t\tList<Map<String, Object>> elementMapList = (List<Map<String, Object>>) frame\n\t\t\t\t\t.evaluate(EXTRACT_INTERACTIVE_ELEMENTS_JS, index);\n\t\t\t\tfor (Map<String, Object> elementMap : elementMapList) {\n\t\t\t\t\tInteger globalIndex = (Integer) elementMap.get(\"index\");\n\t\t\t\t\tInteractiveElement element = new InteractiveElement(globalIndex, frame, elementMap);\n\t\t\t\t\tinteractiveElements.add(element);\n\t\t\t\t\tindexToElementMap.put(globalIndex, element);\n\t\t\t\t}\n\t\t\t\tindex = interactiveElements.size();\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.warn(\"Error processing page elements: {}\", e.getMessage());\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/InteractiveElementRegistry.java", "function_name": "processPageElements", "index": 302, "label": 0}
{"input": "public static void checkTypeMatch(SelTypes lhs, SelTypes rhs) {\n    if (lhs != rhs) {\n      throw new IllegalArgumentException(\n          \"Type mismatch, lhs type: \" + lhs + \", rhs object type: \" + rhs);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypeUtil.java", "function_name": "checkTypeMatch", "index": 303, "label": 0}
{"input": "@Bean\n  public MaestroRunStrategyDao maestroRunStrategyDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props,\n      MaestroJobEventPublisher maestroJobEventPublisher,\n      MaestroMetrics metricRepo) {\n    LOG.info(\"Creating maestroRunStrategyDao within Spring boot...\");\n    return new MaestroRunStrategyDao(\n        crdbDataSource, objectMapper, props, maestroJobEventPublisher, metricRepo);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroRunStrategyDao", "index": 304, "label": 0}
{"input": "@Test\n  public void testVisitedReturnNode() {\n    root.jjtAddChild(returnNode, 2);\n    root.jjtAddChild(returnNode, 1);\n    root.jjtAddChild(returnNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.RETURN, res);\n    assertArrayEquals(new int[] {0, 0, 1, 0, 0}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedReturnNode", "index": 305, "label": 0}
{"input": "private ObjectMember.ObjectSpread parseObjectSpread() {\n    var start = next();\n    boolean isNullable = start.token == Token.QSPREAD;\n    var expr = parseExpr(\"}\");\n    return new ObjectMember.ObjectSpread(expr, isNullable, start.span.endWith(expr.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseObjectSpread", "index": 306, "label": 0}
{"input": "@Test\n    public void t02ReadAndWriteCsvError() {\n        EasyExcel.write(fileCsvError, CharsetData.class).charset(GBK).sheet().doWrite(data());\n        EasyExcel.read(fileCsvError, CharsetData.class, new ReadListener<CharsetData>() {\n            \n            private final List<CharsetData> dataList = Lists.newArrayList();\n            \n            @Override\n            public void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext context) {\n                String head = headMap.get(0).getStringValue();\n                Assertions.assertNotEquals(\"姓名\", head);\n            }\n            \n            @Override\n            public void invoke(CharsetData data, AnalysisContext context) {\n                dataList.add(data);\n            }\n            \n            @Override\n            public void doAfterAllAnalysed(AnalysisContext context) {\n            }\n        }).charset(StandardCharsets.UTF_8).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/charset/CharsetDataTest.java", "function_name": "t02ReadAndWriteCsvError", "index": 307, "label": 0}
{"input": "@Test\n  public void testUpsertSync() {\n    StepRuntimeSummary stepRuntimeSummary =\n        StepRuntimeSummary.builder()\n            .stepId(\"test-summary\")\n            .stepAttemptId(2)\n            .stepInstanceId(1)\n            .dbOperation(DbOperation.UPSERT)\n            .build();\n    Optional<Details> details = syncManager.sync(instance, workflowSummary, stepRuntimeSummary);\n    assertFalse(details.isPresent());\n    verify(instanceDao, times(1)).insertOrUpsertStepInstance(instance, true);\n    verify(publisher, times(0)).publish(any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepSyncManagerTest.java", "function_name": "testUpsertSync", "index": 308, "label": 0}
{"input": "@Test\n  public void ex2() {\n    var ex2 = module.getProperty(\"ex2\");\n    var mapped = mapper.map(ex2, Types.arrayOf(byte.class));\n    assertThat(mapped).isEqualTo(new byte[] {1, 2, 3, 4});\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-config-java/src/test/java/org/pkl/config/java/mapper/BytesToByteArrayTest.java", "function_name": "ex2", "index": 309, "label": 0}
{"input": "public MaestroQueueDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      DatabaseConfiguration config,\n      MaestroMetrics metrics) {\n    super(dataSource, objectMapper, config, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/dao/MaestroQueueDao.java", "function_name": "MaestroQueueDao", "index": 310, "label": 0}
{"input": "public SqlExecuteNode(ChatClient.Builder chatClientBuilder) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/SqlExecuteNode.java", "function_name": "SqlExecuteNode", "index": 311, "label": 0}
{"input": "@Override\n  public void updateWorkflowDef(WorkflowDef def) {\n    LOG.info(\"Updating a workflow definition with the name: {}\", def.getName());\n    createOrUpdateWorkflowDefinition(\n        UPSERT_WORKFLOW_DEFINITION_STATEMENT, def, \"updateWorkflowDef\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "updateWorkflowDef", "index": 312, "label": 0}
{"input": "private static long parseSize(String text) {\n      long l = Math.round(Double.parseDouble(text.replaceAll(\"[GMK]B$\", \"\")));\n      char sizeChar = text.charAt(Math.max(0, text.length() - 2));\n      if (sizeChar == KB) {\n        l *= BYTES_PER_KB;\n      } else if (sizeChar == MB) {\n        l *= BYTES_PER_KB * BYTES_PER_KB;\n      } else if (sizeChar == GB) {\n        l *= BYTES_PER_KB * BYTES_PER_KB * BYTES_PER_KB;\n      }\n      return l;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/JsonSizeConstraint.java", "function_name": "parseSize", "index": 313, "label": 0}
{"input": "private boolean isStepConcurrencyValid(\n        Long stepConcurrency, ConstraintValidatorContext context) {\n      if (stepConcurrency != null\n          && (stepConcurrency < 1 || stepConcurrency > Constants.STEP_CONCURRENCY_MAX_LIMIT)) {\n        context\n            .buildConstraintViolationWithTemplate(\n                String.format(\n                    \"[workflow properties] step_concurrency should be positive and no greater than %s \"\n                        + \"- rejected value is [%s]\",\n                    Constants.STEP_CONCURRENCY_MAX_LIMIT, stepConcurrency))\n            .addPropertyNode(\"stepConcurrency\")\n            .addConstraintViolation();\n        return false;\n      }\n      return true;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/PropertiesConstraint.java", "function_name": "isStepConcurrencyValid", "index": 314, "label": 0}
{"input": "@Bean\n  public MaestroSignalBrokerDao maestroSignalBrokerDao(\n      DataSource maestroDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroEngineProperties props,\n      MaestroMetrics metrics,\n      MaestroSignalInstanceDao instanceDao,\n      MaestroSignalParamDao paramDao,\n      MaestroSignalTriggerDao triggerDao,\n      SignalQueueProducer queueProducer) {\n    LOG.info(\"Creating maestroSignalBrokerDao within Spring boot...\");\n    return new MaestroSignalBrokerDao(\n        maestroDataSource,\n        objectMapper,\n        props,\n        metrics,\n        instanceDao,\n        paramDao,\n        triggerDao,\n        queueProducer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroSignalBrokerDao", "index": 315, "label": 0}
{"input": "@Override\n    public void setDescription(String description) {\n        display.asyncExec(() -> {\n            if (!descriptionLabel.isDisposed()) {\n                descriptionLabel.setText(description);\n                shell.layout(true, true);\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtProgressDialog.java", "function_name": "setDescription", "index": 316, "label": 0}
{"input": "@Bean\n  public NoOpStepRuntime noop(\n      @Qualifier(STEP_RUNTIME_QUALIFIER) Map<StepType, StepRuntime> stepRuntimeMap) {\n    LOG.info(\"Creating NoOp step within Spring boot...\");\n    NoOpStepRuntime step = new NoOpStepRuntime();\n    stepRuntimeMap.put(StepType.NOOP, step);\n    return step;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "noop", "index": 317, "label": 0}
{"input": "@Test\n  public void testStringInterpolationWithBracketAndEscapedNames() {\n    Parameter param =\n        StringParameter.builder()\n            .name(\"test\")\n            .value(\"${var}$${var} $${\" + crazyName + \"}${\" + crazyName + \"} $$${var1} $$$${var1}\")\n            .build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Arrays.asList(\"var\", \"var1\", crazyName)), paramNames);\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(\"0${var} ${\" + crazyName + \"}3.0 $true $${var1}\", result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testStringInterpolationWithBracketAndEscapedNames", "index": 318, "label": 0}
{"input": "@Test\n  public void testMergeUpstreamMergeWithImmutableMode() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'default_value','mode': 'IMMUTABLE', 'meta': {'source': 'SYSTEM_DEFAULT'}}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'parent_wf_defined_value', 'mode': 'MUTABLE', 'meta': {'source': 'DEFINITION'}}}\");\n\n    AssertHelper.assertThrows(\n        \"throws exception when a non-upstream source tries to merge param with less strict mode\",\n        MaestroValidationException.class,\n        \"Cannot modify param with mode [IMMUTABLE] for parameter [workflow_default_param]\",\n        () ->\n            ParamsMergeHelper.mergeParams(\n                allParams, paramsToMerge, upstreamDefinitionMergeContext));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeUpstreamMergeWithImmutableMode", "index": 319, "label": 0}
{"input": "public static double[] toDoubleArray(String name, Object value) {\n    try {\n      if (value instanceof BigDecimal[]) {\n        return Arrays.stream((BigDecimal[]) value).mapToDouble(BigDecimal::doubleValue).toArray();\n      } else if (value instanceof double[]) {\n        return (double[]) value;\n      } else if (value instanceof List) {\n        return ((List<?>) value)\n            .stream().mapToDouble(d -> new BigDecimal(String.valueOf(d)).doubleValue()).toArray();\n      } else {\n        throw new MaestroInternalError(\n            \"Param [%s] has an invalid evaluated result [%s]\", name, toTruncateString(value));\n      }\n    } catch (NumberFormatException nfe) {\n      throw new MaestroInternalError(\n          nfe,\n          \"Invalid number format for evaluated result: %s for param [%s]\",\n          toTruncateString(value),\n          name);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/ParamHelper.java", "function_name": "toDoubleArray", "index": 320, "label": 0}
{"input": "private void ensureMessage2IsMutable() {\n                if (!((bitField0_ & 0x00000002) != 0)) {\n                    message2_ = new java.util.ArrayList<SubMessage2>(message2_);\n                    bitField0_ |= 0x00000002;\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "ensureMessage2IsMutable", "index": 321, "label": 0}
{"input": "private ParamSource getParamSource(Initiator initiator, boolean isFreshRun) {\n    if (initiator instanceof UpstreamInitiator) {\n      return ((UpstreamInitiator) initiator).getParameterSource();\n    } else {\n      return isFreshRun ? ParamSource.LAUNCH : ParamSource.RESTART;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getParamSource", "index": 322, "label": 0}
{"input": "@Test\n  public void testStepParamFromStepSummary() {\n    Map<String, ParamDefinition> stepRunParams =\n        singletonMap(\"p1\", ParamDefinition.buildParamDefinition(\"p1\", \"d1\"));\n    Map<String, Map<String, ParamDefinition>> allStepRunParams =\n        singletonMap(\n            \"stepid\", singletonMap(\"p2\", ParamDefinition.buildParamDefinition(\"p2\", \"d1\")));\n\n    workflowSummary.setStepRunParams(allStepRunParams);\n    runtimeSummary.setStepRunParams(stepRunParams);\n    Map<String, Parameter> stepParams =\n        paramsManager.generateMergedStepParams(workflowSummary, step, stepRuntime, runtimeSummary);\n    Assert.assertFalse(stepParams.isEmpty());\n\n    \n    Assert.assertEquals(\"d1\", stepParams.get(\"p1\").asStringParam().getValue());\n    Assert.assertNull(stepParams.get(\"p2\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsManagerTest.java", "function_name": "testStepParamFromStepSummary", "index": 323, "label": 0}
{"input": "@Bean\n  public ValidatorFactory validator() {\n    LOG.info(\"Creating validator within Spring boot...\");\n    return Validation.byProvider(ApacheValidationProvider.class)\n        .configure()\n        .buildValidatorFactory();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "validator", "index": 324, "label": 0}
{"input": "static boolean setAccessibleWorkaround(final AccessibleObject o) {\n        if (o == null || o.isAccessible()) {\n            return false;\n        }\n        final Member m = (Member) o;\n        if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(\n                m.getDeclaringClass().getModifiers())) {\n            try {\n                o.setAccessible(true);\n                return true;\n            } catch (final SecurityException e) { \n                \n            }\n        }\n        return false;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/MemberUtils.java", "function_name": "setAccessibleWorkaround", "index": 325, "label": 0}
{"input": "@Test\n    public void headerRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.xlsx\";\n        \n        EasyExcel.read(fileName, DemoData.class, new DemoHeadDataListener()).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "d696a25ef6e5aa3d84fdc5ff3b823e9bb1fdd746", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "headerRead", "index": 326, "label": 0}
{"input": "@UpdateScript(version = 22)\n    public void workaroundForBadWebUI() {\n        if (conf.getInt(\"module.auto-range-ban.ipv6\") == 32) { \n            conf.set(\"module.auto-range-ban.ipv6\", 60); \n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "c57007bbb4cd958de4b1c0a06b7d6173b609481d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/config/ProfileUpdateScript.java", "function_name": "workaroundForBadWebUI", "index": 327, "label": 0}
{"input": "private void updateEntityFromConfig(DynamicAgentEntity entity, AgentConfig config) {\n\t\tentity.setAgentName(config.getName());\n\t\tentity.setAgentDescription(config.getDescription());\n\t\tString nextStepPrompt = config.getNextStepPrompt();\n\t\tentity = mergePrompts(entity, config.getName());\n\t\tentity.setNextStepPrompt(nextStepPrompt);\n\n\t\t\n\t\tjava.util.Set<String> toolSet = new java.util.LinkedHashSet<>();\n\t\tList<String> availableTools = config.getAvailableTools();\n\t\tif (availableTools != null) {\n\t\t\ttoolSet.addAll(availableTools);\n\t\t}\n\t\t\n\t\tif (!toolSet.contains(com.alibaba.cloud.ai.example.manus.tool.TerminateTool.name)) {\n\t\t\tlog.info(\"Adding necessary tool for Agent[{}]: {}\", config.getName(),\n\t\t\t\t\tcom.alibaba.cloud.ai.example.manus.tool.TerminateTool.name);\n\t\t\ttoolSet.add(com.alibaba.cloud.ai.example.manus.tool.TerminateTool.name);\n\t\t}\n\t\t\n\t\tentity.setAvailableToolKeys(new java.util.ArrayList<>(toolSet));\n\t\tentity.setClassName(config.getName());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/service/AgentServiceImpl.java", "function_name": "updateEntityFromConfig", "index": 328, "label": 0}
{"input": "private ObjectMember parseObjectEntry() {\n    var start = expect(Token.LBRACK, \"unexpectedToken\", \"[\").span;\n    var key = parseExpr(\"]\");\n    expect(Token.RBRACK, \"unexpectedToken\", \"]\");\n    if (lookahead == Token.ASSIGN) {\n      next();\n      var expr = parseExpr(\"}\");\n      return new ObjectMember.ObjectEntry(List.of(key, expr), start.endWith(expr.span()));\n    }\n    var bodies = parseBodyList();\n    var end = bodies.get(bodies.size() - 1).span();\n    var nodes = new ArrayList<Node>(bodies.size() + 2);\n    nodes.add(key);\n    nodes.add(null);\n    nodes.addAll(bodies);\n    return new ObjectMember.ObjectEntry(nodes, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseObjectEntry", "index": 329, "label": 0}
{"input": "@JsonIgnore\n  public Set<Long> getSkippedIterationsInRange(int startInstanceId, Long ancestorMax) {\n    if (details == null || ancestorMax == null || ancestorMax.intValue() < startInstanceId) {\n      return Collections.emptySet();\n    }\n    return details.flatten(e -> e == WorkflowInstance.Status.SUCCEEDED)\n        .getOrDefault(WorkflowInstance.Status.SUCCEEDED, Collections.emptyList()).stream()\n        .filter(iterId -> iterId >= startInstanceId)\n        .collect(Collectors.toSet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "getSkippedIterationsInRange", "index": 330, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase2() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(), Collections.singletonList(\"job.2\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(2, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.2\", \"job.3\", \"#job.6\", \"job.6\", \"job.7\"), paths.get(0));\n    Assert.assertEquals(Arrays.asList(\"#job.5\", \"job.5\"), paths.get(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase2", "index": 331, "label": 0}
{"input": "@Test\n  public void testGetFinishedTasks() {\n    assertEquals(0, flow.getFinishedTasks().size());\n    var snapshot = flow.getFinishedTasks();\n    assertTrue(snapshot.isEmpty());\n\n    task.setStatus(Task.Status.FAILED);\n    flow.addFinishedTask(task);\n    assertTrue(snapshot.isEmpty());\n    assertEquals(1, flow.getFinishedTasks().size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/models/FlowTest.java", "function_name": "testGetFinishedTasks", "index": 332, "label": 0}
{"input": "private ParameterList parseParameterList() {\n    var start = expect(Token.LPAREN, \"unexpectedToken\", \"(\").span;\n    Span end;\n    List<Parameter> args = new ArrayList<>();\n    if (lookahead == Token.RPAREN) {\n      end = next().span;\n    } else {\n      args = parseListOfParameter(Token.COMMA);\n      end = expect(Token.RPAREN, \"unexpectedToken2\", \",\", \")\").span;\n    }\n    return new ParameterList(args, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseParameterList", "index": 333, "label": 0}
{"input": "public MaestroBadRequestException(List<String> errors, String template, Object... args) {\n    super(Code.BAD_REQUEST, String.format(template, args));\n    this.errors = errors;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroBadRequestException.java", "function_name": "MaestroBadRequestException", "index": 334, "label": 0}
{"input": "@RequiresApi(api = Build.VERSION_CODES.M)\n    private static void changeStatusBarIconColor(Activity activity, boolean isDark) {\n        Window window = activity.getWindow();\n        View decorView = window.getDecorView();\n        int flags = decorView.getSystemUiVisibility();\n        if (!isDark) {\n            \n            flags |= View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;\n        } else {\n            \n            flags &= ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;\n        }\n        decorView.setSystemUiVisibility(flags);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/SystemUtils.java", "function_name": "changeStatusBarIconColor", "index": 335, "label": 0}
{"input": "private MemberHeader parseMemberHeader() {\n    DocComment docComment = null;\n    var annotations = new ArrayList<Annotation>();\n    var modifiers = new ArrayList<Modifier>();\n    if (lookahead == Token.DOC_COMMENT) {\n      docComment = parseDocComment();\n    }\n    while (lookahead == Token.AT) {\n      annotations.add(parseAnnotation());\n    }\n    while (lookahead.isModifier()) {\n      modifiers.add(parseModifier());\n    }\n    return new MemberHeader(docComment, annotations, modifiers);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseMemberHeader", "index": 336, "label": 0}
{"input": "private Token lexIdentifier() {\n    while (isIdentifierPart(lookahead)) {\n      nextChar();\n    }\n\n    var identifierStr = text();\n    var identifier = getKeywordOrIdentifier(identifierStr);\n    return switch (identifier) {\n      case IMPORT -> {\n        if (lookahead == '*') {\n          nextChar();\n          yield Token.IMPORT_STAR;\n        } else yield Token.IMPORT;\n      }\n      case READ ->\n          switch (lookahead) {\n            case '*' -> {\n              nextChar();\n              yield Token.READ_STAR;\n            }\n            case '?' -> {\n              nextChar();\n              yield Token.READ_QUESTION;\n            }\n            default -> Token.READ;\n          };\n      default -> identifier;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexIdentifier", "index": 337, "label": 0}
{"input": "@Bean\n  public ExternalPayloadStorageUtils externalPayloadStorageUtils(\n      ExternalPayloadStorage externalPayloadStorage,\n      ConductorProperties props,\n      @Qualifier(CONDUCTOR_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating externalPayloadStorageUtils within Spring boot...\");\n    return new ExternalPayloadStorageUtils(externalPayloadStorage, props, objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "externalPayloadStorageUtils", "index": 338, "label": 0}
{"input": "@Test\n  public void testUpsertTriggerSubscriptionWithEmptyTimeTrigger() {\n    Workflow wf1 = Workflow.builder().id(\"wf1\").timeTriggers(Collections.emptyList()).build();\n    triggerClient.upsertTriggerSubscription(\n        wf1, TriggerUuids.builder().timeTriggerUuid(\"test-uuid\").build(), null);\n    Mockito.verify(triggerProducer, Mockito.times(0)).push(any(), anyInt());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerSubscriptionClientTest.java", "function_name": "testUpsertTriggerSubscriptionWithEmptyTimeTrigger", "index": 339, "label": 0}
{"input": "@Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof MessageBytesExtra)) {\n                return super.equals(obj);\n            }\n            MessageBytesExtra other = (MessageBytesExtra) obj;\n\n            if (hasMessage1() != other.hasMessage1()) return false;\n            if (hasMessage1()) {\n                if (!getMessage1()\n                        .equals(other.getMessage1())) return false;\n            }\n            if (!getMessage2List()\n                    .equals(other.getMessage2List())) return false;\n            if (!getUnknownFields().equals(other.getUnknownFields())) return false;\n            return true;\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "equals", "index": 340, "label": 0}
{"input": "@Override\n  public List<Workflow> getWorkflowsByCorrelationId(\n      String workflowName, String correlationId, boolean includeTasks) {\n    throw new UnsupportedOperationException(\n        \"This method is not implemented in CockroachDBExecutionDAO.\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getWorkflowsByCorrelationId", "index": 341, "label": 0}
{"input": "public SelParserTokenManager(JavaCharStream stream, int lexState) {\n    ReInit(stream);\n    SwitchTo(lexState);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "SelParserTokenManager", "index": 342, "label": 0}
{"input": "@Test\n  public void testFlowRefreshRunningFlow() {\n    flow.setMonitorTask(flow.newTask(new TaskDef(\"monitor\", \"noop\", null, null), true));\n    flowActor.runForAction(Action.FLOW_REFRESH);\n    verify(context, times(1)).refresh(flow);\n    verify(context, times(0)).finalCall(flow);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testFlowRefreshRunningFlow", "index": 343, "label": 0}
{"input": "public static SheetWriteHandlerContext createSheetWriteHandlerContext(WriteContext writeContext) {\n        return new SheetWriteHandlerContext(writeContext, writeContext.writeWorkbookHolder(),\n                writeContext.writeSheetHolder());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/WriteHandlerUtils.java", "function_name": "createSheetWriteHandlerContext", "index": 344, "label": 0}
{"input": "private @Nullable ExtendsOrAmendsClause parseExtendsAmendsDecl() {\n    if (lookahead == Token.EXTENDS) {\n      var tk = next().span;\n      var url = parseStringConstant();\n      return new ExtendsOrAmendsClause(\n          url, ExtendsOrAmendsClause.Type.EXTENDS, tk.endWith(url.span()));\n    }\n    if (lookahead == Token.AMENDS) {\n      var tk = next().span;\n      var url = parseStringConstant();\n      return new ExtendsOrAmendsClause(\n          url, ExtendsOrAmendsClause.Type.AMENDS, tk.endWith(url.span()));\n    }\n    return null;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseExtendsAmendsDecl", "index": 345, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testValidateParamsAndArtifactsEmpty() {\n    OutputData data =\n        new OutputData(\n            JOB_TYPE,\n            EXT_JOB_ID,\n            WORKFLOW_ID,\n            System.currentTimeMillis(),\n            System.currentTimeMillis(),\n            new HashMap<>(),\n            new HashMap<>());\n    dao.insertOrUpdateOutputData(data);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/OutputDataDaoTest.java", "function_name": "testValidateParamsAndArtifactsEmpty", "index": 346, "label": 0}
{"input": "public <T> T enterEntry(\n      @Nullable ExpressionNode keyNode, \n      Function<EntryScope, T> nodeFactory) {\n\n    var qualifiedName = currentScope.getQualifiedName() + currentScope.getNextEntryName(keyNode);\n    var builder =\n        currentScope instanceof ForGeneratorScope forScope\n            ? forScope.memberDescriptorBuilder\n            : FrameDescriptor.newBuilder();\n    return doEnter(new EntryScope(currentScope, qualifiedName, builder), nodeFactory);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "enterEntry", "index": 347, "label": 0}
{"input": "void MoreLexicalActions() {\n    jjimageLen += (lengthOfMatch = jjmatchedPos + 1);\n    switch (jjmatchedKind) {\n      case 6:\n        image.append(input_stream.GetSuffix(jjimageLen));\n        jjimageLen = 0;\n        input_stream.backup(1);\n        break;\n      default:\n        break;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "MoreLexicalActions", "index": 348, "label": 0}
{"input": "@Test\n    public void part2() throws IOException {\n        LOGGER.info(\"test:{}\", FILL_PATTERN.matcher(\"我是测试呀\").find());\n        LOGGER.info(\"test:{}\", FILL_PATTERN.matcher(\"测试u\").matches());\n        LOGGER.info(\"test:{}\", FILL_PATTERN.matcher(\"我是测试\").matches());\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiWriteTest.java", "function_name": "part2", "index": 349, "label": 0}
{"input": "public SuperAccessExpr(Identifier identifier, @Nullable ArgumentList argumentList, Span span) {\n      super(span, Arrays.asList(identifier, argumentList));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "SuperAccessExpr", "index": 350, "label": 0}
{"input": "@ExceptionHandler(value = {MaestroDryRunException.class})\n  protected ResponseEntity<Object> handleMaestroDryRunException(\n      MaestroDryRunException e, WebRequest request) {\n    LOG.info(\"Handle MaestroDryRunException with a message: {}\", e.getMessage());\n    return buildDetailedResponse(e, e.getDetails().getErrors(), HttpStatus.BAD_REQUEST, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleMaestroDryRunException", "index": 351, "label": 0}
{"input": "public UnqualifiedAccessExpr(\n        Identifier identifier, @Nullable ArgumentList argumentList, Span span) {\n      super(span, Arrays.asList(identifier, argumentList));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "UnqualifiedAccessExpr", "index": 352, "label": 0}
{"input": "private static boolean containsCycleInDag(Map<String, GraphNode> nodeMap) {\n    Queue<String> queue = new ArrayDeque<>();\n    nodeMap.forEach(\n        (stepId, node) -> {\n          if (node.parents.isEmpty()) {\n            queue.add(stepId);\n          }\n        });\n    int visited = 0;\n    while (!queue.isEmpty()) {\n      String stepId = queue.remove();\n      visited++;\n      GraphNode node = nodeMap.get(stepId);\n      for (String childId : node.children.keySet()) {\n        nodeMap.get(childId).parents.remove(stepId);\n        if (nodeMap.get(childId).parents.isEmpty()) {\n          queue.add(childId);\n        }\n      }\n    }\n    return visited != nodeMap.size();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/WorkflowGraph.java", "function_name": "containsCycleInDag", "index": 353, "label": 0}
{"input": "@Override\n  public Thread newThread(Runnable r) {\n    return new SelThread(\n        \"SelThread-\" + threadNumber.getAndIncrement(),\n        r,\n        stackLimit,\n        loopLimit,\n        arrayLimit,\n        lengthLimit,\n        visitLimit);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelThreadFactory.java", "function_name": "newThread", "index": 354, "label": 0}
{"input": "private String renderStartInputSection(Workflow workflow) {\n\t\tList<Variable> startInputs = workflow.getWorkflowVars()\n\t\t\t.stream()\n\t\t\t.filter(v -> workflow.getGraph()\n\t\t\t\t.getNodes()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(n -> n.getData() instanceof StartNodeData\n\t\t\t\t\t\t&& ((StartNodeData) n.getData()).getStartInputs() != null\n\t\t\t\t\t\t&& ((StartNodeData) n.getData()).getStartInputs()\n\t\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t\t.anyMatch(i -> i.getVariable().equals(v.getName()))))\n\t\t\t.toList();\n\n\t\tif (startInputs.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(\"Map<String, Object> startInputs = new HashMap<>();\\n\");\n\t\tfor (Variable var : startInputs) {\n\t\t\tsb.append(String.format(\"startInputs.put(\\\"%s\\\", inputs.get(\\\"%s\\\")); // %s%n\", var.getName(),\n\t\t\t\t\tvar.getName(), var.getDescription()));\n\t\t}\n\t\tsb.append(\"return graph.invoke(startInputs).get().data();\\n\");\n\n\t\treturn sb.toString();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "869092459902221b156926f54eac86afdd48b375", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/generator/workflow/WorkflowProjectGenerator.java", "function_name": "renderStartInputSection", "index": 355, "label": 0}
{"input": "@Bean(destroyMethod = \"shutdown\")\n  public MaestroQueueSystem maestroQueueSystem(\n      @Qualifier(EVENT_QUEUES_QUALIFIER)\n          EnumMap<MaestroJobEvent.Type, BlockingQueue<MessageDto>> eventQueues,\n      MaestroQueueDao queueDao,\n      MaestroProperties properties,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating maestroQueueSystem within Spring boot...\");\n    return new MaestroQueueSystem(eventQueues, queueDao, properties.getQueue(), metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "maestroQueueSystem", "index": 356, "label": 0}
{"input": "@Test\n    public void testAutoTrim() {\n        csvFile = TestFileUtil.createNewFile(CSV_BASE + \"csv-auto-trim.csv\");\n        FastExcel.write(csvFile, CsvData.class)\n            .autoTrim(Boolean.FALSE)\n            .csv()\n            .doWrite(dataList(10, \" \" + STRING_PREFIX));\n        List<Object> dataList = FastExcel.read(csvFile, CsvData.class, new CsvDataListener())\n            .autoTrim(Boolean.FALSE)\n            .csv()\n            .doReadSync();\n        Assertions.assertEquals(10, dataList.size());\n        Assertions.assertNotNull(dataList.get(0));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "testAutoTrim", "index": 357, "label": 0}
{"input": "@Test\n  public void testCreateValid() {\n    SelString str = SelString.of(\"foo\");\n    SelString res = SelString.create(new SelType[] {str});\n    assertEquals(str.getInternalVal(), res.getInternalVal());\n    res = SelString.create(new SelType[] {});\n    assertEquals(\"\", res.getInternalVal());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testCreateValid", "index": 358, "label": 0}
{"input": "private void timeoutFlow() {\n    flow.markTimedout();\n    dequeRetryActions().forEach(this::retryTask);\n    wakeUpChildActors(Action.TASK_STOP);\n    schedule(Action.FLOW_TIMEOUT, getRetryInterval()); \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "timeoutFlow", "index": 359, "label": 0}
{"input": "ConfigurablePromptTemplate(String name, PromptTemplate promptTemplate) {\n\t\tthis.promptTemplate = promptTemplate;\n\t\tthis.name = name;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57c9ddbb8f0c222fa73a69fa8ca0cd63deace926", "file_path": "spring-ai-alibaba-prompt/spring-ai-alibaba-prompt-nacos/src/main/java/com/alibaba/cloud/ai/prompt/ConfigurablePromptTemplate.java", "function_name": "ConfigurablePromptTemplate", "index": 360, "label": 0}
{"input": "@Test\n  public void testExceptionStackTrace() {\n    try {\n      throw new Exception(\"error happened!!\");\n    } catch (Exception e) {\n      assertEquals(0, ExceptionHelper.getStackTrace(e, 0).length());\n      assertEquals(\"java.lang.Exception: error happened!!\", ExceptionHelper.getStackTrace(e, 1));\n      assertTrue(ExceptionHelper.getStackTrace(e, 2000).length() > 100);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ExceptionHelperTest.java", "function_name": "testExceptionStackTrace", "index": 361, "label": 0}
{"input": "@Autowired\n  public WorkflowInstanceController(MaestroWorkflowInstanceDao workflowInstanceDao) {\n    this.workflowInstanceDao = workflowInstanceDao;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowInstanceController.java", "function_name": "WorkflowInstanceController", "index": 362, "label": 0}
{"input": "@Override\n  public GeneratorPropertyNode visitObjectProperty(ObjectPropertyContext ctx) {\n    checkNotInsideForGenerator(ctx, \"forGeneratorCannotGenerateProperties\");\n    var member = doVisitObjectProperty(ctx);\n    return GeneratorPropertyNodeGen.create(member);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "visitObjectProperty", "index": 363, "label": 0}
{"input": "public List<StepInstance> getStepInstances(\n      String workflowId, long workflowInstanceId, long workflowRunId, String stepId) {\n    return getStepInstancesByIds(\n        workflowId, workflowInstanceId, workflowRunId, stepId, this::maestroStepFromResult);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepInstances", "index": 364, "label": 0}
{"input": "@Fallback\n  @SuppressWarnings(\"unused\")\n  void fallback(VirtualFrame frame, Object parent, ObjectData data) {\n    CompilerDirectives.transferToInterpreter();\n    throw exceptionBuilder().evalError(\"objectCannotHaveElement\", parent).build();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorElementNode.java", "function_name": "fallback", "index": 365, "label": 0}
{"input": "@Test\n  public void testShouldHaveLogOutput() {\n    String entrypoint = papermillEntrypointBuilder.generatePapermillRuntime(context).entrypoint();\n    assertTrue(entrypoint.contains(\"--log-output\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilderTest.java", "function_name": "testShouldHaveLogOutput", "index": 366, "label": 0}
{"input": "private WorkflowInstance loadInstanceForAction(\n      String workflowId,\n      long workflowInstanceId,\n      long workflowRunId,\n      Actions.WorkflowInstanceAction action) {\n    WorkflowInstance instance =\n        instanceDao.getLatestWorkflowInstanceRun(workflowId, workflowInstanceId);\n    if (workflowRunId != Constants.LATEST_ONE && workflowRunId != instance.getWorkflowRunId()) {\n      throw new MaestroBadRequestException(\n          Collections.emptyList(),\n          \"Cannot %s the workflow instance run [%s] as it is not the latest run [%s]\",\n          action.name(),\n          workflowRunId,\n          instance.getWorkflowRunId());\n    }\n    return instance;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandler.java", "function_name": "loadInstanceForAction", "index": 367, "label": 0}
{"input": "@Bean\n  public Provider<Lock> lockProvider(Lock lock) {\n    LOG.info(\"Creating Lock Provider within Spring boot...\");\n    return () -> lock;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "lockProvider", "index": 368, "label": 0}
{"input": "@Override\n  public String getProperty(String name, String defaultValue) {\n    String key = name.replace('.', '-').toLowerCase(Locale.US);\n    return configs.getOrDefault(key, defaultValue);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/properties/ConductorProperties.java", "function_name": "getProperty", "index": 369, "label": 0}
{"input": "void checkShutdown() {\n    if (noChildActorsRunning()) {\n      terminateNow();\n      if (parent != null) {\n        parent.post(Action.FLOW_DOWN);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "checkShutdown", "index": 370, "label": 0}
{"input": "public String getField2() {\n                Object ref = field2_;\n                if (!(ref instanceof String)) {\n                    com.google.protobuf.ByteString bs =\n                            (com.google.protobuf.ByteString) ref;\n                    String s = bs.toStringUtf8();\n                    field2_ = s;\n                    return s;\n                } else {\n                    return (String) ref;\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getField2", "index": 371, "label": 0}
{"input": "@Override\n    public void onOpen(EventSource eventSource, Response response) {\n        log.info(\"FastGPT  sse连接成功\");\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "fd94a1772f4b56555b7ed17d0270335d27ba01d2", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/listener/FastGPTSSEEventSourceListener.java", "function_name": "onOpen", "index": 372, "label": 0}
{"input": "public static void convertHtmlToPdfFile(String htmlContent, String pdfFilePath) {\n\t\ttry (OutputStream os = new FileOutputStream(pdfFilePath)) {\n\t\t\tbyte[] pdfBytes = convertHtmlToPdfBytes(htmlContent);\n\t\t\tos.write(pdfBytes);\n\t\t\tlogger.info(\"HTML converted to PDF and saved to: {}\", pdfFilePath);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.error(\"Failed to save PDF to file\", e);\n\t\t\tthrow new RuntimeException(\"Failed to save PDF to file\", e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FormatConversionUtil.java", "function_name": "convertHtmlToPdfFile", "index": 373, "label": 0}
{"input": "public ExcelReaderSheetBuilder numRows(Integer numRows) {\n        readSheet.setNumRows(numRows);\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/ExcelReaderSheetBuilder.java", "function_name": "numRows", "index": 374, "label": 0}
{"input": "public boolean isFailed() {\n      \n      return this != CONTINUE && this != DONE && this != STOPPED;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/StepRuntime.java", "function_name": "isFailed", "index": 375, "label": 0}
{"input": "@Test\n  public void testValidDefaultStepParams() {\n    assertFalse(defaultParamManager.getDefaultStepParams().isEmpty());\n    assertNotNull(defaultParamManager.getDefaultStepParams().get(\"workflow_instance_id\").getName());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testValidDefaultStepParams", "index": 376, "label": 0}
{"input": "public void select(Theme theme) {\n        currentTheme = theme;\n        FileManager.getInstance(ApplicationLoader.getAppCtx()).set(FileManager.KeyHolder.DARK_MODE , theme.nightMode);\n        applyTheme();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "select", "index": 377, "label": 0}
{"input": "@NotNull\n\t@Override\n\tpublic List<Document> retrieve(Query query) {\n\t\tString text = query.text();\n\t\ttry {\n\t\t\treturn searchHybrid(text);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new RuntimeException(\"Failed to execute hybrid search\", ex);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "7533675a36b363cfb0ec6e6ad9adb75a2f6c29f6", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/rag/retriever/RrfHybridElasticsearchRetriever.java", "function_name": "retrieve", "index": 378, "label": 0}
{"input": "public SqlGenerateNode(ChatClient.Builder chatClientBuilder, BaseNl2SqlService baseNl2SqlService,\n\t\t\tDbConfig dbConfig) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t\tthis.baseNl2SqlService = baseNl2SqlService;\n\t\tthis.dbConfig = dbConfig;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/SqlGenerateNode.java", "function_name": "SqlGenerateNode", "index": 379, "label": 0}
{"input": "@Test\n  public void testEnqueueInTransaction() throws Exception {\n    Connection conn = dataSource.getConnection();\n    MessageDto actual = dao.enqueueInTransaction(conn, jobEvent, 123456789L);\n    conn.commit();\n    conn.close();\n    assertEquals(123456789L, actual.ownedUntil());\n    assertEquals(jobEvent, actual.event());\n    dao.remove(actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/dao/MaestroQueueDaoTest.java", "function_name": "testEnqueueInTransaction", "index": 380, "label": 0}
{"input": "@Test\n    public void xlsxCommentTest() throws Exception {\n        runCommentTest(\"src/test/resources/comment/comment.xlsx\", ExcelTypeEnum.XLSX);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "80fadbc1fa53ba0dbef63f42532dd20abc164830", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/read/CommentTest.java", "function_name": "xlsxCommentTest", "index": 381, "label": 0}
{"input": "@Override\n    public void run(ApplicationArguments args) {\n        \n        String separator = System.getProperty(\"file.separator\");\n        \n        String dbPath = System.getProperty(\"user.dir\") + separator + \"db\";\n        \n        Path dbDirectory = Paths.get(dbPath);\n        \n        if (!Files.exists(dbDirectory)) {\n            log.info(\"Directory does not exist: \" + dbPath);\n            return;\n        }\n        \n        try (Stream<Path> stream = Files.walk(dbDirectory)) {\n            \n            stream.filter(file -> !Files.isDirectory(file))\n                    \n                    .filter(file -> file.toString().endsWith(\".db\"))\n                    \n                    .forEach(dbFile -> registerDataSource(dbFile.toString()));\n        } catch (Exception e) {\n            log.error(\"Failed to register the data source\", e);\n        }\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DatabaseServiceImpl.java", "function_name": "run", "index": 382, "label": 0}
{"input": "public RunConfig toRunConfig() {\n    RunConfig runConfig = new RunConfig();\n    runConfig.setRuntimeTags(this.runtimeTags);\n    runConfig.setCorrelationId(this.correlationId);\n    runConfig.setPolicy(this.currentPolicy);\n    runConfig.setRestartConfig(this.restartConfig);\n    return runConfig;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunRequest.java", "function_name": "toRunConfig", "index": 383, "label": 0}
{"input": "public void updateActivityBackground(View view) {\n        \n        Drawable backgroundDrawable = getBackgroundDrawable(view.getContext());\n        if (backgroundDrawable != null) {\n            view.setBackground(backgroundDrawable);\n        }\n\n        \n        configureStatusBar(view.getContext() instanceof Activity ? (Activity) view.getContext() : null);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "updateActivityBackground", "index": 384, "label": 0}
{"input": "@Bean\n  public SignalHandler signalHandler() {\n    LOG.info(\"Creating NoOp signalHandler within Spring boot...\");\n    return new SignalHandler() {\n      @Override\n      public boolean sendOutputSignals(\n          WorkflowSummary workflowSummary, StepRuntimeSummary stepRuntimeSummary) {\n        return true;\n      }\n\n      @Override\n      public boolean signalsReady(\n          WorkflowSummary workflowSummary, StepRuntimeSummary stepRuntimeSummary) {\n        return true;\n      }\n\n      @Override\n      public Map<String, List<Map<String, Parameter>>> getDependenciesParams(\n          StepRuntimeSummary runtimeSummary) {\n        return Collections.emptyMap();\n      }\n    };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "signalHandler", "index": 385, "label": 0}
{"input": "@Override\n  public Boolean insertByBo(KnowledgeInfoBo bo) {\n    KnowledgeInfo add = MapstructUtils.convert(bo, KnowledgeInfo.class);\n    validEntityBeforeSave(add);\n    boolean flag = baseMapper.insert(add) > 0;\n    if (flag) {\n      bo.setId(add.getId());\n    }\n    return flag;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "insertByBo", "index": 386, "label": 0}
{"input": "@Override\n    public StatsPanelVO statsPanel() {\n        \n        int contact = contactRepository.countContact();\n        \n        int chatRoom = chatRoomRepository.countChatRoom();\n        \n        int sent = msgRepository.countSent();\n        \n        int received = msgRepository.countReceived();\n        \n        return new StatsPanelVO(contact, chatRoom, sent, received);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DashboardServiceImpl.java", "function_name": "statsPanel", "index": 387, "label": 0}
{"input": "public void setExtraInfo(Map<String, Object> extraInfo) {\n    if (extraInfo != null) {\n      Checks.checkTrue(\n          RESERVED_FIELDS.stream().noneMatch(extraInfo::containsKey),\n          \"extra info %s cannot contain any reserved keys [%s]\",\n          extraInfo.keySet(),\n          RESERVED_FIELDS);\n    }\n    this.extraInfo = extraInfo;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/Metadata.java", "function_name": "setExtraInfo", "index": 388, "label": 0}
{"input": "public ObjectProperty(List<Node> nodes, int identifierOffset, Span span) {\n      super(span, nodes);\n      this.identifierOffset = identifierOffset;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectMember.java", "function_name": "ObjectProperty", "index": 389, "label": 0}
{"input": "@Override\n  public String toString() {\n    return \"TypeParameter{\"\n        + \"variance=\"\n        + variance\n        + \", children=\"\n        + children\n        + \", span=\"\n        + span\n        + '}';\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeParameter.java", "function_name": "toString", "index": 390, "label": 0}
{"input": "public Long matchSignalForStepDependency(SignalMatchDto signalMatch) {\n    if (signalMatch.withParams()) {\n      return paramDao.matchSignalDependency(signalMatch);\n    } else { \n      return instanceDao.matchSignalDependency(signalMatch);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "matchSignalForStepDependency", "index": 391, "label": 0}
{"input": "public SubworkflowArtifact getLatestSubworkflowArtifact(\n      String workflowId, long workflowInstanceId, String stepId) {\n    Artifact artifact =\n        getLatestArtifact(workflowId, workflowInstanceId, stepId, Artifact.Type.SUBWORKFLOW.key());\n    return artifact != null ? artifact.asSubworkflow() : null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getLatestSubworkflowArtifact", "index": 392, "label": 0}
{"input": "default int getDbInsertBatchSize() {\n    return getIntProperty(DB_INSERT_BATCH_SIZE_PROPERTY_NAME, DB_INSERT_BATCH_SIZE_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getDbInsertBatchSize", "index": 393, "label": 0}
{"input": "public boolean isEquivalentTo(TypeNode other) {\n    return this == other || doIsEquivalentTo(other);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1abd174d773fa5b2e8aeb6afb8f15e4716aa8a90", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "isEquivalentTo", "index": 394, "label": 0}
{"input": "public ForGenerator(\n        Parameter p1, @Nullable Parameter p2, Expr expr, ObjectBody body, Span span) {\n      super(span, Arrays.asList(p1, p2, expr, body));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectMember.java", "function_name": "ForGenerator", "index": 395, "label": 0}
{"input": "@Test\n  public void testRunForActionTaskShutdown() {\n    taskActor.runForAction(Action.TASK_SHUTDOWN);\n    assertFalse(taskActor.isRunning());\n    verifyActions(flowActor, Action.TASK_DOWN);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionTaskShutdown", "index": 396, "label": 0}
{"input": "public void refresh(Page page) {\n\t\tclearCache();\n\t\twaitForPageLoad(page);\n\t\tprocessPageElements(page);\n\t\tlog.info(\"Loaded {} interactive elements\", interactiveElements.size());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/InteractiveElementRegistry.java", "function_name": "refresh", "index": 397, "label": 0}
{"input": "private RunRequest setupRestartRunRequest() {\n    return RunRequest.builder()\n        .requester(user)\n        .currentPolicy(RunPolicy.RESTART_FROM_SPECIFIC)\n        .stepRunParams(\n            Collections.singletonMap(\n                \"job1\",\n                Collections.singletonMap(\n                    \"foo\", ParamDefinition.buildParamDefinition(\"foo\", \"bar\"))))\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "setupRestartRunRequest", "index": 398, "label": 0}
{"input": "public static void addDicts(Set<String> dicts, List<GenTableColumn> columns) {\n    for (GenTableColumn column : columns) {\n      if (!column.isSuperColumn() && StringUtils.isNotEmpty(column.getDictType()) && StringUtils.equalsAny(\n          column.getHtmlType(),\n          new String[] { GenConstants.HTML_SELECT, GenConstants.HTML_RADIO, GenConstants.HTML_CHECKBOX })) {\n        dicts.add(\"'\" + column.getDictType() + \"'\");\n      }\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "addDicts", "index": 399, "label": 0}
{"input": "public java.util.List<Member.Builder>\n            getMembersBuilderList() {\n                return getMembersFieldBuilder().getBuilderList();\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getMembersBuilderList", "index": 400, "label": 0}
{"input": "private void wakeUpUnderlyingActor(WorkflowSummary summary) {\n    var msg =\n        MessageDto.createMessageForWakeUp(\n            summary.getWorkflowId(),\n            summary.getGroupInfo(),\n            Set.of(summary.getWorkflowInstanceId()));\n    queueSystem.notify(msg);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/SubworkflowStepRuntime.java", "function_name": "wakeUpUnderlyingActor", "index": 401, "label": 0}
{"input": "@Test\n  public void testBinaryOps() {\n    SelString obj = SelString.of(\"foo\");\n    SelType res = obj.binaryOps(SelOp.ADD, SelString.of(\"bar\"));\n    assertEquals(\"foobar\", res.toString());\n    res = obj.binaryOps(SelOp.NOT_EQUAL, SelString.of(\"foobar\"));\n    assertEquals(\"BOOLEAN: true\", res.type() + \": \" + res.toString());\n    res = obj.binaryOps(SelOp.EQUAL, SelString.of(\"foo\"));\n    assertEquals(\"BOOLEAN: true\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testBinaryOps", "index": 402, "label": 0}
{"input": "public IfExpr(Expr cond, Expr then, Expr els, Span span) {\n      super(span, List.of(cond, then, els));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "IfExpr", "index": 403, "label": 0}
{"input": "@Test\n  public void testGet() {\n    assertEquals(\"STRING: bar\", one.get(1).type() + \": \" + one.get(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelArrayTest.java", "function_name": "testGet", "index": 404, "label": 0}
{"input": "@Autowired\n\tpublic DeepResearchController(@Qualifier(\"deepResearch\") StateGraph stateGraph, SearchBeanUtil searchBeanUtil)\n\t\t\tthrows GraphStateException {\n\t\tSaverConfig saverConfig = SaverConfig.builder().register(SaverConstant.MEMORY, new MemorySaver()).build();\n\t\tthis.compiledGraph = stateGraph\n\t\t\t.compile(CompileConfig.builder().saverConfig(saverConfig).interruptBefore(\"human_feedback\").build());\n\t\tthis.searchBeanUtil = searchBeanUtil;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/controller/DeepResearchController.java", "function_name": "DeepResearchController", "index": 405, "label": 0}
{"input": "private void verifyEnqueue(int start, int terminateThenRun, int update) {\n    try {\n      verify(queueSystem, times(start)).enqueue(any(), any(StartWorkflowJobEvent.class));\n      verify(queueSystem, times(terminateThenRun))\n          .enqueue(any(), any(TerminateThenRunJobEvent.class));\n      verify(queueSystem, times(update)).enqueue(any(), any(WorkflowInstanceUpdateJobEvent.class));\n      verify(queueSystem, times(start + terminateThenRun + update)).enqueue(any(), any());\n      verify(queueSystem, times(start + terminateThenRun + update)).notify(any());\n      reset(queueSystem);\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "verifyEnqueue", "index": 406, "label": 0}
{"input": "@Override\n    public void setTitle(String title) {\n        display.asyncExec(() -> {\n            if (!shell.isDisposed()) {\n                shell.setText(title);\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtProgressDialog.java", "function_name": "setTitle", "index": 407, "label": 0}
{"input": "public static CellWriteHandlerContext createCellWriteHandlerContext(WriteContext writeContext, Row row,\n            Integer rowIndex, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead,\n            ExcelContentProperty excelContentProperty) {\n        return new CellWriteHandlerContext(writeContext, writeContext.writeWorkbookHolder(),\n                writeContext.writeSheetHolder(), writeContext.writeTableHolder(), row, rowIndex, null, columnIndex,\n                relativeRowIndex, head, null, null, isHead, excelContentProperty);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/WriteHandlerUtils.java", "function_name": "createCellWriteHandlerContext", "index": 408, "label": 0}
{"input": "@Override\n    public PageVO<ChatRoomVO> queryChatRoom(ChatRoomDTO chatRoomDTO) {\n        \n        return Opt.ofNullable(chatRoomRepository.queryChatRoom(chatRoomDTO))\n                .map(page -> {\n                    \n                    for (ChatRoomVO chatRoom : page.getRecords()) {\n                        chatRoom.setMemberCount(handleMembersCount(chatRoom.getRoomData()));\n                    }\n                    return page;\n                })\n                \n                .map(page -> new PageVO<>(page.getCurrent(), page.getSize(), page.getTotal(), page.getRecords()))\n                \n                .orElse(new PageVO<>(chatRoomDTO.getCurrent(), chatRoomDTO.getPageSize(), 0L, null));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ChatRoomServiceImpl.java", "function_name": "queryChatRoom", "index": 409, "label": 0}
{"input": "private boolean jj_3R_56() {\n    if (jj_scan_token(GT)) return true;\n    if (jj_3R_49()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_56", "index": 410, "label": 0}
{"input": "@JsonIgnore\n  public void fillCorrelationIdIfNull() {\n    if (correlationId == null) {\n      correlationId = String.format(\"%s-%s-%s\", workflowId, workflowInstanceId, workflowRunId);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowInstance.java", "function_name": "fillCorrelationIdIfNull", "index": 411, "label": 0}
{"input": "@Test\n  public void testGetWorkflowIdentity() {\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .build();\n    Assert.assertEquals(\"[foo][1]\", runRequest.getWorkflowIdentity());\n    Assert.assertEquals(\"bar\", runRequest.getRestartStepId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testGetWorkflowIdentity", "index": 412, "label": 0}
{"input": "private String[] filterAllowedLocales(String[] locales) {\n        List<String> filteredLocales = new ArrayList<>();\n        for (String localeTag : locales) {\n            Locale locale = Locale.forLanguageTag(localeTag);\n            if (allowedLanguages.contains(locale.getLanguage())) {\n                filteredLocales.add(localeTag);\n            }\n        }\n        return filteredLocales.toArray(new String[0]);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef6efe71d9095aa3bac552c6499646d9eeba6263", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocaleHandler.java", "function_name": "filterAllowedLocales", "index": 413, "label": 0}
{"input": "private List<StepBreakpoint> getStepBreakPointsWithConn(\n      Connection conn,\n      String workflowId,\n      long version,\n      long instanceId,\n      long runId,\n      String stepId,\n      long stepAttemptId)\n      throws SQLException {\n    try (PreparedStatement stmt =\n        getPreparedStatementForMatchAnyOrSpecific(\n            conn, workflowId, version, instanceId, runId, stepId, stepAttemptId)) {\n      List<StepBreakpoint> toReturn = new ArrayList<>();\n      try (ResultSet result = stmt.executeQuery()) {\n        while (result.next()) {\n          toReturn.add(stepBreakpointFromResultSet(result));\n        }\n        return toReturn;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDao.java", "function_name": "getStepBreakPointsWithConn", "index": 414, "label": 0}
{"input": "@Test\n  public void testNextExecutionDateForInterval() throws Exception {\n    TimeTrigger trigger =\n        loadObject(\"fixtures/time_triggers/sample-interval-time-trigger.json\", TimeTrigger.class);\n\n    AssertHelper.assertThrows(\n        \"TimeTrigger nextExecutionDate is not implemented\",\n        UnsupportedOperationException.class,\n        \"TimeTrigger nextExecutionDate is not implemented for type: INTERVAL\",\n        () -> TriggerHelper.nextExecutionDate(trigger, Date.from(Instant.EPOCH), \"test-id\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/TriggerHelperTest.java", "function_name": "testNextExecutionDateForInterval", "index": 415, "label": 0}
{"input": "public void markFinishing(MaestroTracingManager tracingManager) {\n    runtimeState.setFinishTime(updateStatus(StepInstance.Status.FINISHING, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markFinishing", "index": 416, "label": 0}
{"input": "public SubMessage2 getMessage2(int index) {\n                if (message2Builder_ == null) {\n                    return message2_.get(index);\n                } else {\n                    return message2Builder_.getMessage(index);\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage2", "index": 417, "label": 0}
{"input": "@Override\n  @TruffleBoundary\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (!(obj instanceof VmMapping other)) return false;\n\n    \n    force(false);\n    other.force(false);\n    if (getEntryCount() != other.getEntryCount()) return false;\n\n    var cursor = cachedValues.getEntries();\n    while (cursor.advance()) {\n      Object key = cursor.getKey();\n      if (key instanceof Identifier) continue;\n\n      var value = cursor.getValue();\n      assert value != null;\n      var otherValue = other.getCachedValue(key);\n      if (!value.equals(otherValue)) return false;\n    }\n\n    return true;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmMapping.java", "function_name": "equals", "index": 418, "label": 0}
{"input": "private int getLoopParamsTotalCount(StepRuntimeSummary runtimeSummary) {\n    MapParameter loopParams = runtimeSummary.getParams().get(LOOP_PARAMS_NAME).asMapParam();\n    int total = 1;\n    for (String name : loopParams.getParamNames()) {\n      Parameter param = loopParams.getEvaluatedParam(name);\n      switch (param.getType()) {\n        case STRING_ARRAY:\n          total = total * param.asStringArray().length;\n          break;\n        case LONG_ARRAY:\n          total = total * param.asLongArray().length;\n          break;\n        case DOUBLE_ARRAY:\n          total = total * param.asDoubleArray().length;\n          break;\n        case BOOLEAN_ARRAY:\n          total = total * param.asBooleanArray().length;\n          break;\n        default:\n          throw new MaestroInternalError(\n              \"Invalid loop param with name [%s] and type [%s] for foreach step [%s]\",\n              name, param.getType(), runtimeSummary.getIdentity());\n      }\n    }\n    return total;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "getLoopParamsTotalCount", "index": 419, "label": 0}
{"input": "public StringParameter buildParam(String key, String value) {\n    return StringParameter.builder()\n        .name(key)\n        .value(value)\n        .evaluatedResult(value)\n        .evaluatedTime(System.currentTimeMillis())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/testFixtures/java/com/netflix/maestro/MaestroBaseTest.java", "function_name": "buildParam", "index": 420, "label": 0}
{"input": "@Bean\n  public ExecutionPreparer executionPreparer(\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      WorkflowTranslator translator,\n      WorkflowHelper workflowHelper,\n      RollupAggregationHelper rollupAggregationHelper) {\n    LOG.info(\"Creating maestro executionPreparer within Spring boot...\");\n    return new MaestroExecutionPreparer(\n        instanceDao,\n        stepInstanceDao,\n        translator,\n        workflowHelper,\n        rollupAggregationHelper,\n        objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroFlowConfiguration.java", "function_name": "executionPreparer", "index": 421, "label": 0}
{"input": "EndpointViewHolder(@NonNull View itemView) {\n                super(itemView);\n                titleTextView = itemView.findViewById(R.id.titleTextView);\n                contentTextView = itemView.findViewById(R.id.contentTextView);\n            }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/EndpointsBottomSheet.java", "function_name": "EndpointViewHolder", "index": 422, "label": 0}
{"input": "public static MergeContext workflowCreate(\n        ParamSource mergeSource, boolean isUpstreamMerge, boolean isRestartMerge) {\n      boolean isSystem = mergeSource.isSystemStage();\n      return new MergeContext(mergeSource, isSystem, isUpstreamMerge, isRestartMerge);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "workflowCreate", "index": 423, "label": 0}
{"input": "public GhidraMCPPlugin(PluginTool tool) {\n        super(tool);\n        Msg.info(this, \"✅ GhidraMCPPlugin loaded!\");\n\n        try {\n            startServer();\n        } catch (IOException e) {\n            Msg.error(this, \"Failed to start HTTP server\", e);\n        }\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "GhidraMCPPlugin", "index": 424, "label": 0}
{"input": "@GetMapping(\"/list\")\n    public ResponseVO<List<SessionVO>> list() {\n        return ResponseVO.ok(sessionService.querySession());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/SessionController.java", "function_name": "list", "index": 425, "label": 0}
{"input": "@Test\n    public void tests1() throws IOException, InvalidFormatException {\n        \n        File file = TestFileUtil.readFile(\"dataformat\" + File.separator + \"dataformat.xlsx\");\n        List<DateFormatData> list = EasyExcel.read(file, DateFormatData.class, null).sheet().doReadSync();\n        for (DateFormatData data : list) {\n            LOGGER.info(\"返回:{}\", JSON.toJSONString(data));\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1a4e679cf85fc045d0a90267c32f6b5fb06f06a5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatTest.java", "function_name": "tests1", "index": 426, "label": 0}
{"input": "public SchemaRecallNode(ChatClient.Builder chatClientBuilder, BaseSchemaService baseSchemaService) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t\tthis.baseSchemaService = baseSchemaService;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/SchemaRecallNode.java", "function_name": "SchemaRecallNode", "index": 427, "label": 0}
{"input": "public CsvWriterBuilder nullString(String nullString) {\n        if (nullString != null) {\n            this.csvFormatBuilder.setNullString(nullString);\n        }\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/CsvWriterBuilder.java", "function_name": "nullString", "index": 428, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidCallPut() {\n    params.call(\"put\", new SelType[] {SelString.of(\"foo\"), SelString.of(\"bar\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelParamsTest.java", "function_name": "testInvalidCallPut", "index": 429, "label": 0}
{"input": "public PrototypeResult(boolean success, String errorMessage) {\n            this.success = success;\n            this.errorMessage = errorMessage;\n        }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "PrototypeResult", "index": 430, "label": 0}
{"input": "@Test\n  public void testComputeStepIdsInRuntimeDagForInstanceRestart() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setRunConfig(new RunConfig());\n    instance.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_BEGINNING);\n    instance.setRuntimeDag(runtimeDag2);\n    Set<String> actual =\n        DagHelper.computeStepIdsInRuntimeDag(instance, Collections.singleton(\"job_2\"));\n    Assert.assertEquals(\"[job_1, job_3, job_2, job_5, job_4]\", actual.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testComputeStepIdsInRuntimeDagForInstanceRestart", "index": 431, "label": 0}
{"input": "@Bean(name = \"maestroDataSource\")\n  public DataSource maestroDataSource(MaestroEngineProperties props) {\n    LOG.info(\"Creating maestroDataSource within Spring boot...\");\n    return new DatabaseSourceProvider(props).get();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroDataSource", "index": 432, "label": 0}
{"input": "public static BigDecimal parseBigDecimal(String string, ExcelContentProperty contentProperty)\n            throws ParseException {\n        if (!hasFormat(contentProperty)) {\n            return new BigDecimal(string);\n        }\n        return new BigDecimal(parse(string, contentProperty).toString());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/NumberUtils.java", "function_name": "parseBigDecimal", "index": 433, "label": 0}
{"input": "public boolean areAllExecutionResultsPresent(Plan plan) {\n\t\tif (CollectionUtils.isEmpty(plan.getSteps())) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn plan.getSteps().stream().allMatch(step -> StringUtils.hasText(step.getExecutionRes()));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "4f1c156181d67f873a3d70ec2f5b33a8d094a8f3", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/node/ResearchTeamNode.java", "function_name": "areAllExecutionResultsPresent", "index": 434, "label": 0}
{"input": "private void setupHttpClient() {\n        CookieManager cm = new CookieManager();\n        cm.setCookiePolicy(CookiePolicy.ACCEPT_ALL);\n        this.httpClient = Methanol\n                .newBuilder()\n                .followRedirects(HttpClient.Redirect.ALWAYS)\n                .userAgent(Main.getUserAgent())\n                .defaultHeader(\"Content-Type\", \"application/json\")\n                .defaultHeader(\"BTN-AppID\", appId)\n                .defaultHeader(\"BTN-AppSecret\", appSecret)\n                .defaultHeader(\"X-BTN-AppID\", appId)\n                .defaultHeader(\"X-BTN-AppSecret\", appSecret)\n                .defaultHeader(\"Authentication\", \"Bearer \" + appId + \"@\" + appSecret)\n                .requestTimeout(Duration.ofMinutes(1))\n                .connectTimeout(Duration.ofSeconds(10))\n                .headersTimeout(Duration.ofSeconds(15))\n                .readTimeout(Duration.ofSeconds(30), CommonUtil.getScheduler())\n                .cookieHandler(cm).build();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "b517576659c38ab1fccc76e54c6852a001898801", "file_path": "src/main/java/com/ghostchu/peerbanhelper/btn/BtnNetwork.java", "function_name": "setupHttpClient", "index": 435, "label": 0}
{"input": "public void runMaestroTask(\n      WorkflowExecutor workflowExecutor,\n      Workflow workflow,\n      Task task,\n      WorkflowSystemTask systemTask) {\n    try {\n      switch (task.getStatus()) {\n        case SCHEDULED:\n          systemTask.start(workflow, task, workflowExecutor);\n          break;\n\n        case IN_PROGRESS:\n          systemTask.execute(workflow, task, workflowExecutor);\n          break;\n        default:\n          break;\n      }\n    } catch (Exception e) {\n      LOG.error(\n          \"NOT Terminate Maestro step [{}] for the task [{}] in workflow [{}][{}], getting an exception\",\n          task.getReferenceTaskName(),\n          task.getTaskId(),\n          workflow.getWorkflowName(),\n          workflow.getWorkflowId(),\n          e);\n      Monitors.error(e.getClass().getSimpleName(), \"unexpected_exception_in_maestro_task\");\n      throw e;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/conductor/core/execution/MaestroWorkflowTaskRunner.java", "function_name": "runMaestroTask", "index": 436, "label": 0}
{"input": "@Transactional\n\tpublic boolean updatePlanTemplate(String planTemplateId, String title, String planJson) {\n\t\tOptional<PlanTemplate> templateOpt = planTemplateRepository.findByPlanTemplateId(planTemplateId);\n\t\tif (templateOpt.isPresent()) {\n\t\t\tPlanTemplate template = templateOpt.get();\n\t\t\tif (title != null && !title.isEmpty()) {\n\t\t\t\ttemplate.setTitle(title);\n\t\t\t}\n\t\t\ttemplate.setUpdateTime(LocalDateTime.now());\n\t\t\tplanTemplateRepository.save(template);\n\n\t\t\t\n\t\t\tsaveToVersionHistory(planTemplateId, planJson);\n\n\t\t\tlogger.info(\"Updated plan template {} and saved new version\", planTemplateId);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/service/PlanTemplateService.java", "function_name": "updatePlanTemplate", "index": 437, "label": 0}
{"input": "private StepRuntimeSummary.StepRuntimeSummaryBuilder runtimeSummaryBuilder() {\n    return StepRuntimeSummary.builder()\n        .stepId(\"step1\")\n        .stepInstanceUuid(\"uuid123\")\n        .params(new HashMap<>());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "runtimeSummaryBuilder", "index": 438, "label": 0}
{"input": "@Override\n  protected ResponseEntity<Object> handleHandlerMethodValidationException(\n      HandlerMethodValidationException e,\n      HttpHeaders headers,\n      HttpStatusCode status,\n      WebRequest request) {\n    LOG.info(\"Handle HandlerMethodValidationException with a message: {}\", e.getMessage());\n    List<String> errors =\n        e.getBeanResults().stream()\n            .map(ParameterErrors::getFieldError)\n            .filter(Objects::nonNull)\n            .map(error -> error.getField() + EMPTY_SPACE + error.getDefaultMessage())\n            .toList();\n    return buildDetailedResponse(e, errors, headers, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "62a8197050c9797237738f106f91a2ed1c25e4fd", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleHandlerMethodValidationException", "index": 439, "label": 0}
{"input": "private void setFontStyles(XSSFFont font, Text text) {\n        if (font.getBold()) text.setBold();\n        if (font.getItalic()) text.setItalic();\n        if (font.getUnderline() == 1) text.setUnderline(0.5f, -1f);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "setFontStyles", "index": 440, "label": 0}
{"input": "@Test\n  public void testGetStepStates() {\n    Map<String, StepRuntimeState> stats =\n        stepDao.getStepStates(TEST_WORKFLOW_ID, 1, 1, Arrays.asList(\"job1\", \"job2\"));\n    assertEquals(singletonMap(si.getStepId(), si.getRuntimeState()), stats);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepStates", "index": 441, "label": 0}
{"input": "private Optional<OutputData> outputDataFromResult(ResultSet rs) throws SQLException {\n    if (rs.next()) {\n      OutputData data = fromJson(rs.getString(\"payload\"), OutputData.class);\n      data.setCreateTime(rs.getTimestamp(\"create_ts\").getTime());\n      data.setModifyTime(rs.getTimestamp(\"modify_ts\").getTime());\n      return Optional.of(data);\n    } else {\n      return Optional.empty();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/OutputDataDao.java", "function_name": "outputDataFromResult", "index": 442, "label": 0}
{"input": "private void ReInitRounds() {\n    int i;\n    jjround = 0x80000001;\n    for (i = 57; i-- > 0; ) jjrounds[i] = 0x80000000;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "ReInitRounds", "index": 443, "label": 0}
{"input": "public KeywordExtractNode(ChatClient.Builder chatClientBuilder, BaseNl2SqlService baseNl2SqlService) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t\tthis.baseNl2SqlService = baseNl2SqlService;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/KeywordExtractNode.java", "function_name": "KeywordExtractNode", "index": 444, "label": 0}
{"input": "@Test\n  public void testMaintenanceWithTooManyGroups() {\n    when(properties.getGroupNumPerNode()).thenReturn(0L);\n    executor = new FlowExecutor(context);\n    executor.init();\n    verify(context, timeout(500).times(0)).claimGroup();\n    verify(context, timeout(500).times(0)).run(any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/FlowExecutorTest.java", "function_name": "testMaintenanceWithTooManyGroups", "index": 445, "label": 0}
{"input": "@Override\n    public boolean isTableExists(String tableName) {\n        LambdaQueryWrapper<SqliteMaster> wrapper = Wrappers.<SqliteMaster>lambdaQuery()\n                .eq(SqliteMaster::getType, \"table\")\n                .eq(SqliteMaster::getTblName, tableName);\n        return super.count(wrapper) > 0;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "c8a4069885f7faaf35fc054269c047d2b00f577d", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/SqliteMasterRepositoryImpl.java", "function_name": "isTableExists", "index": 446, "label": 0}
{"input": "public Builder searchStrategy(String searchStrategy) {\n\t\t\t\tthis.searchStrategy = searchStrategy;\n\t\t\t\treturn this;\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "searchStrategy", "index": 447, "label": 0}
{"input": "public static JSONObject forwardVideo(String appId, String toWxid, String xml) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"xml\", xml);\r\n        return OkhttpUtil.postJSON(\"/message/forwardVideo\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "forwardVideo", "index": 448, "label": 0}
{"input": "@Test\n  public void testGetParamVarName() throws Exception {\n    Map<String, Boolean> res = run(\"x.length;\");\n    assertEquals(\"{x=true}\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserValidationVisitorTest.java", "function_name": "testGetParamVarName", "index": 449, "label": 0}
{"input": "private boolean jj_scan_token(int kind) {\n    if (jj_scanpos == jj_lastpos) {\n      jj_la--;\n      if (jj_scanpos.next == null) {\n        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();\n      } else {\n        jj_lastpos = jj_scanpos = jj_scanpos.next;\n      }\n    } else {\n      jj_scanpos = jj_scanpos.next;\n    }\n    if (jj_rescan) {\n      int i = 0;\n      Token tok = token;\n      while (tok != null && tok != jj_scanpos) {\n        i++;\n        tok = tok.next;\n      }\n      if (tok != null) jj_add_error_token(kind, i);\n    }\n    if (jj_scanpos.kind != kind) return true;\n    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_scan_token", "index": 450, "label": 0}
{"input": "private void lexHexNumber() {\n    if (lookahead == '_') {\n      throw lexError(\"invalidSeparatorPosition\");\n    }\n    if (!isHex(lookahead)) {\n      throw unexpectedChar(lookahead, \"hexadecimal number\");\n    }\n    while (isHex(lookahead) || lookahead == '_') {\n      nextChar();\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexHexNumber", "index": 451, "label": 0}
{"input": "public Object apply(Object arg1, Object arg2) {\n    return getCallTarget().call(thisValue, this, arg1, arg2);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmFunction.java", "function_name": "apply", "index": 452, "label": 0}
{"input": "public Set<String> validate(String expr, Set<String> whitelistVars) throws Exception {\n    checkExprLength(expr);\n    selParser.ReInit(new ByteArrayInputStream(expr.getBytes()));\n    ASTExecute n = selParser.Execute();\n    Map<String, Boolean> vars = new HashMap<>();\n    n.jjtAccept(validator, vars);\n\n    Set<String> res = new HashSet<>();\n    for (Map.Entry<String, Boolean> entry : vars.entrySet()) {\n      if (entry.getValue() && !whitelistVars.contains(entry.getKey())) {\n        res.add(entry.getKey());\n      }\n    }\n    return res;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelThread.java", "function_name": "validate", "index": 453, "label": 0}
{"input": "public static JSONObject setChatroomAnnouncement(String appId,String chatroomId, String content){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        param.put(\"content\",content);\r\n        return OkhttpUtil.postJSON(\"/group/setChatroomAnnouncement\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "setChatroomAnnouncement", "index": 454, "label": 0}
{"input": "private boolean jj_3_9() {\n    if (jj_3R_22()) return true;\n    if (jj_scan_token(IDENTIFIER)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_9", "index": 455, "label": 0}
{"input": "@Override\n            public MessageBytesExtra buildPartial() {\n                MessageBytesExtra result = new MessageBytesExtra(this);\n                buildPartialRepeatedFields(result);\n                if (bitField0_ != 0) {\n                    buildPartial0(result);\n                }\n                onBuilt();\n                return result;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "buildPartial", "index": 456, "label": 0}
{"input": "private boolean needsConst(ExpressionNode receiver) {\n    var scope = symbolTable.getCurrentScope();\n    var constLevel = scope.getConstLevel();\n    var needsConst = false;\n    if (receiver instanceof OuterNode) {\n      var outerScope = getParentLexicalScope();\n      if (outerScope != null) {\n        needsConst =\n            switch (constLevel) {\n              case MODULE -> outerScope.isModuleScope();\n              case ALL -> outerScope.getConstLevel() != ConstLevel.ALL;\n              case NONE -> false;\n            };\n      }\n    } else if (receiver instanceof GetModuleNode) {\n      needsConst = constLevel != ConstLevel.NONE;\n    } else if (receiver instanceof ThisNode) {\n      var constDepth = scope.getConstDepth();\n      needsConst = constLevel == ConstLevel.ALL && constDepth == -1;\n    }\n    return needsConst;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "needsConst", "index": 457, "label": 0}
{"input": "default void visit(Object value) {\n    if (value instanceof Value v) {\n      v.accept(this);\n    } else if (value instanceof String string) {\n      visitString(string);\n    } else if (value instanceof Boolean b) {\n      visitBoolean(b);\n    } else if (value instanceof Long l) {\n      visitInt(l);\n    } else if (value instanceof Double d) {\n      visitFloat(d);\n    } else if (value instanceof List<?> list) {\n      visitList(list);\n    } else if (value instanceof Set<?> set) {\n      visitSet(set);\n    } else if (value instanceof Map<?, ?> map) {\n      visitMap(map);\n    } else if (value instanceof Pattern pattern) {\n      visitRegex(pattern);\n    } else if (value instanceof byte[] bytes) {\n      visitBytes(bytes);\n    } else {\n      throw new IllegalArgumentException(\"Cannot visit value with unexpected type: \" + value);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/ValueVisitor.java", "function_name": "visit", "index": 458, "label": 0}
{"input": "@Test\n  public void testEmptyStartWorkflowBatchRuns() {\n    String workflowId = \"workflowId\";\n    String version = \"version\";\n    String workflowTriggerUuid = \"workflowTriggerUuid\";\n    workflowLauncher.startWorkflowBatchRuns(workflowId, version, workflowTriggerUuid, List.of());\n\n    var requestCaptor = ArgumentCaptor.forClass(List.class);\n    verify(actionHandler, times(1))\n        .startBatch(eq(workflowId), eq(version), requestCaptor.capture());\n    var requests = (List<RunRequest>) requestCaptor.getValue();\n    assertTrue(requests.isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/MaestroWorkflowLauncherTest.java", "function_name": "testEmptyStartWorkflowBatchRuns", "index": 459, "label": 0}
{"input": "default DoubleParameter asDoubleParam() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as DOUBLE\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/Parameter.java", "function_name": "asDoubleParam", "index": 460, "label": 0}
{"input": "private void runCommentTest(String filePath, ExcelTypeEnum excelType) throws Exception {\n        File file = new File(filePath);\n        FastExcel.read(file, new ReadListener() {\n            @Override\n            public void invoke(Object data, AnalysisContext context) {\n                \n            }\n            \n            @Override\n            public void doAfterAllAnalysed(AnalysisContext context) {\n                \n            }\n            \n            @Override\n            public void extra(CellExtra extra, AnalysisContext context) {\n                LOGGER.info(\"读取到了一条额外信息:{}\", JSON.toJSONString(extra));\n                if (extra.getType().equals(CellExtraTypeEnum.COMMENT)) {\n                    Assertions.assertTrue(commentList.contains(extra.getText()));\n                }\n            }\n        }).excelType(excelType).extraRead(CellExtraTypeEnum.COMMENT).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "80fadbc1fa53ba0dbef63f42532dd20abc164830", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/read/CommentTest.java", "function_name": "runCommentTest", "index": 461, "label": 0}
{"input": "@Override\n  public ParamDefinition toDefinition() {\n    StringParamDefinition.StringParamDefinitionBuilder<?, ?> builder =\n        StringParamDefinition.builder();\n    if (isImmutableToDefinitionWithoutValue(builder)) {\n      return builder.value(getValue()).expression(getExpression()).build();\n    }\n    return builder.value(evaluatedResult).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/StringParameter.java", "function_name": "toDefinition", "index": 462, "label": 0}
{"input": "private static String getResourceUrl(String resourcePath) {\n\t\ttry {\n\t\t\tURL resourceUrl = HtmlGenerationUtil.class.getClassLoader().getResource(resourcePath);\n\t\t\tif (resourceUrl != null) {\n\t\t\t\tString url = resourceUrl.toString();\n\t\t\t\tlogger.info(\"Resource URL for {}: {}\", resourcePath, url);\n\t\t\t\treturn url;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.warn(\"Resource not found in classpath: {}\", resourcePath);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.error(\"Error getting resource URL for {}: {}\", resourcePath, e.getMessage());\n\t\t}\n\t\treturn null;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/HtmlGenerationUtil.java", "function_name": "getResourceUrl", "index": 463, "label": 0}
{"input": "@Override\n    public String queryHardLinkVideo(byte[] md5) {\n        return super.getBaseMapper().queryHardLinkVideo(md5);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "f7cc1d6c48df9bcba3787c9f97c639dd4caf22e3", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/HardLinkVideoAttributeRepositoryImpl.java", "function_name": "queryHardLinkVideo", "index": 464, "label": 0}
{"input": "@Test\n  public void testRestartDoneWithFailedStep() {\n    Map<String, Boolean> idStatusMap = new LinkedHashMap<>();\n    idStatusMap.put(\"job_3\", Boolean.FALSE);\n    idStatusMap.put(\"job_9\", Boolean.TRUE);\n    idStatusMap.put(\"job_8\", Boolean.TRUE);\n    Assert.assertTrue(\n        DagHelper.isDone(\n            runtimeDag1,\n            idStatusMap,\n            RestartConfig.builder().addRestartNode(\"sample-dag-test-1\", 1, \"job_9\").build()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testRestartDoneWithFailedStep", "index": 465, "label": 0}
{"input": "@Test\n  public void testSerde() throws Exception {\n    ForeachStep def =\n        (ForeachStep) loadObject(\"fixtures/foreachsteps/sample-foreach-step.json\", Step.class);\n    Assert.assertNotNull(def);\n    ForeachStep def2 = (ForeachStep) MAPPER.readValue(MAPPER.writeValueAsString(def), Step.class);\n    Assert.assertEquals(def, def2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/ForeachStepTest.java", "function_name": "testSerde", "index": 466, "label": 0}
{"input": "@Test\n  public void testExecuteIncomplete() {\n    StepRuntimeState state = new StepRuntimeState();\n    state.setStatus(StepInstance.Status.FATALLY_FAILED);\n    when(stepInstanceDao.getStepStates(anyString(), anyLong(), anyLong(), anyList()))\n        .thenReturn(Collections.singletonMap(\"job1\", state));\n\n    assertFalse(gateTask.execute(workflow, joinTask, null));\n    assertNull(joinTask.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tasks/MaestroGateTaskTest.java", "function_name": "testExecuteIncomplete", "index": 467, "label": 0}
{"input": "@Test\n  public void testToWorkflowStartResponse() {\n    RunResponse res = RunResponse.from(stepInstance, TimelineLogEvent.info(\"bar\"));\n    WorkflowStartResponse response = res.toWorkflowStartResponse();\n    Assert.assertEquals(InstanceRunStatus.CREATED, response.getStatus());\n    res = RunResponse.from(instance, \"foo\");\n    response = res.toWorkflowStartResponse();\n    Assert.assertEquals(InstanceRunStatus.INTERNAL_ERROR, response.getStatus());\n    res = RunResponse.from(instance, 0);\n    response = res.toWorkflowStartResponse();\n    Assert.assertEquals(InstanceRunStatus.DUPLICATED, response.getStatus());\n    res = RunResponse.from(instance, -1);\n    response = res.toWorkflowStartResponse();\n    Assert.assertEquals(InstanceRunStatus.STOPPED, response.getStatus());\n    res = RunResponse.from(instance, 1);\n    response = res.toWorkflowStartResponse();\n    Assert.assertEquals(InstanceRunStatus.CREATED, response.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunResponseTest.java", "function_name": "testToWorkflowStartResponse", "index": 468, "label": 0}
{"input": "@Override\n  public KubernetesJobResult launchJob(KubernetesStepContext context) {\n    try {\n      Job job = buildJob(context);\n      client.batch().v1().jobs().inNamespace(NAMESPACE).resource(job).create();\n\n      String jobId = job.getMetadata().getName();\n      StepRuntime.State state = deriveState(job.getStatus());\n      LOG.info(\"Job [{}] created with a status [{}]\", jobId, state);\n      return new KubernetesJobResult(jobId, state);\n    } catch (KubernetesClientException e) {\n      throw new MaestroBadRequestException(\n          e, \"Error creating Kubernetes job for \" + context.getIdentity());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/Fabric8RuntimeExecutor.java", "function_name": "launchJob", "index": 469, "label": 0}
{"input": "default String getJdbcUserName() {\n    return getProperty(JDBC_USER_NAME_PROPERTY_NAME, JDBC_USER_NAME_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getJdbcUserName", "index": 470, "label": 0}
{"input": "@Override\n  public Iterator<Long> iterator() {\n    return new PrimitiveIterator.OfLong() {\n      int index = 0;\n\n      @Override\n      public boolean hasNext() {\n        return index < bytes.length;\n      }\n\n      @Override\n      public long nextLong() {\n        if (!hasNext()) {\n          CompilerDirectives.transferToInterpreter();\n          throw new NoSuchElementException();\n        }\n        var result = Byte.toUnsignedLong(bytes[index]);\n        index += 1;\n        return result;\n      }\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmBytes.java", "function_name": "iterator", "index": 471, "label": 0}
{"input": "private boolean compareVersions(String supportMinVersion, String currentVersion) {\n        long supportMinVersionLong = Long.parseLong(supportMinVersion.replaceAll(\"\\\\.\", \"\"));\n        long currentVersionLong = Long.parseLong(currentVersion.replaceAll(\"\\\\.\", \"\"));\n        return currentVersionLong < supportMinVersionLong;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "e8526ae8bec20c379510005ef2b6ea9bfa796382", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "compareVersions", "index": 472, "label": 0}
{"input": "public static JSONObject dialogLogin(String appId, String proxyIp) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"proxyIp\", proxyIp);\r\n        return OkhttpUtil.postJSON(\"/login/dialogLogin\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "dialogLogin", "index": 473, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidCallMethod() {\n    one.call(\"invalid\", new SelType[] {});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelJodaDateTimeTest.java", "function_name": "testInvalidCallMethod", "index": 474, "label": 0}
{"input": "@Test\n  public void testGetLatestWorkflowInstanceRun() {\n    instanceDao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.FAILED, \"kill the test\");\n    wfi.setWorkflowUuid(\"test-uuid\");\n    wfi.setWorkflowRunId(0L);\n    wfi.setRunConfig(new RunConfig());\n    wfi.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_INCOMPLETE);\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(1, res);\n    assertEquals(1, wfi.getWorkflowInstanceId());\n    assertEquals(2, wfi.getWorkflowRunId());\n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n\n    WorkflowInstance instanceRun =\n        instanceDao.getLatestWorkflowInstanceRun(wfi.getWorkflowId(), wfi.getWorkflowInstanceId());\n    instanceRun.setModifyTime(null);\n    assertEquals(wfi, instanceRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetLatestWorkflowInstanceRun", "index": 475, "label": 0}
{"input": "@Test\n  public void testToStringWithValue() {\n    root.jjtSetValue(\"foo\");\n    assertEquals(\"Execute: foo\", root.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testToStringWithValue", "index": 476, "label": 0}
{"input": "private void initOneColumnProperty(int index, FieldWrapper field, Boolean forceIndex) {\n        List<String> tmpHeadList = new ArrayList<>();\n        boolean notForceName = field.getHeads() == null || field.getHeads().length == 0 || (field.getHeads().length == 1\n                && StringUtils.isEmpty(field.getHeads()[0]));\n        if (headMap.containsKey(index)) {\n            tmpHeadList.addAll(headMap.get(index).getHeadNameList());\n        } else {\n            if (notForceName) {\n                tmpHeadList.add(field.getFieldName());\n            } else {\n                Collections.addAll(tmpHeadList, field.getHeads());\n            }\n        }\n        Head head = new Head(index, field.getField(), field.getFieldName(), tmpHeadList, forceIndex, !notForceName);\n        headMap.put(index, head);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/property/ExcelHeadProperty.java", "function_name": "initOneColumnProperty", "index": 477, "label": 0}
{"input": "private void resumeMonitorTask(WorkflowInstance instance, Task task) {\n    if (instance.getRunStatus() != WorkflowInstance.Status.CREATED) {\n      WorkflowRuntimeSummary runtimeSummary = new WorkflowRuntimeSummary();\n      runtimeSummary.updateRuntimeState(\n          WorkflowInstance.Status.IN_PROGRESS,\n          instance.getRuntimeOverview(),\n          instance.getStartTime());\n      runtimeSummary.setRollupBase(aggregationHelper.calculateRollupBase(instance));\n      runtimeSummary.setArtifacts(instance.getArtifacts());\n      runtimeSummary.setTimeline(instance.getTimeline());\n      task.getOutputData().put(Constants.WORKFLOW_RUNTIME_SUMMARY_FIELD, runtimeSummary);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/MaestroExecutionPreparer.java", "function_name": "resumeMonitorTask", "index": 478, "label": 0}
{"input": "protected VmExceptionBuilder exceptionBuilder() {\n    return new VmExceptionBuilder()\n        .withMemberName(symbolTable.getCurrentScope().getQualifiedName());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "exceptionBuilder", "index": 479, "label": 0}
{"input": "private boolean jj_3R_50() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_55()) {\n      jj_scanpos = xsp;\n      if (jj_3R_56()) {\n        jj_scanpos = xsp;\n        if (jj_3R_57()) {\n          jj_scanpos = xsp;\n          if (jj_3R_58()) return true;\n        }\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_50", "index": 480, "label": 0}
{"input": "public static WorkflowInstance buildTerminateWorkflowInstance(\n      WorkflowSummary summary, WorkflowRuntimeOverview overview) {\n    WorkflowInstance toTerminate = new WorkflowInstance();\n    toTerminate.setWorkflowId(summary.getWorkflowId());\n    toTerminate.setWorkflowInstanceId(summary.getWorkflowInstanceId());\n    toTerminate.setWorkflowRunId(summary.getWorkflowRunId());\n    toTerminate.setGroupInfo(summary.getGroupInfo());\n    toTerminate.setRuntimeDag(summary.getRuntimeDag());\n    toTerminate.setRuntimeOverview(overview);\n    return toTerminate;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "buildTerminateWorkflowInstance", "index": 481, "label": 0}
{"input": "@Bean\n  public WorkflowStatusListener workflowStatusListener(\n      MaestroTask maestroTask,\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      MaestroJobEventPublisher publisher,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroMetrics metricRepo) {\n    LOG.info(\"Creating workflowStatusListener within Spring boot...\");\n    return new MaestroWorkflowStatusListener(\n        maestroTask, instanceDao, stepInstanceDao, publisher, objectMapper, metricRepo);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "workflowStatusListener", "index": 482, "label": 0}
{"input": "@Test\n  public void testGetTaskMap() {\n    when(workflow.getTasks()).thenReturn(Collections.singletonList(task));\n    when(task.getTaskType()).thenReturn(Constants.MAESTRO_TASK_NAME);\n    when(task.getReferenceTaskName()).thenReturn(\"test-job\");\n    Assert.assertEquals(\n        Collections.singletonMap(\"test-job\", task), TaskHelper.getTaskMap(workflow));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/TaskHelperTest.java", "function_name": "testGetTaskMap", "index": 483, "label": 0}
{"input": "private String getFormattedDateString(Cell cell, ConditionalFormattingEvaluator cfEvaluator) {\n        Format dateFormat = getFormat(cell, cfEvaluator);\n        if (dateFormat instanceof ExcelStyleDateFormatter) {\n            \n            ((ExcelStyleDateFormatter) dateFormat).setDateToBeFormatted(cell.getNumericCellValue());\n        }\n        Date d = cell.getDateCellValue();\n        return performDateFormatting(d, dateFormat);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatter1.java", "function_name": "getFormattedDateString", "index": 484, "label": 0}
{"input": "private MapParameter getAndValidateKubernetesParams(StepRuntimeSummary stepSummary) {\n    Checks.notNull(stepSummary.getParams(), \"params must be present\");\n    Checks.notNull(\n        stepSummary.getParams().get(KUBERNETES_KEY), \"kubernetes params must be present\");\n    MapParameter mapParams = stepSummary.getParams().get(KUBERNETES_KEY).asMapParam();\n    checkNotNullPrecondition(mapParams, IMAGE_KEY);\n    checkNotNullPrecondition(mapParams, ENTRYPOINT_KEY);\n    return mapParams;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/kubernetes/KubernetesCommandGenerator.java", "function_name": "getAndValidateKubernetesParams", "index": 485, "label": 0}
{"input": "public ExcelReaderBuilder ignoreHiddenSheet(Boolean ignoreHiddenSheet) {\n        readWorkbook.setIgnoreHiddenSheet(ignoreHiddenSheet);\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/ExcelReaderBuilder.java", "function_name": "ignoreHiddenSheet", "index": 486, "label": 0}
{"input": "private ExpressionNode[] doVisitAnnotations(List<? extends Annotation> annotations) {\n    var nodes = new ExpressionNode[annotations.size()];\n    for (var i = 0; i < nodes.length; i++) {\n      nodes[i] = visitAnnotation(annotations.get(i));\n    }\n    return nodes;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitAnnotations", "index": 487, "label": 0}
{"input": "EndpointsAdapter(List<Endpoint> endpointsList, EndpointSelectionListener selectionListener) {\n            this.endpointsList = endpointsList;\n            this.selectionListener = selectionListener;\n        }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/EndpointsBottomSheet.java", "function_name": "EndpointsAdapter", "index": 488, "label": 0}
{"input": "private boolean updateRuntimeOverview(\n      WorkflowSummary workflowSummary,\n      WorkflowRuntimeSummary runtimeSummary,\n      WorkflowRuntimeOverview newOverview) {\n    Optional<Details> updated =\n        instanceDao.updateRuntimeOverview(\n            workflowSummary, newOverview, runtimeSummary.getTimeline());\n    if (updated.isPresent()) {\n      runtimeSummary.addTimeline(TimelineDetailsEvent.from(updated.get()));\n      return false;\n    }\n    runtimeSummary.setRuntimeOverview(newOverview);\n    return true;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroEndTask.java", "function_name": "updateRuntimeOverview", "index": 489, "label": 0}
{"input": "@Test(expected = IllegalFieldValueException.class)\n  public void testCallDateIntToTsInvalid() {\n    SelUtilFunc.INSTANCE.call(\"dateIntToTs\", new SelType[] {SelLong.of(20200230)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallDateIntToTsInvalid", "index": 490, "label": 0}
{"input": "@Test\n  public void testResetIterationDetail() throws Exception {\n    TestDetails testDetails =\n        loadObject(\"fixtures/instances/sample-foreach-details.json\", TestDetails.class);\n    testDetails.test1.resetIterationDetail(\n        8, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED);\n    assertEquals(\n        Collections.singletonList(new ForeachDetails.Interval(8L, 8L)),\n        testDetails.test1.getPendingInfo().get(WorkflowInstance.Status.CREATED));\n    testDetails.test1.resetIterationDetail(\n        9, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED);\n    assertEquals(\n        Collections.singletonList(new ForeachDetails.Interval(11L, 15L)),\n        testDetails.test1.getInfo().get(WorkflowInstance.Status.FAILED));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/ForeachDetailsTest.java", "function_name": "testResetIterationDetail", "index": 491, "label": 0}
{"input": "@Override\n  @SuppressWarnings(\"deprecation\")\n  public void checkMemberAccess(Class<?> clazz, int which) {\n    if (accs.get() != null) {\n      super.checkMemberAccess(clazz, which);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkMemberAccess", "index": 492, "label": 0}
{"input": "@Override\n  public GeneratorMemberNode visitObjectMethod(ObjectMethodContext ctx) {\n    checkNotInsideForGenerator(ctx, \"forGeneratorCannotGenerateMethods\");\n    var member = doVisitObjectMethod(ctx);\n    return GeneratorPropertyNodeGen.create(member);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "visitObjectMethod", "index": 493, "label": 0}
{"input": "@Test\n  public void testCallDateIntToTs() {\n    SelType res =\n        SelUtilFunc.INSTANCE.call(\"dateIntToTs\", new SelType[] {SelString.of(\"20190101\")});\n    assertEquals(\"LONG: 1546300800000\", res.type() + \": \" + res.toString());\n    res = SelUtilFunc.INSTANCE.call(\"dateIntToTs\", new SelType[] {SelLong.of(\"20190101\")});\n    assertEquals(\"LONG: 1546300800000\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallDateIntToTs", "index": 494, "label": 0}
{"input": "private TerminateThenRunInstanceJobEvent createTerminateInstanceJobEvent(\n      InstanceRunUuid toTerminate, WorkflowInstance instance) {\n    TerminateThenRunInstanceJobEvent jobEvent =\n        TerminateThenRunInstanceJobEvent.init(\n            instance.getWorkflowId(),\n            Actions.WorkflowInstanceAction.STOP,\n            RUN_STRATEGY_USER,\n            \"Stopped due to LAST_ONLY run strategy to start a new instance: \"\n                + instance.getIdentity());\n    if (toTerminate != null) {\n      jobEvent.addOneRun(toTerminate);\n    }\n    jobEvent.addRunAfter(\n        instance.getWorkflowInstanceId(), instance.getWorkflowRunId(), instance.getWorkflowUuid());\n    return jobEvent;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "createTerminateInstanceJobEvent", "index": 495, "label": 0}
{"input": "@GetMapping(\"/execute/{planTemplateId}\")\n\tpublic ResponseEntity<Map<String, Object>> executePlanByTemplateIdGet(\n\t\t\t@PathVariable(\"planTemplateId\") String planTemplateId,\n\t\t\t@RequestParam(required = false, name = \"allParams\") Map<String, String> allParams) {\n\t\tif (planTemplateId == null || planTemplateId.trim().isEmpty()) {\n\t\t\treturn ResponseEntity.badRequest().body(Map.of(\"error\", \"Plan template ID cannot be empty\"));\n\t\t}\n\n\t\tlogger.info(\"Execute plan template, ID: {}, parameters: {}\", planTemplateId, allParams);\n\t\tString rawParam = allParams != null ? allParams.get(\"rawParam\") : null;\n\t\t\n\t\treturn executePlanByTemplateIdInternal(planTemplateId, rawParam);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/controller/PlanTemplateController.java", "function_name": "executePlanByTemplateIdGet", "index": 496, "label": 0}
{"input": "@Test\n  public void shouldNotCompressTaskDataIfCompressedPayloadIsLargerThanUncompressed()\n      throws JsonProcessingException {\n    JsonConverter jsonConverter = jsonConverter(true, \"gzip\");\n    Task task = new Task();\n    task.setTaskId(\"testTaskId\");\n    task.setInputData(Collections.singletonMap(\"k1\", \"v1\"));\n    task.setOutputData(Collections.singletonMap(\"k2\", \"v2\"));\n    String json = jsonConverter.toJson(task);\n\n    JsonNode root = objectMapper.readTree(json);\n    assertEquals(\"{\\\"k1\\\":\\\"v1\\\"}\", root.get(\"inputData\").toString());\n    assertEquals(\"{\\\"k2\\\":\\\"v2\\\"}\", root.get(\"outputData\").toString());\n\n    Task convertedTask = jsonConverter.fromJson(json, Task.class);\n    assertEquals(task, convertedTask);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/JsonConverterTest.java", "function_name": "shouldNotCompressTaskDataIfCompressedPayloadIsLargerThanUncompressed", "index": 497, "label": 0}
{"input": "public SubMessage1 getMessage1() {\n                if (message1Builder_ == null) {\n                    return message1_ == null ? SubMessage1.getDefaultInstance() : message1_;\n                } else {\n                    return message1Builder_.getMessage();\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage1", "index": 498, "label": 0}
{"input": "private void processStepInstanceUpdateJobEvent(StepInstanceUpdateJobEvent jobEvent) {\n    if (jobEvent.hasTerminal()) {\n      \n      tagPermitManager.releaseTagPermits(jobEvent.getStepUuid());\n      actionDao.cleanUp(jobEvent); \n      \n      instanceStepConcurrencyHandler.unregisterStep(\n          jobEvent.getCorrelationId(), jobEvent.getStepUuid());\n    }\n\n    StepInstanceStatusChangeEvent changeEvent = jobEvent.toMaestroEvent(clusterName);\n    eventClient.send(changeEvent);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/PublishJobEventProcessor.java", "function_name": "processStepInstanceUpdateJobEvent", "index": 499, "label": 0}
{"input": "private String listDefinedStrings(int offset, int limit, String filter) {\n        Program program = getCurrentProgram();\n        if (program == null) return \"No program loaded\";\n\n        List<String> lines = new ArrayList<>();\n        DataIterator dataIt = program.getListing().getDefinedData(true);\n        \n        while (dataIt.hasNext()) {\n            Data data = dataIt.next();\n            \n            \n            if (data != null && isStringData(data)) {\n                String value = data.getValue() != null ? data.getValue().toString() : \"\";\n                \n                \n                if (filter == null || value.toLowerCase().contains(filter.toLowerCase())) {\n                    \n                    String escapedValue = escapeString(value);\n                    lines.add(String.format(\"%s: \\\"%s\\\"\", data.getAddress(), escapedValue));\n                }\n            }\n        }\n        \n        return paginateList(lines, offset, limit);\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "d770d44e8ae2cf5f485a984d4a7c46737d5e058c", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "listDefinedStrings", "index": 500, "label": 0}
{"input": "private static long parseDuration(String duration) {\n    Matcher m = SCALA_DURATION_REGEX.matcher(duration.toLowerCase(Locale.ROOT));\n    long timeout = 0;\n    while (m.find()) {\n      for (TimeUnit unit : TIME_UNITS) {\n        long t = Checks.toNumeric(m.group(unit.name())).orElse(0L);\n        timeout += unit.toMillis(t);\n      }\n    }\n    return timeout;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/DurationParser.java", "function_name": "parseDuration", "index": 501, "label": 0}
{"input": "public static String getStackTrace(Throwable throwable, long maxLines) {\n    StringWriter writer = new StringWriter();\n    PrintWriter pw = new PrintWriter(writer, true);\n    throwable.printStackTrace(pw);\n    String[] lines = writer.toString().split(NEWLINE);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < Math.min(lines.length, maxLines); i++) {\n      if (i > 0) {\n        sb.append(NEWLINE);\n      }\n      sb.append(lines[i]);\n    }\n    return sb.toString();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/ExceptionHelper.java", "function_name": "getStackTrace", "index": 502, "label": 0}
{"input": "protected <T> T withRetryableQuery(\n      String stmt, StatementPreparer preparer, ResultProcessor<T> processor) {\n    return withRetryableStatement(\n        stmt,\n        statement -> {\n          preparer.prepare(statement);\n          try (ResultSet result = statement.executeQuery()) {\n            return processor.process(result);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "withRetryableQuery", "index": 503, "label": 0}
{"input": "@Test\n  public void testAssignOp() {\n    SelString obj = SelString.of(\"foo\");\n    SelString res = obj.assignOps(SelOp.ASSIGN, SelString.of(\"bar\"));\n    assertEquals(\"bar\", res.toString());\n    res = obj.assignOps(SelOp.ADD_ASSIGN, SelString.of(\"baz\"));\n    assertEquals(\"barbaz\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testAssignOp", "index": 504, "label": 0}
{"input": "@Test(expected = AccessControlException.class)\n  public void testNoAccessToSetClassLoader() {\n    Thread.currentThread().setContextClassLoader(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessToSetClassLoader", "index": 505, "label": 0}
{"input": "@Log(title = \"知识库\", businessType = BusinessType.INSERT)\n  @PostMapping(\"/save\")\n  public R<Void> save(@Validated(AddGroup.class) @RequestBody KnowledgeInfoBo bo) {\n    knowledgeInfoService.saveOne(bo);\n    return R.ok();\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "save", "index": 506, "label": 0}
{"input": "public Map<String, StepInstance.Status> getAllLatestStepStatusFromRuns(\n      String workflowId, long workflowInstanceId) {\n    Map<String, StepInstance.Status> stepStatus = new HashMap<>();\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_ALL_LATEST_ATTEMPT_STEP_STATUS_QUERY,\n                stmt -> {\n                  stmt.setString(1, workflowId);\n                  stmt.setLong(2, workflowInstanceId);\n                },\n                result -> {\n                  while (result.next()) {\n                    stepStatus.put(\n                        result.getString(ID_COLUMN),\n                        StepInstance.Status.create(result.getString(STATUS_COLUMN)));\n                  }\n                  return stepStatus;\n                }),\n        \"getAllLatestStepStatusFromAncestors\",\n        \"Failed to get the step ids to latest status mapping from workflow instance [{}][{}]\",\n        workflowId,\n        workflowInstanceId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getAllLatestStepStatusFromRuns", "index": 507, "label": 0}
{"input": "public MaestroResourceConflictException(String template, Object... args) {\n    super(Code.CONFLICT, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroResourceConflictException.java", "function_name": "MaestroResourceConflictException", "index": 508, "label": 0}
{"input": "static int capacity(int expectedSize) {\n        if (expectedSize < 3) {\n            return expectedSize + 1;\n        }\n        if (expectedSize < IntUtils.MAX_POWER_OF_TWO) {\n            \n            \n            \n            return (int) ((float) expectedSize / 0.75F + 1.0F);\n        }\n        return Integer.MAX_VALUE;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/MapUtils.java", "function_name": "capacity", "index": 509, "label": 0}
{"input": "@Override\n\tprotected boolean think() {\n\t\tcollectAndSetEnvDataForTools();\n\n\t\tAgentExecutionRecord planExecutionRecord = planExecutionRecorder.getCurrentAgentExecutionRecord(getPlanId());\n\t\tthinkActRecord = new ThinkActRecord(planExecutionRecord.getId());\n\t\tthinkActRecord.setActStartTime(LocalDateTime.now());\n\t\tplanExecutionRecorder.recordThinkActExecution(getPlanId(), planExecutionRecord.getId(), thinkActRecord);\n\n\t\ttry {\n\t\t\treturn executeWithRetry(3);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error(String.format(\"🚨 Oops! The %s's thinking process hit a snag: %s\", getName(), e.getMessage()), e);\n\t\t\tlog.info(\"Exception occurred\", e);\n\t\t\tthinkActRecord.recordError(e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cdd9ad0e73094d325b5203f94a925abae841c5e3", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/DynamicAgent.java", "function_name": "think", "index": 510, "label": 0}
{"input": "@Override\n    public String getContent(InputStream inputStream) {\n        \n        try (InputStream bufferedStream = new BufferedInputStream(inputStream, DEFAULT_BUFFER_SIZE)) {\n            ApacheTikaDocumentParser apacheTikaDocumentParser = new ApacheTikaDocumentParser();\n            Document document = apacheTikaDocumentParser.parse(bufferedStream);\n            return document.text();\n        } catch (IOException e) {\n            String errorMsg = \"Excel文件流读取失败\";\n            throw new UtilException(errorMsg, e);\n        } catch (RuntimeException e) {\n            String errorMsg = \"Excel内容解析异常\";\n            throw new UtilException(errorMsg, e);\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "7b3b727c0e6cd9a754169f305403b8db4baf0448", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/chain/loader/ExcelFileLoader.java", "function_name": "getContent", "index": 511, "label": 0}
{"input": "@Override\n    protected void setContentCellStyle(CellWriteHandlerContext context) {\n        if (stopProcessing(context) || CollectionUtils.isEmpty(contentWriteCellStyleList)) {\n            return;\n        }\n        WriteCellData<?> cellData = context.getFirstCellData();\n        if (context.getRelativeRowIndex() == null || context.getRelativeRowIndex() <= 0) {\n            WriteCellStyle.merge(contentWriteCellStyleList.get(0), cellData.getOrCreateStyle());\n        } else {\n            WriteCellStyle.merge(\n                    contentWriteCellStyleList.get(context.getRelativeRowIndex() % contentWriteCellStyleList.size()),\n                    cellData.getOrCreateStyle());\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/style/HorizontalCellStyleStrategy.java", "function_name": "setContentCellStyle", "index": 512, "label": 0}
{"input": "@Test\n  public void testStringParameter() {\n    StringParameter param =\n        StringParameter.builder()\n            .name(\"stringParam\")\n            .expression(\"return 'abc';\")\n            .evaluatedResult(\"abc\")\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asStringParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testStringParameter", "index": 513, "label": 0}
{"input": "@Test\n  public void isValidName() {\n    Set<ConstraintViolation<TestName>> violations =\n        validator.validate(new TestName(\"123__foo_.-bar1@nflx:com/ _.,-_\"));\n    assertEquals(0, violations.size());\n    violations = validator.validate(new TestName(\"__foo_.-bar 1_.-_ ,\"));\n    assertEquals(0, violations.size());\n    violations = validator.validate(new TestName(\"foo_.-bar1__.-_:/@.com \"));\n    assertEquals(0, violations.size());\n\n    String[] validIds =\n        new String[] {\n          \"-foo\", \".foo\", \"$foo\", \"foo$bar\", \"foo{}\", \"foo()\", \" foo\", \"__foo_.-bar 1_.-_ ,\"0, \"__foo_.-bar 1_.-_ ,\"1, \"__foo_.-bar 1_.-_ ,\"2,\n          \"__foo_.-bar 1_.-_ ,\"3, \"__foo_.-bar 1_.-_ ,\"4, \"__foo_.-bar 1_.-_ ,\"5, \"__foo_.-bar 1_.-_ ,\"6, \"__foo_.-bar 1_.-_ ,\"7, \"__foo_.-bar 1_.-_ ,\"8, \"__foo_.-bar 1_.-_ ,\"9, \"__foo_.-bar 1_.-_ ,\"6\n        };\n    for (String validId : validIds) {\n      violations.addAll(validator.validate(new TestName(validId)));\n    }\n    assertEquals(0, violations.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/MaestroNameConstraintTest.java", "function_name": "isValidName", "index": 514, "label": 0}
{"input": "@Test\n    public void numberforamt5() throws Exception {\n        String fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        EasyExcel.write(fileName, DemoData.class).sheet(\"模板\").doWrite(() -> {\n            \n            return data3();\n        });\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/Lock2Test.java", "function_name": "numberforamt5", "index": 515, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidBinaryOp() {\n    SelString.of(\"foo\").binaryOps(SelOp.MUL, SelString.of(\"bar\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidBinaryOp", "index": 516, "label": 0}
{"input": "@Test\n  public void testTrySaveGroupWithShutdown() {\n    context.shutdown();\n    AssertHelper.assertThrows(\n        \"should throw during shutdown\",\n        MaestroRetryableError.class,\n        \"ExecutionContext is shutdown and cannot save a group and please retry.\",\n        () -> context.trySaveGroup(group));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testTrySaveGroupWithShutdown", "index": 517, "label": 0}
{"input": "private static boolean isPunctuationOrSpacing(int category) {\n    return switch (category) {\n      \n      case Character.CONNECTOR_PUNCTUATION, \n          Character.DASH_PUNCTUATION, \n          Character.START_PUNCTUATION, \n          Character.END_PUNCTUATION, \n          Character.INITIAL_QUOTE_PUNCTUATION, \n          Character.FINAL_QUOTE_PUNCTUATION, \n          Character.OTHER_PUNCTUATION, \n          \n          Character.SPACE_SEPARATOR, \n          Character.LINE_SEPARATOR, \n          Character.PARAGRAPH_SEPARATOR -> \n          true;\n      default -> false;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/CodeGeneratorUtils.java", "function_name": "isPunctuationOrSpacing", "index": 518, "label": 0}
{"input": "@Test\n    public void read3() throws Exception {\n        HSSFWorkbook hwb = new HSSFWorkbook(\n            new FileInputStream(\"src/test/resources/poi/last_row_number_xssf_date_test.xls\"));\n        HSSFSheet sheet = hwb.getSheetAt(0);\n        HSSFRow row = null;\n        HSSFCell cell = null;\n        for (int i = sheet.getFirstRowNum(); i <= sheet.getPhysicalNumberOfRows(); i++) {\n            row = sheet.getRow(i);\n            if(row!=null){\n                log.info(\"r:{}\",row.getRowNum());\n\n            }\n        }\n\n        log.info(\"end\");\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/WriteLargeTest.java", "function_name": "read3", "index": 519, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase5() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(), Collections.singletonList(\"job.5\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(1, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.5\", \"job.6\", \"job.7\"), paths.get(0));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase5", "index": 520, "label": 0}
{"input": "@Test\n  public void testNonRetryableError() {\n    when(workflowDao.getRunStrategy(workflowId)).thenThrow(new MaestroNotFoundException(\"test\"));\n    processor.process(() -> jobEvent); \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StartWorkflowJobProcessorTest.java", "function_name": "testNonRetryableError", "index": 521, "label": 0}
{"input": "public static <T, K, U> Collector<T, ?, Map<K, U>> toListMap(\n      Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper) {\n    return Collectors.toMap(\n        keyMapper,\n        valueMapper,\n        (u, v) -> {\n          throw new IllegalArgumentException(\n              String.format(\"There is a duplicate key with values [%s] and [%s]\", u, v));\n        },\n        LinkedHashMap::new);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/MapHelper.java", "function_name": "toListMap", "index": 522, "label": 0}
{"input": "@Test\n  public void testInsertGroup() {\n    AssertHelper.assertThrows(\n        \"should throw and retry\",\n        MaestroRetryableError.class,\n        \"insertGroup for group [10] is failed (res=[0])\",\n        () -> dao.insertGroup(group));\n    FlowGroup claimed = dao.claimExpiredGroup(\"address2\", -100000);\n    assertEquals(10, claimed.groupId());\n    assertEquals(2, claimed.generation());\n    assertEquals(\"address2\", claimed.address());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/dao/MaestroFlowDaoTest.java", "function_name": "testInsertGroup", "index": 523, "label": 0}
{"input": "@Test\n  public void testConstructor() {\n    Timeline timeline =\n        new Timeline(\n            Arrays.asList(\n                TimelineLogEvent.info(\"test\"),\n                TimelineLogEvent.info(\"test\"),\n                TimelineLogEvent.info(\"test\")));\n    assertEquals(1, timeline.getTimelineEvents().size());\n    assertTrue(timeline.getTimelineEvents().get(0).isIdentical(TimelineLogEvent.info(\"test\")));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/timeline/TimelineTest.java", "function_name": "testConstructor", "index": 524, "label": 0}
{"input": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public int updateUser(SysUserBo user) {\n        \n        insertUserRole(user, true);\n        \n        insertUserPost(user, true);\n        SysUser sysUser = MapstructUtils.convert(user, SysUser.class);\n        \n        int flag = baseMapper.updateById(sysUser);\n        if (flag < 1) {\n            throw new ServiceException(\"修改用户\" + user.getUserName() + \"信息失败\");\n        }\n        return flag;\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "4e2ec2dc82a79b96a000015482d73a52c2fb6bb1", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysUserServiceImpl.java", "function_name": "updateUser", "index": 525, "label": 0}
{"input": "private static SelString varArgsJoin(SelType[] args) {\n    if (args.length > 0) {\n      String arg0 = ((SelString) args[0]).val;\n      if (args.length == 2 && args[1] instanceof SelArray) {\n        return SelString.of(String.join(arg0, (String[]) args[1].unbox()));\n      } else {\n        CharSequence[] varargs = new CharSequence[args.length - 1];\n        for (int i = 0; i < varargs.length; ++i) {\n          varargs[i] = ((SelString) args[i + 1]).val;\n        }\n        return SelString.of(String.join(arg0, varargs));\n      }\n    }\n    throw new IllegalArgumentException(\"Invalid empty input args for String.format method\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelString.java", "function_name": "varArgsJoin", "index": 526, "label": 0}
{"input": "@Test\n  public void testTranslateForRestartFromSpecificWithCompleteBranch() {\n    instance.getRuntimeWorkflow().getSteps().get(2).getTransition().getSuccessors().remove(\"job.2\");\n    instance\n        .getAggregatedInfo()\n        .getStepAggregatedViews()\n        .put(\"job.2\", StepAggregatedView.builder().status(StepInstance.Status.STOPPED).build());\n    instance.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_SPECIFIC);\n    instance\n        .getRunConfig()\n        .setRestartConfig(\n            RestartConfig.builder()\n                .addRestartNode(\"sample-dag-test-3\", 1, \"job1\")\n                .restartPolicy(RunPolicy.RESTART_FROM_SPECIFIC)\n                .build());\n\n    Map<String, StepTransition> dag = translator.translate(instance);\n    Assert.assertEquals(\n        new HashSet<>(Arrays.asList(\"job1\", \"job.2\", \"job3\", \"job4\")), dag.keySet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/DagTranslatorTest.java", "function_name": "testTranslateForRestartFromSpecificWithCompleteBranch", "index": 527, "label": 0}
{"input": "@Test(expected = NumberFormatException.class)\n  public void testInvalidCallIntsBetween() {\n    SelUtilFunc.INSTANCE.call(\n        \"intsBetween\", new SelType[] {SelString.of(\"foo\"), SelLong.of(3), SelLong.of(1)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testInvalidCallIntsBetween", "index": 528, "label": 0}
{"input": "@Bean\n\tpublic ChatClient interactionAgent(ChatClient.Builder interactionChatClientBuilder) {\n\t\treturn interactionChatClientBuilder.defaultSystem(ResourceUtil.loadResourceAsString(interactionPrompt)).build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "63b82102b6cc53df0c79afb00ef14c4c89ca35a8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "interactionAgent", "index": 529, "label": 0}
{"input": "public static String buildSemanticConsistenPrompt(String nlReq, String sql) {\n\t\tMap<String, Object> params = new HashMap<>();\n\t\tparams.put(\"nl_req\", nlReq);\n\t\tparams.put(\"sql\", sql);\n\t\treturn PromptConstant.SEMANTIC_CONSISTENC_PROMPT_TEMPLATE.render(params);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/prompt/PromptHelper.java", "function_name": "buildSemanticConsistenPrompt", "index": 530, "label": 0}
{"input": "private void increaseRowIndex(Map<UniqueDataFlagKey, List<AnalysisCell>> templateAnalysisCache, int number,\n            int maxRowIndex) {\n        for (Map.Entry<UniqueDataFlagKey, List<AnalysisCell>> entry : templateAnalysisCache.entrySet()) {\n            UniqueDataFlagKey uniqueDataFlagKey = entry.getKey();\n            if (!Objects.equals(currentUniqueDataFlag.getSheetNo(), uniqueDataFlagKey.getSheetNo()) || !Objects.equals(\n                    currentUniqueDataFlag.getSheetName(), uniqueDataFlagKey.getSheetName())) {\n                continue;\n            }\n            for (AnalysisCell analysisCell : entry.getValue()) {\n                if (analysisCell.getRowIndex() > maxRowIndex) {\n                    analysisCell.setRowIndex(analysisCell.getRowIndex() + number);\n                }\n            }\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/executor/ExcelWriteFillExecutor.java", "function_name": "increaseRowIndex", "index": 531, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeTitusNotebookArtifacts() throws Exception {\n    ArtifactMap expected =\n        loadObject(\"fixtures/artifact/sample-step-runtime-artifacts.json\", ArtifactMap.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    ArtifactMap actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), ArtifactMap.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(expected, actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/artifact/StepRuntimeArtifactTest.java", "function_name": "testRoundTripSerdeTitusNotebookArtifacts", "index": 532, "label": 0}
{"input": "@Test\n  public void testParseAttribute() {\n    Parameter param =\n        paramEvaluator.parseAttribute(\n            ParamDefinition.buildParamDefinition(\"bar\", \"foo\"),\n            Collections.singletonMap(\"foo\", LongParameter.builder().expression(\"1+2+3;\").build()),\n            \"test-workflow\",\n            true);\n    assertEquals(\"foo\", param.asString());\n\n    param =\n        paramEvaluator.parseAttribute(\n            ParamDefinition.buildParamDefinition(\"bar\", \"${foo}\"),\n            Collections.singletonMap(\"foo\", LongParameter.builder().expression(\"1+2+3;\").build()),\n            \"test-workflow\",\n            true);\n    assertEquals(\"foo\"1, param.asString());\n\n    assertNull(\n        paramEvaluator.parseAttribute(\n            ParamDefinition.buildParamDefinition(\"bar\", \"${foo}\"),\n            Collections.emptyMap(),\n            \"test-workflow\",\n            true));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseAttribute", "index": 533, "label": 0}
{"input": "private DecompileResults decompileFunction(Function func, Program program) {\n        \n        DecompInterface decomp = new DecompInterface();\n        decomp.openProgram(program);\n        decomp.setSimplificationStyle(\"decompile\"); \n        \n        \n        DecompileResults results = decomp.decompileFunction(func, 60, new ConsoleTaskMonitor());\n        \n        if (!results.decompileCompleted()) {\n            Msg.error(this, \"Could not decompile function: \" + results.getErrorMessage());\n            return null;\n        }\n        \n        return results;\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "decompileFunction", "index": 534, "label": 0}
{"input": "@Test\n  public void testRestart() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setWorkflowId(\"test-workflow\");\n    instance.setWorkflowVersionId(1);\n    instance.setRuntimeWorkflow(mock(Workflow.class));\n    instance.setRuntimeDag(Collections.singletonMap(\"step1\", new StepTransition()));\n    Map<String, Map<String, ParamDefinition>> stepRunParams =\n        Collections.singletonMap(\n            \"stepid\",\n            Collections.singletonMap(\"p1\", ParamDefinition.buildParamDefinition(\"p1\", \"d1\")));\n    instance.setStepRunParams(stepRunParams);\n    assertEquals(\"test-uuid\", runner.restart(instance));\n    verify(translator, times(1)).translate(instance);\n    verify(workflowExecutor, times(1))\n        .startWorkflow(any(), anyMap(), any(), any(), anyString(), anyMap());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowRunnerTest.java", "function_name": "testRestart", "index": 535, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallUnsupportedArguments() {\n    extension.call(\"getFromStep\", new SelType[] {SelString.of(\"foo\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallUnsupportedArguments", "index": 536, "label": 0}
{"input": "private ExpressionNode doVisitListLiteral(Expr expr, ArgumentList argList) {\n    var elementNodes = createCollectionArgumentNodes(argList);\n\n    if (elementNodes.first.length == 0) {\n      return new ConstantValueNode(VmList.EMPTY);\n    }\n\n    return elementNodes.second\n        ? new ConstantValueNode(\n            createSourceSection(expr), VmList.createFromConstantNodes(elementNodes.first))\n        : new ListLiteralNode(createSourceSection(expr), elementNodes.first);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitListLiteral", "index": 537, "label": 0}
{"input": "@Override\n  public void checkPropertiesAccess() {\n    if (accs.get() != null) {\n      super.checkPropertiesAccess();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkPropertiesAccess", "index": 538, "label": 0}
{"input": "@Test\n  public void testNoMatchSignalDependency() {\n    Long matched =\n        paramDao.matchSignalDependency(\n            new SignalMatchDto(\n                \"signal_a\",\n                List.of(\n                    new SignalMatchDto.ParamMatchDto(\n                        \"foo\", SignalParamValue.of(125), SignalOperator.GREATER_THAN))));\n    assertNull(matched);\n\n    matched =\n        paramDao.matchSignalDependency(\n            new SignalMatchDto(\n                \"signal_a\",\n                List.of(\n                    new SignalMatchDto.ParamMatchDto(\n                        \"foo\", SignalParamValue.of(125), SignalOperator.EQUALS_TO),\n                    new SignalMatchDto.ParamMatchDto(\n                        \"bar\", SignalParamValue.of(125), SignalOperator.EQUALS_TO))));\n    assertNull(matched);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalParamDaoTest.java", "function_name": "testNoMatchSignalDependency", "index": 539, "label": 0}
{"input": "private Integer getBrowserTimeout() {\n\t\tInteger timeout = getManusProperties().getBrowserRequestTimeout();\n\t\treturn timeout != null ? timeout : 30; \n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/BrowserUseTool.java", "function_name": "getBrowserTimeout", "index": 540, "label": 0}
{"input": "public static void transformBorders(HSSFCell cell, Cell pdfCell) {\n        HSSFCellStyle cellStyle = cell.getCellStyle();\n        pdfCell.setBorderBottom(getBorder(cellStyle.getBorderBottom(), cellStyle.getBottomBorderColor(), cell));\n        pdfCell.setBorderLeft(getBorder(cellStyle.getBorderLeft(), cellStyle.getLeftBorderColor(), cell));\n        pdfCell.setBorderRight(getBorder(cellStyle.getBorderRight(), cellStyle.getRightBorderColor(), cell));\n        pdfCell.setBorderTop(getBorder(cellStyle.getBorderTop(), cellStyle.getTopBorderColor(), cell));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v03/XlsConverter.java", "function_name": "transformBorders", "index": 541, "label": 0}
{"input": "protected String loadJson(String fileName) throws IOException {\n    try (InputStream is =\n        Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName)) {\n      if (is == null) {\n        return null;\n      }\n      try (BufferedReader reader =\n          new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n        return reader.lines().collect(Collectors.joining(System.lineSeparator()));\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/testFixtures/java/com/netflix/maestro/MaestroBaseTest.java", "function_name": "loadJson", "index": 542, "label": 0}
{"input": "private SignalTriggerExecution buildExecution(\n      SignalTriggerMatch match, String[] keys, Long[] values, SignalTrigger trigger) {\n    var execution = new SignalTriggerExecution();\n    execution.setWorkflowId(match.getWorkflowId());\n    execution.setTriggerUuid(match.getTriggerUuid());\n    var nameIdMap = new LinkedHashMap<String, Long>();\n    for (int i = 0; i < keys.length; ++i) {\n      nameIdMap.put(keys[i], values[i]);\n    }\n    execution.setSignalIds(nameIdMap);\n    execution.setCondition(trigger.getCondition());\n    execution.setDedupExpr(trigger.getDedupExpr());\n    execution.setParams(trigger.getParams());\n    return execution;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "buildExecution", "index": 543, "label": 0}
{"input": "private void wakeUpUnderlyingActors(WorkflowSummary summary, ForeachArtifact artifact) {\n    if (artifact.getForeachOverview().getDetails() != null) {\n      var instanceIds =\n          artifact.getForeachOverview().getDetails().flatten(e -> !e.isTerminal()).values().stream()\n              .flatMap(Collection::stream)\n              .collect(Collectors.toSet());\n      var msg =\n          MessageDto.createMessageForWakeUp(\n              artifact.getForeachWorkflowId(), summary.getGroupInfo(), instanceIds);\n      queueSystem.notify(msg);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "wakeUpUnderlyingActors", "index": 544, "label": 0}
{"input": "public static String getString(int resourceId) {\n        return ApplicationLoader.getAppCtx().getResources().getString(resourceId);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocalController.java", "function_name": "getString", "index": 545, "label": 0}
{"input": "protected char ReadByte() throws java.io.IOException {\n    if (++nextCharInd >= maxNextCharInd) FillBuff();\n\n    return nextCharBuf[nextCharInd];\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "ReadByte", "index": 546, "label": 0}
{"input": "@Test\n  public void testCreateCausedByMaestroInternalError() {\n    Exception exception = new MaestroInternalError(\"test\");\n    Details details = Details.create(exception, true, \"test-msg\");\n    assertEquals(MaestroRuntimeException.Code.INTERNAL_ERROR, details.getStatus());\n    assertEquals(\"test-msg\", details.getMessage());\n    assertEquals(1, details.getErrors().size());\n    assertEquals(Collections.singletonList(\"MaestroInternalError: test\"), details.getErrors());\n    assertTrue(details.isRetryable());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/error/DetailsTest.java", "function_name": "testCreateCausedByMaestroInternalError", "index": 547, "label": 0}
{"input": "@Test\n  public void createIfMissing() {\n    state.resetWithInput(params, null);\n    state.createIfMissing(\"foo\", SelTypes.STRING);\n    SelType res = state.get(\"foo\");\n    assertEquals(\"STRING: bar\", res.type() + \": \" + res);\n    state.createIfMissing(\"fuu\", SelTypes.STRING);\n    res = state.get(\"fuu\");\n    assertEquals(\"STRING: null\", res.type() + \": \" + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "createIfMissing", "index": 548, "label": 0}
{"input": "@Bean(name = JsonProcessorConstants.REMOVE_TOOL_NAME)\n\t@Description(\"Use Gson to remove JsonObject property field .\")\n\t@ConditionalOnMissingBean\n\tpublic JsonProcessorRemoveService jsonRemovePropertyField(JsonParseTool jsonParseTool) {\n\t\treturn new JsonProcessorRemoveService(jsonParseTool);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "0fe2aa6ca3186a580f39e38ee7a97ab74ba0664f", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-jsonprocessor/src/main/java/com/alibaba/cloud/ai/toolcalling/jsonprocessor/JsonProcessorAutoConfiguration.java", "function_name": "jsonRemovePropertyField", "index": 549, "label": 0}
{"input": "public static com.google.protobuf.Descriptors.FileDescriptor\n    getDescriptor() {\n        return descriptor;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getDescriptor", "index": 550, "label": 0}
{"input": "private @Nullable String getTrailingIndent(TempNode node) {\n    var token = node.token;\n    if (token == null || token.token != Token.STRING_PART) return null;\n    var text = token.text(lexer);\n    for (var i = 0; i < text.length(); i++) {\n      var ch = text.charAt(i);\n      if (ch != ' ' && ch != '\\t') return null;\n    }\n    return text;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2ffd201172a2416d00fbfba9de2ada7feb39ea65", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "getTrailingIndent", "index": 551, "label": 0}
{"input": "private List<Tag> toTags(Class<?> clazz, String... tags) {\n    Checks.checkTrue(\n        tags.length % 2 == 0,\n        () ->\n            String.format(\n                \"Invalid tags %s and they must be <key, value> pairs\", Arrays.toString(tags)));\n    Stream.Builder<Tag> builder = Stream.builder();\n    builder.add(Tag.of(\"class\", clazz.getSimpleName()));\n    for (int i = 0; i < tags.length; i += 2) {\n      String tag = Checks.notNull(tags[i], \"Tag name cannot be null or empty for class %s\", clazz);\n      String value = tags[i + 1];\n      builder.add(Tag.of(tag, value == null ? \"unknown\" : value));\n    }\n    return builder\n        .build()\n        .sorted(Comparator.comparing(Tag::key).thenComparing(Tag::value))\n        .collect(Collectors.toList());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/metrics/MaestroMetricRepo.java", "function_name": "toTags", "index": 552, "label": 0}
{"input": "private GenericHeaderTypeDataListener(Class<T> headerClass) {\n        this.headerClass = headerClass;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "f68e28241181105d7551523b5334b68a27ef610e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/GenericHeaderTypeDataListener.java", "function_name": "GenericHeaderTypeDataListener", "index": 553, "label": 0}
{"input": "@Test\n  public void testRun() throws Exception {\n    assertEquals(0, i);\n    System.setSecurityManager(new SelSecurityManager());\n    t2.start();\n    t2.join();\n    assertEquals(10, i);\n    assertNull(ex);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelThreadTest.java", "function_name": "testRun", "index": 554, "label": 0}
{"input": "private long[] extractInstanceIdRange(List<WorkflowInstance> instances) {\n    if (instances == null || instances.isEmpty()) {\n      return new long[] {0L, 0L};\n    }\n\n    if (instances.size() == 1) {\n      long instanceId = instances.getFirst().getWorkflowInstanceId();\n      return new long[] {instanceId, instanceId};\n    }\n\n    \n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (WorkflowInstance instance : instances) {\n      long id = instance.getWorkflowInstanceId();\n      min = Math.min(min, id);\n      max = Math.max(max, id);\n    }\n\n    return new long[] {max, min}; \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9f6ef6ad453085e3c04ab55405fc7b256c5a9c9b", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowInstanceController.java", "function_name": "extractInstanceIdRange", "index": 555, "label": 0}
{"input": "public TextManager() {\n        this.langDirectory = new File(Main.getDataDirectory(), \"lang\");\n        this.overrideDirectory = new File(langDirectory, \"overrides\");\n        if (!this.langDirectory.exists()) {\n            this.langDirectory.mkdirs();\n        }\n        if (!this.overrideDirectory.exists()) {\n            this.overrideDirectory.mkdirs();\n        }\n        this.fallbackConfig = loadBuiltInFallback();\n        initializeBasic();\n        Main.getReloadManager().register(this);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "00640fe4d10cb62782952a75d392f5ca0b48d193", "file_path": "src/main/java/com/ghostchu/peerbanhelper/text/TextManager.java", "function_name": "TextManager", "index": 556, "label": 0}
{"input": "private SelString escapeJava(SelType[] args) {\n    String s = null;\n    if (args.length == 0) {\n      s = this.val;\n    } else if (args.length == 1 && args[0].type() == SelTypes.STRING) {\n      s = args[0].toString();\n    } else {\n      throw new IllegalArgumentException(\"Invalid input args for String.escape method\");\n    }\n    \n    s =\n        s.replace(\"\\\\\", \"\\\\\\\\\")\n            .replace(\"\\t\", \"\\\\t\")\n            .replace(\"\\b\", \"\\\\b\")\n            .replace(\"\\n\", \"\\\\n\")\n            .replace(\"\\r\", \"\\\\\"0)\n            .replace(\"\\\\\"1, \"\\\\\"2)\n            \n            .replace(\"\\\\\"5, \"\\\\\"6);\n    return SelString.of(s);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelString.java", "function_name": "escapeJava", "index": 557, "label": 0}
{"input": "public NewExpr(@Nullable Type type, ObjectBody body, Span span) {\n      super(span, Arrays.asList(type, body));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "NewExpr", "index": 558, "label": 0}
{"input": "static StringParamDefinition buildParamDefinition(String key, String value) {\n    return StringParamDefinition.builder().name(key).value(value).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "buildParamDefinition", "index": 559, "label": 0}
{"input": "@Override\n            public Builder addRepeatedField(\n                    com.google.protobuf.Descriptors.FieldDescriptor field,\n                    Object value) {\n                return super.addRepeatedField(field, value);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "addRepeatedField", "index": 560, "label": 0}
{"input": "private void runFlow(Action.FlowLaunch action) {\n    Flow flow = action.flow();\n    if (containsChild(flow.getReference())) {\n      LOG.warn(\"Unexpected and the flow [{}] already exists, ignoring it\", flow.getReference());\n      return;\n    }\n    var actor = new FlowActor(flow, this, getContext());\n    runActionFor(actor, action.resume() ? Action.FLOW_RESUME : Action.FLOW_START);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/GroupActor.java", "function_name": "runFlow", "index": 561, "label": 0}
{"input": "public MaestroParamExtensionRepo(\n      MaestroStepInstanceDao stepInstanceDao, String env, ObjectMapper objectMapper) {\n    this.stepInstanceDao = stepInstanceDao;\n    this.objectMapper = objectMapper;\n    this.env = env;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtensionRepo.java", "function_name": "MaestroParamExtensionRepo", "index": 562, "label": 0}
{"input": "@Test\n  public void testMissingJobIdArtifact() {\n    outputDataManager.validateAndMergeOutputParams(runtimeSummary);\n    assertTrue(runtimeSummary.getParams().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "testMissingJobIdArtifact", "index": 563, "label": 0}
{"input": "@Test\n  public void testRunAndExtendOwnership() throws InterruptedException {\n    when(messageQueue.take())\n        .thenReturn(new MessageDto(System.currentTimeMillis() + 10000, \"msgId\", jobEvent, 123456L))\n        .thenThrow(new InterruptedException(\"test\"));\n    when(dispatcher.processJobEvent(any())).thenThrow(new RuntimeException(\"test\"));\n    queueWorker.run();\n    verify(dispatcher, times(1)).processJobEvent(any());\n    verify(queueDao, times(1)).extendOwnership(any(), anyLong());\n    verify(messageQueue, times(1)).drainTo(any(), anyInt());\n    verify(queueDao, times(1)).release(anyInt(), anyLong(), any());\n    verify(metrics, times(1))\n        .counter(\n            MetricConstants.QUEUE_WORKER_INTERNAL_ERROR,\n            MaestroQueueWorker.class,\n            MetricConstants.RETRYABLE_TAG,\n            \"true\",\n            MetricConstants.TYPE_TAG,\n            \"START_WORKFLOW\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/worker/MaestroQueueWorkerTest.java", "function_name": "testRunAndExtendOwnership", "index": 564, "label": 0}
{"input": "public static StepRuntimeState retrieveStepRuntimeState(\n      Map<String, Object> data, ObjectMapper objectMapper) {\n    Object runtimeSummary =\n        data.getOrDefault(Constants.STEP_RUNTIME_SUMMARY_FIELD, Collections.emptyMap());\n    if (runtimeSummary instanceof StepRuntimeSummary) {\n      return ((StepRuntimeSummary) runtimeSummary).getRuntimeState();\n    }\n    Object state = ((Map<String, Object>) runtimeSummary).getOrDefault(RUNTIME_STATE_FIELD, null);\n    if (state != null) {\n      return objectMapper.convertValue(state, StepRuntimeState.class);\n    }\n    return new StepRuntimeState();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "retrieveStepRuntimeState", "index": 565, "label": 0}
{"input": "private boolean jj_3R_31() {\n    if (jj_scan_token(DOT)) return true;\n    if (jj_scan_token(IDENTIFIER)) return true;\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_87()) jj_scanpos = xsp;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_31", "index": 566, "label": 0}
{"input": "public static JSONObject getPhoneAddressList(String appId,List<String> phones){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxid\",phones);\r\n        return OkhttpUtil.postJSON(\"/contacts/getPhoneAddressList\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/ContactApi.java", "function_name": "getPhoneAddressList", "index": 567, "label": 0}
{"input": "private void setupOutputDataDao() {\n    when(outputDataDao.getOutputDataForExternalJob(titusTaskId, ExternalJobType.TITUS))\n        .thenReturn(Optional.of(outputData));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "setupOutputDataDao", "index": 568, "label": 0}
{"input": "public List<Expr> getArguments() {\n    assert children != null;\n    return (List<Expr>) children;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ArgumentList.java", "function_name": "getArguments", "index": 569, "label": 0}
{"input": "private List<TaskExecLog> taskExecLogsFromResult(ResultSet result) throws SQLException {\n    List<TaskExecLog> logs = new ArrayList<>();\n    while (result.next()) {\n      String id = result.getString(ID_COLUMN);\n      long createdTime = result.getLong(CREATED_TIME_COLUMN);\n      String log = result.getString(LOG_COLUMN);\n      TaskExecLog taskLog = new TaskExecLog();\n      taskLog.setTaskId(id);\n      taskLog.setCreatedTime(createdTime);\n      taskLog.setLog(log);\n      logs.add(taskLog);\n    }\n    return logs;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "taskExecLogsFromResult", "index": 570, "label": 0}
{"input": "@Test\n  public void testValidate() throws Exception {\n    Set<String> res = t1.validate(\"x.length;\", new HashSet<>());\n    assertEquals(\"[x]\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelThreadTest.java", "function_name": "testValidate", "index": 571, "label": 0}
{"input": "public static byte[] convertMarkdownToPdfBytes(String markdownContent) {\n\t\t\n\t\tString htmlContent = HtmlGenerationUtil.markdownToHtml(markdownContent);\n\t\t\n\t\treturn convertHtmlToPdfBytes(htmlContent);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FormatConversionUtil.java", "function_name": "convertMarkdownToPdfBytes", "index": 572, "label": 0}
{"input": "@GetMapping(\"/label\")\n    public ResponseVO<List<ContactLabelVO>> label() {\n        return ResponseVO.ok(contactService.queryContactLabel());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/ContactController.java", "function_name": "label", "index": 573, "label": 0}
{"input": "public final void ConditionalOrExpression() throws ParseException {\n    ConditionalAndExpression();\n    label_5:\n    while (true) {\n      switch (jj_nt.kind) {\n        case SC_OR:\n          {;\n            break;\n          }\n        default:\n          jj_la1[14] = jj_gen;\n          break label_5;\n      }\n      jj_consume_token(SC_OR);\n      ConditionalAndExpression();\n      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);\n      boolean jjtc001 = true;\n      jjtree.openNodeScope(jjtn001);\n      jjtn001.jjtSetFirstToken(getToken(1));\n      try {\n        jjtree.closeNodeScope(jjtn001, 2);\n        jjtc001 = false;\n        jjtn001.jjtSetLastToken(getToken(0));\n        jjtn001.value = SelOp.OR;\n      } finally {\n        if (jjtc001) {\n          jjtree.closeNodeScope(jjtn001, 2);\n          jjtn001.jjtSetLastToken(getToken(0));\n        }\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "ConditionalOrExpression", "index": 574, "label": 0}
{"input": "@Override\n  public List<KnowledgeInfoVo> queryList(KnowledgeInfoBo bo) {\n    LambdaQueryWrapper<KnowledgeInfo> lqw = buildQueryWrapper(bo);\n    return baseMapper.selectVoList(lqw);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "queryList", "index": 575, "label": 0}
{"input": "public ExpressionNode doVisitMultiLineStringPart(\n      StringPart spart, String commonIndent, boolean isStringStart, boolean isStringEnd) {\n    if (spart instanceof StringInterpolation si) {\n      return ToStringNodeGen.create(createSourceSection(si), visitExpr(si.getExpr()));\n    }\n    if (spart instanceof StringConstantParts sparts) {\n      return new ConstantValueNode(\n          createSourceSection(spart),\n          doVisitMultiLineStringParts(sparts.getParts(), commonIndent, isStringStart, isStringEnd));\n    }\n    throw PklBugException.unreachableCode();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitMultiLineStringPart", "index": 576, "label": 0}
{"input": "private Map<String, String> parseQueryParams(HttpExchange exchange) {\n        Map<String, String> result = new HashMap<>();\n        String query = exchange.getRequestURI().getQuery(); \n        if (query != null) {\n            String[] pairs = query.split(\"&\");\n            for (String p : pairs) {\n                String[] kv = p.split(\"=\");\n                if (kv.length == 2) {\n                    result.put(kv[0], kv[1]);\n                }\n            }\n        }\n        return result;\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "bc3579d4753ffdd37a6a3635727268908104387e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "parseQueryParams", "index": 577, "label": 0}
{"input": "private ResponseEntity<Object> buildDetailedResponse(\n      Exception e, List<String> errors, HttpStatus status, WebRequest request) {\n    return buildDetailedResponse(e, errors, status, EMPTY_HEADER, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "buildDetailedResponse", "index": 578, "label": 0}
{"input": "<T> T getPayload(String stmt, StatementPreparer preparer, Class<T> clazz) {\n    return withRetryableQuery(stmt, preparer, r -> payloadFromResult(r, clazz));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "getPayload", "index": 579, "label": 0}
{"input": "@Test\n  public void testPushSignalTriggerExecutionWithError() {\n    when(amazonSqs.sendMessage(any())).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Should throw the error\",\n        RuntimeException.class,\n        \"java.lang.RuntimeException: test\",\n        () -> signalTriggerProducer.push(signalTriggerExecution));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_SIGNAL_PUBLISH_FAILURE_METRIC,\n                SqsSignalQueueProducer.class,\n                \"type\",\n                \"SignalTriggerExecution\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsSignalQueueProducerTest.java", "function_name": "testPushSignalTriggerExecutionWithError", "index": 580, "label": 0}
{"input": "@Test\n  public void testCleanupOptionalEmptyNestedMapEmptyElement() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'map': {'type': 'MAP','value': {'nested': {'type': 'MAP','value': {'str': {'type': 'STRING', 'internal_mode': 'OPTIONAL'}}, 'internal_mode': 'OPTIONAL'}}, 'internal_mode': 'OPTIONAL'}}\");\n    Map<String, ParamDefinition> cleanedParams = ParamsMergeHelper.cleanupParams(allParams);\n    assertEquals(0, cleanedParams.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testCleanupOptionalEmptyNestedMapEmptyElement", "index": 581, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeForDeactivate() throws Exception {\n    WorkflowActionResponse response =\n        loadObject(\n            \"fixtures/api/sample-workflow-deactivate-response.json\", WorkflowActionResponse.class);\n    assertEquals(\n        response,\n        MAPPER.readValue(MAPPER.writeValueAsString(response), WorkflowActionResponse.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/api/WorkflowActionResponseTest.java", "function_name": "testRoundTripSerdeForDeactivate", "index": 582, "label": 0}
{"input": "@Override\n    public void afterPropertiesSet() {\n        String name = \"requestMappingHandlerMapping\";\n        RequestMappingHandlerMapping mapping = SpringUtils.getBean(name, RequestMappingHandlerMapping.class);\n\n        Map<RequestMappingInfo, HandlerMethod> handlerMethods = mapping.getHandlerMethods();\n\n        Pattern pattern = Pattern.compile(\"\\\\{(.*?)\\\\}\");\n\n        Set<String> handlerSet = handlerMethods.keySet().stream()\n                .flatMap(info -> info.getPatternsCondition().getPatterns().stream())\n                .collect(Collectors.toSet());\n\n        \n        handlerSet.stream().map(path -> ReUtil.replaceAll(path, pattern, \"*\"))\n                .forEach(item -> urls.add(item));\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "e1c997883f9cbdb6e986db986d6f787e62542196", "file_path": "ruoyi-common/ruoyi-common-security/src/main/java/org/ruoyi/common/security/handler/AllUrlHandler.java", "function_name": "afterPropertiesSet", "index": 583, "label": 0}
{"input": "public void setParams(Map<String, Parameter> input) {\n    this.params = Parameter.preprocessInstanceParams(input);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowInstance.java", "function_name": "setParams", "index": 584, "label": 0}
{"input": "public StringCodec(Collection<Compressor> compressors) {\n    Checks.checkTrue(\n        compressors != null && !compressors.isEmpty(), \"compressors cannot be null or empty\");\n    this.compressors =\n        Collections.unmodifiableMap(\n            compressors.stream()\n                .collect(Collectors.toMap(Compressor::getName, Function.identity())));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/compression/StringCodec.java", "function_name": "StringCodec", "index": 585, "label": 0}
{"input": "@Test\n  public void testDeserializationNumbers() throws Exception {\n    Numbers deserialized =\n        loadObject(\"fixtures/workflows/definition/sample-numbers.json\", Numbers.class);\n    Numbers expected = new Numbers();\n    expected.setNumber1(ParsableLong.of(1L));\n    expected.setNumber2(ParsableLong.of(0L));\n    expected.setNumber3(ParsableLong.of(\"4\"));\n\n    assertEquals(expected, deserialized);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/ParsableLongTest.java", "function_name": "testDeserializationNumbers", "index": 586, "label": 0}
{"input": "public CsvWriterBuilder escape(Character escape) {\n        if (escape != null) {\n            this.csvFormatBuilder.setEscape(escape);\n        }\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/CsvWriterBuilder.java", "function_name": "escape", "index": 587, "label": 0}
{"input": "@Test\n  public void testStepNotEnoughInfo() {\n    event.setEntityType(InstanceActionJobEvent.EntityType.STEP);\n    event.setStepAction(Actions.StepInstanceAction.STOP);\n    setStepInstanceDefinition(StepType.NOTEBOOK);\n    setStepInstanceRuntimeState(StepInstance.Status.PLATFORM_FAILED);\n    when(stepInstanceDao.getStepInstance(\n            workflowId, workflowInstanceId, workflowRunId, stepId, stepAttemptId))\n        .thenReturn(null);\n    Assert.assertTrue(processor.process(event).isEmpty());\n\n    Mockito.verify(stepInstanceDao, Mockito.times(1))\n        .getStepInstance(workflowId, workflowInstanceId, workflowRunId, stepId, stepAttemptId);\n    Mockito.verifyNoInteractions(flowOperation);\n    Mockito.verifyNoInteractions(instanceDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/processors/InstanceActionJobEventProcessorTest.java", "function_name": "testStepNotEnoughInfo", "index": 588, "label": 0}
{"input": "public boolean hasReachedTimeoutRetryLimit() {\n      return timeoutRetries >= timeoutRetryLimit || !retryable;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b8c79f76fddca76858f0e37fc5e02ddfb3829aed", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepInstance.java", "function_name": "hasReachedTimeoutRetryLimit", "index": 589, "label": 0}
{"input": "@Test\n    public void extraRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"extra.xlsx\";\n        \n        EasyExcel.read(fileName, DemoExtraData.class, new DemoExtraListener())\n                \n                .extraRead(CellExtraTypeEnum.COMMENT)\n                \n                .extraRead(CellExtraTypeEnum.HYPERLINK)\n                \n                .extraRead(CellExtraTypeEnum.MERGE).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "extraRead", "index": 590, "label": 0}
{"input": "@Test\n\tvoid testEmptyResponse() {\n\t\t\n\t\tChatCompletionOutput output = new ChatCompletionOutput(\"\", Collections.emptyList());\n\t\t\n\t\tTokenUsage usage = new TokenUsage(0, 0, 0);\n\t\tChatCompletion completion = new ChatCompletion(\"test-id\", output, usage);\n\n\t\twhen(dashScopeApi.chatCompletionEntity(any(), any())).thenReturn(ResponseEntity.ok(completion));\n\n\t\tMessage message = new UserMessage(\"Test message\");\n\t\tPrompt prompt = new Prompt(List.of(message));\n\t\tChatResponse response = chatModel.call(prompt);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getResults()).isEmpty();\n\t\t\n\t\tassertThat(response.getMetadata().getUsage()).isNotNull();\n\t\tDefaultUsage aiUsage = (DefaultUsage) response.getMetadata().getUsage();\n\t\tassertThat(aiUsage.getPromptTokens()).isZero();\n\t\tassertThat(aiUsage.getCompletionTokens()).isZero();\n\t\tassertThat(aiUsage.getTotalTokens()).isZero();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/test/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatModelTests.java", "function_name": "testEmptyResponse", "index": 591, "label": 0}
{"input": "private @Nullable FrameDescriptor.Builder createFrameDescriptorBuilder(ObjectBody body) {\n    if (body.getParameters().isEmpty()) return null;\n\n    var builder = FrameDescriptor.newBuilder(body.getParameters().size());\n    for (var param : body.getParameters()) {\n      org.pkl.core.runtime.Identifier identifier = null;\n      if (param instanceof TypedIdentifier typedIdentifier) {\n        identifier = toIdentifier(typedIdentifier.getIdentifier().getValue());\n      }\n      builder.addSlot(FrameSlotKind.Illegal, identifier, null);\n    }\n    return builder;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "createFrameDescriptorBuilder", "index": 592, "label": 0}
{"input": "@Test\n  public void testAddTimeline() {\n    WorkflowRuntimeSummary summary = new WorkflowRuntimeSummary();\n    TimelineEvent event = TimelineLogEvent.info(\"hello world\");\n    summary.addTimeline(event);\n    assertEquals(Collections.singletonList(event), summary.getTimeline().getTimelineEvents());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/WorkflowRuntimeSummaryTest.java", "function_name": "testAddTimeline", "index": 593, "label": 0}
{"input": "public TimelineLogEvent build() {\n      if (timestamp == null) {\n        timestamp = System.currentTimeMillis();\n      }\n      if (level == null) {\n        level = Level.INFO;\n      }\n      return new TimelineLogEvent(timestamp, level, message);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineLogEvent.java", "function_name": "build", "index": 594, "label": 0}
{"input": "@TruffleBoundary\n  public static long sha256Int(byte[] input) {\n    return hashInt(input, \"SHA-256\");\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d6fd7e0942f735a7fb28ef36dcc841d6d6454e5e", "file_path": "pkl-core/src/main/java/org/pkl/core/util/ByteArrayUtils.java", "function_name": "sha256Int", "index": 595, "label": 0}
{"input": "@Test\n  public void testTaskWakeUpWithQueuedTask() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n    when(future.cancel(false)).thenReturn(true);\n\n    Task task1 = flow.newTask(new TaskDef(\"task1\", \"noop\", null, null), false);\n    task1.setStatus(Task.Status.FAILED);\n    task1.setStartDelayInSeconds(3000);\n    flow.addFinishedTask(task1);\n    flowActor.runForAction(Action.FLOW_RESUME);\n    assertFalse(flowActor.containsChild(\"task1\"));\n\n    flowActor.runForAction(new Action.TaskWakeUp(\"task1\"));\n    verify(future, times(1)).cancel(false);\n    verifyActions(flowActor.getChild(\"task1\"), Action.TASK_START, Action.TASK_ACTIVATE);\n    assertTrue(flowActor.containsChild(\"task1\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testTaskWakeUpWithQueuedTask", "index": 596, "label": 0}
{"input": "@Test\n  public void testNextExecutionDateForCron() throws Exception {\n    TimeTrigger trigger =\n        loadObject(\"fixtures/time_triggers/sample-cron-time-trigger.json\", TimeTrigger.class);\n    Optional<Date> actual =\n        TriggerHelper.nextExecutionDate(trigger, Date.from(Instant.EPOCH), \"test-id\");\n    assertEquals(Optional.of(Date.from(Instant.ofEpochSecond(72000))), actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/TriggerHelperTest.java", "function_name": "testNextExecutionDateForCron", "index": 597, "label": 0}
{"input": "@Test\n  public void testPrepareRetry() {\n    Task prepare = flow.newTask(new TaskDef(\"prepare\", \"noop\", null, null), true);\n    flow.setPrepareTask(prepare);\n    assertNull(flow.getPrepareTask().getStartTime());\n\n    AssertHelper.assertThrows(\n        \"should throw and retry\",\n        MaestroRetryableError.class,\n        \"prepare task is not done yet\",\n        () -> context.prepare(flow));\n    assertNotNull(flow.getPrepareTask().getStartTime());\n    verify(flowTask, times(1)).execute(flow, prepare);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testPrepareRetry", "index": 598, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceTimeline() {\n    Timeline timeline = stepDao.getStepInstanceTimeline(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    assertTrue(timeline.isEmpty());\n    Timeline latest = stepDao.getStepInstanceTimeline(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"latest\");\n    assertEquals(timeline, latest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceTimeline", "index": 599, "label": 0}
{"input": "private Map<String, Parameter> parseParamMap(String json) throws JsonProcessingException {\n    TypeReference<Map<String, Parameter>> paramMap = new TypeReference<Map<String, Parameter>>() {};\n    return MAPPER.readValue(json.replaceAll(\"\\'\", \"\\\"\"), paramMap);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "parseParamMap", "index": 600, "label": 0}
{"input": "@Test\n  public void testComputeStepIdsInRuntimeDagForStart() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setRuntimeDag(runtimeDag2);\n    Set<String> actual = DagHelper.computeStepIdsInRuntimeDag(instance, Collections.emptySet());\n    Assert.assertEquals(\"[job_1, job_3, job_2, job_5, job_4]\", actual.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testComputeStepIdsInRuntimeDagForStart", "index": 601, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase7() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(), Collections.singletonList(\"job.7\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(1, paths.size());\n    Assert.assertEquals(Collections.singletonList(\"job.7\"), paths.get(0));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase7", "index": 602, "label": 0}
{"input": "private void tryTerminateQueuedInstanceIfNeeded(\n      SubworkflowArtifact artifact, WorkflowInstance.Status status) {\n    if (status == WorkflowInstance.Status.CREATED || status == WorkflowInstance.Status.PAUSED) {\n      WorkflowInstance toTerminate = getWorkflowInstance(artifact);\n      instanceDao.tryTerminateQueuedInstance(\n          toTerminate,\n          WorkflowInstance.Status.STOPPED,\n          \"The queued workflow instance is terminated by its upstream subworkflow step.\");\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/SubworkflowStepRuntime.java", "function_name": "tryTerminateQueuedInstanceIfNeeded", "index": 603, "label": 0}
{"input": "public static TextAlignment getTextAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment alignment, CellType cellType) {\n        switch (alignment) {\n            case LEFT:\n                return TextAlignment.LEFT;\n            case RIGHT:\n                return TextAlignment.RIGHT;\n            case CENTER:\n                return TextAlignment.CENTER;\n            case JUSTIFY:\n                return TextAlignment.JUSTIFIED;\n            case GENERAL:\n                if (cellType == CellType.NUMERIC) {\n                    return TextAlignment.RIGHT;\n                } else if (cellType == CellType.BOOLEAN) {\n                    return TextAlignment.CENTER;\n                }\n        }\n        return TextAlignment.LEFT;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java", "function_name": "getTextAlignment", "index": 604, "label": 0}
{"input": "public boolean tryUnblockFailedWorkflowInstance(\n      String workflowId, long workflowInstanceId, long workflowRunId, TimelineEvent event) {\n    int updated =\n        withMetricLogError(\n            () ->\n                withRetryableUpdate(\n                    UNBLOCK_INSTANCE_FAILED_STATUS,\n                    stmt -> {\n                      int idx = 0;\n                      stmt.setString(++idx, toJson(event));\n                      stmt.setString(++idx, workflowId);\n                      stmt.setLong(++idx, workflowInstanceId);\n                      stmt.setLong(++idx, workflowRunId);\n                    }),\n            \"tryUnblockFailedWorkflowInstance\",\n            \"Failed to try to unblock the failed workflow instance [{}][{}][{}]\",\n            workflowId,\n            workflowInstanceId,\n            workflowRunId);\n    return updated == SUCCESS_WRITE_SIZE;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "tryUnblockFailedWorkflowInstance", "index": 605, "label": 0}
{"input": "@Test\n  public void testGenerate() {\n    KubernetesStepContext context =\n        new KubernetesStepContext(new WorkflowSummary(), runtimeSummary, new TypedStep());\n    KubernetesCommand command = generator.generate(context);\n    assertEquals(\"test-app\", command.getAppName());\n    assertEquals(\"0.5\", command.getCpu());\n    assertEquals(\"1G\", command.getDisk());\n    assertEquals(\"0\", command.getGpu());\n    assertEquals(\"1G\", command.getMemory());\n    assertEquals(\"test-image\", command.getImage());\n    assertEquals(\"test-entrypoint\", command.getEntrypoint());\n    assertEquals(Map.of(\"key1\", \"value1\", \"key2\", \"0.5\"0), command.getEnv());\n    assertEquals(\"0.5\"1, command.getJobDeduplicationKey());\n    assertEquals(\"0.5\"2, command.getOwnerEmail());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/kubernetes/KubernetesCommandGeneratorTest.java", "function_name": "testGenerate", "index": 606, "label": 0}
{"input": "public BinaryOperatorExpr(Expr left, Expr right, Operator op, Span span) {\n      super(span, List.of(left, right));\n      this.op = op;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "BinaryOperatorExpr", "index": 607, "label": 0}
{"input": "private static Parameter populateEvaluatedResultAndTime(Parameter param, Long evaluatedTime) {\n    if (param.getType() == ParamType.MAP) {\n      Map<String, Object> evaluatedResult = new LinkedHashMap<>();\n      Map<String, ParamDefinition> mapParamValue = param.getValue();\n      for (Map.Entry<String, ParamDefinition> entry : mapParamValue.entrySet()) {\n        ParamDefinition def = entry.getValue();\n        Parameter populatedParam = populateEvaluatedResultAndTime(def.toParameter(), evaluatedTime);\n        evaluatedResult.put(entry.getKey(), populatedParam.getEvaluatedResult());\n      }\n      param.setEvaluatedResult(evaluatedResult);\n    } else {\n      param.setEvaluatedResult(param.getValue());\n    }\n    param.setEvaluatedTime(evaluatedTime);\n    return param;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "populateEvaluatedResultAndTime", "index": 608, "label": 0}
{"input": "@Test\n  public void testBuildPaginationResultWithZeroTotalCount() {\n    PaginationResult<WorkflowInstance> result =\n        PaginationHelper.buildPaginationResult(List.of(), 0, 1, (ignored) -> new long[] {0L, 0L});\n\n    assertNull(result.getPageInfo().getStartCursor());\n    assertNull(result.getPageInfo().getEndCursor());\n    assertNull(result.getPageInfo().getStartIndex());\n    assertFalse(result.getPageInfo().isHasPreviousPage());\n    assertFalse(result.getPageInfo().isHasNextPage());\n    assertEquals(0, result.getTotalCount());\n    assertTrue(result.getElements().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9f6ef6ad453085e3c04ab55405fc7b256c5a9c9b", "file_path": "maestro-server/src/test/java/com/netflix/maestro/server/utils/PaginationHelperTest.java", "function_name": "testBuildPaginationResultWithZeroTotalCount", "index": 609, "label": 0}
{"input": "@VisibleForTesting\n  MaestroWorkflow getMaestroWorkflow(String workflowId) {\n    return withRetryableQuery(\n        GET_MAESTRO_WORKFLOW,\n        stmt -> stmt.setString(1, workflowId),\n        result -> {\n          if (result.next()) {\n            return maestroWorkflowFromResult(result);\n          }\n          return null;\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getMaestroWorkflow", "index": 610, "label": 0}
{"input": "private void init() {\n\n        fileManager = FileManager.getInstance(getApplicationContext());\n\n        endpointLayout = findViewById(R.id.endpoint_layout);\n        portLayout = findViewById(R.id.port_layout);\n        splitTunnelLayout = findViewById(R.id.split_tunnel_layout);\n        lanLayout = findViewById(R.id.lan_layout);\n        psiphonLayout = findViewById(R.id.psiphon_layout);\n        countryLayout = findViewById(R.id.country_layout);\n        licenseLayout = findViewById(R.id.license_layout);\n        goolLayout = findViewById(R.id.gool_layout);\n\n        back = findViewById(R.id.back);\n        endpoint = findViewById(R.id.endpoint);\n        port = findViewById(R.id.port);\n        country = findViewById(R.id.country);\n        license = findViewById(R.id.license);\n\n        psiphon = findViewById(R.id.psiphon);\n        lan = findViewById(R.id.lan);\n        gool = findViewById(R.id.gool);\n\n        back.setOnClickListener(v -> getOnBackPressedDispatcher().onBackPressed());\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/SettingsActivity.java", "function_name": "init", "index": 611, "label": 0}
{"input": "@Override\n  public List<Message> getMessages(String queue) {\n    throw new UnsupportedOperationException(\n        \"This method is not implemented in CockroachDBIndexDAO.\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "getMessages", "index": 612, "label": 0}
{"input": "private int jjMoveStringLiteralDfa7_0(long old0, long active0) {\n    if (((active0 &= old0)) == 0L) return jjStartNfa_0(5, old0, 0L);\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      jjStopStringLiteralDfa_0(6, active0, 0L);\n      return 7;\n    }\n    switch (curChar) {\n      case 99:\n        return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);\n      case 101:\n        if ((active0 & 0x200000L) != 0L) return jjStartNfaWithStates_0(7, 21, 28);\n        else if ((active0 & 0x1000000000000000L) != 0L) return jjStartNfaWithStates_0(7, 60, 28);\n        return jjMoveStringLiteralDfa8_0(active0, 0x201000000000L);\n      case 110:\n        return jjMoveStringLiteralDfa8_0(active0, 0x110000400000000L);\n      case 116:\n        if ((active0 & 0x1000L) != 0L) return jjStartNfaWithStates_0(7, 12, 28);\n        break;\n      default:\n        break;\n    }\n    return jjStartNfa_0(6, active0, 0L);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa7_0", "index": 613, "label": 0}
{"input": "@Test\n    public void mergeWrite() {\n        \n        String fileName = TestFileUtil.getPath() + \"mergeWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        EasyExcel.write(fileName, DemoMergeData.class).sheet(\"模板\").doWrite(data());\n        \n        \n        fileName = TestFileUtil.getPath() + \"mergeWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        LoopMergeStrategy loopMergeStrategy = new LoopMergeStrategy(2, 0);\n        \n        EasyExcel.write(fileName, DemoData.class).registerWriteHandler(loopMergeStrategy).sheet(\"模板\").doWrite(data());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "mergeWrite", "index": 614, "label": 0}
{"input": "@Test\n  public void testMergeBothOverwrite() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': 'MUTABLE'}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye', 'mode': 'MUTABLE'}}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n    assertEquals(1, allParams.size());\n    StringParamDefinition tomerge = allParams.get(\"tomerge\").asStringParamDef();\n    assertEquals(\"goodbye\", tomerge.getValue());\n    assertEquals(ParamMode.MUTABLE, tomerge.getMode());\n    assertEquals(ParamSource.DEFINITION, tomerge.getSource());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeBothOverwrite", "index": 615, "label": 0}
{"input": "private String getBindAddress() {\n        String port = FileManager.getString(\"USERSETTING_port\");\n        boolean enableLan = FileManager.getBoolean(\"USERSETTING_lan\");\n        String bindAddress = \"127.0.0.1:\" + port;\n\n        if (isLocalPortInUse(bindAddress).equals(\"true\")) {\n            port = String.valueOf(findFreePort());\n        }\n        String bind = \"127.0.0.1:\" + port;\n        if (enableLan) {\n            bind = \"0.0.0.0:\" + port;\n        }\n        return bind;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/service/OblivionVpnService.java", "function_name": "getBindAddress", "index": 616, "label": 0}
{"input": "@JsonIgnore\n  public @Nullable List<MapParameter> getOutputSignals() {\n    if (outputs != null) {\n      return outputs.get(StepOutputsDefinition.StepOutputType.SIGNAL);\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/artifact/DynamicOutputArtifact.java", "function_name": "getOutputSignals", "index": 617, "label": 0}
{"input": "private void unsubscribeConnectionStatus() {\n        if (!isBound || serviceMessenger == null) {\n            Log.w(TAG, \"Service is not bound or messenger is null\");\n            return;\n        }\n\n        OblivionVpnService.unregisterConnectionStateObserver(getKey(), serviceMessenger);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/base/StateAwareBaseActivity.java", "function_name": "unsubscribeConnectionStatus", "index": 618, "label": 0}
{"input": "@Override\n  public List<String> getRunningWorkflowIds(String workflowName, int version) {\n    return searchRunningWorkflowIdsByName(workflowName, version);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getRunningWorkflowIds", "index": 619, "label": 0}
{"input": "public void trySaveGroup(FlowGroup group) {\n    if (executor.isShutdown() || scheduler.isShutdown()) {\n      throw new MaestroRetryableError(\n          \"ExecutionContext is shutdown and cannot save a group and please retry.\");\n    }\n    try {\n      flowDao.insertGroup(group);\n    } catch (MaestroInternalError e) {\n      throw new MaestroRetryableError(e, \"insertGroup is failed and please retry\");\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "trySaveGroup", "index": 620, "label": 0}
{"input": "private static boolean waitForConnection(String bindAddress) {\n        long startTime = System.currentTimeMillis();\n        boolean isSuccessful = false;\n        while (System.currentTimeMillis() - startTime < 60 * 1000) { \n            boolean result = pingOverHTTP(bindAddress);\n            if (result) {\n                isSuccessful = true;\n                break;\n            }\n            try {\n                Thread.sleep(500); \n            } catch (InterruptedException e) {\n                break; \n            }\n        }\n        return isSuccessful;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "a6a3311b40f648ca9f3f5fc0199ddb6cbdb507e7", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "waitForConnection", "index": 621, "label": 0}
{"input": "@Bean\n  public InstanceActionJobEventProcessor instanceActionJobEventProcessor(\n      FlowOperation flowOperation,\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao) {\n    LOG.info(\"Creating instanceActionJobEventProcessor within Spring boot...\");\n    return new InstanceActionJobEventProcessor(flowOperation, instanceDao, stepInstanceDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "instanceActionJobEventProcessor", "index": 622, "label": 0}
{"input": "@Test\n  public void testReplaceDoubleDollarSign() {\n    Parameter param =\n        StringParameter.builder().name(\"test\").value(\"no variables$$ $$$$ in this string\").build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertTrue(paramNames.isEmpty());\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(\"no variables$ $$ in this string\", result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testReplaceDoubleDollarSign", "index": 623, "label": 0}
{"input": "private boolean setBlockListUrl(String blocklistUrl) {\n        RqSessionSet set = RqSessionSet.builder()\n                .blocklistUrl(blocklistUrl + \"?t=\" + System.currentTimeMillis()) \n                .blocklistEnabled(true)\n                .build();\n        TypedResponse<RsSessionGet> sessionSetResp = client.execute(set);\n        return sessionSetResp.isSuccess();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "802dc1084e54f7c59c02aedc7f8cd8b4fb4ffd83", "file_path": "src/main/java/com/ghostchu/peerbanhelper/downloader/impl/transmission/Transmission.java", "function_name": "setBlockListUrl", "index": 624, "label": 0}
{"input": "@Bean\n  public StepInstanceActionHandler stepInstanceActionHandler(\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceActionDao actionDao,\n      WorkflowInstanceActionHandler actionHandler) {\n    LOG.info(\"Creating maestro stepInstanceActionHandler within Spring boot...\");\n    return new StepInstanceActionHandler(instanceDao, actionDao, actionHandler);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "stepInstanceActionHandler", "index": 625, "label": 0}
{"input": "public <T> List<T> doReadAllSync() {\n        SyncReadListener syncReadListener = new SyncReadListener();\n        registerReadListener(syncReadListener);\n        try (ExcelReader excelReader = build()) {\n            excelReader.readAll();\n            excelReader.finish();\n        }\n        return (List<T>) syncReadListener.getList();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/ExcelReaderBuilder.java", "function_name": "doReadAllSync", "index": 626, "label": 0}
{"input": "@Test\n    public void compatibleHeaderRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.xlsx\";\n        \n        EasyExcel.read(fileName, DemoCompatibleHeaderData.class, new DemoCompatibleHeaderDataListener()).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "4e6111aeeb6c9a24c0b7fa208ec8ec9acf6719fa", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "compatibleHeaderRead", "index": 627, "label": 0}
{"input": "@Test\n  public void testGeneratedEntryPointWithGitRepo() {\n    stepRuntimeSummary\n        .getParams()\n        .get(NotebookConstants.NOTEBOOK_KEY)\n        .asMapParam()\n        .getValue()\n        .put(\n            NotebookConstants.NOTEBOOK_GIT_REPO,\n            ParamDefinition.buildParamDefinition(NotebookConstants.NOTEBOOK_GIT_REPO, \"my_repo\"));\n    stepRuntimeSummary\n        .getParams()\n        .get(NotebookConstants.NOTEBOOK_KEY)\n        .asMapParam()\n        .getEvaluatedResult()\n        .put(NotebookConstants.NOTEBOOK_GIT_REPO, \"my_repo\");\n\n    PapermillCommand papermillCommand =\n        papermillEntrypointBuilder.generatePapermillRuntime(context);\n    String entrypoint = papermillCommand.entrypoint();\n    assertTrue(\n        entrypoint.startsWith(\n            \" git clone my_repo maestro_notebook_git_repo && \"\n                + \"cd \\\"maestro_notebook_git_repo/$(dirname '/some/notebook.ipynb')\\\" && \"\n                + \"papermill \\\"$(basename '/some/notebook.ipynb')\\\" \"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilderTest.java", "function_name": "testGeneratedEntryPointWithGitRepo", "index": 628, "label": 0}
{"input": "private static boolean isUpstreamSystemMode(ParamDefinition target, MergeContext context) {\n    return context.isUpstreamMerge()\n        && target != null\n        && target.getSource() != null\n        && target.getSource() != ParamSource.DEFINITION;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "isUpstreamSystemMode", "index": 629, "label": 0}
{"input": "public static String getTreecode(Map<String, Object> paramsObj) {\n    if (CollUtil.isNotEmpty(paramsObj) && paramsObj.containsKey(GenConstants.TREE_CODE)) {\n      return StringUtils.toCamelCase(Convert.toStr(paramsObj.get(GenConstants.TREE_CODE)));\n    }\n    return StringUtils.EMPTY;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "getTreecode", "index": 630, "label": 0}
{"input": "public String humanReadableFormat(Duration duration) {\n    return duration\n        .toString()\n        .substring(2)\n        .replaceAll(\"(\\\\d[HMS])(?!$)\", \"$1 \")\n        .toLowerCase(Locale.US);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/DurationHelper.java", "function_name": "humanReadableFormat", "index": 631, "label": 0}
{"input": "public MaestroDryRunException(Throwable cause, String template, Object... args) {\n    super(Code.BAD_REQUEST, String.format(template, args), cause);\n    this.details = Details.create(cause, false, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroDryRunException.java", "function_name": "MaestroDryRunException", "index": 632, "label": 0}
{"input": "private byte[] doDecrypt(byte[] key, byte[] iv, byte[] input) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);\n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);\n        return cipher.doFinal(input);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DecryptServiceImpl.java", "function_name": "doDecrypt", "index": 633, "label": 0}
{"input": "private StepInstance getInstance(ResultSet rs) throws SQLException {\n    return fromJson(\n        Checks.notNull(\n            rs.getString(StepInstanceField.INSTANCE.field), \"step instance column cannot be null\"),\n        StepInstance.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getInstance", "index": 634, "label": 0}
{"input": "private void retryTask(String taskRefName) {\n    try {\n      Task prev =\n          flow.getFinishedTasks().stream()\n              .filter(t -> Objects.equals(t.referenceTaskName(), taskRefName))\n              .reduce((first, second) -> second)\n              .orElseThrow(\n                  () ->\n                      new MaestroNotFoundException(\n                          \"Cannot retry as no previous task attempt exists for [%s]\", taskRefName));\n\n      Task retryTask = flow.newTask(prev.getTaskDef(), false);\n      retryTask.setOutputData(prev.getOutputData());\n      retryTask.setRetryCount(prev.getRetryCount() + 1);\n      runTask(retryTask, Action.TASK_START);\n    } catch (RuntimeException e) { \n      LOG.warn(\"Ignore the exception within retryTask for taskRef [{}] \", taskRefName, e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "retryTask", "index": 635, "label": 0}
{"input": "private String getEndpoint() {\n        String endpoint = FileManager.getString(\"USERSETTING_endpoint\", \"engage.cloudflareclient.com:2408\").trim();\n        return endpoint.equals(\"engage.cloudflareclient.com:2408\") ? \"\" : endpoint;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/service/OblivionVpnService.java", "function_name": "getEndpoint", "index": 636, "label": 0}
{"input": "@PutMapping(\n      value = \"/{workflowId}/instances/{workflowInstanceId}/actions/stop\",\n      consumes = MediaType.ALL_VALUE)\n  @Operation(\n      summary = \"Stop a given workflow instance's latest run if it is in a non-terminal state\")\n  public WorkflowInstanceActionResponse stopWorkflowInstance(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId,\n      @PathVariable(\"workflowInstanceId\") long workflowInstanceId) {\n    return actionHandler.stopLatest(workflowId, workflowInstanceId, callerBuilder.build());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowInstanceActionController.java", "function_name": "stopWorkflowInstance", "index": 637, "label": 0}
{"input": "private void configTaskStartDelay(\n      Task task, StepRuntimeSummary runtimeSummary, boolean firstCall) {\n    Long callbackInSecs = null;\n    if (firstCall || runtimeSummary.getPendingRecords().isEmpty()) { \n      callbackInSecs = stepRuntimeCallbackDelayPolicy.getCallBackDelayInSecs(runtimeSummary);\n    }\n    if (callbackInSecs != null) {\n      LOG.trace(\n          \"Set an initial customized callback [{}] in seconds for step [{}] with an initial status [{}]\",\n          callbackInSecs,\n          runtimeSummary.getIdentity(),\n          runtimeSummary.getRuntimeState().getStatus());\n      task.setStartDelayInSeconds(callbackInSecs);\n    } else {\n      task.setStartDelayInSeconds(Translator.DEFAULT_FLOW_TASK_DELAY);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "configTaskStartDelay", "index": 638, "label": 0}
{"input": "private boolean jj_3R_57() {\n    if (jj_scan_token(LE)) return true;\n    if (jj_3R_49()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_57", "index": 639, "label": 0}
{"input": "@Override\n  @ExplodeLoop\n  public Object executeGeneric(VirtualFrame frame) {\n    var owner = VmUtils.getOwner(frame);\n    Object receiver;\n\n    if (levelsUp == 0) {\n      receiver = VmUtils.getReceiver(frame);\n    } else {\n      for (int i = 1; i < levelsUp; i++) {\n        owner = owner.getEnclosingOwner();\n        assert owner != null;\n      }\n\n      receiver = owner.getEnclosingReceiver();\n      owner = owner.getEnclosingOwner();\n    }\n\n    assert receiver instanceof VmObjectLike\n        : \"Assumption: This node isn't used in Truffle ASTs of `external` pkl.base classes whose values aren't VmObject's.\";\n\n    var objReceiver = (VmObjectLike) receiver;\n    var result = objReceiver.getCachedValue(property);\n\n    if (result == null) {\n      result = callNode.call(objReceiver, owner, property.getName());\n      objReceiver.setCachedValue(property, result);\n    }\n\n    return result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/member/ReadLocalPropertyNode.java", "function_name": "executeGeneric", "index": 640, "label": 0}
{"input": "private String[] getAvailableLanguagesNames() {\n        String[] languageNames = new String[AVAILABLE_LANGUAGES.length];\n        for (int i = 0; i < AVAILABLE_LANGUAGES.length; i++) {\n            languageNames[i] = getLanguageName(AVAILABLE_LANGUAGES[i]);\n        }\n        return languageNames;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "2f3b84a45acbf027ab617f69cb6bdd3f251bcd76", "file_path": "app/src/main/java/org/bepass/oblivion/LocaleHandler.java", "function_name": "getAvailableLanguagesNames", "index": 641, "label": 0}
{"input": "private void initializeTaskItem() {\n        display.syncExec(() -> {\n            TaskBar taskBar = display.getSystemTaskBar();\n            if (taskBar != null) {\n                taskItem = taskBar.getItem(parent);\n                if (taskItem == null) {\n                    taskItem = taskBar.getItem(null);\n                }\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtTaskbarControl.java", "function_name": "initializeTaskItem", "index": 642, "label": 0}
{"input": "@Test(expected = IllegalStateException.class)\n  public void testLoopOverLimit() throws Exception {\n    run(\"while(true) 1+1;\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testLoopOverLimit", "index": 643, "label": 0}
{"input": "@Test\n  public void testClear() {\n    assertTrue(state.isStackEmpty());\n    state.push(SelString.of(\"foo\"));\n    assertFalse(state.isStackEmpty());\n    state.clear();\n    assertTrue(state.isStackEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "testClear", "index": 644, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeForStop() throws Exception {\n    WorkflowInstanceActionResponse response =\n        loadObject(\n            \"fixtures/api/sample-workflow-instance-stop-response.json\",\n            WorkflowInstanceActionResponse.class);\n    assertEquals(\n        response,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(response), WorkflowInstanceActionResponse.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/api/WorkflowInstanceActionResponseTest.java", "function_name": "testRoundTripSerdeForStop", "index": 645, "label": 0}
{"input": "@Test\n  public void shouldCompressAndDeCompress() throws IOException {\n    Compressor compressor = new GZIPCompressor();\n    String compressed = \"H4sIAAAAAAAAACtJLS4JS8wpTQUA5C3qhAkAAAA=\";\n    String decompressed = \"testValue\";\n\n    Assert.assertEquals(\n        compressed,\n        base64Encode(compressor.compress(decompressed.getBytes(StandardCharsets.UTF_8))));\n    Assert.assertEquals(\n        decompressed,\n        new String(compressor.decompress(base64Decode(compressed)), StandardCharsets.UTF_8));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/CompressorTest.java", "function_name": "shouldCompressAndDeCompress", "index": 646, "label": 0}
{"input": "public static String getDir(String... dirs) {\n        \n        String userDir = System.getProperty(\"user.dir\");\n        \n        String separator = FileSystems.getDefault().getSeparator();\n        StringBuilder sb = new StringBuilder();\n        sb.append(userDir);\n        \n        for (String dir : dirs) {\n            sb.append(separator);\n            sb.append(dir);\n        }\n        sb.append(separator);\n        return sb.toString();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getDir", "index": 647, "label": 0}
{"input": "public void updateRuntimeState(\n      WorkflowInstance.Status status, WorkflowRuntimeOverview overview, Long curTime) {\n    if (WorkflowInstance.Status.IN_PROGRESS.equals(status)) {\n      this.startTime = curTime;\n    } else {\n      this.endTime = curTime;\n    }\n    this.instanceStatus = status;\n    this.modifyTime = System.currentTimeMillis();\n    this.runtimeOverview = overview;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/WorkflowRuntimeSummary.java", "function_name": "updateRuntimeState", "index": 648, "label": 0}
{"input": "private static String getCoCo(String name) {\n        for (String code : Locale.getISOCountries()) {\n            Locale locale = new Locale(\"en\", code); \n            if (locale.getDisplayCountry(Locale.ENGLISH).equalsIgnoreCase(name)) {\n                return code;\n            }\n        }\n        return \"\";\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "abcf26c693e386d31c730746b915c346087b18de", "file_path": "app/src/main/java/org/bepass/oblivion/CountryUtils.java", "function_name": "getCoCo", "index": 649, "label": 0}
{"input": "@After\n  public void cleanup() throws Exception {\n    triggerDao.delete(\"test-wf\", \"uuid1\");\n    conn.close();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalTriggerDaoTest.java", "function_name": "cleanup", "index": 650, "label": 0}
{"input": "@Override\n  public List<EventHandler> getEventHandlersForEvent(String event, boolean activeOnly) {\n    return withMetricLogError(\n        () ->\n            getPayloads(\n                GET_EVENT_HANDLERS_FOR_EVENT_STATEMENT,\n                statement -> {\n                  statement.setString(1, event);\n                  statement.setBoolean(2, activeOnly);\n                },\n                EventHandler.class),\n        \"getEventHandlersForEvent\",\n        \"Failed getting all event handlers for [active {}] event {}\",\n        activeOnly,\n        event);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBEventHandlerDAO.java", "function_name": "getEventHandlersForEvent", "index": 651, "label": 0}
{"input": "@Test\n  public void testLongToParam() {\n    Parameter param = SignalParamValue.of(123).toParam(\"foo\");\n    Assert.assertTrue(param.isEvaluated());\n    Assert.assertTrue(param.isLiteral());\n    Assert.assertEquals(ParamType.LONG, param.getType());\n    Assert.assertEquals(\"foo\", param.getName());\n    Assert.assertEquals(123, param.asLongParam().getValue().longValue());\n    Assert.assertEquals(123, param.asLongParam().getEvaluatedResult().longValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalParamValueTest.java", "function_name": "testLongToParam", "index": 652, "label": 0}
{"input": "public static WorkflowInstanceAggregatedInfo computeAggregatedView(\n      WorkflowInstance workflowInstance, boolean statusKnown) {\n    if (workflowInstance == null) {\n      \n      return new WorkflowInstanceAggregatedInfo();\n    }\n\n    WorkflowInstanceAggregatedInfo instanceAggregated =\n        computeAggregatedViewNoStatus(workflowInstance);\n    if (statusKnown || workflowInstance.getAggregatedInfo() == null) {\n      instanceAggregated.setWorkflowInstanceStatus(workflowInstance.getStatus());\n    } else {\n      computeAndSetAggregatedInstanceStatus(workflowInstance, instanceAggregated);\n    }\n    return instanceAggregated;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/AggregatedViewHelper.java", "function_name": "computeAggregatedView", "index": 653, "label": 0}
{"input": "@Override\n    public boolean saveBatch(String poolName, List<Msg> msg) {\n        log.info(\"开始新增数据:[{}][{}]\", poolName, msg.size());\n        \n        DynamicDataSourceContextHolder.push(poolName);\n        \n        transactionTemplate.execute(status -> {\n            MybatisBatch.Method<Msg> mapperMethod = new MybatisBatch.Method<>(MsgMapper.class);\n            return MybatisBatchUtils.execute(sqlSessionFactory, msg, mapperMethod.insert());\n        });\n        \n        DynamicDataSourceContextHolder.clear();\n        log.info(\"结束新增数据:[{}][{}]\", poolName, msg.size());\n        \n        return true;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/MsgRepositoryImpl.java", "function_name": "saveBatch", "index": 654, "label": 0}
{"input": "public static RetryPolicy getParsedRetryPolicy(\n      RetryPolicy retryPolicy, Function<ParamDefinition, Parameter> paramParser) {\n    return retryPolicy.toBuilder()\n        .errorRetryLimit(\n            getParsedRetryNumber(\n                retryPolicy.getErrorRetryLimit(), paramParser, \"error_retry_limit\"))\n        .platformRetryLimit(\n            getParsedRetryNumber(\n                retryPolicy.getPlatformRetryLimit(), paramParser, \"platform_retry_limit\"))\n        .timeoutRetryLimit(\n            getParsedRetryNumber(\n                retryPolicy.getTimeoutRetryLimit(), paramParser, \"timeout_retry_limit\"))\n        .backoff(getParsedBackoff(retryPolicy.getBackoff(), paramParser))\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/RetryPolicyParser.java", "function_name": "getParsedRetryPolicy", "index": 655, "label": 0}
{"input": "@Test\n  public void testProcessStart() throws Exception {\n    SignalTriggerExecution execution =\n        loadObject(\"fixtures/sample-signal-trigger-execution.json\", SignalTriggerExecution.class);\n    execution.setCondition(\"135 > 2\");\n    Supplier<SignalTriggerExecution> messageSupplier = () -> execution;\n    processor.process(messageSupplier);\n    verify(actionHandler, times(1)).start(any(), any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_EXECUTION_SUCCESS,\n                SignalTriggerExecutionProcessor.class)\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerExecutionProcessorTest.java", "function_name": "testProcessStart", "index": 656, "label": 0}
{"input": "@Test\n  public void testSubworkflowWithParams() throws Exception {\n    WorkflowDefinition wfd =\n        loadObject(\n            \"fixtures/workflows/definition/sample-subworkflow-wf-with-params.json\",\n            WorkflowDefinition.class);\n    assertEquals(wfd, MAPPER.readValue(MAPPER.writeValueAsString(wfd), WorkflowDefinition.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowDefinitionTest.java", "function_name": "testSubworkflowWithParams", "index": 657, "label": 0}
{"input": "public MemberOrBuilder getMembersOrBuilder(\n                    int index) {\n                if (membersBuilder_ == null) {\n                    return members_.get(index);\n                } else {\n                    return membersBuilder_.getMessageOrBuilder(index);\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getMembersOrBuilder", "index": 658, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase3() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(), Collections.singletonList(\"job.3\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(1, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.3\", \"job.6\", \"job.7\"), paths.get(0));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase3", "index": 659, "label": 0}
{"input": "@Test\n    public void t03FillCsv() {\n        ExcelGenerateException excelGenerateException = Assertions.assertThrows(ExcelGenerateException.class,\n                () -> fill(fileCsv, simpleTemplateCsv));\n        Assertions.assertEquals(\"csv cannot use template.\", excelGenerateException.getMessage());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/fill/FillDataTest.java", "function_name": "t03FillCsv", "index": 660, "label": 0}
{"input": "@JsonIgnore\n    public StepInstanceStatusChangeEvent.StatusChangeRecord toMaestroRecord() {\n      StepInstanceStatusChangeEvent.StatusChangeRecord record =\n          new StepInstanceStatusChangeEvent.StatusChangeRecord();\n      record.setOldStatus(this.oldStatus);\n      record.setNewStatus(this.newStatus);\n      record.setEventTime(this.eventTime);\n      return record;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/jobevents/StepInstanceUpdateJobEvent.java", "function_name": "toMaestroRecord", "index": 661, "label": 0}
{"input": "protected GeneratorPropertyNode(ObjectMember member) {\n    super(member.getSourceSection(), false);\n    this.member = member;\n    assert member.isProp();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPropertyNode.java", "function_name": "GeneratorPropertyNode", "index": 662, "label": 0}
{"input": "private static void initGUI(String[] args) {\n        String guiType = \"swing\";\n        if (!Desktop.isDesktopSupported() || ExternalSwitch.parse(\"pbh.nogui\") != null || Arrays.stream(args).anyMatch(arg -> arg.equalsIgnoreCase(\"nogui\"))) {\n            guiType = \"console\";\n        } else if (Arrays.stream(args).anyMatch(arg -> arg.equalsIgnoreCase(\"swing\"))) {\n            guiType = \"swing\";\n        } else if (Arrays.stream(args).anyMatch(arg -> arg.equalsIgnoreCase(\"swt\"))) {\n            guiType = \"swt\";\n        }\n        switch (guiType) {\n            case \"swing\" -> guiManager = new PBHGuiManager(new SwingGuiImpl(args));\n            case \"console\" -> guiManager = new PBHGuiManager(new ConsoleGuiImpl(args));\n            case \"swt\" -> guiManager = new PBHGuiManager(new SwtGuiImpl(args));\n        }\n        guiManager.setup();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/Main.java", "function_name": "initGUI", "index": 663, "label": 0}
{"input": "private WorkflowTask createMaestroTask(AbstractStep step) {\n    if (step.getParams() == null) {\n      step.setParams(Collections.emptyMap());\n    }\n    WorkflowTask task = new WorkflowTask();\n    task.setType(Constants.MAESTRO_TASK_NAME);\n    task.setName(UUID.randomUUID().toString());\n    task.setDescription(step.getDescription());\n    task.setTaskReferenceName(step.getId());\n    task.setTaskDefinition(createMaestroTaskDef(step));\n    if (step.getFailureMode() == null) { \n      step.setFailureMode(Defaults.DEFAULT_FAILURE_MODE);\n    }\n    task.setInputParameters(\n        Collections.singletonMap(Constants.STEP_DEFINITION_FIELD, StepHelper.wrap(step)));\n    return task;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/StepTranslator.java", "function_name": "createMaestroTask", "index": 664, "label": 0}
{"input": "public static MergeContext copyWithParentMode(MergeContext orig, ParamMode parentParamMode) {\n      ParamMode modeToUse;\n      if (parentParamMode == null) {\n        \n        \n        modeToUse = orig.getParentParamMode();\n      } else if (orig.getParentParamMode() == null) {\n        \n        \n        modeToUse = parentParamMode;\n      } else {\n        \n        modeToUse =\n            PARAM_MODE_STRICTNESS.indexOf(parentParamMode)\n                    > PARAM_MODE_STRICTNESS.indexOf(orig.getParentParamMode())\n                ? parentParamMode\n                : orig.getParentParamMode();\n      }\n\n      return orig.withParentParamMode(modeToUse);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "copyWithParentMode", "index": 665, "label": 0}
{"input": "private Timeline getTimelineIfPresent(ResultSet rs) throws SQLException {\n    Array payload = rs.getArray(\"timeline\");\n    if (payload != null) {\n      String[] json = (String[]) payload.getArray();\n      if (json != null) {\n        Timeline timeline = new Timeline(null);\n        for (String event : json) {\n          timeline.add(fromJson(event, TimelineEvent.class));\n        }\n        return timeline;\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "getTimelineIfPresent", "index": 666, "label": 0}
{"input": "@Log(title = \"知识库\", businessType = BusinessType.UPDATE)\n  @PostMapping(\"/edit\")\n  public R<Void> edit(@RequestBody KnowledgeInfoBo bo) {\n    return toAjax(knowledgeInfoService.updateByBo(bo));\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "edit", "index": 667, "label": 0}
{"input": "@GetMapping(value = \"/paused-step-attempts\", consumes = MediaType.ALL_VALUE)\n  @Operation(\n      summary =\n          \"Get all the currently paused step instance attempts due to the step definition breakpoint\")\n  public List<PausedStepAttempt> getPausedStepInstanceAttempts(\n      @RequestParam(name = \"workflowId\") String workflowId,\n      @RequestParam(name = \"stepId\") String stepId) {\n    return stepBreakpointDao.getPausedStepAttempts(\n        workflowId,\n        Constants.MATCH_ALL_WORKFLOW_VERSIONS,\n        Constants.MATCH_ALL_WORKFLOW_INSTANCES,\n        Constants.MATCH_ALL_RUNS,\n        stepId,\n        Constants.MATCH_ALL_STEP_ATTEMPTS);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8e3a6f4fa3173239c2832015f499f6768146f25d", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepBreakpointController.java", "function_name": "getPausedStepInstanceAttempts", "index": 668, "label": 0}
{"input": "@PostMapping(\"/audio\")\n    @ResponseBody\n    public WhisperResponse audio(@RequestParam(\"file\") MultipartFile file) {\n        return sseService.speechToTextTranscriptionsV2(file);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "e3da640737feb920dd8b0d589f37b6d3db282aa0", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/chat/ChatController.java", "function_name": "audio", "index": 669, "label": 0}
{"input": "public SelType evaluate(String expr, Map<String, Object> varsMap, Extension ext)\n      throws Exception {\n    checkExprLength(expr);\n    selParser.ReInit(new ByteArrayInputStream(expr.getBytes()));\n    ASTExecute n = selParser.Execute();\n    try {\n      selEvaluator.resetWithInput(varsMap, ext);\n      return (SelType) n.jjtAccept(selEvaluator, null);\n    } finally {\n      selEvaluator.clearState();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelThread.java", "function_name": "evaluate", "index": 670, "label": 0}
{"input": "public void setStepRunParams(Map<String, Map<String, ParamDefinition>> inputs) {\n    if (inputs != null) {\n      inputs.values().forEach(ParamDefinition::preprocessDefinitionParams);\n    }\n    this.stepRunParams = inputs;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowInstance.java", "function_name": "setStepRunParams", "index": 671, "label": 0}
{"input": "private String resolveConditionKey(NodeData data, String handleId) {\n\t\tif (data instanceof QuestionClassifierNodeData classifier) {\n\t\t\treturn classifier.getClasses()\n\t\t\t\t.stream()\n\t\t\t\t.filter(c -> c.getId().equals(handleId))\n\t\t\t\t.map(QuestionClassifierNodeData.ClassConfig::getText)\n\t\t\t\t.findFirst()\n\t\t\t\t.orElse(handleId);\n\t\t}\n\t\telse if (data instanceof BranchNodeData branch) {\n\t\t\treturn branch.getCases()\n\t\t\t\t.stream()\n\t\t\t\t.filter(c -> c.getId().equals(handleId))\n\t\t\t\t.map(c -> c.getConditions().get(0).getValue())\n\t\t\t\t.findFirst()\n\t\t\t\t.orElse(handleId);\n\t\t}\n\t\t\n\t\treturn handleId;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "869092459902221b156926f54eac86afdd48b375", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/generator/workflow/WorkflowProjectGenerator.java", "function_name": "resolveConditionKey", "index": 672, "label": 0}
{"input": "public TraceContext toTraceContext() {\n    TraceContext.Builder builder = TraceContext.newBuilder();\n    builder.traceId(traceIdLow);\n    if (traceIdHigh > 0) {\n      builder.traceIdHigh(traceIdHigh);\n    }\n    if (parentSpanId > 0) {\n      builder.parentId(parentSpanId);\n    }\n    builder.spanId(spanId);\n    builder.sampled(sampled);\n    return builder.build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tracing/MaestroTracingContext.java", "function_name": "toTraceContext", "index": 673, "label": 0}
{"input": "IncomingHandler(OblivionVpnService service) {\n            super(Looper.getMainLooper()); \n            serviceRef = new WeakReference<>(service);\n        }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/service/OblivionVpnService.java", "function_name": "IncomingHandler", "index": 674, "label": 0}
{"input": "@Around(\"execution(public * com.xcs.wx.repository..*.*(..))\")\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n        String previousDs = DynamicDataSourceContextHolder.peek();\n        try {\n            \n            Class<?> targetClass = joinPoint.getTarget().getClass();\n            \n            DS dsAnnotation = AnnotationUtil.getAnnotation(targetClass, DS.class);\n            \n            if (dsAnnotation != null) {\n                DynamicDataSourceContextHolder.push(SpringUtil.getBean(UserService.class).currentUser() + \"#\" + dsAnnotation.value());\n            }\n            return joinPoint.proceed();\n        } finally {\n            \n            if (previousDs != null) {\n                DynamicDataSourceContextHolder.push(previousDs);\n            } else {\n                DynamicDataSourceContextHolder.clear();\n            }\n        }\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/aop/RepositoryAspect.java", "function_name": "around", "index": 675, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidCallDateIntsBetweenWithZeroIncrement() {\n    SelType res =\n        SelUtilFunc.INSTANCE.call(\n            \"dateIntsBetween\",\n            new SelType[] {SelLong.of(\"20181228\"), SelString.of(\"20191002\"), SelLong.of(0)});\n    assertEquals(\"LONG_ARRAY: []\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testInvalidCallDateIntsBetweenWithZeroIncrement", "index": 676, "label": 0}
{"input": "private void setCellStyles( XSSFCell cell,com.itextpdf.layout.element.Cell pdfCell) throws IOException {\n        XSSFCellStyle cellStyle = cell.getCellStyle();\n        pdfCell.setVerticalAlignment(getVerticalAlignment(cellStyle.getVerticalAlignment()))\n                .setTextAlignment(getTextAlignment(cellStyle.getAlignment(), cell.getCellType()));\n\n        \n        setBorders(pdfCell, cellStyle);\n        setBackgroundColor(pdfCell, cellStyle);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "setCellStyles", "index": 677, "label": 0}
{"input": "private Format checkSpecialConverter(String dataFormatString) {\n        if (\"00000\\\\-0000\".equals(dataFormatString) || \"00000-0000\".equals(dataFormatString)) {\n            return new ZipPlusFourFormat();\n        }\n        if (\"[<=9999999]###\\\\-####;\\\\(###\\\\)\\\\ ###\\\\-####\".equals(dataFormatString)\n                || \"[<=9999999]###-####;(###) ###-####\".equals(dataFormatString)\n                || \"###\\\\-####;\\\\(###\\\\)\\\\ ###\\\\-####\".equals(dataFormatString) || \"###-####;(###) ###-####\".equals(\n                dataFormatString)) {\n            return new PhoneFormat();\n        }\n        if (\"000\\\\-00\\\\-0000\".equals(dataFormatString) || \"000-00-0000\".equals(dataFormatString)) {\n            return new SSNFormat();\n        }\n        return null;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/format/DataFormatter.java", "function_name": "checkSpecialConverter", "index": 678, "label": 0}
{"input": "private static boolean isValidIdentifierPart(int codePoint, int category) {\n    return switch (category) {\n      \n      case Character.LOWERCASE_LETTER,\n          Character.UPPERCASE_LETTER,\n          Character.MODIFIER_LETTER,\n          Character.OTHER_LETTER,\n          Character.TITLECASE_LETTER,\n          Character.LETTER_NUMBER,\n          Character.DECIMAL_DIGIT_NUMBER ->\n          true;\n      default -> codePoint == UNDERSCORE;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/CodeGeneratorUtils.java", "function_name": "isValidIdentifierPart", "index": 679, "label": 0}
{"input": "private static String getLeadingIndent(String text) {\n    for (var i = 0; i < text.length(); i++) {\n      var ch = text.charAt(i);\n      if (ch != ' ' && ch != '\\t') {\n        return text.substring(0, i);\n      }\n    }\n\n    return text;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "getLeadingIndent", "index": 680, "label": 0}
{"input": "public BackgroundInvestigationNode(SearchBeanUtil searchBeanUtil, JinaCrawlerService jinaCrawlerService) {\n\t\tthis.jinaCrawlerService = jinaCrawlerService;\n\t\tthis.searchBeanUtil = searchBeanUtil;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/node/BackgroundInvestigationNode.java", "function_name": "BackgroundInvestigationNode", "index": 681, "label": 0}
{"input": "@ExceptionHandler(MyBatisSystemException.class)\n    public ResponseVO<String> myBatisSystemException(MyBatisSystemException e) {\n        if (e.getCause().getCause() instanceof CannotFindDataSourceException) {\n            return ResponseVO.error(-1, \"数据库未就绪状态,请先点击右侧同步按钮！\");\n        }\n        e.printStackTrace();\n        return ResponseVO.error(-1, \"系统异常\");\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/config/ExceptionAdviceConfig.java", "function_name": "myBatisSystemException", "index": 682, "label": 0}
{"input": "public void insertPausedStepInstanceAttempt(\n      Connection conn,\n      String workflowId,\n      long version,\n      long instanceId,\n      long runId,\n      String stepId,\n      long stepAttemptId)\n      throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(CREATE_PAUSED_STEP_INSTANCE_ATTEMPT)) {\n      int idx = 0;\n      stmt.setString(++idx, workflowId);\n      stmt.setLong(++idx, version);\n      stmt.setLong(++idx, instanceId);\n      stmt.setLong(++idx, runId);\n      stmt.setString(++idx, stepId);\n      stmt.setLong(++idx, stepAttemptId);\n      stmt.executeUpdate();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDao.java", "function_name": "insertPausedStepInstanceAttempt", "index": 683, "label": 0}
{"input": "private int jjMoveStringLiteralDfa1_2(long active0) {\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      return 1;\n    }\n    switch (curChar) {\n      case 47:\n        if ((active0 & 0x400L) != 0L) return jjStopAtPos(1, 10);\n        break;\n      default:\n        return 2;\n    }\n    return 2;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa1_2", "index": 684, "label": 0}
{"input": "@JsonIgnore\n  boolean isImmutableToDefinitionWithoutValue(\n      AbstractParamDefinition.AbstractParamDefinitionBuilder<?, ?> builder) {\n    Checks.checkTrue(\n        isEvaluated(),\n        \"Cannot convert an un-evaluated parameter %s to a parameter definition\",\n        getName());\n    builder.name(getName()).validator(getValidator()).tags(getTags()).mode(getMode());\n    if (!getMeta().isEmpty()) {\n      builder.meta(getMeta());\n    }\n    return getMode() == ParamMode.IMMUTABLE;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/AbstractParameter.java", "function_name": "isImmutableToDefinitionWithoutValue", "index": 685, "label": 0}
{"input": "public ObjectMethod(List<Node> nodes, int identifierOffset, Span span) {\n      super(span, nodes);\n      this.identifierOffset = identifierOffset;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectMember.java", "function_name": "ObjectMethod", "index": 686, "label": 0}
{"input": "@Bean\n  public MaestroSignalParamDao maestroSignalParamDao(\n      DataSource maestroDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroEngineProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating maestroSignalParamDao within Spring boot...\");\n    return new MaestroSignalParamDao(maestroDataSource, objectMapper, props, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroSignalParamDao", "index": 687, "label": 0}
{"input": "private Map<String, Object> generatePapermillParams(WorkflowSummary workflowSummary) {\n    Map<String, Object> results = new LinkedHashMap<>();\n    if (workflowSummary.getParams().containsKey(Constants.WORKFLOW_OWNER_PARAM)) {\n      results.put(\n          Constants.WORKFLOW_OWNER_PARAM,\n          workflowSummary.getParams().get(Constants.WORKFLOW_OWNER_PARAM).asString());\n    } else {\n      results.put(\n          Constants.WORKFLOW_OWNER_PARAM,\n          Checks.notNull(workflowSummary.getRunProperties().getOwner(), \"User cannot be null\")\n              .getName());\n    }\n    return results;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilder.java", "function_name": "generatePapermillParams", "index": 688, "label": 0}
{"input": "public boolean isDeletionInitialized(String workflowId, long internalId) {\n    return getWorkflowDeletionStage(workflowId, internalId) == Stage.DELETING_VERSIONS;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDeletionDao.java", "function_name": "isDeletionInitialized", "index": 689, "label": 0}
{"input": "@Override\n    protected Object callWithThreeArgs(String methodName, String arg0, String arg1, String arg2) {\n      if (\"getFromForeach\".equals(methodName)) {\n        Object res = getFromForeach(arg0, arg1, arg2);\n        if (res.getClass().isArray()) {\n          return res;\n        } else {\n          throw new IllegalStateException(\n              methodName + \" must return an array instead of \" + res.getClass());\n        }\n      }\n      throw new UnsupportedOperationException(\n          \"ParamExtension DO NOT support calling method: \" + methodName + \" with args\");\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "callWithThreeArgs", "index": 690, "label": 0}
{"input": "@Test\n    public void IssueTest1() {\n        String fileName = TestFileUtil.getPath() + \"temp/issue2319\" + File.separator + \"test1.xlsx\";\n        FastExcel.read(fileName, Issue2319.class, new PageReadListener<Issue2319>(dataList -> {\n            for (Issue2319 issueData : dataList) {\n                System.out.println((\"读取到一条数据{}\" + JSON.toJSONString(issueData)));\n            }\n        })).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48b49db58092c23294693d35f4cebbdfca75cc67", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/issue2319/Issue2319Test.java", "function_name": "IssueTest1", "index": 691, "label": 0}
{"input": "@Override\n  public String selectUrlByIds(String ossIds) {\n    List<String> list = new ArrayList<>();\n    for (Long id : StringUtils.splitTo(ossIds, Convert::toLong)) {\n      SysOssVo vo = SpringUtils.getAopProxy(this).getById(id);\n      if (ObjectUtil.isNotNull(vo)) {\n        list.add(this.matchingUrl(vo).getUrl());\n      }\n    }\n    return String.join(StringUtils.SEPARATOR, list);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOssServiceImpl.java", "function_name": "selectUrlByIds", "index": 692, "label": 0}
{"input": "@Test\n  public void testStringInterpolationWithEscapedNames() {\n    Parameter param =\n        StringParameter.builder()\n            .name(\"test\")\n            .value(\"$$var$var $var1$$var1 $$$var2 $$$$var2\")\n            .build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Arrays.asList(\"var\", \"var1\", \"var2\")), paramNames);\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(\"$var0 true$var1 $2 $$var2\", result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testStringInterpolationWithEscapedNames", "index": 693, "label": 0}
{"input": "@Test\n  public void testStartDeleteWorkflow() {\n    when(deletionDao.isDeletionInitialized(workflowId, 12345L)).thenReturn(true);\n    processor.process(() -> jobEvent);\n    verify(eventClient, times(1)).send(any());\n    verify(deletionDao, times(1)).deleteWorkflowData(eq(workflowId), eq(12345L), anyLong());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/DeleteWorkflowJobProcessorTest.java", "function_name": "testStartDeleteWorkflow", "index": 694, "label": 0}
{"input": "@Test\n  public void testCalculateMaxExecutions() {\n    var triggers = generateTriggers(\"*/1 * * * *\", \"2021-05-17T00:00:00-07:00\", US_PACIFIC, null);\n    Date endDate = parseDate(triggers, Duration.ofDays(1));\n    List<PlannedTimeTriggerExecution> planned =\n        executionPlanner.calculatePlannedExecutions(triggers, endDate, \"test-workflow\");\n    assertEquals(MAX_EXECUTIONS, planned.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculateMaxExecutions", "index": 695, "label": 0}
{"input": "@Test\n  public void testRunForExpiredMessage() throws InterruptedException {\n    when(messageQueue.take())\n        .thenReturn(new MessageDto(0, \"msgId\", jobEvent, 123456L))\n        .thenThrow(new InterruptedException(\"test\"));\n    when(dispatcher.processJobEvent(any())).thenReturn(Optional.empty());\n    queueWorker.run();\n    verify(dispatcher, times(0)).processJobEvent(any());\n    verify(queueDao, times(0)).remove(message);\n    verify(messageQueue, times(1)).drainTo(any(), anyInt());\n    verify(queueDao, times(1)).release(anyInt(), anyLong(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/worker/MaestroQueueWorkerTest.java", "function_name": "testRunForExpiredMessage", "index": 696, "label": 0}
{"input": "@Bean\n\tpublic ChatClient researchAgent(ChatClient.Builder researchChatClientBuilder,\n\t\t\tMcpClientToolCallbackProvider mcpClientToolCallbackProvider) {\n\t\tSet<ToolCallback> defineCallback = mcpClientToolCallbackProvider.findToolCallbacks(\"researchAgent\");\n\t\treturn researchChatClientBuilder.defaultSystem(ResourceUtil.loadResourceAsString(researcherPrompt))\n\t\t\t.defaultToolNames(this.getAvailableTools(TavilySearchConstants.TOOL_NAME, JinaCrawlerConstants.TOOL_NAME))\n\t\t\t.defaultToolCallbacks(defineCallback.toArray(ToolCallback[]::new))\n\t\t\t.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "researchAgent", "index": 697, "label": 0}
{"input": "public InternalDecimalFormatWithScale(String pattern, DecimalFormatSymbols symbols) {\n            df = new DecimalFormat(trimTrailingCommas(pattern), symbols);\n            setExcelStyleRoundingMode(df);\n            Matcher endsWithCommasMatcher = endsWithCommas.matcher(pattern);\n            if (endsWithCommasMatcher.find()) {\n                int index_point = pattern.indexOf(\".\");\n                int index_comma = pattern.indexOf(\",\");\n                int cnt = index_comma - index_point - 1;\n                String commas = (endsWithCommasMatcher.group(1));\n                BigDecimal temp = BigDecimal.ONE;\n                for (int i = 0; i < commas.length(); ++i) {\n                    temp = temp.multiply(ONE_THOUSAND);\n                }\n                for (int i = 0; i < cnt ; i++) {\n                    temp = temp.multiply(TEN);\n                }\n                divider = temp;\n            } else {\n                divider = null;\n            }\n        }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48b49db58092c23294693d35f4cebbdfca75cc67", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/format/DataFormatter.java", "function_name": "InternalDecimalFormatWithScale", "index": 698, "label": 0}
{"input": "private List<WorkflowInstance> createStartForeachInstances(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      long workflowRunId,\n      RunProperties runProperties,\n      List<RunRequest> requests,\n      List<Long> instanceIds) {\n    List<WorkflowInstance> instances =\n        createWorkflowInstances(workflow, internalId, workflowVersionId, runProperties, requests);\n\n    Iterator<Long> instanceId = instanceIds.iterator();\n    for (WorkflowInstance instance : instances) {\n      instance.setWorkflowInstanceId(instanceId.next());\n      instance.setWorkflowRunId(workflowRunId);\n    }\n    return instances;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowActionHandler.java", "function_name": "createStartForeachInstances", "index": 699, "label": 0}
{"input": "@Test\n  public void testGetAllLatestStepUuidFromAncestors() throws Exception {\n    si = loadObject(\"fixtures/instances/sample-step-instance-finishing.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    si = loadObject(\"fixtures/instances/sample-step-instance-failed.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    Map<String, String> res = stepDao.getAllLatestStepUuidFromAncestors(\"sample-dag-test-3\", 1L);\n    assertEquals(Collections.singletonMap(\"job1\", \"ff4ccce2-0fda-4882-9cd8-12ff90cb5f02\"), res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetAllLatestStepUuidFromAncestors", "index": 700, "label": 0}
{"input": "IntMaskSlotTypeNode(long mask) {\n      super(VmUtils.unavailableSourceSection());\n      this.mask = mask;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "IntMaskSlotTypeNode", "index": 701, "label": 0}
{"input": "StepInstanceAction(StepInstance.Status status, boolean usingUpstream) {\n      this.status = status;\n      this.usingUpstream = usingUpstream;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/Actions.java", "function_name": "StepInstanceAction", "index": 702, "label": 0}
{"input": "default BooleanParameter asBooleanParam() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as BOOLEAN\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/Parameter.java", "function_name": "asBooleanParam", "index": 703, "label": 0}
{"input": "private boolean renameFunctionByAddress(String functionAddrStr, String newName) {\n        Program program = getCurrentProgram();\n        if (program == null) return false;\n        if (functionAddrStr == null || functionAddrStr.isEmpty() || \n            newName == null || newName.isEmpty()) {\n            return false;\n        }\n        \n        AtomicBoolean success = new AtomicBoolean(false);\n        \n        try {\n            SwingUtilities.invokeAndWait(() -> {\n                performFunctionRename(program, functionAddrStr, newName, success);\n            });\n        } catch (InterruptedException | InvocationTargetException e) {\n            Msg.error(this, \"Failed to execute rename function on Swing thread\", e);\n        }\n        \n        return success.get();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "renameFunctionByAddress", "index": 704, "label": 0}
{"input": "@JsonIgnore\n  public StepInstance.Status getStepStatus() {\n    return StepInstance.Status.create(this.status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineStatusEvent.java", "function_name": "getStepStatus", "index": 705, "label": 0}
{"input": "public Builder removeMembers(int index) {\n                if (membersBuilder_ == null) {\n                    ensureMembersIsMutable();\n                    members_.remove(index);\n                    onChanged();\n                } else {\n                    membersBuilder_.remove(index);\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "removeMembers", "index": 706, "label": 0}
{"input": "public LlmService(ChatModel chatModel) {\n\n\t\tthis.chatModel = chatModel;\n\t\t\n\t\tthis.planningChatClient = ChatClient.builder(chatModel)\n\t\t\t.defaultAdvisors(new SimpleLoggerAdvisor())\n\t\t\t.defaultOptions(OpenAiChatOptions.builder().temperature(0.1).build())\n\t\t\t.build();\n\n\t\t\n\n\t\tthis.agentExecutionClient = ChatClient.builder(chatModel)\n\t\t\t\n\t\t\t.defaultAdvisors(new SimpleLoggerAdvisor())\n\t\t\t.defaultOptions(OpenAiChatOptions.builder().internalToolExecutionEnabled(false).build())\n\t\t\t.build();\n\n\t\tthis.finalizeChatClient = ChatClient.builder(chatModel)\n\t\t\t.defaultAdvisors(MessageChatMemoryAdvisor.builder(conversationMemory).build())\n\t\t\t.defaultAdvisors(new SimpleLoggerAdvisor())\n\t\t\t.build();\n\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/llm/LlmService.java", "function_name": "LlmService", "index": 707, "label": 0}
{"input": "@Test\n    public void test335() throws Exception {\n        \n        LOGGER.info(\"reslut:{}\", PositionUtils.getCol(\"A10\", null));\n        LOGGER.info(\"reslut:{}\", PositionUtils.getRow(\"A10\"));\n        LOGGER.info(\"reslut:{}\", PositionUtils.getCol(\"AB10\", null));\n        LOGGER.info(\"reslut:{}\", PositionUtils.getRow(\"AB10\"));\n        \n        \n        \n        \n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/Lock2Test.java", "function_name": "test335", "index": 708, "label": 0}
{"input": "@Test\n  public void testRangeKey() {\n    Assert.assertEquals(\"44C92\", IdHelper.rangeKey(1000000L));\n    Assert.assertEquals(\"71l9Zo9o\", IdHelper.rangeKey(100000000000L));\n    Assert.assertTrue(IdHelper.rangeKey(1000000L).compareTo(IdHelper.rangeKey(100000000000L)) < 0);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/IdHelperTest.java", "function_name": "testRangeKey", "index": 709, "label": 0}
{"input": "@Test\n  public void testStringInterpolationInStringArrayParam() {\n    Parameter param =\n        StringArrayParameter.builder()\n            .name(\"test\")\n            .value(new String[] {\"test $var\", \"test $var1\", \"test $var $var2\"})\n            .build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Arrays.asList(\"var\", \"var1\", \"var2\")), paramNames);\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertArrayEquals(new String[] {\"test 0\", \"test true\", \"test 0 2\"}, (String[]) result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testStringInterpolationInStringArrayParam", "index": 710, "label": 0}
{"input": "@Override\n  void afterRunning() {\n    getMetrics().counter(\"num_of_finished_tasks\", getClass());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/TaskActor.java", "function_name": "afterRunning", "index": 711, "label": 0}
{"input": "private SignalMatchDto toSignalMatch(SignalDependencies.SignalDependency dependency) {\n    String signalName = dependency.getName();\n    var paramMatches =\n        dependency.getMatchParams().entrySet().stream()\n            .map(\n                e ->\n                    new SignalMatchDto.ParamMatchDto(\n                        e.getKey(), e.getValue().getValue(), e.getValue().getOperator()))\n            .toList();\n    return new SignalMatchDto(signalName, paramMatches);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/handler/MaestroSignalHandler.java", "function_name": "toSignalMatch", "index": 712, "label": 0}
{"input": "public static HashSet<String> getImportList(GenTable genTable) {\n    List<GenTableColumn> columns = genTable.getColumns();\n    HashSet<String> importList = new HashSet<>();\n    for (GenTableColumn column : columns) {\n      if (!column.isSuperColumn() && GenConstants.TYPE_DATE.equals(column.getJavaType())) {\n        importList.add(\"java.util.Date\");\n        importList.add(\"com.fasterxml.jackson.annotation.JsonFormat\");\n      } else if (!column.isSuperColumn() && GenConstants.TYPE_BIGDECIMAL.equals(column.getJavaType())) {\n        importList.add(\"java.math.BigDecimal\");\n      } else if (!column.isSuperColumn() && \"imageUpload\".equals(column.getHtmlType())) {\n        importList.add(\"org.dromara.common.translation.annotation.Translation\");\n        importList.add(\"org.dromara.common.translation.constant.TransConstant\");\n      }\n    }\n    return importList;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "getImportList", "index": 713, "label": 0}
{"input": "@Autowired\n  public WorkflowInstanceActionController(\n      WorkflowInstanceActionHandler actionHandler,\n      StepInstanceActionHandler stepActionHandler,\n      User.UserBuilder callerBuilder) {\n    this.actionHandler = actionHandler;\n    this.stepActionHandler = stepActionHandler;\n    this.callerBuilder = callerBuilder;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowInstanceActionController.java", "function_name": "WorkflowInstanceActionController", "index": 714, "label": 0}
{"input": "public ResponseEntity<EmbeddingList> embeddings(EmbeddingRequest embeddingRequest) {\n\n\t\tAssert.notNull(embeddingRequest, \"The request body can not be null.\");\n\t\tAssert.notNull(embeddingRequest.input(), \"The input can not be null.\");\n\t\tAssert.isTrue(!CollectionUtils.isEmpty(embeddingRequest.input().texts()), \"The input texts can not be empty.\");\n\t\tAssert.isTrue(embeddingRequest.input().texts().size() <= 25, \"The input texts limit 25.\");\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(this.embeddingsPath)\n\t\t\t.headers(this::addDefaultHeadersIfMissing)\n\t\t\t.body(embeddingRequest)\n\t\t\t.retrieve()\n\t\t\t.toEntity(EmbeddingList.class);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "embeddings", "index": 715, "label": 0}
{"input": "private int jjMoveStringLiteralDfa8_0(long old0, long active0) {\n    if (((active0 &= old0)) == 0L) return jjStartNfa_0(6, old0, 0L);\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      jjStopStringLiteralDfa_0(7, active0, 0L);\n      return 8;\n    }\n    switch (curChar) {\n      case 100:\n        if ((active0 & 0x200000000000L) != 0L) return jjStartNfaWithStates_0(8, 45, 28);\n        break;\n      case 101:\n        if ((active0 & 0x4000000000L) != 0L) return jjStartNfaWithStates_0(8, 38, 28);\n        break;\n      case 105:\n        return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);\n      case 111:\n        return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);\n      case 116:\n        if ((active0 & 0x100000000000000L) != 0L) return jjStartNfaWithStates_0(8, 56, 28);\n        return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);\n      default:\n        break;\n    }\n    return jjStartNfa_0(7, active0, 0L);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa8_0", "index": 716, "label": 0}
{"input": "@Test\n    public void t04WriteExcelNo() throws Exception {\n        IntStream.rangeClosed(0, 10000).forEach(index -> {\n            ExcelWriter excelWriter = EasyExcel.write(fileWriteTemp07, cn.idev.excel.test.core.large.LargeData.class)\n                    .build();\n            WriteSheet writeSheet = EasyExcel.writerSheet().build();\n            for (int j = 0; j < 50; j++) {\n                excelWriter.write(data(), writeSheet);\n            }\n            excelWriter.finish();\n            LOGGER.info(\"{} 完成\", index);\n        });\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/large/TempLargeDataTest.java", "function_name": "t04WriteExcelNo", "index": 717, "label": 0}
{"input": "@Bean\n  public SignalInstanceProcessor signalInstanceProcessor(\n      MaestroSignalBrokerDao brokerDao, SignalQueueProducer producer, MaestroMetrics metrics) {\n    LOG.info(\"Creating signalInstanceProcessor within Spring boot...\");\n    return new SignalInstanceProcessor(brokerDao, producer, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "signalInstanceProcessor", "index": 718, "label": 0}
{"input": "@Test\n    public void testxls() throws Exception {\n        File file = new File(\"D:\\\\test\\\\dataformat.xls\");\n        \n        List<DataFormatData> list = EasyExcel.read(file, DataFormatData.class, null).sheet().headRowNumber(0)\n                .doReadSync();\n        LOGGER.info(\"数据：{}\", list.size());\n        for (DataFormatData data : list) {\n            Short dataFormat = data.getDate().getDataFormatData().getIndex();\n            \n            String dataFormatString = data.getDate().getFormulaData().getFormulaValue();\n            \n            if (dataFormat == null || dataFormatString == null) {\n            \n            } else {\n                LOGGER.info(\"格式化：{};{}：{}\", dataFormat, dataFormatString,\n                        DateUtil.isADateFormat(dataFormat, dataFormatString));\n            }\n            \n            LOGGER.info(\"返回数据：{}\", JSON.toJSONString(data));\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatTest.java", "function_name": "testxls", "index": 719, "label": 0}
{"input": "@Test\n  public void testStringMapParameter() {\n    StringMapParameter param =\n        StringMapParameter.builder()\n            .name(\"stringMapParam\")\n            .expression(\"m = new Map(); m.put('abc','def'); return m;\")\n            .evaluatedResult(Collections.singletonMap(\"abc\", \"def\"))\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asStringMapParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testStringMapParameter", "index": 720, "label": 0}
{"input": "@Override\n  default int compareTo(TimelineEvent o) {\n    return getTimestamp().compareTo(o.getTimestamp());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineEvent.java", "function_name": "compareTo", "index": 721, "label": 0}
{"input": "@VisibleForTesting\n  void initializeForeachArtifactRollup(\n      ForeachStepOverview foreachOverview,\n      ForeachStepOverview prevForeachOverview,\n      String foreachWorkflowId) {\n    Set<Long> iterationsToRunInNewRun =\n        foreachOverview.getIterationsToRunFromDetails(prevForeachOverview);\n    WorkflowRollupOverview aggregatedRollupsPrevRun =\n        getAggregatedRollupFromIterations(foreachWorkflowId, iterationsToRunInNewRun);\n\n    foreachOverview.initiateStepRollup(prevForeachOverview.getRollup(), aggregatedRollupsPrevRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "initializeForeachArtifactRollup", "index": 722, "label": 0}
{"input": "@ApiOperation(value = \"提交图生图、混图任务\")\n    @PostMapping(\"/blend\")\n    public String blend(@RequestBody SubmitBlendDTO blendDTO) {\n        chatCostService.taskDeduct(\"mj\",\"blend\", 0.0);\n        String jsonStr = JSONUtil.toJsonStr(blendDTO);\n        String url = \"mj/submit/blend\";\n        Request request = mjOkHttpUtil.createPostRequest(url, jsonStr);\n        return mjOkHttpUtil.executeRequest(request);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/tripartite/SubmitController.java", "function_name": "blend", "index": 723, "label": 0}
{"input": "private <T> List<T> payloadsFromResult(ResultSet result, Class<T> clazz) throws SQLException {\n    List<T> results = new ArrayList<>();\n    while (result.next()) {\n      String payload = result.getString(PAYLOAD_COLUMN);\n      if (payload != null && !payload.isEmpty()) {\n        results.add(fromJson(payload, clazz));\n      }\n    }\n    return results;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "payloadsFromResult", "index": 724, "label": 0}
{"input": "@ExceptionHandler(value = {MaestroBadRequestException.class})\n  protected ResponseEntity<Object> handleWorkflowBadRequestException(\n      MaestroBadRequestException e, WebRequest request) {\n    LOG.info(\"Handle WorkflowBadRequestException with a message: {}\", e.getMessage());\n    return buildDetailedResponse(\n        e, e.getErrors(), HttpStatus.valueOf(e.getHttpStatusCode()), request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleWorkflowBadRequestException", "index": 725, "label": 0}
{"input": "private void updateUIForConnectingState() {\n        binding.stateText.setText(R.string.connecting);\n        binding.publicIP.setVisibility(View.GONE);\n        binding.ipProgressBar.setVisibility(View.VISIBLE);\n        binding.switchButton.setChecked(true, false);\n        binding.switchButton.setEnabled(true);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "updateUIForConnectingState", "index": 726, "label": 0}
{"input": "@Override\n    public void switchUser(String wxId) {\n        FileUtil.writeString(wxId, getUserConfigPath(), \"UTF-8\");\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "switchUser", "index": 727, "label": 0}
{"input": "@Test\n  public void testStringToParam() {\n    Parameter param = SignalParamValue.of(\"bar\").toParam(\"foo\");\n    Assert.assertTrue(param.isEvaluated());\n    Assert.assertTrue(param.isLiteral());\n    Assert.assertEquals(ParamType.STRING, param.getType());\n    Assert.assertEquals(\"foo\", param.getName());\n    Assert.assertEquals(\"bar\", param.asStringParam().getValue());\n    Assert.assertEquals(\"bar\", param.asStringParam().getEvaluatedResult());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalParamValueTest.java", "function_name": "testStringToParam", "index": 728, "label": 0}
{"input": "private void updateStepBreakpointBuilderWithMatchAllHelper(\n      ResultSet rs, StepBreakpoint.StepBreakpointBuilder builder) throws SQLException {\n    long version = rs.getLong(VERSION);\n    long instanceId = rs.getLong(INSTANCE_ID);\n    long runId = rs.getLong(RUN_ID);\n    long stepAttemptId = rs.getLong(STEP_ATTEMPT_ID);\n    builder.workflowVersionId(version == Constants.MATCH_ALL_WORKFLOW_VERSIONS ? null : version);\n    builder.workflowInstanceId(\n        instanceId == Constants.MATCH_ALL_WORKFLOW_INSTANCES ? null : instanceId);\n    builder.workflowRunId(runId == Constants.MATCH_ALL_RUNS ? null : runId);\n    builder.stepAttemptId(\n        stepAttemptId == Constants.MATCH_ALL_STEP_ATTEMPTS ? null : stepAttemptId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDao.java", "function_name": "updateStepBreakpointBuilderWithMatchAllHelper", "index": 729, "label": 0}
{"input": "@Test\n  public void isStepDuplicate() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    Workflow workflow = Workflow.builder().steps(Arrays.asList(step, step)).build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\"[workflow step definitions] contain duplicate step ids\", violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isStepDuplicate", "index": 730, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidAssignOpType() {\n    SelString.of(\"foo\").assignOps(SelOp.ASSIGN, SelLong.of(123));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidAssignOpType", "index": 731, "label": 0}
{"input": "@Test\n  public void testRunForActionStartGroupWithAnException() {\n    when(context.getFlowsFrom(any(), anyLong(), any())).thenReturn(null);\n    groupActor.runForAction(Action.GROUP_START);\n\n    verify(context, times(1)).getFlowsFrom(any(), anyLong(), any());\n    verify(context, times(1)).schedule(any(), anyLong());\n    assertEquals(Set.of(Action.GROUP_START), groupActor.getScheduledActions().keySet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/GroupActorTest.java", "function_name": "testRunForActionStartGroupWithAnException", "index": 732, "label": 0}
{"input": "@Test\n  public void testValidOutputParameters() {\n    Map<String, Parameter> runtimeParams = new HashMap<>();\n    runtimeParams.put(\n        \"str_param\",\n        StringParameter.builder()\n            .name(\"str_param\")\n            .value(\"v1\")\n            .evaluatedResult(\"v1\")\n            .mode(ParamMode.MUTABLE)\n            .evaluatedTime(System.currentTimeMillis())\n            .build());\n    setupOutputDataDao();\n    runtimeSummary = runtimeSummaryBuilder().artifacts(artifacts).params(runtimeParams).build();\n    outputDataManager.validateAndMergeOutputParams(runtimeSummary);\n    assertEquals(\"hello\", runtimeSummary.getParams().get(\"str_param\").asString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "testValidOutputParameters", "index": 733, "label": 0}
{"input": "private boolean jj_3R_63() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_68()) {\n      jj_scanpos = xsp;\n      if (jj_3R_69()) {\n        jj_scanpos = xsp;\n        if (jj_3R_70()) return true;\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_63", "index": 734, "label": 0}
{"input": "@Test\n  public void put() {\n    state.put(\"foo\", SelString.of(\"bar\"));\n    SelType res = state.get(\"foo\");\n    assertEquals(\"STRING: bar\", res.type() + \": \" + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "put", "index": 735, "label": 0}
{"input": "void validateSignalName(String signalName) {\n    boolean exist = false;\n    if (signalTriggers != null && !signalTriggers.isEmpty()) {\n      exist = signalTriggers.stream().anyMatch(s -> s.getDefinition().containsKey(signalName));\n    }\n    Checks.checkTrue(\n        exist,\n        \"Signal name [%s] does not exist in the signal trigger definition for workflow [%s]\",\n        signalName,\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/InstanceWrapper.java", "function_name": "validateSignalName", "index": 736, "label": 0}
{"input": "private void fill(File file, File template) {\n        FillData fillData = new FillData();\n        fillData.setName(\"Zhang San\");\n        fillData.setNumber(5.2);\n        EasyExcel.write(file, FillData.class).withTemplate(template).sheet().doFill(fillData);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "364e027f00a9abecb0b4938391ec6f6adfc60aea", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/fill/FillDataTest.java", "function_name": "fill", "index": 737, "label": 0}
{"input": "public RollupAggregationHelperTest() {\n    this.rollupAggregationHelper = new RollupAggregationHelper(stepInstanceDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/RollupAggregationHelperTest.java", "function_name": "RollupAggregationHelperTest", "index": 738, "label": 0}
{"input": "@Test\n  public void testProcessStartWithMaestroResourceConflictException() throws Exception {\n    SignalTriggerExecution execution =\n        loadObject(\"fixtures/sample-signal-trigger-execution.json\", SignalTriggerExecution.class);\n    execution.setCondition(\"135 > 2\");\n    Supplier<SignalTriggerExecution> messageSupplier = () -> execution;\n    when(actionHandler.start(any(), any(), any()))\n        .thenThrow(mock(MaestroResourceConflictException.class));\n    processor.process(messageSupplier);\n    verify(actionHandler, times(1)).start(any(), any(), any());\n    verify(brokerDao, times(1)).deleteTrigger(any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_EXECUTION_FAILURE,\n                SignalTriggerExecutionProcessor.class,\n                MetricConstants.TYPE_TAG,\n                \"conflict\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerExecutionProcessorTest.java", "function_name": "testProcessStartWithMaestroResourceConflictException", "index": 739, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceOutputSignals() {\n    Map<StepOutputsDefinition.StepOutputType, StepOutputs> signals =\n        stepDao.getStepOutputs(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    assertEquals(\n        2,\n        signals\n            .get(StepOutputsDefinition.StepOutputType.SIGNAL)\n            .asSignalStepOutputs()\n            .getOutputs()\n            .size());\n    Map<StepOutputsDefinition.StepOutputType, StepOutputs> latest =\n        stepDao.getStepOutputs(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"latest\");\n    assertEquals(signals, latest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceOutputSignals", "index": 740, "label": 0}
{"input": "public static String generateFilenameFromTitle(String title, String extension) {\n\t\tif (title == null || title.trim().isEmpty()) {\n\t\t\treturn DEFAULT_FILENAME + \".\" + extension;\n\t\t}\n\n\t\tString cleanTitle = title.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"\").trim();\n\n\t\tcleanTitle = cleanTitle.replaceAll(\"\\\\s+\", \"_\");\n\n\t\tif (cleanTitle.isEmpty()) {\n\t\t\tcleanTitle = DEFAULT_FILENAME;\n\t\t}\n\n\t\tif (cleanTitle.length() > 50) {\n\t\t\tcleanTitle = cleanTitle.substring(0, 50);\n\t\t}\n\n\t\treturn cleanTitle + \".\" + extension;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FileOperationUtil.java", "function_name": "generateFilenameFromTitle", "index": 741, "label": 0}
{"input": "@Test(expected = ApplicationException.class)\n  public void testDuplicate() {\n    WorkflowDef wfd = new WorkflowDef();\n    wfd.setName(\"foo\");\n    wfd.setVersion(1);\n\n    dao.createWorkflowDef(wfd);\n    dao.createWorkflowDef(wfd);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAOTest.java", "function_name": "testDuplicate", "index": 742, "label": 0}
{"input": "public PromptTemplate.Builder configure(PromptTemplate.Builder promptTemplateBuilder) {\n\t\tapplyCustomizers(promptTemplateBuilder);\n\t\treturn promptTemplateBuilder;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57c9ddbb8f0c222fa73a69fa8ca0cd63deace926", "file_path": "spring-ai-alibaba-prompt/spring-ai-alibaba-prompt-nacos/src/main/java/com/alibaba/cloud/ai/prompt/PromptTemplateBuilderConfigure.java", "function_name": "configure", "index": 743, "label": 0}
{"input": "private boolean jj_3R_97() {\n    if (jj_scan_token(COMMA)) return true;\n    if (jj_3R_21()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_97", "index": 744, "label": 0}
{"input": "public ExprEvaluator(SelProperties properties, @Nullable MaestroParamExtensionRepo repo) {\n    this.properties = properties;\n    this.extensionRepo = repo;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ExprEvaluator.java", "function_name": "ExprEvaluator", "index": 745, "label": 0}
{"input": "@Override\n\tpublic List<AgentModel> loadModels() {\n\t\treturn modelSet.getOrDefault(MODELS_ORER_AGENT, List.of());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/repository/ModelParamRepositoryImpl.java", "function_name": "loadModels", "index": 746, "label": 0}
{"input": "@Override\n    public List<CountRecentMsgsVO> countRecentMsgs() {\n        return msgRepository.countRecentMsgs();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DashboardServiceImpl.java", "function_name": "countRecentMsgs", "index": 747, "label": 0}
{"input": "@JsonIgnore\n  public static TimelineLogEvent warn(String template, Object... args) {\n    return TimelineLogEvent.builder().level(Level.WARN).message(template, args).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineLogEvent.java", "function_name": "warn", "index": 748, "label": 0}
{"input": "@Override\n  public void addInterceptors(InterceptorRegistry registry) {\n    registry.addInterceptor(userInfoInterceptor).addPathPatterns(\"/api/v3/workflows/**\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroInterceptorMvcConfig.java", "function_name": "addInterceptors", "index": 749, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.publisher.type\", havingValue = \"sqs\")\n  public MaestroJobEventPublisher sqsMaestroJobEventPublisher(\n      @Qualifier(MAESTRO_AWS_SQS_SYNC) AmazonSQS amazonSqs,\n      ObjectMapper objectMapper,\n      AwsProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating sqsMaestroJobEventPublisher within Spring boot...\");\n    return new SqsMaestroJobEventPublisher(amazonSqs, objectMapper, props.getSqs(), metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsMaestroJobEventPublisher", "index": 750, "label": 0}
{"input": "private int getIndex(\n      StringBuilder fields, String fieldName, List<StatementPreparer> preparers, Object data) {\n    if (data == null) {\n      return 0;\n    }\n    fields.append(fieldName);\n    return preparers.size() + 1;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getIndex", "index": 751, "label": 0}
{"input": "@Bean(name = AliyunAiSearchConstants.TOOL_NAME)\n\t@ConditionalOnMissingBean\n\t@Description(\"Aliyun AI Web Search Service\")\n\tpublic AliyunAiSearchService aliyunAiSearchService(JsonParseTool jsonParseTool,\n\t\t\tAliyunAiSearchProperties properties) {\n\t\treturn new AliyunAiSearchService(\n\t\t\t\tWebClientTool.builder(jsonParseTool, properties).httpHeadersConsumer(httpHeaders -> {\n\t\t\t\t\thttpHeaders.add(\"Content-Type\", \"application/json\");\n\t\t\t\t\thttpHeaders.add(\"Authorization\", \"Bearer \" + properties.getApiKey());\n\t\t\t\t}).build(), jsonParseTool, properties);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-aliyunaisearch/src/main/java/com/alibaba/cloud/ai/toolcalling/aliyunaisearch/AliyunAiSearchAutoConfiguration.java", "function_name": "aliyunAiSearchService", "index": 752, "label": 0}
{"input": "public McpAssignNodeAutoConfiguration(McpAssignNodeProperties mcpAssignNodeProperties,\n\t\t\tResourceLoader resourceLoader, ObjectMapper objectMapper,\n\t\t\tObjectProvider<WebClient.Builder> webClientBuilderProvider) {\n\t\tthis.mcpAssignNodeProperties = mcpAssignNodeProperties;\n\t\tthis.resourceLoader = resourceLoader;\n\t\tthis.objectMapper = objectMapper;\n\t\tthis.webClientBuilderProvider = webClientBuilderProvider;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cbed5bdb8a096b49ce533dee99795750da26fd10", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/McpAssignNodeAutoConfiguration.java", "function_name": "McpAssignNodeAutoConfiguration", "index": 753, "label": 0}
{"input": "@Test\n  public void testDynamicOutputArtifact() throws Exception {\n    Artifacts artifactMap = loadObject(\"fixtures/artifact/sample-artifacts.json\", Artifacts.class);\n    DynamicOutputArtifact dynamicOutputArtifact =\n        artifactMap.getArtifacts().get(Artifact.Type.DYNAMIC_OUTPUT.key()).asDynamicOutput();\n    assertEquals(1, dynamicOutputArtifact.getOutputs().size());\n    assertEquals(\n        1,\n        dynamicOutputArtifact.getOutputs().get(StepOutputsDefinition.StepOutputType.SIGNAL).size());\n    assertEquals(\n        \"demo_table\",\n        dynamicOutputArtifact.getOutputSignals().getFirst().getEvaluatedResult().get(\"name\"));\n    assertEquals(\n        1536787990L,\n        dynamicOutputArtifact.getOutputSignals().getFirst().getEvaluatedResult().get(\"timestamp\"));\n    assertEquals(\"sample info log\", dynamicOutputArtifact.getInfo().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/artifact/DynamicOutputArtifactTest.java", "function_name": "testDynamicOutputArtifact", "index": 754, "label": 0}
{"input": "private static @Nullable String getLastIdText(@Nullable Type type) {\n    if (!(type instanceof DeclaredType declType)) return null;\n    var identifiers = declType.getName().getIdentifiers();\n    return identifiers.get(identifiers.size() - 1).getValue();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/MinPklVersionChecker.java", "function_name": "getLastIdText", "index": 755, "label": 0}
{"input": "@Test\n  public void testWorkflowFinalizedTimedOut() {\n    when(workflow.getStatus()).thenReturn(Workflow.WorkflowStatus.TIMED_OUT);\n    when(instanceDao.getWorkflowInstanceStatus(eq(\"test-workflow-id\"), anyLong(), anyLong()))\n        .thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    statusListener.onWorkflowFinalized(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowFinalized\",\n                \"status\",\n                \"TIMED_OUT\")\n            .count());\n    verify(instanceDao, times(1))\n        .updateWorkflowInstance(\n            any(), any(), any(), eq(WorkflowInstance.Status.TIMED_OUT), anyLong());\n    verify(publisher, times(1)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowFinalizedTimedOut", "index": 756, "label": 0}
{"input": "public Builder setMembers(\n                    int index, Member.Builder builderForValue) {\n                if (membersBuilder_ == null) {\n                    ensureMembersIsMutable();\n                    members_.set(index, builderForValue.build());\n                    onChanged();\n                } else {\n                    membersBuilder_.setMessage(index, builderForValue.build());\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setMembers", "index": 757, "label": 0}
{"input": "public BranchNode(String outputKey, String inputKey) {\n\t\tif (!StringUtils.hasLength(inputKey) || !StringUtils.hasLength(outputKey)) {\n\t\t\tthrow new IllegalArgumentException(\"inputKey and outputKey must not be null or empty.\");\n\t\t}\n\t\tthis.inputKey = inputKey;\n\t\tthis.outputKey = outputKey;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "869092459902221b156926f54eac86afdd48b375", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/node/BranchNode.java", "function_name": "BranchNode", "index": 758, "label": 0}
{"input": "public ReportRedisService(RedisTemplate<String, Object> redisTemplate) {\n\t\tthis.redisTemplate = redisTemplate;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a3c2939eb807669bddfe6b771b4cef43ffc29a93", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/service/ReportRedisService.java", "function_name": "ReportRedisService", "index": 759, "label": 0}
{"input": "@Test\n  public void testRoundTripSerde() throws Exception {\n    WorkflowTimeline expected =\n        loadObject(\"fixtures/timeline/workflow-timeline.json\", WorkflowTimeline.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    WorkflowTimeline actual =\n        MAPPER.readValue(MAPPER.writeValueAsString(expected), WorkflowTimeline.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(expected, actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/timeline/WorkflowTimelineTest.java", "function_name": "testRoundTripSerde", "index": 760, "label": 0}
{"input": "private static int getResourceIdByName(String name, String type) {\n        return ApplicationLoader.getAppCtx().getResources().getIdentifier(\n                name,\n                type,\n                ApplicationLoader.getAppCtx().getPackageName()\n        );\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocalController.java", "function_name": "getResourceIdByName", "index": 761, "label": 0}
{"input": "@Test\n  public void testResumeFlowWithPrepare() {\n    Task prepare = flow.newTask(new TaskDef(\"prepare\", \"noop\", null, null), true);\n    flow.setPrepareTask(prepare);\n    prepare.setStatus(Task.Status.COMPLETED);\n    when(executionPreparer.resume(flow)).thenReturn(true);\n\n    context.resumeFlow(flow);\n    verify(executionPreparer, times(1)).resume(flow);\n    verify(flowTask, times(1)).execute(flow, prepare);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testResumeFlowWithPrepare", "index": 762, "label": 0}
{"input": "public FrameDescriptor.Builder newForGeneratorMemberDescriptorBuilder() {\n      return this instanceof ForGeneratorScope forScope\n          ? newFrameDescriptorBuilder(forScope.buildMemberDescriptor())\n          : FrameDescriptor.newBuilder();\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "newForGeneratorMemberDescriptorBuilder", "index": 763, "label": 0}
{"input": "private CSVParser csvParser() throws IOException {\n        \n        CsvReadWorkbookHolder csvReadWorkbookHolder = csvReadContext.csvReadWorkbookHolder();\n        \n        CSVFormat csvFormat = csvReadWorkbookHolder.getCsvFormat();\n        \n        ByteOrderMarkEnum byteOrderMark = ByteOrderMarkEnum.valueOfByCharsetName(\n            csvReadContext.csvReadWorkbookHolder().getCharset().name());\n\n        \n        if (csvReadWorkbookHolder.getMandatoryUseInputStream()) {\n            return buildCsvParser(csvFormat, csvReadWorkbookHolder.getInputStream(), byteOrderMark);\n        }\n\n        \n        if (csvReadWorkbookHolder.getFile() != null) {\n            return buildCsvParser(csvFormat, Files.newInputStream(csvReadWorkbookHolder.getFile().toPath()),\n                byteOrderMark);\n        }\n\n        \n        return buildCsvParser(csvFormat, csvReadWorkbookHolder.getInputStream(), byteOrderMark);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "60de358d397aba88a92e834c053773b5203d0089", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/csv/CsvExcelReadExecutor.java", "function_name": "csvParser", "index": 764, "label": 0}
{"input": "private static ExcelContentProperty doGetExcelContentProperty(Class<?> clazz, Class<?> headClass, String fieldName,\n            ConfigurationHolder configurationHolder) {\n        ExcelContentProperty excelContentProperty = Optional.ofNullable(\n                declaredFieldContentMap(clazz, configurationHolder)).map(map -> map.get(fieldName)).orElse(null);\n        ExcelContentProperty headExcelContentProperty = Optional.ofNullable(\n                declaredFieldContentMap(headClass, configurationHolder)).map(map -> map.get(fieldName)).orElse(null);\n        ExcelContentProperty combineExcelContentProperty = new ExcelContentProperty();\n        \n        combineExcelContentProperty(combineExcelContentProperty, headExcelContentProperty);\n        if (clazz != headClass) {\n            combineExcelContentProperty(combineExcelContentProperty, excelContentProperty);\n        }\n        return combineExcelContentProperty;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/ClassUtils.java", "function_name": "doGetExcelContentProperty", "index": 765, "label": 0}
{"input": "public String loadPrompt(String promptPath) {\n\t\treturn promptCache.computeIfAbsent(promptPath, this::loadPromptFromResource);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/prompt/PromptLoader.java", "function_name": "loadPrompt", "index": 766, "label": 0}
{"input": "@Test\n  public void testFlowFinalizedTerminated() {\n    when(flow.getStatus()).thenReturn(Flow.Status.TERMINATED);\n    when(instanceDao.getWorkflowInstanceStatus(eq(\"test-workflow-id\"), anyLong(), anyLong()))\n        .thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    statusListener.onFlowFinalized(flow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowFinalized\",\n                \"status\",\n                \"TERMINATED\")\n            .count());\n    verify(instanceDao, times(1))\n        .updateWorkflowInstance(\n            any(), any(), any(), eq(WorkflowInstance.Status.STOPPED), anyLong());\n    verify(publisher, times(1)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testFlowFinalizedTerminated", "index": 767, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeCron() throws Exception {\n    TimeTrigger expected =\n        loadObject(\"fixtures/time_triggers/sample-cron-time-trigger.json\", TimeTrigger.class);\n    assertEquals(TimeTrigger.Type.CRON, expected.getType());\n    String ser1 = MAPPER.writeValueAsString(expected);\n    TimeTrigger actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), TimeTrigger.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(ser1, ser2);\n    assertEquals(\"US/Pacific\", actual.getTimezone());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/trigger/TimeTriggerTest.java", "function_name": "testRoundTripSerdeCron", "index": 768, "label": 0}
{"input": "public static boolean isInternalDateFormat(short format) {\n        switch (format) {\n            \n            \n            \n            case 0x0e:\n            case 0x0f:\n            case 0x10:\n            case 0x11:\n            case 0x12:\n            case 0x13:\n            case 0x14:\n            case 0x15:\n            case 0x16:\n                \n            case 0x2d:\n            case 0x2e:\n            case 0x2f:\n                return true;\n        }\n        return false;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/DateUtils.java", "function_name": "isInternalDateFormat", "index": 769, "label": 0}
{"input": "@Test\n  public void testToStepInstanceActionResponse() {\n    Mockito.when(stepInstance.getStepId()).thenReturn(\"test-step\");\n    Mockito.when(stepInstance.getWorkflowId()).thenReturn(\"test-workflow\");\n    Mockito.when(stepInstance.getWorkflowInstanceId()).thenReturn(123L);\n    Mockito.when(stepInstance.getWorkflowRunId()).thenReturn(2L);\n    RunResponse res = RunResponse.from(stepInstance, TimelineLogEvent.info(\"bar\"));\n    StepInstanceActionResponse response = res.toStepInstanceActionResponse();\n    Assert.assertEquals(\"test-workflow\", response.getWorkflowId());\n    Assert.assertEquals(123, response.getWorkflowInstanceId());\n    Assert.assertEquals(2, response.getWorkflowRunId());\n    Assert.assertEquals(\"test-step\", response.getStepId());\n    Assert.assertEquals(1, response.getStepAttemptId().intValue());\n    Assert.assertEquals(\"bar\", response.getTimelineEvent().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunResponseTest.java", "function_name": "testToStepInstanceActionResponse", "index": 770, "label": 0}
{"input": "public boolean performAction(int index, ElementAction action) {\n\t\tOptional<InteractiveElement> elementOpt = getElementById(index);\n\t\tif (elementOpt.isPresent()) {\n\t\t\tInteractiveElement element = elementOpt.get();\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\taction.execute(element);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlog.error(\"Error performing element action: {}\", e.getMessage());\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tlog.warn(\"Element with index {} not found\", index);\n\t\treturn false;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/InteractiveElementRegistry.java", "function_name": "performAction", "index": 771, "label": 0}
{"input": "private FullToken nextComment() {\n    prev = _lookahead;\n    _lookahead = forceNextComment();\n    lookahead = _lookahead.token;\n    spanLookahead = _lookahead.span;\n    return prev;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "nextComment", "index": 772, "label": 0}
{"input": "private Map<String, Object> filterAndConvertToMap(Map<String, Parameter> params) {\n    return params.entrySet().stream()\n        .filter(p -> !EXCLUDED_PARAMS.contains(p.getKey()) && !isEmptyString(p.getValue()))\n        .collect(MapHelper.toListMap(Map.Entry::getKey, e -> e.getValue().getEvaluatedResult()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilder.java", "function_name": "filterAndConvertToMap", "index": 773, "label": 0}
{"input": "public void heartbeatGroup(FlowGroup group) {\n    boolean valid = flowDao.heartbeatGroup(group);\n    if (!valid) {\n      LOG.error(\"heartbeat detects an invalid ownership for [{}]. Kill JVM to reconcile.\", group);\n      Runtime.getRuntime().halt(Constants.INVALID_OWNERSHIP_EXIT_CODE);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "heartbeatGroup", "index": 774, "label": 0}
{"input": "private Map<String, Parameter> loadParams(String param) throws JsonProcessingException {\n    return MAPPER.readValue(param, paramMap);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "loadParams", "index": 775, "label": 0}
{"input": "@Test\n  public void testMarkTimedout() {\n    flow.markTimedout();\n    assertEquals(Flow.Status.TIMED_OUT, flow.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/models/FlowTest.java", "function_name": "testMarkTimedout", "index": 776, "label": 0}
{"input": "@Test\n  public void testMatchSignalForStepDependencyWithoutParams() {\n    SignalMatchDto matchDto = new SignalMatchDto(\"signal_a\", null);\n    brokerDao.matchSignalForStepDependency(matchDto);\n    verify(paramDao, times(0)).matchSignalDependency(matchDto);\n    verify(instanceDao, times(1)).matchSignalDependency(matchDto);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testMatchSignalForStepDependencyWithoutParams", "index": 777, "label": 0}
{"input": "private String buildExtraArguments(MapParameter notebookParams) {\n    ArrayList<String> extraArgs = new ArrayList<>();\n    if (notebookParams.containsParam(NotebookConstants.PAPERMILL_ARG_PARAM)) {\n      String[] userArgs =\n          notebookParams.getEvaluatedParam(NotebookConstants.PAPERMILL_ARG_PARAM).asStringArray();\n      List<String> userArgsList = Arrays.stream(userArgs).map(String::trim).toList();\n      extraArgs.addAll(userArgsList);\n    }\n    if (!extraArgs.contains(NotebookConstants.START_TIMEOUT_ARG)) {\n      extraArgs.add(NotebookConstants.START_TIMEOUT_ARG);\n      extraArgs.add(Long.toString(NotebookConstants.START_TIMEOUT_DEFAULT));\n    }\n    return extraArgs.stream()\n        .map(this::quoteBashCommandArg)\n        .collect(Collectors.joining(NotebookConstants.PARAM_DELIMITER));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilder.java", "function_name": "buildExtraArguments", "index": 778, "label": 0}
{"input": "private TypeAnnotation parseTypeAnnotation() {\n    var start = expect(Token.COLON, \"unexpectedToken\", \":\").span;\n    var type = parseType();\n    return new TypeAnnotation(type, start.endWith(type.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseTypeAnnotation", "index": 779, "label": 0}
{"input": "@Override\n\tpublic void postProcess(VariableAggregatorNodeData data, String varName) {\n\t\tString origKey = data.getOutputKey();\n\t\tString newKey = varName + \"_output\";\n\n\t\tif (origKey == null) {\n\t\t\tdata.setOutputKey(newKey);\n\t\t}\n\t\tdata.setOutputs(List.of(new com.alibaba.cloud.ai.model.Variable(data.getOutputKey(), data.getOutputType())));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "4db47ffe34d685ee07c907ac185b430ab16bd55e", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/dsl/nodes/VariableAggregatorNodeDataConverter.java", "function_name": "postProcess", "index": 780, "label": 0}
{"input": "private boolean jj_3R_54() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_61()) {\n      jj_scanpos = xsp;\n      if (jj_3R_62()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_54", "index": 781, "label": 0}
{"input": "@Test\n  public void testWithOutputPath() {\n    PapermillCommand papermillCommand =\n        papermillEntrypointBuilder.generatePapermillRuntime(context);\n    String entrypoint = papermillCommand.entrypoint();\n    assertTrue(entrypoint.contains(\"'s3://path/someplace/nice.ipynb'\"));\n    assertFalse(papermillCommand.outputPath().contains(\"'s3://path/someplace/nice.ipynb'\"));\n    assertTrue(papermillCommand.outputPath().contains(\"s3://path/someplace/nice.ipynb\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilderTest.java", "function_name": "testWithOutputPath", "index": 782, "label": 0}
{"input": "public MessageDto enqueue(MaestroJobEvent jobEvent, long validUntil) {\n    String msgId = jobEvent.deriveMessageKey();\n    String jobStr = toJson(jobEvent);\n    long curTime = System.currentTimeMillis();\n    return withMetricLogError(\n        () -> {\n          int res =\n              withRetryableUpdate(\n                  ENQUEUE_MSG_QUERY,\n                  stmt -> {\n                    int idx = 0;\n                    stmt.setInt(++idx, jobEvent.getType().getQueueId());\n                    stmt.setLong(++idx, validUntil);\n                    stmt.setString(++idx, msgId);\n                    stmt.setString(++idx, jobStr);\n                    stmt.setLong(++idx, curTime);\n                  });\n          if (res == SUCCESS_WRITE_SIZE) {\n            return new MessageDto(validUntil, msgId, jobEvent, curTime);\n          }\n          return null;\n        },\n        \"enqueue\",\n        \"Failed to enqueue the job event [{}]\",\n        jobEvent);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/dao/MaestroQueueDao.java", "function_name": "enqueue", "index": 783, "label": 0}
{"input": "default BooleanParamDefinition asBooleanParamDef() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as BOOLEAN\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "asBooleanParamDef", "index": 784, "label": 0}
{"input": "@Autowired(required = false)\n    public SSEEventSourceListener(SseEmitter emitter,Long userId,Long sessionId) {\n        this.emitter = emitter;\n        this.userId = userId;\n        this.sessionId = sessionId;\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/listener/SSEEventSourceListener.java", "function_name": "SSEEventSourceListener", "index": 785, "label": 0}
{"input": "@Test\n  public void testFromInstanceAndRequest() throws Exception {\n    WorkflowInstance instance =\n        loadObject(\n            \"fixtures/instances/sample-workflow-instance-created.json\", WorkflowInstance.class);\n    RunRequest runRequest =\n        RunRequest.builder()\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .requester(User.create(\"tester1\"))\n            .build();\n    InstanceWrapper instanceWrapper = InstanceWrapper.from(instance, runRequest);\n    assertEquals(runRequest.getInitiator(), instanceWrapper.getInitiator());\n    assertTrue(instanceWrapper.isWorkflowParam());\n    assertNull(instanceWrapper.getInitiatorTimeZone());\n    assertEquals(runRequest.getCurrentPolicy().name(), instanceWrapper.getRunPolicy());\n    assertEquals(\n        instance.getRunProperties().getOwner().getName(), instanceWrapper.getWorkflowOwner());\n    assertNull(instanceWrapper.getFirstTimeTriggerTimeZone());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/InstanceWrapperTest.java", "function_name": "testFromInstanceAndRequest", "index": 786, "label": 0}
{"input": "public static ResourceReader externalResolver(\n      ResourceReaderSpec spec, ExternalResourceResolver resolver) {\n    return new ExternalResolver(spec, resolver);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "52a86d3f329d264b9b9a8e0f9f3a6df39165bbfb", "file_path": "pkl-core/src/main/java/org/pkl/core/resource/ResourceReaders.java", "function_name": "externalResolver", "index": 787, "label": 0}
{"input": "@JsonIgnore\n    public boolean isRestartable() {\n      return terminal && !complete && !retryable;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepInstance.java", "function_name": "isRestartable", "index": 788, "label": 0}
{"input": "Object getFromSubworkflow(String subworkflowStepId, String stepId, String paramName) {\n    try {\n      return executor\n          .submit(() -> fromSubworkflow(subworkflowStepId, stepId, paramName))\n          .get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS);\n    } catch (Exception e) {\n      throw new MaestroInternalError(\n          e,\n          \"getFromSubworkflow throws an exception for subworkflowStepId=[%s], stepId=[%s], paramName=[%s]\",\n          subworkflowStepId,\n          stepId,\n          paramName);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "42abcdadd38d5a93ea5a23556a371efe74099df8", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "getFromSubworkflow", "index": 789, "label": 0}
{"input": "@Test\n  public void testUnblock() {\n    when(instanceDao.tryUnblockFailedWorkflowInstance(any(), anyLong(), anyLong(), any()))\n        .thenReturn(true);\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.FAILED);\n    when(workflowDao.getRunStrategy(\"test-workflow\"))\n        .thenReturn(RunStrategy.create(\"STRICT_SEQUENTIAL\"));\n    boolean res = actionHandler.unblock(\"test-workflow\", 1, 1, user).isCompleted();\n    assertTrue(res);\n    verify(instanceDao, times(1)).getLatestWorkflowInstanceRun(\"test-workflow\", 1);\n    verify(instanceDao, times(1))\n        .tryUnblockFailedWorkflowInstance(eq(\"test-workflow\"), eq(1L), eq(1L), any());\n    verify(workflowHelper, times(1)).publishStartWorkflowEvent(eq(\"test-workflow\"), eq(true));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandlerTest.java", "function_name": "testUnblock", "index": 790, "label": 0}
{"input": "@Test\n  public void testUpsertTriggerSubscriptionWithSameTimeTrigger() {\n    CronTimeTrigger cronTrigger = new CronTimeTrigger();\n    cronTrigger.setCron(\"0 0 0 0 0 0\");\n    Workflow wf1 =\n        Workflow.builder().id(\"wf1\").timeTriggers(Collections.singletonList(cronTrigger)).build();\n    triggerClient.upsertTriggerSubscription(\n        wf1,\n        TriggerUuids.builder().timeTriggerUuid(\"test-uuid\").build(),\n        TriggerUuids.builder().timeTriggerUuid(\"test-uuid\").build());\n    Mockito.verify(triggerProducer, Mockito.times(0)).push(any(), anyInt());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerSubscriptionClientTest.java", "function_name": "testUpsertTriggerSubscriptionWithSameTimeTrigger", "index": 791, "label": 0}
{"input": "@Override\n    public final VmTyped getMirror() {\n      return MirrorFactories.typeAliasTypeFactory.create(this);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "getMirror", "index": 792, "label": 0}
{"input": "@JsonIgnore\n  public String getIdentity() {\n    return String.format(\"[%s][%s][%s]\", workflowId, workflowInstanceId, workflowRunId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowInstance.java", "function_name": "getIdentity", "index": 793, "label": 0}
{"input": "private void createNotificationChannel() {\n        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);\n        NotificationChannelCompat notificationChannel = new NotificationChannelCompat.Builder(\n                \"vpn_service\", NotificationManagerCompat.IMPORTANCE_DEFAULT)\n                .setName(\"Oblivion VPN\")\n                .build();\n        notificationManager.createNotificationChannel(notificationChannel);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "605875cb23befd2d2b021f98cc5a8947bebed968", "file_path": "app/src/main/java/org/bepass/oblivion/service/OblivionVpnService.java", "function_name": "createNotificationChannel", "index": 794, "label": 0}
{"input": "@GetMapping(\"/fragment/list/{docId}\")\n  public TableDataInfo<KnowledgeFragmentVo> fragmentList(KnowledgeFragmentBo bo,\n      PageQuery pageQuery, @PathVariable String docId) {\n    bo.setDocId(docId);\n    return fragmentService.queryPageList(bo, pageQuery);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "fragmentList", "index": 795, "label": 0}
{"input": "private long getTimeoutForJobType(MaestroJobEvent.Type type) {\n    var queue = eventQueues.get(type);\n    Integer queueId = type.getQueueId();\n    if (queue != null\n        && queue.size() < properties.getQueueWorkerProperties(queueId).getMessageLimit()) {\n      return properties.getQueueWorkerProperties(queueId).getOwnershipTimeout();\n    }\n    return -1; \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/MaestroQueueSystem.java", "function_name": "getTimeoutForJobType", "index": 796, "label": 0}
{"input": "@Override\n            public final Builder mergeUnknownFields(\n                    final com.google.protobuf.UnknownFieldSet unknownFields) {\n                return super.mergeUnknownFields(unknownFields);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "mergeUnknownFields", "index": 797, "label": 0}
{"input": "@Test\n  public void testPrepareDone() {\n    Task prepare = flow.newTask(new TaskDef(\"prepare\", \"noop\", null, null), true);\n    flow.setPrepareTask(prepare);\n    assertNull(flow.getPrepareTask().getStartTime());\n    prepare.setStatus(Task.Status.COMPLETED);\n    prepare.setReasonForIncompletion(\"hello\");\n    context.prepare(flow);\n    assertNotNull(flow.getPrepareTask().getStartTime());\n    verify(flowTask, times(1)).execute(flow, prepare);\n    assertEquals(\"hello\", flow.getReasonForIncompletion());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testPrepareDone", "index": 798, "label": 0}
{"input": "@Test\n  public void testExceptionAndTraceForNullMessage() {\n    when(paramsManager.generateMergedWorkflowParams(any(), any()))\n        .thenThrow(new NumberFormatException());\n    when(paramsManager.generateMergedStepParams(any(), any(), any(), any()))\n        .thenReturn(new LinkedHashMap<>());\n    AssertHelper.assertThrows(\n        \"validation error\",\n        MaestroDryRunException.class,\n        \"Type=[class java.lang.NumberFormatException] StackTrace=[java.lang.NumberFormatException\",\n        () -> dryRunValidator.validate(definition.getWorkflow(), user));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/validations/DryRunValidatorTest.java", "function_name": "testExceptionAndTraceForNullMessage", "index": 799, "label": 0}
{"input": "@Test\n  public void testTranslateForRestartFromBeginning() {\n    instance.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_BEGINNING);\n\n    Map<String, StepTransition> dag = translator.translate(instance);\n    Assert.assertEquals(\n        new HashSet<>(Arrays.asList(\"job1\", \"job.2\", \"job3\", \"job4\")), dag.keySet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/DagTranslatorTest.java", "function_name": "testTranslateForRestartFromBeginning", "index": 800, "label": 0}
{"input": "private MaestroTracingContext getTracingContext(StepInstance stepInstance) {\n    if (stepInstance.getArtifacts() != null) {\n      var val = stepInstance.getArtifacts().get(\"tracing_context\");\n      if (val != null) {\n        return objectMapper.convertValue(\n            val.asDefault().getField(\"context\"), MaestroTracingContext.class);\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/MaestroExecutionPreparer.java", "function_name": "getTracingContext", "index": 801, "label": 0}
{"input": "@Test\n  public void testVisitedBreakNode() {\n    root.jjtAddChild(breakNode, 2);\n    root.jjtAddChild(breakNode, 1);\n    root.jjtAddChild(breakNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.BREAK, res);\n    assertArrayEquals(new int[] {1, 0, 0, 0, 0}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedBreakNode", "index": 802, "label": 0}
{"input": "public static boolean isInlineWorkflowId(String workflowId) {\n    return workflowId.startsWith(Constants.FOREACH_INLINE_WORKFLOW_PREFIX);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/IdHelper.java", "function_name": "isInlineWorkflowId", "index": 803, "label": 0}
{"input": "public boolean isJsonContentEquivalent(String json1, String json2) {\n\t\tif (json1 == null && json2 == null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (json1 == null || json2 == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\tif (json1.equals(json2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tJsonNode node1 = mapper.readTree(json1);\n\t\t\tJsonNode node2 = mapper.readTree(json2);\n\t\t\treturn node1.equals(node2);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Failed to parse JSON content during comparison, falling back to string comparison\", e);\n\t\t\t\n\t\t\treturn json1.equals(json2);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/service/PlanTemplateService.java", "function_name": "isJsonContentEquivalent", "index": 804, "label": 0}
{"input": "public List<RunResponse> startWorkflowBatchRuns(\n      String workflowId,\n      String version,\n      String workflowTriggerUuid,\n      List<PlannedTimeTriggerExecution> executionBatch) {\n    return actionHandler.startBatch(\n        workflowId,\n        version,\n        createWorkflowRunRequests(workflowId, executionBatch, workflowTriggerUuid));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/MaestroWorkflowLauncher.java", "function_name": "startWorkflowBatchRuns", "index": 805, "label": 0}
{"input": "@Override\n            public Builder clear() {\n                super.clear();\n                bitField0_ = 0;\n                message1_ = null;\n                if (message1Builder_ != null) {\n                    message1Builder_.dispose();\n                    message1Builder_ = null;\n                }\n                if (message2Builder_ == null) {\n                    message2_ = java.util.Collections.emptyList();\n                } else {\n                    message2_ = null;\n                    message2Builder_.clear();\n                }\n                bitField0_ = (bitField0_ & ~0x00000002);\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "clear", "index": 806, "label": 0}
{"input": "public static Integer getPlanMaxIterations(OverAllState state) {\n\t\treturn state.value(\"max_plan_iterations\", 1);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "05b5a8f3e9dea612f3298252b7c005024c40809e", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/StateUtil.java", "function_name": "getPlanMaxIterations", "index": 807, "label": 0}
{"input": "public void bypass(User user, long actionTime) {\n    statuses.stream()\n        .filter(v -> v.getStatus() == StepDependencyMatchStatus.PENDING)\n        .forEach(v -> v.setStatus(StepDependencyMatchStatus.SKIPPED));\n\n    info =\n        TimelineLogEvent.builder()\n            .timestamp(actionTime)\n            .level(TimelineEvent.Level.INFO)\n            .message(\"Step dependencies have been bypassed by user %s\", user)\n            .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepDependencies.java", "function_name": "bypass", "index": 808, "label": 0}
{"input": "private static void extractFile(ZipInputStream zis, String filePath) throws IOException {\n        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath))) {\n            byte[] buffer = new byte[4096];\n            int read;\n            while ((read = zis.read(buffer)) != -1) {\n                bos.write(buffer, 0, read);\n            }\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/utils/ZipUtils.java", "function_name": "extractFile", "index": 809, "label": 0}
{"input": "public @Nullable TypeParameterList getTypeParameterList() {\n    return (TypeParameterList) children.get(nameOffset + 1);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeAlias.java", "function_name": "getTypeParameterList", "index": 810, "label": 0}
{"input": "@Test\n  public void testGetRunStrategy() throws IOException {\n    assertNull(definition.getPropertiesSnapshot().getRunStrategy());\n    assertEquals(definition.getRunStrategyOrDefault().getRule(), RunStrategy.Rule.SEQUENTIAL);\n    assertEquals(definition.getRunStrategyOrDefault(), Defaults.DEFAULT_RUN_STRATEGY);\n    WorkflowDefinition sequential =\n        loadObject(\n            \"fixtures/workflows/definition/sample-minimal-wf-run-strategy-sequential.json\",\n            WorkflowDefinition.class);\n    assertEquals(\n        sequential.getPropertiesSnapshot().getRunStrategy().getRule(), RunStrategy.Rule.SEQUENTIAL);\n    WorkflowDefinition parallel =\n        loadObject(\n            \"fixtures/workflows/definition/sample-minimal-wf-run-strategy-parallel.json\",\n            WorkflowDefinition.class);\n    assertEquals(\n        parallel.getPropertiesSnapshot().getRunStrategy().getRule(), RunStrategy.Rule.PARALLEL);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/WorkflowHelperTest.java", "function_name": "testGetRunStrategy", "index": 811, "label": 0}
{"input": "@Before\n  public void setUp() {\n    dao = new CockroachDBRateLimitingDAO(dataSource, objectMapper, config);\n    executionDAO =\n        new CockroachDBExecutionDAO(\n            dataSource,\n            new CockroachDBIndexDAO(dataSource, objectMapper, config),\n            objectMapper,\n            config);\n    executionDAO.createWorkflow(createTestWorkflow(TEST_WORKFLOW_ID));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBRateLimitingDAOTest.java", "function_name": "setUp", "index": 812, "label": 0}
{"input": "private long getConcurrency(WorkflowSummary summary, ForeachStep step, long nonTerminalCount) {\n    long concurrencyLimit = summary.deriveInstanceStepConcurrency();\n    final Long concurrency = step.getConcurrency();\n    if (concurrency != null) {\n      concurrencyLimit = Math.min(concurrency, concurrencyLimit);\n    }\n    return Math.min(\n        Math.max(0L, concurrencyLimit - nonTerminalCount), properties.getLoopBatchLimit());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "getConcurrency", "index": 813, "label": 0}
{"input": "public static StepRuntimeSummary retrieveRuntimeSummary(\n      ObjectMapper objectMapper, Map<String, Object> data) {\n    return convertField(\n        objectMapper, data, Constants.STEP_RUNTIME_SUMMARY_FIELD, StepRuntimeSummary.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "retrieveRuntimeSummary", "index": 814, "label": 0}
{"input": "@Test\n  public void testGetNextRetryDelayNonRestartable() {\n    StepInstance.StepRetry retry = new StepInstance.StepRetry();\n    AssertHelper.assertThrows(\n        \"Not expected\",\n        MaestroInvalidStatusException.class,\n        \"Invalid status [COMPLETED_WITH_ERROR] to get next retry delay\",\n        () -> retry.getNextRetryDelay(StepInstance.Status.COMPLETED_WITH_ERROR));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/StepInstanceTest.java", "function_name": "testGetNextRetryDelayNonRestartable", "index": 815, "label": 0}
{"input": "@Bean\n  public WorkflowRunner workflowRunner(\n      WorkflowExecutor workflowExecutor,\n      WorkflowTranslator workflowTranslator,\n      WorkflowHelper workflowHelper) {\n    LOG.info(\"Creating Maestro WorkflowRunner within Spring boot...\");\n    return new WorkflowRunner(workflowExecutor, workflowTranslator, workflowHelper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "workflowRunner", "index": 816, "label": 0}
{"input": "@Test\n  public void testMergeAllowImmutableNewRun() throws JsonProcessingException {\n    ParamMode mode = ParamMode.MUTABLE_ON_START;\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            String.format(\"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': '%s'}}\", mode));\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye'}}\");\n    ParamsMergeHelper.mergeParams(\n        allParams,\n        paramsToMerge,\n        new ParamsMergeHelper.MergeContext(ParamSource.LAUNCH, false, false, false));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeAllowImmutableNewRun", "index": 817, "label": 0}
{"input": "public static String getUserDir(String wxId) {\n        return USER_DIR + SEPARATOR + DATA + SEPARATOR + DB + SEPARATOR + wxId + SEPARATOR + USER_CONFIG;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a65dda542a30d994605d8dc1d48cb35ce663d41", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getUserDir", "index": 818, "label": 0}
{"input": "@Test\n  public void testGetSignalInstance() throws Exception {\n    SignalInstance instance = new SignalInstance();\n    instance.setSeqId(3);\n    instance.setParams(Map.of(\"foo\", SignalParamValue.of(\"bar\")));\n    when(brokerDao.getSignalInstance(any(), anyLong())).thenReturn(instance);\n    var actual = handler.getSignalInstance(\"signal_a\", 123);\n    assertEquals(instance, actual);\n    verify(brokerDao, times(1)).getSignalInstance(any(), anyLong());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/handler/MaestroSignalHandlerTest.java", "function_name": "testGetSignalInstance", "index": 819, "label": 0}
{"input": "@Test(expected = ParseException.class)\n  public void testInvalidExpr() throws Exception {\n    run(\"param\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserValidationVisitorTest.java", "function_name": "testInvalidExpr", "index": 820, "label": 0}
{"input": "private TriggerUuids getTriggerUuids(Connection conn, String workflowId, long versionId)\n      throws SQLException {\n    try (PreparedStatement stmt =\n        conn.prepareStatement(GET_MAESTRO_WORKFLOW_VERSION_TRIGGER_UUIDS)) {\n      stmt.setString(1, workflowId);\n      stmt.setLong(2, versionId);\n      try (ResultSet result = stmt.executeQuery()) {\n        if (result.next()) {\n          return convertJson(result.getString(TRIGGER_UUIDS_COLUMN), TriggerUuids.class);\n        }\n        return null;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getTriggerUuids", "index": 821, "label": 0}
{"input": "@Override\n            public final Builder setUnknownFields(\n                    final com.google.protobuf.UnknownFieldSet unknownFields) {\n                return super.setUnknownFields(unknownFields);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "setUnknownFields", "index": 822, "label": 0}
{"input": "private TypeAlias parseTypeAlias(MemberHeader header) {\n    var start = next().span;\n    var startSpan = header.span(start);\n\n    var identifier = parseIdentifier();\n    TypeParameterList typePars = null;\n    if (lookahead == Token.LT) {\n      typePars = parseTypeParameterList();\n    }\n    expect(Token.ASSIGN, \"unexpectedToken\", \"=\");\n    var type = parseType();\n    var children = new ArrayList<Node>(header.annotations.size() + header.modifiers.size() + 4);\n    children.add(header.docComment);\n    children.addAll(header.annotations);\n    var modifiersOffset = header.annotations.size() + 1;\n    children.addAll(header.modifiers);\n    var nameOffset = modifiersOffset + header.modifiers.size();\n    children.add(identifier);\n    children.add(typePars);\n    children.add(type);\n    return new TypeAlias(children, modifiersOffset, nameOffset, startSpan.endWith(type.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseTypeAlias", "index": 823, "label": 0}
{"input": "private MessageDto dequeueMessage() {\n    try {\n      MessageDto message = messageQueue.take();\n      LOG.debug(\"dequeued a job message [{}] for [{}]\", message, name);\n      return message;\n    } catch (InterruptedException e) {\n      LOG.warn(\n          \"[{}] is interrupted, running flag value for [{}] is [{}]\",\n          Thread.currentThread(),\n          name,\n          running);\n      terminateNow();\n      return null;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/worker/MaestroQueueWorker.java", "function_name": "dequeueMessage", "index": 824, "label": 0}
{"input": "@Bean\n  public RollupAggregationHelper rollupAggregationHelper(MaestroStepInstanceDao stepInstanceDao) {\n    LOG.info(\"Creating Maestro RollupAggregationHelper within Spring boot...\");\n    return new RollupAggregationHelper(stepInstanceDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "rollupAggregationHelper", "index": 825, "label": 0}
{"input": "default String getClientName() {\n    return getProperty(DB_CLIENT_NAME_PROPERTY_NAME, DB_CLIENT_NAME_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getClientName", "index": 826, "label": 0}
{"input": "protected Map<String, ParamDefinition> injectWorkflowAndStepInfoParams(\n      WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "injectWorkflowAndStepInfoParams", "index": 827, "label": 0}
{"input": "private ObjectMember.ObjectMethod parseObjectMethod(List<Modifier> modifiers) {\n    var start = spanLookahead;\n    expect(Token.FUNCTION, \"unexpectedToken\", \"function\");\n    var identifier = parseIdentifier();\n    TypeParameterList params = null;\n    if (lookahead == Token.LT) {\n      params = parseTypeParameterList();\n    }\n    var args = parseParameterList();\n    TypeAnnotation typeAnnotation = null;\n    if (lookahead == Token.COLON) {\n      typeAnnotation = parseTypeAnnotation();\n    }\n    expect(Token.ASSIGN, \"unexpectedToken\", \"=\");\n    var expr = parseExpr(\"}\");\n    var nodes = new ArrayList<Node>(modifiers.size() + 5);\n    nodes.addAll(modifiers);\n    nodes.add(identifier);\n    nodes.add(params);\n    nodes.add(args);\n    nodes.add(typeAnnotation);\n    nodes.add(expr);\n    return new ObjectMember.ObjectMethod(nodes, modifiers.size(), start.endWith(expr.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseObjectMethod", "index": 828, "label": 0}
{"input": "protected GeneratorMemberNode(SourceSection sourceSection, boolean isFrameStored) {\n    super(sourceSection);\n    this.isFrameStored = isFrameStored;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorMemberNode.java", "function_name": "GeneratorMemberNode", "index": 829, "label": 0}
{"input": "public void evaluateStepParameters(\n      Map<String, Map<String, Object>> allStepOutputData,\n      Map<String, Parameter> workflowParams,\n      Map<String, Parameter> stepParams,\n      String stepId) {\n    for (Parameter param : stepParams.values()) {\n      parseStepParameter(allStepOutputData, workflowParams, stepParams, param, stepId);\n    }\n    paramsSizeCheck(stepParams, \"step id: \" + stepId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ParamEvaluator.java", "function_name": "evaluateStepParameters", "index": 830, "label": 0}
{"input": "private StepRuntime.State deriveState(JobStatus status) {\n    if (status == null) {\n      return StepRuntime.State.CONTINUE;\n    } else if (status.getActive() != null && status.getActive() > 0) {\n      return StepRuntime.State.CONTINUE;\n    } else if (status.getFailed() != null && status.getFailed() > 0) {\n      return StepRuntime.State.USER_ERROR;\n    } else if (status.getSucceeded() != null && status.getSucceeded() > 0) {\n      return StepRuntime.State.DONE;\n    } else {\n      return StepRuntime.State.CONTINUE;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/Fabric8RuntimeExecutor.java", "function_name": "deriveState", "index": 831, "label": 0}
{"input": "@Override\n    public void currentSheet(WriteSheet writeSheet, WriteTypeEnum writeType) {\n        if (writeSheet == null) {\n            throw new IllegalArgumentException(\"Sheet argument cannot be null\");\n        }\n        if (selectSheetFromCache(writeSheet)) {\n            return;\n        }\n        \n        initCurrentSheetHolder(writeSheet);\n        \n        \n        WorkbookWriteHandlerContext workbookWriteHandlerContext = WriteHandlerUtils.createWorkbookWriteHandlerContext(\n                this);\n        WriteHandlerUtils.beforeWorkbookCreate(workbookWriteHandlerContext, true);\n        WriteHandlerUtils.afterWorkbookCreate(workbookWriteHandlerContext, true);\n        \n        \n        initSheet(writeType);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/WriteContextImpl.java", "function_name": "currentSheet", "index": 832, "label": 0}
{"input": "public MaestroSignalParamDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      DatabaseConfiguration config,\n      MaestroMetrics metrics) {\n    super(dataSource, objectMapper, config, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalParamDao.java", "function_name": "MaestroSignalParamDao", "index": 833, "label": 0}
{"input": "@Override\n        public MessageBytesExtra getDefaultInstanceForType() {\n            return DEFAULT_INSTANCE;\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getDefaultInstanceForType", "index": 834, "label": 0}
{"input": "public void SwitchTo(int lexState) {\n    if (lexState >= 3 || lexState < 0)\n      throw new TokenMgrError(\n          \"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\",\n          TokenMgrError.INVALID_LEXICAL_STATE);\n    else curLexState = lexState;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "SwitchTo", "index": 835, "label": 0}
{"input": "private static void configureFont(PdfRendererBuilder builder) {\n\t\ttry {\n\t\t\tResource fontResource = new ClassPathResource(FONT_PATH);\n\t\t\tif (fontResource.exists()) {\n\t\t\t\tFile fontFile = fontResource.getFile();\n\t\t\t\tbuilder.useFont(fontFile, FONT_FAMILY, FONT_WEIGHT, BaseRendererBuilder.FontStyle.NORMAL, true \n\t\t\t\t);\n\t\t\t\tlogger.info(\"Font loaded from classpath for PDF conversion\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.warn(\"AlibabaPuHuiTi font file not found in classpath, using default fonts\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error loading font from classpath: {}\", e.getMessage());\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FormatConversionUtil.java", "function_name": "configureFont", "index": 836, "label": 0}
{"input": "@Test\n  public void testCallGetFromForeach() {\n    assertArrayEquals(\n        new long[] {123},\n        (long[])\n            extension\n                .call(\n                    \"getFromForeach\",\n                    new SelType[] {SelString.of(\"foo\"), SelString.of(\"bar\"), SelString.of(\"bat\")})\n                .unbox());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallGetFromForeach", "index": 837, "label": 0}
{"input": "public SplitTunnelOptionsAdapter(Context context, OnSettingsChanged settingsCallback) {\n        this.settingsCallback = settingsCallback;\n        fm = FileManager.getInstance(context);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/SplitTunnelOptionsAdapter.java", "function_name": "SplitTunnelOptionsAdapter", "index": 838, "label": 0}
{"input": "public String generatePlanTemplateId() {\n\t\tString planTemplateId = PLAN_TEMPLATE_ID_PREFIX + System.currentTimeMillis();\n\t\tlogger.debug(\"Generated new planTemplateId: {}\", planTemplateId);\n\t\treturn planTemplateId;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/coordinator/PlanIdDispatcher.java", "function_name": "generatePlanTemplateId", "index": 839, "label": 0}
{"input": "@Test\n  public void testNoDynamicOutputInStepOutputs() throws Exception {\n    Step stepDef = loadObject(\"fixtures/typedsteps/sample-typed-step.json\", Step.class);\n    StepRuntimeSummary input =\n        loadObject(\"fixtures/execution/sample-step-runtime-summary.json\", StepRuntimeSummary.class);\n    StepRuntimeSummary runtimeSummary =\n        createAndRunMaestroTask(true, stepDef, input, new WorkflowSummary());\n\n    \n    SignalStepOutputs outputs =\n        runtimeSummary\n            .getOutputs()\n            .get(StepOutputsDefinition.StepOutputType.SIGNAL)\n            .asSignalStepOutputs();\n    Assert.assertEquals(1, outputs.getOutputs().size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tasks/MaestroTaskTest.java", "function_name": "testNoDynamicOutputInStepOutputs", "index": 840, "label": 0}
{"input": "public Builder setField7(long value) {\n\n                field7_ = value;\n                bitField0_ |= 0x00000040;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setField7", "index": 841, "label": 0}
{"input": "private MaestroStepInstanceActionDao getSpyActionDao(long timeout) {\n    return spy(\n        new MaestroStepInstanceActionDao(\n            dataSource,\n            MAPPER,\n            config,\n            new StepActionProperties(timeout, 100),\n            stepInstanceDao,\n            publisher,\n            metricRepo));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "getSpyActionDao", "index": 842, "label": 0}
{"input": "@SuppressWarnings({\"PMD.NullAssignment\"})\n  @JsonIgnore\n  public void resetRunning() {\n    this.runningStats = null;\n    this.runningRollup = null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "resetRunning", "index": 843, "label": 0}
{"input": "public void jjtAddChild(Node n, int i) {\n    if (children == null) {\n      children = new Node[i + 1];\n    } else if (i >= children.length) {\n      Node c[] = new Node[i + 1];\n      System.arraycopy(children, 0, c, 0, children.length);\n      children = c;\n    }\n    children[i] = n;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SimpleNode.java", "function_name": "jjtAddChild", "index": 844, "label": 0}
{"input": "public static BarkPushProvider loadFromYaml(String name, ConfigurationSection section) {\n        var backendUrl = section.getString(\"backend_url\", \"https://api.day.app/push\");\n        var sendKey = section.getString(\"device_key\", \"\");\n        Config config = new Config(backendUrl,sendKey);\n        return new BarkPushProvider(name, config);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "c62d32e5150dcfeafef2fd96b2cab7b061e39f33", "file_path": "src/main/java/com/ghostchu/peerbanhelper/push/impl/BarkPushProvider.java", "function_name": "loadFromYaml", "index": 845, "label": 0}
{"input": "@JsonIgnore\n  public String getSourceDefinition() {\n    return (String) extraInfo.get(SOURCE_DEFINITION);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/Metadata.java", "function_name": "getSourceDefinition", "index": 846, "label": 0}
{"input": "@Bean\n  public KubernetesClient kubernetesClient() {\n    LOG.info(\"Creating kubernetesClient within Spring boot...\");\n    return new KubernetesClientBuilder()\n        .withConfig(new ConfigBuilder().withAutoConfigure().build())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7352dec4fe9be70bf0076f7ed4d10ca1985ad842", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "kubernetesClient", "index": 847, "label": 0}
{"input": "public void setSearchOptions(DashScopeApi.SearchOptions searchOptions) {\n    this.searchOptions = searchOptions;\n  }", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatOptions.java", "function_name": "setSearchOptions", "index": 848, "label": 0}
{"input": "@SaCheckPermission(\"system:session:add\")\n    @Log(title = \"会话管理\", businessType = BusinessType.INSERT)\n    @RepeatSubmit()\n    @PostMapping()\n    public R<Long> add(@Validated(AddGroup.class) @RequestBody ChatSessionBo bo) {\n        chatSessionService.insertByBo(bo);\n        \n        return R.ok(bo.getId());\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "ce9f2a82dab1000ed1c59e97268d3285baac8fd1", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/chat/ChatSessionController.java", "function_name": "add", "index": 849, "label": 0}
{"input": "@Test\n  public void testAddSignalParams() throws Exception {\n    var added =\n        paramDao.addSignalParams(\n            conn,\n            List.of(\n                new SignalParamDto(\"signal_a\", \"foo\", \"d1z\"),\n                new SignalParamDto(\"signal_b\", \"bar\", \"efg\")),\n            12);\n    conn.commit();\n    assertEquals(0, added);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalParamDaoTest.java", "function_name": "testAddSignalParams", "index": 850, "label": 0}
{"input": "public static WeChatVO getUser() {\n        String json = FileUtil.readUtf8String(getUserPath());\n        return JSONUtil.toBean(json, WeChatVO.class);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/UserUtil.java", "function_name": "getUser", "index": 851, "label": 0}
{"input": "public MaestroPreconditionFailedException(String template, Object... args) {\n    super(Code.PRECONDITION_FAILED, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroPreconditionFailedException.java", "function_name": "MaestroPreconditionFailedException", "index": 852, "label": 0}
{"input": "@GetMapping(\"/all\")\n    public ResponseVO<List<AllContactVO>> all() {\n        return ResponseVO.ok(contactService.queryAllContact());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "f7cc1d6c48df9bcba3787c9f97c639dd4caf22e3", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/ContactController.java", "function_name": "all", "index": 853, "label": 0}
{"input": "private Token lexShebang() {\n    do {\n      nextChar();\n    } while (lookahead != '\\n' && lookahead != '\\r' && lookahead != EOF);\n    return Token.SHEBANG;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexShebang", "index": 854, "label": 0}
{"input": "private void checkSingletonStats(\n      List<ForeachIterationOverview> stats, long instanceId, WorkflowInstance.Status status) {\n    assertEquals(1, stats.size());\n    assertEquals(1, instanceId);\n    assertEquals(status, stats.get(0).getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "checkSingletonStats", "index": 855, "label": 0}
{"input": "protected Integer getBrowserTimeoutSec() {\n\t\tInteger timeout = getBrowserUseTool().getManusProperties().getBrowserRequestTimeout();\n\t\treturn timeout != null ? timeout : 30; \n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/actions/BrowserAction.java", "function_name": "getBrowserTimeoutSec", "index": 856, "label": 0}
{"input": "public void mergeTags(List<Tag> input) {\n    tags.merge(input);\n    runtimeState.setModifyTime(System.currentTimeMillis());\n    synced = false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "mergeTags", "index": 857, "label": 0}
{"input": "private List<String> getWxIds() {\n        \n        List<String> userVOList = new ArrayList<>();\n        \n        String userDir = System.getProperty(\"user.dir\");\n        \n        String separator = FileSystems.getDefault().getSeparator();\n        \n        String dbPath = userDir + separator + \"data\" + separator + \"db\";\n        \n        Path path = Paths.get(dbPath);\n        \n        if (!FileUtil.exist(path.toFile())) {\n            return userVOList;\n        }\n        \n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n            \n            for (Path entry : stream) {\n                \n                if (FileUtil.isDirectory(entry)) {\n                    userVOList.add(FileUtil.getName(entry));\n                }\n            }\n        } catch (IOException e) {\n            log.error(\"allUser error\", e);\n        }\n        return userVOList;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "getWxIds", "index": 858, "label": 0}
{"input": "public static UUID createUuid(String input) {\n    if (input == null) {\n      return UUID.randomUUID();\n    }\n    return UUID.nameUUIDFromBytes(input.getBytes(StandardCharsets.UTF_8));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/IdHelper.java", "function_name": "createUuid", "index": 859, "label": 0}
{"input": "public void markInitialized(MaestroTracingManager tracingManager) {\n    runtimeState.setInitializeTime(updateStatus(StepInstance.Status.INITIALIZED, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markInitialized", "index": 860, "label": 0}
{"input": "@Override\n  public GeneratorMemberNode visitMemberPredicate(MemberPredicateContext ctx) {\n    if (ctx.err1 == null && ctx.err2 == null) {\n      throw missingDelimiter(\"]]\", ctx.k.stop.getStopIndex() + 1);\n    } else if (ctx.err1 != null\n        && (ctx.err2 == null || ctx.err1.getStartIndex() != ctx.err2.getStartIndex() - 1)) {\n      \n      throw wrongDelimiter(\"]]\", \"]\", ctx.err1.getStartIndex());\n    }\n\n    var keyNode = symbolTable.enterCustomThisScope(scope -> visitExpr(ctx.k));\n    var member = doVisitObjectEntryBody(createSourceSection(ctx), keyNode, ctx.v, ctx.objectBody());\n    var isFrameStored =\n        member.getMemberNode() != null && symbolTable.getCurrentScope().isForGeneratorScope();\n    return GeneratorPredicateMemberNodeGen.create(keyNode, member, isFrameStored);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "visitMemberPredicate", "index": 861, "label": 0}
{"input": "@JsonCreator\n  public StepDependenciesDefinition(\n      @JsonProperty(\"definitions\") List<MapParamDefinition> definitions,\n      @JsonProperty(\"type\") StepDependencyType type) {\n    Checks.checkTrue(type != null, \"type cannot be null\");\n    this.definitions = definitions;\n    this.type = type;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/StepDependenciesDefinition.java", "function_name": "StepDependenciesDefinition", "index": 862, "label": 0}
{"input": "public List<ClassProperty> getProperties() {\n    var res = new ArrayList<ClassProperty>();\n    for (var child : children) {\n      if (child instanceof ClassProperty classProperty) {\n        res.add(classProperty);\n      }\n    }\n    return res;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Module.java", "function_name": "getProperties", "index": 863, "label": 0}
{"input": "private Token jj_consume_token(int kind) throws ParseException {\n    Token oldToken = token;\n    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;\n    else jj_nt = jj_nt.next = token_source.getNextToken();\n    if (token.kind == kind) {\n      jj_gen++;\n      if (++jj_gc > 100) {\n        jj_gc = 0;\n        for (int i = 0; i < jj_2_rtns.length; i++) {\n          JJCalls c = jj_2_rtns[i];\n          while (c != null) {\n            if (c.gen < jj_gen) c.first = null;\n            c = c.next;\n          }\n        }\n      }\n      return token;\n    }\n    jj_nt = token;\n    token = oldToken;\n    jj_kind = kind;\n    throw generateParseException();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_consume_token", "index": 864, "label": 0}
{"input": "private void setBackgroundColor(com.itextpdf.layout.element.Cell pdfCell, XSSFCellStyle cellStyle) {\n        XSSFColor fillColor = cellStyle.getFillForegroundXSSFColor();\n        if (fillColor != null) {\n            byte[] rgb = fillColor.getRGB();\n            if (rgb != null) {\n                pdfCell.setBackgroundColor(new DeviceRgb(Byte.toUnsignedInt(rgb[0]), Byte.toUnsignedInt(rgb[1]), Byte.toUnsignedInt(rgb[2])));\n            }\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "setBackgroundColor", "index": 865, "label": 0}
{"input": "public Object executeEagerly(VirtualFrame frame, Object value) {\n    return executeLazily(frame, value);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "643c6f5a76d0a2b81b7f8e22e0013037826ce2b5", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "executeEagerly", "index": 866, "label": 0}
{"input": "@Test\n  public void getEventExecutionsTest() {\n    String event = \"event\";\n    EventExecution execution1 = createEventExecution(event);\n    EventExecution execution2 = createEventExecution(event);\n\n    executionDAO.addEventExecution(execution1);\n    executionDAO.addEventExecution(execution2);\n\n    List<EventExecution> indexedExecutions = tryFindResults(() -> dao.getEventExecutions(event), 2);\n\n    assertEquals(2, indexedExecutions.size());\n\n    assertTrue(\n        \"Not all event executions was indexed\",\n        indexedExecutions.containsAll(Arrays.asList(execution1, execution2)));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAOTest.java", "function_name": "getEventExecutionsTest", "index": 867, "label": 0}
{"input": "public static boolean isValidExcelDate(double value) {\n        return (value > -Double.MIN_VALUE);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/DateUtils.java", "function_name": "isValidExcelDate", "index": 868, "label": 0}
{"input": "@Override\n    public void onClosed(EventSource eventSource) {\n        log.info(\"FastGPT  sse连接关闭\");\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "fd94a1772f4b56555b7ed17d0270335d27ba01d2", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/listener/FastGPTSSEEventSourceListener.java", "function_name": "onClosed", "index": 869, "label": 0}
{"input": "private void initReadSheetDataList(XlsReadWorkbookHolder xlsReadWorkbookHolder) {\n        if (xlsReadWorkbookHolder.getActualSheetDataList() != null) {\n            return;\n        }\n        BoundSheetRecord[] boundSheetRecords = BoundSheetRecord.orderByBofPosition(\n                xlsReadWorkbookHolder.getBoundSheetRecordList());\n        List<ReadSheet> readSheetDataList = new ArrayList<ReadSheet>();\n        for (int i = 0; i < boundSheetRecords.length; i++) {\n            BoundSheetRecord boundSheetRecord = boundSheetRecords[i];\n            ReadSheet readSheet = new ReadSheet(i, boundSheetRecord.getSheetname());\n            readSheetDataList.add(readSheet);\n        }\n        xlsReadWorkbookHolder.setActualSheetDataList(readSheetDataList);\n        \n        if (!xlsReadWorkbookHolder.getNeedReadSheet()) {\n            throw new ExcelAnalysisStopException(\"Just need to get the list of sheets.\");\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v03/handlers/BofRecordHandler.java", "function_name": "initReadSheetDataList", "index": 870, "label": 0}
{"input": "@Test\n  public void testProcessWithDedupExpr() throws Exception {\n    SignalTriggerExecution execution =\n        loadObject(\"fixtures/sample-signal-trigger-execution.json\", SignalTriggerExecution.class);\n    execution.setDedupExpr(\"\\\"hello\\\"\");\n    execution.setCondition(\"135 > 2\");\n    Supplier<SignalTriggerExecution> messageSupplier = () -> execution;\n    processor.process(messageSupplier);\n    ArgumentCaptor<RunRequest> captor = ArgumentCaptor.forClass(RunRequest.class);\n    verify(actionHandler, times(1)).start(any(), any(), captor.capture());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_EXECUTION_SUCCESS,\n                SignalTriggerExecutionProcessor.class)\n            .count());\n    RunRequest request = captor.getValue();\n    assertEquals(IdHelper.createUuid(\"hello\"), request.getRequestId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerExecutionProcessorTest.java", "function_name": "testProcessWithDedupExpr", "index": 871, "label": 0}
{"input": "public boolean shouldPersist() {\n      return (artifacts != null && !artifacts.isEmpty())\n          || (timeline != null && !timeline.isEmpty());\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/StepRuntime.java", "function_name": "shouldPersist", "index": 872, "label": 0}
{"input": "public CsvReaderBuilder(ReadWorkbook readWorkbook) {\n        readWorkbook.setExcelType(ExcelTypeEnum.CSV);\n        this.readWorkbook = readWorkbook;\n        this.readSheet = new ReadSheet();\n        this.csvFormatBuilder = CSVFormat.DEFAULT.builder();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/CsvReaderBuilder.java", "function_name": "CsvReaderBuilder", "index": 873, "label": 0}
{"input": "default int getDbInitialRetryDelay() {\n    return getIntProperty(\n        DB_INITIAL_RETRY_DELAY_PROPERTY_NAME, DB_INITIAL_RETRY_DELAY_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getDbInitialRetryDelay", "index": 874, "label": 0}
{"input": "private DynamicAgentEntity mergePrompts(DynamicAgentEntity entity, String agentName) {\n\t\t\n\t\tif (StringUtils.isNotBlank(entity.getSystemPrompt())) {\n\t\t\tString systemPrompt = entity.getSystemPrompt();\n\t\t\tString nextPrompt = entity.getNextStepPrompt();\n\t\t\t\n\t\t\tif (nextPrompt != null && !nextPrompt.trim().isEmpty()) {\n\t\t\t\tnextPrompt = systemPrompt + \"\\n\" + nextPrompt;\n\t\t\t}\n\t\t\tlog.warn(\n\t\t\t\t\t\"Agent[{}] SystemPrompt is not empty, but the property is deprecated, only keep nextPrompt. This time merge the agent content. If you need this content to take effect in prompt, please directly update the unique prompt in the interface. Current specified value: {}\",\n\t\t\t\t\tagentName, nextPrompt);\n\t\t\tentity.setSystemPrompt(\" \");\n\t\t}\n\t\treturn entity;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/service/AgentServiceImpl.java", "function_name": "mergePrompts", "index": 875, "label": 0}
{"input": "private SelArray dateIntsBetween(SelType from, SelType to, SelType dd) {\n    int inc = Integer.parseInt(dd.toString());\n    SelType fromDate, toDate;\n    if (inc > 0) {\n      fromDate = from;\n      toDate = to;\n    } else if (inc < 0) {\n      fromDate = to;\n      toDate = from;\n    } else {\n      throw new IllegalArgumentException(\"Invalid incremental interval value: \" + inc);\n    }\n\n    DateTimeFormatter fmt = dateIntFormatter.withZone(DateTimeZone.UTC);\n    DateTime d1 = fmt.parseDateTime(SelString.create(fromDate).toString());\n    DateTime d2 = fmt.parseDateTime(SelString.create(toDate).toString());\n    int days = Days.daysBetween(d1, d2).getDays();\n    List<Integer> list = new ArrayList<>();\n    int increment = Math.abs(inc);\n    for (int i = 0; i < days; i += increment) {\n      list.add(Integer.valueOf(d1.plusDays(i).toString(\"yyyyMMdd\")));\n    }\n    if (inc < 0) {\n      Collections.reverse(list);\n    }\n    return SelArray.of(list.toArray(new Integer[0]), SelTypes.LONG_ARRAY);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "dateIntsBetween", "index": 876, "label": 0}
{"input": "@Test\n  public void testParseWorkflowParameter() {\n    StringParameter bar = StringParameter.builder().name(\"bar\").expression(\"foo + '-1';\").build();\n    paramEvaluator.parseWorkflowParameter(\n        Collections.singletonMap(\"foo\", LongParameter.builder().expression(\"1+2+3;\").build()),\n        bar,\n        \"test-workflow\");\n    assertEquals(\"6-1\", bar.getEvaluatedResult());\n\n    bar = StringParameter.builder().name(\"bar\").expression(\"foo + '-1';\").build();\n    paramEvaluator.parseWorkflowParameter(\n        Collections.singletonMap(\n            \"foo\", LongParameter.builder().evaluatedResult(6L).evaluatedTime(123L).build()),\n        bar,\n        \"test-workflow\");\n    assertEquals(\"6-1\", bar.getEvaluatedResult());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseWorkflowParameter", "index": 877, "label": 0}
{"input": "public String saveAsMarkdown(String threadId) {\n\t\tString content = reportService.getReport(threadId);\n\t\tif (content == null) {\n\t\t\tlogger.warn(\"No report content found for thread: {}\", threadId);\n\t\t\treturn null;\n\t\t}\n\n\t\tString filePath = getReportFilePath(threadId, \"md\");\n\t\treturn saveContentToFile(content, filePath);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/service/ExportService.java", "function_name": "saveAsMarkdown", "index": 878, "label": 0}
{"input": "public static boolean isSame(WorkflowRuntimeOverview one, WorkflowRuntimeOverview another) {\n    if (Objects.equals(one, another)) {\n      return true;\n    }\n    if (one != null && another != null) {\n      return one.totalStepCount == another.totalStepCount\n          && Objects.equals(one.stepOverview, another.stepOverview)\n          && WorkflowRollupOverview.isSame(one.rollupOverview, another.rollupOverview);\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowRuntimeOverview.java", "function_name": "isSame", "index": 879, "label": 0}
{"input": "private static boolean confirmDone(Map<String, Task> realTaskMap, WorkflowSummary summary) {\n    Map<String, StepTransition> runtimeDag = summary.getRuntimeDag();\n\n    Map<String, Boolean> taskStatusMap =\n        realTaskMap.values().stream()\n            .filter(t -> t.getStatus().isTerminal()) \n            .collect(\n                Collectors.toMap(Task::getReferenceTaskName, t -> t.getStatus().isSuccessful()));\n    return DagHelper.isDone(runtimeDag, taskStatusMap, summary.getRestartConfig());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "confirmDone", "index": 880, "label": 0}
{"input": "private void readAndWriteStream(File file, ExcelTypeEnum excelType) throws Exception {\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        EasyExcel.write(fileOutputStream, EncryptData.class).password(\"123456\").excelType(excelType).sheet()\n                .doWrite(data());\n        fileOutputStream.close();\n        \n        FileInputStream fileInputStream = new FileInputStream(file);\n        EasyExcel.read(fileInputStream, EncryptData.class, new EncryptDataListener()).password(\"123456\").sheet()\n                .doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/encrypt/EncryptDataTest.java", "function_name": "readAndWriteStream", "index": 881, "label": 0}
{"input": "public String decompress(String compressorName, String compressedString) throws IOException {\n    Checks.notNull(compressedString, \"compressedString cannot be null\");\n    Compressor compressor = getCompressor(compressorName);\n    return new String(compressor.decompress(base64Decode(compressedString)), DEFAULT_ENCODING);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/compression/StringCodec.java", "function_name": "decompress", "index": 882, "label": 0}
{"input": "default Optional<Details> registerStep(String concurrencyId, String uuid) {\n    return Optional.empty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/concurrency/InstanceStepConcurrencyHandler.java", "function_name": "registerStep", "index": 883, "label": 0}
{"input": "@Scheduled(fixedDelay = 15000)\n  public void dealKnowledgeAttachPicAnys() throws Exception {\n    \n    List<KnowledgeAttachPic> knowledgeAttachPics = picMapper.selectList(\n        new LambdaQueryWrapper<KnowledgeAttachPic>()\n            .eq(KnowledgeAttachPic::getPicAnysStatus, DealStatus.STATUS_10)\n    );\n    if (ObjectUtil.isNotEmpty(knowledgeAttachPics)) {\n      for (KnowledgeAttachPic picItem : knowledgeAttachPics) {\n        dealFileService.dealPicAnysStatus(picItem);\n      }\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "dealKnowledgeAttachPicAnys", "index": 884, "label": 0}
{"input": "@Override\n  @SuppressWarnings(\"deprecation\")\n  public void checkMulticast(InetAddress maddr, byte ttl) {\n    if (accs.get() != null) {\n      super.checkMulticast(maddr, ttl);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkMulticast", "index": 885, "label": 0}
{"input": "public CsvWriterBuilder delimiter(String delimiter) {\n        if (delimiter != null) {\n            this.csvFormatBuilder.setDelimiter(delimiter);\n        }\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/CsvWriterBuilder.java", "function_name": "delimiter", "index": 886, "label": 0}
{"input": "private static void jj_la1_init_0() {\n    jj_la1_0 =\n        new int[] {\n          0x0,\n          0xc9206000,\n          0x0,\n          0x0,\n          0x0,\n          0x8000000,\n          0x0,\n          0x41002000,\n          0x0,\n          0x41002000,\n          0x8000000,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x8000000,\n          0x8000000,\n          0x0,\n          0x0,\n          0x8000000,\n          0x8000000,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x88204000,\n          0xc9206000,\n          0x88204000,\n          0x0,\n          0x8000000,\n          0x2000000,\n          0x49002000,\n          0x8000000,\n          0x8000000,\n          0x8000000,\n        };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_la1_init_0", "index": 887, "label": 0}
{"input": "@Test\n    public void t02ReadAndWriteCsv() throws Exception {\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_default.csv\"), null, null);\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_utf_8.csv\"), \"UTF-8\", null);\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_utf_8_lower_case.csv\"), \"utf-8\", null);\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_gbk.csv\"), \"bom_default.csv\"0, null);\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_default.csv\"2), \"bom_default.csv\"3, null);\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_default.csv\"5), \"bom_default.csv\"6, null);\n        readAndWriteCsv(TestFileUtil.createNewFile(\"bom\" + File.separator + \"bom_default.csv\"8), \"UTF-8\",\n                Boolean.FALSE);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/bom/BomDataTest.java", "function_name": "t02ReadAndWriteCsv", "index": 888, "label": 0}
{"input": "private void showCopiedToClipboardToast() {\n        LayoutInflater inflater = getLayoutInflater();\n        View layout = inflater.inflate(R.layout.toast, findViewById(R.id.toast_layout));\n\n        Toast toast = new Toast(getApplicationContext());\n        toast.setDuration(Toast.LENGTH_SHORT);\n        toast.setView(layout);\n        toast.show();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/ui/LogActivity.java", "function_name": "showCopiedToClipboardToast", "index": 889, "label": 0}
{"input": "@Test\n  public void testCallConstructor() {\n    SelType res = SelTypes.STRING.call(\"constructor\", new SelType[0]);\n    assertEquals(SelTypes.STRING, res.type());\n    assertEquals(\"\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypesTest.java", "function_name": "testCallConstructor", "index": 890, "label": 0}
{"input": "public Builder clearRemark() {\n                remark_ = getDefaultInstance().getRemark();\n                bitField0_ = (bitField0_ & ~0x00000002);\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "clearRemark", "index": 891, "label": 0}
{"input": "private void beforeValue() throws IOException {\n    switch (peek()) {\n      case NONEMPTY_DOCUMENT:\n        if (!lenient) {\n          throw new IllegalStateException(\"JSON must have only one top-level value.\");\n        }\n      \n      case EMPTY_DOCUMENT: \n        replaceTop(NONEMPTY_DOCUMENT);\n        break;\n\n      case EMPTY_ARRAY: \n        replaceTop(NONEMPTY_ARRAY);\n        newline();\n        break;\n\n      case NONEMPTY_ARRAY: \n        out.append(',');\n        newline();\n        break;\n\n      case DANGLING_NAME: \n        out.append(separator);\n        replaceTop(NONEMPTY_OBJECT);\n        break;\n\n      default:\n        throw new IllegalStateException(\"Nesting problem.\");\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/json/JsonWriter.java", "function_name": "beforeValue", "index": 892, "label": 0}
{"input": "private boolean deleteDir(File dir) {\n        if (dir != null && dir.isDirectory()) {\n            String[] children = dir.list();\n            for (int i = 0; i < Objects.requireNonNull(children).length; i++) {\n                boolean success = deleteDir(new File(dir, children[i]));\n                if (!success) {\n                    return false;\n                }\n            }\n            return dir.delete();\n        } else if (dir != null && dir.isFile()) {\n            return dir.delete();\n        } else {\n            return false;\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/ui/SettingsActivity.java", "function_name": "deleteDir", "index": 893, "label": 0}
{"input": "@Test\n  public void testPutAnExistingKey() {\n    state.resetWithInput(params, null);\n    state.put(\"foo\", SelString.of(\"bat\"));\n    SelType res = state.get(\"foo\");\n    assertEquals(\"STRING: bat\", res.type() + \": \" + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "testPutAnExistingKey", "index": 894, "label": 0}
{"input": "@Test\n  public void testCallGetFromSignal() {\n    assertEquals(\n        SelString.of(\"world\"),\n        extension.call(\"getFromSignal\", new SelType[] {SelString.of(\"foo\"), SelString.of(\"bar\")}));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallGetFromSignal", "index": 895, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceViews() throws Exception {\n    StepInstance si1 =\n        loadObject(\"fixtures/instances/sample-step-instance-finishing.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si1, true);\n    StepInstance si2 =\n        loadObject(\"fixtures/instances/sample-step-instance-failed.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si2, true);\n\n    List<StepInstance> res = stepDao.getStepInstanceViews(\"sample-dag-test-3\", 1L, 1L);\n    assertEquals(1, res.size());\n    assertEquals(\"ff4ccce2-0fda-4882-9cd8-12ff90cb5f06\", res.getFirst().getStepUuid());\n\n    res = stepDao.getStepInstanceViews(\"sample-dag-test-3\", 1L, 2L);\n    assertEquals(1, res.size());\n    assertEquals(\"ff4ccce2-0fda-4882-9cd8-12ff90cb5f02\", res.getFirst().getStepUuid());\n\n    res = stepDao.getStepInstanceViews(\"sample-dag-test-3\", 1L, 3L);\n    assertEquals(0, res.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceViews", "index": 896, "label": 0}
{"input": "@Test\n  public void testReplace() {\n    NotificationJobEvent jobEvent2 = new NotificationJobEvent();\n    MessageDto enqueued = dao.enqueue(jobEvent, 123456789L);\n    MessageDto replaced = dao.replace(enqueued, jobEvent2, 223456789L);\n    List<MessageDto> owned =\n        dao.dequeueUnownedMessages(jobEvent.getType().getQueueId(), 123456789L, 1);\n    assertTrue(owned.isEmpty());\n    owned = dao.dequeueUnownedMessages(jobEvent2.getType().getQueueId(), 223456789L, 1);\n    assertEquals(1, owned.size());\n    assertEquals(replaced.msgId(), owned.getFirst().msgId());\n    assertTrue(owned.getFirst().ownedUntil() > System.currentTimeMillis());\n    assertEquals(replaced.event(), owned.getFirst().event());\n    dao.remove(replaced);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/dao/MaestroQueueDaoTest.java", "function_name": "testReplace", "index": 897, "label": 0}
{"input": "@Test\n  public void testTerminateWorkflowInstancesNotDoneWithStoppedStatus() {\n    when(instance1.getStatus()).thenReturn(WorkflowInstance.Status.CREATED);\n    when(instance1.getWorkflowUuid()).thenReturn(\"uuid1\");\n    when(instance1.getExecutionId()).thenReturn(\"exe1\");\n    when(instance2.getStatus()).thenReturn(WorkflowInstance.Status.CREATED);\n    when(instance2.getWorkflowUuid()).thenReturn(\"uuid2\");\n    when(instance2.getExecutionId()).thenReturn(\"exe2\");\n    when(instanceDao.getWorkflowInstanceStatus(workflowId, 1L, 1L)).thenReturn(null);\n    when(instanceDao.getWorkflowInstanceStatus(workflowId, 2L, 1L))\n        .thenReturn(WorkflowInstance.Status.STOPPED);\n    processor.process(() -> jobEvent1);\n    verify(actionDao, times(2)).terminate(any(WorkflowInstance.class), any(), any(), anyString());\n    verify(actionDao, times(1))\n        .terminate(instance1, tester, Actions.WorkflowInstanceAction.STOP, \"test-reason\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/TerminateInstancesJobProcessorTest.java", "function_name": "testTerminateWorkflowInstancesNotDoneWithStoppedStatus", "index": 898, "label": 0}
{"input": "private static String getNumericCellValue(Cell cell) {\n        if (DateUtil.isCellDateFormatted(cell)) {\n            return DATE_FORMATTER.get().format(cell.getDateCellValue());\n        }\n        return String.valueOf(cell.getNumericCellValue());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/Excel2PdfUtils.java", "function_name": "getNumericCellValue", "index": 899, "label": 0}
{"input": "public Type(Span span, @Nullable List<? extends @Nullable Node> children) {\n    super(span, children);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Type.java", "function_name": "Type", "index": 900, "label": 0}
{"input": "@Bean\n  public MaestroTracingManager tracingManager(Tracer tracer) {\n    LOG.info(\"Creating Maestro TracingManager within Spring boot...\");\n    return new MaestroTracingManager(tracer) {\n      @Override\n      public void tagInitSpan(\n          Span initSpan, WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n        \n      }\n    };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "tracingManager", "index": 901, "label": 0}
{"input": "@Test\n  public void testGetWorkflowInstance() {\n    WorkflowInstance instanceRun =\n        instanceDao.getWorkflowInstance(\n            wfi.getWorkflowId(), wfi.getWorkflowInstanceId(), Constants.LATEST_INSTANCE_RUN, false);\n    instanceRun.setModifyTime(null);\n    assertEquals(wfi, instanceRun);\n\n    instanceRun =\n        instanceDao.getWorkflowInstance(\n            wfi.getWorkflowId(), wfi.getWorkflowInstanceId(), \"1\", false);\n    instanceRun.setModifyTime(null);\n    assertEquals(wfi, instanceRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetWorkflowInstance", "index": 902, "label": 0}
{"input": "private void prepareStringField(\n      StringBuilder fields, String fieldName, List<StatementPreparer> preparers, String data) {\n    final int idx = getIndex(fields, fieldName, preparers, data);\n    if (idx > 0) {\n      preparers.add(stmt -> stmt.setString(idx, data));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "prepareStringField", "index": 903, "label": 0}
{"input": "public static SearchEnum fromToolName(String toolName) {\n\t\tfor (SearchEnum searchEnum : SearchEnum.values()) {\n\t\t\tif (searchEnum.getToolName().equals(toolName)) {\n\t\t\t\treturn searchEnum;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Invalid Search tool name: \" + toolName);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-searches/src/main/java/com/alibaba/cloud/ai/toolcalling/searches/SearchEnum.java", "function_name": "fromToolName", "index": 904, "label": 0}
{"input": "@Deprecated(forRemoval = true)\n    public String getSourceCodeUrlScheme() {\n      return sourceCodeUrlScheme();\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "51df2f3aa4c2d5a86bb66494e0e880e3568c80df", "file_path": "pkl-core/src/main/java/org/pkl/core/Release.java", "function_name": "getSourceCodeUrlScheme", "index": 905, "label": 0}
{"input": "@Test(expected = AccessControlException.class)\n  public void testNoAccessDisk() {\n    new File(\"/tmp/\").list();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessDisk", "index": 906, "label": 0}
{"input": "default MapParameter asMapParam() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as MAP\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/Parameter.java", "function_name": "asMapParam", "index": 907, "label": 0}
{"input": "private void handleVpnSwitch(boolean enableVpn) {\n        if (enableVpn) {\n            if (lastKnownConnectionState.isDisconnected()) {\n                Intent vpnIntent = OblivionVpnService.prepare(this);\n                if (vpnIntent != null) {\n                    vpnPermissionLauncher.launch(vpnIntent);\n                } else {\n                    startVpnService(binding.getRoot().getContext());\n                }\n                NetworkUtils.monitorInternetConnection(lastKnownConnectionState, this);\n            } else if (lastKnownConnectionState.isConnecting()) {\n                stopVpnService(binding.getRoot().getContext());\n            }\n        } else {\n            if (!lastKnownConnectionState.isDisconnected()) {\n                stopVpnService(this);\n            }\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "handleVpnSwitch", "index": 908, "label": 0}
{"input": "protected WorkflowDefinition loadWorkflow(String workflowId) throws Exception {\n    WorkflowDefinition wfd =\n        loadObject(\n            \"fixtures/workflows/definition/\" + workflowId + \".json\", WorkflowDefinition.class);\n    assertEquals(workflowId, wfd.getWorkflow().getId());\n    wfd.setTriggerUuids(IdHelper.toTriggerUuids(wfd.getWorkflow()));\n    return wfd;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroDaoBaseTest.java", "function_name": "loadWorkflow", "index": 909, "label": 0}
{"input": "@Test\n  public void testPostpone() {\n    String queueName = \"test-queue\";\n    String id = \"abcd-1234-defg-5678\";\n    assertTrue(queueDao.postpone(queueName, id, 0, 0));\n    assertEquals(1, internalQueue.size());\n    assertEquals(1, internalQueue.get(queueName).size());\n    assertEquals(id, internalQueue.get(queueName).peek());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "465feefeb15bf57091641f75d9eed7875aefe5d7", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/InMemoryQueueDaoTest.java", "function_name": "testPostpone", "index": 910, "label": 0}
{"input": "@Override\n    public List<UserVO> users() {\n        \n        List<UserVO> users = new ArrayList<>();\n        \n        List<String> wxIds = getWxIds();\n        \n        for (String wxId : wxIds) {\n            \n            boolean current = wxId.equals(currentUser());\n            \n            String avatar = getAvatar(wxId);\n            \n            String nickName = getNickName(wxId);\n            \n            users.add(new UserVO(wxId, nickName, avatar, current));\n        }\n        return users;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a65dda542a30d994605d8dc1d48cb35ce663d41", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "users", "index": 911, "label": 0}
{"input": "@Test\n  public void testInvalidResetIterationDetail() throws Exception {\n    TestDetails testDetails =\n        loadObject(\"fixtures/instances/sample-foreach-details.json\", TestDetails.class);\n    AssertHelper.assertThrows(\n        \"should throw exception for Invalid case\",\n        IllegalArgumentException.class,\n        \"Invalid: the restarted iteration [8]'s status [FAILED] is missing\",\n        () ->\n            testDetails.test2.resetIterationDetail(\n                8, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED));\n\n    AssertHelper.assertThrows(\n        \"should throw exception for Invalid case\",\n        IllegalArgumentException.class,\n        \"Invalid: the restarted iteration [1] is missing\",\n        () ->\n            testDetails.test1.resetIterationDetail(\n                1, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/ForeachDetailsTest.java", "function_name": "testInvalidResetIterationDetail", "index": 912, "label": 0}
{"input": "default boolean getBooleanProperty(String key, boolean defaultValue) {\n    var val = this.getProperty(key, null);\n    return val != null ? Boolean.parseBoolean(val) : defaultValue;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-database/src/main/java/com/netflix/maestro/database/DatabaseConfiguration.java", "function_name": "getBooleanProperty", "index": 913, "label": 0}
{"input": "public static <T, K, U> Collector<T, ?, Map<K, U>> toListMapIgnoringDuplicateKeys(\n      Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper) {\n    return Collectors.toMap(keyMapper, valueMapper, (u, v) -> u, LinkedHashMap::new);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/MapHelper.java", "function_name": "toListMapIgnoringDuplicateKeys", "index": 914, "label": 0}
{"input": "private ExpressionNode resolveBaseModuleClass(\n      org.pkl.core.runtime.Identifier className, Supplier<VmClass> clazz) {\n    return isBaseModule\n        ?\n        \n        new GetBaseModuleClassNode(className)\n        : new ConstantValueNode(clazz.get());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "resolveBaseModuleClass", "index": 915, "label": 0}
{"input": "@Override\n  protected ResponseEntity<Object> handleHttpMessageNotReadable(\n      HttpMessageNotReadableException e,\n      HttpHeaders headers,\n      HttpStatus status,\n      WebRequest request) {\n    LOG.info(\"Handle HttpMessageNotReadableException with a message: {}\", e.getMessage());\n    return buildDetailedResponse(e, Collections.emptyList(), headers, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleHttpMessageNotReadable", "index": 916, "label": 0}
{"input": "@Test\n  public void testFlowTimeoutWithTasks() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n    when(future.cancel(false)).thenReturn(true);\n\n    Task task1 = flow.newTask(new TaskDef(\"task1\", \"noop\", null, null), false);\n    task1.setStatus(Task.Status.FAILED);\n    task1.setStartDelayInSeconds(3000);\n    flow.addFinishedTask(task1);\n    flowActor.runForAction(Action.FLOW_RESUME);\n    assertFalse(flowActor.containsChild(\"task1\"));\n\n    flowActor.runForAction(Action.FLOW_TIMEOUT);\n    assertEquals(Flow.Status.TIMED_OUT, flow.getStatus());\n    assertEquals(\n        Set.of(new Action.FlowTaskRetry(\"task1\"), Action.FLOW_TIMEOUT),\n        flowActor.getScheduledActions().keySet());\n    verifyActions(flowActor.getChild(\"task1\"), Action.TASK_START, Action.TASK_STOP);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testFlowTimeoutWithTasks", "index": 917, "label": 0}
{"input": "@Override\n  public void terminateJob(String jobId) {\n    client.batch().v1().jobs().inNamespace(NAMESPACE).withName(jobId).delete();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/Fabric8RuntimeExecutor.java", "function_name": "terminateJob", "index": 918, "label": 0}
{"input": "private void mergeUserProvidedStepParams(\n      Map<String, ParamDefinition> allParamDefs,\n      Map<String, ParamDefinition> userParams,\n      WorkflowSummary workflowSummary) {\n    RunPolicy runConfig = workflowSummary.getRunPolicy();\n    boolean isFreshRun = runConfig == null || runConfig.isFreshRun();\n    ParamSource source = getParamSource(workflowSummary.getInitiator(), isFreshRun);\n    ParamsMergeHelper.mergeParams(\n        allParamDefs,\n        userParams,\n        new ParamsMergeHelper.MergeContext(source, false, false, !isFreshRun));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "mergeUserProvidedStepParams", "index": 919, "label": 0}
{"input": "private RunResponse setupRestartStepInfoForRestartDirectly() {\n    stepInstance.getRuntimeState().setStatus(StepInstance.Status.FATALLY_FAILED);\n    stepInstance.getStepRetry().setRetryable(false);\n    ((TypedStep) stepInstance.getDefinition()).setFailureMode(FailureMode.FAIL_AFTER_RUNNING);\n    stepInstanceDao.insertOrUpsertStepInstance(stepInstance, true);\n    return RunResponse.builder().instance(instance).stepId(\"job1\").build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "setupRestartStepInfoForRestartDirectly", "index": 920, "label": 0}
{"input": "public LetExpr(Parameter parameter, Expr bindingExpr, Expr expr, Span span) {\n      super(span, List.of(parameter, bindingExpr, expr));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "LetExpr", "index": 921, "label": 0}
{"input": "@Test\n  public void testPending() {\n    WorkflowDef def = new WorkflowDef();\n    def.setName(\"pending_count_test\");\n\n    Workflow workflow = createTestWorkflow(TEST_WORKFLOW_ID);\n    workflow.setWorkflowDefinition(def);\n\n    List<String> workflowIds = generateWorkflows(workflow, 10);\n    long count = getExecutionDAO().getPendingWorkflowCount(def.getName());\n    assertEquals(10, count);\n\n    for (String workflowId : workflowIds) {\n      getExecutionDAO().removeWorkflow(workflowId);\n    }\n\n    count = getExecutionDAO().getPendingWorkflowCount(def.getName());\n    assertEquals(0, count);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAOTest.java", "function_name": "testPending", "index": 922, "label": 0}
{"input": "@Override\n  public Long getCallBackDelayInSecs(StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary != null) {\n      StepInstance.Status stepInstanceStatus = runtimeSummary.getRuntimeState().getStatus();\n      Map<String, Long> callbackDelayConfigForStepInstanceStatus =\n          callbackDelayConfigStepInstanceStatusMap\n              .getFixedCallbackDelayInSecs()\n              .get(stepInstanceStatus);\n      if (callbackDelayConfigForStepInstanceStatus == null) {\n        return null;\n      } else {\n        Map<String, Long> fixedCallbackDelayConfig =\n            new LinkedHashMap<>(callbackDelayConfigForStepInstanceStatus);\n        return getCallbackDelayForStepType(\n            fixedCallbackDelayConfig, runtimeSummary, stepInstanceStatus);\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeFixedCallbackDelayPolicy.java", "function_name": "getCallBackDelayInSecs", "index": 923, "label": 0}
{"input": "@Test\n  public void testValid() {\n    Assert.assertTrue(validator.validate(new DummyWorkflow(100L)).isEmpty());\n    Assert.assertTrue(validator.validate(new DummyWorkflow(\"100\")).isEmpty());\n    Assert.assertTrue(validator.validate(new DummyWorkflow(\"10 min\")).isEmpty());\n    Assert.assertTrue(validator.validate(new DummyWorkflow(\"${foo}\")).isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/TimeoutConstraintTest.java", "function_name": "testValid", "index": 924, "label": 0}
{"input": "public boolean isKeyword() {\n    return switch (this) {\n      case ABSTRACT,\n          AMENDS,\n          AS,\n          CLASS,\n          CONST,\n          ELSE,\n          EXTENDS,\n          EXTERNAL,\n          FALSE,\n          FIXED,\n          FOR,\n          FUNCTION,\n          HIDDEN,\n          IF,\n          IMPORT,\n          IMPORT_STAR,\n          IN,\n          IS,\n          LET,\n          LOCAL,\n          MODULE,\n          NEW,\n          NOTHING,\n          NULL,\n          OPEN,\n          OUT,\n          OUTER,\n          READ,\n          READ_STAR,\n          READ_QUESTION,\n          SUPER,\n          THIS,\n          THROW,\n          TRACE,\n          TRUE,\n          TYPE_ALIAS,\n          UNKNOWN,\n          WHEN,\n          UNDERSCORE,\n          PROTECTED,\n          OVERRIDE,\n          RECORD,\n          DELETE,\n          CASE,\n          SWITCH,\n          VARARG ->\n          true;\n      default -> false;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Token.java", "function_name": "isKeyword", "index": 925, "label": 0}
{"input": "private boolean jj_3R_43() {\n    if (jj_3R_45()) return true;\n    Token xsp;\n    while (true) {\n      xsp = jj_scanpos;\n      if (jj_3R_46()) {\n        jj_scanpos = xsp;\n        break;\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_43", "index": 926, "label": 0}
{"input": "@Test\n  public void testTriggerWorkflows() {\n    ArrayList<PlannedTimeTriggerExecution> plannedList = new ArrayList<>();\n    plannedList.add(new PlannedTimeTriggerExecution(null, null));\n    when(executionPlanner.calculatePlannedExecutions(any(), any(), any())).thenReturn(plannedList);\n    when(workflowLauncher.startWorkflowBatchRuns(any(), any(), any(), any()))\n        .thenReturn(List.of(RunResponse.builder().build()));\n    processor.process(() -> message);\n    Mockito.verify(triggerProducer, Mockito.times(1)).push(any(), anyInt());\n    Mockito.verify(workflowLauncher, Mockito.times(1))\n        .startWorkflowBatchRuns(any(), Mockito.eq(\"ACTIVE\"), any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/messageprocessors/TimeTriggerExecutionProcessorTest.java", "function_name": "testTriggerWorkflows", "index": 927, "label": 0}
{"input": "private boolean setDisassemblyComment(String addressStr, String comment) {\n        return setCommentAtAddress(addressStr, comment, CodeUnit.EOL_COMMENT, \"Set disassembly comment\");\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "setDisassemblyComment", "index": 928, "label": 0}
{"input": "private void setLimitIfNotNull(ResourceRequirementsBuilder builder, String key, String value) {\n    if (value != null) {\n      builder.addToLimits(key, new Quantity(value));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/Fabric8RuntimeExecutor.java", "function_name": "setLimitIfNotNull", "index": 929, "label": 0}
{"input": "public MaestroStepInstanceDao(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "MaestroStepInstanceDao", "index": 930, "label": 0}
{"input": "public static StepAction createBypassStepDependencies(StepInstance stepInstance, User user) {\n    return create(\n        Actions.StepInstanceAction.BYPASS_STEP_DEPENDENCIES, stepInstance, user, null, false, null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/StepAction.java", "function_name": "createBypassStepDependencies", "index": 931, "label": 0}
{"input": "private boolean isMatched(SignalTrigger trigger, SignalInstance instance) {\n    if (trigger == null\n        || trigger.getDefinitions() == null\n        || !trigger.getDefinitions().containsKey(instance.getName())) {\n      return false;\n    }\n    var entry = trigger.getDefinitions().get(instance.getName());\n    if (entry.getMatchParams() == null || entry.getMatchParams().isEmpty()) {\n      return true;\n    }\n    if (instance.getParams() == null || instance.getParams().isEmpty()) {\n      return false;\n    }\n    return entry.getMatchParams().entrySet().stream()\n        .allMatch(\n            e -> {\n              SignalParamValue value = instance.getParams().get(e.getKey());\n              if (value == null) {\n                return false;\n              }\n              return e.getValue().isSatisfied(value);\n            });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "isMatched", "index": 932, "label": 0}
{"input": "@Test\n  public void testAddDuplicateTimelineEvents() {\n    WorkflowRuntimeSummary summary = new WorkflowRuntimeSummary();\n    TimelineEvent event = TimelineLogEvent.info(\"hello world\");\n    summary.addTimeline(event);\n    summary.addTimeline(TimelineLogEvent.info(\"hello world\"));\n    summary.addTimeline(TimelineLogEvent.info(\"hello world\"));\n    summary.addTimeline(TimelineLogEvent.info(\"hello world\"));\n    assertEquals(Collections.singletonList(event), summary.getTimeline().getTimelineEvents());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/WorkflowRuntimeSummaryTest.java", "function_name": "testAddDuplicateTimelineEvents", "index": 933, "label": 0}
{"input": "private void populateChatRoomInfo(ChatRoomDetailVO chatRoomDetailVo) {\n        \n        ChatRoomInfo chatRoomInfo = chatRoomInfoRepository.queryChatRoomInfo(chatRoomDetailVo.getChatRoomName());\n        \n        ChatRoomInfoVO chatRoomInfoVO = chatRoomMapping.convert(chatRoomInfo);\n        \n        if (chatRoomInfoVO.getAnnouncementPublishTime() > 0) {\n            chatRoomInfoVO.setStrAnnouncementPublishTime(DateUtil.formatDateTime(new Date(chatRoomInfoVO.getAnnouncementPublishTime() * 1000L)));\n        }\n        \n        chatRoomInfoVO.setAnnouncementPublisher(contactRepository.getContactNickname(chatRoomInfoVO.getAnnouncementEditor()));\n        \n        chatRoomDetailVo.setChatRoomInfo(chatRoomInfoVO);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ChatRoomServiceImpl.java", "function_name": "populateChatRoomInfo", "index": 934, "label": 0}
{"input": "@JsonIgnore\n  public void sortSteps() {\n    if (steps != null) {\n      steps.sort(Comparator.comparingLong(o -> o.get(0)));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowStepStatusSummary.java", "function_name": "sortSteps", "index": 935, "label": 0}
{"input": "@Test\n    public void testDateAll() throws Exception {\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        SimpleDateFormat format2 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n\n        long dateTime = 0L;\n        while (true) {\n            Date date = new Date(dateTime);\n            double excelDate = DateUtil.getExcelDate(date);\n\n\n\n\n\n\n            LOGGER.info(\"date:{}\", format2.format(DateUtil.getJavaDate(BigDecimal.valueOf(excelDate)\n                .setScale(10, RoundingMode.HALF_UP).doubleValue())));\n            dateTime += 100000000000L;\n            \n            if (dateTime % (24 * 60 * 60 * 1000) == 0) {\n                log.info(\"{}成功\", format.format(date));\n            }\n            if (dateTime > 1673957544750L) {\n                log.info(\"结束啦\");\n                break;\n            }\n        }\n        log.info(\"结束啦\");\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/Lock2Test.java", "function_name": "testDateAll", "index": 936, "label": 0}
{"input": "@Test\n  public void testStartSpan() {\n    TestTracingManager tm = new TestTracingManager(mockTracer);\n    String value = \"blah\";\n    tm.start(defaultContext, value);\n    verify(mockSpan, times(1)).annotate(value);\n    verify(mockSpan, times(1)).start();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tracing/MaestroTracingManagerTest.java", "function_name": "testStartSpan", "index": 937, "label": 0}
{"input": "@Autowired\n  public FlowEngineController(FlowExecutor flowExecutor) {\n    this.flowExecutor = flowExecutor;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/FlowEngineController.java", "function_name": "FlowEngineController", "index": 938, "label": 0}
{"input": "@SuppressWarnings({\"PMD.AvoidInstantiatingObjectsInLoops\", \"OperatorWrap\"})\n  public void initializeOutputs(\n      Map<StepOutputsDefinition.StepOutputType, List<MapParameter>> outputParameters) {\n    if (outputs == null) {\n      outputs = new LinkedHashMap<>();\n    }\n    for (Map.Entry<StepOutputsDefinition.StepOutputType, List<MapParameter>> entry :\n        outputParameters.entrySet()) {\n      if (entry.getKey().equals(StepOutputsDefinition.StepOutputType.SIGNAL)) {\n        List<MapParameter> outputParams = entry.getValue();\n        outputs.put(\n            StepOutputsDefinition.StepOutputType.SIGNAL,\n            new SignalStepOutputs(\n                outputParams.stream()\n                    .map(p -> new SignalStepOutputs.SignalStepOutput(p, null))\n                    .collect(Collectors.toList())));\n      }\n    }\n    synced = false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "initializeOutputs", "index": 939, "label": 0}
{"input": "public Document convertToDocument(TableInfoBO tableInfoBO, ColumnInfoBO columnInfoBO) {\n\t\tString text = Optional.ofNullable(columnInfoBO.getDescription()).orElse(columnInfoBO.getName());\n\t\tString id = tableInfoBO.getName() + \".\" + columnInfoBO.getName();\n\t\tMap<String, Object> metadata = Map.of(\"id\", id, \"name\", columnInfoBO.getName(), \"tableName\",\n\t\t\t\ttableInfoBO.getName(), \"description\", Optional.ofNullable(columnInfoBO.getDescription()).orElse(\"\"),\n\t\t\t\t\"type\", columnInfoBO.getType(), \"primary\", columnInfoBO.isPrimary(), \"notnull\",\n\t\t\t\tcolumnInfoBO.isNotnull(), \"vectorType\", \"id\"0);\n\t\tif (columnInfoBO.getSamples() != null) {\n\t\t\tmetadata.put(\"id\"1, columnInfoBO.getSamples());\n\t\t}\n\t\t\n\t\treturn new Document(id, text, metadata);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/simple/SimpleVectorStoreService.java", "function_name": "convertToDocument", "index": 940, "label": 0}
{"input": "private StepRuntimeState getRuntimeState(ResultSet rs) throws SQLException {\n    return fromJson(\n        Checks.notNull(\n            rs.getString(StepInstanceField.RUNTIME_STATE.field),\n            \"step runtime_state column cannot be null\"),\n        StepRuntimeState.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getRuntimeState", "index": 941, "label": 0}
{"input": "private boolean jj_3R_62() {\n    if (jj_scan_token(MINUS)) return true;\n    if (jj_3R_53()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_62", "index": 942, "label": 0}
{"input": "public TagPermit(String tag, int maxAllowed, int currentUsed) {\n    this.tag = tag;\n    this.maxAllowed = maxAllowed;\n    this.currentUsed = currentUsed;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/tagpermits/TagPermit.java", "function_name": "TagPermit", "index": 943, "label": 0}
{"input": "public void finalCall(Flow flow) {\n    if (flow.getFlowDef().isFinalFlowStatusCallbackEnabled()) {\n      if (flow.getStatus().isSuccessful()) {\n        finalCallback.onFlowCompleted(flow);\n      } else {\n        finalCallback.onFlowTerminated(flow);\n      }\n      finalCallback.onFlowFinalized(flow);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "finalCall", "index": 944, "label": 0}
{"input": "@Test\n  public void isTagListDuplicate() {\n    List<Tag> tags = Arrays.asList(Tag.create(\"tag1\"), Tag.create(\"tag1\"));\n    Set<ConstraintViolation<TestTagList>> violations = validator.validate(new TestTagList(tags));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestTagList> violation = violations.iterator().next();\n    assertEquals(\"tags\", violation.getPropertyPath().toString());\n    assertEquals(\n        \"[tag list definition] cannot contain duplicate tag names\", violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/TagListConstraintTest.java", "function_name": "isTagListDuplicate", "index": 945, "label": 0}
{"input": "@JsonIgnore\n  public boolean isSatisfied() {\n    return statuses.stream().noneMatch(e -> e.getStatus() == StepDependencyMatchStatus.PENDING);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepDependencies.java", "function_name": "isSatisfied", "index": 946, "label": 0}
{"input": "@Test\n  public void testMergeUpstreamRestartWithMutableOnRestart() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'default_value','mode': 'MUTABLE_ON_START_RESTART', 'meta': {'source': 'SYSTEM_DEFAULT'}}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'parent_wf_defined_value', 'mode': 'MUTABLE', 'meta': {'source': 'DEFINITION'}}}\");\n\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, upstreamRestartMergeContext);\n    assertEquals(1, allParams.size());\n    assertEquals(\"parent_wf_defined_value\", allParams.get(\"workflow_default_param\").getValue());\n    assertEquals(\n        ParamMode.MUTABLE_ON_START_RESTART, allParams.get(\"workflow_default_param\").getMode());\n    assertEquals(ParamSource.SUBWORKFLOW, allParams.get(\"workflow_default_param\").getSource());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeUpstreamRestartWithMutableOnRestart", "index": 947, "label": 0}
{"input": "@Bean\n  public OutputDataManager outputParamsManager(OutputDataDao outputDataDao) {\n    LOG.info(\"Creating OutputParamsManager within Spring boot...\");\n    return new OutputDataManager(outputDataDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "outputParamsManager", "index": 948, "label": 0}
{"input": "public String isRecallInfoSatisfyRequirement(String query, SchemaDTO schemaDTO, List<String> evidenceList) {\n\t\tString prompt = PromptHelper.mixSqlGeneratorSystemCheckPrompt(query, dbConfig, schemaDTO, evidenceList);\n\t\treturn aiService.call(prompt);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseNl2SqlService.java", "function_name": "isRecallInfoSatisfyRequirement", "index": 949, "label": 0}
{"input": "public void restartActivity(Context context) {\n        Log.d(\"BeforeRestart\", fileManager.getString(SELECTED_LANGUAGE));\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            ((Activity) context).recreate();\n        } else {\n            Intent intent = ((Activity) context).getIntent();\n            context.startActivity(intent);\n            ((Activity) context).finish();\n            context.startActivity(intent);\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "2f3b84a45acbf027ab617f69cb6bdd3f251bcd76", "file_path": "app/src/main/java/org/bepass/oblivion/LocaleHandler.java", "function_name": "restartActivity", "index": 950, "label": 0}
{"input": "private void renderAndWriteTemplates(List<String> templateNames, List<Map<String, Object>> models, Path projectRoot,\n\t\t\tProjectDescription projectDescription) {\n\t\t\n\t\tPath fileRoot = createDirectory(projectRoot, projectDescription);\n\t\tfor (int i = 0; i < templateNames.size(); i++) {\n\t\t\tString templateName = templateNames.get(i);\n\t\t\tString template;\n\t\t\ttry {\n\t\t\t\ttemplate = templateRenderer.render(templateName, models.get(i));\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new RuntimeException(\"Got error when rendering template\" + templateName, e);\n\t\t\t}\n\t\t\tPath file;\n\t\t\ttry {\n\t\t\t\tfile = Files.createFile(fileRoot.resolve(templateName));\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new RuntimeException(\"Got error when creating file\", e);\n\t\t\t}\n\t\t\ttry (PrintWriter writer = new PrintWriter(Files.newBufferedWriter(file))) {\n\t\t\t\twriter.print(template);\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new RuntimeException(\"Got error when writing template \" + templateName, e);\n\t\t\t}\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "faca8d2563084d832089ec323762fc97bb5a542f", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/generator/workflow/WorkflowProjectGenerator.java", "function_name": "renderAndWriteTemplates", "index": 951, "label": 0}
{"input": "private void doEvalCollection(\n      VirtualFrame frame, VmClass parent, ObjectData data, VmCollection iterable) {\n    if (isTypedObjectClass(parent) || parent == getMappingClass()) {\n      CompilerDirectives.transferToInterpreter();\n      throw exceptionBuilder()\n          .evalError(\"cannotSpreadObject\", iterable.getVmClass(), parent)\n          .withHint(\n              \"`List` and `Set` can only be spread into objects of type `Dynamic` and `Listing`.\")\n          .withProgramValue(\"Value\", iterable)\n          .build();\n    }\n    spreadIterable(frame, data, iterable);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "doEvalCollection", "index": 952, "label": 0}
{"input": "private void initializeBasic() {\n        log.info(\"Initializing translation system...\");\n        this.reset();\n\n        \n        languageFilesManager.deploy(\"zh_cn\", fallbackConfig);\n        loadedLanguages.add(\"zh_cn\");\n\n        \n        scanAvailableLanguages();\n\n        \n        postProcessors.add(new FillerProcessor());\n\n        log.info(\"Translation system initialized with {} available languages\", availableLanguages.size());\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "00640fe4d10cb62782952a75d392f5ca0b48d193", "file_path": "src/main/java/com/ghostchu/peerbanhelper/text/TextManager.java", "function_name": "initializeBasic", "index": 953, "label": 0}
{"input": "@Test\n  public void testWorkflowWithSignalSubscriptionsFailsOnSignalService() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID3);\n    Mockito.doThrow(\n            new MaestroRuntimeException(\n                MaestroRuntimeException.Code.INTERNAL_ERROR, \"test error message\"))\n        .when(triggerClient)\n        .upsertTriggerSubscription(\n            Mockito.eq(wfd.getWorkflow()), Mockito.eq(wfd.getTriggerUuids()), Mockito.eq(null));\n    AssertHelper.assertThrows(\n        \"expects mockito test error\",\n        MaestroRuntimeException.class,\n        \"test error message\",\n        () ->\n            workflowDao.addWorkflowDefinition(\n                wfd, wfd.getPropertiesSnapshot().extractProperties()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testWorkflowWithSignalSubscriptionsFailsOnSignalService", "index": 954, "label": 0}
{"input": "@Test\n\t@DisplayName(\"Abstract Search Test\")\n\t@EnabledIfEnvironmentVariable(named = TavilySearchConstants.API_KEY_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\tpublic void abstractSearchTest() {\n\t\tvar resp = searchService.query(\"Spring AI Alibaba\");\n\t\tassert resp != null && resp.getSearchResult() != null && resp.getSearchResult().results() != null\n\t\t\t\t&& !resp.getSearchResult().results().isEmpty();\n\t\tlog.info(\"results: \" + resp.getSearchResult());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-tavilysearch/src/test/java/com/alibaba/cloud/ai/toolcalling/tavily/TavilySearchServiceTest.java", "function_name": "abstractSearchTest", "index": 955, "label": 0}
{"input": "public MaestroUnprocessableEntityException(String template, Object... args) {\n    super(Code.UNPROCESSABLE_ENTITY, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroUnprocessableEntityException.java", "function_name": "MaestroUnprocessableEntityException", "index": 956, "label": 0}
{"input": "void SkipLexicalActions(Token matchedToken) {\n    switch (jjmatchedKind) {\n      default:\n        break;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "SkipLexicalActions", "index": 957, "label": 0}
{"input": "private void decide() {\n    LOG.debug(\"Start deciding the whole flow paths in [{}]\", reference());\n    if (flow.getPrepareTask().getStatus() == Task.Status.FAILED_WITH_TERMINAL_ERROR) {\n      \n      flow.getMonitorTask().setStatus(Task.Status.CANCELED);\n    } else {\n      \n      Map<String, Task.Status> taskStatusMap =\n          flow.getStreamOfAllTasks()\n              .collect(Collectors.toMap(Task::referenceTaskName, Task::getStatus, (u, v) -> v));\n      flow.getFlowDef().getTasks().stream()\n          .map(t -> nextTask(t, taskStatusMap))\n          .filter(Objects::nonNull)\n          .forEach(this::startTask);\n\n      getContext().refresh(flow);\n    }\n\n    tryTerminate();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "decide", "index": 958, "label": 0}
{"input": "private void updateLatestInstanceId(Connection conn, String workflowId, long latestInstanceId)\n      throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(UPDATE_LATEST_WORKFLOW_INSTANCE_ID_QUERY)) {\n      stmt.setLong(1, latestInstanceId);\n      stmt.setString(2, workflowId);\n      Checks.checkTrue(\n          stmt.executeUpdate() == SUCCESS_WRITE_SIZE,\n          \"updateLatestInstanceId expects to always return 1.\");\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "updateLatestInstanceId", "index": 959, "label": 0}
{"input": "private String generateForeachWorkflowId(\n      WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n    long instanceId = workflowSummary.getWorkflowInstanceId();\n    if (workflowSummary.getInitiator().getType().isInline()) {\n      instanceId =\n          ((UpstreamInitiator) workflowSummary.getInitiator()).getNonInlineParent().getInstanceId();\n    }\n\n    return String.format(\n        \"%s_%s_%s_%s\",\n        FOREACH_TAG_NAME,\n        IdHelper.hashKey(workflowSummary.getInternalId()),\n        IdHelper.rangeKey(instanceId),\n        HashHelper.md5(\n            runtimeSummary.getStepId(),\n            String.valueOf(workflowSummary.getWorkflowInstanceId()),\n            workflowSummary.getWorkflowId()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "generateForeachWorkflowId", "index": 960, "label": 0}
{"input": "protected void UpdateLineColumn(char c) {\n    column++;\n\n    if (prevCharIsLF) {\n      prevCharIsLF = false;\n      line += (column = 1);\n    } else if (prevCharIsCR) {\n      prevCharIsCR = false;\n      if (c == '\\n') {\n        prevCharIsLF = true;\n      } else line += (column = 1);\n    }\n\n    switch (c) {\n      case '\\r':\n        prevCharIsCR = true;\n        break;\n      case '\\n':\n        prevCharIsLF = true;\n        break;\n      case '\\t':\n        column--;\n        column += (tabSize - (column % tabSize));\n        break;\n      default:\n        break;\n    }\n\n    bufline[bufpos] = line;\n    bufcolumn[bufpos] = column;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "UpdateLineColumn", "index": 961, "label": 0}
{"input": "@Test\n  public void testStartWithRunStrategyForNewStart() {\n    wfi.setWorkflowInstanceId(0L);\n    wfi.setWorkflowRunId(0L);\n    wfi.setWorkflowUuid(\"test-uuid\");\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(1, res);\n    assertEquals(2, wfi.getWorkflowInstanceId());\n    assertEquals(1, wfi.getWorkflowRunId());\n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n    WorkflowInstance latestRun =\n        dao.getLatestWorkflowInstanceRun(wfi.getWorkflowId(), wfi.getWorkflowInstanceId());\n    assertEquals(2, latestRun.getWorkflowInstanceId());\n    assertEquals(\"test-uuid\", latestRun.getWorkflowUuid());\n    verifyPublish(1, 0, 0, 0, 0);\n    MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, 2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "testStartWithRunStrategyForNewStart", "index": 962, "label": 0}
{"input": "public Keyword getClassKeyword() {\n    assert children != null;\n    return (Keyword) children.get(keywordOffset);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d270829ed3d344cf72964e00c582c527274d5cbd", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Class.java", "function_name": "getClassKeyword", "index": 963, "label": 0}
{"input": "@Override\n  public void checkConnect(String host, int port, Object context) {\n    if (accs.get() != null) {\n      super.checkConnect(host, port, context);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkConnect", "index": 964, "label": 0}
{"input": "public static String getCountryName(String code) {\n        Locale locale = new Locale(\"en\", code); \n        return locale.getDisplayCountry(Locale.ENGLISH);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "c5da2639ff2e87ab6ccffa3371940923892cca84", "file_path": "app/src/main/java/org/bepass/oblivion/CountryUtils.java", "function_name": "getCountryName", "index": 965, "label": 0}
{"input": "public final void Name() throws ParseException {\n    \n    ASTName jjtn000 = new ASTName(this, JJTNAME);\n    boolean jjtc000 = true;\n    jjtree.openNodeScope(jjtn000);\n    jjtn000.jjtSetFirstToken(getToken(1));\n    Token t;\n    try {\n      t = jj_consume_token(IDENTIFIER);\n      jjtree.closeNodeScope(jjtn000, true);\n      jjtc000 = false;\n      jjtn000.jjtSetLastToken(getToken(0));\n      jjtn000.value = t.image;\n    } finally {\n      if (jjtc000) {\n        jjtree.closeNodeScope(jjtn000, true);\n        jjtn000.jjtSetLastToken(getToken(0));\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "Name", "index": 966, "label": 0}
{"input": "public static boolean isTimeTriggerDisabledException(\n      MaestroUnprocessableEntityException exception) {\n    return exception.getMessage() != null\n        && exception.getMessage().contains(TIME_TRIGGER_DISABLED_MESSAGE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/ExceptionClassifier.java", "function_name": "isTimeTriggerDisabledException", "index": 967, "label": 0}
{"input": "public String convertId(String id) {\n\t\tif (id == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isPlanId(id)) {\n\t\t\treturn toPlanTemplateId(id);\n\t\t}\n\t\telse if (isPlanTemplateId(id)) {\n\t\t\treturn toPlanId(id);\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\tlogger.warn(\"Unable to determine the ID type [{}], return the original ID\", id);\n\t\t\treturn id;\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/coordinator/PlanIdDispatcher.java", "function_name": "convertId", "index": 968, "label": 0}
{"input": "public static boolean isNullOrEmpty(CharSequence cs) {\n    return cs == null || cs.length() == 0;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/Checks.java", "function_name": "isNullOrEmpty", "index": 969, "label": 0}
{"input": "private static void createParentDirectories(Path path) throws IOException {\n\t\tPath parent = path.getParent();\n\t\tif (parent != null && !Files.exists(parent)) {\n\t\t\tFiles.createDirectories(parent);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FileOperationUtil.java", "function_name": "createParentDirectories", "index": 970, "label": 0}
{"input": "@SneakyThrows\n  public static Optional<Date> nextExecutionDate(\n      TimeTrigger trigger, Date startDate, String uniqueId) {\n    CronTimeTrigger cronTimeTrigger = getCronTimeTrigger(trigger);\n    if (cronTimeTrigger != null) {\n      CronExpression cronExpression =\n          TriggerHelper.buildCron(cronTimeTrigger.getCron(), cronTimeTrigger.getTimezone());\n      Date nextTime = cronExpression.getNextValidTimeAfter(startDate);\n      if (nextTime != null) {\n        nextTime.setTime(\n            nextTime.getTime()\n                + getDelayInSeconds(cronTimeTrigger, uniqueId) * TimeTrigger.MS_IN_SECONDS);\n      }\n      return Optional.ofNullable(nextTime);\n    }\n\n    throw new UnsupportedOperationException(\n        \"TimeTrigger nextExecutionDate is not implemented for type: \" + trigger.getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/TriggerHelper.java", "function_name": "nextExecutionDate", "index": 971, "label": 0}
{"input": "@Override\n    public ReloadResult reloadModule() throws Exception {\n        reset();\n        initializeBasic();\n        return Reloadable.super.reloadModule();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "00640fe4d10cb62782952a75d392f5ca0b48d193", "file_path": "src/main/java/com/ghostchu/peerbanhelper/text/TextManager.java", "function_name": "reloadModule", "index": 972, "label": 0}
{"input": "@ExceptionHandler(\n      value = {\n        IllegalArgumentException.class,\n        NullPointerException.class,\n        ValidationException.class\n      })\n  protected ResponseEntity<Object> handlePreconditionsException(\n      RuntimeException e, WebRequest request) {\n    LOG.info(\"Handle Preconditions Exception with a message: {}\", e.getMessage());\n    return buildDetailedResponse(e, HttpStatus.BAD_REQUEST, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handlePreconditionsException", "index": 973, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testFailedCallConstructor() {\n    SelTypes.DATETIME_ZONE.call(\"constructor\", new SelType[0]);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypesTest.java", "function_name": "testFailedCallConstructor", "index": 974, "label": 0}
{"input": "@Bean\n\tpublic ChatClient reporterAgent(ChatClient.Builder reporterChatClientBuilder) {\n\t\treturn reporterChatClientBuilder.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "reporterAgent", "index": 975, "label": 0}
{"input": "public static int[] extractPageNumbers(String fileName) {\n    \n    int pageIndex = fileName.indexOf(\"page_\");\n\n    if (pageIndex == -1) {\n      return null;\n    }\n\n    \n    String afterPage = fileName.substring(pageIndex + 5);\n\n    \n    String[] parts = afterPage.split(\"_\");\n\n    if (parts.length >= 2) {\n      try {\n        \n        int firstNumber = Integer.parseInt(parts[0]);\n\n        \n        String secondPart = parts[1];\n        int dotIndex = secondPart.indexOf(\".\");\n        if (dotIndex != -1) {\n          secondPart = secondPart.substring(0, dotIndex);\n        }\n\n        int secondNumber = Integer.parseInt(secondPart);\n\n        return new int[]{firstNumber, secondNumber};\n      } catch (NumberFormatException e) {\n        return null;\n      }\n    }\n\n    return null;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/DealFileService.java", "function_name": "extractPageNumbers", "index": 976, "label": 0}
{"input": "private void renderByteSize(VmDataSize size) {\n      var value = size.getValue();\n      if (value % 1 == 0) {\n        append((int) value);\n      } else if ((value * 10) % 1 == 0) {\n        append(String.format(\"%.1f\", value));\n      } else {\n        append(String.format(\"%.2f\", value));\n      }\n      append(\".\");\n      append(size.getUnit());\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmValueRenderer.java", "function_name": "renderByteSize", "index": 977, "label": 0}
{"input": "@Test\n  public void testLeafStepRetryable() {\n    event.setStepType(StepType.NOTEBOOK);\n    event.setEntityType(StepInstanceWakeUpEvent.EntityType.STEP);\n    event.setStepStatus(StepInstance.Status.PLATFORM_FAILED);\n    event.setStepUuid(stepUuid);\n    subject.process(() -> event);\n\n    Mockito.verify(workflowExecutor, Mockito.times(1)).resetTaskOffset(stepUuid);\n    Mockito.verifyNoInteractions(stepInstanceDao);\n    Mockito.verifyNoInteractions(workflowInstanceDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "testLeafStepRetryable", "index": 978, "label": 0}
{"input": "@Test\n    public void Encryption() throws Exception {\n        String file = TestFileUtil.getPath() + \"large\" + File.separator + \"large07.xlsx\";\n        POIFSFileSystem fs = new POIFSFileSystem();\n        EncryptionInfo info = new EncryptionInfo(EncryptionMode.agile);\n        Encryptor enc = info.getEncryptor();\n        enc.confirmPassword(\"foobaa\");\n        OPCPackage opc = OPCPackage.open(new File(file), PackageAccess.READ_WRITE);\n        OutputStream os = enc.getDataStream(fs);\n        opc.save(os);\n        opc.close();\n        \n        \n        FileOutputStream fos = new FileOutputStream(\"D:\\\\test\\\\99999999999.xlsx\");\n        fs.writeFilesystem(fos);\n        fos.close();\n        fs.close();\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/Poi3Test.java", "function_name": "Encryption", "index": 979, "label": 0}
{"input": "private boolean isPaddingPage(byte[] page) {\n        for (byte b : page) {\n            if (b != 0) {\n                return false;\n            }\n        }\n        return true;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DecryptServiceImpl.java", "function_name": "isPaddingPage", "index": 980, "label": 0}
{"input": "@Bean(name = BraveSearchConstants.TOOL_NAME)\n\t@ConditionalOnMissingBean\n\t@Description(\"Use brave search engine to query.\")\n\tpublic BraveSearchService braveSearch(BraveSearchProperties properties, JsonParseTool jsonParseTool) {\n\t\tConsumer<HttpHeaders> consumer = headers -> {\n\t\t\theaders.add(HttpHeaders.USER_AGENT, CommonToolCallConstants.DEFAULT_USER_AGENTS[ThreadLocalRandom.current()\n\t\t\t\t.nextInt(CommonToolCallConstants.DEFAULT_USER_AGENTS.length)]);\n\t\t\theaders.add(HttpHeaders.CONNECTION, \"keep-alive\");\n\t\t\theaders.add(HttpHeaders.ACCEPT, \"application/json\");\n\t\t\theaders.add(\"X-Subscription-Token\", properties.getApiKey());\n\t\t};\n\t\treturn new BraveSearchService(\n\t\t\t\tWebClientTool.builder(jsonParseTool, properties).httpHeadersConsumer(consumer).build(), jsonParseTool);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-bravesearch/src/main/java/com/alibaba/cloud/ai/toolcalling/bravesearch/BraveSearchAutoConfiguration.java", "function_name": "braveSearch", "index": 981, "label": 0}
{"input": "@Test\n  public void testMergeOverwriteModes() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'tomerge': {'type': 'STRING','value': 'hello', 'internal_mode': 'OPTIONAL'}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye', 'mode': 'MUTABLE'}}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, restartContext);\n    assertEquals(1, allParams.size());\n    assertEquals(\"goodbye\", allParams.get(\"tomerge\").asStringParamDef().getValue());\n    assertEquals(ParamMode.MUTABLE, allParams.get(\"tomerge\").asStringParamDef().getMode());\n    \n    assertEquals(\n        InternalParamMode.OPTIONAL, allParams.get(\"tomerge\").asStringParamDef().getInternalMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeOverwriteModes", "index": 982, "label": 0}
{"input": "@Test\n  public void testVisitedNoneDataNode() {\n    root.jjtAddChild(noneNode, 2);\n    root.jjtAddChild(noneNode, 1);\n    root.jjtAddChild(noneNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.NONE, res);\n    assertArrayEquals(new int[] {0, 0, 0, 0, 3}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedNoneDataNode", "index": 983, "label": 0}
{"input": "@Override\n  public List<Workflow> getPendingWorkflowsByType(String workflowName, int version) {\n    return searchRunningWorkflowIdsByName(workflowName, version).stream()\n        .map(\n            workflowId ->\n                withMetricLogError(\n                    () ->\n                        withReadOnlyQuery(\n                            GET_WORKFLOW_INSTANCE_WITH_TASKS_STATEMENT,\n                            statement -> {\n                              statement.setString(1, workflowId);\n                              statement.setString(2, workflowId);\n                            },\n                            this::workflowFromResult),\n                    \"getPendingWorkflowsByType\",\n                    \"Failed getting a workflow instance with id {}\",\n                    workflowId))\n        .filter(Objects::nonNull)\n        .collect(Collectors.toList());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getPendingWorkflowsByType", "index": 984, "label": 0}
{"input": "@Bean\n  public RunWorkflowInstancesJobProcessor runWorkflowInstancesJobProcessor(\n      MaestroWorkflowInstanceDao maestroWorkflowInstanceDao, WorkflowRunner workflowRunner) {\n    LOG.info(\"Creating runWorkflowInstancesJobProcessor within Spring boot...\");\n    return new RunWorkflowInstancesJobProcessor(maestroWorkflowInstanceDao, workflowRunner);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "runWorkflowInstancesJobProcessor", "index": 985, "label": 0}
{"input": "public static UpstreamInitiator withType(Type type) {\n    switch (type) {\n      case SUBWORKFLOW:\n        return new SubworkflowInitiator();\n      case FOREACH:\n        return new ForeachInitiator();\n      case TEMPLATE:\n        return new TemplateInitiator();\n      default:\n        throw new MaestroInternalError(\"Initiator type [%s] cannot be used as UPSTREAM\", type);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/initiator/UpstreamInitiator.java", "function_name": "withType", "index": 986, "label": 0}
{"input": "@Override\n\t\tpublic SearchResult getSearchResult() {\n\t\t\treturn new SearchResult(this.results()\n\t\t\t\t.stream()\n\t\t\t\t.map(item -> new SearchService.SearchContent(item.title(), item.content(), item.url()))\n\t\t\t\t.toList());\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-tavilysearch/src/main/java/com/alibaba/cloud/ai/toolcalling/tavily/TavilySearchService.java", "function_name": "getSearchResult", "index": 987, "label": 0}
{"input": "@Override\n  public List<TaskDef> getAllTaskDefs() {\n    return withMetricLogError(\n        () -> getPayloads(GET_TASK_DEFINITIONS_STATEMENT, StatementPreparer.NO_OP, TaskDef.class),\n        \"getAllTaskDefs\",\n        \"Failed getting all task definitions\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "getAllTaskDefs", "index": 988, "label": 0}
{"input": "@Test\n  public void testProcessWithRetryableError() {\n    SignalTriggerMatch instance = new SignalTriggerMatch();\n    Supplier<SignalTriggerMatch> messageSupplier = () -> instance;\n    when(brokerDao.tryExecuteTrigger(any())).thenThrow(new MaestroRetryableError(\"foo\"));\n    AssertHelper.assertThrows(\n        \"retryable error\",\n        MaestroRetryableError.class,\n        \"foo\",\n        () -> processor.process(messageSupplier));\n    verify(brokerDao, times(0)).deleteTrigger(any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_MATCH_FAILURE,\n                SignalTriggerMatchProcessor.class,\n                MetricConstants.TYPE_TAG,\n                \"retryable\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerMatchProcessorTest.java", "function_name": "testProcessWithRetryableError", "index": 989, "label": 0}
{"input": "public RunRequestBuilder currentPolicy(RunPolicy input) {\n      this.currentPolicy = input;\n      return this;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunRequest.java", "function_name": "currentPolicy", "index": 990, "label": 0}
{"input": "@Test\n  public void testInvalidExecutionId() {\n    when(instance.getExecutionId()).thenReturn(null);\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    AssertHelper.assertThrows(\n        \"execution_id cannot be null\",\n        NullPointerException.class,\n        \"execution_id cannot be null\",\n        () -> actionHandler.stop(\"test-workflow\", 1, 1, user));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandlerTest.java", "function_name": "testInvalidExecutionId", "index": 991, "label": 0}
{"input": "@Test\n  public void testWorkflowNotFoundUnknownErrorOnTrigger() {\n    ArrayList<PlannedTimeTriggerExecution> plannedList = new ArrayList<>();\n    plannedList.add(new PlannedTimeTriggerExecution(null, null));\n    when(executionPlanner.calculatePlannedExecutions(any(), any(), any())).thenReturn(plannedList);\n    Mockito.doThrow(new MaestroNotFoundException(\"Unknown Not Found\"))\n        .when(workflowLauncher)\n        .startWorkflowBatchRuns(any(), Mockito.eq(\"ACTIVE\"), any(), any());\n\n    AssertHelper.assertThrows(\n        \"should throw exception for 404 unknown error\",\n        MaestroRetryableError.class,\n        \"Unknown 404 not found error for\",\n        () -> processor.process(() -> message));\n    Mockito.verifyNoInteractions(triggerProducer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/messageprocessors/TimeTriggerExecutionProcessorTest.java", "function_name": "testWorkflowNotFoundUnknownErrorOnTrigger", "index": 992, "label": 0}
{"input": "@Override\n  public SignalInstance getSignalInstance(String signalName, long signalId) {\n    return brokerDao.getSignalInstance(signalName, signalId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/handler/MaestroSignalHandler.java", "function_name": "getSignalInstance", "index": 993, "label": 0}
{"input": "@Specialization(guards = {\"parent == getListingClass()\", \"!iterable.isTyped()\"})\n  @SuppressWarnings(\"unused\")\n  protected void evalListingClass(\n      VirtualFrame frame, VmClass parent, ObjectData data, VmObject iterable) {\n    doEvalListing(frame, data, iterable);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "evalListingClass", "index": 994, "label": 0}
{"input": "public static int findCustomThisSlot(VirtualFrame frame) {\n    return frame\n        .getFrameDescriptor()\n        .getAuxiliarySlots()\n        .getOrDefault(CustomThisScope.FRAME_SLOT_ID, -1);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java", "function_name": "findCustomThisSlot", "index": 995, "label": 0}
{"input": "private void updateDownloaderStats() {\n        long totalDownloaders = 0L;\n        long healthDownloaders = 0L;\n        if (Main.getServer() != null) {\n            totalDownloaders = Main.getServer().getDownloaders().size();\n            healthDownloaders = Main.getServer().getDownloaders().stream()\n                    .filter(m -> m.getLastStatus() == DownloaderLastStatus.HEALTHY).count();\n        }\n        if (downloaderStatsItem != null && !downloaderStatsItem.isDisposed()) {\n            downloaderStatsItem.setText(tlUI(Lang.GUI_MENU_STATS_DOWNLOADER, healthDownloaders, totalDownloaders));\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtTrayManager.java", "function_name": "updateDownloaderStats", "index": 996, "label": 0}
{"input": "@Override\n\tpublic AgentExecutionRecord getCurrentAgentExecutionRecord(String planId) {\n\t\t\n\t\tcleanOutdatedPlans(30);\n\n\t\tPlanExecutionRecord planRecord = planRecords.get(planId);\n\t\tif (planRecord != null) {\n\t\t\tList<AgentExecutionRecord> agentExecutionSequence = planRecord.getAgentExecutionSequence();\n\t\t\tint currentIndex = planRecord.getCurrentStepIndex();\n\t\t\tif (!agentExecutionSequence.isEmpty()) {\n\t\t\t\treturn agentExecutionSequence.get(currentIndex);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/recorder/DefaultPlanExecutionRecorder.java", "function_name": "getCurrentAgentExecutionRecord", "index": 997, "label": 0}
{"input": "private boolean jj_2_8(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_8();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(7, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_8", "index": 998, "label": 0}
{"input": "@Test\n  public void testGetWorkflowInstanceStatus() {\n    WorkflowInstance.Status status =\n        instanceDao.getWorkflowInstanceStatus(\n            wfi.getWorkflowId(), wfi.getWorkflowInstanceId(), wfi.getWorkflowRunId());\n    assertEquals(WorkflowInstance.Status.CREATED, status);\n    boolean res =\n        instanceDao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.FAILED, \"test-reason\");\n    assertTrue(res);\n    status =\n        instanceDao.getWorkflowInstanceStatus(\n            wfi.getWorkflowId(), wfi.getWorkflowInstanceId(), wfi.getWorkflowRunId());\n    assertEquals(WorkflowInstance.Status.FAILED, status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetWorkflowInstanceStatus", "index": 999, "label": 0}
{"input": "public static Optional<String> getAvailableSearchToolName(ApplicationContext context) {\n\t\treturn Arrays.stream(SearchEnum.values())\n\t\t\t.map(SearchEnum::getToolName)\n\t\t\t.filter(context::containsBean)\n\t\t\t.findFirst();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-searches/src/main/java/com/alibaba/cloud/ai/toolcalling/searches/SearchUtil.java", "function_name": "getAvailableSearchToolName", "index": 1000, "label": 0}
{"input": "public static synchronized PublicIPUtils getInstance(Context context) {\n        if (instance == null) {\n            instance = new PublicIPUtils(context.getApplicationContext());\n        }\n        return instance;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "35cda066c19f70d130a9bc5ff4737de5c55f1b59", "file_path": "app/src/main/java/org/bepass/oblivion/PublicIPUtils.java", "function_name": "getInstance", "index": 1001, "label": 0}
{"input": "static SelType callJavaMethod(Object javaObj, SelType[] args, MethodHandle m, String methodName) {\n    try {\n      if (args.length == 0) {\n        return callJavaMethod0(javaObj, m);\n      } else if (args.length == 1) {\n        return callJavaMethod1(javaObj, args[0], m);\n      } else if (args.length == 2) {\n        return callJavaMethod2(javaObj, args[0], args[1], m);\n      }\n    } catch (IllegalStateException e) {\n      throw e;\n    } catch (Throwable t) {\n      throw new IllegalArgumentException(\"Failed calling method \" + methodName, t);\n    }\n    throw new UnsupportedOperationException(\n        \"DO NOT support calling method: \" + methodName + \" with args: \" + Arrays.toString(args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypeUtil.java", "function_name": "callJavaMethod", "index": 1002, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(\n      value = \"maestro.queue.type\",\n      havingValue = \"in-memory\",\n      matchIfMissing = true)\n  public QueueDAO queueDAO() {\n    LOG.info(\"Creating memory based queueDAO within Spring boot...\");\n    return new InMemoryQueueDao(new ConcurrentHashMap<>());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "queueDAO", "index": 1003, "label": 0}
{"input": "public static String getStepTypeInfo(StepType stepType, String subType) {\n    return Checks.isNullOrEmpty(subType) ? stepType.name() : subType;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "getStepTypeInfo", "index": 1004, "label": 0}
{"input": "private SelString tsToDateInt(SelType ts) {\n    return SelString.of(dateIntFormatter.print(SelLong.create(ts).longVal()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "tsToDateInt", "index": 1005, "label": 0}
{"input": "@Bean\n  public MaestroWorkflowDeletionDao maestroWorkflowDeletionDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props) {\n    LOG.info(\"Creating maestroWorkflowDeletionDao within Spring boot...\");\n    return new MaestroWorkflowDeletionDao(crdbDataSource, objectMapper, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroWorkflowDeletionDao", "index": 1006, "label": 0}
{"input": "@Test\n  public void testRunForActionFlowResumeWithTerminatedFlow() {\n    flow.setStatus(Flow.Status.FAILED);\n    assertNull(flow.getPrepareTask());\n    assertNull(flow.getMonitorTask());\n\n    flowActor.runForAction(Action.FLOW_RESUME);\n    assertNull(flow.getPrepareTask());\n    assertNull(flow.getMonitorTask());\n    assertFalse(flowActor.isRunning());\n\n    flowActor.afterRunning();\n    verify(context, times(1)).deleteFlow(flow);\n    verify(context, times(1)).resumeFlow(flow);\n    verify(context, times(0)).prepare(flow);\n    verifyEmptyAction(flowActor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testRunForActionFlowResumeWithTerminatedFlow", "index": 1007, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"triggers.signal-trigger.type\", havingValue = \"sqs\")\n  public SignalQueueProducer sqsSignalQueueProducer(\n      @Qualifier(MAESTRO_AWS_SQS_SYNC) AmazonSQS amazonSqs,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      AwsProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating sqsSignalQueueProducer within Spring boot...\");\n    return new SqsSignalQueueProducer(amazonSqs, objectMapper, props.getSqs(), metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsSignalQueueProducer", "index": 1008, "label": 0}
{"input": "@Test\n  public void testSaveOutputData() {\n    outputDataManager.saveOutputData(outputData);\n    Mockito.verify(outputDataDao, times(1)).insertOrUpdateOutputData(outputData);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7352dec4fe9be70bf0076f7ed4d10ca1985ad842", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "testSaveOutputData", "index": 1009, "label": 0}
{"input": "@Test\n  public void testEnrichWorkflowDefinitionCron() throws IOException {\n    definition =\n        loadObject(\n            \"fixtures/workflows/definition/sample-active-wf-with-cron-named-triggers.json\",\n            WorkflowDefinition.class);\n    workflowEnrichmentHelper.enrichWorkflowDefinition(definition);\n    Assert.assertNotNull(definition.getEnrichedExtras());\n    Assert.assertNotNull(definition.getEnrichedExtras().getNextExecutionTime());\n    Assert.assertEquals(2, definition.getEnrichedExtras().getNextExecutionTimes().size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/WorkflowEnrichmentHelperTest.java", "function_name": "testEnrichWorkflowDefinitionCron", "index": 1010, "label": 0}
{"input": "public ResourceLoader getLoaderByFileType(String fileType){\n        if (FileType.isTextFile(fileType)){\n            return new TextFileLoader(characterTextSplitter);\n        } else if (FileType.isWord(fileType)) {\n            return new WordLoader(characterTextSplitter);\n        } else if (FileType.isPdf(fileType)) {\n            return new PdfFileLoader(characterTextSplitter);\n        } else if (FileType.isMdFile(fileType)) {\n            return new MarkDownFileLoader(markdownTextSplitter);\n        }else if (FileType.isExcel(fileType)) {\n            return new ExcelFileLoader(excelTextSplitter);\n        }else if (FileType.isCodeFile(fileType)) {\n            return new CodeFileLoader(codeTextSplitter);\n        }else {\n            return new TextFileLoader(characterTextSplitter);\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "fb492d41f3b1f085c6a5997e9c1356c329d892d2", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/chain/loader/ResourceLoaderFactory.java", "function_name": "getLoaderByFileType", "index": 1011, "label": 0}
{"input": "@Before\n  public void before() {\n    Map<String, ParamDefinition> paramDefMap = new LinkedHashMap<>();\n    paramDefMap.put(\"name\", StringParamDefinition.builder().name(\"name\").value(\"signal_a\").build());\n    paramDefMap.put(\n        \"param_a\",\n        SignalParamDefinition.builder()\n            .operator(SignalOperator.EQUALS_TO)\n            .parameter(StringParamDefinition.builder().name(\"param_a\").value(\"test123\").build())\n            .build());\n    Map<String, Object> evaluatedResult = new HashMap<>();\n    evaluatedResult.put(\"name\", \"signal_a\");\n    evaluatedResult.put(\"param_a\", \"test123\");\n\n    this.mapParameter =\n        MapParameter.builder()\n            .value(paramDefMap)\n            .evaluatedResult(evaluatedResult)\n            .evaluatedTime(12345L)\n            .build();\n\n    this.stepDependencies =\n        new StepDependencies(StepDependencyType.SIGNAL, Collections.singletonList(mapParameter));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/StepDependenciesTest.java", "function_name": "before", "index": 1012, "label": 0}
{"input": "public static MessageDto createMessageForWakeUp(\n      String workflowId, long groupInfo, Set<Long> instanceIds) {\n    var jobEvent = InstanceActionJobEvent.create(workflowId, groupInfo, instanceIds);\n    return new MessageDto(\n        Long.MAX_VALUE, jobEvent.getIdentity(), jobEvent, System.currentTimeMillis());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/models/MessageDto.java", "function_name": "createMessageForWakeUp", "index": 1013, "label": 0}
{"input": "@Test\n  public void testGetRestartStepId() {\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .build();\n    Assert.assertEquals(\"bar\", runRequest.getRestartStepId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testGetRestartStepId", "index": 1014, "label": 0}
{"input": "@Test\n  public void testResetGetClear() throws Exception {\n    extensionRepo.reset(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        InstanceWrapper.builder().workflowId(\"foo\").initiator(new ManualInitiator()).build());\n    assertNotNull(extensionRepo.get());\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    executor\n        .submit(\n            () -> {\n              assertNull(extensionRepo.get());\n              extensionRepo.clear();\n            })\n        .get();\n    assertNotNull(extensionRepo.get());\n    extensionRepo.clear();\n    assertNull(extensionRepo.get());\n    executor.shutdown();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionRepoTest.java", "function_name": "testResetGetClear", "index": 1015, "label": 0}
{"input": "@Bean(name = \"agent2mcpConfig\")\n\tpublic Map<String, McpAssignNodeProperties.McpServerConfig> agent2mcpConfig() {\n\t\ttry {\n\t\t\tResource resource = resourceLoader.getResource(mcpAssignNodeProperties.getConfigLocation());\n\t\t\tif (!resource.exists()) {\n\t\t\t\treturn new HashMap<>();\n\t\t\t}\n\n\t\t\ttry (InputStream inputStream = resource.getInputStream()) {\n\t\t\t\tTypeReference<Map<String, McpAssignNodeProperties.McpServerConfig>> typeRef = new TypeReference<>() {\n\t\t\t\t};\n\t\t\t\treturn objectMapper.readValue(inputStream, typeRef);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"读取MCP配置失败\", e);\n\t\t\treturn new HashMap<>();\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "7acd7d08d4f9f0a01815d4e5f0e77514a1ed7167", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/McpAssignNodeConfiguration.java", "function_name": "agent2mcpConfig", "index": 1016, "label": 0}
{"input": "public BypassListAppsAdapter(Context context, LoadListener loadListener) {\n        fm = FileManager.getInstance(context);\n        this.loadListener = loadListener;\n        if (loadListener != null)\n            loadListener.onLoad(true);\n        executor.submit(() -> {\n            \n            this.appList = getInstalledApps(context, false);\n            \n            handler.post(this::notifyDataSetChanged);\n            handler.post(() -> {\n                if (loadListener != null)\n                    loadListener.onLoad(false);\n            });\n        });\n\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/BypassListAppsAdapter.java", "function_name": "BypassListAppsAdapter", "index": 1017, "label": 0}
{"input": "public Builder completionsPath(String completionsPath) {\n\t\t\tAssert.notNull(completionsPath, \"Completions path cannot be null\");\n\t\t\tthis.completionsPath = completionsPath;\n\t\t\treturn this;\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "completionsPath", "index": 1018, "label": 0}
{"input": "public PlanCreator(List<DynamicAgentEntity> agents, LlmService llmService, PlanningTool planningTool,\n\t\t\tPlanExecutionRecorder recorder, PromptLoader promptLoader) {\n\t\tthis.agents = agents;\n\t\tthis.llmService = llmService;\n\t\tthis.planningTool = planningTool;\n\t\tthis.recorder = recorder;\n\t\tthis.promptLoader = promptLoader;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/creator/PlanCreator.java", "function_name": "PlanCreator", "index": 1019, "label": 0}
{"input": "@Test\n    public void read() throws IOException {\n        String file\n            = \"src/test/resources/dataformat/dataformat.xlsx\";\n        XSSFWorkbook xssfWorkbook = new XSSFWorkbook( file);\n        XSSFSheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n        XSSFRow row = xssfSheet.getRow(7);\n        XSSFCell cell = row.getCell(0);\n        LOGGER.info(\"dd{}\", cell.getDateCellValue());\n        LOGGER.info(\"dd{}\", cell.getNumericCellValue());\n\n        LOGGER.info(\"dd{}\", DateUtil.isCellDateFormatted(cell));\n\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "7b1fce1dc917f8b846bcda772bfd5586d3d079de", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiDateFormatTest.java", "function_name": "read", "index": 1020, "label": 0}
{"input": "@Test\n  public void testKeepMergeKeepOrder() {\n    Map<String, ParamDefinition> allParams = new LinkedHashMap<>();\n    Map<String, ParamDefinition> paramsToMerge = new LinkedHashMap<>();\n\n    String[] keyOrder = new String[40];\n    \n    for (int i = 0; i < 20; i++) {\n      String key = \"prev_param_\" + i;\n      allParams.put(key, buildParam(key, key).toDefinition());\n      keyOrder[i] = key;\n\n      if (i <= 5) {\n        paramsToMerge.put(key, buildParam(key, key + \"_updated\").toDefinition());\n      }\n\n      String newKey = \"new_param_\" + i;\n      keyOrder[20 + i] = newKey;\n      paramsToMerge.put(newKey, buildParam(newKey, newKey).toDefinition());\n    }\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n    assertArrayEquals(keyOrder, allParams.keySet().toArray());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testKeepMergeKeepOrder", "index": 1021, "label": 0}
{"input": "@Test\n    public void t03ReadTest() throws Exception {\n        \n        readFileWithMap(headFile03, 4);\n        readFileWithPOJO(headFile03);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "8ad28c2464fd7d057dcd4a27ed5fb044c874078a", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/head/MaxHeadSizeTest.java", "function_name": "t03ReadTest", "index": 1022, "label": 0}
{"input": "public void setColor(int color) {\n        if (color != 0) {\n            setColorFilter(LocalController.getColor(color), PorterDuff.Mode.SRC_ATOP);\n        }\n        invalidate();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/component/Icon.java", "function_name": "setColor", "index": 1023, "label": 0}
{"input": "@Test\n    public void testEscape() {\n        csvFile = TestFileUtil.createNewFile(CSV_BASE + \"csv-escape.csv\");\n        doTest(true, csvFile, null, null, null, null, CsvConstant.BACKSLASH);\n        doTest(true, csvFile, null, null, null, null, CsvConstant.DOUBLE_QUOTE);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "testEscape", "index": 1024, "label": 0}
{"input": "@Test\n  public void testComputeStepIdsInRuntimeDagForStepRestartAnotherPath() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setRunConfig(new RunConfig());\n    instance.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_SPECIFIC);\n    instance\n        .getRunConfig()\n        .setRestartConfig(\n            RestartConfig.builder().addRestartNode(\"sample-dag-test-1\", 1, \"job_9\").build());\n    instance.setRuntimeDag(runtimeDag1);\n    Set<String> actual =\n        DagHelper.computeStepIdsInRuntimeDag(instance, Collections.singleton(\"job_3\"));\n    Assert.assertEquals(\n        \"[job_1, job_3, job_11, job_2, job_10, job_5, job_4, job_7, job_6, job_9, job_8]\",\n        actual.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testComputeStepIdsInRuntimeDagForStepRestartAnotherPath", "index": 1025, "label": 0}
{"input": "@Test\n  public void testRunForActionStopForInactiveTask() {\n    task.setActive(false);\n\n    taskActor.runForAction(Action.TASK_STOP);\n    verify(context, times(0)).cancel(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionStopForInactiveTask", "index": 1026, "label": 0}
{"input": "public Set<Long> getIterationsToRunFromDetails(ForeachStepOverview prevStepOverview) {\n    if (prevStepOverview == null || prevStepOverview.details == null) {\n      return new HashSet<>();\n    }\n    Set<Long> currRunInstances =\n        details == null\n            ? new HashSet<>()\n            : details.flatten(e -> true).values().stream()\n                .flatMap(List::stream)\n                .collect(Collectors.toSet());\n    return prevStepOverview.details.flatten(e -> true).values().stream()\n        .flatMap(List::stream)\n        .filter(e -> !currRunInstances.contains(e))\n        .collect(Collectors.toSet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "getIterationsToRunFromDetails", "index": 1027, "label": 0}
{"input": "@Test\n  public void testInvalidWorkflowInstanceUpdate() {\n    WorkflowSummary summary = new WorkflowSummary();\n    summary.setWorkflowId(TEST_WORKFLOW_ID);\n    summary.setWorkflowInstanceId(1);\n    summary.setWorkflowRunId(2);\n    Optional<Details> result = instanceDao.updateRuntimeOverview(summary, null, null);\n    assertTrue(result.isPresent());\n    assertEquals(\n        \"ERROR: updated [0] (expecting 1) rows for workflow instance [sample-dag-test-3][1][2]\",\n        result.get().getMessage());\n    result = instanceDao.updateRuntimeOverview(null, null, null);\n    assertTrue(result.isPresent());\n    assertEquals(\n        \"ERROR: failed updating Runtime Maestro Workflow with an error\", result.get().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testInvalidWorkflowInstanceUpdate", "index": 1028, "label": 0}
{"input": "@Test\n    public void lastRowNum2() throws IOException {\n        String sourceFile = \"src/test/resources/poi/last_row_number_xssf_date_test.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        SXSSFWorkbook xssfWorkbook = new SXSSFWorkbook(new XSSFWorkbook(file));\n        Sheet xssfSheet = xssfWorkbook.getXSSFWorkbook().getSheetAt(0);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getPhysicalNumberOfRows());\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getFirstRowNum());\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "lastRowNum2", "index": 1029, "label": 0}
{"input": "public static JSONObject downloadImage(String appId, String aesKey, String fileId, String type, String totalSize, String suffix){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"aesKey\",aesKey);\r\n        param.put(\"fileId\",fileId);\r\n        param.put(\"totalSize\",totalSize);\r\n        param.put(\"type\",type);\r\n        param.put(\"suffix\",suffix);\r\n        return OkhttpUtil.postJSON(\"/message/downloadCdn\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/DownloadApi.java", "function_name": "downloadImage", "index": 1030, "label": 0}
{"input": "private void processUserInputToMemory(UserMessage userMessage) {\n\t\tif (userMessage != null && userMessage.getText() != null) {\n\t\t\t\n\t\t\tString userInput = userMessage.getText();\n\n\t\t\tif (!StringUtils.isBlank(userInput)) {\n\t\t\t\t\n\n\t\t\t\tllmService.getAgentMemory().add(getPlanId(), userMessage);\n\n\t\t\t}\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/DynamicAgent.java", "function_name": "processUserInputToMemory", "index": 1031, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStepParamOverrides() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    ((AbstractStep) request.getWorkflow().getSteps().get(0))\n        .setParams(singletonMap(\"foo\", ParamDefinition.buildParamDefinition(\"foo\", \"foo\")));\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(), WorkflowGraph.computeDag(request.getWorkflow(), null, null));\n    List<List<Step>> paths = graph.computePaths(new IdentityTranslator());\n    Assert.assertEquals(3, paths.size());\n    Assert.assertEquals(\"job.1\", paths.get(0).get(0).getId());\n    Assert.assertEquals(\n        Collections.singletonMap(\"foo\", ParamDefinition.buildParamDefinition(\"foo\", \"foo\")),\n        paths.get(0).get(0).getParams());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStepParamOverrides", "index": 1032, "label": 0}
{"input": "@Test\n  public void testSaveFlowRetry() {\n    Mockito.doThrow(new MaestroInternalError(\"test\")).when(flowDao).insertFlow(flow);\n    AssertHelper.assertThrows(\n        \"should throw and retry\",\n        MaestroRetryableError.class,\n        \"insertFlow is failed and please retry\",\n        () -> context.saveFlow(flow));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testSaveFlowRetry", "index": 1033, "label": 0}
{"input": "public CoordinatorNode(ChatClient coordinatorAgent) {\n\t\tthis.coordinatorAgent = coordinatorAgent;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/node/CoordinatorNode.java", "function_name": "CoordinatorNode", "index": 1034, "label": 0}
{"input": "@Test\n  public void testMergeTypeConflict() {\n    AssertHelper.assertThrows(\n        \"Should not allow mismatched types\",\n        MaestroValidationException.class,\n        \"ParameterDefinition type mismatch name [tomerge] from [STRING] != to [LONG]\",\n        new Runnable() {\n          @SneakyThrows\n          @Override\n          public void run() {\n            Map<String, ParamDefinition> allParams =\n                ParamsMergeHelperTest.this.parseParamDefMap(\n                    \"{'tomerge': {'type': 'LONG','value': 123, 'name': 'tomerge'}}\");\n            Map<String, ParamDefinition> paramsToMerge =\n                ParamsMergeHelperTest.this.parseParamDefMap(\n                    \"{'tomerge': {'type': 'STRING', 'value': 'goodbye', 'name': 'tomerge'}}\");\n            ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeTypeConflict", "index": 1035, "label": 0}
{"input": "@Bean\n  public ParamEvaluator paramEvaluatorHelper(\n      ExprEvaluator exprEvaluator,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating maestro parameterHelper within Spring boot...\");\n    return new ParamEvaluator(exprEvaluator, objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "paramEvaluatorHelper", "index": 1036, "label": 0}
{"input": "public Builder setWxId(\n                    String value) {\n                if (value == null) {\n                    throw new NullPointerException();\n                }\n                wxId_ = value;\n                bitField0_ |= 0x00000001;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setWxId", "index": 1037, "label": 0}
{"input": "protected Flow createFlow() {\n    Flow flow =\n        new Flow(10, \"test-flow-id\", 1, System.currentTimeMillis() + 3600000, \"test-flow-ref\");\n    flow.setInput(Map.of());\n    flow.setFlowDef(new FlowDef());\n    flow.setStatus(Flow.Status.RUNNING);\n    flow.setUpdateTime(flow.getStartTime());\n    return flow;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/FlowBaseTest.java", "function_name": "createFlow", "index": 1038, "label": 0}
{"input": "public UserInfoInterceptor(User.UserBuilder callerBuilder) {\n    this.callerBuilder = callerBuilder;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/interceptor/UserInfoInterceptor.java", "function_name": "UserInfoInterceptor", "index": 1039, "label": 0}
{"input": "public CrashManager() {\n        this.file = new File(Main.getDataDirectory(), \"running.marker\");\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "bdc585b204889b8dca085ed38187a328957f55e6", "file_path": "src/main/java/com/ghostchu/peerbanhelper/CrashManager.java", "function_name": "CrashManager", "index": 1040, "label": 0}
{"input": "private <T extends ModulesTask, S extends ModulesSpec> void configureModulesTask(\n      T task, S spec, @Nullable TaskProvider<AnalyzeImportsTask> analyzeImportsTask) {\n    configureModulesTask(task, spec, analyzeImportsTask, null);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b93cb9b32237760e357d9229b87686b81390a519", "file_path": "pkl-gradle/src/main/java/org/pkl/gradle/PklPlugin.java", "function_name": "configureModulesTask", "index": 1041, "label": 0}
{"input": "@Override\n    public void endRow(AnalysisContext analysisContext) {\n        \n        if (RowTypeEnum.EMPTY.equals(analysisContext.readRowHolder().getRowType())) {\n            \n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Empty row!\");\n            }\n            \n            if (analysisContext.readWorkbookHolder().getIgnoreEmptyRow()) {\n                return;\n            }\n        }\n        \n        dealData(analysisContext);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1e4807d88a88afc8f8880dc70306f61274974c13", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/processor/DefaultAnalysisEventProcessor.java", "function_name": "endRow", "index": 1042, "label": 0}
{"input": "@UpdateScript(version = 25)\n    public void removeIPFS(YamlConfiguration bundled) {\n        conf.set(\"decentralized\", null);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "c57007bbb4cd958de4b1c0a06b7d6173b609481d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/config/ProfileUpdateScript.java", "function_name": "removeIPFS", "index": 1043, "label": 0}
{"input": "@Bean(name = JsonProcessorConstants.PARSE_TOOL_NAME)\n\t@Description(\"Use Gson to parse String JsonObject .\")\n\t@ConditionalOnMissingBean\n\tpublic JsonProcessorParseService jsonParseProperty(JsonParseTool jsonParseTool) {\n\t\treturn new JsonProcessorParseService(jsonParseTool);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "0fe2aa6ca3186a580f39e38ee7a97ab74ba0664f", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-jsonprocessor/src/main/java/com/alibaba/cloud/ai/toolcalling/jsonprocessor/JsonProcessorAutoConfiguration.java", "function_name": "jsonParseProperty", "index": 1044, "label": 0}
{"input": "private int[] startLastOnlyInstances(\n      Connection conn, String workflowId, List<WorkflowInstance> instances) throws SQLException {\n    InstanceRunUuid toTerminate = stopLastOnlyRunningInstance(conn, workflowId);\n\n    Collections.reverse(instances);\n    int[] ret = startFirstOrLastOnlyInstances(conn, null, instances, toTerminate);\n    int tmp;\n    for (int i = 0, j = ret.length - 1; i < j; ++i, --j) {\n      tmp = ret[i];\n      ret[i] = ret[j];\n      ret[j] = tmp;\n    }\n    Collections.reverse(instances);\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "startLastOnlyInstances", "index": 1045, "label": 0}
{"input": "@Test\n  public void testCallTsToDateInt() {\n    SelType res = SelUtilFunc.INSTANCE.call(\"tsToDateInt\", new SelType[] {SelLong.of(\"12345\")});\n    assertEquals(\"STRING: 19700101\", res.type() + \": \" + res.toString());\n    res = SelUtilFunc.INSTANCE.call(\"tsToDateInt\", new SelType[] {SelString.of(\"12345\")});\n    assertEquals(\"STRING: 19700101\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallTsToDateInt", "index": 1046, "label": 0}
{"input": "private String[] filterValidLocales(String[] locales) {\n        if (locales == null) {\n            return new String[0];\n        }\n\n        List<String> validLocales = new ArrayList<>();\n        for (String localeTag : locales) {\n            if (!localeTag.isEmpty() && !localeTag.equals(\"und\")) {\n                validLocales.add(localeTag);\n            }\n        }\n        return validLocales.toArray(new String[0]);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef6efe71d9095aa3bac552c6499646d9eeba6263", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocaleHandler.java", "function_name": "filterValidLocales", "index": 1047, "label": 0}
{"input": "private Modifier parseModifier() {\n    return switch (lookahead) {\n      case EXTERNAL -> new Modifier(Modifier.ModifierValue.EXTERNAL, next().span);\n      case ABSTRACT -> new Modifier(Modifier.ModifierValue.ABSTRACT, next().span);\n      case OPEN -> new Modifier(Modifier.ModifierValue.OPEN, next().span);\n      case LOCAL -> new Modifier(Modifier.ModifierValue.LOCAL, next().span);\n      case HIDDEN -> new Modifier(Modifier.ModifierValue.HIDDEN, next().span);\n      case FIXED -> new Modifier(Modifier.ModifierValue.FIXED, next().span);\n      case CONST -> new Modifier(Modifier.ModifierValue.CONST, next().span);\n      default -> throw PklBugException.unreachableCode();\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseModifier", "index": 1048, "label": 0}
{"input": "@Test\n  public void testPublishFailure() {\n    when(publisher.publish(any())).thenReturn(Optional.of(Details.create(\"test error\")));\n    StepRuntimeSummary stepRuntimeSummary =\n        StepRuntimeSummary.builder()\n            .stepId(\"test-summary\")\n            .stepAttemptId(2)\n            .stepInstanceId(1)\n            .dbOperation(DbOperation.UPDATE)\n            .pendingRecords(\n                Collections.singletonList(\n                    mock(StepInstanceUpdateJobEvent.StepInstancePendingRecord.class)))\n            .build();\n    Optional<Details> details = syncManager.sync(instance, workflowSummary, stepRuntimeSummary);\n    assertTrue(details.isPresent());\n    assertEquals(\"test error\", details.get().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepSyncManagerTest.java", "function_name": "testPublishFailure", "index": 1049, "label": 0}
{"input": "private boolean jj_2_2(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_2();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(1, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_2", "index": 1050, "label": 0}
{"input": "private void defaultReadCache(XlsxReadWorkbookHolder xlsxReadWorkbookHolder,\n            PackagePart sharedStringsTablePackagePart) {\n        ReadCache readCache = xlsxReadWorkbookHolder.getReadCacheSelector().readCache(sharedStringsTablePackagePart);\n        xlsxReadWorkbookHolder.setReadCache(readCache);\n        readCache.init(xlsxReadContext);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/XlsxSaxAnalyser.java", "function_name": "defaultReadCache", "index": 1051, "label": 0}
{"input": "private Stream<Document> loadDocumentsFromFile(Path file) {\n\t\ttry (FileInputStream fileInputStream = new FileInputStream(file.toFile())) {\n\t\t\treturn documentParser.parse(fileInputStream).stream();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Error loading file: \" + file, e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "9ad076f2a3199b1faee02659e47f5017925ecc21", "file_path": "community/document-parsers/spring-ai-alibaba-starter-document-parser-directory/src/main/java/com/alibaba/cloud/ai/parser/directory/DocumentDirectoryParser.java", "function_name": "loadDocumentsFromFile", "index": 1052, "label": 0}
{"input": "private static boolean isIndentChars(Node node) {\n    if (!(node instanceof ConstantPart part)) {\n      return false;\n    }\n    var text = part.getStr();\n\n    for (var i = 0; i < text.length(); i++) {\n      var ch = text.charAt(i);\n      if (ch != ' ' && ch != '\\t') return false;\n    }\n\n    return true;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "isIndentChars", "index": 1053, "label": 0}
{"input": "private static Associativity getAssociativity(Operator op) {\n    return switch (op) {\n      case POW, NULL_COALESCE -> Associativity.RIGHT;\n      default -> Associativity.LEFT;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/OperatorResolver.java", "function_name": "getAssociativity", "index": 1054, "label": 0}
{"input": "@Override\n  public CompletableFuture<Void> asyncRemoveWorkflow(String workflowId) {\n    \n    return CompletableFuture.completedFuture(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "asyncRemoveWorkflow", "index": 1055, "label": 0}
{"input": "public void sync() {\n        while (!shell.isDisposed()) {\n            if (!display.readAndDispatch()) {\n                display.sleep();\n            }\n        }\n        display.dispose();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtMainWindow.java", "function_name": "sync", "index": 1056, "label": 0}
{"input": "@Test\n  public void testStringInterpolationWithArrayParam() {\n    Parameter param =\n        StringParameter.builder()\n            .name(\"test\")\n            .value(\"test $strArray $intArray $boolArray $doubleArray\")\n            .build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(\n        new LinkedHashSet<>(Arrays.asList(\"strArray\", \"intArray\", \"boolArray\", \"doubleArray\")),\n        paramNames);\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(\n        \"test [\\\"one\\\",\\\"two\\\",\\\"three\\\"] [1,2,3] [true,false,true] [1.1,2.2,3.3]\", result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testStringInterpolationWithArrayParam", "index": 1057, "label": 0}
{"input": "@Test\n  public void isForeachStepListSizeTooLarge() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    ForeachStep foreachStep = new ForeachStep();\n    foreachStep.setId(\"foreach-step\");\n    foreachStep.setSteps(Collections.nCopies(Constants.STEP_LIST_SIZE_LIMIT + 1, step));\n\n    Workflow workflow = Workflow.builder().steps(Collections.singletonList(foreachStep)).build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\n        \"[workflow step list] is too large [302] and over the size limit [300]\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isForeachStepListSizeTooLarge", "index": 1058, "label": 0}
{"input": "private String sanitize(String expression) {\n    String expr = expression.trim();\n    if (expr.isEmpty()\n        || expr.endsWith(SEMICOLON)\n        || (!expr.startsWith(\"{\\\"\") && expr.endsWith(\"}\"))) {\n      return expr;\n    } else {\n      return expr + SEMICOLON;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ExprEvaluator.java", "function_name": "sanitize", "index": 1059, "label": 0}
{"input": "@JsonIgnore\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Long> getStepOrdinals() {\n    return (Map<String, Long>) extraInfo.get(STEP_ORDINALS);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/Metadata.java", "function_name": "getStepOrdinals", "index": 1060, "label": 0}
{"input": "public static void setTreeVelocityContext(VelocityContext context, GenTable genTable) {\n    String options = genTable.getOptions();\n    Dict paramsObj = JsonUtils.parseMap(options);\n    String treeCode = getTreecode(paramsObj);\n    String treeParentCode = getTreeParentCode(paramsObj);\n    String treeName = getTreeName(paramsObj);\n\n    context.put(\"treeCode\", treeCode);\n    context.put(\"treeParentCode\", treeParentCode);\n    context.put(\"treeName\", treeName);\n    context.put(\"expandColumn\", getExpandColumn(genTable));\n    if (paramsObj.containsKey(GenConstants.TREE_PARENT_CODE)) {\n      context.put(\"tree_parent_code\", paramsObj.get(GenConstants.TREE_PARENT_CODE));\n    }\n    if (paramsObj.containsKey(GenConstants.TREE_NAME)) {\n      context.put(\"tree_name\", paramsObj.get(GenConstants.TREE_NAME));\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "setTreeVelocityContext", "index": 1061, "label": 0}
{"input": "@Test\n  public void navigateToNonExistingLeafChild() {\n    var age = pigeonConfig.get(\"pigeon\").get(\"age\");\n    var t = catchThrowable(() -> age.get(\"non-existing\"));\n\n    assertThat(t)\n        .isInstanceOf(NoSuchChildException.class)\n        .hasMessageStartingWith(\n            \"Leaf node `pigeon.age` of type `pkl.base#Int` does not have a child named `non-existing`.\");\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "09bc09d058404dc62cca624a0319df3dd10327f0", "file_path": "pkl-config-java/src/test/java/org/pkl/config/java/ConfigTest.java", "function_name": "navigateToNonExistingLeafChild", "index": 1062, "label": 0}
{"input": "public static void validateFileUri(URI uri) throws URISyntaxException {\n    if (!uri.getSchemeSpecificPart().startsWith(\"/\")) {\n      throw new URISyntaxException(uri.toString(), ErrorMessages.create(\"invalidOpaqueFileUri\"));\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2bc9c2f42416ba122557a8a3d7c162c902ba362a", "file_path": "pkl-core/src/main/java/org/pkl/core/util/IoUtils.java", "function_name": "validateFileUri", "index": 1063, "label": 0}
{"input": "public long getFlowRefreshIntervalInMillis() {\n    return getLongProperty(\n        FLOW_REFRESH_INTERVAL_PROPERTY_NAME, FLOW_REFRESH_INTERVAL_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getFlowRefreshIntervalInMillis", "index": 1064, "label": 0}
{"input": "@Override\n    public void createDialog(Level level, String title, String description) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "createDialog", "index": 1065, "label": 0}
{"input": "@Test\n  public void testAddSignalInstance() throws Exception {\n    long seqId = instanceDao.addSignalInstance(conn, \"uuid2\", \"signal_a\", \"{}\");\n    conn.commit();\n    assertEquals(2, seqId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalInstanceDaoTest.java", "function_name": "testAddSignalInstance", "index": 1066, "label": 0}
{"input": "private static ParsableLong getParsedTimeoutRetryLimit(\n      @Nullable ParsableLong number,\n      Function<ParamDefinition, Parameter> paramParser,\n      String path) {\n    return parseParsableLong(number, paramParser, Constants.MAX_TIMEOUT_RETRY_LIMIT_SECS, path);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/RetryPolicyParser.java", "function_name": "getParsedTimeoutRetryLimit", "index": 1067, "label": 0}
{"input": "@Test\n  public void shouldInitializeWithPendingStatus() {\n    assertThat(stepDependencies.getStatuses())\n        .hasSize(1)\n        .first()\n        .matches(i -> i.getStatus().equals(StepDependencyMatchStatus.PENDING))\n        .matches(\n            i ->\n                i.getParams()\n                    .getEvaluatedParam(\"name\")\n                    .getEvaluatedResultString()\n                    .equals(\"signal_a\"));\n    assertThat(stepDependencies.getType()).isEqualTo(StepDependencyType.SIGNAL);\n    assertThat(stepDependencies.getInfo()).isNull();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/StepDependenciesTest.java", "function_name": "shouldInitializeWithPendingStatus", "index": 1068, "label": 0}
{"input": "private static CronTimeTrigger getCronTimeTrigger(TimeTrigger trigger) {\n    CronTimeTrigger cronTimeTrigger = null;\n    if (trigger instanceof CronTimeTrigger) {\n      cronTimeTrigger = (CronTimeTrigger) trigger;\n    } else if (trigger instanceof PredefinedTimeTrigger) {\n      PredefinedTimeTrigger timeTrigger = (PredefinedTimeTrigger) trigger;\n      cronTimeTrigger = new CronTimeTrigger();\n      cronTimeTrigger.setCron(timeTrigger.getExpression().key());\n      cronTimeTrigger.setTimezone(timeTrigger.getTimezone());\n      cronTimeTrigger.setFuzzyMaxDelay(timeTrigger.getFuzzyMaxDelay());\n    }\n    return cronTimeTrigger;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/TriggerHelper.java", "function_name": "getCronTimeTrigger", "index": 1069, "label": 0}
{"input": "@Test\n    public void testreadRead() throws IOException {\n        String sourceFile = \"src/test/resources/poi/last_row_number_xssf_date_test.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        FileUtils.readFileToByteArray(new File(file));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "testreadRead", "index": 1070, "label": 0}
{"input": "private void lexOctNumber() {\n    if (lookahead == '_') {\n      throw lexError(\"invalidSeparatorPosition\");\n    }\n    var ch = (int) lookahead;\n    if (!(ch >= 48 && ch <= 55)) {\n      throw unexpectedChar((char) ch, \"octal number\");\n    }\n    while ((ch >= 48 && ch <= 55) || ch == '_') {\n      nextChar();\n      ch = lookahead;\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexOctNumber", "index": 1071, "label": 0}
{"input": "public void setParallelToolCalls(Boolean parallelToolCalls) {\n      this.parallelToolCalls = parallelToolCalls;\n  }", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatOptions.java", "function_name": "setParallelToolCalls", "index": 1072, "label": 0}
{"input": "private static ParsableLong getParsedRetryNumber(\n      @Nullable ParsableLong retryNumber,\n      Function<ParamDefinition, Parameter> paramParser,\n      String path) {\n    return parseParsableLong(retryNumber, paramParser, Constants.MAX_RETRY_LIMIT, path);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/RetryPolicyParser.java", "function_name": "getParsedRetryNumber", "index": 1073, "label": 0}
{"input": "@Override\n    public Font findFont(boolean bold, short color, short fontHeight, String name, boolean italic, boolean strikeout,\n            short typeOffset, byte underline) {\n        return null;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvWorkbook.java", "function_name": "findFont", "index": 1074, "label": 0}
{"input": "public Span endWith(Span end) {\n    return new Span(charIndex, end.charIndex - charIndex + end.length);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Span.java", "function_name": "endWith", "index": 1075, "label": 0}
{"input": "@Bean\n  public MaestroWorkflowInstanceDao maestroWorkflowInstanceDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props,\n      MaestroJobEventPublisher maestroJobEventPublisher) {\n    LOG.info(\"Creating maestroWorkflowInstanceDao within Spring boot...\");\n    return new MaestroWorkflowInstanceDao(\n        crdbDataSource, objectMapper, props, maestroJobEventPublisher);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroWorkflowInstanceDao", "index": 1076, "label": 0}
{"input": "@Test\n  public void testUnknown422Error() {\n    ArrayList<PlannedTimeTriggerExecution> plannedList = new ArrayList<>();\n    plannedList.add(new PlannedTimeTriggerExecution(null, null));\n    when(executionPlanner.calculatePlannedExecutions(any(), any(), any())).thenReturn(plannedList);\n    Mockito.doThrow(new MaestroUnprocessableEntityException(\"Some other exception message\"))\n        .when(workflowLauncher)\n        .startWorkflowBatchRuns(any(), Mockito.eq(\"ACTIVE\"), any(), any());\n\n    AssertHelper.assertThrows(\n        \"should throw exception for unknown 422\",\n        MaestroRetryableError.class,\n        \"Unknown 422 unprocessable for workflow [wfid][ACTIVE]\",\n        () -> processor.process(() -> message));\n\n    Mockito.verifyNoInteractions(triggerProducer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/messageprocessors/TimeTriggerExecutionProcessorTest.java", "function_name": "testUnknown422Error", "index": 1077, "label": 0}
{"input": "public QualifiedIdentifier(List<Identifier> identifiers) {\n    super(\n        identifiers.get(0).span.endWith(identifiers.get(identifiers.size() - 1).span), identifiers);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/QualifiedIdentifier.java", "function_name": "QualifiedIdentifier", "index": 1078, "label": 0}
{"input": "public int getNextRetryDelay(Status status) {\n      if (status == Status.USER_FAILED) {\n        return backoff.getNextRetryDelayForUserError(errorRetries);\n      } else if (status == Status.PLATFORM_FAILED) {\n        return backoff.getNextRetryDelayForPlatformError(platformRetries);\n      } else {\n        \n        throw new MaestroInvalidStatusException(\n            \"Invalid status [%s] to get next retry delay\", status);\n      }\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepInstance.java", "function_name": "getNextRetryDelay", "index": 1079, "label": 0}
{"input": "public boolean isDeletionInProgress(String workflowId) {\n    return withRetryableQuery(\n        EXIST_IN_PROGRESS_DELETION_QUERY, stmt -> stmt.setString(1, workflowId), ResultSet::next);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDeletionDao.java", "function_name": "isDeletionInProgress", "index": 1080, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceArtifacts() {\n    Map<String, Artifact> artifacts =\n        stepDao.getStepInstanceArtifacts(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    assertTrue(artifacts.isEmpty());\n    Map<String, Artifact> latest =\n        stepDao.getStepInstanceArtifacts(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"latest\");\n    assertEquals(artifacts, latest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceArtifacts", "index": 1081, "label": 0}
{"input": "private ParserError unexpectedEndOfFile() {\n    return lexError(ErrorMessages.create(\"unexpectedEndOfFile\"), cursor, 0);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "unexpectedEndOfFile", "index": 1082, "label": 0}
{"input": "private static Class<?> getClassGeneric(Field field, Class<?> classGeneric) {\n        if (classGeneric != null) {\n            return classGeneric;\n        }\n        if (field == null) {\n            return defaultClassGeneric;\n        }\n        Type type = field.getGenericType();\n        if (!(type instanceof ParameterizedType)) {\n            return defaultClassGeneric;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type[] types = parameterizedType.getActualTypeArguments();\n        if (types == null || types.length == 0) {\n            return defaultClassGeneric;\n        }\n        Type actualType = types[0];\n        if (!(actualType instanceof Class<?>)) {\n            return defaultClassGeneric;\n        }\n        return (Class<?>) actualType;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/ConverterUtils.java", "function_name": "getClassGeneric", "index": 1083, "label": 0}
{"input": "default boolean hasNext(AnalysisContext context) {\n        if (context == null\n                || context.readRowHolder() == null\n                || context.readSheetHolder() == null\n                || context.readSheetHolder().getReadSheet() == null\n                || context.readWorkbookHolder().getReadWorkbook() == null\n        ) {\n            return true;\n        }\n        ReadRowHolder readRowHolder = context.readRowHolder();\n        int index = readRowHolder.getRowIndex();\n\n        Integer limit = context.readSheetHolder().getReadSheet().getNumRows();\n        if (limit == null) {\n            limit = context.readWorkbookHolder().getReadWorkbook().getNumRows();\n        }\n        if (limit != null && index >= limit) {\n            return false;\n        }\n        return true;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/listener/ReadListener.java", "function_name": "hasNext", "index": 1084, "label": 0}
{"input": "default boolean isAutoCommit() {\n    return getBoolProperty(AUTO_COMMIT_PROPERTY_NAME, AUTO_COMMIT_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "isAutoCommit", "index": 1085, "label": 0}
{"input": "private void visitAndCheckLimit() {\n    state.visited++;\n    if (state.visited >= visitLimit) {\n      throw new IllegalStateException(\n          \"SEL evaluation aborted \"\n              + \"as it takes too many operations over the limit \"\n              + visitLimit);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelParserEvaluationVisitor.java", "function_name": "visitAndCheckLimit", "index": 1086, "label": 0}
{"input": "public GeneratorSpreadNode(\n      SourceSection sourceSection, ExpressionNode iterableNode, boolean nullable) {\n    super(sourceSection, false);\n    this.iterableNode = iterableNode;\n    this.nullable = nullable;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "GeneratorSpreadNode", "index": 1087, "label": 0}
{"input": "@Test\n  public void testCreateEmptySelTypeObj() {\n    SelType res = SelTypes.MAP.newSelTypeObj();\n    assertEquals(SelTypes.MAP, res.type());\n    assertEquals(\"null\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypesTest.java", "function_name": "testCreateEmptySelTypeObj", "index": 1088, "label": 0}
{"input": "@Test\n    public void testDelimiter() {\n        csvFile = TestFileUtil.createNewFile(CSV_BASE + \"csv-delimiter.csv\");\n\n        log.info(\"{} delimiter\", CsvConstant.AT);\n        doTest(true, csvFile, CsvConstant.AT, null, null, null, null);\n\n        log.info(\"{} delimiter\", CsvConstant.TAB);\n        doTest(true, csvFile, CsvConstant.TAB, null, null, null, null);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "testDelimiter", "index": 1089, "label": 0}
{"input": "@GetMapping(\n      value = \"/{workflowId}/instances/{workflowInstanceId}\",\n      consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Get a workflow instance view by overlaying data from all runs within it\")\n  public WorkflowInstance getWorkflowInstanceView(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId,\n      @PathVariable(\"workflowInstanceId\") long workflowInstanceId,\n      @RequestParam(name = \"enriched\", defaultValue = \"true\") boolean enriched) {\n    return getWorkflowInstance(\n        workflowId, workflowInstanceId, Constants.LATEST_INSTANCE_RUN, enriched, true);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowInstanceController.java", "function_name": "getWorkflowInstanceView", "index": 1090, "label": 0}
{"input": "private String quoteBashCommandArg(String arg) {\n    return String.format(\"'%s'\", arg.replaceAll(\"'\", \"'\\\\\\\\''\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilder.java", "function_name": "quoteBashCommandArg", "index": 1091, "label": 0}
{"input": "@Test\n  public void testUnbox() {\n    Map<String, Object> map = orig.unbox();\n    assertEquals(\"{foo=bar, num=123}\", String.valueOf(map));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testUnbox", "index": 1092, "label": 0}
{"input": "@Test\n  public void testNoBackoff() throws Exception {\n    RetryPolicy retryPolicy =\n        loadObject(\n            \"fixtures/retry_policy/sample-retry-exponential-no-backoff.json\", RetryPolicy.class);\n    assertNull(retryPolicy.getBackoff());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/RetryPolicyTest.java", "function_name": "testNoBackoff", "index": 1093, "label": 0}
{"input": "public Timeline getStepInstanceTimeline(\n      String workflowId,\n      long workflowInstanceId,\n      long workflowRunId,\n      String stepId,\n      String stepAttempt) {\n    return getStepInstanceFieldByIds(\n        StepInstanceField.TIMELINE,\n        workflowId,\n        workflowInstanceId,\n        workflowRunId,\n        stepId,\n        stepAttempt,\n        this::getTimeline);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepInstanceTimeline", "index": 1094, "label": 0}
{"input": "@Test\n\t@Order(4)\n\t@DisplayName(\"Test navigate to specified URL and get interactive elements\")\n\tvoid testNavigateAndGetElements() {\n\t\t\n\t\tList<String> baiduExpected = Arrays.asList(\"Baidu Search\", \"input\");\n\t\tString baiduElements = navigateAndVerifyElements(browserUseTool, \"https://www.baidu.com\", baiduExpected);\n\t\tAssertions.assertNotNull(baiduElements, \"Failed to get Baidu interactive elements\");\n\n\t\tList<String> githubExpected = Arrays.asList(\"search\", \"Sign\");\n\t\tString githubElements = navigateAndVerifyElements(browserUseTool, \"https://github.com\", githubExpected);\n\t\tAssertions.assertNotNull(githubElements, \"Failed to get GitHub interactive elements\");\n\n\t\tlog.info(\"All navigation tests passed!\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/test/java/com/alibaba/cloud/ai/example/manus/tool/BrowserUseToolSpringTest.java", "function_name": "testNavigateAndGetElements", "index": 1095, "label": 0}
{"input": "void startShutdown(Action action) {\n    if (childActors.isEmpty()) {\n      checkShutdown();\n    } else {\n      cancelPendingActions();\n      wakeUpChildActors(action);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "startShutdown", "index": 1096, "label": 0}
{"input": "private boolean jj_3_8() {\n    if (jj_3R_16()) return true;\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_23()) jj_scanpos = xsp;\n    if (jj_3R_18()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_8", "index": 1097, "label": 0}
{"input": "@Test\n  public void testWorkflowWithSignalTriggerSubscriptions() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID3);\n    workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    ArgumentCaptor<Workflow> workflowCaptor = ArgumentCaptor.forClass(Workflow.class);\n    Mockito.verify(triggerClient, Mockito.times(1))\n        .upsertTriggerSubscription(\n            workflowCaptor.capture(), Mockito.eq(wfd.getTriggerUuids()), Mockito.eq(null));\n    Workflow capturedWorkflow = workflowCaptor.getValue();\n    Assert.assertNotNull(capturedWorkflow);\n    Assert.assertEquals(\"sample-active-wf-with-signal-triggers\", capturedWorkflow.getId());\n    Assert.assertEquals(\n        wfd.getWorkflow().getSignalTriggers(), capturedWorkflow.getSignalTriggers());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testWorkflowWithSignalTriggerSubscriptions", "index": 1098, "label": 0}
{"input": "@Test\n  public void testTransformSignalDependencyDefinitionToMap() throws IOException {\n    SignalDependenciesDefinition definition =\n        loadObject(\n            \"fixtures/signal/sample-signal-dependencies-definition.json\",\n            SignalDependenciesDefinition.class);\n    MapParameter param = SignalTransformer.transform(definition.definitions().getFirst());\n    Assert.assertFalse(param.isEvaluated());\n    Assert.assertTrue(param.isLiteral());\n    Assert.assertEquals(\"signal_a\", param.getValue().get(\"name\").getValue());\n    Assert.assertEquals(\"test123\", param.getValue().get(\"param_a\").getValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalTransformerTest.java", "function_name": "testTransformSignalDependencyDefinitionToMap", "index": 1099, "label": 0}
{"input": "public IPBlackRuleList(RuleSubLogsDao ruleSubLogsDao, ModuleMatchCache moduleMatchCache) {\n        super();\n        this.ruleSubLogsDao = ruleSubLogsDao;\n        this.moduleMatchCache = moduleMatchCache;\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "c57007bbb4cd958de4b1c0a06b7d6173b609481d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/module/impl/rule/IPBlackRuleList.java", "function_name": "IPBlackRuleList", "index": 1100, "label": 0}
{"input": "public static JSONObject updateHeadImg(String appId,String headImgUrl){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"headImgUrl\",headImgUrl);\r\n        return OkhttpUtil.postJSON(\"/personal/updateHeadImg\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/PersonalApi.java", "function_name": "updateHeadImg", "index": 1101, "label": 0}
{"input": "private List<EnvVar> buildEnvs(KubernetesCommand command) {\n    List<EnvVar> envVars =\n        command.getEnv().entrySet().stream()\n            .map(\n                entry ->\n                    new EnvVarBuilder()\n                        .withName(entry.getKey())\n                        .withValue(entry.getValue())\n                        .build())\n            .collect(Collectors.toList());\n    \n    envVars.add(\n        new EnvVarBuilder()\n            .withName(MAESTRO_OUTPUT_START_ENV)\n            .withValue(MAESTRO_OUTPUT_START_TOKEN)\n            .build());\n    envVars.add(\n        new EnvVarBuilder()\n            .withName(MAESTRO_OUTPUT_END_ENV)\n            .withValue(MAESTRO_OUTPUT_END_TOKEN)\n            .build());\n    return envVars;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7352dec4fe9be70bf0076f7ed4d10ca1985ad842", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/Fabric8RuntimeExecutor.java", "function_name": "buildEnvs", "index": 1102, "label": 0}
{"input": "@Test\n  public void testEscape() {\n    SelType res = SelString.of(null).call(\"escape\", new SelType[] {SelString.of(\"{\\\"foo\\\"}\")});\n    assertEquals(\"STRING: {\\\\\\\"foo\\\\\\\"}\", res.type() + \": \" + res.toString());\n    res = SelString.of(\"{\\\"foo\\\"}\").call(\"escape\", new SelType[0]);\n    assertEquals(\"STRING: {\\\\\\\"foo\\\\\\\"}\", res.type() + \": \" + res.toString());\n    res = SelString.of(\"{\\\"foo\\\"}\").call(\"escape\", new SelType[] {SelString.of(\"{\\\"foo\\\"}\"0)});\n    assertEquals(\"{\\\"foo\\\"}\"1, res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testEscape", "index": 1103, "label": 0}
{"input": "private void enqueueRetryTasks() {\n    Map<String, Task> lastAttemptMap =\n        flow.getFinishedTasks().stream()\n            .collect(Collectors.toMap(Task::referenceTaskName, t -> t, (first, second) -> second));\n    lastAttemptMap.values().forEach(this::scheduleRetryableTask);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "enqueueRetryTasks", "index": 1104, "label": 0}
{"input": "public Map<String, String> getAllLatestStepUuidFromAncestors(\n      String workflowId, long workflowInstanceId) {\n    Map<String, String> stepUuids = new HashMap<>();\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_ALL_LATEST_ATTEMPT_STEP_UUID_QUERY,\n                stmt -> {\n                  stmt.setString(1, workflowId);\n                  stmt.setLong(2, workflowInstanceId);\n                },\n                result -> {\n                  while (result.next()) {\n                    stepUuids.put(result.getString(ID_COLUMN), result.getString(PAYLOAD_COLUMN));\n                  }\n                  return stepUuids;\n                }),\n        \"getAllLatestStepUuidFromAncestors\",\n        \"Failed to get the step ids to latest uuid mapping from workflow instance [{}][{}]\",\n        workflowId,\n        workflowInstanceId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getAllLatestStepUuidFromAncestors", "index": 1105, "label": 0}
{"input": "private Annotation parseAnnotation() {\n    var start = next().span;\n    var children = new ArrayList<Node>(2);\n    var type = parseType();\n    children.add(type);\n    ObjectBody body = null;\n    var end = type.span();\n    if (lookahead == Token.LBRACE) {\n      body = parseObjectBody();\n      end = body.span();\n    }\n    children.add(body);\n    return new Annotation(children, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseAnnotation", "index": 1106, "label": 0}
{"input": "private InstanceRunUuid getNonTerminalInstance(Connection conn, String workflowId)\n      throws SQLException {\n    try (PreparedStatement wfiStmt = conn.prepareStatement(EXIST_NON_TERMINAL_INSTANCE_QUERY)) {\n      wfiStmt.setString(1, workflowId);\n      try (ResultSet result = wfiStmt.executeQuery()) {\n        if (result.next()) {\n          InstanceRunUuid instanceRunUuid = readInstanceRunUuidFromResult(result);\n          Checks.checkTrue(\n              !result.next(),\n              \"Invalid case: finding more than 1 non-terminal runs beside [%s] with FIRST_ONLY run strategy.\",\n              instanceRunUuid);\n          return instanceRunUuid;\n        }\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "getNonTerminalInstance", "index": 1107, "label": 0}
{"input": "@Test\n  public void testComplete() {\n    Map<String, Boolean> idStatusMap = new LinkedHashMap<>();\n    idStatusMap.put(\"job_5\", Boolean.TRUE);\n    idStatusMap.put(\"job_2\", Boolean.TRUE);\n    idStatusMap.put(\"job_3\", Boolean.TRUE);\n    idStatusMap.put(\"job_4\", Boolean.TRUE);\n    idStatusMap.put(\"job_1\", Boolean.TRUE);\n    Assert.assertTrue(DagHelper.isDone(runtimeDag2, idStatusMap, null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testComplete", "index": 1108, "label": 0}
{"input": "@Override\n  public final boolean hasCachedValue(Object key) {\n    return EconomicMaps.containsKey(cachedValues, key);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmObject.java", "function_name": "hasCachedValue", "index": 1109, "label": 0}
{"input": "private void saveDynamicAgent(DynamicAgentDefinition annotation, Class<?> clazz) {\n\t\t\n\t\tDynamicAgentEntity existingEntity = repository.findByAgentName(annotation.agentName());\n\n\t\t\n\t\tDynamicAgentEntity entity = (existingEntity != null) ? existingEntity : new DynamicAgentEntity();\n\n\t\t\n\t\tentity.setAgentName(annotation.agentName());\n\t\tentity.setAgentDescription(annotation.agentDescription());\n\t\tentity.setNextStepPrompt(annotation.nextStepPrompt());\n\t\tentity.setAvailableToolKeys(Arrays.asList(annotation.availableToolKeys()));\n\t\tentity.setClassName(clazz.getName());\n\n\t\t\n\t\trepository.save(entity);\n\t\tString action = (existingEntity != null) ? \"Updated\" : \"Created\";\n\t\tlog.info(\"{} dynamic agent: {}\", action, entity.getAgentName());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/service/DynamicAgentScanner.java", "function_name": "saveDynamicAgent", "index": 1110, "label": 0}
{"input": "private TriggerUuids insertMaestroWorkflowVersion(\n      Connection conn, Metadata metadata, Workflow workflow) throws SQLException {\n    final TriggerUuids triggerUuids = IdHelper.toTriggerUuids(workflow);\n    final String metadataJson = toJson(metadata);\n    final String workflowJson = toJson(workflow);\n    final String triggerUuidsJson = toJson(triggerUuids);\n    try (PreparedStatement stmt = conn.prepareStatement(CREATE_WORKFLOW_VERSION_QUERY)) {\n      int idx = 0;\n      stmt.setString(++idx, metadataJson);\n      stmt.setString(++idx, workflowJson);\n      stmt.setString(++idx, triggerUuidsJson);\n      int cnt = stmt.executeUpdate();\n      Checks.checkTrue(\n          cnt == SUCCESS_WRITE_SIZE, \"insertMaestroWorkflowVersion expects to always return 1.\");\n    }\n    return triggerUuids;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "insertMaestroWorkflowVersion", "index": 1111, "label": 0}
{"input": "public String toPlanId(String planTemplateId) {\n\t\tif (planTemplateId == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isPlanId(planTemplateId)) {\n\t\t\treturn planTemplateId; \n\t\t}\n\n\t\t\n\t\t\n\t\tString uniqueId = PLAN_ID_PREFIX + System.currentTimeMillis() + \"-\" + (int) (Math.random() * 1000);\n\n\t\tif (isPlanTemplateId(planTemplateId)) {\n\t\t\tlogger.debug(\"Generated new unique planId [{}] from planTemplateId [{}]\", uniqueId, planTemplateId);\n\t\t}\n\t\telse {\n\t\t\tlogger.warn(\"Unknown ID format [{}], generated new unique planId [{}]\", planTemplateId, uniqueId);\n\t\t}\n\n\t\treturn uniqueId;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/coordinator/PlanIdDispatcher.java", "function_name": "toPlanId", "index": 1112, "label": 0}
{"input": "@Override\n  public List<EventExecution> getEventExecutions(String event) {\n    return withMetricLogError(\n        () ->\n            getPayloads(\n                GET_EVENT_EXECUTIONS_STATEMENT,\n                statement -> statement.setString(1, event),\n                EventExecution.class),\n        \"getEventExecutions\",\n        \"Failed getting event executions with event {}\",\n        event);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "getEventExecutions", "index": 1113, "label": 0}
{"input": "public Map<String, ParamDefinition> getDefaultStepParams() {\n    return preprocessParams(defaultStepParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/DefaultParamManager.java", "function_name": "getDefaultStepParams", "index": 1114, "label": 0}
{"input": "public ForGeneratorScope(\n        Scope parent,\n        String qualifiedName,\n        FrameDescriptor.Builder frameDescriptorBuilder,\n        FrameDescriptor.Builder memberDescriptorBuilder) {\n      super(parent, null, qualifiedName, ConstLevel.NONE, frameDescriptorBuilder);\n      this.memberDescriptorBuilder = memberDescriptorBuilder;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "ForGeneratorScope", "index": 1115, "label": 0}
{"input": "private static WorkbookHandlerExecutionChain getWorkbookHandlerExecutionChain(WorkbookWriteHandlerContext context,\n            boolean runOwn) {\n        AbstractWriteHolder abstractWriteHolder = (AbstractWriteHolder) context.getWriteContext().currentWriteHolder();\n        if (runOwn) {\n            return abstractWriteHolder.getOwnWorkbookHandlerExecutionChain();\n        } else {\n            return abstractWriteHolder.getWorkbookHandlerExecutionChain();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/WriteHandlerUtils.java", "function_name": "getWorkbookHandlerExecutionChain", "index": 1116, "label": 0}
{"input": "@Override\n\tpublic SearchService.Response query(String query) {\n\t\treturn this.apply(Request.simpleQuery(query));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-tavilysearch/src/main/java/com/alibaba/cloud/ai/toolcalling/tavily/TavilySearchService.java", "function_name": "query", "index": 1117, "label": 0}
{"input": "@Test\n    public void t05LoopMergeStrategy() {\n        EasyExcel.write(fileLoopMergeStrategy, StyleData.class).sheet()\n                .registerWriteHandler(new LoopMergeStrategy(2, 1)).doWrite(data10());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/style/StyleDataTest.java", "function_name": "t05LoopMergeStrategy", "index": 1118, "label": 0}
{"input": "@Test\n  public void testGenerateTracingArtifact() {\n    MaestroTracingContext traceContext =\n        MaestroTracingContext.fromTraceContext(\n            TraceContext.newBuilder()\n                .traceId(456L)\n                .traceIdHigh(123L)\n                .spanId(789L)\n                .parentId(999L)\n                .sampled(true)\n                .build());\n    assertEquals(\n        Collections.singletonMap(\n            \"tracing_context\",\n            DefaultArtifact.create(\"tracing_id\", \"000000000000007b00000000000001c8\")),\n        traceContext.toTracingArtifacts());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tracing/MaestroTracingContextTest.java", "function_name": "testGenerateTracingArtifact", "index": 1119, "label": 0}
{"input": "public StringUnicodeEscape(String escape, Span span) {\n      super(span, null);\n      this.escape = escape;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringConstantPart.java", "function_name": "StringUnicodeEscape", "index": 1120, "label": 0}
{"input": "public static int getCellCoordinate(Integer currentCoordinate, Integer absoluteCoordinate,\n            Integer relativeCoordinate) {\n        if (absoluteCoordinate != null && absoluteCoordinate > 0) {\n            return absoluteCoordinate;\n        }\n        if (relativeCoordinate != null) {\n            return currentCoordinate + relativeCoordinate;\n        }\n        return currentCoordinate;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/StyleUtil.java", "function_name": "getCellCoordinate", "index": 1121, "label": 0}
{"input": "@Override\n  public String evaluateExpressionString(ModuleSource moduleSource, String expression) {\n    \n    \n    if (expression.equals(\"output.text\")) {\n      return evaluateOutputText(moduleSource);\n    }\n    return doEvaluate(\n        moduleSource,\n        (module) -> {\n          var expressionResult =\n              VmUtils.evaluateExpression(module, expression, securityManager, moduleResolver);\n          var toStringNode =\n              ToStringNodeGen.create(\n                  VmUtils.unavailableSourceSection(), new ConstantValueNode(expressionResult));\n          var stringified = toStringNode.executeGeneric(VmUtils.createEmptyMaterializedFrame());\n          return (String) stringified;\n        });\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/EvaluatorImpl.java", "function_name": "evaluateExpressionString", "index": 1122, "label": 0}
{"input": "public FlowGroup claimGroup() {\n    return flowDao.claimExpiredGroup(\n        properties.getEngineAddress(), properties.getExpirationInSecs());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "claimGroup", "index": 1123, "label": 0}
{"input": "@JsonIgnore\n  public boolean isForeachIterationRestartable(long iterationId) {\n    if (restartInfo != null && restartInfo.contains(iterationId)) {\n      return false;\n    }\n    if (details == null) {\n      return false;\n    }\n    return details.isForeachIterationRestartable(iterationId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "isForeachIterationRestartable", "index": 1124, "label": 0}
{"input": "@Test\n  public void testInvalidGetWorkflowPropertiesSnapshot() {\n    AssertHelper.assertThrows(\n        \"Cannot get non-existing workflow's properties-snapshot\",\n        MaestroNotFoundException.class,\n        \"Cannot find workflow [\" + TEST_WORKFLOW_ID1 + \"]'s current properties-snapshot.\",\n        () -> workflowDao.getWorkflowPropertiesSnapshot(TEST_WORKFLOW_ID1, \"latest\"));\n\n    AssertHelper.assertThrows(\n        \"Cannot get a specific version of snapshot\",\n        UnsupportedOperationException.class,\n        \"Specific snapshot version is not implemented.\",\n        () -> workflowDao.getWorkflowPropertiesSnapshot(TEST_WORKFLOW_ID1, \"12345\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testInvalidGetWorkflowPropertiesSnapshot", "index": 1125, "label": 0}
{"input": "@Autowired\n  public WorkflowController(\n      MaestroWorkflowDao workflowDao,\n      MaestroWorkflowDeletionDao workflowDeletionDao,\n      User.UserBuilder callerBuilder,\n      DryRunValidator dryRunValidator,\n      WorkflowEnrichmentHelper workflowEnrichmentHelper) {\n    this.workflowDao = workflowDao;\n    this.workflowDeletionDao = workflowDeletionDao;\n    this.callerBuilder = callerBuilder;\n    this.dryRunValidator = dryRunValidator;\n    this.workflowEnrichmentHelper = workflowEnrichmentHelper;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowController.java", "function_name": "WorkflowController", "index": 1126, "label": 0}
{"input": "@Test\n  public void testMatchSignalDependency() {\n    Long matched =\n        paramDao.matchSignalDependency(\n            new SignalMatchDto(\n                \"signal_a\",\n                List.of(\n                    new SignalMatchDto.ParamMatchDto(\n                        \"foo\", SignalParamValue.of(123), SignalOperator.EQUALS_TO))));\n    assertEquals(12, matched.intValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalParamDaoTest.java", "function_name": "testMatchSignalDependency", "index": 1127, "label": 0}
{"input": "public WindowMenuBar(SwingMainWindow parent) {\n            this.parent = parent;\n            parent.setJMenuBar(setupMenuBar());\n        }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swing/SwingMainWindow.java", "function_name": "WindowMenuBar", "index": 1128, "label": 0}
{"input": "public List<ObjectMember> getMembers() {\n    return (List<ObjectMember>) children.subList(membersOffset, children.size());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectBody.java", "function_name": "getMembers", "index": 1129, "label": 0}
{"input": "private String loadPromptFromResource(String promptPath) {\n\t\ttry {\n\t\t\tString fullPath = PROMPT_BASE_PATH + promptPath;\n\t\t\tResource resource = new ClassPathResource(fullPath);\n\n\t\t\tif (!resource.exists()) {\n\t\t\t\tlog.warn(\"Prompt file not found: {}\", fullPath);\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\tString content = resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t\tlog.debug(\"Loaded prompt from: {}\", fullPath);\n\t\t\treturn content;\n\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlog.error(\"Failed to load prompt from: {}\", promptPath, e);\n\t\t\treturn \"\";\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/prompt/PromptLoader.java", "function_name": "loadPromptFromResource", "index": 1130, "label": 0}
{"input": "@Override\n    public void createNotification(Level level, String title, String description) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        super.createNotification(level, title, description);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "createNotification", "index": 1131, "label": 0}
{"input": "@Test(expected = MaestroValidationException.class)\n  public void testMergeNestedParamMismatchTypes() {\n    when(this.defaultParamManager.getDefaultStepParams())\n        .thenReturn(\n            Collections.singletonMap(\n                \"nested-mismatch\", ParamDefinition.buildParamDefinition(\"foo\", \"bar\")));\n    TypedStep testStep = new TypedStep();\n    testStep.setParams(\n        singletonMap(\n            \"nested-mismatch\",\n            MapParamDefinition.builder()\n                .name(\"nested-mismatch\")\n                .value(\n                    Collections.singletonMap(\n                        \"default-new\",\n                        ParamDefinition.buildParamDefinition(\"default-new\", \"from-default\")))\n                .build()));\n    testStep.setType(StepType.NOOP);\n    testStep.setId(\"step1\");\n    runtimeManager.getAllParams(testStep, workflowSummary, runtimeSummary);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepRuntimeManagerTest.java", "function_name": "testMergeNestedParamMismatchTypes", "index": 1132, "label": 0}
{"input": "private Component generateProgramMenu() {\n            JMenu menu = new JMenu(tlUI(Lang.GUI_MENU_PROGRAM));\n            JMenuItem openDataDirectory = new JMenuItem(tlUI(Lang.GUI_MENU_OPEN_DATA_DIRECTORY));\n            openDataDirectory.addActionListener(e -> {\n                try {\n                    Desktop.getDesktop().open(Main.getDataDirectory());\n                } catch (IOException ex) {\n                    log.warn(\"Unable to open data directory {} in desktop env.\", Main.getDataDirectory().getPath());\n                }\n            });\n\n\n\n\n\n\n\n\n\n\n            if (!ExternalSwitch.parseBoolean(\"pbh.app-v\")) {\n                menu.add(openDataDirectory);\n            }\n            menu.addSeparator();\n            JMenuItem quit = new JMenuItem(tlUI(Lang.GUI_MENU_QUIT));\n            quit.addActionListener(e -> System.exit(0));\n            menu.add(quit);\n            return menu;\n        }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "7f37b254ea69696c258047fd326d79e3061cf0b9", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swing/SwingMainWindow.java", "function_name": "generateProgramMenu", "index": 1133, "label": 0}
{"input": "@Test\n  public void testUpdateForUpstream() {\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .build();\n    runRequest.updateForUpstream(\"parent\", 2, \"sub-step\");\n    Assert.assertEquals(\"[parent][2]\", runRequest.getWorkflowIdentity());\n    Assert.assertEquals(\"sub-step\", runRequest.getRestartStepId());\n    Assert.assertEquals(RunPolicy.RESTART_FROM_SPECIFIC, runRequest.getCurrentPolicy());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testUpdateForUpstream", "index": 1134, "label": 0}
{"input": "@Test\n  public void testParseStepParameterWithSignalParamUsingDoubleUnderscore() {\n    SignalInitiator initiator = new SignalInitiator();\n    initiator.setParams(\n        twoItemMap(\n            \"signal_a\",\n            StringMapParameter.builder().evaluatedResult(singletonMap(\"param1\", \"value1\")).build(),\n            \"signal_b\",\n            MapParameter.builder().evaluatedResult(singletonMap(\"param2\", 123L)).build()));\n    paramExtensionRepo.reset(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        InstanceWrapper.builder().initiator(initiator).build());\n\n    StringParameter bar =\n        StringParameter.builder().name(\"bar\").expression(\"signal_b__param2 + '-1';\").build();\n    paramEvaluator.parseStepParameter(\n        Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), bar, \"step1\");\n    assertEquals(\"123-1\", bar.getEvaluatedResult());\n    paramExtensionRepo.clear();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParameterEvaluationTest.java", "function_name": "testParseStepParameterWithSignalParamUsingDoubleUnderscore", "index": 1135, "label": 0}
{"input": "private static String removeBackticks(String text) {\n    if (!text.isEmpty() && text.charAt(0) == '`') {\n      \n      return text.substring(1, text.length() - 1);\n    }\n    return text;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Identifier.java", "function_name": "removeBackticks", "index": 1136, "label": 0}
{"input": "@Override\n  public void updateEventExecution(EventExecution eventExecution) {\n    LOG.debug(\n        \"Updating an event execution for event {} with handler name {} and execution id {}\",\n        eventExecution.getEvent(),\n        eventExecution.getName(),\n        eventExecution.getId());\n    addOrUpdateEventExecution(\n        UPSERT_EVENT_EXECUTION_STATEMENT, eventExecution, \"updateEventExecution\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "updateEventExecution", "index": 1137, "label": 0}
{"input": "public StateGraph addNode(String id, AsyncCommandAction action, Map<String, String> mappings)\n\t\t\tthrows GraphStateException {\n\n\t\treturn addNode(id, new CommandNode(id, action, mappings));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b96b23a5859c99b4b9f1e8895d9eee02ff7069d5", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/StateGraph.java", "function_name": "addNode", "index": 1138, "label": 0}
{"input": "@JsonIgnore\n  public boolean containsDuplicate() {\n    Set<String> tagNames = tags.stream().map(Tag::getName).collect(Collectors.toSet());\n    return tagNames.size() != tags.size();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/TagList.java", "function_name": "containsDuplicate", "index": 1139, "label": 0}
{"input": "private PropertiesSnapshot getCurrentPropertiesSnapshot(String workflowId) {\n    PropertiesSnapshot propertiesSnapshot =\n        withMetricLogError(\n            () ->\n                withRetryableQuery(\n                    GET_CURRENT_PROPERTIES_SNAPSHOT,\n                    stmt -> stmt.setString(1, workflowId),\n                    result -> {\n                      if (result.next()) {\n                        return propertiesSnapshotFromResult(result, workflowId);\n                      }\n                      return null;\n                    }),\n            \"getCurrentPropertiesSnapshot\",\n            \"Failed getting current properties-snapshot for workflow [{}]\",\n            workflowId);\n    if (propertiesSnapshot == null) {\n      throw new MaestroNotFoundException(\n          \"Cannot find workflow [%s]'s current properties-snapshot. It has not been created yet or has been deleted.\",\n          workflowId);\n    }\n    return propertiesSnapshot;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getCurrentPropertiesSnapshot", "index": 1140, "label": 0}
{"input": "MaestroInterceptorMvcConfig(UserInfoInterceptor userInfoInterceptor) {\n    this.userInfoInterceptor = userInfoInterceptor;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroInterceptorMvcConfig.java", "function_name": "MaestroInterceptorMvcConfig", "index": 1141, "label": 0}
{"input": "private Map<String, ParamDefinition> preprocessParams(Map<String, ParamDefinition> params) {\n    if (params == null) {\n      return null;\n    }\n    Map<String, ParamDefinition> result = objectMapper.convertValue(params, typeRef);\n    result.forEach((n, p) -> p.setName(n));\n    return result;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/DefaultParamManager.java", "function_name": "preprocessParams", "index": 1142, "label": 0}
{"input": "private CellRangeAddress getCellRangeAddress(Cell cell) {\n        List<CellRangeAddress> mergedRegions = cell.getSheet().getMergedRegions();\n        int rowIndex = cell.getRowIndex();\n        int columnIndex = cell.getColumnIndex();\n\n        for (CellRangeAddress cellAddresses : mergedRegions) {\n            if (cellAddresses.getFirstRow() == rowIndex && cellAddresses.getFirstColumn() == columnIndex) {\n                return cellAddresses;\n            }\n        }\n        return null;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java", "function_name": "getCellRangeAddress", "index": 1143, "label": 0}
{"input": "private void loadSelClasses() {\n    loadClassesInPackage(\"com.netflix.sel.ast\");\n    loadClassesInPackage(\"com.netflix.sel.type\");\n    loadClassesInPackage(\"com.netflix.sel.visitor\");\n    loadClassesInPackage(\"com.netflix.sel.ext\");\n    loadClassesInPackage(\"org.joda.time\");\n    ResourceBundle.getBundle(\"org.joda.time.format.messages\");\n    ResourceBundle.getBundle(\"sun.text.resources.FormatData\");\n    ResourceBundle.getBundle(\"sun.util.resources.CurrencyNames\");\n\n    Provider provider = DateTimeZone.getProvider(); \n    provider.getAvailableIDs().forEach(id -> preloadedTimezones.add(provider.getZone(id)));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelClassLoader.java", "function_name": "loadSelClasses", "index": 1144, "label": 0}
{"input": "public CsvWriterBuilder quote(Character quote, QuoteMode quoteMode) {\n        if (quote != null) {\n            this.csvFormatBuilder.setQuote(quote);\n        }\n        if (quoteMode != null) {\n            this.csvFormatBuilder.setQuoteMode(quoteMode);\n        }\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/CsvWriterBuilder.java", "function_name": "quote", "index": 1145, "label": 0}
{"input": "public MaestroWorkflowDeletionDao(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDeletionDao.java", "function_name": "MaestroWorkflowDeletionDao", "index": 1146, "label": 0}
{"input": "@Test\n  public void assignOps() {\n    one.assignOps(SelOp.ASSIGN, another);\n    assertEquals(\"DATETIME: 2019-01-01T00:00:00.000Z\", one.type() + \": \" + one);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelJodaDateTimeTest.java", "function_name": "assignOps", "index": 1147, "label": 0}
{"input": "@Test\n  public void testLatestMatched() {\n    Timeline timeline = new Timeline(null);\n    assertFalse(timeline.latestMatched(TimelineLogEvent.info(\"test\")));\n    timeline.add(TimelineLogEvent.info(\"test\"));\n    assertTrue(timeline.latestMatched(TimelineLogEvent.info(\"test\")));\n    timeline.add(TimelineLogEvent.debug(\"test\"));\n    assertFalse(timeline.latestMatched(TimelineLogEvent.info(\"test\")));\n    assertEquals(2, timeline.getTimelineEvents().size());\n    assertFalse(timeline.latestMatched(TimelineDetailsEvent.from(Details.create(\"test details\"))));\n    timeline.add(TimelineDetailsEvent.from(Details.create(\"test details\")));\n    assertEquals(3, timeline.getTimelineEvents().size());\n    assertTrue(timeline.latestMatched(TimelineDetailsEvent.from(Details.create(\"test details\"))));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/timeline/TimelineTest.java", "function_name": "testLatestMatched", "index": 1148, "label": 0}
{"input": "@VisibleForTesting\n  void validateTasks(Collection<Task> tasks) {\n    Preconditions.checkNotNull(tasks, \"Tasks object cannot be null\");\n    Preconditions.checkArgument(!tasks.isEmpty(), \"Tasks object cannot be empty\");\n    tasks.forEach(\n        task -> {\n          Preconditions.checkNotNull(task, \"task object cannot be null\");\n          Preconditions.checkNotNull(task.getTaskId(), \"Task id cannot be null\");\n          Preconditions.checkNotNull(\n              task.getWorkflowInstanceId(), \"Workflow instance id cannot be null\");\n          Preconditions.checkNotNull(\n              task.getReferenceTaskName(), \"Task reference name cannot be null\");\n        });\n\n    Preconditions.checkArgument(\n        tasks.stream().map(Task::getWorkflowInstanceId).distinct().count() <= 1,\n        \"Tasks of multiple workflows cannot be created/updated simultaneously\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "validateTasks", "index": 1149, "label": 0}
{"input": "private Map<String, Object> regenerateSql(OverAllState state, String input, List<String> evidenceList,\n\t\t\tSchemaDTO schemaDTO, String exceptionOutputKey) throws Exception {\n\t\tString exceptionMessage = state.value(exceptionOutputKey)\n\t\t\t.map(String.class::cast)\n\t\t\t.orElseThrow(() -> new IllegalStateException(\"Exception message not found\"));\n\n\t\tString originalSql = state.value(SQL_GENERATE_OUTPUT)\n\t\t\t.map(String.class::cast)\n\t\t\t.orElseThrow(() -> new IllegalStateException(\"Original SQL not found\"));\n\n\t\tString newSql = baseNl2SqlService.generateSql(evidenceList, input, schemaDTO, originalSql, exceptionMessage);\n\t\tlogger.info(\"重新生成的SQL为：{}\", newSql);\n\n\t\treturn Map.of(SQL_GENERATE_OUTPUT, newSql, RESULT, newSql);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/SqlGenerateNode.java", "function_name": "regenerateSql", "index": 1150, "label": 0}
{"input": "@Override\n    public XlsReadWorkbookHolder xlsReadWorkbookHolder() {\n        return (XlsReadWorkbookHolder) readWorkbookHolder();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/xls/DefaultXlsReadContext.java", "function_name": "xlsReadWorkbookHolder", "index": 1151, "label": 0}
{"input": "public ImportClause(\n      StringConstant importStr, boolean isGlob, @Nullable Identifier alias, Span span) {\n    super(span, Arrays.asList(importStr, alias));\n    this.isGlob = isGlob;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ImportClause.java", "function_name": "ImportClause", "index": 1152, "label": 0}
{"input": "private void populateChatRoomDetails(ChatRoomDetailVO chatRoomDetailVo) {\n        \n        chatRoomDetailVo.setChatRoomTitle(contactRepository.getContactNickname(chatRoomDetailVo.getChatRoomName()));\n        \n        chatRoomDetailVo.setCreateBy(contactRepository.getContactNickname(chatRoomDetailVo.getReserved2()));\n        \n        chatRoomDetailVo.setHeadImgUrl(contactHeadImgUrlRepository.queryHeadImgUrlByUserName(chatRoomDetailVo.getChatRoomName()));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ChatRoomServiceImpl.java", "function_name": "populateChatRoomDetails", "index": 1153, "label": 0}
{"input": "@Test\n    public void t05() {\n        \n        \n        List<Map<Integer, String>> list = EasyExcel\n            .read(TestFileUtil.getPath() + \"compatibility/t05.xlsx\")\n            .sheet()\n            .doReadSync();\n        log.info(\"data:{}\", JSON.toJSONString(list));\n        Assertions.assertEquals(\"2023-01-01 00:00:00\", list.get(0).get(0));\n        Assertions.assertEquals(\"2023-01-01 00:00:00\", list.get(1).get(0));\n        Assertions.assertEquals(\"2023-01-01 00:00:00\", list.get(2).get(0));\n        Assertions.assertEquals(\"2023-01-01 00:00:01\", list.get(3).get(0));\n        Assertions.assertEquals(\"2023-01-01 00:00:01\", list.get(4).get(0));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48a8c2b36277eef512023b5f9fa6b2615833a274", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t05", "index": 1154, "label": 0}
{"input": "@Override\n    public boolean support(Integer type, Integer subType) {\n        return type == 50 && subType == 0;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/msg/impl/VoipMsgStrategy.java", "function_name": "support", "index": 1155, "label": 0}
{"input": "@Override\n    public void editToken(ChatUsageToken chatToken) {\n        if(chatToken.getId() == null){\n            baseMapper.insert(chatToken);\n        }else {\n            baseMapper.updateById(chatToken);\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules-api/ruoyi-chat-api/src/main/java/org/ruoyi/service/impl/ChatTokenServiceImpl.java", "function_name": "editToken", "index": 1156, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testFromStringToSelType() {\n    assertEquals(SelTypes.LONG, SelTypeUtil.fromStringToSelType(\"int\"));\n    SelTypeUtil.fromStringToSelType(\"List\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypeUtilTest.java", "function_name": "testFromStringToSelType", "index": 1157, "label": 0}
{"input": "private void setupCloseListener() {\n        shell.addListener(SWT.Close, event -> {\n            event.doit = false;\n            \n            shell.setVisible(false);\n            tabComponents.forEach(TabComponent::windowHide);\n            if (!notificationShown && trayItem != null) {\n                ToolTip tooltip = new ToolTip(shell, SWT.BALLOON);\n                tooltip.setText(tlUI(Lang.GUI_TRAY_MESSAGE_CAPTION));\n                tooltip.setMessage(tlUI(Lang.GUI_TRAY_MESSAGE_DESCRIPTION));\n                trayItem.setToolTip(tooltip);\n                tooltip.setVisible(true);\n                \n                notificationShown = true;\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtTrayManager.java", "function_name": "setupCloseListener", "index": 1158, "label": 0}
{"input": "private boolean signalNameSizeOverLimit(\n        SignalTrigger trigger, ConstraintValidatorContext context) {\n      if (trigger.getDefinitions().size() > Constants.MAX_SIGNAL_NAMES_IN_A_TRIGGER) {\n        context\n            .buildConstraintViolationWithTemplate(\n                String.format(\n                    \"[signal-trigger] the signal names within the signal triggers are more than the limit [%s]\",\n                    Constants.MAX_SIGNAL_NAMES_IN_A_TRIGGER))\n            .addConstraintViolation();\n        return true;\n      }\n      return false;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/SignalTriggerConstraint.java", "function_name": "signalNameSizeOverLimit", "index": 1159, "label": 0}
{"input": "@Test\n    public void excludeOrIncludeWrite() {\n        String fileName = TestFileUtil.getPath() + \"excludeOrIncludeWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        \n        Set<String> excludeColumnFieldNames = new HashSet<>();\n        excludeColumnFieldNames.add(\"date\");\n        \n        EasyExcel.write(fileName, DemoData.class).excludeColumnFieldNames(excludeColumnFieldNames).sheet(\"模板\")\n                .doWrite(data());\n        \n        fileName = TestFileUtil.getPath() + \"excludeOrIncludeWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        Set<String> includeColumnFieldNames = new HashSet<>();\n        includeColumnFieldNames.add(\"date\");\n        \n        EasyExcel.write(fileName, DemoData.class).includeColumnFieldNames(includeColumnFieldNames).sheet(\"模板\")\n                .doWrite(data());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "excludeOrIncludeWrite", "index": 1160, "label": 0}
{"input": "@Test\n  public void testTryExecuteTriggerForUnmatched() throws Exception {\n    SignalTriggerMatch triggerMatch =\n        loadObject(\"fixtures/sample-signal-trigger-match.json\", SignalTriggerMatch.class);\n    String def = loadJson(\"fixtures/signal_triggers/signal_trigger_simple.json\");\n    when(triggerDao.getTriggerForUpdate(any(), any(), any()))\n        .thenReturn(\n            new SignalTriggerDto(\n                \"sample-workflow-1\",\n                \"test-uuid-1\",\n                def,\n                new String[] {\"signal_a\", \"signal_b\"},\n                new Long[] {0L, 2L}));\n    when(paramDao.matchSignal(any(), any(), anyLong())).thenReturn(null);\n    assertEquals(0, brokerDao.tryExecuteTrigger(triggerMatch));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testTryExecuteTriggerForUnmatched", "index": 1161, "label": 0}
{"input": "@Test\n  public void testWorkflowWithStepSignalDependencies() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID5);\n    WorkflowDefinition definition =\n        workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    assertNotNull(wfd.getInternalId());\n    assertEquals(wfd, definition);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testWorkflowWithStepSignalDependencies", "index": 1162, "label": 0}
{"input": "private void refreshUI() {\n        \n        binding.invalidateAll();\n        binding.executePendingBindings();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "6eb68b665dc5d98f8f182269bac3f698e056c54f", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "refreshUI", "index": 1163, "label": 0}
{"input": "@Test\n  public void testParseLiteralWorkflowParameter() {\n    StringParameter bar = StringParameter.builder().name(\"bar\").value(\"test $foo-1\").build();\n    paramEvaluator.parseWorkflowParameter(\n        Collections.singletonMap(\"foo\", LongParameter.builder().expression(\"1+2+3;\").build()),\n        bar,\n        \"test-workflow\");\n    assertEquals(\"test 6-1\", bar.getEvaluatedResult());\n\n    bar = StringParameter.builder().name(\"bar\").value(\"test $foo-1\").build();\n    paramEvaluator.parseWorkflowParameter(\n        Collections.singletonMap(\n            \"foo\", LongParameter.builder().evaluatedResult(6L).evaluatedTime(123L).build()),\n        bar,\n        \"test-workflow\");\n    assertEquals(\"test 6-1\", bar.getEvaluatedResult());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseLiteralWorkflowParameter", "index": 1164, "label": 0}
{"input": "@Test(expected = MalformedURLException.class)\n  public void testNoAccessURL() throws Exception {\n    new URL(\"http://foo.bar\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessURL", "index": 1165, "label": 0}
{"input": "private SearchResult<String> getSearchIds(\n      String stmtTemplate, String name, String status, int start, int count, List<String> options) {\n    final String sorted = options == null || options.isEmpty() ? \"DESC\" : options.get(0);\n    final String getIdsStatement = String.format(stmtTemplate, sorted, count, start);\n    final int version =\n        options == null || options.size() < 2 ? -1 : Integer.parseInt(options.get(1));\n    List<String> ids =\n        withReadOnlyQuery(\n            getIdsStatement,\n            statement -> {\n              statement.setString(1, name);\n              statement.setString(2, status);\n            },\n            rs -> idsFromResult(rs, version));\n    return new SearchResult<>(ids.size(), ids);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "getSearchIds", "index": 1166, "label": 0}
{"input": "@Test\n  public void testTerminateThenRunInstanceJobEventPublisher() throws Exception {\n    sqsMaestroJobEventPublisher.publish(terminateThenRunInstanceJobEvent, 2000);\n\n    String terminateThenRunInstanceJobEventStr =\n        MAPPER.writeValueAsString(terminateThenRunInstanceJobEvent);\n    verify(amazonSqs, times(1))\n        .sendMessage(\n            new SendMessageRequest()\n                .withQueueUrl(TERMINATE_THEN_RUN_INSTANCE_JOB_QUEUE_URL)\n                .withMessageBody(terminateThenRunInstanceJobEventStr)\n                .withDelaySeconds(2));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_JOB_EVENT_PUBLISH_SUCCESS_METRIC,\n                SqsMaestroJobEventPublisher.class,\n                AwsMetricConstants.JOB_TYPE_TAG,\n                TerminateThenRunInstanceJobEvent.class.getSimpleName())\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisherTest.java", "function_name": "testTerminateThenRunInstanceJobEventPublisher", "index": 1167, "label": 0}
{"input": "public Builder clearRoomCapacity() {\n                bitField0_ = (bitField0_ & ~0x00000010);\n                roomCapacity_ = 0;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "clearRoomCapacity", "index": 1168, "label": 0}
{"input": "@Test\n  public void testCalculateEarliestExecutionDateEmptyExecutions() {\n    var triggers =\n        generateTriggers(\"0 30 2 7 12 ? 2021\", \"2022-01-01T00:00:00-00:00\", US_PACIFIC, null);\n    Optional<Date> earliestDate =\n        executionPlanner.calculateEarliestExecutionDate(triggers, \"test-workflow\");\n    assertFalse(earliestDate.isPresent());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculateEarliestExecutionDateEmptyExecutions", "index": 1169, "label": 0}
{"input": "@Override\n    public void serialize(User value, JsonGenerator gen, SerializerProvider serializers)\n        throws IOException {\n      if (value.getExtraInfo() == null) {\n        gen.writeString(value.name);\n      } else {\n        gen.writeStartObject();\n        gen.writeStringField(NAME_KEY, value.name);\n        for (String key : value.getExtraInfo().keySet()) {\n          gen.writeObjectField(key, value.getExtraInfo().get(key));\n        }\n        gen.writeEndObject();\n      }\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/User.java", "function_name": "serialize", "index": 1170, "label": 0}
{"input": "private static FrameDescriptor.Builder newFrameDescriptorBuilder(FrameDescriptor descriptor) {\n      var builder = FrameDescriptor.newBuilder();\n      for (var i = 0; i < descriptor.getNumberOfSlots(); i++) {\n        builder.addSlot(\n            descriptor.getSlotKind(i), descriptor.getSlotName(i), descriptor.getSlotInfo(i));\n      }\n      return builder;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "newFrameDescriptorBuilder", "index": 1171, "label": 0}
{"input": "@Override\n  public boolean setUnackTimeout(String queueName, String messageId, long unackTimeout) {\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBQueueDAO.java", "function_name": "setUnackTimeout", "index": 1172, "label": 0}
{"input": "public String getRemark() {\n                Object ref = remark_;\n                if (!(ref instanceof String)) {\n                    com.google.protobuf.ByteString bs =\n                            (com.google.protobuf.ByteString) ref;\n                    String s = bs.toStringUtf8();\n                    remark_ = s;\n                    return s;\n                } else {\n                    return (String) ref;\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getRemark", "index": 1173, "label": 0}
{"input": "@Test\n  public void testFailureOnExecute() {\n    when(runtimeExecutor.checkJobStatus(\"job_deduplication_key\"))\n        .thenThrow(new RuntimeException(\"test-error\"));\n    var ka = new KubernetesArtifact();\n    ka.setJobId(\"job_deduplication_key\");\n    runtimeSummary.getArtifacts().put(Artifact.Type.KUBERNETES.key(), ka);\n\n    StepRuntime.Result res = stepRuntime.execute(new WorkflowSummary(), null, runtimeSummary);\n    assertEquals(StepRuntime.State.CONTINUE, res.getState());\n    assertTrue(res.getArtifacts().isEmpty());\n    assertTrue(res.getTimeline().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntimeTest.java", "function_name": "testFailureOnExecute", "index": 1174, "label": 0}
{"input": "@Test\n  public void testTranslateIncludingAllSteps() {\n    Map<String, StepTransition> dag = translator.translate(instance);\n    Assert.assertEquals(\n        new HashSet<>(Arrays.asList(\"job1\", \"job.2\", \"job3\", \"job4\")), dag.keySet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/DagTranslatorTest.java", "function_name": "testTranslateIncludingAllSteps", "index": 1175, "label": 0}
{"input": "@Test\n  public void testFormat() {\n    SelType res =\n        SelString.of(null)\n            .call(\n                \"format\",\n                new SelType[] {SelString.of(\"%s-%s\"), SelString.of(\"ab\"), SelString.of(\"c\")});\n    assertEquals(\"STRING: ab-c\", res.type() + \": \" + res.toString());\n    res =\n        SelString.of(null)\n            .call(\n                \"format\",\n                new SelType[] {SelString.of(\"%s-%d\"), SelString.of(\"ab\"), SelLong.of(123)});\n    assertEquals(\"STRING: ab-123\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testFormat", "index": 1176, "label": 0}
{"input": "@Override\n  public void updateTask(Task task) {\n    withMetricLogError(\n        () -> {\n          int cnt =\n              withRetryableTransaction(\n                  conn -> {\n                    int updated;\n                    try (PreparedStatement statement =\n                        conn.prepareStatement(UPSERT_TASK_STATEMENT)) {\n                      addTask(statement, task);\n                      updated = statement.executeUpdate();\n                    }\n                    return updated;\n                  });\n          LOG.debug(\n              \"updated {} task {} in a workflow instance {}\",\n              cnt,\n              task.getTaskId(),\n              task.getWorkflowInstanceId());\n          return cnt;\n        },\n        \"updateTask\",\n        \"Failed updating a task with id {} in a workflow instance {}\",\n        task.getTaskId(),\n        task.getWorkflowInstanceId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "updateTask", "index": 1177, "label": 0}
{"input": "public Builder enableCitation(Boolean enableCitation) {\n\t\t\t\tthis.enableCitation = enableCitation;\n\t\t\t\treturn this;\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "enableCitation", "index": 1178, "label": 0}
{"input": "@Test\n  public void isValidId() {\n    Set<ConstraintViolation<TestId>> violations = validator.validate(new TestId(\"_foo_.-bar1_.-_\"));\n    assertEquals(0, violations.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/MaestroReferenceIdConstraintTest.java", "function_name": "isValidId", "index": 1179, "label": 0}
{"input": "@Specialization(guards = \"function.getCallTarget() == cachedCallTarget\")\n  protected Object evalDirect(\n      VmFunction function,\n      Object arg1,\n      Object arg2,\n      Object arg3,\n      Object arg4,\n      Object arg5,\n      @SuppressWarnings(\"unused\") @Cached(\"function.getCallTarget()\")\n          RootCallTarget cachedCallTarget,\n      @Cached(\"create(cachedCallTarget)\") DirectCallNode callNode) {\n\n    return callNode.call(function.getThisValue(), function, arg1, arg2, arg3, arg4, arg5);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction5Node.java", "function_name": "evalDirect", "index": 1180, "label": 0}
{"input": "public static JSONObject forwardMiniApp(String appId, String toWxid, String xml, String coverImgUrl) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"xml\", xml);\r\n        param.put(\"coverImgUrl\", coverImgUrl);\r\n        return OkhttpUtil.postJSON(\"/message/forwardMiniApp\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "forwardMiniApp", "index": 1181, "label": 0}
{"input": "private TaskDef createMaestroTaskDef(AbstractStep step) {\n    TaskDef taskDef = new TaskDef();\n    taskDef.setName(step.getId());\n    taskDef.setConcurrentExecLimit(0); \n    taskDef.setTimeoutPolicy(TaskDef.TimeoutPolicy.RETRY);\n    taskDef.setTimeoutSeconds(0); \n    taskDef.setRetryLogic(TaskDef.RetryLogic.CUSTOM);\n    taskDef.setRetryCount(CONDUCTOR_RETRY_NUM); \n    taskDef.setRetryDelaySeconds(CONDUCTOR_RETRY_DELAY);\n    taskDef.setResponseTimeoutSeconds(CONDUCTOR_RESPONSE_TIMEOUT);\n    return taskDef;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/StepTranslator.java", "function_name": "createMaestroTaskDef", "index": 1182, "label": 0}
{"input": "public long getMaintenanceDelayInMillis() {\n    return getLongProperty(MAINTENANCE_DELAY_PROPERTY_NAME, MAINTENANCE_DELAY_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getMaintenanceDelayInMillis", "index": 1183, "label": 0}
{"input": "@Override\n        @SuppressWarnings({\"unused\"})\n        protected Object newInstance(\n                UnusedPrivateParameter unused) {\n            return new MessageBytesExtra();\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "newInstance", "index": 1184, "label": 0}
{"input": "@Override\n    public Object executeAndSet(VirtualFrame frame, Object value) {\n      var prevOwner = VmUtils.getOwner(frame);\n      var prevReceiver = VmUtils.getReceiver(frame);\n      setOwner(frame, VmUtils.getOwner(typeAlias.getEnclosingFrame()));\n      setReceiver(frame, VmUtils.getReceiver(typeAlias.getEnclosingFrame()));\n\n      try {\n        return aliasedTypeNode.executeAndSet(frame, value);\n      } finally {\n        setOwner(frame, prevOwner);\n        setReceiver(frame, prevReceiver);\n      }\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "executeAndSet", "index": 1185, "label": 0}
{"input": "@Builder\n  private MaestroTracingContext(\n      long traceIdHigh, long traceIdLow, long spanId, long parentSpanId, boolean sampled) {\n    this.traceIdHigh = traceIdHigh;\n    this.traceIdLow = traceIdLow;\n    this.spanId = spanId;\n    this.parentSpanId = parentSpanId;\n    this.sampled = sampled;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tracing/MaestroTracingContext.java", "function_name": "MaestroTracingContext", "index": 1186, "label": 0}
{"input": "private void expandColumnDocumentsWithForeignKeys(Map<String, Document> weightedColumns, Set<String> foreignKeySet,\n\t\t\tString vectorType) {\n\n\t\tSet<String> existingColumnNames = weightedColumns.keySet();\n\t\tSet<String> missingColumns = new HashSet<>();\n\t\tfor (String key : foreignKeySet) {\n\t\t\tif (!existingColumnNames.contains(key)) {\n\t\t\t\tmissingColumns.add(key);\n\t\t\t}\n\t\t}\n\n\t\tfor (String columnName : missingColumns) {\n\t\t\taddColumnsDocument(weightedColumns, columnName, vectorType);\n\t\t}\n\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseSchemaService.java", "function_name": "expandColumnDocumentsWithForeignKeys", "index": 1187, "label": 0}
{"input": "public static JSONObject getToken() {\r\n        return OkhttpUtil.postJSON(\"/tools/getTokenId\", new JSONObject());\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "getToken", "index": 1188, "label": 0}
{"input": "public CockroachDBMetadataDAO(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "CockroachDBMetadataDAO", "index": 1189, "label": 0}
{"input": "@GetMapping(\"download\")\n    public void download(HttpServletResponse response) throws IOException {\n        \n        response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        response.setCharacterEncoding(\"utf-8\");\n        \n        String fileName = URLEncoder.encode(\"测试\", \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n        \n        EasyExcel.write(response.getOutputStream(), DownloadData.class).sheet(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"0).doWrite(data());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/web/WebTest.java", "function_name": "download", "index": 1190, "label": 0}
{"input": "@Test\n  public void testCallJavaMethodWithOneArg() throws Throwable {\n    m1 =\n        MethodHandles.lookup()\n            .findStatic(\n                MockType.class, \"staticOneArg\", MethodType.methodType(int.class, int.class));\n    m2 =\n        MethodHandles.lookup()\n            .findVirtual(\n                MockType.class, \"oneArg\", MethodType.methodType(String.class, String.class));\n    SelType res =\n        SelTypeUtil.callJavaMethod(null, new SelType[] {SelLong.of(123)}, m1, \"staticOneArg\");\n    assertEquals(SelTypes.LONG, res.type());\n    assertEquals(123L, ((SelLong) res).longVal());\n    res =\n        SelTypeUtil.callJavaMethod(\n            new MockType(), new SelType[] {SelString.of(\"foo\")}, m2, \"oneArg\");\n    assertEquals(SelTypes.STRING, res.type());\n    assertEquals(\"foo\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypeUtilTest.java", "function_name": "testCallJavaMethodWithOneArg", "index": 1191, "label": 0}
{"input": "public FlowGroup getGroup(long groupId) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_GROUP_QUERY,\n                stmt -> stmt.setLong(1, groupId),\n                result -> {\n                  if (result.next()) {\n                    int idx = 0;\n                    return new FlowGroup(\n                        groupId,\n                        result.getLong(++idx),\n                        result.getString(++idx),\n                        result.getTimestamp(++idx).getTime());\n                  }\n                  return null;\n                }),\n        \"getGroup\",\n        \"Failed to get the group for the groupId [{}]\",\n        groupId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/dao/MaestroFlowDao.java", "function_name": "getGroup", "index": 1192, "label": 0}
{"input": "public void markCreated(MaestroTracingManager tracingManager) {\n    runtimeState.setCreateTime(updateStatus(StepInstance.Status.CREATED, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markCreated", "index": 1193, "label": 0}
{"input": "private String timeoutForDateTimeDeadline(DateTime dateTime, String durationStr) {\n    long duration =\n        PeriodFormat.wordBased().parsePeriod(durationStr).toStandardDuration().getMillis();\n    long deadline = dateTime.plus(duration).getMillis();\n    long remainingMillis = Math.max(deadline - DateTime.now().getMillis(), 0);\n    return remainingMillis + \" milliseconds\";\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "timeoutForDateTimeDeadline", "index": 1194, "label": 0}
{"input": "protected void AdjustBuffSize() {\n    if (available == bufsize) {\n      if (tokenBegin > 2048) {\n        bufpos = 0;\n        available = tokenBegin;\n      } else ExpandBuff(false);\n    } else if (available > tokenBegin) available = bufsize;\n    else if ((tokenBegin - available) < 2048) ExpandBuff(true);\n    else available = tokenBegin;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "AdjustBuffSize", "index": 1195, "label": 0}
{"input": "@Disabled\n    @Test\n    public void noModelRead2() throws Exception {\n        Field field = ZipSecureFile.class.getDeclaredField(\"MAX_ENTRY_SIZE\");\n        field.setAccessible(true);\n        field.set(null, Long.MAX_VALUE);\n\n        long start = System.currentTimeMillis();\n        EasyExcel.read(\n                new File(\"/Users/zhuangjiaju/IdeaProjects/easyexcel/target/test-classes/large1617887262709.xlsx\"),\n                new NoModelLargeDataListener())\n            .sheet().doRead();\n        LOGGER.info(\"Large data total time spent:{}\", System.currentTimeMillis() - start);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/large/TempLargeDataTest.java", "function_name": "noModelRead2", "index": 1196, "label": 0}
{"input": "@Bean(name = \"crdbDataSource\")\n  public DataSource crdbDataSource(ConductorProperties props) {\n    LOG.info(\"Creating crdbDataSource within Spring boot...\");\n    return new CockroachDBDataSourceProvider(props).get();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "crdbDataSource", "index": 1197, "label": 0}
{"input": "private boolean jj_3R_69() {\n    if (jj_scan_token(PLUS)) return true;\n    if (jj_3R_59()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_69", "index": 1198, "label": 0}
{"input": "public StepActionBuilder runParams(Map<String, ParamDefinition> input) {\n      this.runParams = ParamDefinition.preprocessDefinitionParams(input);\n      return this;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/StepAction.java", "function_name": "runParams", "index": 1199, "label": 0}
{"input": "@JsonCreator\n  public StepDependencies(\n      @JsonProperty(\"type\") StepDependencyType type,\n      @JsonProperty(\"statuses\") List<StepDependencyStatus> statuses,\n      @JsonProperty(\"info\") TimelineLogEvent info) {\n    Checks.notNull(type, \"StepDependencyType is mandatory\");\n    Checks.checkTrue(statuses != null, \"status cannot be null\");\n    this.type = type;\n    this.statuses = statuses;\n    this.info = info;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepDependencies.java", "function_name": "StepDependencies", "index": 1200, "label": 0}
{"input": "private static int findFrameSlot(VirtualFrame frame, Object identifier1, Object identifier2) {\n    var descriptor = frame.getFrameDescriptor();\n    \n    \n    for (var i = descriptor.getNumberOfSlots() - 1; i >= 0; i--) {\n      var slotName = descriptor.getSlotName(i);\n      if (slotName == identifier1 || slotName == identifier2) {\n        return i;\n      }\n    }\n    return -1;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/primary/ResolveVariableNode.java", "function_name": "findFrameSlot", "index": 1201, "label": 0}
{"input": "@Test\n  public void testMatchSignal() throws Exception {\n    Long matched =\n        paramDao.matchSignal(\n            conn,\n            new SignalMatchDto(\n                \"signal_a\",\n                List.of(\n                    new SignalMatchDto.ParamMatchDto(\n                        \"foo\", SignalParamValue.of(125), SignalOperator.LESS_THAN))),\n            11);\n    assertEquals(12, matched.intValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalParamDaoTest.java", "function_name": "testMatchSignal", "index": 1202, "label": 0}
{"input": "@Test\n  public void testDeriveGroupId() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setWorkflowId(\"sample-dag-test-1\");\n    instance.setWorkflowInstanceId(12);\n    instance.setWorkflowRunId(2);\n    Assert.assertEquals(0, IdHelper.deriveGroupId(instance));\n\n    instance.setMaxGroupNum(10);\n    Assert.assertEquals(5, IdHelper.deriveGroupId(instance));\n\n    Assert.assertEquals(0, IdHelper.deriveGroupId(\"test-key\", 3));\n    Assert.assertTrue(\"negative-test\".hashCode() < 0);\n    Assert.assertEquals(2, IdHelper.deriveGroupId(\"negative-test\", 3));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/IdHelperTest.java", "function_name": "testDeriveGroupId", "index": 1203, "label": 0}
{"input": "public java.util.List<Member> getMembersList() {\n                if (membersBuilder_ == null) {\n                    return java.util.Collections.unmodifiableList(members_);\n                } else {\n                    return membersBuilder_.getMessageList();\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getMembersList", "index": 1204, "label": 0}
{"input": "@Test\n  public void testUpsertTriggerSubscription() {\n    CronTimeTrigger cronTrigger = new CronTimeTrigger();\n    cronTrigger.setCron(\"0 0 0 0 0 0\");\n    Workflow wf1 =\n        Workflow.builder().id(\"wf1\").timeTriggers(Collections.singletonList(cronTrigger)).build();\n    triggerClient.upsertTriggerSubscription(\n        wf1, TriggerUuids.builder().timeTriggerUuid(\"test-uuid\").build(), null);\n    var requestCaptor = ArgumentCaptor.forClass(TimeTriggerExecution.class);\n    Mockito.verify(triggerProducer, Mockito.times(1)).push(requestCaptor.capture(), anyInt());\n    TimeTriggerExecution actual = requestCaptor.getValue();\n    Assert.assertEquals(\"wf1\", actual.getWorkflowId());\n    Assert.assertEquals(\"test-uuid\", actual.getWorkflowTriggerUuid());\n    Assert.assertEquals(1, actual.getTimeTriggersWithWatermarks().size());\n    Assert.assertEquals(\n        cronTrigger, actual.getTimeTriggersWithWatermarks().getFirst().getTimeTrigger());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerSubscriptionClientTest.java", "function_name": "testUpsertTriggerSubscription", "index": 1205, "label": 0}
{"input": "@AppCompatDelegate.NightMode\n        public int getNightMode() {\n            return nightMode;\n        }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "getNightMode", "index": 1206, "label": 0}
{"input": "default Map<String, ParamDefinition> injectRuntimeParams(\n      WorkflowSummary workflowSummary, Step step) {\n    return Collections.emptyMap();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/StepRuntime.java", "function_name": "injectRuntimeParams", "index": 1207, "label": 0}
{"input": "private String getCurrentFunction() {\n        CodeViewerService service = tool.getService(CodeViewerService.class);\n        if (service == null) return \"Code viewer service not available\";\n        \n        ProgramLocation location = service.getCurrentLocation();\n        if (location == null) return \"No current location\";\n        \n        Program program = getCurrentProgram();\n        if (program == null) return \"No program loaded\";\n        \n        Function func = program.getFunctionManager().getFunctionContaining(location.getAddress());\n        if (func == null) return \"No function at current location: \" + location.getAddress();\n        \n        return String.format(\"Function: %s at %s\\nSignature: %s\",\n            func.getName(),\n            func.getEntryPoint(),\n            func.getSignature());\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "getCurrentFunction", "index": 1208, "label": 0}
{"input": "@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        AnalysisCell that = (AnalysisCell) o;\n        if (columnIndex != that.columnIndex) {\n            return false;\n        }\n        return rowIndex == that.rowIndex;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/metadata/fill/AnalysisCell.java", "function_name": "equals", "index": 1209, "label": 0}
{"input": "@Test\n  public void testGetPaginationRangeEdgeCases() {\n    \n    PaginationHelper.PaginationRange range =\n        PaginationHelper.getPaginationRange(null, PaginationDirection.NEXT, 5, 5, 10);\n    assertEquals(5, range.start());\n    assertEquals(5, range.end());\n\n    \n    range = PaginationHelper.getPaginationRange(null, PaginationDirection.NEXT, 1, 3, 10);\n    assertEquals(1, range.start());\n    assertEquals(3, range.end());\n\n    \n    range = PaginationHelper.getPaginationRange(\"1\", PaginationDirection.NEXT, 1, 10, 5);\n    assertEquals(0, range.start());\n    assertEquals(0, range.end());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9f6ef6ad453085e3c04ab55405fc7b256c5a9c9b", "file_path": "maestro-server/src/test/java/com/netflix/maestro/server/utils/PaginationHelperTest.java", "function_name": "testGetPaginationRangeEdgeCases", "index": 1210, "label": 0}
{"input": "public static void saveUser(WeChatVO weChatDTO) {\n        FileUtil.writeString(JSONUtil.toJsonStr(weChatDTO), getUserPath(), \"UTF-8\");\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/UserUtil.java", "function_name": "saveUser", "index": 1211, "label": 0}
{"input": "@Test\n  public void testBypassStepDependenciesRoundTripSerde() throws Exception {\n    StepAction expected =\n        loadObject(\n            \"fixtures/db/sample-step-action-bypass-step-dependencies.json\", StepAction.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    StepAction actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), StepAction.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(expected, actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/db/StepActionTest.java", "function_name": "testBypassStepDependenciesRoundTripSerde", "index": 1212, "label": 0}
{"input": "@Test\n  public void testCalculatePlannedExecutionsYearlyNoExecution() {\n    var triggers =\n        generateTriggers(\"0 30 2 7 12 ? 2021\", \"2022-01-01T00:00:00-00:00\", US_PACIFIC, null);\n\n    Date endDate = parseDate(triggers, Duration.ofDays(30));\n    List<PlannedTimeTriggerExecution> planned =\n        executionPlanner.calculatePlannedExecutions(triggers, endDate, \"test-workflow\");\n    assertTrue(planned.isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculatePlannedExecutionsYearlyNoExecution", "index": 1213, "label": 0}
{"input": "private SelParams(Map<String, Object> m, Extension ext) {\n    this.val = m;\n    this.extension = ext;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelParams.java", "function_name": "SelParams", "index": 1214, "label": 0}
{"input": "private Optional<Map<String, ParamDefinition>> getUserRestartParam(RunRequest runRequest) {\n    RestartConfig restartConfig = runRequest.getRestartConfig();\n    if (restartConfig != null\n        && restartConfig.getRestartPath() != null\n        && restartConfig.getRestartPath().size() == 1) {\n      return Optional.ofNullable(restartConfig.getRestartParams());\n    }\n    return Optional.empty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getUserRestartParam", "index": 1215, "label": 0}
{"input": "@Bean\n  public MaestroWorkflowDao maestroWorkflowDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props,\n      MaestroJobEventPublisher maestroJobEventPublisher,\n      TriggerSubscriptionClient triggerSubscriptionClient) {\n    LOG.info(\"Creating maestroWorkflowDao within Spring boot...\");\n    return new MaestroWorkflowDao(\n        crdbDataSource, objectMapper, props, maestroJobEventPublisher, triggerSubscriptionClient);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroWorkflowDao", "index": 1216, "label": 0}
{"input": "private String getExecutablePath(int pid) {\n        \n        Kernel32 kernel32 = Kernel32.INSTANCE;\n\n        \n        \n        WinNT.HANDLE process = kernel32.OpenProcess(WinNT.PROCESS_QUERY_INFORMATION | WinNT.PROCESS_VM_READ, false, pid);\n\n        try {\n            \n            if (process != null) {\n                \n                char[] path = new char[WinDef.MAX_PATH];\n                \n                int size = path.length;\n                \n                boolean success = Kernel32.INSTANCE.QueryFullProcessImageName(process, 0, path, new IntByReference(size));\n                \n                if (success) {\n                    return new String(path).trim();\n                }\n            }\n        } finally {\n            \n            if (process != null) {\n                kernel32.CloseHandle(process);\n            }\n        }\n        \n        return null;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "getExecutablePath", "index": 1217, "label": 0}
{"input": "protected int parseUnicodeEscapeSequence(StringUnicodeEscape escape) {\n    var text = escape.getEscape();\n    var lastIndex = text.length() - 1;\n    var startIndex = text.indexOf('{', 2);\n    assert startIndex != -1; \n    try {\n      return Integer.parseInt(text.substring(startIndex + 1, lastIndex), 16);\n    } catch (NumberFormatException e) {\n      throw exceptionBuilder()\n          .evalError(\"invalidUnicodeEscapeSequence\", text, text.substring(0, startIndex))\n          .withSourceSection(createSourceSection(escape))\n          .build();\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AbstractAstBuilder.java", "function_name": "parseUnicodeEscapeSequence", "index": 1218, "label": 0}
{"input": "public char[] GetSuffix(int len) {\n    char[] ret = new char[len];\n\n    if ((bufpos + 1) >= len) System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);\n    else {\n      System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);\n      System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);\n    }\n\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "GetSuffix", "index": 1219, "label": 0}
{"input": "ObjectData(int parentLength) {\n    \n    members = EconomicMaps.create();\n    generatorFrames = EconomicMaps.create();\n    length = parentLength;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/ObjectData.java", "function_name": "ObjectData", "index": 1220, "label": 0}
{"input": "private void setupUI() {\n        binding.floatingActionButton.setOnClickListener(v -> localeHandler.showLanguageSelectionDialog(() ->\n                localeHandler.restartActivity(this)));\n        binding.infoIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this, InfoActivity.class)));\n        binding.bugIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this, LogActivity.class)));\n        binding.settingIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this, SettingsActivity.class)));\n        binding.switchButtonFrame.setOnClickListener(v -> binding.switchButton.toggle());\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "setupUI", "index": 1221, "label": 0}
{"input": "protected void FillBuff() throws java.io.IOException {\n    int i;\n    if (maxNextCharInd == 4096) maxNextCharInd = nextCharInd = 0;\n\n    try {\n      if ((i = inputStream.read(nextCharBuf, maxNextCharInd, 4096 - maxNextCharInd)) == -1) {\n        inputStream.close();\n        throw new java.io.IOException();\n      } else maxNextCharInd += i;\n      return;\n    } catch (java.io.IOException e) {\n      if (bufpos != 0) {\n        --bufpos;\n        backup(0);\n      } else {\n        bufline[bufpos] = line;\n        bufcolumn[bufpos] = column;\n      }\n      throw e;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "FillBuff", "index": 1222, "label": 0}
{"input": "public void setLocale() {\n        String language = fileManager.getString(SELECTED_LANGUAGE, DEFAULT_LANGUAGE);\n        setLanguage(language);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "2f3b84a45acbf027ab617f69cb6bdd3f251bcd76", "file_path": "app/src/main/java/org/bepass/oblivion/LocaleHandler.java", "function_name": "setLocale", "index": 1223, "label": 0}
{"input": "private ExcelReader buildExcelReader() {\n        if (this.readWorkbook.getAutoTrim() != null) {\n            this.csvFormatBuilder.setTrim(this.readWorkbook.getAutoTrim());\n        }\n        if (this.readWorkbook.getIgnoreEmptyRow() != null) {\n            this.csvFormatBuilder.setIgnoreEmptyLines(this.readWorkbook.getIgnoreEmptyRow());\n        }\n        this.readWorkbook.setCsvFormat(this.csvFormatBuilder.build());\n        return new ExcelReader(this.readWorkbook);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/CsvReaderBuilder.java", "function_name": "buildExcelReader", "index": 1224, "label": 0}
{"input": "@Bean\n  public ForeachStepRuntime foreach(\n      @Qualifier(STEP_RUNTIME_QUALIFIER) Map<StepType, StepRuntime> stepRuntimeMap,\n      WorkflowActionHandler actionHandler,\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      MaestroStepInstanceActionDao actionDao,\n      InstanceStepConcurrencyHandler instanceStepConcurrencyHandler,\n      StepRuntimeProperties stepRuntimeProperties) {\n    LOG.info(\n        \"Creating Foreach step with properties {} within Spring boot...\",\n        stepRuntimeProperties.getForeach());\n    ForeachStepRuntime step =\n        new ForeachStepRuntime(\n            actionHandler,\n            instanceDao,\n            stepInstanceDao,\n            actionDao,\n            instanceStepConcurrencyHandler,\n            stepRuntimeProperties.getForeach());\n    stepRuntimeMap.put(StepType.FOREACH, step);\n    return step;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "foreach", "index": 1225, "label": 0}
{"input": "@Test\n  public void testOtherParamType() {\n    Parameter param = LongParameter.builder().name(\"test\").value(1L).build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertTrue(paramNames.isEmpty());\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(1L, result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testOtherParamType", "index": 1226, "label": 0}
{"input": "public static String base64(byte[] input) {\n    return Base64.getEncoder().encodeToString(input);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/util/ByteArrayUtils.java", "function_name": "base64", "index": 1227, "label": 0}
{"input": "public WorkflowInstanceActionResponse unblockLatest(\n      String workflowId, long workflowInstanceId, User caller) {\n    return unblock(workflowId, workflowInstanceId, Constants.LATEST_ONE, caller);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandler.java", "function_name": "unblockLatest", "index": 1228, "label": 0}
{"input": "private boolean jj_3R_38() {\n    if (jj_3R_40()) return true;\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_42()) jj_scanpos = xsp;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_38", "index": 1229, "label": 0}
{"input": "int addSignalParams(Connection conn, List<SignalParamDto> signalParams, long seqId)\n      throws SQLException {\n    if (signalParams == null || signalParams.isEmpty()) {\n      return 0;\n    }\n    String sql =\n        String.format(\n            ADD_SIGNAL_PARAM_QUERY_TEMPLATE,\n            String.join(\",\", Collections.nCopies(signalParams.size(), VALUE_PLACE_HOLDER)));\n    try (PreparedStatement stmt = conn.prepareStatement(sql)) {\n      int idx = 0;\n      for (SignalParamDto signalParam : signalParams) {\n        stmt.setString(++idx, signalParam.signalName());\n        stmt.setString(++idx, signalParam.paramName());\n        stmt.setString(++idx, signalParam.encodedValue());\n        stmt.setLong(++idx, seqId);\n      }\n      return stmt.executeUpdate();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalParamDao.java", "function_name": "addSignalParams", "index": 1230, "label": 0}
{"input": "public RestBasedFlowOperation(\n      RestTemplate restTemplate,\n      MaestroFlowDao flowDao,\n      FlowExecutor executor,\n      FlowEngineProperties properties) {\n    this.restTemplate = restTemplate;\n    this.flowDao = flowDao;\n    this.flowExecutor = executor;\n    this.localAddress = properties.getEngineAddress();\n    this.expirationDuration = TimeUnit.SECONDS.toMillis(properties.getExpirationInSecs());\n    this.addressCache = new ConcurrentHashMap<>();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/RestBasedFlowOperation.java", "function_name": "RestBasedFlowOperation", "index": 1231, "label": 0}
{"input": "public static int getPrecedence(Operator op) {\n    return switch (op) {\n      case NULL_COALESCE -> 0;\n      case PIPE -> 1;\n      case OR -> 2;\n      case AND -> 3;\n      case EQ_EQ, NOT_EQ -> 4;\n      case IS, AS -> 5;\n      case LT, LTE, GT, GTE -> 6;\n      case PLUS, MINUS -> 7;\n      case MULT, DIV, INT_DIV, MOD -> 8;\n      case POW -> 9;\n      case DOT, QDOT -> 10;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/OperatorResolver.java", "function_name": "getPrecedence", "index": 1232, "label": 0}
{"input": "@Test\n    public void simpleWrite2() {\n        \n        String fileName = TestFileUtil.getPath() + \"t22\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        EasyExcel.write(fileName, WriteData.class).sheet(\"模板\").registerWriteHandler(new WriteHandler())\n                .doWrite(data1());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/Write.java", "function_name": "simpleWrite2", "index": 1233, "label": 0}
{"input": "public boolean existFlowWithSameKeys(long groupId, String flowId) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_FLOW_WITH_SAME_KEYS_QUERY,\n                stmt -> {\n                  stmt.setLong(1, groupId);\n                  stmt.setString(2, flowId);\n                },\n                ResultSet::next),\n        \"existFlowWithSameKeys\",\n        \"Failed to check the existence of the flow instance [{}][{}]\",\n        groupId,\n        flowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/dao/MaestroFlowDao.java", "function_name": "existFlowWithSameKeys", "index": 1234, "label": 0}
{"input": "private void saveAction(StepInstance stepInstance, StepAction stepAction) {\n    String payload = toJson(stepAction);\n    int ret =\n        withMetricLogError(\n            () -> withRetryableUpdate(INSERT_ACTION_QUERY, stmt -> stmt.setString(1, payload)),\n            \"saveAction\",\n            \"Failed to save the action for step {}\",\n            stepInstance.getIdentity());\n    if (ret != SUCCESS_WRITE_SIZE) {\n      throw new MaestroResourceConflictException(\n          \"There is an ongoing action for this step %s and please try it again later.\",\n          stepInstance.getIdentity());\n    }\n    publishUserActionEvent(StepInstanceWakeUpEvent.create(stepInstance, stepAction));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDao.java", "function_name": "saveAction", "index": 1235, "label": 0}
{"input": "public WorkflowDefinition getWorkflowDefinition(String workflowId, String version) {\n    if (IdHelper.isInlineWorkflowId(workflowId)) {\n      return getInlineWorkflowDefinitionInternal(workflowId);\n    } else {\n      return getMaestroWorkflowInternal(workflowId, version).toDefinition();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getWorkflowDefinition", "index": 1236, "label": 0}
{"input": "private SendMessageRequest convertToFifoIfApplicable(\n      MaestroJobEvent event, SendMessageRequest sendMessageRequest) {\n    Optional<String> uniqueKeyOpt =\n        uniqueKeyForFifoDeduplication(event, sendMessageRequest.getMessageBody());\n    if (uniqueKeyOpt.isEmpty()) {\n      return sendMessageRequest;\n    }\n    String uniqueKey = uniqueKeyOpt.get();\n    \n    return sendMessageRequest.withMessageGroupId(uniqueKey).withMessageDeduplicationId(uniqueKey);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/publisher/SqsAbstractEventPublisher.java", "function_name": "convertToFifoIfApplicable", "index": 1237, "label": 0}
{"input": "@GetMapping(\"download\")\n    public ResponseEntity<Resource> download(@RequestParam String path) throws IOException {\n        Path filePath = Paths.get(path);\n        Resource resource = new UrlResource(filePath.toUri());\n\n        String encodedFilename = URLEncoder.encode(resource.getFilename(), StandardCharsets.UTF_8).replace(\"+\", \"%20\");\n        String contentDisposition = \"attachment; filename*=UTF-8''\" + encodedFilename;\n\n        return ResponseEntity.ok()\n                .contentType(MediaType.parseMediaType(\"application/vnd.ms-excel\"))\n                .header(\"Content-Disposition\", contentDisposition)\n                .body(resource);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/ExportController.java", "function_name": "download", "index": 1238, "label": 0}
{"input": "@Test\n  public void testIsLong() {\n    Assert.assertTrue(SignalParamValue.of(123).isLong());\n    Assert.assertFalse(SignalParamValue.of(\"foo\").isLong());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalParamValueTest.java", "function_name": "testIsLong", "index": 1239, "label": 0}
{"input": "private void lexExponent() {\n    if (lookahead == '+' || lookahead == '-') {\n      nextChar();\n    }\n    if (lookahead == '_') {\n      throw lexError(\"invalidSeparatorPosition\");\n    }\n    if (lookahead < 48 || lookahead > 57) {\n      throw unexpectedChar(lookahead, \"number\");\n    }\n    while ((lookahead >= 48 && lookahead <= 57) || lookahead == '_') {\n      nextChar();\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexExponent", "index": 1240, "label": 0}
{"input": "private boolean addOrUpdateEventExecution(\n      String stmt, EventExecution eventExecution, String methodName) {\n    try {\n      int cnt =\n          withRetryableUpdate(\n              stmt,\n              statement -> {\n                statement.setString(1, eventExecution.getEvent());\n                statement.setString(2, eventExecution.getName());\n                statement.setString(3, eventExecution.getMessageId());\n                statement.setString(4, eventExecution.getId());\n                statement.setString(5, toJson(eventExecution));\n              });\n      return cnt == 1;\n    } catch (Exception e) {\n      LOG.warn(\n          \"Failed {} for event {} with handler name {} due to {}\",\n          methodName,\n          eventExecution.getEvent(),\n          eventExecution.getName(),\n          e.getMessage());\n      \n      return false;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "addOrUpdateEventExecution", "index": 1241, "label": 0}
{"input": "public String rewrite(String query) throws Exception {\n\t\tList<String> evidences = extractEvidences(query);\n\t\tSchemaDTO schemaDTO = select(query, evidences);\n\t\tString prompt = PromptHelper.buildRewritePrompt(query, schemaDTO, evidences);\n\t\tString responseContent = aiService.call(prompt);\n\t\tString[] splits = responseContent.split(\"\\\\n\");\n\t\tfor (String line : splits) {\n\t\t\tif (line.startsWith(\"需求类型：\")) {\n\t\t\t\tString content = line.substring(5).trim();\n\t\t\t\tif (\"《自由闲聊》\".equals(content)) {\n\t\t\t\t\treturn SMALL_TALK_REJECT;\n\t\t\t\t}\n\t\t\t\telse if (\"《需要澄清》\".equals(content)) {\n\t\t\t\t\treturn INTENT_UNCLEAR;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (line.startsWith(\"需求内容：\")) {\n\t\t\t\tquery = line.substring(5);\n\t\t\t}\n\t\t}\n\t\treturn query;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseNl2SqlService.java", "function_name": "rewrite", "index": 1242, "label": 0}
{"input": "static boolean isRealTask(Task task) {\n    return task.getSeq() >= 0\n        && StepHelper.retrieveStepStatus(task.getOutputData()) != StepInstance.Status.NOT_CREATED;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "isRealTask", "index": 1243, "label": 0}
{"input": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void removeKnowledge(String id) {\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"kid\",id);\n        List<KnowledgeInfoVo> knowledgeInfoList = baseMapper.selectVoByMap(map);\n        check(knowledgeInfoList);\n        \n        knowledgeInfoList.forEach(knowledgeInfoVo -> {\n            vectorStoreService.removeByKid(String.valueOf(knowledgeInfoVo.getId()));\n        });\n        \n        fragmentMapper.deleteByMap(map);\n        attachMapper.deleteByMap(map);\n        \n        baseMapper.deleteByMap(map);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "1a645c6e10e5cd830c70fad47b816f774613e821", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "removeKnowledge", "index": 1244, "label": 0}
{"input": "@Override\n    public ProgressDialog createProgressDialog(String title, String description, String buttonText, Runnable buttonEvent, boolean allowCancel) {\n        return new ConsoleProgressDialog(title, description, buttonText, buttonEvent, allowCancel);\n        \n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "createProgressDialog", "index": 1245, "label": 0}
{"input": "@Override\n  public Optional<WorkflowDef> getWorkflowDef(String name, int version) {\n    return Optional.ofNullable(\n        withMetricLogError(\n            () ->\n                getPayload(\n                    GET_WORKFLOW_DEFINITION_STATEMENT,\n                    statement -> {\n                      statement.setString(1, name);\n                      statement.setInt(2, version);\n                    },\n                    WorkflowDef.class),\n            \"getWorkflowDef\",\n            \"Failed getting a workflow definition with name {} and version {}\",\n            name,\n            version));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "getWorkflowDef", "index": 1246, "label": 0}
{"input": "@Test\n  public void testNonExistingParam() {\n    Parameter param = StringParameter.builder().name(\"test\").value(\"test $notExisting\").build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Collections.singletonList(\"notExisting\")), paramNames);\n\n    AssertHelper.assertThrows(\n        \"Throw an error if there is a non existing parameter\",\n        MaestroInternalError.class,\n        \"Cannot interpolate [test $notExisting] as param [notExisting] is not found\",\n        () -> LiteralEvaluator.eval(param, params));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testNonExistingParam", "index": 1247, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"triggers.time-trigger.type\", havingValue = \"sqs\")\n  public SqsTimeTriggerExecutionListener sqsTimeTriggerExecutionListener(\n      TimeTriggerExecutionProcessor timeTriggerExecutionProcessor, ObjectMapper mapper) {\n    LOG.info(\"Creating sqsTimeTriggerExecutionListener within Spring boot...\");\n    return new SqsTimeTriggerExecutionListener(timeTriggerExecutionProcessor, mapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsTimeTriggerExecutionListener", "index": 1248, "label": 0}
{"input": "private void jjCheckNAddTwoStates(int state1, int state2) {\n    jjCheckNAdd(state1);\n    jjCheckNAdd(state2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjCheckNAddTwoStates", "index": 1249, "label": 0}
{"input": "@Override\n  public String createWorkflow(Workflow workflow) {\n    LOG.debug(\n        \"Creating a workflow instance with the name {} and id: {}\",\n        workflow.getWorkflowName(),\n        workflow.getWorkflowId());\n    return createOrUpdateWorkflow(workflow, CREATE_WORKFLOW_INSTANCE_STATEMENT, \"createWorkflow\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "createWorkflow", "index": 1250, "label": 0}
{"input": "private Stage getWorkflowDeletionStage(String workflowId, long internalId) {\n    Stage res =\n        withRetryableQuery(\n            GET_WORKFLOW_DELETION_STAGE_QUERY,\n            stmt -> {\n              stmt.setString(1, workflowId);\n              stmt.setLong(2, internalId);\n            },\n            result -> {\n              if (result.next()) {\n                return Stage.create(result.getString(1));\n              }\n              return null;\n            });\n    if (res == null) {\n      throw new MaestroNotFoundException(\n          \"Cannot get the deletion status for workflow [%s] with internalId [%s]. Please make sure it is deleted.\",\n          workflowId, internalId);\n    }\n    return res;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDeletionDao.java", "function_name": "getWorkflowDeletionStage", "index": 1251, "label": 0}
{"input": "private boolean tryUpdateAncestorStatus(Connection conn, WorkflowInstance instance)\n      throws SQLException {\n    try (PreparedStatement wfiStmt =\n        conn.prepareStatement(UPDATE_WORKFLOW_INSTANCE_FAILED_STATUS)) {\n      int idx = 0;\n      wfiStmt.setString(++idx, instance.getWorkflowId());\n      wfiStmt.setLong(++idx, instance.getWorkflowInstanceId());\n      wfiStmt.setLong(++idx, instance.getWorkflowRunId());\n      return wfiStmt.executeUpdate() == SUCCESS_WRITE_SIZE;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "tryUpdateAncestorStatus", "index": 1252, "label": 0}
{"input": "@Override\n    public Set<String> getContactWithMp() {\n        return getBaseMapper().getContactWithMp();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "e8526ae8bec20c379510005ef2b6ea9bfa796382", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ContactRepositoryImpl.java", "function_name": "getContactWithMp", "index": 1253, "label": 0}
{"input": "@Test\n  public void testDeriveInstanceStepConcurrency() throws Exception {\n    WorkflowSummary summary =\n        loadObject(\"fixtures/parameters/sample-wf-summary-params.json\", WorkflowSummary.class);\n\n    \n    assertEquals(Defaults.DEFAULT_STEP_CONCURRENCY, summary.deriveInstanceStepConcurrency());\n\n    \n    summary.getRunProperties().setStepConcurrency(10L);\n    assertEquals(10L, summary.deriveInstanceStepConcurrency());\n\n    \n    summary.getRunProperties().setStepConcurrency(null);\n    summary.setInstanceStepConcurrency(20L);\n    assertEquals(20L, summary.deriveInstanceStepConcurrency());\n\n    \n    summary.getRunProperties().setStepConcurrency(10L);\n    summary.setInstanceStepConcurrency(20L);\n    assertEquals(10L, summary.deriveInstanceStepConcurrency());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/WorkflowSummaryTest.java", "function_name": "testDeriveInstanceStepConcurrency", "index": 1254, "label": 0}
{"input": "@Override\n    public void beforeRowCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Integer rowIndex,\n            Integer relativeRowIndex, Boolean isHead) {\n        if (isHead) {\n            Assertions.assertEquals(0L, beforeCellCreate);\n            Assertions.assertEquals(0L, afterCellCreate);\n            Assertions.assertEquals(0L, afterCellDataConverted);\n            Assertions.assertEquals(0L, afterCellDispose);\n            Assertions.assertEquals(0L, beforeRowCreate);\n            Assertions.assertEquals(0L, afterRowCreate);\n            Assertions.assertEquals(0L, afterRowDispose);\n            Assertions.assertEquals(1L, beforeSheetCreate);\n            Assertions.assertEquals(1L, afterSheetCreate);\n            Assertions.assertEquals(1L, beforeWorkbookCreate);\n            Assertions.assertEquals(1L, afterWorkbookCreate);\n            Assertions.assertEquals(0L, afterWorkbookDispose);\n            beforeRowCreate++;\n        }\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/handler/WriteHandler.java", "function_name": "beforeRowCreate", "index": 1255, "label": 0}
{"input": "@Override\n    protected int getLayoutResourceId() {\n        return R.layout.activity_split_tunnel;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/SplitTunnelActivity.java", "function_name": "getLayoutResourceId", "index": 1256, "label": 0}
{"input": "@Test\n  public void testFlowTimedOut() {\n    when(flow.getStatus()).thenReturn(Flow.Status.TIMED_OUT);\n    statusListener.onFlowTerminated(flow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowTerminated\",\n                \"status\",\n                \"TIMED_OUT\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testFlowTimedOut", "index": 1257, "label": 0}
{"input": "private void checkNotInsideForGenerator(ParserRuleContext ctx, String errorMessageKey) {\n    if (!symbolTable.getCurrentScope().isForGeneratorScope()) {\n      return;\n    }\n    var forExprCtx = ctx.getParent();\n    while (forExprCtx.getClass() != ForGeneratorContext.class) {\n      forExprCtx = forExprCtx.getParent();\n    }\n    throw exceptionBuilder()\n        .evalError(errorMessageKey)\n        .withSourceSection(createSourceSection(((ForGeneratorContext) forExprCtx).FOR()))\n        .build();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "checkNotInsideForGenerator", "index": 1258, "label": 0}
{"input": "@Test\n  public void testIsUserDefinedRealTask() {\n    when(task.getTaskType()).thenReturn(Constants.MAESTRO_TASK_NAME);\n    when(task.getSeq()).thenReturn(1);\n    Assert.assertTrue(TaskHelper.isUserDefinedRealTask(task));\n    when(task.getTaskType()).thenReturn(\"TEST_TASK\");\n    Assert.assertFalse(TaskHelper.isUserDefinedRealTask(task));\n    when(task.getTaskType()).thenReturn(Constants.MAESTRO_TASK_NAME);\n    when(task.getSeq()).thenReturn(-1);\n    Assert.assertFalse(TaskHelper.isUserDefinedRealTask(task));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/TaskHelperTest.java", "function_name": "testIsUserDefinedRealTask", "index": 1259, "label": 0}
{"input": "public void insertGroup(FlowGroup group) {\n    int res =\n        withMetricLogError(\n            () ->\n                withRetryableUpdate(\n                    ADD_FLOW_GROUP_QUERY,\n                    stmt -> {\n                      int idx = 0;\n                      stmt.setLong(++idx, group.groupId());\n                      stmt.setLong(++idx, group.generation());\n                      stmt.setString(++idx, group.address());\n                    }),\n            \"insertGroup\",\n            \"Failed to insert the flow group for group id [{}]\",\n            group.groupId());\n    if (res != 1) {\n      throw new MaestroRetryableError(\n          \"insertGroup for group [%s] is failed (res=[%s]) and please retry\", group.groupId(), res);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/dao/MaestroFlowDao.java", "function_name": "insertGroup", "index": 1260, "label": 0}
{"input": "@Override\n      public void write(final byte[] b) {\n        int len = b == null ? 0 : b.length;\n        count += len;\n      }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/JsonSizeConstraint.java", "function_name": "write", "index": 1261, "label": 0}
{"input": "@Test\n  public void testValidateFailStepMerge() {\n    when(paramsManager.generateMergedWorkflowParams(any(), any()))\n        .thenReturn(new LinkedHashMap<>());\n    when(paramsManager.generateMergedStepParams(any(), any(), any(), any()))\n        .thenThrow(new MaestroValidationException(\"Error validating\"));\n    AssertHelper.assertThrows(\n        \"validation error\",\n        MaestroDryRunException.class,\n        \"Exception during dry run validation\",\n        () -> dryRunValidator.validate(definition.getWorkflow(), user));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/validations/DryRunValidatorTest.java", "function_name": "testValidateFailStepMerge", "index": 1262, "label": 0}
{"input": "@Override\n    public Iterator<Row> rowIterator() {\n        return (Iterator<Row>) (Iterator<? extends Row>) rowCache.iterator();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvSheet.java", "function_name": "rowIterator", "index": 1263, "label": 0}
{"input": "private Long runSignalMatchQuery(Connection conn, String sql, List<String> queryParams)\n      throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(sql)) {\n      int idx = 0;\n      for (String queryParam : queryParams) {\n        stmt.setString(++idx, queryParam);\n      }\n      try (ResultSet rs = stmt.executeQuery()) {\n        if (rs.next()) {\n          return rs.getLong(1);\n        }\n        return null;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalParamDao.java", "function_name": "runSignalMatchQuery", "index": 1264, "label": 0}
{"input": "@Override\n    public void onException(Exception exception, AnalysisContext context) {\n        log.error(\"解析失败，但是继续解析下一行:{}\", exception.getMessage());\n        if (exception instanceof ExcelDataConvertException) {\n            ExcelDataConvertException excelDataConvertException = (ExcelDataConvertException) exception;\n            log.error(\"第{}行，第{}列解析异常，数据为:{}\", excelDataConvertException.getRowIndex(),\n                    excelDataConvertException.getColumnIndex(), excelDataConvertException.getCellData());\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/DemoHeadDataListener.java", "function_name": "onException", "index": 1265, "label": 0}
{"input": "private Long getCallbackDelayForStepType(\n      Map<String, Long> fixedCallbackDelayConfigForStepInstanceStatus,\n      StepRuntimeSummary runtimeSummary,\n      StepInstance.Status stepInstanceStatus) {\n    String stepType = runtimeSummary.getType().getType().toLowerCase(Locale.US);\n    Long callbackDelay = fixedCallbackDelayConfigForStepInstanceStatus.get(stepType);\n    if (callbackDelay == null) {\n      Checks.checkTrue(\n          fixedCallbackDelayConfigForStepInstanceStatus.containsKey(DEFAULT_STEP_TYPE_KEY),\n          \"StepRuntime callback delay config for \"\n              + stepInstanceStatus\n              + \" status must contain default step type setting\");\n      return fixedCallbackDelayConfigForStepInstanceStatus.get(DEFAULT_STEP_TYPE_KEY);\n    } else {\n      return callbackDelay;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeFixedCallbackDelayPolicy.java", "function_name": "getCallbackDelayForStepType", "index": 1266, "label": 0}
{"input": "public static byte[] readFileToByteArray(final File file) throws IOException {\n        InputStream in = openInputStream(file);\n        try {\n            final long fileLength = file.length();\n            return fileLength > 0 ? IoUtils.toByteArray(in, (int) fileLength) : IoUtils.toByteArray(in);\n        } finally {\n            in.close();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/FileUtils.java", "function_name": "readFileToByteArray", "index": 1267, "label": 0}
{"input": "@Test\n  public void testMergeWithParamMismatchDefinedBySEL() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING','expression': 'stringValue'}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'tomerge': {'type': 'LONG','expression': 'Long data = 123; return data;'}}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n    assertEquals(1, allParams.size());\n    assertEquals(\n        \"Long data = 123; return data;\",\n        allParams.get(\"tomerge\").asStringParamDef().getExpression());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeWithParamMismatchDefinedBySEL", "index": 1268, "label": 0}
{"input": "@Test\n  public void testExistsStepTypeParams() {\n    assertTrue(defaultParamManager.getDefaultParamsForType(StepType.SUBWORKFLOW).isPresent());\n    assertTrue(defaultParamManager.getDefaultParamsForType(StepType.FOREACH).isPresent());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testExistsStepTypeParams", "index": 1269, "label": 0}
{"input": "@Override\n    public void onPBHFullyStarted(PeerBanHelperServer server) {\n        CommonUtil.getScheduler().scheduleWithFixedDelay(this::updateGuiStuff, 0, 1, TimeUnit.SECONDS);\n        swtMainWindow.getWebUITabComponent().navigate(Main.getServer().getWebUiUrl());\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "onPBHFullyStarted", "index": 1270, "label": 0}
{"input": "private void addOutputData(String externalJobId) {\n    OutputData param =\n        new OutputData(\n            JOB_TYPE,\n            externalJobId,\n            WORKFLOW_ID,\n            System.currentTimeMillis(),\n            System.currentTimeMillis(),\n            params,\n            new HashMap<>());\n    dao.insertOrUpdateOutputData(param);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/OutputDataDaoTest.java", "function_name": "addOutputData", "index": 1271, "label": 0}
{"input": "@Test\n  public void testBuildFromEvent() {\n    RunResponse res = RunResponse.from(stepInstance, TimelineLogEvent.info(\"bar\"));\n    Assert.assertEquals(RunResponse.Status.STEP_ATTEMPT_CREATED, res.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunResponseTest.java", "function_name": "testBuildFromEvent", "index": 1272, "label": 0}
{"input": "public void setConnectionTimeout(final int connectionTimeout) {\n\t\tthis.connectionTimeout = connectionTimeout;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "83348b9b46e13d47875290ad5cc41b2c8ea400c4", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/node/code/entity/CodeExecutionConfig.java", "function_name": "setConnectionTimeout", "index": 1273, "label": 0}
{"input": "private MapParameter getAndValidateNotebookParams(StepRuntimeSummary stepSummary) {\n    Checks.notNull(stepSummary.getParams(), \"params must be present\");\n    Checks.notNull(\n        stepSummary.getParams().get(NotebookConstants.NOTEBOOK_KEY),\n        \"notebook params must be present\");\n    return stepSummary.getParams().get(NotebookConstants.NOTEBOOK_KEY).asMapParam();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilder.java", "function_name": "getAndValidateNotebookParams", "index": 1274, "label": 0}
{"input": "TaskActor(Task task, Flow flow, FlowActor parent, ExecutionContext context) {\n    super(context, parent);\n    this.task = task;\n    this.flow = flow;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/TaskActor.java", "function_name": "TaskActor", "index": 1275, "label": 0}
{"input": "@Test\n  public void testSignalReadyFalse() throws Exception {\n    StepRuntimeSummary runtimeSummary =\n        loadObject(\n            \"fixtures/execution/step-runtime-summary-with-step-dependencies.json\",\n            StepRuntimeSummary.class);\n    when(brokerDao.matchSignalForStepDependency(any())).thenReturn(null);\n    assertFalse(handler.signalsReady(new WorkflowSummary(), runtimeSummary));\n    verify(brokerDao, times(1)).matchSignalForStepDependency(any());\n    assertEquals(\n        StepDependencyMatchStatus.PENDING,\n        runtimeSummary.getSignalDependencies().getDependencies().getLast().getStatus());\n    assertTrue(runtimeSummary.isSynced());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/handler/MaestroSignalHandlerTest.java", "function_name": "testSignalReadyFalse", "index": 1276, "label": 0}
{"input": "@Test\n  public void testGetDag() throws Exception {\n    Workflow wf =\n        loadObject(\n                \"fixtures/workflows/definition/sample-active-wf-with-props.json\",\n                WorkflowDefinition.class)\n            .getWorkflow();\n    assertEquals(\n        threeItemMap(\n            \"job.1\", wf.getSteps().get(0).getTransition(),\n            \"job.2\", wf.getSteps().get(1).getTransition(),\n            \"job.3\", wf.getSteps().get(2).getTransition()),\n        wf.getDag());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowTest.java", "function_name": "testGetDag", "index": 1277, "label": 0}
{"input": "@Bean\n  public SignalTriggerMatchProcessor signalTriggerMatchProcessor(\n      MaestroSignalBrokerDao brokerDao, MaestroMetrics metrics) {\n    LOG.info(\"Creating signalTriggerMatchProcessor within Spring boot...\");\n    return new SignalTriggerMatchProcessor(brokerDao, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "signalTriggerMatchProcessor", "index": 1278, "label": 0}
{"input": "@Test\n  public void testLaunchWorkflowInstancesMaestroNotFoundException() {\n    when(instance1.getStatus()).thenThrow(new MaestroNotFoundException(\"test\"));\n    when(instance2.getStatus()).thenThrow(new MaestroNotFoundException(\"test\"));\n    when(instance3.getStatus()).thenThrow(new MaestroNotFoundException(\"test\"));\n    jobProcessor.process(() -> jobEvent);\n    verify(instance1, times(0)).getWorkflowUuid();\n    verify(instance2, times(0)).getWorkflowUuid();\n    verify(instance3, times(0)).getWorkflowUuid();\n    verify(instanceDao, times(0)).existWorkflowWithSameUuid(any());\n    verify(workflowRunner, times(0)).start(any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/RunWorkflowInstancesJobProcessorTest.java", "function_name": "testLaunchWorkflowInstancesMaestroNotFoundException", "index": 1279, "label": 0}
{"input": "public CellExtra(CellExtraTypeEnum type, String text, Integer firstRowIndex, Integer lastRowIndex,\n            Integer firstColumnIndex, Integer lastColumnIndex) {\n        super();\n        setRowIndex(firstRowIndex);\n        setColumnIndex(firstColumnIndex);\n        this.type = type;\n        this.text = text;\n        this.firstRowIndex = firstRowIndex;\n        this.firstColumnIndex = firstColumnIndex;\n        this.lastRowIndex = lastRowIndex;\n        this.lastColumnIndex = lastColumnIndex;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/CellExtra.java", "function_name": "CellExtra", "index": 1280, "label": 0}
{"input": "@Test\n  public void testDaoErrorOnFlowFinalized() {\n    when(flow.getStatus()).thenReturn(Flow.Status.TERMINATED);\n    when(instanceDao.getWorkflowInstanceStatus(eq(\"test-workflow-id\"), anyLong(), anyLong()))\n        .thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    when(instanceDao.updateWorkflowInstance(any(), any(), any(), any(), anyLong()))\n        .thenReturn(Optional.of(Details.create(\"test errors\")));\n    AssertHelper.assertThrows(\n        \"instance dao failure and will retry\",\n        MaestroRetryableError.class,\n        \"Failed to update workflow instance\",\n        () -> statusListener.onFlowFinalized(flow));\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowFinalized\",\n                \"status\",\n                \"TERMINATED\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testDaoErrorOnFlowFinalized", "index": 1281, "label": 0}
{"input": "@Test\n    public void exceptionRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.xlsx\";\n        \n        EasyExcel.read(fileName, ExceptionDemoData.class, new DemoExceptionListener()).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "d696a25ef6e5aa3d84fdc5ff3b823e9bb1fdd746", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "exceptionRead", "index": 1282, "label": 0}
{"input": "@Test\n  public void testPushIfNotExists() {\n    String queueName = \"test-queue\";\n    String id = \"abcd-1234-defg-5678\";\n    assertTrue(queueDao.pushIfNotExists(queueName, id, 123));\n    assertEquals(1, internalQueue.size());\n    assertTrue(internalQueue.containsKey(queueName));\n    assertEquals(1, internalQueue.get(queueName).size());\n    assertEquals(id, internalQueue.get(queueName).peek());\n\n    assertFalse(queueDao.pushIfNotExists(queueName, id, 123));\n    assertEquals(1, internalQueue.size());\n    assertTrue(internalQueue.containsKey(queueName));\n    assertEquals(1, internalQueue.get(queueName).size());\n    assertEquals(id, internalQueue.get(queueName).peek());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "465feefeb15bf57091641f75d9eed7875aefe5d7", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/InMemoryQueueDaoTest.java", "function_name": "testPushIfNotExists", "index": 1283, "label": 0}
{"input": "@Test\n  public void testCreateAndUpsertParams() {\n    addOutputData(params, null);\n\n    Optional<OutputData> outputDataOpt = dao.getOutputDataForExternalJob(EXT_JOB_ID, JOB_TYPE);\n    assertTrue(outputDataOpt.isPresent());\n    OutputData paramResult = outputDataOpt.get();\n\n    verifyExpectedDTOs(paramResult);\n\n    assertFalse(dao.getOutputDataForExternalJob(\"invalid\", JOB_TYPE).isPresent());\n\n    \n    dao.insertOrUpdateOutputData(paramResult);\n\n    OutputData paramResult2 = dao.getOutputDataForExternalJob(EXT_JOB_ID, JOB_TYPE).get();\n    assertEquals(paramResult.getCreateTime(), paramResult2.getCreateTime());\n    assertNotEquals(paramResult.getModifyTime(), paramResult2.getModifyTime());\n    assertEquals(paramResult.getParams(), paramResult2.getParams());\n    assertNull(paramResult2.getArtifacts());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/OutputDataDaoTest.java", "function_name": "testCreateAndUpsertParams", "index": 1284, "label": 0}
{"input": "@Test\n    public void xlsTest2() throws IOException {\n        try (ExcelReader reader = EasyExcel.read(\n                Files.newInputStream(Paths.get(\"src/test/resources/repeat/repeat.xls\")), LockData.class,\n                new RepeatListener()).headRowNumber(0).build()) {\n            ReadSheet r2 = EasyExcel.readSheet(1).build();\n            reader.read(r2);\n            reader.finish();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "179dca17c46b409b27904d552e011f733fcea33e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "xlsTest2", "index": 1285, "label": 0}
{"input": "public AmendsExpr(Expr expr, ObjectBody body, Span span) {\n      super(span, List.of(expr, body));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "AmendsExpr", "index": 1286, "label": 0}
{"input": "@Test\n  public void testExtractProperties() throws Exception {\n    PropertiesSnapshot ps =\n        loadObject(\n            \"fixtures/workflows/definition/sample-properties.json\", PropertiesSnapshot.class);\n    Properties extracted = ps.extractProperties();\n    assertEquals(ps.getOwner(), extracted.getOwner());\n    assertEquals(ps.getAccessControl(), extracted.getAccessControl());\n    assertEquals(ps.getRunStrategy(), extracted.getRunStrategy());\n    assertEquals(ps.getStepConcurrency(), extracted.getStepConcurrency());\n    assertEquals(ps.getAlerting(), extracted.getAlerting());\n    assertEquals(ps.getAlertingDisabled(), extracted.getAlertingDisabled());\n    assertEquals(ps.getSignalTriggerDisabled(), extracted.getSignalTriggerDisabled());\n    assertEquals(ps.getTimeTriggerDisabled(), extracted.getTimeTriggerDisabled());\n    assertEquals(ps.getDescription(), extracted.getDescription());\n    assertEquals(ps.getTags(), extracted.getTags());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/PropertiesSnapshotTest.java", "function_name": "testExtractProperties", "index": 1287, "label": 0}
{"input": "private boolean jj_3R_41() {\n    if (jj_scan_token(LBRACKET)) return true;\n    if (jj_3R_21()) return true;\n    if (jj_scan_token(RBRACKET)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_41", "index": 1288, "label": 0}
{"input": "@Bean\n  public LocalValidatorFactoryBean localValidatorFactoryBean() {\n    LOG.info(\"Creating localValidatorFactoryBean within Spring boot...\");\n    LocalValidatorFactoryBean bean = new LocalValidatorFactoryBean();\n    bean.setProviderClass(ApacheValidationProvider.class);\n    return bean;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8ecc871beedad01177f509dbe0ff0014131ed764", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "localValidatorFactoryBean", "index": 1289, "label": 0}
{"input": "private List<Pointer> patternScanModule(WinNT.HANDLE process, byte[] pattern) {\n        \n        List<Pointer> foundPointers = new ArrayList<>();\n\n        \n        Psapi.MODULEINFO moduleInfo = moduleFromName(process);\n\n        \n        if (moduleInfo == null) {\n            return foundPointers;\n        }\n\n        \n        long baseAddress = Pointer.nativeValue(moduleInfo.lpBaseOfDll);\n        long maxAddress = Pointer.nativeValue(moduleInfo.lpBaseOfDll) + moduleInfo.SizeOfImage;\n        long pageAddress = baseAddress;\n\n        \n        while (pageAddress < maxAddress) {\n            \n            Pair<Long, List<Pointer>> pair = scanPatternPage(process, pageAddress, pattern);\n            pageAddress = pair.getLeft();\n\n            \n            if (pair.getRight() != null) {\n                foundPointers.addAll(pair.getRight());\n            }\n        }\n        \n        return foundPointers;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "aa9e59e82a10caab66c0d90f586f8c00f5aa95e7", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "patternScanModule", "index": 1290, "label": 0}
{"input": "public String nl2sql(String query) throws Exception {\n\t\tList<String> evidences = extractEvidences(query);\n\t\tSchemaDTO schemaDTO = select(query, evidences);\n\t\treturn generateSql(evidences, query, schemaDTO);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseNl2SqlService.java", "function_name": "nl2sql", "index": 1291, "label": 0}
{"input": "public Properties extractProperties() {\n    Properties properties = new Properties();\n    properties.setOwner(owner);\n    properties.setAccessControl(accessControl);\n    properties.setRunStrategy(runStrategy);\n    properties.setStepConcurrency(stepConcurrency);\n    properties.setAlerting(alerting);\n    properties.setAlertingDisabled(alertingDisabled);\n    properties.setSignalTriggerDisabled(signalTriggerDisabled);\n    properties.setTimeTriggerDisabled(timeTriggerDisabled);\n    properties.setDescription(description);\n    properties.setTags(tags);\n    return properties;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/PropertiesSnapshot.java", "function_name": "extractProperties", "index": 1292, "label": 0}
{"input": "public MaestroValidationException(Throwable t, String template, Object... args) {\n    super(Code.BAD_REQUEST, String.format(template, args), t);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroValidationException.java", "function_name": "MaestroValidationException", "index": 1293, "label": 0}
{"input": "private static int[] findMatches(byte[] inputBytes, byte[] patternBytes) {\n        \n        int[] matches = new int[0];\n\n        \n        for (int i = 0; i <= inputBytes.length - patternBytes.length; i++) {\n            \n            boolean match = true;\n\n            \n            for (int j = 0; j < patternBytes.length; j++) {\n                if (inputBytes[i + j] != patternBytes[j]) {\n                    \n                    match = false;\n                    break;\n                }\n            }\n            \n            if (match) {\n                int[] newMatches = new int[matches.length + 1];\n                System.arraycopy(matches, 0, newMatches, 0, matches.length);\n                newMatches[matches.length] = i;\n                matches = newMatches;\n            }\n        }\n        \n        return matches;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a5843049851937558b49b705ecd004e1a1c6cb3", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "findMatches", "index": 1294, "label": 0}
{"input": "@Test\n  public void testComputePathsWithSingleStep() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(),\n                Collections.singletonList(\"job.6\"),\n                Collections.singletonList(\"job.6\")));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(1, paths.size());\n    Assert.assertEquals(Collections.singletonList(\"job.6\"), paths.get(0));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithSingleStep", "index": 1295, "label": 0}
{"input": "@Override\n            public int getRoomCapacity() {\n                return roomCapacity_;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getRoomCapacity", "index": 1296, "label": 0}
{"input": "@Test\n  public void testSupportedCallSubstrings() {\n    SelType res = SelString.of(\"a b c\").call(\"substring\", new SelType[] {SelLong.of(3)});\n    assertEquals(SelTypes.STRING, res.type());\n    assertEquals(\" c\", ((SelString) res).getInternalVal());\n\n    res = SelString.of(\"a b c\").call(\"substring\", new SelType[] {SelLong.of(1), SelLong.of(3)});\n    assertEquals(SelTypes.STRING, res.type());\n    assertEquals(\" b\", ((SelString) res).getInternalVal());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testSupportedCallSubstrings", "index": 1297, "label": 0}
{"input": "public Builder clearField7() {\n                bitField0_ = (bitField0_ & ~0x00000040);\n                field7_ = 0L;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "clearField7", "index": 1298, "label": 0}
{"input": "public static <T> GenericHeaderTypeDataListener<T> build(Class<T> excelHeaderClass) {\n        return new GenericHeaderTypeDataListener<>(excelHeaderClass);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "f68e28241181105d7551523b5334b68a27ef610e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/GenericHeaderTypeDataListener.java", "function_name": "build", "index": 1299, "label": 0}
{"input": "Object getFromSignal(String signalName, String paramName) {\n    try {\n      return executor\n          .submit(() -> fromSignal(signalName, paramName))\n          .get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS);\n    } catch (Exception e) {\n      throw new MaestroInternalError(\n          e,\n          \"getFromSignal throws an exception for signalName=[%s], paramName=[%s]\",\n          signalName,\n          paramName);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "getFromSignal", "index": 1300, "label": 0}
{"input": "@Test\n  public void testFinalCall() {\n    flow.getFlowDef().setFinalFlowStatusCallbackEnabled(false);\n    context.finalCall(flow);\n    verify(finalCallback, times(0)).onFlowCompleted(flow);\n    verify(finalCallback, times(0)).onFlowTerminated(flow);\n    verify(finalCallback, times(0)).onFlowFinalized(flow);\n\n    flow.getFlowDef().setFinalFlowStatusCallbackEnabled(true);\n    flow.setStatus(Flow.Status.COMPLETED);\n    context.finalCall(flow);\n    verify(finalCallback, times(1)).onFlowCompleted(flow);\n    verify(finalCallback, times(0)).onFlowTerminated(flow);\n    verify(finalCallback, times(1)).onFlowFinalized(flow);\n\n    Mockito.reset(finalCallback);\n    flow.setStatus(Flow.Status.FAILED);\n    context.finalCall(flow);\n    verify(finalCallback, times(0)).onFlowCompleted(flow);\n    verify(finalCallback, times(1)).onFlowTerminated(flow);\n    verify(finalCallback, times(1)).onFlowFinalized(flow);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testFinalCall", "index": 1301, "label": 0}
{"input": "@JsonIgnore\n  public boolean addAll(Collection<TimelineEvent> events) {\n    if (events == null || events.isEmpty()) {\n      return false;\n    }\n    boolean ret =\n        events.stream()\n            .map(\n                event -> {\n                  if (latestMatched(event)) {\n                    return false;\n                  }\n                  return timelineEvents.add(event);\n                })\n            .reduce(false, Boolean::logicalOr);\n    if (timelineEvents.size() > TIMELINE_SIZE_LIMIT) {\n      timelineEvents.subList(0, timelineEvents.size() - TIMELINE_SIZE_LIMIT).clear();\n    }\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/Timeline.java", "function_name": "addAll", "index": 1302, "label": 0}
{"input": "@Test\n  public void testPushSignalTriggerMatchWithError() {\n    when(amazonSqs.sendMessage(any())).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Should throw the error\",\n        RuntimeException.class,\n        \"java.lang.RuntimeException: test\",\n        () -> signalTriggerProducer.push(signalTriggerMatch));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_SIGNAL_PUBLISH_FAILURE_METRIC,\n                SqsSignalQueueProducer.class,\n                \"type\",\n                \"SignalTriggerMatch\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsSignalQueueProducerTest.java", "function_name": "testPushSignalTriggerMatchWithError", "index": 1303, "label": 0}
{"input": "@Test\n  public void testUnexpectedError() {\n    when(workflowDao.getRunStrategy(workflowId)).thenThrow(new IllegalArgumentException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Will retry unexpected error\",\n        MaestroRetryableError.class,\n        \"Failed to start a workflow instance and will retry to run it\",\n        () -> processor.process(() -> jobEvent));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StartWorkflowJobProcessorTest.java", "function_name": "testUnexpectedError", "index": 1304, "label": 0}
{"input": "default SignalOutputsDefinition asSignalOutputsDefinition() {\n    throw new MaestroInternalError(\n        \"StepOutputsDefinition is a [%s] type and cannot be used as SignalOutputsDefinition\",\n        getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/StepOutputsDefinition.java", "function_name": "asSignalOutputsDefinition", "index": 1305, "label": 0}
{"input": "private void createOrUpdateWorkflowDefinition(\n      String stmt, WorkflowDef workflowDef, String methodName) {\n    withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                stmt,\n                statement -> {\n                  statement.setString(1, workflowDef.getName());\n                  statement.setInt(2, workflowDef.getVersion());\n                  statement.setString(3, toJson(workflowDef));\n                }),\n        methodName,\n        \"Failed {} with workflow definition name {} and version {}\",\n        methodName,\n        workflowDef.getName(),\n        workflowDef.getVersion());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "createOrUpdateWorkflowDefinition", "index": 1306, "label": 0}
{"input": "@Test\n  public void testGetWorkflowInstanceRunByUuid() {\n    WorkflowInstance instanceRun =\n        instanceDao.getWorkflowInstanceRunByUuid(wfi.getWorkflowId(), wfi.getWorkflowUuid());\n    instanceRun.setModifyTime(null);\n    assertEquals(wfi, instanceRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetWorkflowInstanceRunByUuid", "index": 1307, "label": 0}
{"input": "@Override\n  @SuppressWarnings(\"deprecation\")\n  public void checkSystemClipboardAccess() {\n    if (accs.get() != null) {\n      super.checkSystemClipboardAccess();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkSystemClipboardAccess", "index": 1308, "label": 0}
{"input": "private void stopForegroundService() {\n        stopForeground(true);\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        if (notificationManager != null) {\n            notificationManager.cancel(1);\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                notificationManager.deleteNotificationChannel(\"oblivion\");\n            }\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "9e764c3cdf47f8726f4312638f875fe4ad14ab4e", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "stopForegroundService", "index": 1309, "label": 0}
{"input": "@Test\n    public void large(@TempDir Path tempDir) throws Exception {\n        String file = tempDir.resolve(System.currentTimeMillis() + \".xlsx\").toString();\n        SXSSFWorkbook workbook = new SXSSFWorkbook(new XSSFWorkbook(\n            new File(\n                \"src/test/resources/large/large07.xlsx\")));\n        SXSSFSheet sheet = workbook.createSheet(\"测试\");\n\n        SXSSFRow row = sheet.createRow(500000);\n        SXSSFCell cell = row.createCell(0);\n        cell.setCellValue(\"test\");\n\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        workbook.write(fileOutputStream);\n        fileOutputStream.flush();\n        workbook.close();\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "7b1fce1dc917f8b846bcda772bfd5586d3d079de", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/write/TempWriteTest.java", "function_name": "large", "index": 1310, "label": 0}
{"input": "@Override\n  public ParamDefinition copyAndUpdate(\n      Object updatedValue,\n      String expression,\n      ParamMode mode,\n      Map<String, Object> meta,\n      TagList tagList,\n      ParamValidator validator) {\n    return toBuilder()\n        .value((String) updatedValue)\n        .expression(expression)\n        .validator(validator)\n        .tags(tagList)\n        .mode(mode)\n        .meta(meta)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/StringParamDefinition.java", "function_name": "copyAndUpdate", "index": 1311, "label": 0}
{"input": "private List<Document> parseResults(InputStream content) throws IOException {\n\t\tJsonNode hits = mapper.readTree(content).path(\"hits\").path(\"hits\");\n\n\t\tList<Document> results = new ArrayList<>();\n\n\t\tfor (JsonNode hit : hits) {\n\t\t\tString id = hit.path(\"_id\").asText();\n\t\t\tString docText = hit.path(\"_source\").path(\"content\").asText();\n\n\t\t\tMap<String, Object> metadata = mapper.convertValue(hit.path(\"_source\"),\n\t\t\t\t\tmapper.getTypeFactory().constructMapType(Map.class, String.class, Object.class));\n\n\t\t\tresults.add(new Document(id, docText, metadata));\n\t\t}\n\n\t\treturn results;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "7533675a36b363cfb0ec6e6ad9adb75a2f6c29f6", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/rag/retriever/RrfHybridElasticsearchRetriever.java", "function_name": "parseResults", "index": 1312, "label": 0}
{"input": "public List<Flow> getFlowsFrom(FlowGroup group, long limit, String idCursor) {\n    try {\n      return flowDao.getFlows(group, limit, idCursor);\n    } catch (MaestroInternalError e) {\n      \n      return null; \n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "getFlowsFrom", "index": 1313, "label": 0}
{"input": "public SelParser(SelParserTokenManager tm) {\n    token_source = tm;\n    token = new Token();\n    token.next = jj_nt = token_source.getNextToken();\n    jj_gen = 0;\n    for (int i = 0; i < 45; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "SelParser", "index": 1314, "label": 0}
{"input": "@Test\n  public void testVisitedSomeDataNodeAndContinue() {\n    root.jjtAddChild(dataNode, 2);\n    root.jjtAddChild(continueNode, 1);\n    root.jjtAddChild(dataNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.CONTINUE, res);\n    assertArrayEquals(new int[] {0, 1, 0, 1, 0}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedSomeDataNodeAndContinue", "index": 1315, "label": 0}
{"input": "@Test\n  public void testDeleteFlow() {\n    context.deleteFlow(flow);\n    verify(flowDao, times(1)).deleteFlow(flow);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testDeleteFlow", "index": 1316, "label": 0}
{"input": "private UnresolvedTypeNode[] doVisitParameterTypes(List<Parameter> params) {\n    var typeNodes = new UnresolvedTypeNode[params.size()];\n    for (int i = 0; i < typeNodes.length; i++) {\n      if (params.get(i) instanceof TypedIdentifier typedIdentifier) {\n        typeNodes[i] = visitTypeAnnotation(typedIdentifier.getTypeAnnotation());\n      } else {\n        typeNodes[i] = null;\n      }\n    }\n    return typeNodes;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitParameterTypes", "index": 1317, "label": 0}
{"input": "public static boolean isColorDark(int color) {\n        double luminance = (0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(color)) / 255;\n        return luminance <= 0.5;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ColorUtils.java", "function_name": "isColorDark", "index": 1318, "label": 0}
{"input": "public static JSONObject roomAccessApplyCheckApprove(String appId, String newMsgId,String chatroomId, String msgContent){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"newMsgId\",newMsgId);\r\n        param.put(\"msgContent\",msgContent);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/roomAccessApplyCheckApprove\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "roomAccessApplyCheckApprove", "index": 1319, "label": 0}
{"input": "@Test\n  public void testUnblockNothing() {\n    when(instanceDao.tryUnblockFailedWorkflowInstances(eq(\"sample-minimal-wf\"), anyInt(), any()))\n        .thenReturn(0);\n    TimelineEvent event = actionHandler.unblock(\"sample-minimal-wf\", tester);\n    assertEquals(\"Unblocked [0] failed workflow instances.\", event.getMessage());\n    verify(maestroJobEventPublisher, times(0)).publishOrThrow(any(StartWorkflowJobEvent.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testUnblockNothing", "index": 1320, "label": 0}
{"input": "@Test\n  public void testConsumeWorkflowInstanceUpdateJobEvent() {\n    when(changeEvent2.getNewStatus()).thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    when(jobEvent2.toMaestroEventStream(clusterName)).thenReturn(Stream.of(changeEvent2));\n    processor.process(() -> jobEvent2);\n    verify(jobEvent2, times(1)).getType();\n    verify(jobEvent2, times(0)).getWorkflowId();\n    verify(eventClient, times(1)).send(changeEvent2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/PublishJobEventProcessorTest.java", "function_name": "testConsumeWorkflowInstanceUpdateJobEvent", "index": 1321, "label": 0}
{"input": "public static MergeContext stepCreate(ParamSource mergeSource) {\n      return workflowCreate(mergeSource, false);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "stepCreate", "index": 1322, "label": 0}
{"input": "public void markInternalError(Exception e, MaestroTracingManager tracingManager) {\n    markTerminated(StepInstance.Status.INTERNALLY_FAILED, null);\n    addTimeline(TimelineDetailsEvent.from(Details.create(e, false, \"marked as INTERNALLY_FAILED\")));\n    if (tracingManager != null) {\n      \n      tracingManager.handleStepStatus(tracingContext, StepInstance.Status.INTERNALLY_FAILED, e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markInternalError", "index": 1323, "label": 0}
{"input": "public static void setCalendar(Calendar calendar, int wholeDays, int millisecondsInDay, boolean use1904windowing,\n            boolean roundSeconds) {\n        int startYear = 1900;\n        int dayAdjust = -1; \n        if (use1904windowing) {\n            startYear = 1904;\n            dayAdjust = 1; \n        } else if (wholeDays < 61) {\n            \n            \n            dayAdjust = 0;\n        }\n        calendar.set(startYear, Calendar.JANUARY, wholeDays + dayAdjust, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, millisecondsInDay);\n        if (calendar.get(Calendar.MILLISECOND) == 0) {\n            calendar.clear(Calendar.MILLISECOND);\n        }\n        if (roundSeconds) {\n            \n            calendar.add(Calendar.MILLISECOND, 499);\n            calendar.clear(Calendar.MILLISECOND);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/DateUtils.java", "function_name": "setCalendar", "index": 1324, "label": 0}
{"input": "@Test\n  public void testCalculatePlannedExecutionsOneTimeYearly() {\n    var triggers =\n        generateTriggers(\"0 30 2 7 12 ? 2021\", \"2021-12-01T00:00:00-00:00\", US_PACIFIC, null);\n    Date endDate = parseDate(triggers, Duration.ofDays(30));\n    List<PlannedTimeTriggerExecution> planned =\n        executionPlanner.calculatePlannedExecutions(triggers, endDate, \"test-workflow\");\n    assertEquals(\n        List.of(\"2021-12-07T02:30:00-08\"),\n        planned.stream().map(p -> strFormat(p.executionDate())).collect(Collectors.toList()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculatePlannedExecutionsOneTimeYearly", "index": 1325, "label": 0}
{"input": "protected static SourceSection createSourceSection(Source source, Span span) {\n    return source.createSection(span.charIndex(), span.length());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AbstractAstBuilder.java", "function_name": "createSourceSection", "index": 1326, "label": 0}
{"input": "@Override\n  public Parameter toParameter() {\n    return StringParameter.builder()\n        .name(getName())\n        .value(getValue())\n        .expression(getExpression())\n        .validator(getValidator())\n        .tags(getTags())\n        .mode(getMode())\n        .meta(getMeta())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/StringParamDefinition.java", "function_name": "toParameter", "index": 1327, "label": 0}
{"input": "public WorkflowInstance createWorkflowInstance(\n      Workflow workflowDef,\n      Long internalId,\n      long workflowVersionId,\n      RunProperties runProperties,\n      RunRequest runRequest) {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setWorkflowId(workflowDef.getId());\n    instance.setInternalId(internalId);\n    instance.setWorkflowVersionId(workflowVersionId);\n    \n    instance.setWorkflowInstanceId(Constants.LATEST_ONE);\n    \n    instance.setCorrelationId(runRequest.getCorrelationId());\n    instance.setRunProperties(runProperties);\n    \n    Workflow workflow = overrideWorkflowConfig(workflowDef, runRequest);\n    instance.setRuntimeWorkflow(workflow);\n\n    \n    updateWorkflowInstance(instance, runRequest);\n    return instance;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/WorkflowHelper.java", "function_name": "createWorkflowInstance", "index": 1328, "label": 0}
{"input": "@Bean\n  public UserInfoInterceptor userInfoInterceptor(User.UserBuilder callerBuilder) {\n    LOG.info(\"Creating UserInfoInterceptor via spring boot...\");\n    return new UserInfoInterceptor(callerBuilder);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "userInfoInterceptor", "index": 1329, "label": 0}
{"input": "@Test\n  public void testRetryableError() {\n    when(workflowDao.getRunStrategy(workflowId)).thenThrow(new MaestroRetryableError(\"test\"));\n    AssertHelper.assertThrows(\n        \"Will retry except MaestroRetryableError\",\n        MaestroRetryableError.class,\n        \"test\",\n        () -> processor.process(() -> jobEvent));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StartWorkflowJobProcessorTest.java", "function_name": "testRetryableError", "index": 1330, "label": 0}
{"input": "static Map<String, ParamDefinition> preprocessDefinitionParams(\n      Map<String, ParamDefinition> params) {\n    if (params != null) {\n      params.forEach(\n          (n, p) -> {\n            Checks.checkTrue(\n                (p.getValue() != null && p.getExpression() == null)\n                    || (p.getValue() == null && p.getExpression() != null),\n                \"Param [%s] must be defined with either a literal value or an expression for parameter\",\n                n);\n            p.setName(n);\n          });\n    }\n    return params;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "preprocessDefinitionParams", "index": 1331, "label": 0}
{"input": "@Test\n  public void shouldSerDe() throws IOException {\n    StepDependencies expected =\n        loadObject(\n            \"fixtures/instances/sample-step-dependencies-summary.json\", StepDependencies.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    StepDependencies actual =\n        MAPPER.readValue(MAPPER.writeValueAsString(expected), StepDependencies.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(expected, actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/StepDependenciesTest.java", "function_name": "shouldSerDe", "index": 1332, "label": 0}
{"input": "public static <K, V> UnmodifiableEconomicMap<K, V> emptyMap() {\n    return EconomicMap.emptyMap();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/util/EconomicMaps.java", "function_name": "emptyMap", "index": 1333, "label": 0}
{"input": "@Test\n  public void testWakeUpChildActor() {\n    groupActor.wakeUpChildActor(\"test-flow-ref\", Action.FLOW_TIMEOUT);\n    verifyEmptyAction(flowActor);\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    groupActor.wakeUpChildActor(\"test-flow-ref\", Action.FLOW_TIMEOUT);\n    verifyActions(flowActor, Action.FLOW_START, Action.FLOW_TIMEOUT);\n\n    groupActor.wakeUpChildActor(\"not-exist-flow-ref\", Action.FLOW_TIMEOUT);\n    verifyEmptyAction(flowActor);\n\n    flowActor.terminateNow();\n    groupActor.wakeUpChildActor(\"test-flow-ref\", Action.FLOW_TIMEOUT);\n    verifyEmptyAction(flowActor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testWakeUpChildActor", "index": 1334, "label": 0}
{"input": "@Bean\n  public SignalTriggerExecutionProcessor signalTriggerExecutionProcessor(\n      MaestroSignalBrokerDao brokerDao,\n      ParamEvaluator paramEvaluator,\n      WorkflowActionHandler actionHandler,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating signalTriggerExecutionProcessor within Spring boot...\");\n    return new SignalTriggerExecutionProcessor(\n        brokerDao, paramEvaluator, actionHandler, objectMapper, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "signalTriggerExecutionProcessor", "index": 1335, "label": 0}
{"input": "public List<Class> getClasses() {\n    var res = new ArrayList<Class>();\n    for (var child : children) {\n      if (child instanceof Class clazz) {\n        res.add(clazz);\n      }\n    }\n    return res;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Module.java", "function_name": "getClasses", "index": 1336, "label": 0}
{"input": "public ExcelDataConvertException(Integer rowIndex, Integer columnIndex, CellData<?> cellData,\n            ExcelContentProperty excelContentProperty, String message, Throwable cause) {\n        super(message, cause);\n        this.rowIndex = rowIndex;\n        this.columnIndex = columnIndex;\n        this.cellData = cellData;\n        this.excelContentProperty = excelContentProperty;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/exception/ExcelDataConvertException.java", "function_name": "ExcelDataConvertException", "index": 1337, "label": 0}
{"input": "@Test\n  public void testScheduleWithoutDelayForDuplicateAction() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    groupActor.schedule(Action.TASK_PING, 0);\n    groupActor.schedule(Action.TASK_PING, 0);\n    verify(context, times(0)).schedule(any(), anyLong());\n    verifyActions(groupActor, Action.TASK_PING, Action.TASK_PING);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9ff95edece16eb7de8ef6d3f7df720034dfe354a", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testScheduleWithoutDelayForDuplicateAction", "index": 1338, "label": 0}
{"input": "public static void increment(long delta) {\n    long size = memory.get().addAndGet(delta + DEFAULT_OBJECT_SIZE_IN_BYTES);\n    if (size >= memoryLimit) {\n      throw new IllegalStateException(\n          \"SEL evaluation aborted as it takes too much memory (in byte) over the limit \"\n              + memoryLimit);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/util/MemoryCounter.java", "function_name": "increment", "index": 1339, "label": 0}
{"input": "public static <E> ArrayList<E> newArrayList(Iterable<? extends E> elements) {\n        checkNotNull(elements); \n        \n        return (elements instanceof Collection) ? new ArrayList<>((Collection<? extends E>) elements)\n                : newArrayList(elements.iterator());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/ListUtils.java", "function_name": "newArrayList", "index": 1340, "label": 0}
{"input": "public StringConstantPart(Span span, @Nullable List<? extends @Nullable Node> children) {\n    super(span, children);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringConstantPart.java", "function_name": "StringConstantPart", "index": 1341, "label": 0}
{"input": "@Test\n  public void testAddDuplicateSignalInstance() throws Exception {\n    long seqId = instanceDao.addSignalInstance(conn, \"uuid1\", \"signal_a\", \"{}\");\n    conn.commit();\n    assertEquals(-1, seqId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalInstanceDaoTest.java", "function_name": "testAddDuplicateSignalInstance", "index": 1342, "label": 0}
{"input": "public static String getSwitchUserDir() {\n        return USER_DIR + SEPARATOR + DATA + SEPARATOR + SWITCH_USER_CONFIG;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a65dda542a30d994605d8dc1d48cb35ce663d41", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getSwitchUserDir", "index": 1343, "label": 0}
{"input": "private void cleanupForGetWorkflowInstancesLatestRun() {\n    \n    for (int i = 1; i < 10; i++) {\n      MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, i + 1);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "cleanupForGetWorkflowInstancesLatestRun", "index": 1344, "label": 0}
{"input": "@Test\n  public void testRecordMemoryUsage() {\n    MemoryCounter.setMemoryLimit(200);\n    MemoryCounter.reset();\n    new MockType();\n    assertEquals(32, MemoryCounter.usedMemory());\n    new MockType();\n    assertEquals(64, MemoryCounter.usedMemory());\n    new MockSelType(null);\n    assertEquals(96, MemoryCounter.usedMemory());\n    new MockSelType(\"foobar\");\n    assertEquals(140, MemoryCounter.usedMemory());\n    MemoryCounter.reset();\n    assertEquals(0, MemoryCounter.usedMemory());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/MemoryCounterTest.java", "function_name": "testRecordMemoryUsage", "index": 1345, "label": 0}
{"input": "@Test\n  public void testCreateAndUpsert() {\n    addOutputData(EXT_JOB_ID);\n\n    Optional<OutputData> outputDataOpt = dao.getOutputDataForExternalJob(EXT_JOB_ID, JOB_TYPE);\n    assertTrue(outputDataOpt.isPresent());\n    OutputData paramResult = outputDataOpt.get();\n\n    verifyExpectedDTOs(paramResult, EXT_JOB_ID);\n\n    assertFalse(dao.getOutputDataForExternalJob(\"invalid\", JOB_TYPE).isPresent());\n\n    \n    dao.insertOrUpdateOutputData(paramResult);\n\n    OutputData paramResult2 = dao.getOutputDataForExternalJob(EXT_JOB_ID, JOB_TYPE).get();\n    assertEquals(paramResult.getCreateTime(), paramResult2.getCreateTime());\n    assertNotEquals(paramResult.getModifyTime(), paramResult2.getModifyTime());\n    assertEquals(paramResult.getParams(), paramResult2.getParams());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/OutputDataDaoTest.java", "function_name": "testCreateAndUpsert", "index": 1346, "label": 0}
{"input": "private com.google.protobuf.RepeatedFieldBuilderV3<\n                    SubMessage2, SubMessage2.Builder, SubMessage2OrBuilder>\n            getMessage2FieldBuilder() {\n                if (message2Builder_ == null) {\n                    message2Builder_ = new com.google.protobuf.RepeatedFieldBuilderV3<\n                            SubMessage2, SubMessage2.Builder, SubMessage2OrBuilder>(\n                            message2_,\n                            ((bitField0_ & 0x00000002) != 0),\n                            getParentForChildren(),\n                            isClean());\n                    message2_ = null;\n                }\n                return message2Builder_;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage2FieldBuilder", "index": 1347, "label": 0}
{"input": "@Override\n    public String exportContact() {\n        \n        String separator = System.getProperty(\"file.separator\");\n        \n        String filePath = System.getProperty(\"user.dir\") + separator + \"export\";\n        \n        FileUtil.mkdir(filePath);\n        \n        String pathName = filePath + separator + DateUtil.format(DateUtil.date(), \"yyyyMMddHHmmss\") + \"联系人\" + \".xlsx\";\n        \n        EasyExcel.write(pathName, ExportContactVO.class)\n                .sheet(\"sheet1\")\n                .doWrite(contactRepository::exportContact);\n        \n        return pathName;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ContactServiceImpl.java", "function_name": "exportContact", "index": 1348, "label": 0}
{"input": "@Override\n    public void removeByKidAndFid(String kid, String fid) {\n        \n        Filter simpleFilterByKid = new IsEqualTo(\"kid\", kid);\n        Filter simpleFilterFid = new IsEqualTo(\"fid\", fid);\n        Filter simpleFilterByAnd = Filter.and(simpleFilterFid, simpleFilterByKid);\n        embeddingStore.removeAll(simpleFilterByAnd);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "1a645c6e10e5cd830c70fad47b816f774613e821", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/service/impl/WeaviateVectorStoreImpl.java", "function_name": "removeByKidAndFid", "index": 1349, "label": 0}
{"input": "public static <T> PaginationDirection validateParamAndDeriveDirection(T first, T last) {\n    if (first != null && last != null) {\n      throw new MaestroValidationException(\n          \"Either first or last need to be provided, but not both\");\n    }\n    if (first == null && last == null) {\n      throw new MaestroValidationException(\n          \"Either first or last need to be provided, both cannot be null\");\n    }\n    return (last == null) ? PaginationDirection.NEXT : PaginationDirection.PREV;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9f6ef6ad453085e3c04ab55405fc7b256c5a9c9b", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/utils/PaginationHelper.java", "function_name": "validateParamAndDeriveDirection", "index": 1350, "label": 0}
{"input": "private GraphNode(String stepId) {\n      this.stepId = Checks.notNull(stepId, \"Step ID in the DAG cannot be null\");\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/WorkflowGraph.java", "function_name": "GraphNode", "index": 1351, "label": 0}
{"input": "@Override\n            public final boolean isInitialized() {\n                return true;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "isInitialized", "index": 1352, "label": 0}
{"input": "@Test\n  public void testSyncFailure() {\n    doThrow(new RuntimeException(\"test error\"))\n        .when(instanceDao)\n        .updateStepInstance(any(), any(), any());\n    StepRuntimeSummary stepRuntimeSummary =\n        StepRuntimeSummary.builder()\n            .stepId(\"test-summary\")\n            .stepAttemptId(2)\n            .stepInstanceId(1)\n            .dbOperation(DbOperation.UPDATE)\n            .pendingRecords(\n                Collections.singletonList(\n                    mock(StepInstanceUpdateJobEvent.StepInstancePendingRecord.class)))\n            .build();\n    Optional<Details> details = syncManager.sync(instance, workflowSummary, stepRuntimeSummary);\n    assertTrue(details.isPresent());\n    assertEquals(\"Failed to sync a Maestro step state change\", details.get().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepSyncManagerTest.java", "function_name": "testSyncFailure", "index": 1353, "label": 0}
{"input": "private void requestNotificationPermission() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            ActivityResultLauncher<String> pushNotificationPermissionLauncher = registerForActivityResult(\n                    new ActivityResultContracts.RequestPermission(), isGranted -> {\n                        if (!isGranted) {\n                            Toast.makeText(this, \"Permission denied\", Toast.LENGTH_LONG).show();\n                        }\n                    });\n            pushNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "requestNotificationPermission", "index": 1354, "label": 0}
{"input": "public Long doMergeMsg(String targetDb, String sourceDb, Long nextSequence) {\n        \n        List<Msg> records = msgRepository.queryMsgBySequence(sourceDb, nextSequence);\n        \n        if (records == null || records.isEmpty()) {\n            return nextSequence;\n        }\n        \n        msgRepository.saveBatch(targetDb, records);\n        \n        return records.get(records.size() - 1).getSequence();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DatabaseServiceImpl.java", "function_name": "doMergeMsg", "index": 1355, "label": 0}
{"input": "public static boolean isSignalTriggerDisabledException(\n      MaestroUnprocessableEntityException exception) {\n    return exception.getMessage() != null\n        && exception.getMessage().contains(SIGNAL_TRIGGER_DISABLED_MESSAGE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/ExceptionClassifier.java", "function_name": "isSignalTriggerDisabledException", "index": 1356, "label": 0}
{"input": "@Test\n  public void testInitWithoutClaimingGroup() {\n    when(context.claimGroup()).thenReturn(null);\n    executor.init();\n    verify(context, timeout(10000)).claimGroup();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/FlowExecutorTest.java", "function_name": "testInitWithoutClaimingGroup", "index": 1357, "label": 0}
{"input": "public CockroachDBDataSourceProvider(CockroachDBConfiguration configuration) {\n    this.configuration = configuration;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBDataSourceProvider.java", "function_name": "CockroachDBDataSourceProvider", "index": 1358, "label": 0}
{"input": "private Timeline getTimeline(ResultSet rs) throws SQLException {\n    Array payload = rs.getArray(StepInstanceField.TIMELINE.field);\n    if (payload == null) {\n      return new Timeline(Collections.emptyList());\n    }\n    String[] json = (String[]) payload.getArray();\n    if (json == null) {\n      return new Timeline(Collections.emptyList());\n    }\n    Timeline timeline = new Timeline(null);\n    for (String event : json) {\n      timeline.add(fromJson(event, TimelineEvent.class));\n    }\n    return timeline;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getTimeline", "index": 1359, "label": 0}
{"input": "@Override\n    public void resetToken(Long userId,String modelName) {\n        ChatUsageToken chatToken = queryByUserId(userId, modelName);\n        chatToken.setToken(0);\n        baseMapper.updateById(chatToken);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules-api/ruoyi-chat-api/src/main/java/org/ruoyi/service/impl/ChatTokenServiceImpl.java", "function_name": "resetToken", "index": 1360, "label": 0}
{"input": "public BranchNodeData setOutputKey(String outputKey) {\n\t\tthis.outputKey = outputKey;\n\t\treturn this;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "869092459902221b156926f54eac86afdd48b375", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/model/workflow/nodedata/BranchNodeData.java", "function_name": "setOutputKey", "index": 1361, "label": 0}
{"input": "private boolean tryUpdateAncestorRunsStatus(\n      Connection conn, String workflowId, long startInstanceId, WorkflowInstance lastInstance)\n      throws SQLException {\n    if (lastInstance.isFreshRun()) {\n      return false; \n    }\n    try (PreparedStatement wfiStmt = conn.prepareStatement(UPDATE_INSTANCE_FAILED_STATUS)) {\n      int idx = 0;\n      wfiStmt.setString(++idx, workflowId);\n      wfiStmt.setLong(++idx, startInstanceId);\n      wfiStmt.setLong(++idx, lastInstance.getWorkflowInstanceId());\n      return wfiStmt.executeUpdate() >= SUCCESS_WRITE_SIZE;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "tryUpdateAncestorRunsStatus", "index": 1362, "label": 0}
{"input": "private void verifyPublish(int start, int delayStart, int run, int terminate, int update) {\n    verify(publisher, times(start)).publishOrThrow(any(StartWorkflowJobEvent.class), any());\n    verify(publisher, times(delayStart))\n        .publishOrThrow(any(StartWorkflowJobEvent.class), anyLong(), any());\n    verify(publisher, times(run)).publishOrThrow(any(RunWorkflowInstancesJobEvent.class), any());\n    verify(publisher, times(terminate))\n        .publishOrThrow(any(TerminateThenRunInstanceJobEvent.class), any());\n    verify(publisher, times(update))\n        .publishOrThrow(any(WorkflowInstanceUpdateJobEvent.class), any());\n    verify(publisher, times(start + run + terminate + update)).publishOrThrow(any(), any());\n    reset(publisher);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "verifyPublish", "index": 1363, "label": 0}
{"input": "@Override\n    public TaskbarControl taskbarControl() {\n        if (swingTaskbarControl != null) {\n            return swingTaskbarControl;\n        }\n        return super.taskbarControl();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "taskbarControl", "index": 1364, "label": 0}
{"input": "default MapParamDefinition asMapParamDef() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as MAP\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "asMapParamDef", "index": 1365, "label": 0}
{"input": "@ExplodeLoop\n  @Specialization(guards = {\"methodName == APPLY\", \"receiver.getCallTarget() == cachedCallTarget\"})\n  protected Object evalFunctionCached(\n      VirtualFrame frame,\n      VmFunction receiver,\n      @SuppressWarnings(\"unused\") VmClass receiverClass,\n      @Cached(\"receiver.getCallTarget()\") @SuppressWarnings(\"unused\")\n          RootCallTarget cachedCallTarget,\n      @Cached(\"create(cachedCallTarget)\") DirectCallNode callNode) {\n\n    var args = new Object[2 + argumentNodes.length];\n    args[0] = receiver.getThisValue();\n    args[1] = receiver;\n    for (var i = 0; i < argumentNodes.length; i++) {\n      args[2 + i] = argumentNodes[i].executeGeneric(frame);\n    }\n\n    return callNode.call(args);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/member/InvokeMethodVirtualNode.java", "function_name": "evalFunctionCached", "index": 1366, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"triggers.signal-trigger.type\", havingValue = \"sqs\")\n  public SqsSignalTriggerMatchListener sqsSignalTriggerMatchListener(\n      SignalTriggerMatchProcessor processor, ObjectMapper mapper) {\n    LOG.info(\"Creating sqsSignalTriggerMatchListener within Spring boot...\");\n    return new SqsSignalTriggerMatchListener(processor, mapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsSignalTriggerMatchListener", "index": 1367, "label": 0}
{"input": "public static JSONObject modifyChatroomRemark(String appId, String chatroomRemark,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomRemark\",chatroomRemark);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/modifyChatroomRemark\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "modifyChatroomRemark", "index": 1368, "label": 0}
{"input": "public long getLargestForeachRunIdFromRuns(String workflowId) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_LARGEST_FOREACH_RUN_ID_QUERY,\n                stmt -> stmt.setString(1, workflowId),\n                result -> {\n                  if (result.next()) {\n                    return result.getLong(ID_COLUMN);\n                  }\n                  return 0L;\n                }),\n        \"getLargestForeachRunIdFromRuns\",\n        \"Failed to get the largest foreach run_id for all runs of inline workflow [{}]\",\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "getLargestForeachRunIdFromRuns", "index": 1369, "label": 0}
{"input": "@Test\n  public void testGetRestartWorkflowId() {\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .build();\n    Assert.assertEquals(\"foo\", runRequest.getRestartWorkflowId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testGetRestartWorkflowId", "index": 1370, "label": 0}
{"input": "@Test\n  public void testTransformMapOnlyToSignalOutput() throws IOException {\n    MapParameter param =\n        MapParameter.builder().evaluatedResult(Map.of(\"name\", \"out\", \"p1\", 1, \"p2\", 2)).build();\n    var output = SignalTransformer.transform(param);\n    Assert.assertEquals(\"out\", output.getName());\n    Assert.assertEquals(\n        Map.of(\"p1\", SignalParamValue.of(1), \"p2\", SignalParamValue.of(2)), output.getParams());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalTransformerTest.java", "function_name": "testTransformMapOnlyToSignalOutput", "index": 1371, "label": 0}
{"input": "@GetMapping(\"/detail/{kid}\")\n  public TableDataInfo<KnowledgeAttachVo> attach(KnowledgeAttachBo bo, PageQuery pageQuery,\n      @PathVariable String kid) {\n    bo.setKid(kid);\n    return attachService.queryPageList(bo, pageQuery);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "attach", "index": 1372, "label": 0}
{"input": "@Override\n  public List<String> searchArchivableWorkflows(String indexName, long archiveTtlDays) {\n    throw new UnsupportedOperationException(\n        \"This method is not implemented in CockroachDBIndexDAO.\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "searchArchivableWorkflows", "index": 1373, "label": 0}
{"input": "public Member getMembers(int index) {\n                if (membersBuilder_ == null) {\n                    return members_.get(index);\n                } else {\n                    return membersBuilder_.getMessage(index);\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getMembers", "index": 1374, "label": 0}
{"input": "private static SourceSection unavailableSourceSection() {\n    return VmUtils.unavailableSourceSection();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "unavailableSourceSection", "index": 1375, "label": 0}
{"input": "private boolean isIgnoringBatteryOptimizations() {\n        String packageName = getPackageName();\n        PowerManager pm = (PowerManager) getSystemService(POWER_SERVICE);\n        if (pm != null) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                return pm.isIgnoringBatteryOptimizations(packageName);\n            }\n        }\n        return false;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "b87aff63c2734f672d1d0993db2ff1df1b2d2fc6", "file_path": "app/src/main/java/org/bepass/oblivion/MainActivity.java", "function_name": "isIgnoringBatteryOptimizations", "index": 1376, "label": 0}
{"input": "private void init(String source) {\n    this.lexer = new Lexer(source);\n    _lookahead = forceNext();\n    lookahead = _lookahead.token;\n    spanLookahead = _lookahead.span;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "init", "index": 1377, "label": 0}
{"input": "private void openWebUI() {\n        if (Main.getServer() != null && Main.getServer().getWebContainer() != null) {\n            try {\n                Desktop.getDesktop().browse(\n                        URI.create(\"http://127.0.0.1:\" + Main.getServer().getWebContainer().javalin().port() +\n                                \"?token=\" + Main.getServer().getWebContainer().getToken())\n                );\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtTrayManager.java", "function_name": "openWebUI", "index": 1378, "label": 0}
{"input": "private void publishInstanceStopJobEvent(WorkflowInstance instance, long markTime) {\n    WorkflowInstanceUpdateJobEvent jobEvent =\n        WorkflowInstanceUpdateJobEvent.create(instance, WorkflowInstance.Status.STOPPED, markTime);\n    publisher.publishOrThrow(\n        jobEvent, \"Failed sending a job event to notify stopping workflow instance, please retry.\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "publishInstanceStopJobEvent", "index": 1379, "label": 0}
{"input": "@Test\n  public void testGetEvaluatedResultsFromForeach() throws Exception {\n    si = loadObject(\"fixtures/instances/sample-step-instance-succeeded.json\", StepInstance.class);\n    si.setStepAttemptId(10);\n    stepDao.insertOrUpsertStepInstance(si, false);\n    assertEquals(\n        Collections.singletonMap(1L, \"15\"),\n        stepDao.getEvaluatedResultsFromForeach(\"sample-dag-test-3\", \"job1\", \"sleep_seconds\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetEvaluatedResultsFromForeach", "index": 1380, "label": 0}
{"input": "protected void processPostLaunchArtifacts(KubernetesStepContext context) {\n    KubernetesArtifact artifact = new KubernetesArtifact();\n    artifact.setJobId(context.getJobResult().jobId());\n    artifact.setExecutionScript(context.getCommand().getEntrypoint());\n    artifact.setCommand(context.getCommand());\n    context.getPendingArtifacts().put(Artifact.Type.KUBERNETES.key(), artifact);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntime.java", "function_name": "processPostLaunchArtifacts", "index": 1381, "label": 0}
{"input": "@Override\n    public void shiftCellsRight(int firstShiftColumnIndex, int lastShiftColumnIndex, int step) {\n    \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvRow.java", "function_name": "shiftCellsRight", "index": 1382, "label": 0}
{"input": "@Override\n  public void updateLastPollData(String taskDefName, String domain, String workerId) {\n    Preconditions.checkNotNull(taskDefName, \"taskDefName name cannot be null\");\n    PollData pollData = new PollData(taskDefName, domain, workerId, System.currentTimeMillis());\n    String actualDomain = (domain == null) ? DEFAULT_DOMAIN : domain;\n    Integer cnt =\n        withMetricLogError(\n            () ->\n                withRetryableUpdate(\n                    UPSERT_POLL_DATA_STATEMENT,\n                    statement -> {\n                      statement.setString(1, pollData.getQueueName());\n                      statement.setString(2, actualDomain);\n                      statement.setString(3, toJson(pollData));\n                    }),\n            \"updateLastPollData\",\n            \"Failed updating last poll data {}\",\n            pollData);\n    LOG.debug(\"Updated {} last poll data: {}\", cnt, pollData);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBPollDataDAO.java", "function_name": "updateLastPollData", "index": 1383, "label": 0}
{"input": "private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {\n    switch (hiByte) {\n      case 0:\n        return ((jjbitVec4[i2] & l2) != 0L);\n      case 48:\n        return ((jjbitVec5[i2] & l2) != 0L);\n      case 49:\n        return ((jjbitVec6[i2] & l2) != 0L);\n      case 51:\n        return ((jjbitVec7[i2] & l2) != 0L);\n      case 61:\n        return ((jjbitVec8[i2] & l2) != 0L);\n      default:\n        if ((jjbitVec3[i1] & l1) != 0L) return true;\n        return false;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjCanMove_1", "index": 1384, "label": 0}
{"input": "@Test\n  public void testTrySaveGroup() {\n    context.trySaveGroup(group);\n    verify(flowDao, times(1)).insertGroup(group);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testTrySaveGroup", "index": 1385, "label": 0}
{"input": "@Test\n  public void testLargeRangeKey() {\n    Assert.assertEquals(\"44C92\", IdHelper.rangeKey(1000000L));\n    Assert.assertEquals(\"BAzL8n0Y58m7\", IdHelper.rangeKey(Long.MAX_VALUE));\n    Assert.assertTrue(IdHelper.rangeKey(1000000L).compareTo(IdHelper.rangeKey(Long.MAX_VALUE)) < 0);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/IdHelperTest.java", "function_name": "testLargeRangeKey", "index": 1386, "label": 0}
{"input": "private String getTaskPayload() {\n    return maestroExecutionDao.withRetryableQuery(\n        \"SELECT payload FROM task WHERE task_id = ?\",\n        statement -> statement.setString(1, task.getTaskId()),\n        result -> {\n          if (result.next()) {\n            return result.getString(PAYLOAD_COLUMN);\n          }\n          return null;\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/conductor/cockroachdb/dao/MaestroCockroachDBExecutionDaoTest.java", "function_name": "getTaskPayload", "index": 1387, "label": 0}
{"input": "@Test\n    public void csvWrite() throws Exception {\n        \n        String fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".csv\";\n        \n        \n        EasyExcel.write(fileName, CsvData.class).sheet().doWrite(data());\n        \n        \n        List<Object> list = EasyExcel.read(fileName).sheet(0).headRowNumber(0).doReadSync();\n        log.info(\"数据：{}\", list.size());\n        for (Object data : list) {\n            log.info(\"返回数据：{}\", JSON.toJSONString(data));\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvReadTest.java", "function_name": "csvWrite", "index": 1388, "label": 0}
{"input": "@Test\n    public void horizontalFill() {\n        \n        \n        String templateFileName =\n            TestFileUtil.getPath() + \"demo\" + File.separator + \"fill\" + File.separator + \"horizontal.xlsx\";\n\n        String fileName = TestFileUtil.getPath() + \"horizontalFill\" + System.currentTimeMillis() + \".xlsx\";\n        ExcelWriter excelWriter = EasyExcel.write(fileName).withTemplate(templateFileName).build();\n        WriteSheet writeSheet = EasyExcel.writerSheet().build();\n        FillConfig fillConfig = FillConfig.builder().direction(WriteDirectionEnum.HORIZONTAL).build();\n        excelWriter.fill(data(), fillConfig, writeSheet);\n        excelWriter.fill(data(), fillConfig, writeSheet);\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"date\", \"}\"0);\n        excelWriter.fill(map, writeSheet);\n\n        \n        excelWriter.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "364e027f00a9abecb0b4938391ec6f6adfc60aea", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/fill/FillTempTest.java", "function_name": "horizontalFill", "index": 1389, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase6() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(), Collections.singletonList(\"job.6\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(1, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.6\", \"job.7\"), paths.get(0));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase6", "index": 1390, "label": 0}
{"input": "public static @Nullable String exportDocComment(SourceSection @Nullable [] docComment) {\n    if (docComment == null) return null;\n\n    var builder = new StringBuilder();\n    for (var i = 0; i < docComment.length; i++) {\n      if (i > 0) {\n        builder.append(\"\\n\");\n      }\n      var matcher = DOC_COMMENT_LINE_START.matcher(docComment[i].getCharacters());\n      var firstMatch = true;\n      while (matcher.find()) {\n        if (firstMatch) {\n          matcher.appendReplacement(builder, \"\");\n          firstMatch = false;\n        } else {\n          matcher.appendReplacement(builder, \"\\n\");\n        }\n      }\n      matcher.appendTail(builder);\n    }\n    return builder.toString();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java", "function_name": "exportDocComment", "index": 1391, "label": 0}
{"input": "private InstanceRunUuid readInstanceRunUuidFromResult(ResultSet result) throws SQLException {\n    return new InstanceRunUuid(\n        result.getLong(\"instance_id\"), result.getLong(\"run_id\"), result.getString(\"uuid\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "readInstanceRunUuidFromResult", "index": 1392, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void preprocessWrongStr() {\n    SelTypeUtil.preprocess(\"\\\"\\\\\\\"\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypeUtilTest.java", "function_name": "preprocessWrongStr", "index": 1393, "label": 0}
{"input": "private static <K, V> List<Map<K, V>> splitMap(Map<K, V> map) {\n    int numSplits =\n        (int) Math.ceil((double) map.size() / Constants.BATCH_SIZE_ROLLUP_STEP_ARTIFACTS_QUERY);\n    return IntStream.range(0, numSplits)\n        .mapToObj(\n            i ->\n                map.entrySet().stream()\n                    .skip((long) i * Constants.BATCH_SIZE_ROLLUP_STEP_ARTIFACTS_QUERY)\n                    .limit(Constants.BATCH_SIZE_ROLLUP_STEP_ARTIFACTS_QUERY)\n                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)))\n        .collect(Collectors.toList());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "splitMap", "index": 1394, "label": 0}
{"input": "@Test\n  public void testDecompress() throws IOException {\n    assertEquals(\"aaaaaaa\", stringCodec.decompress(\"gzip\", \"H4sIAAAAAAAAAEtMBAMAdCCLWwcAAAA=\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/StringCodecTest.java", "function_name": "testDecompress", "index": 1395, "label": 0}
{"input": "@GetMapping(\"/export\")\n    public ResponseVO<String> export(@RequestParam String talker) {\n        return ResponseVO.ok(msgService.exportMsg(talker));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/MsgController.java", "function_name": "export", "index": 1396, "label": 0}
{"input": "private AsyncTaskExecutor createDefaultTaskExecutor(SqsProperties props) {\n    LOG.info(\"Creating asyncTaskExecutor within Spring boot...\");\n    ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n    threadPoolTaskExecutor.setThreadNamePrefix(\"MaestroSqsExecutor-\");\n    threadPoolTaskExecutor.setCorePoolSize(props.getListenerCorePoolSize());\n    threadPoolTaskExecutor.setMaxPoolSize(props.getListenerMaxPoolSize());\n    threadPoolTaskExecutor.setQueueCapacity(props.getListenerQueueCapacity());\n    threadPoolTaskExecutor.afterPropertiesSet();\n    return threadPoolTaskExecutor;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "createDefaultTaskExecutor", "index": 1397, "label": 0}
{"input": "@Bean\n  public ParametersUtils parametersUtils() {\n    LOG.info(\"Creating noop parametersUtils within Spring boot...\");\n    return new ParametersUtils() {\n      @Override\n      public Map<String, Object> getTaskInputV2(\n          Map<String, Object> input, Workflow workflow, String taskId, TaskDef taskDefinition) {\n        return input;\n      }\n    };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "parametersUtils", "index": 1398, "label": 0}
{"input": "@Override\n    public String convertToJavaData(ReadCellData<?> cellData, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration) {\n        return cellData.getStringValue();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/converters/string/StringStringConverter.java", "function_name": "convertToJavaData", "index": 1399, "label": 0}
{"input": "public String renderPrompt(String promptPath, Map<String, Object> variables) {\n\t\tString promptContent = loadPrompt(promptPath);\n\t\tPromptTemplate template = new PromptTemplate(promptContent);\n\t\treturn template.render(variables != null ? variables : Map.of());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/prompt/PromptLoader.java", "function_name": "renderPrompt", "index": 1400, "label": 0}
{"input": "Long matchSignalDependency(SignalMatchDto signalMatch) {\n    var queryParams = new ArrayList<String>();\n    String sql = getSqlWithQueryParam(signalMatch, 0, queryParams);\n    return withMetricLogError(\n        () -> withRetryableTransaction(conn -> runSignalMatchQuery(conn, sql, queryParams)),\n        \"matchSignalDependency\",\n        \"Failed to match the signal step dependency for [{}]\",\n        signalMatch);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalParamDao.java", "function_name": "matchSignalDependency", "index": 1401, "label": 0}
{"input": "default BooleanArrayParamDefinition asBooleanArrayParamDef() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as BOOLEAN_ARRAY\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "asBooleanArrayParamDef", "index": 1402, "label": 0}
{"input": "public DashScopeImageGenMetadata(String revisedPrompt, Map<String, Object> metadata) {\n\t\tthis.revisedPrompt = revisedPrompt;\n\t\tthis.taskMetadata = metadata;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/metadata/DashScopeImageGenMetadata.java", "function_name": "DashScopeImageGenMetadata", "index": 1403, "label": 0}
{"input": "public SignalInstance getLatestSignalInstance(String signalName) {\n    return instanceDao.getSignalInstance(new SignalInstanceRef(signalName, -1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "getLatestSignalInstance", "index": 1404, "label": 0}
{"input": "@Override\n\tpublic List<String> listModelNames(ModelType modelType) {\n\t\tList<String> res = new ArrayList<>();\n\t\tif (modelType == ModelType.CHAT) {\n\t\t\tDashScopeApi.ChatModel[] values = DashScopeApi.ChatModel.values();\n\t\t\tfor (DashScopeApi.ChatModel value : values) {\n\t\t\t\tres.add(value.getValue());\n\t\t\t}\n\t\t}\n\t\telse if (modelType == ModelType.IMAGE) {\n\t\t\tDashScopeImageApi.ImageModel[] values = DashScopeImageApi.ImageModel.values();\n\t\t\tfor (DashScopeImageApi.ImageModel value : values) {\n\t\t\t\tres.add(value.getValue());\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-studio/src/main/java/com/alibaba/cloud/ai/service/impl/ChatModelDelegateImpl.java", "function_name": "listModelNames", "index": 1405, "label": 0}
{"input": "@Test(expected = AccessControlException.class)\n  public void testRemoveAccessControl() throws Exception {\n    Field f = SelSecurityManager.class.getDeclaredField(\"accs\");\n    f.setAccessible(true);\n    f.set(System.getSecurityManager(), new ThreadLocal<AccessControlContext>());\n    System.setSecurityManager(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testRemoveAccessControl", "index": 1406, "label": 0}
{"input": "private TaskExecLog createLog(String taskId, String log) {\n    TaskExecLog taskExecLog = new TaskExecLog(log);\n    taskExecLog.setTaskId(taskId);\n    return taskExecLog;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAOTest.java", "function_name": "createLog", "index": 1407, "label": 0}
{"input": "@Override\n    public Map<String, String> queryHeadImgUrl(List<String> usrNames) {\n        \n        Wrapper<ContactHeadImgUrl> wrapper = Wrappers.<ContactHeadImgUrl>lambdaQuery()\n                .select(ContactHeadImgUrl::getUsrName, ContactHeadImgUrl::getSmallHeadImgUrl)\n                .in(ContactHeadImgUrl::getUsrName, usrNames);\n        \n        return Optional.ofNullable(super.list(wrapper))\n                .map(headImgUrls -> headImgUrls.stream().collect(Collectors.toMap(ContactHeadImgUrl::getUsrName, ContactHeadImgUrl::getSmallHeadImgUrl)))\n                .orElse(Collections.emptyMap());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ContactHeadImgUrlRepositoryImpl.java", "function_name": "queryHeadImgUrl", "index": 1408, "label": 0}
{"input": "private void updateGuiStuff() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(tlUI(Lang.GUI_TITLE_LOADED, \"SWT UI\", Main.getMeta().getVersion(), Main.getMeta().getAbbrev()));\n        StringJoiner joiner = new StringJoiner(\"\", \" [\", \"]\");\n        joiner.setEmptyValue(\"\");\n        ExchangeMap.GUI_DISPLAY_FLAGS.forEach(flag -> joiner.add(flag.getContent()));\n        Display.getDefault().asyncExec(() -> {\n            if (swtMainWindow != null) {\n                swtMainWindow.shell.setText(builder.append(joiner).toString());\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "updateGuiStuff", "index": 1409, "label": 0}
{"input": "private WorkflowRollupOverview getAggregatedForeachAndSubworkflowStepRollup(\n      String workflowId,\n      long workflowInstanceId,\n      Map<String, Long> stepIdRunIdForeachSubworkflowPrevious) {\n    List<WorkflowRollupOverview> rollups =\n        getForeachAndSubworkflowStepRollups(\n            workflowId, workflowInstanceId, stepIdRunIdForeachSubworkflowPrevious);\n\n    return rollups.stream().reduce(new WorkflowRollupOverview(), WorkflowRollupOverview::aggregate);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/RollupAggregationHelper.java", "function_name": "getAggregatedForeachAndSubworkflowStepRollup", "index": 1410, "label": 0}
{"input": "public static WorkflowRuntimeSummary retrieveWorkflowRuntimeSummary(\n      ObjectMapper objectMapper, Map<String, Object> data) {\n    if (data.containsKey(Constants.WORKFLOW_RUNTIME_SUMMARY_FIELD)) {\n      return convertField(\n          objectMapper,\n          data,\n          Constants.WORKFLOW_RUNTIME_SUMMARY_FIELD,\n          WorkflowRuntimeSummary.class);\n    }\n    return new WorkflowRuntimeSummary();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "retrieveWorkflowRuntimeSummary", "index": 1411, "label": 0}
{"input": "public static RowWriteHandlerContext createRowWriteHandlerContext(WriteContext writeContext, Integer rowIndex,\n            Integer relativeRowIndex, Boolean isHead) {\n        return new RowWriteHandlerContext(writeContext, writeContext.writeWorkbookHolder(),\n                writeContext.writeSheetHolder(), writeContext.writeTableHolder(), rowIndex, null, relativeRowIndex,\n                isHead);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/WriteHandlerUtils.java", "function_name": "createRowWriteHandlerContext", "index": 1412, "label": 0}
{"input": "public TypedIdentifier(\n        Identifier identifier, @Nullable TypeAnnotation typeAnnotation, Span span) {\n      super(span, Arrays.asList(identifier, typeAnnotation));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Parameter.java", "function_name": "TypedIdentifier", "index": 1413, "label": 0}
{"input": "private SelString timeoutForDateIntDeadline(SelType dateInt, SelType durationStr) {\n    DateTime dateTime = dateIntFormatter.parseDateTime(SelString.create(dateInt).toString());\n    String timeout =\n        timeoutForDateTimeDeadline(dateTime, ((SelString) durationStr).getInternalVal());\n    return SelString.of(timeout);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "timeoutForDateIntDeadline", "index": 1414, "label": 0}
{"input": "@Test\n  public void testCallSize() {\n    SelType res = orig.call(\"size\", new SelType[] {});\n    assertEquals(\"LONG: 2\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallSize", "index": 1415, "label": 0}
{"input": "@Bean\n  public MaestroMetricRepo metricRepo() {\n    LOG.info(\"Creating maestro metricRepo within Spring boot...\");\n    return new MaestroMetricRepo(new DefaultRegistry());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "metricRepo", "index": 1416, "label": 0}
{"input": "private static void saveEndpoints() {\n        Set<String> savedEndpoints = new HashSet<>();\n        for (Endpoint endpoint : endpointsList) {\n            savedEndpoints.add(endpoint.getTitle() + \"::\" + endpoint.getContent());\n        }\n        FileManager.set(\"saved_endpoints\", savedEndpoints);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "cff6122e5f374ff804e0887bfd06ee090cbd8485", "file_path": "app/src/main/java/org/bepass/oblivion/EndpointsBottomSheet.java", "function_name": "saveEndpoints", "index": 1417, "label": 0}
{"input": "public List<Pointer> patternScanAll(WinNT.HANDLE process, String pattern, int findNum) {\n        \n        List<Pointer> found = new ArrayList<>();\n        \n        long userSpaceLimit = \"amd64\".equals(System.getProperty(\"os.arch\")) ? 0x7FFFFFFF0000L : 0x7FFF0000L;\n        \n        long nextRegion = 0;\n        \n        while (nextRegion < userSpaceLimit) {\n            \n            Pair<Long, List<Pointer>> pair = scanPatternPage(process, nextRegion, pattern);\n            \n            nextRegion = pair.getLeft();\n            \n            List<Pointer> pageFound = pair.getRight();\n\n            \n            if (!pageFound.isEmpty()) {\n                found.addAll(pageFound);\n            }\n            \n            if (found.size() > findNum) {\n                break;\n            }\n        }\n        \n        return found;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a5843049851937558b49b705ecd004e1a1c6cb3", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "patternScanAll", "index": 1418, "label": 0}
{"input": "@Bean\n  @DependsOn({\"sleep\", \"noop\", \"subworkflow\", \"foreach\"})\n  public StepRuntimeManager stepRuntimeManager(\n      @Qualifier(STEP_RUNTIME_QUALIFIER) Map<StepType, StepRuntime> stepRuntimeMap,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ParamsManager paramsManager,\n      MaestroMetrics metricRepo,\n      MaestroTracingManager tracingManager) {\n    LOG.info(\"Creating Maestro StepRuntimeManager within Spring boot...\");\n    return new StepRuntimeManager(\n        stepRuntimeMap, objectMapper, paramsManager, metricRepo, tracingManager);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "stepRuntimeManager", "index": 1419, "label": 0}
{"input": "public Builder enableSource(Boolean enableSource) {\n\t\t\t\tthis.enableSource = enableSource;\n\t\t\t\treturn this;\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "enableSource", "index": 1420, "label": 0}
{"input": "@Test\n  public void testMerge() throws Exception {\n    Properties from =\n        loadObject(\"fixtures/workflows/definition/sample-properties.json\", Properties.class);\n    Properties empty = new Properties();\n    assertEquals(from, Properties.merge(from, null));\n\n    Properties to = Properties.merge(from, empty);\n    assertEquals(from, to);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/PropertiesTest.java", "function_name": "testMerge", "index": 1421, "label": 0}
{"input": "private String[] getSystemLocales() {\n        Locale[] locales = Locale.getAvailableLocales();\n        List<String> localCountries = new ArrayList<>();\n        for (Locale locale : locales) {\n            String languageTag = locale.toLanguageTag();\n            if (!languageTag.isEmpty() && !languageTag.equals(\"und\")) {\n                localCountries.add(languageTag);\n            }\n        }\n        return localCountries.toArray(new String[0]);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef6efe71d9095aa3bac552c6499646d9eeba6263", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocaleHandler.java", "function_name": "getSystemLocales", "index": 1422, "label": 0}
{"input": "@Override\n    public ChatModelVo selectModelByName(String modelName) {\n        return baseMapper.selectVoOne(Wrappers.<ChatModel>lambdaQuery().eq(ChatModel::getModelName, modelName));\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "147b3fd8f5e68c7161adec491ce9cba154a9451e", "file_path": "ruoyi-modules-api/ruoyi-chat-api/src/main/java/org/ruoyi/service/impl/ChatModelServiceImpl.java", "function_name": "selectModelByName", "index": 1423, "label": 0}
{"input": "public Builder setField1(int value) {\n\n                field1_ = value;\n                bitField0_ |= 0x00000001;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "setField1", "index": 1424, "label": 0}
{"input": "private <T> T runInternally(Callable<T> callable, Flow flow, String taskRef, String method) {\n    var future = internalWorkers.submit(callable);\n    try {\n      return future.get();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new MaestroRetryableError(\n          e,\n          \"flow task %s[%s] is interrupted for method [%s] due to [%s], retry it\",\n          method,\n          flow.getReference(),\n          taskRef,\n          e.getMessage());\n    } catch (ExecutionException | CancellationException e) {\n      throw new MaestroRetryableError(\n          e,\n          \"flow task %s[%s] is failed for method [%s] due to [%s], retry it\",\n          method,\n          flow.getReference(),\n          taskRef,\n          e.getMessage());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "runInternally", "index": 1425, "label": 0}
{"input": "private void loadClassesInPackage(String pkgName) {\n    try {\n      String path = pkgName.replace('.', '/');\n      Enumeration<URL> resources = getClass().getClassLoader().getResources(path);\n      while (resources.hasMoreElements()) {\n        URL url = resources.nextElement();\n        URLConnection conn = url.openConnection();\n        if (conn instanceof JarURLConnection) {\n          ((JarURLConnection) conn)\n              .getJarFile().stream()\n                  .forEach(jarEntry -> loadClassInPackage(path, jarEntry.getName()));\n        } else {\n          for (String name : new File(url.toURI()).list()) {\n            loadClassInPackage(path, path + \"/\" + name);\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new RuntimeException(\"Failed to load classes in the package \" + pkgName, ex);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelClassLoader.java", "function_name": "loadClassesInPackage", "index": 1426, "label": 0}
{"input": "public static FunctionToolCallback<?, ToolExecuteResult> getFunctionToolCallback(PlanningTool toolInstance) {\n\t\treturn FunctionToolCallback.builder(name, toolInstance)\n\t\t\t.description(description)\n\t\t\t.inputSchema(PARAMETERS)\n\t\t\t.inputType(PlanningInput.class)\n\t\t\t.toolMetadata(ToolMetadata.builder().returnDirect(true).build())\n\t\t\t.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b519b7c9cc1f88dafec21315dbc4bc5cb5ac4fe1", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/PlanningTool.java", "function_name": "getFunctionToolCallback", "index": 1427, "label": 0}
{"input": "@Test\n  public void testLaunchWorkflowInstanceMaestroNotFoundException() {\n    when(instance1.getStatus()).thenThrow(new MaestroNotFoundException(\"test\"));\n    workflowRunner.run(instance1, \"uuid1\");\n    verify(instance1, times(0)).getWorkflowUuid();\n    verify(flowDao, times(0)).existFlowWithSameKeys(anyLong(), anyString());\n    verify(flowOperation, times(0)).startFlow(anyLong(), any(), any(), any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowRunnerTest.java", "function_name": "testLaunchWorkflowInstanceMaestroNotFoundException", "index": 1428, "label": 0}
{"input": "@Test\n  public void testGetCallBackInSecsInvalid() {\n    Map<StepInstance.Status, Map<String, Long>> stepRuntimeCallBackDelayConfig =\n        Collections.singletonMap(\n            StepInstance.Status.RUNNING,\n            Collections.singletonMap(StepType.TITUS.getType().toLowerCase(Locale.US), 30L));\n    when(callbackDelayConfig.getFixedCallbackDelayInSecs())\n        .thenReturn(stepRuntimeCallBackDelayConfig);\n    StepRuntimeState stepRuntimeState = new StepRuntimeState();\n    stepRuntimeState.setStatus(StepInstance.Status.RUNNING);\n    StepRuntimeSummary runtimeSummary =\n        StepRuntimeSummary.builder().runtimeState(stepRuntimeState).type(StepType.NOOP).build();\n    AssertHelper.assertThrows(\n        \"default config should be defined\",\n        IllegalArgumentException.class,\n        \"StepRuntime callback delay config for RUNNING status must contain default step type setting\",\n        () -> stepRuntimeFixedCallbackDelayPolicy.getCallBackDelayInSecs(runtimeSummary));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepRuntimeFixedCallbackPolicyTest.java", "function_name": "testGetCallBackInSecsInvalid", "index": 1429, "label": 0}
{"input": "private int startFirstOnlyInstance(Connection conn, WorkflowInstance instance)\n      throws SQLException {\n    InstanceRunUuid runningOne = getNonTerminalInstance(conn, instance.getWorkflowId());\n    if (runningOne != null) {\n      int ret =\n          addStoppedInstance(\n              conn, instance, TimelineLogEvent.info(FIRST_ONLY_TIMELINE_TEMPLATE, runningOne));\n      LOG.info(\n          \"With FIRST_ONLY run strategy, add [{}] stopped instance due to a running one [{}]\",\n          ret,\n          runningOne);\n      return -ret;\n    } else {\n      return insertInstance(conn, instance, false, null);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "startFirstOnlyInstance", "index": 1430, "label": 0}
{"input": "public long getExpirationInSecs() {\n    return getLongProperty(EXPIRATION_PROPERTY_NAME, EXPIRATION_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getExpirationInSecs", "index": 1431, "label": 0}
{"input": "@Test(expected = NoClassDefFoundError.class)\n  public void testNoAccessToCreateClassLoader() {\n    new ClassLoader() {};\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessToCreateClassLoader", "index": 1432, "label": 0}
{"input": "public void navigate(String url) {\n        this.lastUrl = url;\n        if (browser != null && !browser.isDisposed()) {\n            Display.getDefault().asyncExec(() -> browser.setUrl(lastUrl));\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/tabs/WebUITabComponent.java", "function_name": "navigate", "index": 1433, "label": 0}
{"input": "private void configurePkldocTasks(NamedDomainObjectContainer<PkldocSpec> specs) {\n    specs.all(\n        spec -> {\n          configureBaseSpec(spec);\n\n          spec.getOutputDir()\n              .convention(\n                  project\n                      .getLayout()\n                      .getBuildDirectory()\n                      .map(it -> it.dir(\"pkldoc\").dir(spec.getName())));\n\n          spec.getNoSymlinks().convention(false);\n\n          createModulesTask(PkldocTask.class, spec)\n              .configure(\n                  task -> {\n                    task.getOutputDir().set(spec.getOutputDir());\n                    task.getNoSymlinks().set(spec.getNoSymlinks());\n                  });\n        });\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "baa34a6dd17e748d1d41327d04b7adcadfe1f38a", "file_path": "pkl-gradle/src/main/java/org/pkl/gradle/PklPlugin.java", "function_name": "configurePkldocTasks", "index": 1434, "label": 0}
{"input": "@JsonIgnore\n  public boolean hasTerminal() {\n    return pendingRecords.stream()\n        .map(pendingRecord -> pendingRecord.getNewStatus().isTerminal())\n        .reduce(false, Boolean::logicalOr);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/jobevents/StepInstanceUpdateJobEvent.java", "function_name": "hasTerminal", "index": 1435, "label": 0}
{"input": "@Autowired(required = false)\n    public FastGPTSSEEventSourceListener(SseEmitter emitter) {\n        this.emitter = emitter;\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "fd94a1772f4b56555b7ed17d0270335d27ba01d2", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/listener/FastGPTSSEEventSourceListener.java", "function_name": "FastGPTSSEEventSourceListener", "index": 1436, "label": 0}
{"input": "private boolean jj_3R_96() {\n    if (jj_3R_15()) return true;\n    Token xsp;\n    while (true) {\n      xsp = jj_scanpos;\n      if (jj_3_2()) {\n        jj_scanpos = xsp;\n        break;\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_96", "index": 1437, "label": 0}
{"input": "@Override\n  @TruffleBoundary\n  public int hashCode() {\n    if (cachedHash != 0) return cachedHash;\n\n    force(false);\n    var result = 0;\n    var cursor = cachedValues.getEntries();\n\n    while (cursor.advance()) {\n      var key = cursor.getKey();\n      if (key instanceof Identifier) continue;\n\n      var value = cursor.getValue();\n      assert value != null;\n      result += key.hashCode() ^ value.hashCode();\n    }\n\n    cachedHash = result;\n    return result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmMapping.java", "function_name": "hashCode", "index": 1438, "label": 0}
{"input": "@Test\n  public void testTimeTriggerUUIDWithFuzzyCron() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID4);\n    List<TimeTrigger> triggers = wfd.getWorkflow().getTimeTriggers();\n    assertEquals(6, triggers.size());\n\n    TriggerUuids uuids1 = IdHelper.toTriggerUuids(wfd.getWorkflow());\n    ((CronTimeTrigger) triggers.get(2)).setFuzzyMaxDelay(null);\n\n    TriggerUuids uuids2 = IdHelper.toTriggerUuids(wfd.getWorkflow());\n\n    assertNotSame(uuids1.getTimeTriggerUuid(), uuids2.getTimeTriggerUuid());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testTimeTriggerUUIDWithFuzzyCron", "index": 1439, "label": 0}
{"input": "private Token lexStringStartPounds() {\n    int pounds = 1;\n    while (lookahead == '#') {\n      nextChar();\n      pounds++;\n    }\n    if (lookahead == EOF) {\n      throw lexError(ErrorMessages.create(\"unexpectedEndOfFile\"), span());\n    }\n    if (lookahead != '\"') {\n      throw unexpectedChar(lookahead, \"\\\"\");\n    }\n    nextChar();\n    return lexStringStart(pounds);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexStringStartPounds", "index": 1440, "label": 0}
{"input": "@Override\n    public String avatar() {\n        WeChatVO user = UserUtil.getUser();\n\n        if (user == null) {\n            return \"\";\n        }\n\n        return contactHeadImgUrlRepository.queryHeadImgUrlByUserName(user.getWxId());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "e8526ae8bec20c379510005ef2b6ea9bfa796382", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "avatar", "index": 1441, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.listener.type\", havingValue = \"sqs\")\n  public SqsTerminateInstancesJobListener sqsTerminateInstancesJobListener(\n      TerminateInstancesJobProcessor terminateInstancesJobProcessor,\n      SqsProcessorFinalizer sqsProcessorFinalizer) {\n    LOG.info(\"Creating sqsTerminateInstancesJobListener within Spring boot...\");\n    return new SqsTerminateInstancesJobListener(\n        terminateInstancesJobProcessor, sqsProcessorFinalizer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsTerminateInstancesJobListener", "index": 1442, "label": 0}
{"input": "@Override\n    public void setProgressDisplayIndeterminate(boolean indeterminate) {\n        SwingUtilities.invokeLater(() -> {\n            progressBar.setIndeterminate(indeterminate);\n            progressBar.setStringPainted(!indeterminate);\n            Main.getGuiManager().taskbarControl().updateProgress(frame, indeterminate ? TaskbarState.INDETERMINATE : TaskbarState.NORMAL, (progress * 100));\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "3ce3d8bba615268b59851dfebfed13342d8ce9bf", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swing/SwingProgressDialog.java", "function_name": "setProgressDisplayIndeterminate", "index": 1443, "label": 0}
{"input": "public static OkHttpClient okHttpClient() {\r\n        TrustManager[] trustManagers = buildTrustManagers();\r\n        return new OkHttpClient.Builder()\r\n                .connectTimeout(60, TimeUnit.SECONDS)\r\n                .readTimeout(60, TimeUnit.SECONDS)\r\n                .writeTimeout(60, TimeUnit.SECONDS)\r\n                .sslSocketFactory(createSSLSocketFactory(trustManagers), (X509TrustManager) trustManagers[0])\r\n                .hostnameVerifier((hostName, sessino) -> true)\r\n                .retryOnConnectionFailure(false)\n                .build();\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/util/OkhttpUtil.java", "function_name": "okHttpClient", "index": 1444, "label": 0}
{"input": "private static byte[] base64Decode(String value) {\n    return Base64.getDecoder().decode(value);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/CompressorTest.java", "function_name": "base64Decode", "index": 1445, "label": 0}
{"input": "public long parseLongWithParam(\n      Function<ParamDefinition, Parameter> paramParser,\n      LongUnaryOperator operator,\n      Function<String, Long> elseOperator) {\n    if (longValue != null) {\n      return operator.applyAsLong(longValue);\n    } else {\n      String parsed = StringParser.parseWithParam(stringValue, paramParser);\n      OptionalLong val = Checks.toNumeric(parsed);\n      if (val.isPresent()) {\n        return operator.applyAsLong(val.getAsLong());\n      } else {\n        return elseOperator.apply(parsed);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/ParsableLong.java", "function_name": "parseLongWithParam", "index": 1446, "label": 0}
{"input": "private String getStepFromStepReq(String stepRequirement) {\n\t\tMatcher matcher = pattern.matcher(stepRequirement);\n\t\tif (matcher.find()) {\n\t\t\t\n\t\t\treturn matcher.group(1).trim().toLowerCase();\n\t\t}\n\t\treturn \"DEFAULT_AGENT\"; \n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/executor/PlanExecutor.java", "function_name": "getStepFromStepReq", "index": 1447, "label": 0}
{"input": "@JsonCreator\n  public static ExternalJobType forValues(String externalJobType) {\n    return ExternalJobType.valueOf(externalJobType.toUpperCase(Locale.US));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dto/ExternalJobType.java", "function_name": "forValues", "index": 1448, "label": 0}
{"input": "private <T> T payloadFromResult(ResultSet result, Class<T> clazz) throws SQLException {\n    if (result.next()) {\n      String payload = result.getString(PAYLOAD_COLUMN);\n      if (payload != null && !payload.isEmpty()) {\n        return fromJson(payload, clazz);\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "payloadFromResult", "index": 1449, "label": 0}
{"input": "@JsonIgnore\n  @Override\n  public TimelineEvent getTimelineEvent() {\n    return TimelineLogEvent.info(\n        \"%s step (%s) runs a new workflow instance\", getType().name(), getParent());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/initiator/UpstreamInitiator.java", "function_name": "getTimelineEvent", "index": 1450, "label": 0}
{"input": "public Builder citationFormat(String citationFormat) {\n\t\t\t\tthis.citationFormat = citationFormat;\n\t\t\t\treturn this;\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "citationFormat", "index": 1451, "label": 0}
{"input": "@Override\n  public void onWorkflowTerminated(Workflow workflow) {\n    LOG.trace(\n        \"Workflow {} is terminated with status {}\", workflow.getWorkflowId(), workflow.getStatus());\n    metrics.counter(\n        MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n        getClass(),\n        TYPE_TAG,\n        \"onWorkflowTerminated\",\n        MetricConstants.STATUS_TAG,\n        workflow.getStatus().name());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListener.java", "function_name": "onWorkflowTerminated", "index": 1452, "label": 0}
{"input": "@Test\n    public void xlsTest3() throws IOException {\n        try (ExcelReader reader = EasyExcel.read(\n                Files.newInputStream(Paths.get(\"src/test/resources/repeat/repeat.xls\")), LockData.class,\n                new RepeatListener()).headRowNumber(0).build()) {\n            ReadSheet r2 = EasyExcel.readSheet(0).build();\n            reader.read(r2);\n            reader.finish();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "179dca17c46b409b27904d552e011f733fcea33e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "xlsTest3", "index": 1453, "label": 0}
{"input": "private void setNextActiveWorkflow(MaestroWorkflowVersion mwv, PropertiesSnapshot snapshot) {\n      this.activeVersionId = mwv.getMetadata().getWorkflowVersionId();\n      this.workflow = mwv.getDefinition();\n      this.propertiesSnapshot = snapshot;\n      this.triggerUuids = mwv.getTriggerUuids();\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "setNextActiveWorkflow", "index": 1454, "label": 0}
{"input": "public static JSONObject saveContractList(String appId, Integer operType,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomName\",operType);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/saveContractList\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "saveContractList", "index": 1455, "label": 0}
{"input": "private void prepareLongField(\n      StringBuilder fields, String fieldName, List<StatementPreparer> preparers, Long data) {\n    final int idx = getIndex(fields, fieldName, preparers, data);\n    if (idx > 0) {\n      preparers.add(stmt -> stmt.setLong(idx, data));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "prepareLongField", "index": 1456, "label": 0}
{"input": "public static Status fromCode(int code) {\n      switch (code) {\n        case 1:\n          return WORKFLOW_RUN_CREATED;\n        case 0:\n          return DUPLICATED;\n        case -1:\n          return STOPPED;\n        default:\n          throw new MaestroInternalError(\"Invalid status code value: %s\", code);\n      }\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunResponse.java", "function_name": "fromCode", "index": 1457, "label": 0}
{"input": "private Pair<ExpressionNode[], Boolean> createCollectionArgumentNodes(ArgumentList exprs) {\n    var args = exprs.getArguments();\n    var elementNodes = new ExpressionNode[args.size()];\n    var isConstantNodes = true;\n\n    for (var i = 0; i < elementNodes.length; i++) {\n      var exprNode = visitExpr(args.get(i));\n      elementNodes[i] = exprNode;\n      isConstantNodes = isConstantNodes && exprNode instanceof ConstantNode;\n    }\n\n    return Pair.of(elementNodes, isConstantNodes);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "createCollectionArgumentNodes", "index": 1458, "label": 0}
{"input": "private void observeConnectionStatus() {\n        if (!isBound) return;\n        OblivionVpnService.registerConnectionStateObserver(getKey(), serviceMessenger, state -> {\n            if (lastKnownConnectionState == state) return;\n            lastKnownConnectionState = state;\n            onConnectionStateChange(state);\n        });\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "6e6c12953686010988522c567ecff5e9fe7a567f", "file_path": "app/src/main/java/org/bepass/oblivion/ConnectionAwareBaseActivity.java", "function_name": "observeConnectionStatus", "index": 1459, "label": 0}
{"input": "public SubMessage2.Builder addMessage2Builder(\n                    int index) {\n                return getMessage2FieldBuilder().addBuilder(\n                        index, SubMessage2.getDefaultInstance());\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "addMessage2Builder", "index": 1460, "label": 0}
{"input": "public ParameterList getParamList() {\n      return (ParameterList) children.get(identifierOffset + 2);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectMember.java", "function_name": "getParamList", "index": 1461, "label": 0}
{"input": "@Test\n  public void testUpdateTaskMissingChecksum() {\n    executionDao.updateTask(task);\n    Task actual = maestroExecutionDao.getTask(TEST_TASK_ID);\n    assertNull(actual.getWorkerId());\n    assertEquals(0, actual.getPollCount());\n    assertEquals(0, actual.getUpdateTime());\n\n    \n    maestroExecutionDao.updateTask(task);\n    actual = maestroExecutionDao.getTask(TEST_TASK_ID);\n    assertEquals(\"df52193d782fd8e02292a75504ce6eb7\", actual.getWorkerId());\n    assertEquals(1, actual.getPollCount());\n    assertEquals(0, actual.getUpdateTime());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/conductor/cockroachdb/dao/MaestroCockroachDBExecutionDaoTest.java", "function_name": "testUpdateTaskMissingChecksum", "index": 1462, "label": 0}
{"input": "public WorkflowInstance getWorkflowInstanceRunByUuid(String workflowId, String uuid) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_WORKFLOW_INSTANCE_BY_UUID_QUERY,\n                stmt -> {\n                  stmt.setString(1, workflowId);\n                  stmt.setString(2, uuid);\n                },\n                result -> {\n                  if (result.next()) {\n                    return workflowInstanceFromResult(result);\n                  }\n                  return null;\n                }),\n        \"getWorkflowInstanceRunByUuid\",\n        \"Failed to get the workflow instance for [{}][{}]\",\n        workflowId,\n        uuid);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "getWorkflowInstanceRunByUuid", "index": 1463, "label": 0}
{"input": "@BeforeEach\n    public void startServer() {\n        this.mockServer = ClientAndServer.startClientAndServer();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "e7cdb88175ac54ef50345a2191d51644f2bb3d2b", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/read/WebStreamReadTest.java", "function_name": "startServer", "index": 1464, "label": 0}
{"input": "protected InvokeMethodVirtualNode(\n      SourceSection sourceSection,\n      Identifier methodName,\n      ExpressionNode[] argumentNodes,\n      MemberLookupMode lookupMode) {\n    this(sourceSection, methodName, argumentNodes, lookupMode, false);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/member/InvokeMethodVirtualNode.java", "function_name": "InvokeMethodVirtualNode", "index": 1465, "label": 0}
{"input": "private void disposeBrowser() {\n        if (browser != null && !browser.isDisposed()) {\n            browser.dispose();\n            browser = null;\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/tabs/WebUITabComponent.java", "function_name": "disposeBrowser", "index": 1466, "label": 0}
{"input": "public String GetImage() {\n    if (bufpos >= tokenBegin) return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);\n    else\n      return new String(buffer, tokenBegin, bufsize - tokenBegin)\n          + new String(buffer, 0, bufpos + 1);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "GetImage", "index": 1467, "label": 0}
{"input": "public static JSONObject checkOnline(String appId) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        return OkhttpUtil.postJSON(\"/login/checkOnline\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "checkOnline", "index": 1468, "label": 0}
{"input": "private List<List<String>> head() {\n        List<List<String>> list = new ArrayList<List<String>>();\n        List<String> head0 = new ArrayList<String>();\n        head0.add(\"字符串\" + System.currentTimeMillis());\n        head0.add(\"再找找\");\n        List<String> head1 = new ArrayList<String>();\n        head1.add(\"数字\" + System.currentTimeMillis());\n        List<String> head2 = new ArrayList<String>();\n        head2.add(\"日期\" + System.currentTimeMillis());\n        List<String> head3 = new ArrayList<String>();\n        head3.add(\"日期\" + System.currentTimeMillis());\n        list.add(head0);\n        list.add(head1);\n        list.add(head2);\n        list.add(head3);\n        \n        return list;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/WriteV34Test.java", "function_name": "head", "index": 1469, "label": 0}
{"input": "private Rectangle calculateImageRectangle(XSSFClientAnchor clientAnchor) {\n        CellRenderer cellRenderer1 = rows.get(clientAnchor.getRow1())[clientAnchor.getCol1()];\n        CellRenderer cellRenderer2 = rows.get(clientAnchor.getRow2())[clientAnchor.getCol2()];\n        Rectangle rect1 = cellRenderer1.getOccupiedAreaBBox();\n        Rectangle rect2 = cellRenderer2.getOccupiedAreaBBox();\n\n        float widthRate = (super.getOccupiedAreaBBox().getWidth() + rect2.getWidth()) / getExcelWidth(sheet);\n        float heightRate = (super.getOccupiedAreaBBox().getHeight() - rect2.getHeight()) / getExcelHeight(sheet);\n\n        float width = calculateImageWidth(clientAnchor, widthRate);\n        float height = calculateImageHeight(clientAnchor, heightRate);\n\n        float x = rect1.getLeft() + clientAnchor.getDx1() * widthRate;\n        float y = rect1.getTop() - height - clientAnchor.getDy1() * heightRate;\n\n        return new Rectangle(x, y, width, height);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxImageTableRenderer.java", "function_name": "calculateImageRectangle", "index": 1470, "label": 0}
{"input": "public static JSONObject postText(String appId, String toWxid, String content, String ats) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"content\", content);\r\n        param.put(\"ats\", ats);\r\n        return OkhttpUtil.postJSON(\"/message/postText\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postText", "index": 1471, "label": 0}
{"input": "public JJTSelParserState() {\n    nodes = new java.util.ArrayList<Node>();\n    marks = new java.util.ArrayList<Integer>();\n    sp = 0;\n    mk = 0;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JJTSelParserState.java", "function_name": "JJTSelParserState", "index": 1472, "label": 0}
{"input": "private Map<String, Boolean> run(String expr) throws Exception {\n    selParser.ReInit(new ByteArrayInputStream(expr.getBytes()));\n    ASTExecute n = selParser.Execute();\n    Map<String, Boolean> res = new HashMap<>();\n    n.jjtAccept(visitor, res);\n    return res;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserValidationVisitorTest.java", "function_name": "run", "index": 1473, "label": 0}
{"input": "public static TriggerUuids toTriggerUuids(Workflow workflow) {\n    TriggerUuids.TriggerUuidsBuilder builder = TriggerUuids.builder();\n    if (workflow.getTimeTriggers() != null && !workflow.getTimeTriggers().isEmpty()) {\n      builder.timeTriggerUuid(\n          IdHelper.createUuid(workflow.getTimeTriggers().toString()).toString());\n    }\n    if (workflow.getSignalTriggers() != null && !workflow.getSignalTriggers().isEmpty()) {\n      builder.signalTriggerUuids(\n          IntStream.range(0, workflow.getSignalTriggers().size())\n              .boxed()\n              .collect(\n                  Collectors.toMap(\n                      e ->\n                          IdHelper.createUuid(workflow.getSignalTriggers().get(e).toString())\n                              .toString(),\n                      Function.identity())));\n    }\n    return builder.build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/IdHelper.java", "function_name": "toTriggerUuids", "index": 1474, "label": 0}
{"input": "private void wakeupUnderlyingTask(String failedStepUuid) {\n    try {\n      workflowExecutor.resetTaskOffset(failedStepUuid);\n    } catch (ApplicationException ex) {\n      \n      throw new MaestroRetryableError(\n          ex, \"running into an exception while waking up underlying task, will try again\");\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/StepInstanceWakeUpEventProcessor.java", "function_name": "wakeupUnderlyingTask", "index": 1475, "label": 0}
{"input": "@Bean\n\tpublic ChatClient coderAgent(ChatClient.Builder coderChatClientBuilder, PythonCoderProperties coderProperties,\n\t\t\tMcpClientToolCallbackProvider mcpClientToolCallbackProvider) {\n\t\tSet<ToolCallback> defineCallback = mcpClientToolCallbackProvider.findToolCallbacks(\"coderAgent\");\n\t\treturn coderChatClientBuilder.defaultSystem(ResourceUtil.loadResourceAsString(coderPrompt))\n\t\t\t.defaultTools(new PythonReplTool(coderProperties))\n\t\t\t.defaultToolCallbacks(defineCallback.toArray(ToolCallback[]::new))\n\t\t\t.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "coderAgent", "index": 1476, "label": 0}
{"input": "private List<CacheInvokeMemoryData> dataInvokeMemory() {\n        List<CacheInvokeMemoryData> list = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            CacheInvokeMemoryData simpleData = new CacheInvokeMemoryData();\n            simpleData.setName(\"姓名\" + i);\n            simpleData.setAge((long) i);\n            list.add(simpleData);\n        }\n        return list;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/cache/CacheDataTest.java", "function_name": "dataInvokeMemory", "index": 1477, "label": 0}
{"input": "public boolean reportFileExists(String threadId, String format) {\n\t\tString filePath = getReportFilePath(threadId, format);\n\t\treturn FileOperationUtil.fileExists(filePath);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/service/ExportService.java", "function_name": "reportFileExists", "index": 1478, "label": 0}
{"input": "void runActionFor(BaseActor actor, Action action) {\n    try {\n      context.run(actor);\n      actor.post(action);\n      childActors.put(actor.reference(), actor);\n    } catch (RejectedExecutionException re) {\n      getLogger()\n          .warn(\n              \"The whole Maestro flow engine is shutdown and cannot take action [{}] for [{}], Ignore the action.\",\n              action,\n              actor.reference());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "runActionFor", "index": 1479, "label": 0}
{"input": "private void tryTerminateQueuedInstancesIfNeeded(ForeachArtifact artifact) {\n    if (artifact.getForeachOverview() != null\n        && artifact.getForeachOverview().statusExistInIterations(WorkflowInstance.Status.CREATED)) {\n      int terminated = Constants.TERMINATE_BATCH_LIMIT;\n      int totalTerminated = 0;\n      while (terminated == Constants.TERMINATE_BATCH_LIMIT) {\n        terminated =\n            instanceDao.terminateQueuedInstances(\n                artifact.getForeachWorkflowId(),\n                Constants.TERMINATE_BATCH_LIMIT,\n                WorkflowInstance.Status.STOPPED,\n                \"The queued workflow instance is terminated by its upstream foreach step.\");\n        totalTerminated += terminated;\n      }\n      LOG.info(\n          \"Foreach step terminated [{}] queued foreach instances with foreach artifact{}.\",\n          totalTerminated,\n          artifact);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "tryTerminateQueuedInstancesIfNeeded", "index": 1480, "label": 0}
{"input": "@Test\n  public void testGetMinMaxInstanceId() throws Exception {\n    List<WorkflowInstance> insertionList = new ArrayList<>();\n    try {\n      for (int i = 1; i <= 25; i++) {\n        WorkflowInstance wfi = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n        wfi.setWorkflowUuid(\"wfi1-uuid-\" + i);\n        wfi.setWorkflowInstanceId(100 + i);\n        insertionList.add(wfi);\n      }\n      instanceDao.runWorkflowInstances(TEST_WORKFLOW_ID, insertionList, insertionList.size());\n      long[] ids = instanceDao.getMinMaxWorkflowInstanceIds(wfi.getWorkflowId());\n      assertEquals(125, ids[1]);\n      assertEquals(1, ids[0]);\n    } finally {\n      \n      for (int i = 1; i <= 25; i++) {\n        MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, 100 + i);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetMinMaxInstanceId", "index": 1481, "label": 0}
{"input": "public CsvWriterBuilder recordSeparator(String recordSeparator) {\n        if (recordSeparator != null) {\n            this.csvFormatBuilder.setRecordSeparator(recordSeparator);\n        }\n        return this;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/CsvWriterBuilder.java", "function_name": "recordSeparator", "index": 1482, "label": 0}
{"input": "@Test\n  public void testTryExecuteTriggerIfNotMatch() throws Exception {\n    SignalTriggerMatch triggerMatch =\n        loadObject(\"fixtures/sample-signal-trigger-match.json\", SignalTriggerMatch.class);\n    when(triggerDao.getTriggerForUpdate(any(), any(), any()))\n        .thenReturn(\n            new SignalTriggerDto(\n                \"sample-workflow-1\",\n                \"test-uuid-1\",\n                \"{}\",\n                new String[] {\"signal_a\", \"signal_b\"},\n                new Long[] {0L, 2L}));\n    assertEquals(0, brokerDao.tryExecuteTrigger(triggerMatch));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testTryExecuteTriggerIfNotMatch", "index": 1483, "label": 0}
{"input": "protected <T> T withReadOnlyQuery(\n      final String statement, StatementPreparer preparer, ResultProcessor<T> processor) {\n    try (Connection conn = dataSource.getConnection();\n        PreparedStatement stmt = conn.prepareStatement(statement)) {\n      if (isFollowerReadsEnabled) {\n        try (PreparedStatement stmt1 = conn.prepareStatement(SET_FOLLOWER_READS_MODE)) {\n          stmt1.executeUpdate();\n        }\n      }\n      preparer.prepare(stmt);\n      try (ResultSet result = stmt.executeQuery()) {\n        return processor.process(result);\n      }\n    } catch (SQLException e) {\n      LOG.error(\n          \"with readOnlyQuery, non-retryable exception occurred: sql state = [{}], message = [{}]\",\n          e.getSQLState(),\n          e.getMessage());\n      throw new ApplicationException(BACKEND_ERROR, e.getMessage(), e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "withReadOnlyQuery", "index": 1484, "label": 0}
{"input": "public WriteContextImpl(WriteWorkbook writeWorkbook) {\n        if (writeWorkbook == null) {\n            throw new IllegalArgumentException(\"Workbook argument cannot be null\");\n        }\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Begin to Initialization 'WriteContextImpl'\");\n        }\n        initCurrentWorkbookHolder(writeWorkbook);\n        \n        WorkbookWriteHandlerContext workbookWriteHandlerContext = WriteHandlerUtils.createWorkbookWriteHandlerContext(\n                this);\n        WriteHandlerUtils.beforeWorkbookCreate(workbookWriteHandlerContext);\n        try {\n            WorkBookUtil.createWorkBook(writeWorkbookHolder);\n        } catch (Exception e) {\n            throw new ExcelGenerateException(\"Create workbook failure\", e);\n        }\n        WriteHandlerUtils.afterWorkbookCreate(workbookWriteHandlerContext);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Initialization 'WriteContextImpl' complete\");\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/WriteContextImpl.java", "function_name": "WriteContextImpl", "index": 1485, "label": 0}
{"input": "private void maybeForceBuilderInitialization() {\n                if (com.google.protobuf.GeneratedMessageV3\n                        .alwaysUseFieldBuilders) {\n                    getMessage1FieldBuilder();\n                    getMessage2FieldBuilder();\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "maybeForceBuilderInitialization", "index": 1486, "label": 0}
{"input": "@Test\n  public void testDefinitionChangeEventRoundTripSerde() throws Exception {\n    WorkflowVersionUpdateJobEvent sampleEvent =\n        loadObject(\n            \"fixtures/jobevents/sample-workflow-definition-job-event.json\",\n            WorkflowVersionUpdateJobEvent.class);\n    assertEquals(\n        sampleEvent,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(sampleEvent), WorkflowVersionUpdateJobEvent.class));\n\n    MaestroEvent event = sampleEvent.toMaestroEvent(\"test-cluster\");\n    assertEquals(MaestroEvent.Type.WORKFLOW_DEFINITION_CHANGE_EVENT, event.getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/jobevents/WorkflowVersionUpdateJobEventTest.java", "function_name": "testDefinitionChangeEventRoundTripSerde", "index": 1487, "label": 0}
{"input": "public StepInstance getStepInstance(\n      String workflowId,\n      long workflowInstanceId,\n      long workflowRunId,\n      String stepId,\n      String stepAttempt) {\n    return getStepInstanceFieldByIds(\n        StepInstanceField.ALL,\n        workflowId,\n        workflowInstanceId,\n        workflowRunId,\n        stepId,\n        stepAttempt,\n        this::maestroStepFromResult);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepInstance", "index": 1488, "label": 0}
{"input": "protected Token jjFillToken() {\n    final Token t;\n    final String curTokenImage;\n    final int beginLine;\n    final int endLine;\n    final int beginColumn;\n    final int endColumn;\n    String im = jjstrLiteralImages[jjmatchedKind];\n    curTokenImage = (im == null) ? input_stream.GetImage() : im;\n    beginLine = input_stream.getBeginLine();\n    beginColumn = input_stream.getBeginColumn();\n    endLine = input_stream.getEndLine();\n    endColumn = input_stream.getEndColumn();\n    t = Token.newToken(jjmatchedKind, curTokenImage);\n\n    t.beginLine = beginLine;\n    t.endLine = endLine;\n    t.beginColumn = beginColumn;\n    t.endColumn = endColumn;\n\n    return t;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjFillToken", "index": 1489, "label": 0}
{"input": "@Test\n  public void isStepEmpty() {\n    Workflow workflow = Workflow.builder().steps(new ArrayList<>()).build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\"[workflow step definitions] cannot be null or empty\", violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isStepEmpty", "index": 1490, "label": 0}
{"input": "@Test\n  public void testEnqueueWithoutConnectionWithError() {\n    when(queueDao.enqueue(any(), anyLong())).thenThrow(new RuntimeException(\"test\"));\n    var res = queueSystem.enqueue(jobEvent);\n    assertTrue(res.isPresent());\n    assertEquals(\"Failed to publish a Maestro job event\", res.get().getMessage());\n    verify(eventQueues, times(1)).get(eq(MaestroJobEvent.Type.START_WORKFLOW));\n    verify(queueDao, times(1)).enqueue(any(), anyLong());\n    verify(metrics, times(1))\n        .counter(\n            MetricConstants.QUEUE_SYSTEM_ENQUEUE_ERROR,\n            MaestroQueueSystem.class,\n            MetricConstants.TYPE_TAG,\n            \"START_WORKFLOW\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/MaestroQueueSystemTest.java", "function_name": "testEnqueueWithoutConnectionWithError", "index": 1491, "label": 0}
{"input": "default LongArrayParamDefinition asLongArrayParamDef() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as LONG_ARRAY\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "asLongArrayParamDef", "index": 1492, "label": 0}
{"input": "public Node popNode() {\n    if (--sp < mk) {\n      mk = marks.remove(marks.size() - 1);\n    }\n    return nodes.remove(nodes.size() - 1);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JJTSelParserState.java", "function_name": "popNode", "index": 1493, "label": 0}
{"input": "@Test\n  public void testRunForActionTaskPingForInactiveRunningTaskWithoutChange() {\n    task.setActive(false);\n\n    taskActor.runForAction(Action.TASK_PING);\n    verify(context, times(0)).execute(any(), any());\n    assertTrue(taskActor.getScheduledActions().isEmpty());\n    assertEquals(0, task.getPollCount());\n    verify(context, times(0)).cloneTask(any());\n    verifyEmptyAction(flowActor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionTaskPingForInactiveRunningTaskWithoutChange", "index": 1494, "label": 0}
{"input": "@Override\n    public void afterCellDispose(CellWriteHandlerContext context) {\n        Cell cell = context.getCell();\n        \n        log.info(\"第{}行，第{}列写入完成。\", cell.getRowIndex(), cell.getColumnIndex());\n        if (BooleanUtils.isTrue(context.getHead()) && cell.getColumnIndex() == 0) {\n            CreationHelper createHelper = context.getWriteSheetHolder().getSheet().getWorkbook().getCreationHelper();\n            Hyperlink hyperlink = createHelper.createHyperlink(HyperlinkType.URL);\n            hyperlink.setAddress(\"https://github.com/fast-excel/fastexcel\");\n            cell.setHyperlink(hyperlink);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48a8c2b36277eef512023b5f9fa6b2615833a274", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/CustomCellWriteHandler.java", "function_name": "afterCellDispose", "index": 1495, "label": 0}
{"input": "public com.google.protobuf.ByteString\n            getWxIdBytes() {\n                Object ref = wxId_;\n                if (ref instanceof String) {\n                    com.google.protobuf.ByteString b =\n                            com.google.protobuf.ByteString.copyFromUtf8(\n                                    (String) ref);\n                    wxId_ = b;\n                    return b;\n                } else {\n                    return (com.google.protobuf.ByteString) ref;\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getWxIdBytes", "index": 1496, "label": 0}
{"input": "private boolean updateMaestroWorkflowInstance(\n      WorkflowSummary workflowSummary,\n      WorkflowRuntimeSummary runtimeSummary,\n      WorkflowRuntimeOverview newOverview,\n      WorkflowInstance.Status nextStatus,\n      long markTime) {\n    Optional<Details> updated =\n        instanceDao.updateWorkflowInstance(\n            workflowSummary, newOverview, runtimeSummary.getTimeline(), nextStatus, markTime);\n    if (updated.isPresent()) {\n      runtimeSummary.addTimeline(TimelineDetailsEvent.from(updated.get()));\n      return false;\n    }\n\n    Optional<Details> sent =\n        publisher.publish(\n            WorkflowInstanceUpdateJobEvent.create(\n                workflowSummary, runtimeSummary, nextStatus, markTime));\n    if (sent.isPresent()) {\n      runtimeSummary.addTimeline(TimelineDetailsEvent.from(sent.get()));\n      return false;\n    }\n\n    runtimeSummary.updateRuntimeState(nextStatus, newOverview, markTime);\n    return true;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroEndTask.java", "function_name": "updateMaestroWorkflowInstance", "index": 1497, "label": 0}
{"input": "public static String markdownToHtml(String markdownContent) {\n\t\tString htmlContent = convertMarkdownToHtml(markdownContent);\n\t\treturn wrapHtmlContent(htmlContent);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/HtmlGenerationUtil.java", "function_name": "markdownToHtml", "index": 1498, "label": 0}
{"input": "@Bean(name = \"TaskMappers\")\n  public Map<String, TaskMapper> taskMapperMap(\n      ParametersUtils parametersUtils, MetadataDAO metadataDAO) {\n    LOG.info(\"Creating taskMapperMap within Spring boot...\");\n    Map<String, TaskMapper> mappers = new HashMap<>();\n    mappers.put(TaskType.TASK_TYPE_JOIN, new JoinTaskMapper());\n    mappers.put(TaskType.TASK_TYPE_FORK_JOIN, new ForkJoinTaskMapper());\n    mappers.put(TaskType.TASK_TYPE_EXCLUSIVE_JOIN, new ExclusiveJoinTaskMapper());\n    mappers.put(\n        TaskType.TASK_TYPE_USER_DEFINED, new UserDefinedTaskMapper(parametersUtils, metadataDAO));\n    return Collections.unmodifiableMap(mappers);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "taskMapperMap", "index": 1499, "label": 0}
{"input": "@Test\n  public void testUnblockZero() {\n    when(instanceDao.tryUnblockFailedWorkflowInstances(eq(\"sample-minimal-wf\"), anyInt(), any()))\n        .thenReturn(0);\n    TimelineEvent event = actionHandler.unblock(\"sample-minimal-wf\", tester);\n    assertEquals(\"Unblocked [0] failed workflow instances.\", event.getMessage());\n    verify(instanceDao, times(1))\n        .tryUnblockFailedWorkflowInstances(eq(\"sample-minimal-wf\"), anyInt(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testUnblockZero", "index": 1500, "label": 0}
{"input": "private static String getEvaluatedResultAsString(String paramName, Parameter param) {\n    switch (param.getType()) {\n      case STRING_ARRAY:\n      case DOUBLE_ARRAY:\n      case LONG_ARRAY:\n      case BOOLEAN_ARRAY:\n      case MAP:\n      case STRING_MAP:\n        try {\n          Object result = param.getEvaluatedResult();\n          return MAPPER.writeValueAsString(result);\n        } catch (JsonProcessingException e) {\n          throw new MaestroInternalError(e, \"Cannot evaluate [%s] as string due to\", paramName);\n        }\n      default:\n        return param.getEvaluatedResultString();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/LiteralEvaluator.java", "function_name": "getEvaluatedResultAsString", "index": 1501, "label": 0}
{"input": "private void setupStepInstanceForBypassDependencies() {\n    stepInstance.getRuntimeState().setStatus(StepInstance.Status.WAITING_FOR_SIGNALS);\n    stepInstance.getStepRetry().setRetryable(false);\n    ((TypedStep) stepInstance.getDefinition()).setFailureMode(FailureMode.FAIL_AFTER_RUNNING);\n    stepInstanceDao.insertOrUpsertStepInstance(stepInstance, true);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "setupStepInstanceForBypassDependencies", "index": 1502, "label": 0}
{"input": "private void updateVariableType(Program program, HighSymbol symbol, DataType dataType, AtomicBoolean success) {\n        int tx = program.startTransaction(\"Set variable type\");\n        try {\n            \n            HighFunctionDBUtil.updateDBVariable(\n                symbol,                \n                symbol.getName(),      \n                dataType,              \n                SourceType.USER_DEFINED \n            );\n            \n            success.set(true);\n            Msg.info(this, \"Successfully set variable type using HighFunctionDBUtil\");\n        } catch (Exception e) {\n            Msg.error(this, \"Error setting variable type: \" + e.getMessage());\n        } finally {\n            program.endTransaction(tx, success.get());\n        }\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "updateVariableType", "index": 1503, "label": 0}
{"input": "void validateGraph() throws GraphStateException {\n\t\tvar edgeStart = edges.edgeBySourceId(START).orElseThrow(Errors.missingEntryPoint::exception);\n\n\t\tedgeStart.validate(nodes);\n\n\t\tvalidateNode(nodes);\n\n\t\tfor (Edge edge : edges.elements) {\n\t\t\tedge.validate(nodes);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b96b23a5859c99b4b9f1e8895d9eee02ff7069d5", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/StateGraph.java", "function_name": "validateGraph", "index": 1504, "label": 0}
{"input": "@Test\n  public void testUpdateTriggerCheckpoints() throws Exception {\n    assertTrue(triggerDao.updateTriggerCheckpoints(conn, \"test-wf\", \"uuid1\", new Long[] {1L, 2L}));\n    conn.commit();\n    SignalTriggerDto triggerDto = triggerDao.getTriggerForUpdate(conn, \"test-wf\", \"uuid1\");\n    conn.commit();\n    assertEquals(\"test-wf\", triggerDto.workflowId());\n    assertEquals(\"uuid1\", triggerDto.triggerUuid());\n    assertArrayEquals(new String[] {\"signal_a\", \"signal_b\"}, triggerDto.signals());\n    assertArrayEquals(new Long[] {1L, 2L}, triggerDto.checkpoints());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalTriggerDaoTest.java", "function_name": "testUpdateTriggerCheckpoints", "index": 1505, "label": 0}
{"input": "public static boolean isHexDigit(char ch) {\n    return switch (ch) {\n      case '0',\n          '1',\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          '1'0,\n          '1'1,\n          '1'2,\n          '1'3,\n          '1'4,\n          '1'5,\n          '1'6,\n          '1'7,\n          '1'8,\n          '1'9,\n          '2'0,\n          '2'1 ->\n          true;\n      default -> false;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/IoUtils.java", "function_name": "isHexDigit", "index": 1506, "label": 0}
{"input": "private List<StepAttemptState> stepAttemptStateFromResult(ResultSet rs) throws SQLException {\n    List<StepAttemptState> ret = new ArrayList<>();\n    while (rs.next()) {\n      ret.add(maestroStepAttemptStateFromResult(rs));\n    }\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "stepAttemptStateFromResult", "index": 1507, "label": 0}
{"input": "default boolean isFlywayEnabled() {\n    return getBoolProperty(FLYWAY_ENABLED_PROPERTY_NAME, FLYWAY_ENABLED_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "isFlywayEnabled", "index": 1508, "label": 0}
{"input": "@JsonIgnore\n  public static TimelineDetailsEvent from(Details details) {\n    return TimelineDetailsEvent.builder()\n        .status(details.getStatus())\n        .message(details.getMessage())\n        .errors(details.getErrors())\n        .retryable(details.isRetryable())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineDetailsEvent.java", "function_name": "from", "index": 1509, "label": 0}
{"input": "private InstanceRunUuid getLastOnlyRunningInstance(Connection conn, String workflowId)\n      throws SQLException {\n    InstanceRunUuid instanceRunUuid = null;\n    try (PreparedStatement wfiStmt = conn.prepareStatement(GET_RUNNING_INSTANCES_QUERY)) {\n      wfiStmt.setString(1, workflowId);\n      try (ResultSet result = wfiStmt.executeQuery()) {\n        if (result.next()) {\n          instanceRunUuid = readInstanceRunUuidFromResult(result);\n          Checks.checkTrue(\n              !result.next(),\n              \"Invalid case: finding more than 1 running instances beside [%s] with LAST_ONLY run strategy.\",\n              instanceRunUuid);\n        }\n      }\n    }\n    return instanceRunUuid;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "getLastOnlyRunningInstance", "index": 1510, "label": 0}
{"input": "@Override\n\tpublic boolean savePlanExecutionRecords(String planId) {\n\t\tPlanExecutionRecord record = planRecords.get(planId);\n\t\tif (record == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\n\t\t\n\t\trecord.save();\n\t\treturn true;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/recorder/DefaultPlanExecutionRecorder.java", "function_name": "savePlanExecutionRecords", "index": 1511, "label": 0}
{"input": "@Test\n  public void testValidateFailWorkflowMerge() {\n    when(paramsManager.generateMergedWorkflowParams(any(), any()))\n        .thenThrow(new MaestroValidationException(\"Error validating\"));\n    when(paramsManager.generateMergedStepParams(any(), any(), any(), any()))\n        .thenReturn(new LinkedHashMap<>());\n    AssertHelper.assertThrows(\n        \"validation error\",\n        MaestroDryRunException.class,\n        \"Exception during dry run validation\",\n        () -> dryRunValidator.validate(definition.getWorkflow(), user));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/validations/DryRunValidatorTest.java", "function_name": "testValidateFailWorkflowMerge", "index": 1512, "label": 0}
{"input": "private <T> List<T> parseListOf(Token separator, Supplier<T> parser) {\n    var res = new ArrayList<T>();\n    res.add(parser.get());\n    while (lookahead == separator) {\n      next();\n      res.add(parser.get());\n    }\n    return res;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseListOf", "index": 1513, "label": 0}
{"input": "public static StepAction createTerminate(\n      Actions.StepInstanceAction action,\n      StepInstance stepInstance,\n      User user,\n      String reason,\n      boolean workflowAction) {\n    return create(action, stepInstance, user, reason, workflowAction, null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/StepAction.java", "function_name": "createTerminate", "index": 1514, "label": 0}
{"input": "private boolean signalsReady(WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n    return signalHandler.signalsReady(workflowSummary, runtimeSummary);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "signalsReady", "index": 1515, "label": 0}
{"input": "static boolean isUserDefinedTask(Task task) {\n    return Constants.USER_DEFINED_TASKS.contains(task.getTaskType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "isUserDefinedTask", "index": 1516, "label": 0}
{"input": "private StepInstance.Status getUserErrorStatus(StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary.getStepRetry().hasReachedErrorRetryLimit()) {\n      return StepInstance.Status.FATALLY_FAILED;\n    } else {\n      return StepInstance.Status.USER_FAILED;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeManager.java", "function_name": "getUserErrorStatus", "index": 1517, "label": 0}
{"input": "@Test\n  public void testTraceContextTransform() {\n    long traceIdHigh = 123L;\n    long traceIdLow = 456L;\n    long spanId = 789L;\n    long parentId = 999L;\n    TraceContext from =\n        TraceContext.newBuilder()\n            .traceId(traceIdLow)\n            .traceIdHigh(traceIdHigh)\n            .spanId(spanId)\n            .parentId(parentId)\n            .sampled(true)\n            .build();\n    MaestroTracingContext actual = MaestroTracingContext.fromTraceContext(from);\n    assertEquals(traceIdHigh, actual.getTraceIdHigh());\n    assertEquals(traceIdLow, actual.getTraceIdLow());\n    assertEquals(spanId, actual.getSpanId());\n    assertEquals(parentId, actual.getParentSpanId());\n    assertTrue(actual.isSampled());\n\n    TraceContext to = actual.toTraceContext();\n    assertEquals(from, to);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tracing/MaestroTracingContextTest.java", "function_name": "testTraceContextTransform", "index": 1518, "label": 0}
{"input": "public CsvWriterBuilder csv() {\n        excelType(ExcelTypeEnum.CSV);\n        return new CsvWriterBuilder(parameter());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/ExcelWriterBuilder.java", "function_name": "csv", "index": 1519, "label": 0}
{"input": "static String utfDecode(String value) {\n        if (value == null || !value.contains(\"_x\")) {\n            return value;\n        }\n\n        StringBuilder buf = new StringBuilder();\n        Matcher m = UTF_PATTERN.matcher(value);\n        int idx = 0;\n        while (m.find()) {\n            int pos = m.start();\n            if (pos > idx) {\n                buf.append(value, idx, pos);\n            }\n\n            String code = m.group(1);\n            int icode = Integer.decode(\"0x\" + code);\n            buf.append((char)icode);\n\n            idx = m.end();\n        }\n\n        \n        \n        if (idx == 0) {\n            return value;\n        }\n\n        buf.append(value.substring(idx));\n        return buf.toString();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "ea96964d00192d8724af42727baa72e802c230f9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/handlers/sax/SharedStringsTableHandler.java", "function_name": "utfDecode", "index": 1520, "label": 0}
{"input": "private ExpressionNode createResolveVariableNode(\n      SourceSection section, org.pkl.core.runtime.Identifier propertyName) {\n    var scope = symbolTable.getCurrentScope();\n    return new ResolveVariableNode(\n        section,\n        propertyName,\n        isBaseModule,\n        scope.isCustomThisScope(),\n        scope.getConstLevel(),\n        scope.getConstDepth());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "createResolveVariableNode", "index": 1521, "label": 0}
{"input": "protected static SourceSection @Nullable [] createDocSourceSection(\n      Source source, @Nullable DocComment node) {\n    if (node == null) return null;\n    var spans = node.getSpans();\n    var sections = new SourceSection[spans.size()];\n    for (var i = 0; i < sections.length; i++) {\n      var span = spans.get(i);\n      sections[i] = source.createSection(span.charIndex(), span.length());\n    }\n    return sections;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AbstractAstBuilder.java", "function_name": "createDocSourceSection", "index": 1522, "label": 0}
{"input": "private void updateUIForConnectedState() {\n        binding.switchButton.setEnabled(true);\n        binding.stateText.setText(R.string.connected);\n        binding.switchButton.setChecked(true, false);\n        binding.ipProgressBar.setVisibility(View.GONE);\n        PublicIPUtils.getInstance().getIPDetails((details) -> {\n            if (details.ip != null) {\n                String ipString = details.ip + \" \" + details.flag;\n                binding.publicIP.setText(ipString);\n                binding.publicIP.setVisibility(View.VISIBLE);\n            }\n        });\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "updateUIForConnectedState", "index": 1523, "label": 0}
{"input": "private String strFormat(Date date) {\n    return DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssX\")\n        .withZone(TimeZone.getTimeZone(US_PACIFIC).toZoneId())\n        .format(date.toInstant());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "strFormat", "index": 1524, "label": 0}
{"input": "public void doRead() {\n        if (this.readWorkbook == null) {\n            throw new ExcelGenerateException(\"Must use 'FastExcelFactory.read().csv()' to call this method\");\n        }\n        ExcelReader excelReader = buildExcelReader();\n        excelReader.read(this.readSheet);\n        excelReader.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/CsvReaderBuilder.java", "function_name": "doRead", "index": 1525, "label": 0}
{"input": "public VmListing(\n      MaterializedFrame enclosingFrame,\n      VmObject parent,\n      UnmodifiableEconomicMap<Object, ObjectMember> members,\n      int length,\n      ListingOrMappingTypeCastNode typeCastNode,\n      Object typeCheckReceiver,\n      VmObjectLike typeCheckOwner) {\n    super(enclosingFrame, parent, members, typeCastNode, typeCheckReceiver, typeCheckOwner);\n    this.length = length;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmListing.java", "function_name": "VmListing", "index": 1526, "label": 0}
{"input": "@Test\n  public void testMissingSemicolon() {\n    assertEquals(11L, evaluator.eval(\"x + 1\", Collections.singletonMap(\"x\", 10)));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorTest.java", "function_name": "testMissingSemicolon", "index": 1527, "label": 0}
{"input": "@Test\n  public void testRunForActionTaskTimeout() {\n    verifyExecute(Action.TASK_TIMEOUT, true);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionTaskTimeout", "index": 1528, "label": 0}
{"input": "public final void PrimaryPrefix() throws ParseException {\n    switch (jj_nt.kind) {\n      case FALSE:\n      case NULL:\n      case TRUE:\n      case INTEGER_LITERAL:\n      case FLOATING_POINT_LITERAL:\n      case STRING_LITERAL:\n        {\n          Literal();\n          break;\n        }\n      case LPAREN:\n        {\n          jj_consume_token(LPAREN);\n          Expression();\n          jj_consume_token(RPAREN);\n          break;\n        }\n      case NEW:\n        {\n          AllocationExpression();\n          break;\n        }\n      case IDENTIFIER:\n        {\n          Name();\n          break;\n        }\n      default:\n        jj_la1[26] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "PrimaryPrefix", "index": 1529, "label": 0}
{"input": "@Test\n  public void testConsumeWorkflowInstanceUpdateJobEventWithEnqueueError() {\n    when(jobEvent2.getChangeRecords()).thenReturn(List.of(changeRecord2));\n    when(changeRecord2.getNewStatus()).thenReturn(WorkflowInstance.Status.SUCCEEDED);\n    when(jobEvent2.getWorkflowId()).thenReturn(workflowId);\n    doThrow(new RuntimeException(\"test\")).when(queueSystem).enqueueOrThrow(any());\n    AssertHelper.assertThrows(\n        \"Failed publishing\", RuntimeException.class, \"test\", () -> processor.process(jobEvent2));\n    verify(jobEvent2, times(1)).getType();\n    verify(jobEvent2, times(2)).getWorkflowId();\n    verify(actionDao, times(1)).cleanUp(eq(workflowId), anyLong(), anyLong());\n    verify(queueSystem, times(1)).enqueueOrThrow(any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/processors/UpdateJobEventProcessorTest.java", "function_name": "testConsumeWorkflowInstanceUpdateJobEventWithEnqueueError", "index": 1530, "label": 0}
{"input": "public void setDefinition(Map<String, Map<String, SignalParamDefinition>> definition) {\n    definition\n        .values()\n        .forEach(signalParams -> signalParams.forEach((k, v) -> v.getParameter().setName(k)));\n    this.definition = definition;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/trigger/SignalTrigger.java", "function_name": "setDefinition", "index": 1531, "label": 0}
{"input": "@Test\n  public void testBypassSignalDependenciesWithBlocking() {\n    MaestroStepInstanceActionDao spyDao = prepareActionDaoForBypassDependencies(10000);\n\n    Thread.ofVirtual().start(() -> spyDao.bypassStepDependencies(instance, \"job1\", user, true));\n    verify(publisher, timeout(3000).times(1)).publish(any(StepInstanceWakeUpEvent.class));\n    \n    Assert.assertTrue(actionDao.tryGetAction(summary, \"job1\").isPresent());\n    Assert.assertEquals(\n        Actions.StepInstanceAction.BYPASS_STEP_DEPENDENCIES,\n        actionDao.tryGetAction(summary, \"job1\").get().getAction());\n\n    stepInstance.getRuntimeState().setStatus(StepInstance.Status.RUNNING);\n    stepInstanceDao.insertOrUpsertStepInstance(stepInstance, true);\n    verify(spyDao, timeout(3000).times(1)).deleteAction(any(), any());\n    Assert.assertTrue(spyDao.tryGetAction(summary, \"job1\").isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "testBypassSignalDependenciesWithBlocking", "index": 1532, "label": 0}
{"input": "private boolean jj_3_2() {\n    if (jj_scan_token(COMMA)) return true;\n    if (jj_3R_15()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_2", "index": 1533, "label": 0}
{"input": "private boolean jj_3R_61() {\n    if (jj_scan_token(PLUS)) return true;\n    if (jj_3R_53()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_61", "index": 1534, "label": 0}
{"input": "public static ObjectMapper objectMapperWithYaml() {\n    final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n    configureMapper(mapper);\n    return mapper;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/JsonHelper.java", "function_name": "objectMapperWithYaml", "index": 1535, "label": 0}
{"input": "@Test\n  public void testParseStepParameter() {\n    StringParameter bar =\n        StringParameter.builder().name(\"bar\").expression(\"step1__foo + '-1';\").build();\n    paramEvaluator.parseStepParameter(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        Collections.singletonMap(\n            \"foo\", StringParameter.builder().evaluatedResult(\"123\").evaluatedTime(123L).build()),\n        bar,\n        \"step1\");\n    assertEquals(\"123-1\", bar.getEvaluatedResult());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseStepParameter", "index": 1536, "label": 0}
{"input": "@Test\n  public void testWorkflowCompleted() {\n    statusListener.onWorkflowCompleted(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowCompleted\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowCompleted", "index": 1537, "label": 0}
{"input": "public int getEntryCount() {\n    if (cachedEntryCount != -1) return cachedEntryCount;\n\n    var result = 0;\n    for (var key : cachedValues.getKeys()) {\n      if (key instanceof Identifier) continue;\n      result += 1;\n    }\n    cachedEntryCount = result;\n    return result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmMapping.java", "function_name": "getEntryCount", "index": 1538, "label": 0}
{"input": "private void insertSubscription(TimeTriggerExecution execution) {\n    \n    triggerProducer.push(execution, Constants.MESSAGE_DELAY_FIRST_EXECUTION);\n    metrics.counter(MetricConstants.CREATE_SUBSCRIPTION_METRIC, getClass());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/TimeTriggerSubscriptionClient.java", "function_name": "insertSubscription", "index": 1539, "label": 0}
{"input": "public static String getImgDir(String wxId) {\n        \n        String userDir = System.getProperty(\"user.dir\");\n        \n        String separator = FileSystems.getDefault().getSeparator();\n        \n        return userDir + separator + DATA + separator + DB + separator + wxId + separator + IMG;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "54daa418d08cc5ecc407dc99081979090b75c6e9", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getImgDir", "index": 1540, "label": 0}
{"input": "public static void registerAllExtensions(\n            com.google.protobuf.ExtensionRegistry registry) {\n        registerAllExtensions(\n                (com.google.protobuf.ExtensionRegistryLite) registry);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "registerAllExtensions", "index": 1541, "label": 0}
{"input": "@Test\n  public void testOnlyBackoff() throws Exception {\n    RetryPolicy retryPolicy =\n        loadObject(\"fixtures/retry_policy/sample-retry-only-backoff.json\", RetryPolicy.class);\n    assertNull(retryPolicy.getPlatformRetryLimit());\n    assertNull(retryPolicy.getErrorRetryLimit());\n    assertEquals(RetryPolicy.BackoffPolicyType.FIXED_BACKOFF, retryPolicy.getBackoff().getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/RetryPolicyTest.java", "function_name": "testOnlyBackoff", "index": 1542, "label": 0}
{"input": "public @Nullable TypeAnnotation getTypeAnnotation() {\n      return (TypeAnnotation) children.get(1);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Parameter.java", "function_name": "getTypeAnnotation", "index": 1543, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdePredefined() throws Exception {\n    TimeTrigger expected =\n        loadObject(\"fixtures/time_triggers/sample-predefined-time-trigger.json\", TimeTrigger.class);\n    assertEquals(TimeTrigger.Type.PREDEFINED, expected.getType());\n    String ser1 = MAPPER.writeValueAsString(expected);\n    TimeTrigger actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), TimeTrigger.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(ser1, ser2);\n    assertTrue(ser1.contains(\"@daily\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/trigger/TimeTriggerTest.java", "function_name": "testRoundTripSerdePredefined", "index": 1544, "label": 0}
{"input": "public String convertEnvDataToString() {\n\t\tStringBuilder envDataStringBuilder = new StringBuilder();\n\n\t\tfor (String toolKey : availableToolKeys) {\n\t\t\tObject value = getEnvData().get(toolKey);\n\t\t\tif (value == null || value.toString().isEmpty()) {\n\t\t\t\tcontinue; \n\t\t\t}\n\t\t\tenvDataStringBuilder.append(toolKey).append(\" context information:\\n\");\n\t\t\tenvDataStringBuilder.append(\"    \").append(value.toString()).append(\"\\n\");\n\t\t}\n\n\t\treturn envDataStringBuilder.toString();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/DynamicAgent.java", "function_name": "convertEnvDataToString", "index": 1545, "label": 0}
{"input": "@Test\n  public void testTransformMapToSignalOutput() throws IOException {\n    SignalOutputsDefinition definition =\n        loadObject(\n            \"fixtures/step_outputs/step_outputs_definition.json\", SignalOutputsDefinition.class);\n    MapParameter param =\n        MapParameter.builder().evaluatedResult(Map.of(\"name\", \"out\", \"p1\", 1, \"p2\", 2)).build();\n    var output = SignalTransformer.transform(definition.definitions().getFirst(), param);\n    Assert.assertEquals(\"out\", output.getName());\n    Assert.assertEquals(\n        Map.of(\"p1\", SignalParamValue.of(1), \"p2\", SignalParamValue.of(2)), output.getParams());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalTransformerTest.java", "function_name": "testTransformMapToSignalOutput", "index": 1546, "label": 0}
{"input": "@Test\n  public void testInValidWhenJoinKeysWithDifferentSize() {\n    SignalTrigger trigger = new SignalTrigger();\n    var entry1 = new SignalTrigger.SignalTriggerEntry();\n    entry1.setJoinKeys(new String[] {\"foo\"});\n    var entry2 = new SignalTrigger.SignalTriggerEntry();\n    entry2.setJoinKeys(new String[] {\"foo\", \"bar\"});\n    trigger.setDefinitions(Map.of(\"signal_a\", entry1, \"signal_b\", entry2));\n    Set<ConstraintViolation<DummyWorkflow>> violations =\n        validator.validate(new DummyWorkflow(trigger));\n    Assert.assertEquals(1, violations.size());\n    Assert.assertEquals(\n        \"[signal-trigger] the join_keys lengths between signals in the signal triggers must be the same\",\n        violations.iterator().next().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/SignalTriggerConstraintTest.java", "function_name": "testInValidWhenJoinKeysWithDifferentSize", "index": 1547, "label": 0}
{"input": "public static List<String> getOptimizeQueries(OverAllState state) {\n\t\treturn state.value(\"optimize_queries\", (List<String>) null);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "781dd77480081b3a51f41ca6d6c8778b97867ea8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/StateUtil.java", "function_name": "getOptimizeQueries", "index": 1548, "label": 0}
{"input": "public static int deleteWorkflow(DataSource dataSource, String workflowId) {\n    return deleteWorkflowInternal(dataSource, workflowId, false, true);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/testFixtures/java/com/netflix/maestro/engine/MaestroTestHelper.java", "function_name": "deleteWorkflow", "index": 1549, "label": 0}
{"input": "@JsonIgnore\n  public RunStrategy getRunStrategyOrDefault() {\n    return this.getPropertiesSnapshot().getRunStrategy() == null\n        ? Defaults.DEFAULT_RUN_STRATEGY\n        : this.getPropertiesSnapshot().getRunStrategy();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/WorkflowDefinition.java", "function_name": "getRunStrategyOrDefault", "index": 1550, "label": 0}
{"input": "private void processWorkflowVersionJobEvent(WorkflowVersionUpdateJobEvent jobEvent) {\n    workflowHelper.publishStartWorkflowEvent(jobEvent.getWorkflowId(), true);\n\n    MaestroEvent changeEvent = jobEvent.toMaestroEvent(clusterName);\n    eventClient.send(changeEvent);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/PublishJobEventProcessor.java", "function_name": "processWorkflowVersionJobEvent", "index": 1551, "label": 0}
{"input": "private boolean jj_3R_53() {\n    if (jj_3R_59()) return true;\n    Token xsp;\n    while (true) {\n      xsp = jj_scanpos;\n      if (jj_3R_60()) {\n        jj_scanpos = xsp;\n        break;\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_53", "index": 1552, "label": 0}
{"input": "@JsonIgnore\n  public boolean isFreshRun() {\n    return runConfig == null || runConfig.getPolicy() == null || runConfig.getPolicy().isFreshRun();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowInstance.java", "function_name": "isFreshRun", "index": 1553, "label": 0}
{"input": "private int addStoppedInstance(\n      Connection conn, WorkflowInstance instance, TimelineEvent timelineEvent) throws SQLException {\n    try (PreparedStatement wfiStmt =\n        conn.prepareStatement(INSERT_STOPPED_WORKFLOW_INSTANCE_QUERY)) {\n      prepareStopInstanceStatement(wfiStmt, instance, timelineEvent);\n      int res = wfiStmt.executeUpdate();\n      Checks.checkTrue(res == SUCCESS_WRITE_SIZE, \"addStoppedInstance expects to always return 1.\");\n      publishInstanceStopJobEvent(instance, instance.getCreateTime());\n      return res;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "addStoppedInstance", "index": 1554, "label": 0}
{"input": "public static JSONObject modifyChatroomName(String appId,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/quitChatroom\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "modifyChatroomName", "index": 1555, "label": 0}
{"input": "@Test\n  public void testActivationChangeEventRoundTripSerde() throws Exception {\n    WorkflowVersionUpdateJobEvent sampleEvent =\n        loadObject(\n            \"fixtures/jobevents/sample-workflow-activation-job-event.json\",\n            WorkflowVersionUpdateJobEvent.class);\n    assertEquals(\n        sampleEvent,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(sampleEvent), WorkflowVersionUpdateJobEvent.class));\n\n    MaestroEvent event = sampleEvent.toMaestroEvent(\"test-cluster\");\n    assertEquals(MaestroEvent.Type.WORKFLOW_ACTIVATION_CHANGE_EVENT, event.getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/jobevents/WorkflowVersionUpdateJobEventTest.java", "function_name": "testActivationChangeEventRoundTripSerde", "index": 1556, "label": 0}
{"input": "@Bean\n\tpublic ChatClient plannerAgent(ChatClient.Builder plannerChatClientBuilder) {\n\t\treturn plannerChatClientBuilder.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "plannerAgent", "index": 1557, "label": 0}
{"input": "@Override\n  public void download(Long ossId, HttpServletResponse response) throws IOException {\n    SysOssVo sysOss = SpringUtils.getAopProxy(this).getById(ossId);\n    if (ObjectUtil.isNull(sysOss)) {\n      throw new ServiceException(\"文件数据不存在!\");\n    }\n    FileUtils.setAttachmentResponseHeader(response, sysOss.getOriginalName());\n    response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE + \"; charset=UTF-8\");\n    OssClient storage = OssFactory.instance();\n    try (InputStream inputStream = storage.getObjectContent(sysOss.getUrl())) {\n      int available = inputStream.available();\n      IoUtil.copy(inputStream, response.getOutputStream(), available);\n      response.setContentLength(available);\n    } catch (Exception e) {\n      throw new ServiceException(e.getMessage());\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOssServiceImpl.java", "function_name": "download", "index": 1558, "label": 0}
{"input": "@Test\n    public void testFormatter() throws Exception {\n        ExcelStyleDateFormatter ff = new ExcelStyleDateFormatter(\"yyyy年m月d日\");\n        \n        System.out.println(ff.format(new Date()));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/StyleTest.java", "function_name": "testFormatter", "index": 1559, "label": 0}
{"input": "private SysOssVo matchingUrl(SysOssVo oss) {\n    OssClient storage = OssFactory.instance(oss.getService());\n    \n    if (AccessPolicyType.PRIVATE == storage.getAccessPolicy()) {\n      oss.setUrl(storage.getPrivateUrl(oss.getFileName(), 120));\n    }\n    return oss;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOssServiceImpl.java", "function_name": "matchingUrl", "index": 1560, "label": 0}
{"input": "public Builder setState(int value) {\n\n                state_ = value;\n                bitField0_ |= 0x00000004;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setState", "index": 1561, "label": 0}
{"input": "@Test\n  public void testGetCompletedByTsParamWithCompletedByHour() {\n    Tct tct = new Tct();\n    tct.setCompletedByHour(1);\n    tct.setTz(\"UTC\");\n    LongParamDefinition expected =\n        LongParamDefinition.builder()\n            .name(\"completed_by_ts\")\n            .expression(\n                \"tz_dateint_formatter = DateTimeFormat.forPattern('yyyyMMdd').withZone(DateTimeZone.forID('UTC'));\"\n                    + \"dt = tz_dateint_formatter.parseDateTime(TARGET_RUN_DATE).plusHours(1).minusSeconds(1);\"\n                    + \"return dt.getMillis();\")\n            .build();\n\n    LongParamDefinition actual = tct.getCompletedByTsParam();\n    assertEquals(expected, actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/TctTest.java", "function_name": "testGetCompletedByTsParamWithCompletedByHour", "index": 1562, "label": 0}
{"input": "void clear() {\n    if (top != -1) {\n      Arrays.fill(stack, 0, top + 1, null);\n      top = -1;\n    }\n    this.symtab.clear();\n    this.inputTab = null;\n    this.visited = 0;\n    MemoryCounter.reset();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelVisitorState.java", "function_name": "clear", "index": 1563, "label": 0}
{"input": "@Override\n    protected Long callWithoutArg(String methodName) {\n      if (\"nextUniqueId\".equals(methodName)) {\n        return 12345L;\n      }\n      throw new UnsupportedOperationException(\"don't support method: \" + methodName);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "callWithoutArg", "index": 1564, "label": 0}
{"input": "@Override\n  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n      throws Exception {\n    String userName = request.getHeader(\"user\");\n    callerBuilder.name(userName);\n    LOG.info(\n        \"Received a HTTP {} request to uri {} from caller [{}] \",\n        request.getMethod(),\n        request.getRequestURI(),\n        userName);\n    return true;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/interceptor/UserInfoInterceptor.java", "function_name": "preHandle", "index": 1565, "label": 0}
{"input": "public ConstrainedTypeNode(\n        SourceSection sourceSection,\n        VmLanguage language,\n        TypeNode childNode,\n        TypeConstraintNode[] constraintNodes) {\n      super(sourceSection);\n      this.language = language;\n      this.childNode = childNode;\n      this.constraintNodes = constraintNodes;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "643c6f5a76d0a2b81b7f8e22e0013037826ce2b5", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "ConstrainedTypeNode", "index": 1566, "label": 0}
{"input": "public IChatService getChatService(String category) {\n        IChatService service = chatServiceMap.get(category);\n        if (service == null) {\n            throw new IllegalArgumentException(\"不支持的模型类别: \" + category);\n        }\n        return service;\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "84b8d6f675c2f3aed83e0503e79cf1fa05e888e5", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/factory/ChatServiceFactory.java", "function_name": "getChatService", "index": 1567, "label": 0}
{"input": "@Override\n  public Task getTask(String taskId) {\n    return withMetricLogError(\n        () ->\n            getPayload(\n                GET_TASK_BY_TASK_ID_STATEMENT,\n                statement -> statement.setString(1, taskId),\n                Task.class),\n        \"getTask\",\n        \"Failed getting a task by id {}\",\n        taskId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getTask", "index": 1568, "label": 0}
{"input": "public Optional<SearchService> getSearchService(SearchEnum searchEnum) {\n\t\tfor (SearchEnum defined : searchList) {\n\t\t\tif (defined.equals(searchEnum)) {\n\t\t\t\treturn SearchUtil.getSearchService(context, searchEnum.getToolName());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\treturn Optional.empty();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/tool/SearchBeanUtil.java", "function_name": "getSearchService", "index": 1569, "label": 0}
{"input": "@Override\n    public String queryHeadImgUrlByUserName(String userName) {\n        \n        Wrapper<ContactHeadImgUrl> wrapper = Wrappers.<ContactHeadImgUrl>lambdaQuery()\n                .select(ContactHeadImgUrl::getUsrName, ContactHeadImgUrl::getSmallHeadImgUrl)\n                .eq(ContactHeadImgUrl::getUsrName, userName);\n        \n        return Optional.ofNullable(super.getOne(wrapper))\n                .map(ContactHeadImgUrl::getSmallHeadImgUrl)\n                .orElse(null);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ContactHeadImgUrlRepositoryImpl.java", "function_name": "queryHeadImgUrlByUserName", "index": 1570, "label": 0}
{"input": "default boolean isRewriteBatchedInserts() {\n    return getBooleanProperty(\n        REWRITE_BATCHED_INSERTS_PROPERTY_NAME, REWRITE_BATCHED_INSERTS_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "isRewriteBatchedInserts", "index": 1571, "label": 0}
{"input": "public static ReportResponse success(String threadId, String report) {\n\t\treturn new ReportResponse(threadId, \"success\", \"Report retrieved successfully\", report);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/model/response/ReportResponse.java", "function_name": "success", "index": 1572, "label": 0}
{"input": "protected <T> Map<String, T> twoItemMap(String key1, T val1, String key2, T val2) {\n    Map<String, T> map = new LinkedHashMap<>();\n    map.put(key1, val1);\n    map.put(key2, val2);\n    return map;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/testFixtures/java/com/netflix/maestro/MaestroBaseTest.java", "function_name": "twoItemMap", "index": 1573, "label": 0}
{"input": "<T> T getReadOnlyPayload(String stmt, StatementPreparer preparer, Class<T> clazz) {\n    return withReadOnlyQuery(stmt, preparer, r -> payloadFromResult(r, clazz));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "getReadOnlyPayload", "index": 1574, "label": 0}
{"input": "@Override\n\tpublic Stream<Variable> extractWorkflowVars(StartNodeData data) {\n\t\treturn Optional.ofNullable(data.getStartInputs())\n\t\t\t.stream()\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(sel -> new Variable(sel.getVariable(), com.alibaba.cloud.ai.model.VariableType.STRING.value()));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "4db47ffe34d685ee07c907ac185b430ab16bd55e", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/dsl/nodes/StartNodeDataConverter.java", "function_name": "extractWorkflowVars", "index": 1575, "label": 0}
{"input": "public com.google.protobuf.ByteString\n            getField2Bytes() {\n                Object ref = field2_;\n                if (ref instanceof String) {\n                    com.google.protobuf.ByteString b =\n                            com.google.protobuf.ByteString.copyFromUtf8(\n                                    (String) ref);\n                    field2_ = b;\n                    return b;\n                } else {\n                    return (com.google.protobuf.ByteString) ref;\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getField2Bytes", "index": 1576, "label": 0}
{"input": "@Transactional\n\tpublic void batchUpdateConfigs(List<ConfigEntity> configs) {\n\t\tfor (ConfigEntity config : configs) {\n\t\t\tConfigEntity existingConfig = configRepository.findById(config.getId())\n\t\t\t\t.orElseThrow(() -> new IllegalArgumentException(\"Config not found with ID: \" + config.getId()));\n\n\t\t\t\n\t\t\texistingConfig.setConfigValue(config.getConfigValue());\n\t\t\tconfigRepository.save(existingConfig);\n\n\t\t\t\n\t\t\tMap<String, Object> configBeans = applicationContext.getBeansWithAnnotation(ConfigurationProperties.class);\n\t\t\tconfigBeans.values()\n\t\t\t\t.forEach(bean -> updateBeanConfig(bean, existingConfig.getConfigPath(),\n\t\t\t\t\t\texistingConfig.getConfigValue()));\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/config/ConfigService.java", "function_name": "batchUpdateConfigs", "index": 1577, "label": 0}
{"input": "public Builder printConditionalEdge(boolean value) {\n\t\t\t\tthis.printConditionalEdge = value;\n\t\t\t\treturn this;\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b96b23a5859c99b4b9f1e8895d9eee02ff7069d5", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/DiagramGenerator.java", "function_name": "printConditionalEdge", "index": 1578, "label": 0}
{"input": "@Test\n  public void testStringInterpolationJsonError() {\n    Parameter param = StringParameter.builder().name(\"test\").value(\"test $invalidMap\").build();\n    Map<String, Parameter> params = new LinkedHashMap<>();\n    params.put(\n        \"invalidMap\",\n        MapParameter.builder()\n            .evaluatedResult(Collections.singletonMap(\"key\", new Object()))\n            .evaluatedTime(123L)\n            .build());\n\n    AssertHelper.assertThrows(\n        \"Throw an error if param cannot be json serialized\",\n        MaestroInternalError.class,\n        \"INTERNAL_ERROR - Cannot evaluate [invalidMap] as string due to\",\n        () -> LiteralEvaluator.eval(param, params));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testStringInterpolationJsonError", "index": 1579, "label": 0}
{"input": "@Override\n            public Builder clearField(\n                    com.google.protobuf.Descriptors.FieldDescriptor field) {\n                return super.clearField(field);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "clearField", "index": 1580, "label": 0}
{"input": "@JsonIgnore\n  public WorkflowRollupOverview getOverallRollup() {\n    WorkflowRollupOverview overall = new WorkflowRollupOverview();\n    if (rollup != null) {\n      overall.aggregate(rollup);\n    }\n    if (runningRollup != null) {\n      overall.aggregate(runningRollup);\n    }\n    return overall;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "getOverallRollup", "index": 1581, "label": 0}
{"input": "@Override\n    public void visitBytes(VmBytes value) {\n      cannotRenderTypeAddConverter(value);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/xml/RendererNodes.java", "function_name": "visitBytes", "index": 1582, "label": 0}
{"input": "private static void jj_la1_init_2() {\n    jj_la1_2 =\n        new int[] {\n          0x0,\n          0x401494,\n          0x0,\n          0x40000,\n          0x80000,\n          0x400494,\n          0x20000,\n          0x80,\n          0x4000,\n          0x0,\n          0x400494,\n          0x4000,\n          0x80000,\n          0x1000000,\n          0x40000000,\n          0x80000000,\n          0x24000000,\n          0x24000000,\n          0x18300000,\n          0x18300000,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x400000,\n          0x400494,\n          0x494,\n          0x400,\n          0x44000,\n          0x14,\n          0x400494,\n          0x20000,\n          0x4400,\n          0x0,\n          0x4000,\n          0x401494,\n          0x401494,\n          0x401494,\n          0x20000,\n          0x494,\n          0x0,\n          0x494,\n          0x400494,\n          0x494,\n          0x494,\n        };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_la1_init_2", "index": 1583, "label": 0}
{"input": "@Test\n  public void testLaunchWorkflowInstancesRuntimeException() {\n    when(instance1.getStatus()).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Failed to run\",\n        MaestroRetryableError.class,\n        \"Failed to run a workflow and will retry to run it.\",\n        () -> jobProcessor.process(() -> jobEvent));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/RunWorkflowInstancesJobProcessorTest.java", "function_name": "testLaunchWorkflowInstancesRuntimeException", "index": 1584, "label": 0}
{"input": "@Test\n    public void t05ReadHiddenList() {\n        readHiddenList(file03);\n        readHiddenList(file07);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/hiddensheets/HiddenSheetsTest.java", "function_name": "t05ReadHiddenList", "index": 1585, "label": 0}
{"input": "public void markEvaluateParam(MaestroTracingManager tracingManager) {\n    runtimeState.setEvaluateParamTime(\n        updateStatus(StepInstance.Status.EVALUATING_PARAMS, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markEvaluateParam", "index": 1586, "label": 0}
{"input": "protected MaestroTracingManager(Tracer tracer) {\n    this.tracer = tracer;\n    this.samplerFunctionAlways = arg -> true;\n    this.samplerFunctionAlwaysArg = \"\"; \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tracing/MaestroTracingManager.java", "function_name": "MaestroTracingManager", "index": 1587, "label": 0}
{"input": "@Test\n    public void simpleFill() {\n        \n        String templateFileName = \"/Users/zhuangjiaju/Downloads/simple.xlsx\";\n\n        \n        String fileName = TestFileUtil.getPath() + \"simpleFill\" + System.currentTimeMillis() + \".xlsx\";\n        \n        FillData fillData = new FillData();\n        fillData.setName(\"Zhang San\");\n        fillData.setNumber(5.2);\n        EasyExcel.write(fileName).withTemplate(templateFileName).sheet().doFill(fillData);\n\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "364e027f00a9abecb0b4938391ec6f6adfc60aea", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/fill/FillTempTest.java", "function_name": "simpleFill", "index": 1588, "label": 0}
{"input": "private String getAllFunctionNames() {\n        Program program = getCurrentProgram();\n        if (program == null) return \"No program loaded\";\n        StringBuilder sb = new StringBuilder();\n        for (Function f : program.getFunctionManager().getFunctions(true)) {\n            sb.append(f.getName()).append(\"\\n\");\n        }\n        return sb.toString();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "getAllFunctionNames", "index": 1589, "label": 0}
{"input": "@Test\n  public void testComputeAggregatedViewForEmptyWorkflow() {\n    WorkflowInstance instance =\n        getGenericWorkflowInstance(\n            2,\n            WorkflowInstance.Status.SUCCEEDED,\n            RunPolicy.RESTART_FROM_BEGINNING,\n            RestartPolicy.RESTART_FROM_BEGINNING);\n    instance.setAggregatedInfo(new WorkflowInstanceAggregatedInfo());\n    instance.getAggregatedInfo().setStepAggregatedViews(Collections.emptyMap());\n    instance.getAggregatedInfo().setWorkflowInstanceStatus(WorkflowInstance.Status.STOPPED);\n\n    Workflow runtimeWorkflow = mock(Workflow.class);\n    instance.setRuntimeWorkflow(runtimeWorkflow);\n    when(runtimeWorkflow.getSteps()).thenReturn(Collections.emptyList());\n\n    WorkflowInstanceAggregatedInfo aggregated =\n        AggregatedViewHelper.computeAggregatedView(instance, false);\n\n    assertTrue(aggregated.getStepAggregatedViews().isEmpty());\n    assertEquals(WorkflowInstance.Status.SUCCEEDED, aggregated.getWorkflowInstanceStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/AggregatedViewHelperTest.java", "function_name": "testComputeAggregatedViewForEmptyWorkflow", "index": 1590, "label": 0}
{"input": "@Test\n    public void urlLoadInputStreamTest() throws IOException {\n        mockServer.when(request().withMethod(\"GET\").withPath(\"/sample.xlsx\")).respond(response().withStatusCode(200)\n                .withHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n                .withBody(Files.readAllBytes(Paths.get(\"src/test/resources/web/io.xlsx\"))));\n        URL url = new URL(\"http://localhost:\" + mockServer.getPort() + \"/sample.xlsx\");\n        InputStream is = url.openStream();\n        List<String> body = new LinkedList<>();\n        EasyExcel.read(is, Sample.class, new ReadListener<Sample>() {\n            @Override\n            public void invoke(Sample data, AnalysisContext context) {\n                body.add(data.getHeader());\n            }\n            \n            @Override\n            public void doAfterAllAnalysed(AnalysisContext context) {\n            }\n        }).sheet().doRead();\n        Assertions.assertTrue(body.contains(\"body\"));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "e7cdb88175ac54ef50345a2191d51644f2bb3d2b", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/read/WebStreamReadTest.java", "function_name": "urlLoadInputStreamTest", "index": 1591, "label": 0}
{"input": "public <T extends BaseChatCompletion> void streamChatCompletion(T chatCompletion, EventSourceListener eventSourceListener) {\n        if (Objects.isNull(eventSourceListener)) {\n            log.error(\"参数异常：EventSourceListener不能为空!\");\n            throw new BaseException(CommonError.PARAM_ERROR.msg());\n        }\n        try {\n            EventSource.Factory factory = EventSources.createFactory(this.okHttpClient);\n            ObjectMapper mapper = new ObjectMapper();\n            String requestBody = mapper.writeValueAsString(chatCompletion);\n            Request request = new Request.Builder()\n                .url(this.apiHost + apiUrl)\n                .post(RequestBody.create(MediaType.parse(ContentType.JSON.getValue()), requestBody))\n                .build();\n            factory.newEventSource(request, eventSourceListener);\n        } catch (Exception e) {\n            log.error(\"请求参数解析异常：{}\", e.getMessage());\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "1bddf5df3b77e505a9f41a1efa7b081cde32f931", "file_path": "ruoyi-common/ruoyi-common-chat/src/main/java/org/ruoyi/common/chat/openai/OpenAiStreamClient.java", "function_name": "streamChatCompletion", "index": 1592, "label": 0}
{"input": "private void publishInstanceUpdateJobEvent(\n      Connection conn,\n      WorkflowInstance instance,\n      WorkflowInstance.Status status,\n      long markTime,\n      List<MessageDto> messages)\n      throws SQLException {\n    WorkflowInstanceUpdateJobEvent jobEvent =\n        WorkflowInstanceUpdateJobEvent.create(instance, status, markTime);\n    messages.add(queueSystem.enqueue(conn, jobEvent));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "publishInstanceUpdateJobEvent", "index": 1593, "label": 0}
{"input": "@Override\n    public Long getNextSequence(String poolName) {\n        \n        DynamicDataSourceContextHolder.push(poolName);\n        \n        Long nextSequence = getBaseMapper().getNextSequence();\n        \n        DynamicDataSourceContextHolder.clear();\n        \n        return nextSequence;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/MsgRepositoryImpl.java", "function_name": "getNextSequence", "index": 1594, "label": 0}
{"input": "@Bean\n  public ParamsManager paramsManager(DefaultParamManager defaultParamManager) {\n    LOG.info(\"Creating ParamsManager within Spring boot...\");\n    return new ParamsManager(defaultParamManager);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "paramsManager", "index": 1595, "label": 0}
{"input": "private void saveSelectedLanguage(String language) {\n        fileManager.set(SELECTED_LANGUAGE, language);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "2f3b84a45acbf027ab617f69cb6bdd3f251bcd76", "file_path": "app/src/main/java/org/bepass/oblivion/LocaleHandler.java", "function_name": "saveSelectedLanguage", "index": 1596, "label": 0}
{"input": "@Specialization\n  protected Object evalDynamic(VirtualFrame frame, VmDynamic ignored) {\n    return executeBody(frame);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/member/ElementOrEntryNode.java", "function_name": "evalDynamic", "index": 1597, "label": 0}
{"input": "private void readAndWrite03(File file) {\n        EasyExcel.write(file, TemplateData.class)\n                .withTemplate(TestFileUtil.readFile(\"template\" + File.separator + \"template03.xls\")).sheet()\n                .doWrite(data());\n        EasyExcel.read(file, TemplateData.class, new TemplateDataListener()).headRowNumber(3).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/template/TemplateDataTest.java", "function_name": "readAndWrite03", "index": 1598, "label": 0}
{"input": "@Test\n  public void testCreateTaskException() {\n    Task task = new Task();\n    task.setScheduledTime(1L);\n    task.setSeq(1);\n    task.setTaskId(TEST_TASK_ID_1);\n    task.setTaskDefName(TEST_TASK_DEF_NAME);\n\n    expectedException.expect(NullPointerException.class);\n    expectedException.expectMessage(\"Workflow instance id cannot be null\");\n    getExecutionDAO().createTasks(Collections.singletonList(task));\n\n    task.setWorkflowInstanceId(TEST_WORKFLOW_ID);\n    expectedException.expect(NullPointerException.class);\n    expectedException.expectMessage(\"Task reference name cannot be null\");\n    getExecutionDAO().createTasks(Collections.singletonList(task));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAOTest.java", "function_name": "testCreateTaskException", "index": 1599, "label": 0}
{"input": "private boolean isHex(char ch) {\n    var code = (int) ch;\n    return (code >= 48 && code <= 57) || (code >= 97 && code <= 102) || (code >= 65 && code <= 70);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "isHex", "index": 1600, "label": 0}
{"input": "private void analysisSharedStringsTable(InputStream sharedStringsTableInputStream,\n            XlsxReadWorkbookHolder xlsxReadWorkbookHolder) {\n        ContentHandler handler = new SharedStringsTableHandler(xlsxReadWorkbookHolder.getReadCache());\n        parseXmlSource(sharedStringsTableInputStream, handler);\n        xlsxReadWorkbookHolder.getReadCache().putFinished();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/XlsxSaxAnalyser.java", "function_name": "analysisSharedStringsTable", "index": 1601, "label": 0}
{"input": "@Bean(name = STEP_RUNTIME_QUALIFIER)\n  public EnumMap<StepType, StepRuntime> stepRuntimeMap() {\n    LOG.info(\"Creating stepRuntimeMap within Spring boot...\");\n    return new EnumMap<>(StepType.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "stepRuntimeMap", "index": 1602, "label": 0}
{"input": "@Test\n  public void testParseInvalidAttributeValue() {\n    AssertHelper.assertThrows(\n        \"unable to parse attribute\",\n        MaestroUnprocessableEntityException.class,\n        \"Failed to parse attribute [bar] for workflow [test-workflow] due to \",\n        () ->\n            paramEvaluator.parseAttribute(\n                ParamDefinition.buildParamDefinition(\"bar\", \"${foo}\"),\n                Collections.singletonMap(\n                    \"bat\", LongParameter.builder().expression(\"1+2+3;\").build()),\n                \"test-workflow\",\n                false));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseInvalidAttributeValue", "index": 1603, "label": 0}
{"input": "public void flushData() {\n        try {\n            for (CsvRow row : rowCache) {\n                Iterator<Cell> cellIterator = row.cellIterator();\n                int columnIndex = 0;\n                while (cellIterator.hasNext()) {\n                    CsvCell csvCell = (CsvCell) cellIterator.next();\n                    while (csvCell.getColumnIndex() > columnIndex++) {\n                        csvPrinter.print(null);\n                    }\n                    csvPrinter.print(buildCellValue(csvCell));\n                }\n                csvPrinter.println();\n            }\n            rowCache.clear();\n        } catch (IOException e) {\n            throw new ExcelGenerateException(e);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvSheet.java", "function_name": "flushData", "index": 1604, "label": 0}
{"input": "private void mergeMsg() {\n        List<String> msgDbs = DataSourceType.getMsgDb();\n        \n        Long nextSequence = msgRepository.getNextSequence(DataSourceType.MSG_DB);\n        \n        for (int i = 1; i < msgDbs.size(); i++) {\n            String msgDb = msgDbs.get(i);\n            \n            nextSequence = doMergeMsg(DataSourceType.MSG_DB, msgDb, nextSequence);\n        }\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/DatabaseServiceImpl.java", "function_name": "mergeMsg", "index": 1605, "label": 0}
{"input": "private SelType[] visitAndCollectResults(SelBaseNode node, Object data) {\n    visitAndCheckLimit();\n    node.childrenAccept(this, data);\n    SelType[] results = new SelType[node.jjtGetNumChildren()];\n    for (int i = node.jjtGetNumChildren() - 1; i >= 0; --i) {\n      results[i] = state.pop();\n    }\n    return results;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelParserEvaluationVisitor.java", "function_name": "visitAndCollectResults", "index": 1606, "label": 0}
{"input": "private boolean isRestartFromInlineRootMode(RunRequest request, Workflow workflow) {\n    if (request.getInitiator().getType() == Initiator.Type.FOREACH\n        && request.getRestartConfig() != null\n        && request.getRestartConfig().getRestartPath() != null\n        && request.getRestartConfig().getRestartPath().size() == 1\n        && request.getRestartConfig().getRestartPath().get(0).getStepId() == null\n        && !MapHelper.isEmptyOrNull(request.getRestartConfig().getStepRestartParams())) {\n      UpstreamInitiator.Info info =\n          ((ForeachInitiator) request.getInitiator()).getNonInlineParent();\n      if (info.getWorkflowId().equals(request.getRestartWorkflowId())\n          && info.getInstanceId() == request.getRestartInstanceId()) {\n        Set<String> stepIds = request.getRestartConfig().getStepRestartParams().keySet();\n        return workflow.getAllStepIds().stream().anyMatch(stepIds::contains);\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowActionHandler.java", "function_name": "isRestartFromInlineRootMode", "index": 1607, "label": 0}
{"input": "private int upsertActions(String identity, List<String> payloads) {\n    String sql =\n        String.format(\n            UPSERT_ACTIONS_QUERY_TEMPLATE,\n            String.join(\",\", Collections.nCopies(payloads.size(), VALUE_PLACE_HOLDER)));\n    return withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                sql,\n                stmt -> {\n                  int idx = 0;\n                  for (String payload : payloads) {\n                    stmt.setString(++idx, payload);\n                  }\n                }),\n        \"upsertActions\",\n        \"Failed to upsert the step actions for [{}]\",\n        identity);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDao.java", "function_name": "upsertActions", "index": 1608, "label": 0}
{"input": "@Test\n  public void testRandomParsableValues() throws Exception {\n    RetryPolicy retryPolicy =\n        loadObject(\"fixtures/retry_policy/sample-parsable-retry-values.json\", RetryPolicy.class);\n    assertNull(retryPolicy.getBackoff());\n    assertEquals(RANDOM_ERROR_LIMIT, Long.parseLong(retryPolicy.getErrorRetryLimit().asString()));\n    assertEquals(\n        RANDOM_PLATFORM_ERROR_LIMIT,\n        Long.parseLong(retryPolicy.getPlatformRetryLimit().asString()));\n    assertEquals(\n        RANDOM_TIMEOUT_ERROR_LIMIT, Long.parseLong(retryPolicy.getTimeoutRetryLimit().asString()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/RetryPolicyTest.java", "function_name": "testRandomParsableValues", "index": 1609, "label": 0}
{"input": "@PutMapping(\n      value = \"/{workflowId}/versions/{version}/actions/activate\",\n      consumes = MediaType.ALL_VALUE)\n  @Operation(\n      summary =\n          \"Activate a specific workflow version (i.e. active, latest, default, or exact version id)\")\n  public WorkflowActionResponse activateWorkflowVersion(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId,\n      @Valid @NotNull @PathVariable(\"version\") String version) {\n    return actionHandler.activate(workflowId, version, callerBuilder.build());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowActionController.java", "function_name": "activateWorkflowVersion", "index": 1610, "label": 0}
{"input": "private DataType findDataTypeByNameInAllCategories(DataTypeManager dtm, String typeName) {\n        \n        DataType result = searchByNameInAllCategories(dtm, typeName);\n        if (result != null) {\n            return result;\n        }\n        \n        \n        return searchByNameInAllCategories(dtm, typeName.toLowerCase());\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "findDataTypeByNameInAllCategories", "index": 1611, "label": 0}
{"input": "@Test\n  public void testGetFromSignalInitiator() {\n    SignalInitiator initiator = Mockito.mock(SignalInitiator.class);\n    when(instanceWrapper.getInitiator()).thenReturn(initiator);\n    when(initiator.getType()).thenReturn(Initiator.Type.SIGNAL);\n    when(initiator.getParams())\n        .thenReturn(\n            twoItemMap(\n                \"param1\",\n                StringParameter.builder().evaluatedResult(\"value1\").build(),\n                \"param2\",\n                LongParameter.builder().evaluatedResult(123L).build()));\n    assertEquals(\"value1\", paramExtension.getFromSignal(\"param1\"));\n    assertEquals(123L, paramExtension.getFromSignal(\"param2\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionTest.java", "function_name": "testGetFromSignalInitiator", "index": 1612, "label": 0}
{"input": "public FlowExecutor(ExecutionContext context) {\n    this.context = context;\n    this.initialDelay = context.getProperties().getInitialMaintenanceDelayInMillis();\n    this.delay = context.getProperties().getMaintenanceDelayInMillis();\n    this.address = context.getProperties().getEngineAddress();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/FlowExecutor.java", "function_name": "FlowExecutor", "index": 1613, "label": 0}
{"input": "public static boolean checkTrimEmpty(String s) {\n    for (int i = 0; i < s.length(); i++) {\n      if (!Character.isWhitespace(s.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/StringUtils.java", "function_name": "checkTrimEmpty", "index": 1614, "label": 0}
{"input": "private void publishUserActionEvent(StepInstanceWakeUpEvent event) {\n    Optional<Details> details = eventPublisher.publish(event);\n    details.ifPresent(\n        detail ->\n            LOG.warn(\n                \"Action event publish failed: {}. With error: {}\",\n                detail.getMessage(),\n                detail.getErrors()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDao.java", "function_name": "publishUserActionEvent", "index": 1615, "label": 0}
{"input": "private void addConstantEntries(\n      EconomicMap<Object, ObjectMember> members,\n      List<ExpressionNode> keyNodes,\n      List<ObjectMember> values) {\n\n    for (var i = 0; i < keyNodes.size(); i++) {\n      var key = ((ConstantNode) keyNodes.get(i)).getValue();\n      var value = values.get(i);\n      var previousValue = EconomicMaps.put(members, key, value);\n      if (previousValue != null) {\n        CompilerDirectives.transferToInterpreter();\n        throw exceptionBuilder()\n            .evalError(\"duplicateDefinition\", new ProgramValue(\"\", key))\n            .withSourceSection(value.getHeaderSection())\n            .build();\n      }\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "addConstantEntries", "index": 1616, "label": 0}
{"input": "public static Builder newBuilder(MessageBytesExtra prototype) {\n            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "newBuilder", "index": 1617, "label": 0}
{"input": "@Test\n  public void testDoubleArrayToDoubleArray() {\n    double[] val = new double[] {1.2, 3.4, 5.6};\n    double[] actual = ParamHelper.toDoubleArray(\"foo\", val);\n    assertArrayEquals(val, actual, 0.00001);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ParamHelperTest.java", "function_name": "testDoubleArrayToDoubleArray", "index": 1618, "label": 0}
{"input": "public Builder clearField3() {\n                bitField0_ = (bitField0_ & ~0x00000004);\n                field3_ = 0;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "clearField3", "index": 1619, "label": 0}
{"input": "@Test\n  public void testTypeMatch() {\n    SelTypeUtil.checkTypeMatch(SelTypes.NULL, SelTypes.NULL);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypeUtilTest.java", "function_name": "testTypeMatch", "index": 1620, "label": 0}
{"input": "@Scheduled(fixedDelay = 30 * 60 * 1000)\n  public void dealKnowledge40Status() throws Exception {\n      \n      attachMapper.update(new LambdaUpdateWrapper<KnowledgeAttach>()\n          .set(KnowledgeAttach::getPicStatus, DealStatus.STATUS_10)\n          .eq(KnowledgeAttach::getPicStatus, DealStatus.STATUS_40));\n      \n      picMapper.update(new LambdaUpdateWrapper<KnowledgeAttachPic>()\n          .set(KnowledgeAttachPic::getPicAnysStatus, DealStatus.STATUS_10)\n          .eq(KnowledgeAttachPic::getPicAnysStatus, DealStatus.STATUS_40));\n      \n      attachMapper.update(new LambdaUpdateWrapper<KnowledgeAttach>()\n          .set(KnowledgeAttach::getVectorStatus, DealStatus.STATUS_10)\n          .eq(KnowledgeAttach::getVectorStatus, DealStatus.STATUS_40));\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "931af963b116636f130a7e6edee1005139f884f0", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "dealKnowledge40Status", "index": 1621, "label": 0}
{"input": "private static ParsableLong getParsedRetryExponent(\n      @Nullable ParsableLong number,\n      Function<ParamDefinition, Parameter> paramParser,\n      String path) {\n    return parseParsableLong(number, paramParser, Integer.MAX_VALUE, path);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/RetryPolicyParser.java", "function_name": "getParsedRetryExponent", "index": 1622, "label": 0}
{"input": "@Bean\n  public FinalFlowStatusCallback finalFlowStatusCallback(\n      MaestroTask maestroTask,\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      MaestroJobEventPublisher publisher,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating maestro finalFlowStatusCallback within Spring boot...\");\n    return new MaestroFinalFlowStatusCallback(\n        maestroTask, instanceDao, stepInstanceDao, publisher, objectMapper, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroFlowConfiguration.java", "function_name": "finalFlowStatusCallback", "index": 1623, "label": 0}
{"input": "@Test\n  public void testMutableOnStartOutputParameter() {\n    setupOutputDataDao();\n    runtimeSummary =\n        runtimeSummaryBuilder()\n            .artifacts(artifacts)\n            .params(\n                Collections.singletonMap(\n                    \"str_param\",\n                    StringParameter.builder()\n                        .name(\"p1\")\n                        .value(\"v1\")\n                        .evaluatedResult(\"v1\")\n                        .mode(ParamMode.MUTABLE_ON_START)\n                        .evaluatedTime(System.currentTimeMillis())\n                        .build()))\n            .build();\n\n    AssertHelper.assertThrows(\n        \"throws validation error if MUTABLE_ON_START mode\",\n        MaestroValidationException.class,\n        \"Cannot modify param with mode [MUTABLE_ON_START] for parameter [str_param]\",\n        () -> outputDataManager.validateAndMergeOutputParams(runtimeSummary));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "testMutableOnStartOutputParameter", "index": 1624, "label": 0}
{"input": "@Test\n  public void isIdUsingValidChars() {\n    Set<ConstraintViolation<TestId>> violations = new LinkedHashSet<>();\n    String[] invalidIds =\n        new String[] {\"0foo\", \"-foo\", \".foo\", \"$foo\", \"foo$bar\", \"foo{}\", \"foo()\"};\n    for (String invalidId : invalidIds) {\n      violations.addAll(validator.validate(new TestId(invalidId)));\n    }\n    assertEquals(invalidIds.length, violations.size());\n    int idx = 0;\n    for (ConstraintViolation<TestId> violation : violations) {\n      assertEquals(invalidIds[idx++], violation.getInvalidValue());\n      assertEquals(\n          \"[maestro id or name reference] does not follow the regex rule: [_a-zA-Z][.\\\\-_a-zA-Z0-9]*+ \"\n              + \"- rejected value is [\"\n              + violation.getInvalidValue()\n              + \"]\",\n          violation.getMessage());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/MaestroReferenceIdConstraintTest.java", "function_name": "isIdUsingValidChars", "index": 1625, "label": 0}
{"input": "@Test\n  public void testEnqueueWithNoExecutionLeft() {\n    props.setMaxDelay(60 * 15);\n    props.setMaxJitter(60);\n    when(executionPlanner.calculateEarliestExecutionDate(any(), any()))\n        .thenReturn(Optional.empty());\n    ArrayList<PlannedTimeTriggerExecution> plannedList = new ArrayList<>();\n    plannedList.add(new PlannedTimeTriggerExecution(null, null));\n    when(executionPlanner.calculatePlannedExecutions(any(), any(), any())).thenReturn(plannedList);\n    when(workflowLauncher.startWorkflowBatchRuns(any(), any(), any(), any()))\n        .thenReturn(List.of(RunResponse.builder().build()));\n    processor.process(() -> message);\n    Mockito.verify(workflowLauncher, Mockito.times(1))\n        .startWorkflowBatchRuns(any(), anyString(), any(), any());\n    Mockito.verifyNoInteractions(triggerProducer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/messageprocessors/TimeTriggerExecutionProcessorTest.java", "function_name": "testEnqueueWithNoExecutionLeft", "index": 1626, "label": 0}
{"input": "@Test\n  public void testLiteralEvalMapParam() {\n    Parameter param = StringParameter.builder().name(\"test\").value(\"test $mapParam\").build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Collections.singletonList(\"mapParam\")), paramNames);\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(\"test {\\\"key\\\":\\\"$value\\\"}\", result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testLiteralEvalMapParam", "index": 1627, "label": 0}
{"input": "public Parameter(Span span, @Nullable List<? extends @Nullable Node> children) {\n    super(span, children);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Parameter.java", "function_name": "Parameter", "index": 1628, "label": 0}
{"input": "private boolean jj_3R_95() {\n    if (jj_3R_21()) return true;\n    Token xsp;\n    while (true) {\n      xsp = jj_scanpos;\n      if (jj_3R_97()) {\n        jj_scanpos = xsp;\n        break;\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_95", "index": 1629, "label": 0}
{"input": "private SelArray intsBetween(SelType from, SelType to, SelType dd) {\n    int d1 = SelLong.create(from).intVal();\n    int d2 = SelLong.create(to).intVal();\n    int inc = SelLong.create(dd).intVal();\n    List<Integer> list = new ArrayList<>();\n    if (inc > 0) {\n      for (int i = d1; i < d2; i += inc) {\n        list.add(i);\n      }\n    } else {\n      for (int i = d1; i > d2; i += inc) {\n        list.add(i);\n      }\n    }\n    return SelArray.of(list.toArray(new Integer[0]), SelTypes.LONG_ARRAY);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "intsBetween", "index": 1630, "label": 0}
{"input": "private boolean isDuplicated(Connection conn, WorkflowInstance instance) throws SQLException {\n    try (PreparedStatement wfiStmt = conn.prepareStatement(CHECK_EXISTING_UUID_QUERY)) {\n      wfiStmt.setString(1, instance.getWorkflowId());\n      wfiStmt.setString(2, instance.getWorkflowUuid());\n      try (ResultSet result = wfiStmt.executeQuery()) {\n        return result.next();\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "isDuplicated", "index": 1631, "label": 0}
{"input": "@Override\n        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(format((Number) obj));\n        }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatter1.java", "function_name": "format", "index": 1632, "label": 0}
{"input": "public AbstractNode(Span span, @Nullable List<? extends @Nullable Node> children) {\n    this.span = span;\n    if (children != null) {\n      this.children = Collections.unmodifiableList(children);\n    } else {\n      this.children = null;\n    }\n\n    if (children != null) {\n      for (var node : children) {\n        if (node != null) {\n          node.setParent(this);\n        }\n      }\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/AbstractNode.java", "function_name": "AbstractNode", "index": 1633, "label": 0}
{"input": "@Override\n    public List<ReadSheet> sheetList() {\n        try {\n            if (xlsReadContext.readWorkbookHolder().getActualSheetDataList() == null) {\n                new XlsListSheetListener(xlsReadContext).execute();\n            }\n        } catch (ExcelAnalysisStopException e) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Custom stop!\");\n            }\n        }\n        List<ReadSheet> actualSheetDataList = xlsReadContext.readWorkbookHolder().getActualSheetDataList();\n        if (xlsReadContext.readWorkbookHolder().getIgnoreHiddenSheet()) {\n            return actualSheetDataList.stream()\n                .filter(readSheet -> (!readSheet.isHidden() && !readSheet.isVeryHidden()))\n                .collect(Collectors.toList());\n        }\n        return actualSheetDataList;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v03/XlsSaxAnalyser.java", "function_name": "sheetList", "index": 1634, "label": 0}
{"input": "@Override\n\tpublic void write(OverAllState object, ObjectOutput out) throws IOException {\n\t\tString json = objectMapper.writeValueAsString(object);\n\n\t\t\n\t\tbyte[] jsonBytes = json.getBytes(StandardCharsets.UTF_8);\n\t\tout.writeInt(jsonBytes.length);\n\t\tout.write(jsonBytes);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cbed5bdb8a096b49ce533dee99795750da26fd10", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/serializer/DeepResearchStateSerializer.java", "function_name": "write", "index": 1635, "label": 0}
{"input": "private WorkflowInfo getWorkflowInfoForUpdate(Connection conn, String workflowId)\n      throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(GET_CURRENT_WORKFLOW_INFO_FOR_UPDATE)) {\n      stmt.setString(1, workflowId);\n      try (ResultSet result = stmt.executeQuery()) {\n        if (result.next()) {\n          return new WorkflowInfo(\n              result.getLong(ACTIVE_VERSION_COLUMN),\n              propertiesSnapshotFromResult(result, workflowId),\n              result.getLong(LATEST_VERSION_COLUMN));\n        }\n        \n        return new WorkflowInfo(Constants.INACTIVE_VERSION_ID, null, Constants.INACTIVE_VERSION_ID);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getWorkflowInfoForUpdate", "index": 1636, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testCallIncrementDateIntInvalid() {\n    SelUtilFunc.INSTANCE.call(\n        \"incrementDateInt\", new SelType[] {SelString.of(\"20190101\"), SelString.of(\"5\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallIncrementDateIntInvalid", "index": 1637, "label": 0}
{"input": "private WorkflowTask createMaestroGateTask(JoinStep step) {\n    WorkflowTask task = new WorkflowTask();\n    task.setType(TaskType.TASK_TYPE_EXCLUSIVE_JOIN);\n    task.setName(UUID.randomUUID().toString());\n    task.setDescription(step.getDescription());\n    task.setTaskReferenceName(step.getId());\n    task.setJoinOn(step.getJoinOn());\n    return task;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/StepTranslator.java", "function_name": "createMaestroGateTask", "index": 1638, "label": 0}
{"input": "@Test\n  public void testGetCompletedByTsParamError() {\n    Tct tct = new Tct();\n    AssertHelper.assertThrows(\n        \"Invalid TCT definition\",\n        MaestroInternalError.class,\n        \"Invalid TCT definition, neither of time fields is set\",\n        tct::getCompletedByTsParam);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/TctTest.java", "function_name": "testGetCompletedByTsParamError", "index": 1639, "label": 0}
{"input": "public Optional<Map<String, ParamDefinition>> getDefaultParamsForType(StepType stepType) {\n    Map<String, ParamDefinition> defaults =\n        defaultTypeParams.get(stepType.toString().toLowerCase(Locale.US));\n    if (defaults != null) {\n      return Optional.of(preprocessParams(defaults));\n    } else {\n      return Optional.empty();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/DefaultParamManager.java", "function_name": "getDefaultParamsForType", "index": 1640, "label": 0}
{"input": "@Override\n  public boolean pushIfNotExists(\n      String queueName, String id, int priority, long offsetTimeInSecond) {\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBQueueDAO.java", "function_name": "pushIfNotExists", "index": 1641, "label": 0}
{"input": "@Test\n  public void testRunForActionFlowResumeWithRunningTasks() {\n    Task task1 = flow.newTask(new TaskDef(\"task1\", \"noop\", null, null), false);\n    Task task2 = flow.newTask(new TaskDef(\"task2\", \"noop\", null, null), false);\n    task2.setStatus(Task.Status.FAILED);\n    flow.addFinishedTask(task2);\n\n    flowActor.runForAction(Action.FLOW_RESUME);\n    var actions = flowActor.getActions();\n    assertEquals(2, actions.size());\n    assertEquals(new Action.FlowTaskRetry(\"task2\"), actions.poll());\n    assertEquals(Action.FlowReconcile.class, actions.poll().getClass());\n\n    verify(context, times(1)).resumeFlow(flow);\n    verify(context, times(1)).cloneTask(task1);\n    verify(context, times(1)).run(any());\n    verify(context, times(0)).prepare(flow);\n    assertEquals(Set.of(Action.FLOW_TIMEOUT), flowActor.getScheduledActions().keySet());\n\n    assertTrue(flowActor.containsChild(\"task1\"));\n    var child = flowActor.getChild(\"task1\");\n    verifyActions(child, Action.TASK_RESUME);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testRunForActionFlowResumeWithRunningTasks", "index": 1642, "label": 0}
{"input": "@Override\n    public TabItem createTab(TabFolder tabFolder) {\n        TabItem webUITab = new TabItem(tabFolder, SWT.NONE);\n        webUITab.setText(getTabName());\n\n        webUIComposite = new Composite(tabFolder, SWT.NONE);\n        GridLayout layout = new GridLayout(1, false);\n        layout.marginWidth = 0;\n        layout.marginHeight = 0;\n        layout.horizontalSpacing = 0;\n        layout.verticalSpacing = 0;\n        webUIComposite.setLayout(layout);\n        webUIComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n\n        createBrowser();\n\n        webUITab.setControl(webUIComposite);\n\n        return webUITab;\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/tabs/WebUITabComponent.java", "function_name": "createTab", "index": 1643, "label": 0}
{"input": "public static JSONObject inviteMember(String appId, List<String> wxids,String chatroomId, String reason){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxids\",wxids);\r\n        param.put(\"reason\",reason);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/inviteMember\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "inviteMember", "index": 1644, "label": 0}
{"input": "@Override\n    public List<Msg> queryMsgByTalker(String talker, Long lastCreateTime) {\n        return super.list(Wrappers.<Msg>lambdaQuery()\n                .eq(Msg::getStrTalker, talker)\n                .lt(Msg::getCreateTime, lastCreateTime)\n                .ne(Msg::getType, 11000)\n                .orderByDesc(Msg::getCreateTime)\n                .last(\"limit 20\"));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/MsgRepositoryImpl.java", "function_name": "queryMsgByTalker", "index": 1645, "label": 0}
{"input": "@JsonCreator\n  public CompressedString(\n      @JsonProperty(\"compressor\") String compressor,\n      @JsonProperty(\"compressed\") String compressed) {\n    this.compressor = Checks.notNull(compressor, \"compressor cannot be null\");\n    this.compressed = Checks.notNull(compressed, \"compressed cannot be null\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/compression/CompressedString.java", "function_name": "CompressedString", "index": 1646, "label": 0}
{"input": "public KubernetesArtifact getKubernetesArtifact() {\n    if (runtimeSummary.getArtifacts().containsKey(Artifact.Type.KUBERNETES.key())) {\n      return runtimeSummary.getArtifacts().get(Artifact.Type.KUBERNETES.key()).asKubernetes();\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/kubernetes/KubernetesStepContext.java", "function_name": "getKubernetesArtifact", "index": 1647, "label": 0}
{"input": "private void markTerminatedWithMetric(\n      StepRuntimeSummary runtimeSummary, StepRuntime.State stepState, StepInstance.Status status) {\n    metrics.counter(\n        MetricConstants.ON_STEP_TERMINATED,\n        getClass(),\n        MetricConstants.STEP_STATE_TAG,\n        stepState.name(),\n        MetricConstants.STEP_STATUS_TAG,\n        status.name());\n    runtimeSummary.markTerminated(status, tracingManager);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeManager.java", "function_name": "markTerminatedWithMetric", "index": 1648, "label": 0}
{"input": "@Test\n  public void isStepNull() {\n    Workflow workflow = Workflow.builder().steps(null).build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\"[workflow step definitions] cannot be null or empty\", violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isStepNull", "index": 1649, "label": 0}
{"input": "@Test\n  public void testExecuteDone() {\n    StepRuntimeState state = new StepRuntimeState();\n    state.setStatus(StepInstance.Status.COMPLETED_WITH_ERROR);\n    when(stepInstanceDao.getStepStates(anyString(), anyLong(), anyLong(), anyList()))\n        .thenReturn(Collections.singletonMap(\"job1\", state));\n\n    assertTrue(gateTask.execute(workflow, joinTask, null));\n    assertEquals(Task.Status.FAILED, joinTask.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tasks/MaestroGateTaskTest.java", "function_name": "testExecuteDone", "index": 1650, "label": 0}
{"input": "public String getConfigValue(String configPath) {\n\t\t\n\t\tConfigCacheEntry<String> cacheEntry = configCache.get(configPath);\n\t\tif (cacheEntry != null && !cacheEntry.isExpired()) {\n\t\t\treturn cacheEntry.getValue();\n\t\t}\n\n\t\t\n\t\tOptional<ConfigEntity> configOpt = configRepository.findByConfigPath(configPath);\n\t\tif (configOpt.isPresent()) {\n\t\t\tString value = configOpt.get().getConfigValue();\n\t\t\tconfigCache.put(configPath, new ConfigCacheEntry<>(value));\n\t\t\treturn value;\n\t\t}\n\t\treturn null;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/config/ConfigService.java", "function_name": "getConfigValue", "index": 1651, "label": 0}
{"input": "private void checkNotNullPrecondition(MapParameter mapParams, String key) {\n    Checks.notNull(mapParams.getEvaluatedParam(key), key + \" cannot be null\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/kubernetes/KubernetesCommandGenerator.java", "function_name": "checkNotNullPrecondition", "index": 1652, "label": 0}
{"input": "public static <T> T parseXml(String content, Class<T> valueType) {\n        try {\n            int xmlStart = content.indexOf(\"<?xml\");\n            if (xmlStart > 0) {\n                content = content.substring(xmlStart);\n            }\n            return MAPPER.readValue(content, valueType);\n        } catch (JsonProcessingException e) {\n            log.error(\"解析XML失败\", e);\n        }\n        return null;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/XmlUtil.java", "function_name": "parseXml", "index": 1653, "label": 0}
{"input": "public BaseAgent(LlmService llmService, PlanExecutionRecorder planExecutionRecorder,\n\t\t\tManusProperties manusProperties, Map<String, Object> initialAgentSetting, PromptLoader promptLoader) {\n\t\tthis.llmService = llmService;\n\t\tthis.planExecutionRecorder = planExecutionRecorder;\n\t\tthis.manusProperties = manusProperties;\n\t\tthis.promptLoader = promptLoader;\n\t\tthis.maxSteps = manusProperties.getMaxSteps();\n\t\tthis.initSettingData = Collections.unmodifiableMap(new HashMap<>(initialAgentSetting));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/agent/BaseAgent.java", "function_name": "BaseAgent", "index": 1654, "label": 0}
{"input": "public void validateAndMergeOutputParamsAndArtifacts(StepRuntimeSummary runtimeSummary) {\n    Optional<String> externalJobId = extractExternalJobId(runtimeSummary);\n    if (externalJobId.isPresent()) {\n      Optional<OutputData> outputDataOpt =\n          outputDataDao.getOutputDataForExternalJob(externalJobId.get(), ExternalJobType.TITUS);\n      outputDataOpt.ifPresent(\n          outputData -> {\n            \n            if (outputData.getParams() != null) {\n              ParamsMergeHelper.mergeOutputDataParams(\n                  runtimeSummary.getParams(), outputData.getParams());\n            }\n            \n            if (outputData.getArtifacts() != null) {\n              runtimeSummary.mergeRuntimeUpdate(null, outputData.getArtifacts());\n            }\n          });\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/OutputDataManager.java", "function_name": "validateAndMergeOutputParamsAndArtifacts", "index": 1655, "label": 0}
{"input": "@Autowired\n  public OutputDataController(OutputDataDao outputDataDao) {\n    this.outputDataDao = outputDataDao;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b6aaa4f5d3747068470ced2eb91c4ac7ba18f471", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/OutputDataController.java", "function_name": "OutputDataController", "index": 1656, "label": 0}
{"input": "@Test\n  public void testGetFromSignalDependency() {\n    when(signalDependenciesParams.get(\"dev/foo/bar\"))\n        .thenReturn(\n            Collections.singletonList(\n                Collections.singletonMap(\n                    \"param1\", StringParameter.builder().evaluatedResult(\"hello\").build())));\n    assertEquals(\"hello\", paramExtension.getFromSignalDependency(\"dev/foo/bar\", \"param1\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionTest.java", "function_name": "testGetFromSignalDependency", "index": 1657, "label": 0}
{"input": "@Test\n  public void testRunWithProcessError() throws InterruptedException {\n    message = new MessageDto(System.currentTimeMillis() + 9000, \"msgId\", jobEvent, 123456L);\n    when(messageQueue.take()).thenReturn(message).thenThrow(new InterruptedException(\"test\"));\n    when(dispatcher.processJobEvent(any())).thenReturn(Optional.of(jobEvent));\n    queueWorker.run();\n    verify(dispatcher, times(1)).processJobEvent(any());\n    verify(queueDao, times(1)).replace(eq(message), eq(jobEvent), anyLong());\n    verify(messageQueue, times(1)).drainTo(any(), anyInt());\n    verify(queueDao, times(1)).release(anyInt(), anyLong(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/worker/MaestroQueueWorkerTest.java", "function_name": "testRunWithProcessError", "index": 1658, "label": 0}
{"input": "private boolean jj_3R_17() {\n    if (jj_scan_token(LBRACKET)) return true;\n    if (jj_3R_21()) return true;\n    if (jj_scan_token(RBRACKET)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_17", "index": 1659, "label": 0}
{"input": "protected ElementOrEntryNode(\n      @Nullable VmLanguage language,\n      FrameDescriptor descriptor,\n      ObjectMember member,\n      ExpressionNode bodyNode) {\n\n    super(language, descriptor, member, bodyNode);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/member/ElementOrEntryNode.java", "function_name": "ElementOrEntryNode", "index": 1660, "label": 0}
{"input": "private static void checkInitialized() {\n        if (mmkv == null) {\n            throw new IllegalStateException(\"MMKV is not initialized. Call FileManager.initialize(Context) first.\");\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/utils/FileManager.java", "function_name": "checkInitialized", "index": 1661, "label": 0}
{"input": "@Override\n  public String getJobOutput(String jobId) {\n    String log = client.pods().inNamespace(NAMESPACE).withName(jobId).getLog();\n    if (log == null) {\n      return null;\n    }\n    int start = log.lastIndexOf(MAESTRO_OUTPUT_START_TOKEN) + MAESTRO_OUTPUT_START_TOKEN.length();\n    int end = log.lastIndexOf(MAESTRO_OUTPUT_END_TOKEN);\n    if (start < 0 || end < 0 || start >= end) {\n      return null;\n    }\n    return log.substring(start, end);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7352dec4fe9be70bf0076f7ed4d10ca1985ad842", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/Fabric8RuntimeExecutor.java", "function_name": "getJobOutput", "index": 1662, "label": 0}
{"input": "private Artifact getLatestArtifact(\n      String workflowId, long workflowInstanceId, String stepId, String artifactName) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                String.format(GET_LATEST_ARTIFACT_QUERY_TEMPLATE, artifactName, artifactName),\n                stmt -> {\n                  int idx = 0;\n                  stmt.setString(++idx, workflowId);\n                  stmt.setLong(++idx, workflowInstanceId);\n                  stmt.setString(++idx, stepId);\n                },\n                result -> {\n                  if (result.next()) {\n                    return fromJson(result.getString(PAYLOAD_COLUMN), Artifact.class);\n                  }\n                  return null;\n                }),\n        \"getLatestArtifact\",\n        \"Failed to get the latest artifact from workflow instance [{}][{}]'s step [{}]\",\n        workflowId,\n        workflowInstanceId,\n        stepId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getLatestArtifact", "index": 1663, "label": 0}
{"input": "@Test\n\tvoid testInvalidModelName() {\n\t\t\n\t\tDashScopeChatOptions invalidOptions = DashScopeChatOptions.builder().withModel(\"invalid-model\").build();\n\n\t\tDashScopeChatModel invalidModel = DashScopeChatModel.builder()\n\t\t\t.dashScopeApi(dashScopeApi)\n\t\t\t.defaultOptions(invalidOptions)\n\t\t\t.build();\n\t\tMessage message = new UserMessage(TEST_PROMPT);\n\t\tPrompt prompt = new Prompt(List.of(message));\n\n\t\twhen(dashScopeApi.chatCompletionEntity(any(), any())).thenThrow(new RuntimeException(\"Invalid model name\"));\n\n\t\tassertThatThrownBy(() -> invalidModel.call(prompt)).isInstanceOf(RuntimeException.class)\n\t\t\t.hasMessage(\"Invalid model name\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/test/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatModelTests.java", "function_name": "testInvalidModelName", "index": 1664, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceView() throws Exception {\n    si = loadObject(\"fixtures/instances/sample-step-instance-finishing.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    si = loadObject(\"fixtures/instances/sample-step-instance-failed.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    StepInstance instance = stepDao.getStepInstanceView(\"sample-dag-test-3\", 1L, \"job1\");\n    assertEquals(2L, instance.getWorkflowRunId());\n    assertEquals(2L, instance.getStepAttemptId());\n    assertEquals(StepInstance.Status.FINISHING, instance.getRuntimeState().getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceView", "index": 1665, "label": 0}
{"input": "private boolean jj_3R_88() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3_6()) {\n      jj_scanpos = xsp;\n      if (jj_3R_92()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_88", "index": 1666, "label": 0}
{"input": "@Test\n  public void testProcessNoStartDueToFalseCondition() throws Exception {\n    SignalTriggerExecution execution =\n        loadObject(\"fixtures/sample-signal-trigger-execution.json\", SignalTriggerExecution.class);\n    Supplier<SignalTriggerExecution> messageSupplier = () -> execution;\n    processor.process(messageSupplier);\n    verify(actionHandler, times(0)).start(any(), any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_EXECUTION_FAILURE,\n                SignalTriggerExecutionProcessor.class,\n                MetricConstants.TYPE_TAG,\n                \"false_condition\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerExecutionProcessorTest.java", "function_name": "testProcessNoStartDueToFalseCondition", "index": 1667, "label": 0}
{"input": "public SingleLineStringLiteralExpr(\n        List<StringPart> parts, Span startDelimiterSpan, Span endDelimiterSpan, Span span) {\n      super(span, parts);\n      this.startDelimiterSpan = startDelimiterSpan;\n      this.endDelimiterSpan = endDelimiterSpan;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "SingleLineStringLiteralExpr", "index": 1668, "label": 0}
{"input": "@Test\n  public void testFinishSpan() {\n    MaestroTracingManager tm = new TestTracingManager(mockTracer);\n    String value = \"blah\";\n    tm.finish(defaultContext, value, null);\n    verify(mockSpan, times(1)).annotate(value);\n    verify(mockSpan, times(1)).finish();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tracing/MaestroTracingManagerTest.java", "function_name": "testFinishSpan", "index": 1669, "label": 0}
{"input": "@Specialization(guards = {\"isTypedObjectClass(parent)\", \"!iterable.isTyped()\"})\n  protected void evalTypedClass(\n      VirtualFrame frame, VmClass parent, ObjectData data, VmObject iterable) {\n    doEvalTyped(frame, parent, data, iterable);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "evalTypedClass", "index": 1670, "label": 0}
{"input": "@PostMapping(\"attach/remove/{kid}\")\n  public R<Void> removeAttach(@NotEmpty(message = \"主键不能为空\")\n  @PathVariable String kid) {\n    attachService.removeKnowledgeAttach(kid);\n    return R.ok();\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "removeAttach", "index": 1671, "label": 0}
{"input": "@Test\n  public void testFailureOnStart() {\n    when(runtimeExecutor.launchJob(Mockito.any()))\n        .thenThrow(new MaestroBadRequestException(List.of(), \"test-error\"));\n    StepRuntime.Result res = stepRuntime.start(new WorkflowSummary(), null, runtimeSummary);\n    assertEquals(StepRuntime.State.PLATFORM_ERROR, res.getState());\n    assertTrue(res.getArtifacts().isEmpty());\n    assertEquals(1, res.getTimeline().size());\n    assertEquals(\"Error starting KubernetesStepRuntime\", res.getTimeline().getFirst().getMessage());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.STEP_LAUNCHED_METRIC,\n                KubernetesStepRuntime.class,\n                MetricConstants.TYPE_TAG,\n                \"bad_request\",\n                MetricConstants.STATUS_TAG,\n                MetricConstants.STATUS_TAG_VALUE_FAILURE)\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntimeTest.java", "function_name": "testFailureOnStart", "index": 1672, "label": 0}
{"input": "private static void setReceiver(Frame frame, Object receiver) {\n      frame.getArguments()[0] = receiver;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "setReceiver", "index": 1673, "label": 0}
{"input": "@Test\n  public void testInsertDuplicateStepInstance() {\n    AssertHelper.assertThrows(\n        \"cannot insert the same step instance twice\",\n        ApplicationException.class,\n        \"BACKEND_ERROR - ERROR: duplicate key value\",\n        () -> stepDao.insertOrUpsertStepInstance(si, false));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testInsertDuplicateStepInstance", "index": 1674, "label": 0}
{"input": "private StepRuntimeSummary validateAndGet(String stepId) {\n    Map<String, Object> stepData =\n        Checks.notNull(\n            allStepOutputData.get(stepId),\n            \"Cannot find the referenced step id [%s] in the current workflow\",\n            stepId);\n    return StepHelper.retrieveRuntimeSummary(objectMapper, stepData);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "validateAndGet", "index": 1675, "label": 0}
{"input": "public Builder removeMessage2(int index) {\n                if (message2Builder_ == null) {\n                    ensureMessage2IsMutable();\n                    message2_.remove(index);\n                    onChanged();\n                } else {\n                    message2Builder_.remove(index);\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "removeMessage2", "index": 1676, "label": 0}
{"input": "private Type parseTypeEnd(Type type) {\n    \n    if (lookahead == Token.QUESTION) {\n      var end = spanLookahead;\n      next();\n      var res = new Type.NullableType(type, type.span().endWith(end));\n      return parseTypeEnd(res);\n    }\n    \n    if (lookahead == Token.LPAREN && !precededBySemicolon && _lookahead.newLinesBetween == 0) {\n      next();\n      var constraints = parseListOf(Token.COMMA, () -> parseExpr(\")\"));\n      var end = expect(Token.RPAREN, \"unexpectedToken2\", \",\", \")\").span;\n      var children = new ArrayList<Node>(constraints.size() + 1);\n      children.add(type);\n      children.addAll(constraints);\n      var res = new Type.ConstrainedType(children, type.span().endWith(end));\n      return parseTypeEnd(res);\n    }\n    return type;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseTypeEnd", "index": 1677, "label": 0}
{"input": "@Bean\n  public RateLimitingDAO rateLimitingDAO(\n      DataSource crdbDataSource,\n      @Qualifier(ConductorConfiguration.CONDUCTOR_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props) {\n    LOG.info(\"Creating rateLimitingDao within Spring boot...\");\n    return new CockroachDBRateLimitingDAO(crdbDataSource, objectMapper, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "rateLimitingDAO", "index": 1678, "label": 0}
{"input": "default boolean isFlywayBaseLineMigrationEnabled() {\n    return getBoolProperty(\n        FLYWAY_BASELINE_MIGRATION_ENABLED_PROPERTY_NAME,\n        FLYWAY_BASELINE_MIGRATION_ENABLED_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "isFlywayBaseLineMigrationEnabled", "index": 1679, "label": 0}
{"input": "private Map<String, Artifact> getArtifacts(ResultSet rs) throws SQLException {\n    String artifacts = rs.getString(StepInstanceField.ARTIFACTS.field);\n    if (artifacts == null) {\n      return Collections.emptyMap();\n    }\n    Map<String, Artifact> ret = fromJson(artifacts, ARTIFACTS_REFERENCE);\n    if (ret == null) {\n      return Collections.emptyMap();\n    }\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getArtifacts", "index": 1680, "label": 0}
{"input": "@Override\n            public MessageBytesExtra build() {\n                MessageBytesExtra result = buildPartial();\n                if (!result.isInitialized()) {\n                    throw newUninitializedMessageException(result);\n                }\n                return result;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "build", "index": 1681, "label": 0}
{"input": "public WorkflowStartResponse toWorkflowStartResponse() {\n    return WorkflowStartResponse.builder()\n        .workflowId(this.workflowId)\n        .workflowVersionId(this.workflowVersionId)\n        .workflowInstanceId(this.workflowInstanceId)\n        .workflowRunId(this.workflowRunId)\n        .workflowUuid(this.workflowUuid)\n        .status(this.status.runStatus)\n        .timelineEvent(this.timelineEvent)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunResponse.java", "function_name": "toWorkflowStartResponse", "index": 1682, "label": 0}
{"input": "@Test\n  public void testToWorkflowRestartResponse() {\n    RunResponse res = RunResponse.from(stepInstance, TimelineLogEvent.info(\"bar\"));\n    WorkflowInstanceRestartResponse response = res.toWorkflowRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.CREATED, response.getStatus());\n    res = RunResponse.from(instance, \"foo\");\n    response = res.toWorkflowRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.INTERNAL_ERROR, response.getStatus());\n    res = RunResponse.from(instance, 0);\n    response = res.toWorkflowRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.DUPLICATED, response.getStatus());\n    res = RunResponse.from(instance, -1);\n    response = res.toWorkflowRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.STOPPED, response.getStatus());\n    res = RunResponse.from(instance, 1);\n    response = res.toWorkflowRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.CREATED, response.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunResponseTest.java", "function_name": "testToWorkflowRestartResponse", "index": 1683, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidExpr4() throws Exception {\n    run(\"java.util.UUID.randomUUID();\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testInvalidExpr4", "index": 1684, "label": 0}
{"input": "@Scheduled(fixedDelay = 30000) \n  public void dealKnowledgeAttachVector() throws Exception {\n    \n    List<KnowledgeAttach> knowledgeAttaches = attachMapper.selectList(\n        new LambdaQueryWrapper<KnowledgeAttach>()\n            .eq(KnowledgeAttach::getPicStatus, DealStatus.STATUS_30)\n            .eq(KnowledgeAttach::getPicAnysStatus, DealStatus.STATUS_30)\n            .eq(KnowledgeAttach::getVectorStatus, DealStatus.STATUS_10)\n    );\n    log.info(\"===============上传向量数据库 size = {}\", knowledgeAttaches.size());\n    if (ObjectUtil.isNotEmpty(knowledgeAttaches)) {\n      for (KnowledgeAttach attachItem : knowledgeAttaches) {\n        dealFileService.dealVectorStatus(attachItem);\n      }\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "dealKnowledgeAttachVector", "index": 1685, "label": 0}
{"input": "private static void jj_la1_init_1() {\n    jj_la1_1 =\n        new int[] {\n          0x8,\n          0x624086a2,\n          0x20000,\n          0x0,\n          0x0,\n          0x42000600,\n          0x0,\n          0xa0,\n          0x0,\n          0xa0,\n          0x42000600,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x0,\n          0x42000600,\n          0x42000600,\n          0x0,\n          0x0,\n          0x42000400,\n          0x42000600,\n          0x0,\n          0x0,\n          0x200,\n          0x0,\n          0x62408602,\n          0x624086a2,\n          0x62408602,\n          0x0,\n          0x42000600,\n          0x0,\n          0x420006a0,\n          0x42000600,\n          0x42000600,\n          0x42000600,\n        };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_la1_init_1", "index": 1686, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceTags() {\n    TagList tags = stepDao.getStepInstanceTags(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    assertEquals(si.getTags(), tags);\n    TagList latest = stepDao.getStepInstanceTags(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"latest\");\n    assertEquals(tags, latest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceTags", "index": 1687, "label": 0}
{"input": "@Test\n  public void testListToDecimalArray() {\n    Object val = Arrays.asList(new BigDecimal(\"1.2\"), \"3.4\", 5.6);\n    BigDecimal[] actual = ParamHelper.toDecimalArray(\"foo\", val);\n    assertEquals(1.2, actual[0].doubleValue(), 0.00000000);\n    assertEquals(3.4, actual[1].doubleValue(), 0.00000000);\n    assertEquals(5.6, actual[2].doubleValue(), 0.00000000);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ParamHelperTest.java", "function_name": "testListToDecimalArray", "index": 1688, "label": 0}
{"input": "private static Pair<String, String> translateToEnglish(Context context, String name, String[] translatedNames) {\n        Resources resources = context.getResources();\n        String[] englishNames = resources.getStringArray(R.array.englishCountries);\n        for (int i = 0; i < translatedNames.length; i++) {\n            if (translatedNames[i].equalsIgnoreCase(name)) {\n                return new Pair<>(englishNames[i], translatedNames[i]);\n            }\n        }\n\n        \n        return new Pair<>(name, name);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "abcf26c693e386d31c730746b915c346087b18de", "file_path": "app/src/main/java/org/bepass/oblivion/CountryUtils.java", "function_name": "translateToEnglish", "index": 1689, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidWrongArgsCall() {\n    SelString.of(\"a b c\").call(\"isEmpty\", new SelType[] {SelString.of(\"\\\\ \")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidWrongArgsCall", "index": 1690, "label": 0}
{"input": "@Override\n  public CompletableFuture<Void> asyncAddMessage(String queue, Message message) {\n    addMessage(queue, message);\n    return CompletableFuture.completedFuture(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "asyncAddMessage", "index": 1691, "label": 0}
{"input": "@Test\n  public void testBypassDependencies() {\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    stepActionHandler.bypassStepDependencies(\"sample-minimal-wf\", 1, \"job1\", user);\n    verify(actionDao, times(1)).bypassStepDependencies(instance, \"job1\", user);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/StepInstanceActionHandlerTest.java", "function_name": "testBypassDependencies", "index": 1692, "label": 0}
{"input": "private boolean isOutputDataNotEmpty(OutputData data) {\n    return (data.getParams() != null && !data.getParams().isEmpty())\n        || (data.getArtifacts() != null && !data.getArtifacts().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/OutputDataDao.java", "function_name": "isOutputDataNotEmpty", "index": 1693, "label": 0}
{"input": "@Override\n\tpublic ToolExecuteResult execute(BrowserRequestVO request) throws Exception {\n\t\tInteger tabId = request.getTabId();\n\t\tif (tabId == null || tabId < 0) {\n\t\t\treturn new ToolExecuteResult(\"Tab ID is out of range for 'switch_tab' action\");\n\t\t}\n\n\t\tPage page = getCurrentPage(); \n\t\tPage targetPage = page.context().pages().get(tabId); \n\t\tif (targetPage == null) {\n\t\t\treturn new ToolExecuteResult(\"Tab ID \" + tabId + \" does not exist\");\n\t\t}\n\t\treturn new ToolExecuteResult(\"Successfully switched to tab \" + tabId);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/actions/SwitchTabAction.java", "function_name": "execute", "index": 1694, "label": 0}
{"input": "@Test\n  public void testVisitedSomeDataNodeAndBreak() {\n    root.jjtAddChild(dataNode, 2);\n    root.jjtAddChild(breakNode, 1);\n    root.jjtAddChild(dataNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.BREAK, res);\n    assertArrayEquals(new int[] {1, 0, 0, 1, 0}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedSomeDataNodeAndBreak", "index": 1695, "label": 0}
{"input": "private void reconcile(Action.FlowReconcile action) {\n    LOG.debug(\n        \"Last update at [{}] and no update for [{}]ms, let's reconcile\",\n        action.scheduledAt(),\n        System.currentTimeMillis() - action.scheduledAt());\n    decide();\n    schedule(\n        new Action.FlowReconcile(System.currentTimeMillis()), delayForNext(reconciliationInterval));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "reconcile", "index": 1696, "label": 0}
{"input": "public SelEvaluator(\n      int threadNum,\n      int timeout,\n      int stackLimit,\n      int loopLimit,\n      int arrayLimit,\n      int lengthLimit,\n      long visitLimit,\n      long sizeLimit) {\n    MemoryCounter.setMemoryLimit(sizeLimit);\n    this.executor =\n        Executors.newFixedThreadPool(\n            threadNum,\n            new SelThreadFactory(stackLimit, loopLimit, arrayLimit, lengthLimit, visitLimit));\n    this.whitelistVars = new HashSet<>(SelTypeUtil.STATIC_OBJECTS.keySet());\n    this.timeout = timeout;\n    start();\n    warmUp();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/SelEvaluator.java", "function_name": "SelEvaluator", "index": 1697, "label": 0}
{"input": "public Map<String, ParamDefinition> getDefaultWorkflowParams() {\n    return preprocessParams(defaultSystemParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/DefaultParamManager.java", "function_name": "getDefaultWorkflowParams", "index": 1698, "label": 0}
{"input": "@Test\n  public void testStepRetryable() {\n    event.setEntityType(InstanceActionJobEvent.EntityType.STEP);\n    setStepInstanceRuntimeState(StepInstance.Status.FATALLY_FAILED);\n    event.setStepAction(Actions.StepInstanceAction.RESTART);\n    Assert.assertTrue(processor.process(event).isEmpty());\n\n    Mockito.verify(flowOperation, Mockito.times(1))\n        .wakeUp(7, \"[sample-test-workflow-id][2]\", stepId);\n    Mockito.verifyNoInteractions(stepInstanceDao);\n    Mockito.verifyNoInteractions(instanceDao);\n\n    when(flowOperation.wakeUp(anyLong(), any(), any())).thenReturn(false);\n    AssertHelper.assertThrows(\n        \"Underlying task is not woken up and should retry\",\n        MaestroRetryableError.class,\n        \"group [7] is not woken up successfully. Will try again\",\n        () -> processor.process(event));\n    Mockito.verify(flowOperation, Mockito.times(2))\n        .wakeUp(7, \"[sample-test-workflow-id][2]\", stepId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/processors/InstanceActionJobEventProcessorTest.java", "function_name": "testStepRetryable", "index": 1699, "label": 0}
{"input": "public Map<String, Artifact> getStepInstanceArtifacts(\n      String workflowId,\n      long workflowInstanceId,\n      long workflowRunId,\n      String stepId,\n      String stepAttempt) {\n    return getStepInstanceFieldByIds(\n        StepInstanceField.ARTIFACTS,\n        workflowId,\n        workflowInstanceId,\n        workflowRunId,\n        stepId,\n        stepAttempt,\n        this::getArtifacts);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepInstanceArtifacts", "index": 1700, "label": 0}
{"input": "private void enqueueStartWorkflowEvent(String workflowId) {\n    if (workflowId != null && !workflowId.isEmpty() && !IdHelper.isInlineWorkflowId(workflowId)) {\n      queueSystem.enqueueOrThrow(StartWorkflowJobEvent.create(workflowId));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/UpdateJobEventProcessor.java", "function_name": "enqueueStartWorkflowEvent", "index": 1701, "label": 0}
{"input": "public InvalidWorkflowVersionException(String workflowId, String version) {\n    super(\n        Collections.singletonList(\"Invalid workflow version: \" + version),\n        \"Invalid workflow version [%s] for workflow [%s]\",\n        version,\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/InvalidWorkflowVersionException.java", "function_name": "InvalidWorkflowVersionException", "index": 1702, "label": 0}
{"input": "@Test\n  public void testSupportedCallReplaceAll() {\n    SelType res =\n        SelString.of(\"a-B- c\")\n            .call(\"replaceAll\", new SelType[] {SelString.of(\" b\"), SelString.of(\"-B-\")});\n    assertEquals(SelTypes.STRING, res.type());\n    assertEquals(\"a-B- c\", ((SelString) res).getInternalVal());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testSupportedCallReplaceAll", "index": 1703, "label": 0}
{"input": "@JsonIgnore\n  public WorkflowStepStatusSummary addStep(@NotNull List<Long> stepInfo) {\n    if (steps == null) {\n      steps = new ArrayList<>();\n    }\n    steps.add(stepInfo);\n    cnt = steps.size();\n    return this;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowStepStatusSummary.java", "function_name": "addStep", "index": 1704, "label": 0}
{"input": "@Test\n\t@Order(6)\n\t@DisplayName(\"Test Nacos page elements\")\n\tvoid testNacosPageLink() {\n\t\t\n\t\tToolExecuteResult navigateResult = executeAction(\"navigate\", \"https://nacos.io\");\n\t\tAssertions.assertEquals(\"Navigated to https://nacos.io\", navigateResult.getOutput(),\n\t\t\t\t\"Failed to navigate to Nacos\");\n\n\t\tPage page = browserUseTool.getDriver().getCurrentPage();\n\t\tMap<String, Object> state = browserUseTool.getCurrentState(page);\n\t\tString elements = (String) state.get(\"interactive_elements\");\n\t\tAssertions.assertNotNull(elements, \"Failed to get Nacos interactive elements\");\n\t\tlog.info(\"Nacos interactive elements: {}\", elements);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/test/java/com/alibaba/cloud/ai/example/manus/tool/BrowserUseToolSpringTest.java", "function_name": "testNacosPageLink", "index": 1705, "label": 0}
{"input": "private String getOrCreateInstanceId(SignalCreateRequest request) {\n    if (request.getRequestId() != null) {\n      return request.getRequestId();\n    }\n    SignalCreateRequest sorted = new SignalCreateRequest();\n    sorted.setName(request.getName());\n    sorted.setParams(new TreeMap<>(request.getParams()));\n    sorted.setRequestTime(0);\n    \n    return IdHelper.createUuid(toJson(sorted)).toString();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "getOrCreateInstanceId", "index": 1706, "label": 0}
{"input": "@Override\n  public void updateEventHandler(EventHandler eventHandler) {\n    LOG.info(\"Updating an event handler with name: {}\", eventHandler.getName());\n    upsertEventHandler(eventHandler, \"updateEventHandler\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBEventHandlerDAO.java", "function_name": "updateEventHandler", "index": 1707, "label": 0}
{"input": "@Autowired\n  public StepInstanceController(MaestroStepInstanceDao stepInstanceDao) {\n    this.stepInstanceDao = stepInstanceDao;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepInstanceController.java", "function_name": "StepInstanceController", "index": 1708, "label": 0}
{"input": "protected static boolean isReserved11Word(String str) {\n    if (str.length() > 5) return false;\n\n    return switch (str) {\n      case \"\",\n          \"~\",\n          \"null\",\n          \"Null\",\n          \"NULL\",\n          \".nan\",\n          \".NaN\",\n          \".NAN\",\n          \".inf\",\n          \".Inf\",\n          \"~\"0,\n          \"~\"1,\n          \"~\"2,\n          \"~\"3,\n          \"~\"4,\n          \"~\"5,\n          \"~\"6,\n          \"~\"7,\n          \"~\"8,\n          \"~\"9,\n          \"null\"0,\n          \"null\"1,\n          \"null\"2,\n          \"null\"3,\n          \"null\"4,\n          \"null\"5,\n          \"null\"6,\n          \"null\"7,\n          \"null\"8,\n          \"null\"9,\n          \"Null\"0,\n          \"Null\"1,\n          \"Null\"2,\n          \"Null\"3,\n          \"Null\"4,\n          \"Null\"5,\n          \"Null\"6,\n          \"Null\"7,\n          \"Null\"8 ->\n          true;\n      default -> false;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/yaml/YamlEmitter.java", "function_name": "isReserved11Word", "index": 1709, "label": 0}
{"input": "private Psapi.MODULEINFO moduleFromName(WinNT.HANDLE process) {\n        \n        List<Psapi.MODULEINFO> moduleInfos = enumProcessModule(process);\n\n        \n        for (Psapi.MODULEINFO moduleInfo : moduleInfos) {\n            \n            byte[] buffer = new byte[WinNT.MAX_PATH];\n\n            \n            WinNT.HANDLE handle = new WinNT.HANDLE(moduleInfo.lpBaseOfDll);\n\n            \n            Psapi.INSTANCE.GetModuleFileNameExA(process, handle, buffer, buffer.length);\n\n            \n            byte[] trimmedBytes = ArrayUtil.sub(buffer, 0, ArrayUtil.indexOf(buffer, (byte) 0));\n\n            \n            String fileName = new String(trimmedBytes, Charset.defaultCharset());\n\n            \n            if (fileName.endsWith(WeChatServiceImpl.MODULE_NAME)) {\n                return moduleInfo;\n            }\n        }\n        \n        return null;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "aa9e59e82a10caab66c0d90f586f8c00f5aa95e7", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "moduleFromName", "index": 1710, "label": 0}
{"input": "public String semanticConsistency(String sql, String queryPrompt) throws Exception {\n\t\tString semanticConsistenPrompt = PromptHelper.buildSemanticConsistenPrompt(queryPrompt, sql);\n\t\tString call = aiService.call(semanticConsistenPrompt);\n\t\treturn call;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseNl2SqlService.java", "function_name": "semanticConsistency", "index": 1711, "label": 0}
{"input": "public static String parseContent(String jsonString) {\n    try {\n      \n      ObjectMapper objectMapper = new ObjectMapper();\n\n      \n      JsonNode rootNode = objectMapper.readTree(jsonString);\n\n      \n      JsonNode choicesNode = rootNode.get(\"choices\");\n      if (choicesNode != null && choicesNode.isArray() && choicesNode.size() > 0) {\n        \n        JsonNode firstChoice = choicesNode.get(0);\n\n        \n        JsonNode messageNode = firstChoice.get(\"message\");\n        if (messageNode != null) {\n          \n          JsonNode contentNode = messageNode.get(\"content\");\n          if (contentNode != null) {\n            return contentNode.asText();\n          }\n        }\n      }\n\n      return \"无法找到content内容\";\n    } catch (Exception e) {\n      e.printStackTrace();\n      return \"解析JSON时发生错误: \" + e.getMessage();\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/DealFileService.java", "function_name": "parseContent", "index": 1712, "label": 0}
{"input": "@Test\n    public void writev2() throws Exception {\n        \n        String fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".csv\";\n        \n        \n        EasyExcel.write(fileName, CsvData.class).sheet().doWrite(data());\n\n        EasyExcel.read(fileName, CsvData.class, new CsvDataListener()).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "ea96964d00192d8724af42727baa72e802c230f9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvReadTest.java", "function_name": "writev2", "index": 1713, "label": 0}
{"input": "@Test\n  public void testDefaultStepsParamsMutate() {\n    defaultParamManager\n        .getDefaultStepParams()\n        .put(\"TEST\", ParamDefinition.buildParamDefinition(\"TEST\", \"123\"));\n    assertNull(defaultParamManager.getDefaultStepParams().get(\"TEST\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testDefaultStepsParamsMutate", "index": 1714, "label": 0}
{"input": "public MaestroGateTask(MaestroStepInstanceDao stepInstanceDao, ObjectMapper objectMapper) {\n    \n    super(SystemTaskType.EXCLUSIVE_JOIN.name());\n    this.stepInstanceDao = stepInstanceDao;\n    this.objectMapper = objectMapper;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroGateTask.java", "function_name": "MaestroGateTask", "index": 1715, "label": 0}
{"input": "private void setupInstanceBase() {\n    Mockito.when(stepInstance.getDefinition()).thenReturn(stepDefinition);\n    Mockito.when(stepInstance.getRuntimeState()).thenReturn(stepRuntimeState);\n    Mockito.when(stepInstance.getArtifacts()).thenReturn(artifactMap);\n    Mockito.when(stepInstance.getStepId()).thenReturn(stepId);\n    Mockito.when(stepInstance.getStepUuid()).thenReturn(stepUuid);\n    Mockito.when(stepInstance.getStepAttemptId()).thenReturn(Long.valueOf(stepAttemptId));\n    Mockito.when(foreachStepInstance.getStepUuid()).thenReturn(foreachStepUuid);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "setupInstanceBase", "index": 1716, "label": 0}
{"input": "private void scheduleRetryableTask(Task task) {\n    if (task.getStatus().isRestartable()) {\n      long delay = TimeUnit.SECONDS.toMillis(task.getStartDelayInSeconds());\n      if (task.getEndTime() == null) {\n        LOG.warn(\n            \"Critical warning for an unexpected case: Flow task [{}][{}] has status [{}] but endTime is unset.\",\n            reference(),\n            task.referenceTaskName(),\n            task.getStatus());\n      } else {\n        delay = Math.max(0, task.getEndTime() + delay - System.currentTimeMillis());\n      }\n      schedule(new Action.FlowTaskRetry(task.referenceTaskName()), delay);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "scheduleRetryableTask", "index": 1717, "label": 0}
{"input": "@Override\n    public boolean doIsEquivalentTo(TypeNode other) {\n      return other instanceof BooleanTypeNode;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1abd174d773fa5b2e8aeb6afb8f15e4716aa8a90", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "doIsEquivalentTo", "index": 1718, "label": 0}
{"input": "@Test\n  public void testComputePaths() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(), WorkflowGraph.computeDag(request.getWorkflow(), null, null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(3, paths.size());\n    Assert.assertEquals(\n        Arrays.asList(\"job.1\", \"job.2\", \"job.3\", \"#job.6\", \"job.6\", \"job.7\"), paths.get(0));\n    Assert.assertEquals(Collections.singletonList(\"job.4\"), paths.get(1));\n    Assert.assertEquals(Arrays.asList(\"#job.5\", \"job.5\"), paths.get(2));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePaths", "index": 1719, "label": 0}
{"input": "@Test\n  public void testCleanUpAllSteps() {\n    WorkflowSummary summary = new WorkflowSummary();\n    summary.setWorkflowId(stepInstance.getWorkflowId());\n    summary.setWorkflowInstanceId(stepInstance.getWorkflowInstanceId());\n    summary.setWorkflowRunId(stepInstance.getWorkflowRunId());\n    actionDao.terminate(summary, \"one-step1\", user, STOP, \"test-reason\");\n    actionDao.terminate(summary, \"another-step1\", user, STOP, \"test-reason\");\n    Assert.assertEquals(\n        2,\n        actionDao.cleanUp(\n            summary.getWorkflowId(), summary.getWorkflowInstanceId(), summary.getWorkflowRunId()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "testCleanUpAllSteps", "index": 1720, "label": 0}
{"input": "public DatabaseSourceProvider(DatabaseConfiguration configuration) {\n    this.configuration = configuration;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-database/src/main/java/com/netflix/maestro/database/DatabaseSourceProvider.java", "function_name": "DatabaseSourceProvider", "index": 1721, "label": 0}
{"input": "private static List<StepDependencyStatus> initStatuses(List<MapParameter> params) {\n    \n    return params.stream()\n        .map(StepDependencyStatus::createWithPendingStatus)\n        .collect(Collectors.toList());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepDependencies.java", "function_name": "initStatuses", "index": 1722, "label": 0}
{"input": "@Test\n  public void testWorkflowTimedOut() {\n    when(workflow.getStatus()).thenReturn(Workflow.WorkflowStatus.TIMED_OUT);\n    statusListener.onWorkflowTerminated(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowTerminated\",\n                \"status\",\n                \"TIMED_OUT\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowTimedOut", "index": 1723, "label": 0}
{"input": "@Override\n    public CsvReadSheetHolder csvReadSheetHolder() {\n        return (CsvReadSheetHolder) readSheetHolder();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/csv/DefaultCsvReadContext.java", "function_name": "csvReadSheetHolder", "index": 1724, "label": 0}
{"input": "public List<ImportClause> getImports() {\n    if (children.size() < 2) return List.of();\n    var res = new ArrayList<ImportClause>();\n    for (int i = 1; i < children.size(); i++) {\n      var child = children.get(i);\n      if (child instanceof ImportClause imp) {\n        res.add(imp);\n      } else {\n        \n        break;\n      }\n    }\n    return res;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Module.java", "function_name": "getImports", "index": 1725, "label": 0}
{"input": "public static JSONObject modifyChatroomNickNameForSelf(String appId, String nickName,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"nickName\",nickName);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/modifyChatroomNickNameForSelf\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "modifyChatroomNickNameForSelf", "index": 1726, "label": 0}
{"input": "private static int[] getCode(String filePath) {\n        \n        File file = new File(filePath);\n\n        \n        if (file.isDirectory()) {\n            return new int[]{-1, -1};\n        }\n\n        try (FileInputStream datFile = new FileInputStream(filePath)) {\n            \n            byte[] datRead = new byte[2];\n\n            \n            if (datFile.read(datRead, 0, 2) != 2) {\n                return new int[]{-1, -1};\n            }\n\n            \n            for (int i = 0; i < PIC_HEAD.length; i += 2) {\n                \n                int code = (datRead[0] & 0xff) ^ PIC_HEAD[i];\n                \n                int idfCode = (datRead[1] & 0xff) ^ code;\n\n                \n                if (idfCode == PIC_HEAD[i + 1]) {\n                    return new int[]{i, code};\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        \n        return new int[]{-1, -1};\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/ImgDecoderUtil.java", "function_name": "getCode", "index": 1727, "label": 0}
{"input": "@Transactional\n\tpublic void updateConfig(String configPath, String newValue) {\n\t\tConfigEntity entity = configRepository.findByConfigPath(configPath)\n\t\t\t.orElseThrow(() -> new IllegalArgumentException(\"Config not found: \" + configPath));\n\n\t\tentity.setConfigValue(newValue);\n\t\tconfigRepository.save(entity);\n\n\t\t\n\t\tconfigCache.put(configPath, new ConfigCacheEntry<>(newValue));\n\n\t\t\n\t\tMap<String, Object> configBeans = applicationContext.getBeansWithAnnotation(ConfigurationProperties.class);\n\t\tconfigBeans.values().forEach(bean -> updateBeanConfig(bean, configPath, newValue));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/config/ConfigService.java", "function_name": "updateConfig", "index": 1728, "label": 0}
{"input": "@Test\n  public void testDeleteWorkflow() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID1);\n    workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    WorkflowDefinition def = workflowDao.getWorkflowDefinition(TEST_WORKFLOW_ID1, \"latest\");\n    assertNotNull(wfd.getInternalId());\n    assertNotNull(def.getInternalId());\n    assertEquals(wfd.getInternalId(), def.getInternalId());\n    assertEquals(wfd.getWorkflow(), def.getWorkflow());\n    workflowDao.deleteWorkflow(TEST_WORKFLOW_ID1, User.create(\"tester\"));\n    verify(publisher, times(1)).publishOrThrow(any(DeleteWorkflowJobEvent.class), any());\n    reset(publisher);\n    AssertHelper.assertThrows(\n        \"The workflow should have been deleted\",\n        MaestroNotFoundException.class,\n        \"has not been created yet or has been deleted\",\n        () -> workflowDao.getWorkflowDefinition(TEST_WORKFLOW_ID1, \"latest\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testDeleteWorkflow", "index": 1729, "label": 0}
{"input": "@Test\n  public void testProvidedInputPath() {\n    String entrypoint = papermillEntrypointBuilder.generatePapermillRuntime(context).entrypoint();\n    assertTrue(entrypoint.contains(\"papermill '/some/notebook.ipynb'\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilderTest.java", "function_name": "testProvidedInputPath", "index": 1730, "label": 0}
{"input": "private long[] executeTemplateUpdate(\n      Connection conn, StringBuilder fields, List<StatementPreparer> preparers)\n      throws SQLException {\n    if (preparers.size() <= EMPTY_SIZE_CASE) {\n      return null;\n    }\n    try (PreparedStatement stmt =\n        conn.prepareStatement(getUpsertWorkflowQuery(fields, preparers))) {\n      for (StatementPreparer preparer : preparers) {\n        preparer.prepare(stmt);\n      }\n      try (ResultSet result = stmt.executeQuery()) {\n        if (result.next()) {\n          return new long[] {\n            result.getTimestamp(MODIFY_TS_COLUMN).getTime(), result.getLong(INTERNAL_ID_COLUMN)\n          };\n        }\n        return null;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "executeTemplateUpdate", "index": 1731, "label": 0}
{"input": "@Override\n    public boolean isValid(Workflow workflow, ConstraintValidatorContext context) {\n      if (workflow == null) {\n        context\n            .buildConstraintViolationWithTemplate(\"[workflow definition] cannot be null\")\n            .addConstraintViolation();\n        return false;\n      }\n\n      return isStepListValid(workflow, context)\n          && isDagValid(workflow.getSteps(), context)\n          && isInstanceStepConcurrencyValid(workflow.getInstanceStepConcurrency(), context)\n          && isLoopParamNameValid(workflow, context);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/WorkflowConstraint.java", "function_name": "isValid", "index": 1732, "label": 0}
{"input": "@ApiOperation(value = \"换脸\")\n    @PostMapping(\"/insight-face/swap\")\n    public String insightFace(@RequestBody InsightFace insightFace) {\n        \n        chatCostService.taskDeduct(\"mj\",\"Face Changing\", 0.0);\n        \n        String insightFaceJson = JSONUtil.toJsonStr(insightFace);\n        String url = \"mj/insight-face/swap\";\n        Request request = mjOkHttpUtil.createPostRequest(url, insightFaceJson);\n        return mjOkHttpUtil.executeRequest(request);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/tripartite/FaceController.java", "function_name": "insightFace", "index": 1733, "label": 0}
{"input": "@Test\n  public void testStartWorkflowInstanceWithSameUuid() {\n    wfi.setWorkflowUuid(\"8a0bd56f-745f-4a2c-b81b-1b2f89127e73\");\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(0, res);\n    assertEquals(1, wfi.getWorkflowInstanceId());\n    assertEquals(1, wfi.getWorkflowRunId());\n    assertEquals(\"8a0bd56f-745f-4a2c-b81b-1b2f89127e73\", wfi.getWorkflowUuid());\n    verifyPublish(0, 0, 0, 0, 0);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "testStartWorkflowInstanceWithSameUuid", "index": 1734, "label": 0}
{"input": "@Override\r\n    public String downloadImgMd5(String md5) {\r\n        \n        String userDir = System.getProperty(\"user.dir\");\r\n        \n        String separator = System.getProperty(\"file.separator\");\r\n        \n        String imgUrl = hardLinkImageAttributeRepository.queryHardLinkImage(HexUtil.decodeHex(md5));\r\n        \n        if (StrUtil.isBlank(imgUrl)) {\r\n            return userDir + separator + \"asset\" + separator + \"404.png\";\r\n        }\r\n        \n        WeChatVO user = UserUtil.getUser();\r\n        \n        String filePath = user.getBasePath() + \"\\\\\" + user.getWxId() + imgUrl;\r\n        \n        if (!FileUtil.exist(filePath)) {\r\n            return userDir + separator + \"asset\" + separator + \"404.png\";\r\n        }\r\n        String outPath = userDir + separator + \"img\";\r\n        \n        return ImgDecoderUtil.decodeDat(filePath, outPath);\r\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ImageServiceImpl.java", "function_name": "downloadImgMd5", "index": 1735, "label": 0}
{"input": "@Test\n  public void testGetRunningForeachIterationOverview() {\n    List<ForeachIterationOverview> stats =\n        instanceDao.getForeachIterationOverviewWithCheckpoint(wfi.getWorkflowId(), 1, 0, false);\n    checkSingletonStats(stats, 1L, WorkflowInstance.Status.CREATED);\n    stats = instanceDao.getForeachIterationOverviewWithCheckpoint(wfi.getWorkflowId(), 1, 0, false);\n    checkSingletonStats(stats, 1L, WorkflowInstance.Status.CREATED);\n    boolean res =\n        instanceDao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.STOPPED, \"test-reason\");\n    assertTrue(res);\n    stats = instanceDao.getForeachIterationOverviewWithCheckpoint(wfi.getWorkflowId(), 1, 0, false);\n    checkSingletonStats(stats, 1L, WorkflowInstance.Status.STOPPED);\n\n    stats = instanceDao.getForeachIterationOverviewWithCheckpoint(wfi.getWorkflowId(), 1, 2, false);\n    assertTrue(stats.isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetRunningForeachIterationOverview", "index": 1736, "label": 0}
{"input": "void wakeUpChildActors(Action action) {\n    childActors.forEach((ref, actor) -> actor.post(action));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "wakeUpChildActors", "index": 1737, "label": 0}
{"input": "@ExceptionHandler(value = {UnrecognizedPropertyException.class})\n  protected ResponseEntity<Object> handleUnrecognizedPropertyException(\n      UnrecognizedPropertyException e, WebRequest request) {\n    LOG.info(\"Handle UnrecognizedProperty Exception with a message: {}\", e.getMessage());\n    return buildDetailedResponse(e, HttpStatus.BAD_REQUEST, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleUnrecognizedPropertyException", "index": 1738, "label": 0}
{"input": "private static SelType callJavaMethod2(Object obj, SelType arg1, SelType arg2, MethodHandle m)\n      throws Throwable {\n    Object obj1 = arg1.unbox();\n    Object obj2 = arg2.unbox();\n    if (obj == null) {\n      return box(m.invoke(obj1, obj2));\n    } else {\n      return box(m.invoke(obj, obj1, obj2));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypeUtil.java", "function_name": "callJavaMethod2", "index": 1739, "label": 0}
{"input": "private static boolean isIdentifierStart(char c) {\n    return c == '_' || c == '$' || Character.isUnicodeIdentifierStart(c);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "isIdentifierStart", "index": 1740, "label": 0}
{"input": "private static boolean hasFormat(ExcelContentProperty contentProperty) {\n        return contentProperty != null && contentProperty.getNumberFormatProperty() != null && !StringUtils.isEmpty(\n                contentProperty.getNumberFormatProperty().getFormat());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/NumberUtils.java", "function_name": "hasFormat", "index": 1741, "label": 0}
{"input": "private Map.Entry<String, Long> getTaskChecksumAndUpdateTime(String taskId) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_TASK_CHECKSUM_UPDATE_TIME_QUERY,\n                stmt -> stmt.setString(1, taskId),\n                result -> {\n                  if (result.next()) {\n                    return new AbstractMap.SimpleEntry<>(\n                        result.getString(ID_COLUMN), result.getLong(PAYLOAD_COLUMN));\n                  }\n                  return null;\n                }),\n        \"getTaskChecksumAndUpdateTime\",\n        \"Failed getting checksum and update time of a task with id {}\",\n        taskId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/conductor/cockroachdb/dao/MaestroCockroachDBExecutionDao.java", "function_name": "getTaskChecksumAndUpdateTime", "index": 1742, "label": 0}
{"input": "private Token lexEscape() {\n    if (lookahead == EOF) throw unexpectedEndOfFile();\n    var ch = nextChar();\n    return switch (ch) {\n      case 'n' -> Token.STRING_ESCAPE_NEWLINE;\n      case '\"' -> Token.STRING_ESCAPE_QUOTE;\n      case '\\\\' -> Token.STRING_ESCAPE_BACKSLASH;\n      case 't' -> Token.STRING_ESCAPE_TAB;\n      case 'r' -> Token.STRING_ESCAPE_RETURN;\n      case '(' -> {\n        var scope = interpolationStack.getFirst();\n        scope.parens++;\n        state = State.DEFAULT;\n        yield Token.INTERPOLATION_START;\n      }\n      case 'u' -> lexUnicodeEscape();\n      default ->\n          throw lexError(\n              ErrorMessages.create(\"invalidCharacterEscapeSequence\", \"\\\\\" + ch, \"\\\\\"),\n              cursor - 2,\n              2);\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexEscape", "index": 1743, "label": 0}
{"input": "protected GeneratorElementNode(ObjectMember element, boolean isFrameStored) {\n    super(element.getSourceSection(), isFrameStored);\n    this.element = element;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorElementNode.java", "function_name": "GeneratorElementNode", "index": 1744, "label": 0}
{"input": "private Map<String, DashScopeChatModel> agentModels() {\n\t\t\n\t\treturn models.stream()\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.collect(Collectors.toMap(ModelParamRepositoryImpl.AgentModel::name,\n\t\t\t\t\tmodel -> DashScopeChatModel.builder()\n\t\t\t\t\t\t.dashScopeApi(DashScopeApi.builder().apiKey(commonProperties.getApiKey()).build())\n\t\t\t\t\t\t.defaultOptions(DashScopeChatOptions.builder()\n\t\t\t\t\t\t\t.withModel(model.modelName())\n\t\t\t\t\t\t\t.withTemperature(DashScopeChatModel.DEFAULT_TEMPERATURE)\n\t\t\t\t\t\t\t.build())\n\t\t\t\t\t\t.build(),\n\t\t\t\t\t(existing, replacement) -> existing) \n\t\t\t);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentModelsConfiguration.java", "function_name": "agentModels", "index": 1745, "label": 0}
{"input": "@Test\n  public void testTransformMapToSignalDependency() throws IOException {\n    SignalDependenciesDefinition definition =\n        loadObject(\n            \"fixtures/signal/sample-signal-dependencies-definition.json\",\n            SignalDependenciesDefinition.class);\n    MapParameter param =\n        MapParameter.builder()\n            .evaluatedResult(Map.of(\"name\", \"signal_a\", \"param_a\", \"test123\"))\n            .build();\n    var dependency = SignalTransformer.transform(definition.definitions().getFirst(), param);\n    Assert.assertEquals(\"signal_a\", dependency.getName());\n    Assert.assertEquals(StepDependencyMatchStatus.PENDING, dependency.getStatus());\n    Assert.assertEquals(\n        Map.of(\n            \"param_a\",\n            SignalMatchParam.builder()\n                .value(SignalParamValue.of(\"test123\"))\n                .operator(SignalOperator.EQUALS_TO)\n                .build()),\n        dependency.getMatchParams());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalTransformerTest.java", "function_name": "testTransformMapToSignalDependency", "index": 1746, "label": 0}
{"input": "@Bean\n  public StepRuntimeCallbackDelayPolicy stepRuntimeCallbackPolicy(\n      StepRuntimeProperties stepRuntimeProperties) {\n    LOG.info(\"Creating StepRuntimeCallbackDelayPolicy policy within Spring boot...\");\n    return new StepRuntimeFixedCallbackDelayPolicy(stepRuntimeProperties.getCallbackDelayConfig());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "stepRuntimeCallbackPolicy", "index": 1747, "label": 0}
{"input": "private boolean jj_3R_70() {\n    if (jj_scan_token(BANG)) return true;\n    if (jj_3R_59()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_70", "index": 1748, "label": 0}
{"input": "@Test\n  public void testAllowedTypeCastingIntoLong() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        ParamsMergeHelperTest.this.parseParamDefMap(\n            \"{'tomerge': {'type': 'LONG','value': 123, 'name': 'tomerge'}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        ParamsMergeHelperTest.this.parseParamDefMap(\n            \"{'tomerge': {'type': 'STRING', 'value': '234', 'name': 'tomerge'}}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n    assertEquals(1, allParams.size());\n    assertEquals(Long.valueOf(234), allParams.get(\"tomerge\").asLongParamDef().getValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testAllowedTypeCastingIntoLong", "index": 1749, "label": 0}
{"input": "private void addTctParamsIfPresent(Map<String, Object> paramMap, Alerting alerting) {\n    Tct tct = alerting.getTct();\n    if (tct == null) {\n      return;\n    }\n    Map<String, String> tctMap = new LinkedHashMap<>();\n    if (tct.getCompletedByHour() != null) {\n      tctMap.put(NotebookConstants.TCT_COMPLETED_BY_HOUR, tct.getCompletedByHour().toString());\n    }\n    if (tct.getDurationMinutes() != null) {\n      tctMap.put(NotebookConstants.TCT_DURATION_MINUTES, tct.getDurationMinutes().toString());\n    }\n    if (tct.getCompletedByTs() != null) {\n      tctMap.put(NotebookConstants.TCT_COMPLETED_BY_TS, tct.getCompletedByTs().toString());\n    }\n    if (tct.getTz() != null) {\n      tctMap.put(NotebookConstants.TCT_TZ, tct.getTz());\n    }\n    if (!tctMap.isEmpty()) {\n      paramMap.put(NotebookConstants.TCT_PARAM, tctMap);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilder.java", "function_name": "addTctParamsIfPresent", "index": 1750, "label": 0}
{"input": "public void setMaxConnections(final int maxConnections) {\n\t\tthis.maxConnections = maxConnections;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "83348b9b46e13d47875290ad5cc41b2c8ea400c4", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/node/code/entity/CodeExecutionConfig.java", "function_name": "setMaxConnections", "index": 1751, "label": 0}
{"input": "private void setFieldValue(Object bean, Field field, String value) {\n\t\ttry {\n\t\t\tfield.setAccessible(true);\n\n\t\t\t\n\t\t\tObject convertedValue = convertValue(value, field.getType());\n\t\t\tfield.set(bean, convertedValue);\n\n\t\t}\n\t\tcatch (IllegalAccessException e) {\n\t\t\tlog.error(\"Failed to set field value\", e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/config/ConfigService.java", "function_name": "setFieldValue", "index": 1752, "label": 0}
{"input": "@Test\n  public void testGetParsedRetryPolicyValid() {\n    RetryPolicy parsedRetryPolicy =\n        RetryPolicyParser.getParsedRetryPolicy(\n            RetryPolicy.builder()\n                .errorRetryLimit(ParsableLong.of(1L))\n                .platformRetryLimit(ParsableLong.of(\"2\"))\n                .timeoutRetryLimit(ParsableLong.of(3L))\n                .build(),\n            paramMapper);\n\n    RetryPolicy expected =\n        RetryPolicy.builder()\n            .errorRetryLimit(ParsableLong.of(1L))\n            .platformRetryLimit(ParsableLong.of(2L))\n            .timeoutRetryLimit(ParsableLong.of(3L))\n            .build();\n    assertEquals(expected, parsedRetryPolicy);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/RetryPolicyParserTest.java", "function_name": "testGetParsedRetryPolicyValid", "index": 1753, "label": 0}
{"input": "public CsvWorkbook(Appendable out, Locale locale, Boolean use1904windowing, Boolean useScientificFormat,\n            Charset charset, Boolean withBom) {\n        this.out = out;\n        this.locale = locale;\n        this.use1904windowing = use1904windowing;\n        this.useScientificFormat = useScientificFormat;\n        this.charset = charset;\n        this.withBom = withBom;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvWorkbook.java", "function_name": "CsvWorkbook", "index": 1754, "label": 0}
{"input": "private void testRoundTripSerdeHelper(String filePath) throws Exception {\n    WorkflowSummary expected = loadObject(filePath, WorkflowSummary.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    WorkflowSummary actual =\n        MAPPER.readValue(MAPPER.writeValueAsString(expected), WorkflowSummary.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/WorkflowSummaryTest.java", "function_name": "testRoundTripSerdeHelper", "index": 1755, "label": 0}
{"input": "private String getSubTreeImage(SimpleNode node) {\n    StringBuilder sb = new StringBuilder();\n    Token t = node.jjtGetFirstToken();\n    while (t != node.jjtGetLastToken()) {\n      sb.append(t.image);\n      sb.append(' ');\n      t = t.next;\n    }\n    sb.append(t.image);\n    return sb.toString();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelParserEvaluationVisitor.java", "function_name": "getSubTreeImage", "index": 1756, "label": 0}
{"input": "private String listExports() {\n        Program program = getCurrentProgram();\n        StringBuilder sb = new StringBuilder();\n        for (Function func : program.getFunctionManager().getFunctions(true)) {\n            if (func.isExternal()) {\n                sb.append(func.getName()).append(\" -> \").append(func.getEntryPoint()).append(\"\\n\");\n            }\n        }\n        return sb.toString();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "listExports", "index": 1757, "label": 0}
{"input": "public void putRunningFlag() {\n        try {\n            this.file.createNewFile();\n            this.file.deleteOnExit();\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                if (this.file.exists()) {\n                    this.file.delete();\n                }\n            }));\n        } catch (IOException e) {\n            log.error(\"Unable to create running flag file\", e);\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "bdc585b204889b8dca085ed38187a328957f55e6", "file_path": "src/main/java/com/ghostchu/peerbanhelper/CrashManager.java", "function_name": "putRunningFlag", "index": 1758, "label": 0}
{"input": "@VisibleForTesting\n  void validateWorkflow(Workflow workflow) {\n    Preconditions.checkNotNull(workflow.getWorkflowId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "validateWorkflow", "index": 1759, "label": 0}
{"input": "@Override\n  public String downloadByByte(Long ossId) throws IOException {\n    SysOssVo sysOss = SpringUtils.getAopProxy(this).getById(ossId);\n    if (ObjectUtil.isNull(sysOss)) {\n      throw new ServiceException(\"文件数据不存在!\");\n    }\n\n    OssClient storage = OssFactory.instance();\n    try (InputStream inputStream = storage.getObjectContent(sysOss.getUrl())) {\n      \n      byte[] bytes = IoUtil.readBytes(inputStream);\n      \n      return Base64.getEncoder().encodeToString(bytes);\n    } catch (Exception e) {\n      throw new ServiceException(e.getMessage());\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOssServiceImpl.java", "function_name": "downloadByByte", "index": 1760, "label": 0}
{"input": "@Test\n  public void testCleanupChildActors() {\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    groupActor.cleanupChildActors();\n    assertTrue(groupActor.containsChild(\"test-flow-ref\"));\n\n    flowActor.terminateNow();\n    groupActor.cleanupChildActors();\n    assertFalse(groupActor.containsChild(\"test-flow-ref\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testCleanupChildActors", "index": 1761, "label": 0}
{"input": "@NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.split_tunnel_options, parent, false);\n        return new ViewHolder(view);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/SplitTunnelOptionsAdapter.java", "function_name": "onCreateViewHolder", "index": 1762, "label": 0}
{"input": "@Override\n  public void checkPermission(Permission perm, Object context) {\n    if (accs.get() != null) {\n      super.checkPermission(perm, context);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkPermission", "index": 1763, "label": 0}
{"input": "private boolean jj_3R_23() {\n    if (jj_scan_token(LBRACKET)) return true;\n    if (jj_3R_21()) return true;\n    if (jj_scan_token(RBRACKET)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_23", "index": 1764, "label": 0}
{"input": "@Test\n  public void testEnqueueOrThrowWithError() {\n    when(queueDao.enqueue(any(), anyLong())).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"should throw\", RuntimeException.class, \"test\", () -> queueSystem.enqueueOrThrow(jobEvent));\n    verify(eventQueues, times(1)).get(eq(MaestroJobEvent.Type.START_WORKFLOW));\n    verify(queueDao, times(1)).enqueue(any(), anyLong());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/MaestroQueueSystemTest.java", "function_name": "testEnqueueOrThrowWithError", "index": 1765, "label": 0}
{"input": "private static @Nullable Operator getHighestPrecedence(List<Expr> exprs, int min) {\n    var highest = -1;\n    Operator op = null;\n    for (var expr : exprs) {\n      if (expr instanceof OperatorExpr o) {\n        var precedence = getPrecedence(o.getOp());\n        if (precedence > highest && precedence >= min) {\n          highest = precedence;\n          op = o.getOp();\n        }\n      }\n    }\n    return op;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/OperatorResolver.java", "function_name": "getHighestPrecedence", "index": 1766, "label": 0}
{"input": "@Override\n  public <T> @Nullable T accept(ParserVisitor<? extends T> visitor) {\n    return visitor.visitTypeParameterList(this);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeParameterList.java", "function_name": "accept", "index": 1767, "label": 0}
{"input": "public Builder mergeMessage1(SubMessage1 value) {\n                if (message1Builder_ == null) {\n                    if (((bitField0_ & 0x00000001) != 0) &&\n                            message1_ != null &&\n                            message1_ != SubMessage1.getDefaultInstance()) {\n                        getMessage1Builder().mergeFrom(value);\n                    } else {\n                        message1_ = value;\n                    }\n                } else {\n                    message1Builder_.mergeFrom(value);\n                }\n                if (message1_ != null) {\n                    bitField0_ |= 0x00000001;\n                    onChanged();\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "mergeMessage1", "index": 1768, "label": 0}
{"input": "public static synchronized void startVpnService(Context context) {\n        Intent intent = new Intent(context, OblivionVpnService.class);\n        intent.setAction(OblivionVpnService.FLAG_VPN_START);\n        ContextCompat.startForegroundService(context, intent);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "1b8cac24586d9b4455b76f2f881c53e92d1aec73", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "startVpnService", "index": 1769, "label": 0}
{"input": "public String toPlanTemplateId(String planId) {\n\t\tif (planId == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isPlanTemplateId(planId)) {\n\t\t\treturn planId; \n\t\t}\n\n\t\tif (isPlanId(planId)) {\n\t\t\t\n\t\t\tString numericPart = planId.substring(PLAN_ID_PREFIX.length());\n\t\t\tString planTemplateId = PLAN_TEMPLATE_ID_PREFIX + numericPart;\n\t\t\tlogger.debug(\"Converted planId [{}] to planTemplateId [{}]\", planId, planTemplateId);\n\t\t\treturn planTemplateId;\n\t\t}\n\n\t\t\n\t\tlogger.warn(\"Unknown ID format [{}], added planTemplateId prefix\", planId);\n\t\treturn PLAN_TEMPLATE_ID_PREFIX + planId;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/coordinator/PlanIdDispatcher.java", "function_name": "toPlanTemplateId", "index": 1770, "label": 0}
{"input": "@Test\n    public void xlsxTest2() throws IOException {\n        try (ExcelReader reader = EasyExcel.read(\n                Files.newInputStream(Paths.get(\"src/test/resources/repeat/repeat.xlsx\")), LockData.class,\n                new RepeatListener()).headRowNumber(0).build()) {\n            ReadSheet r2 = EasyExcel.readSheet(1).build();\n            reader.read(r2);\n            reader.finish();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "179dca17c46b409b27904d552e011f733fcea33e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "xlsxTest2", "index": 1771, "label": 0}
{"input": "@Bean\n\tpublic ExportService exportService(ExportProperties exportProperties) {\n\t\treturn new ExportService(exportProperties.getPath());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/config/export/ExportConfiguration.java", "function_name": "exportService", "index": 1772, "label": 0}
{"input": "private void handleColorCommand(String line) {\n        Matcher m = Pattern.compile(\"\\\\[f:(#\\\\w{6}),b:(#\\\\w{6})\\\\]\").matcher(line);\n        if (m.find()) {\n            contentItems.add(new ColorCommand(\n                    m.group(1),\n                    m.group(2)\n            ));\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "334564c4c414aa37077c7e481ee42c96f27163be", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtAboutWindow.java", "function_name": "handleColorCommand", "index": 1773, "label": 0}
{"input": "@SuppressWarnings(\"unchecked\")\n  public static SelType box(Object o) {\n    if (o == null) { \n      return SelType.NULL;\n    }\n    SelTypes type = fromClazzToSelType(o.getClass());\n    switch (type) {\n      case STRING:\n        return SelString.of((String) o);\n      case LONG:\n        return SelLong.of(((Number) o).longValue());\n      case DOUBLE:\n        return SelDouble.of(((Number) o).doubleValue());\n      case BOOLEAN:\n        return SelBoolean.of((Boolean) o);\n      case STRING_ARRAY:\n      case LONG_ARRAY:\n      case DOUBLE_ARRAY:\n      case BOOLEAN_ARRAY:\n        return SelArray.of(o, type);\n      case MAP:\n        return SelMap.of((Map<String, Object>) o);\n      case DATETIME:\n        return SelJodaDateTime.of((DateTime) o);\n      case DATETIME_PROPERTY:\n        return SelJodaDateTimeProperty.of((DateTime.Property) o);\n    }\n    throw new UnsupportedOperationException(\n        \"Not support to box an object \" + o + \" for type \" + type.name());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypeUtil.java", "function_name": "box", "index": 1774, "label": 0}
{"input": "@GetMapping(\"/resource/sms/code\")\n    public R<Void> smsCode(@NotBlank(message = \"{user.phonenumber.not.blank}\") String phonenumber) {\n        if (!smsProperties.getEnabled()) {\n            return R.fail(\"当前系统没有开启短信功能！\");\n        }\n        String key = GlobalConstants.CAPTCHA_CODE_KEY + phonenumber;\n        String code = RandomUtil.randomNumbers(4);\n        RedisUtils.setCacheObject(key, code, Duration.ofMinutes(Constants.CAPTCHA_EXPIRATION));\n        \n        String templateId = \"\";\n        Map<String, String> map = new HashMap<>(1);\n        map.put(\"code\", code);\n        SmsTemplate smsTemplate = SpringUtils.getBean(SmsTemplate.class);\n        SmsResult result = smsTemplate.send(phonenumber, templateId, map);\n        if (!result.isSuccess()) {\n            log.error(\"验证码短信发送异常 => {}\", result);\n            return R.fail(result.getMessage());\n        }\n        return R.ok();\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "bedffffd8673cf62a5e4530bda584fc714c61731", "file_path": "ruoyi-admin/src/main/java/org/ruoyi/controller/CaptchaController.java", "function_name": "smsCode", "index": 1775, "label": 0}
{"input": "@ExceptionHandler(value = {MaestroInternalError.class})\n  protected ResponseEntity<Object> handleMaestroInternalErrorException(\n      MaestroInternalError e, WebRequest request) {\n    LOG.info(\"Handle MaestroInternalError with a message: {}\", e.getMessage());\n    return buildDetailedResponse(\n        e, e.getDetails().getErrors(), HttpStatus.valueOf(e.getHttpStatusCode()), request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleMaestroInternalErrorException", "index": 1776, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.listener.type\", havingValue = \"sqs\")\n  public SqsDeleteWorkflowJobListener sqsDeleteWorkflowJobListener(\n      DeleteWorkflowJobProcessor deleteWorkflowJobProcessor,\n      SqsProcessorFinalizer sqsProcessorFinalizer) {\n    LOG.info(\"Creating sqsDeleteWorkflowJobListener within Spring boot...\");\n    return new SqsDeleteWorkflowJobListener(deleteWorkflowJobProcessor, sqsProcessorFinalizer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsDeleteWorkflowJobListener", "index": 1777, "label": 0}
{"input": "public SubMessage1.Builder getMessage1Builder() {\n                bitField0_ |= 0x00000001;\n                onChanged();\n                return getMessage1FieldBuilder().getBuilder();\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage1Builder", "index": 1778, "label": 0}
{"input": "private String generateDedupKey(ForeachArtifact artifact, int index) {\n    return String.format(\n        \"[%s][%s][%s]\", artifact.getForeachWorkflowId(), artifact.getForeachRunId(), index);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "generateDedupKey", "index": 1779, "label": 0}
{"input": "@Test\n    public void t02Read03() {\n        read(file03, null);\n        read(file03, Boolean.FALSE);\n        read(file03, Boolean.TRUE);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/hiddensheets/HiddenSheetsTest.java", "function_name": "t02Read03", "index": 1780, "label": 0}
{"input": "@Test\n  public void testRunForeachBatch() {\n    RunRequest request =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n            .build();\n    Optional<Details> errors =\n        actionHandler.runForeachBatch(\n            definition.getWorkflow(),\n            123L,\n            1L,\n            new RunProperties(),\n            \"foreach-step\",\n            new ForeachArtifact(),\n            Collections.singletonList(request),\n            Collections.singletonList(1L),\n            1);\n    assertFalse(errors.isPresent());\n    verify(instanceDao, times(1)).runWorkflowInstances(any(), any(), eq(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testRunForeachBatch", "index": 1781, "label": 0}
{"input": "private TimelineObjectBO parseXmlToObj(String xml) {\n        try {\n            xml = xml.replace(\"&#x2;\", \"\");\n            xml = xml.replace(\"&#x02;\", \"\");\n            return XmlUtil.parseXml(xml, TimelineObjectBO.class);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/FeedsServiceImpl.java", "function_name": "parseXmlToObj", "index": 1782, "label": 0}
{"input": "<T> List<List<T>> computePaths(Translator<Step, T> translator) {\n    List<List<T>> taskPaths = new ArrayList<>();\n    while (!startNodes.isEmpty()) {\n      Iterator<GraphNode> iterator = startNodes.iterator();\n      GraphNode start = iterator.next();\n      iterator.remove();\n      List<T> path = getPath(start, translator);\n      taskPaths.add(path);\n    }\n    return taskPaths;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/WorkflowGraph.java", "function_name": "computePaths", "index": 1783, "label": 0}
{"input": "@Override\n  public CompletableFuture<Void> asyncUpdateWorkflow(\n      String workflowInstanceId, String[] keys, Object[] values) {\n    \n    return CompletableFuture.completedFuture(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "asyncUpdateWorkflow", "index": 1784, "label": 0}
{"input": "protected <T> List<T> getPayloads(String stmt, StatementPreparer preparer, Class<T> clazz) {\n    return withRetryableQuery(stmt, preparer, r -> payloadsFromResult(r, clazz));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "getPayloads", "index": 1785, "label": 0}
{"input": "public static boolean isCollectionEmptyOrNull(Collection<?> collection) {\n    return collection == null || collection.isEmpty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/ObjectHelper.java", "function_name": "isCollectionEmptyOrNull", "index": 1786, "label": 0}
{"input": "public ObjectBody(List<Node> nodes, int membersOffset, Span span) {\n    super(span, nodes);\n    this.membersOffset = membersOffset;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectBody.java", "function_name": "ObjectBody", "index": 1787, "label": 0}
{"input": "@Test\n  public void testRelease() {\n    StartWorkflowJobEvent jobEvent2 = new StartWorkflowJobEvent();\n    var msgs = List.of(dao.enqueue(jobEvent, 123456789L), dao.enqueue(jobEvent2, 123456789L));\n    Optional<Details> errors = dao.release(jobEvent.getType().getQueueId(), 12345L, msgs);\n    assertTrue(errors.isEmpty());\n    List<MessageDto> owned =\n        dao.dequeueUnownedMessages(jobEvent.getType().getQueueId(), 123456789L, 10);\n    assertEquals(2, owned.size());\n    assertEquals(\n        msgs.stream().map(MessageDto::msgId).collect(Collectors.toSet()),\n        owned.stream().map(MessageDto::msgId).collect(Collectors.toSet()));\n    dao.remove(owned.getFirst());\n    dao.remove(owned.get(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/dao/MaestroQueueDaoTest.java", "function_name": "testRelease", "index": 1788, "label": 0}
{"input": "private void checkSpaceSeparatedObjectMembers(ObjectBody objectBody) {\n    var members = objectBody.getMembers();\n    if (members.size() < 2) {\n      return;\n    }\n    var previous = members.get(0).span();\n    for (var i = 1; i < members.size(); i++) {\n      var member = members.get(i);\n      if (previous.adjacent(member.span())) {\n        throw exceptionBuilder()\n            .evalError(\"unseparatedObjectMembers\")\n            .withSourceSection(createSourceSection(member.span()))\n            .build();\n      }\n      previous = member.span();\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "checkSpaceSeparatedObjectMembers", "index": 1789, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidCall() {\n    SelUtilFunc.INSTANCE.call(\"invalidMethod\", new SelType[] {SelString.of(\"12345\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testInvalidCall", "index": 1790, "label": 0}
{"input": "ExternalModuleResolverImpl(MessageTransport transport, long evaluatorId) {\n    this.transport = transport;\n    this.evaluatorId = evaluatorId;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "52a86d3f329d264b9b9a8e0f9f3a6df39165bbfb", "file_path": "pkl-core/src/main/java/org/pkl/core/externalreader/ExternalModuleResolverImpl.java", "function_name": "ExternalModuleResolverImpl", "index": 1791, "label": 0}
{"input": "@Test\n  public void testLongParameter() {\n    LongParameter param =\n        LongParameter.builder()\n            .name(\"longParam\")\n            .expression(\"return 123;\")\n            .evaluatedResult(123L)\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asLongParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testLongParameter", "index": 1792, "label": 0}
{"input": "public ModuleInfo(\n      SourceSection sourceSection,\n      SourceSection headerSection,\n      SourceSection @Nullable [] docComment,\n      String moduleName,\n      ModuleKey moduleKey,\n      ResolvedModuleKey resolvedModuleKey,\n      boolean isAmend) {\n\n    this.sourceSection = sourceSection;\n    this.headerSection = headerSection;\n    this.docComment = docComment;\n    this.moduleName = moduleName;\n    this.moduleKey = moduleKey;\n    this.resolvedModuleKey = resolvedModuleKey;\n    this.isAmend = isAmend;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/ModuleInfo.java", "function_name": "ModuleInfo", "index": 1793, "label": 0}
{"input": "private void monitorInternetConnection() {\n        handler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                if (!lastKnownConnectionState.isDisconnected()) {\n                    checkInternetConnectionAndDisconnectVPN();\n                    handler.postDelayed(this, 3000); \n                }\n            }\n        }, 5000); \n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/MainActivity.java", "function_name": "monitorInternetConnection", "index": 1794, "label": 0}
{"input": "@Test\n  public void testIfSizeValidationWorks() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\"fixtures/api/sample-workflow-create-request.json\", WorkflowCreateRequest.class);\n    Set<ConstraintViolation<TestWorkflowCreateRequest500BytesLimit>> violations =\n        validator.validate(new TestWorkflowCreateRequest500BytesLimit(request));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflowCreateRequest500BytesLimit> violation =\n        violations.iterator().next();\n    assertEquals(\n        \"Size of class com.netflix.maestro.models.api.WorkflowCreateRequest is 639 bytes\"\n            + \" which is larger than limit of 500 bytes\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/JsonSizeConstraintTest.java", "function_name": "testIfSizeValidationWorks", "index": 1795, "label": 0}
{"input": "private Map<String, ParamDefinition> loadParamsFromFile(String titusParamsFile)\n      throws IOException {\n    return objectMapper.readValue(\n        Thread.currentThread().getContextClassLoader().getResourceAsStream(titusParamsFile),\n        typeRef);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/DefaultParamManager.java", "function_name": "loadParamsFromFile", "index": 1796, "label": 0}
{"input": "public long getMaxGroupNum() {\n    return getLongProperty(MAX_GROUP_NUM_PROPERTY_NAME, MAX_GROUP_NUM_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getMaxGroupNum", "index": 1797, "label": 0}
{"input": "private static String toTruncateString(Object input) {\n    String msg = String.valueOf(input);\n    if (msg != null && msg.length() > ERROR_MESSAGE_SIZE_LIMIT) {\n      return msg.substring(0, ERROR_MESSAGE_SIZE_LIMIT);\n    }\n    return msg;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/ParamHelper.java", "function_name": "toTruncateString", "index": 1798, "label": 0}
{"input": "@Test\n  public void testBuildNotebookParamsWithOverloadedRunParams() {\n    params.put(\"run_id\", buildParam(\"run_id\", \"my_run_id\"));\n    String notebookParams =\n        notebookParamsBuilder.buildNotebookParams(workflowSummary, stepRuntimeSummary, null);\n    assertEquals(\n        \"{\\\"owner\\\":\\\"paramuser\\\",\\\"notebook\\\":{\\\"input_path\\\":\\\"owner/mynotebook.ipynb\\\",\\\"run_id\\\":\\\"MyWorkflow_123_2_mystepid_3\\\"},\\\"run_id\\\":\\\"my_run_id\\\",\\\"criticality\\\":\\\"medium\\\",\\\"attempt_number\\\":2}\",\n        notebookParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilderTest.java", "function_name": "testBuildNotebookParamsWithOverloadedRunParams", "index": 1799, "label": 0}
{"input": "@Operation(\n      summary =\n          \"Get the workflow definition for a specific workflow version \"\n              + \"(i.e. active, latest, default, or exact version id)\")\n  @GetMapping(value = \"/{workflowId}/versions/{version}\", consumes = MediaType.ALL_VALUE)\n  public WorkflowDefinition getWorkflowVersion(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId,\n      @Valid @NotNull @PathVariable(\"version\") String version,\n      @Parameter(description = \"Enrich the workflow definition with the extra information.\")\n          @RequestParam(name = \"enriched\", required = false, defaultValue = \"false\")\n          boolean enriched) {\n    WorkflowDefinition workflowDefinition = workflowDao.getWorkflowDefinition(workflowId, version);\n    if (enriched) {\n      workflowEnrichmentHelper.enrichWorkflowDefinition(workflowDefinition);\n    }\n    return workflowDefinition;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowController.java", "function_name": "getWorkflowVersion", "index": 1800, "label": 0}
{"input": "private static ParamValidator generateValidator(\n      ParamDefinition target, ParamDefinition previousDef) {\n    if (previousDef == null || ((AbstractParamDefinition) target).getValidator() != null) {\n      return ((AbstractParamDefinition) target).getValidator();\n    } else {\n      return ((AbstractParamDefinition) previousDef).getValidator();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "generateValidator", "index": 1801, "label": 0}
{"input": "private RunRequest toRunRequest(WorkflowStartRequest request, User caller) {\n    request.getInitiator().setCaller(caller);\n    return RunRequest.builder()\n        .initiator(request.getInitiator())\n        .requestTime(request.getRequestTime())\n        .requestId(request.getRequestId())\n        .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n        .runParams(ObjectHelper.valueOrDefault(request.getRunParams(), new LinkedHashMap<>()))\n        .persistFailedRun(request.isPersistFailedRun())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowActionController.java", "function_name": "toRunRequest", "index": 1802, "label": 0}
{"input": "@SuppressWarnings(\"DuplicatedCode\")\n    @ExplodeLoop\n    private Object evalList(VirtualFrame frame, VmList value) {\n      var ret = value;\n      var idx = 0;\n\n      for (var elem : value) {\n        var result = elementTypeNode.executeLazily(frame, elem);\n        if (result != elem) {\n          ret = ret.replace(idx, result);\n        }\n        idx++;\n      }\n\n      LoopNode.reportLoopCount(this, idx);\n      return ret;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "643c6f5a76d0a2b81b7f8e22e0013037826ce2b5", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "evalList", "index": 1803, "label": 0}
{"input": "public static boolean getRequireRestartVpnService() {\n        return requireRestartVpnService;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "7b01f070ffa3af26f1e917d7ffc99c061f322cc6", "file_path": "app/src/main/java/org/bepass/oblivion/StateAwareBaseActivity.java", "function_name": "getRequireRestartVpnService", "index": 1804, "label": 0}
{"input": "private void readAndWrite1(File file, ExcelTypeEnum type) {\n        EasyExcel.write(file.getPath()).head(ParameterData.class).sheet().doWrite(data());\n        EasyExcel.read(file.getPath()).head(ParameterData.class).registerReadListener(new ParameterDataListener())\n                .sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/parameter/ParameterDataTest.java", "function_name": "readAndWrite1", "index": 1805, "label": 0}
{"input": "private Long matchSignalForTrigger(Connection conn, SignalMatchDto signalMatch, long checkpoint)\n      throws SQLException {\n    if (signalMatch.withParams()) {\n      return paramDao.matchSignal(conn, signalMatch, checkpoint);\n    } else { \n      return instanceDao.matchSignal(conn, signalMatch, checkpoint);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "matchSignalForTrigger", "index": 1806, "label": 0}
{"input": "@JsonCreator\n  public InstanceRunUuid(\n      @JsonProperty(\"instance_id\") long instanceId,\n      @JsonProperty(\"run_id\") long runId,\n      @JsonProperty(\"uuid\") String uuid) {\n    this.instanceId = instanceId;\n    this.runId = runId;\n    this.uuid = uuid;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/InstanceRunUuid.java", "function_name": "InstanceRunUuid", "index": 1807, "label": 0}
{"input": "@Test\n  public void testStepCreateWithSource() {\n    ParamsMergeHelper.MergeContext mergeContext =\n        ParamsMergeHelper.MergeContext.stepCreate(ParamSource.DEFINITION);\n    assertEquals(ParamSource.DEFINITION, mergeContext.getMergeSource());\n    assertFalse(mergeContext.isUpstreamMerge());\n    assertFalse(mergeContext.isSystem());\n\n    mergeContext = ParamsMergeHelper.MergeContext.stepCreate(ParamSource.SYSTEM);\n    assertEquals(ParamSource.SYSTEM, mergeContext.getMergeSource());\n    assertFalse(mergeContext.isUpstreamMerge());\n    assertTrue(mergeContext.isSystem());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testStepCreateWithSource", "index": 1808, "label": 0}
{"input": "public void setPayload(Map<String, ParamDefinition> input) {\n      this.payload = ParamDefinition.preprocessDefinitionParams(input);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/signal/SignalOutputsDefinition.java", "function_name": "setPayload", "index": 1809, "label": 0}
{"input": "public RenameResult(boolean success, String errorMessage) {\n            this.success = success;\n            this.errorMessage = errorMessage;\n        }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "RenameResult", "index": 1810, "label": 0}
{"input": "public static BigDecimal[] toDecimalArray(String name, Object value) {\n    try {\n      if (value instanceof BigDecimal[]) {\n        return (BigDecimal[]) value;\n      } else if (value instanceof double[]) {\n        return Arrays.stream((double[]) value)\n            .mapToObj(val -> new BigDecimal(String.valueOf(val)))\n            .toArray(BigDecimal[]::new);\n      } else if (value instanceof List) {\n        return ((List<?>) value)\n            .stream().map(d -> new BigDecimal(String.valueOf(d))).toArray(BigDecimal[]::new);\n      } else {\n        throw new MaestroInternalError(\n            \"Cannot cast value [%s] into a BigDecimal array for param [%s]\",\n            toTruncateString(value), name);\n      }\n    } catch (NumberFormatException nfe) {\n      throw new MaestroInternalError(\n          nfe, \"Invalid number format for value: %s for param [%s]\", toTruncateString(value), name);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/ParamHelper.java", "function_name": "toDecimalArray", "index": 1811, "label": 0}
{"input": "@Test\n  public void testDoubleArrayToDecimalArray() {\n    Object val = new double[] {1.2, 3.4, 5.6};\n    BigDecimal[] actual = ParamHelper.toDecimalArray(\"foo\", val);\n    assertEquals(1.2, actual[0].doubleValue(), 0.00000000);\n    assertEquals(3.4, actual[1].doubleValue(), 0.00000000);\n    assertEquals(5.6, actual[2].doubleValue(), 0.00000000);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ParamHelperTest.java", "function_name": "testDoubleArrayToDecimalArray", "index": 1812, "label": 0}
{"input": "@Test\n  public void testMergeNoUpstreamMergeWithLessStrictMode() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'default_value','mode': 'MUTABLE_ON_START', 'meta': {'source': 'SYSTEM_DEFAULT'}}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'parent_wf_defined_value','mode': 'MUTABLE', 'meta': {'source': 'DEFINITION'}}}\");\n\n    AssertHelper.assertThrows(\n        \"throws exception when a non-upstream source tries to merge param with less strict mode\",\n        MaestroValidationException.class,\n        \"Cannot modify param mode to be less strict for parameter [workflow_default_param] from [MUTABLE_ON_START] to [MUTABLE]\",\n        () -> ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeNoUpstreamMergeWithLessStrictMode", "index": 1813, "label": 0}
{"input": "@VisibleForTesting\n  void deleteGroup(long groupId) {\n    withMetricLogError(\n        () -> withRetryableUpdate(REMOVE_GROUP_QUERY, stmt -> stmt.setLong(1, groupId)),\n        \"deleteGroup\",\n        \"Failed to delete the group for the groupId [{}]\",\n        groupId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/dao/MaestroFlowDao.java", "function_name": "deleteGroup", "index": 1814, "label": 0}
{"input": "private static String getUserConfigPath() {\n        \n        String userDir = System.getProperty(\"user.dir\");\n        \n        String separator = FileSystems.getDefault().getSeparator();\n        \n        return userDir + separator + \"data\" + separator + \"SwitchUser.config\";\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "getUserConfigPath", "index": 1815, "label": 0}
{"input": "private static void trimDag(\n      Set<String> idStatusMap,\n      Deque<String> deque,\n      Map<String, Set<String>> parentMap,\n      Map<String, Set<String>> childMap) {\n    Set<String> visited = new HashSet<>();\n    while (!deque.isEmpty()) {\n      String stepIdToRemove = deque.poll();\n      Checks.checkTrue(\n          !idStatusMap.contains(stepIdToRemove),\n          \"Invalid state: stepId [%s] should not have any status\",\n          stepIdToRemove);\n      parentMap.get(stepIdToRemove).forEach(parent -> childMap.get(parent).remove(stepIdToRemove));\n      childMap.get(stepIdToRemove).forEach(child -> parentMap.get(child).remove(stepIdToRemove));\n      Set<String> toAdd =\n          childMap.remove(stepIdToRemove).stream()\n              .filter(id -> !visited.contains(id))\n              .collect(Collectors.toSet());\n      deque.addAll(toAdd);\n      visited.addAll(toAdd);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/DagHelper.java", "function_name": "trimDag", "index": 1816, "label": 0}
{"input": "private void configureVpnBuilder(VpnService.Builder builder) throws Exception {\n        builder.setSession(\"oblivion\")\n                .setMtu(1500)\n                .addAddress(PRIVATE_VLAN4_CLIENT, 30)\n                .addAddress(PRIVATE_VLAN6_CLIENT, 126)\n                .addDnsServer(\"1.1.1.1\")\n                .addDnsServer(\"1.0.0.1\")\n                .addDisallowedApplication(getPackageName())\n                .addRoute(\"0.0.0.0\", 0)\n                .addRoute(\"::\", 0);\n\n        \n        SplitTunnelMode splitTunnelMode = SplitTunnelMode.getSplitTunnelMode();\n        if (splitTunnelMode == SplitTunnelMode.BLACKLIST) {\n            Set<String> splitTunnelApps = getSplitTunnelApps();\n            for (String packageName : splitTunnelApps) {\n                try {\n                    builder.addDisallowedApplication(packageName);\n                } catch (PackageManager.NameNotFoundException ignored) {\n                }\n            }\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/service/OblivionVpnService.java", "function_name": "configureVpnBuilder", "index": 1817, "label": 0}
{"input": "@Test\n  public void testGetFromSubworkflow() throws Exception {\n    StepRuntimeSummary summary =\n        loadObject(TEST_SUBWORKFLOW_STEP_RUNTIME_SUMMARY, StepRuntimeSummary.class);\n    when(allStepOutputData.get(\"foo\"))\n        .thenReturn(Collections.singletonMap(\"maestro_step_runtime_summary\", summary));\n    StepInstance stepInSubworkflow = loadObject(TEST_STEP_INSTANCE, StepInstance.class);\n    when(stepInstanceDao.getStepInstance(any(), anyLong(), anyLong(), any(), any()))\n        .thenReturn(stepInSubworkflow);\n    long res = (Long) paramExtension.getFromSubworkflow(\"foo\", \"job1\", \"sleep_seconds\");\n    assertEquals(15, res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "42abcdadd38d5a93ea5a23556a371efe74099df8", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionTest.java", "function_name": "testGetFromSubworkflow", "index": 1818, "label": 0}
{"input": "public WorkflowInstance.Status getLatestWorkflowInstanceStatus(\n      String workflowId, long workflowInstanceId) {\n    return getWorkflowInstanceStatus(workflowId, workflowInstanceId, Constants.LATEST_ONE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "getLatestWorkflowInstanceStatus", "index": 1819, "label": 0}
{"input": "@Test\n  public void testRunWithInternalMessage() throws InterruptedException {\n    when(messageQueue.take())\n        .thenReturn(new MessageDto(0, \"msgId\", null, 123456L))\n        .thenThrow(new InterruptedException(\"test\"));\n    when(dispatcher.processJobEvent(any())).thenReturn(Optional.empty());\n    when(queueDao.dequeueUnownedMessages(anyInt(), anyLong(), anyInt()))\n        .thenReturn(List.of(message));\n    queueWorker.run();\n    verify(dispatcher, times(0)).processJobEvent(any());\n    verify(queueDao, times(0)).remove(message);\n    verify(queueDao, times(1)).dequeueUnownedMessages(anyInt(), anyLong(), anyInt());\n    verify(messageQueue, times(1)).size();\n    verify(messageQueue, times(1)).offer(any());\n    verify(scheduler, times(1)).schedule(any(Callable.class), anyLong(), eq(TimeUnit.MILLISECONDS));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/worker/MaestroQueueWorkerTest.java", "function_name": "testRunWithInternalMessage", "index": 1820, "label": 0}
{"input": "private void readAndWriteException(File file) throws Exception {\n        EasyExcel.write(new FileOutputStream(file), ExceptionData.class).sheet().doWrite(data());\n        ArithmeticException exception = Assertions.assertThrows(ArithmeticException.class,\n                () -> EasyExcel.read(new FileInputStream(file), ExceptionData.class, new ExceptionThrowDataListener())\n                        .sheet().doRead());\n        Assertions.assertEquals(\"/ by zero\", exception.getMessage());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/exception/ExceptionDataTest.java", "function_name": "readAndWriteException", "index": 1821, "label": 0}
{"input": "public UnionType(List<Type> types, int defaultIndex, Span span) {\n      super(span, types);\n      this.defaultIndex = defaultIndex;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Type.java", "function_name": "UnionType", "index": 1822, "label": 0}
{"input": "@Override\n    public int getNextRetryDelayForTimeoutError(long timeoutRetries) {\n      return timeoutRetryBackoffInSecs.intValue();\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b8c79f76fddca76858f0e37fc5e02ddfb3829aed", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/RetryPolicy.java", "function_name": "getNextRetryDelayForTimeoutError", "index": 1823, "label": 0}
{"input": "public boolean hasReachedErrorRetryLimit() {\n      return errorRetries >= errorRetryLimit || !retryable;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepInstance.java", "function_name": "hasReachedErrorRetryLimit", "index": 1824, "label": 0}
{"input": "private MaestroJobEvent logToTimeline(\n      Connection conn,\n      String workflowId,\n      Long curActiveId,\n      Long prevActiveId,\n      User author,\n      String log)\n      throws SQLException {\n    MaestroJobEvent jobEvent =\n        WorkflowVersionUpdateJobEvent.create(workflowId, curActiveId, prevActiveId, author, log);\n    try (PreparedStatement stmt = conn.prepareStatement(INSERT_TIMELINE_QUERY)) {\n      stmt.setString(1, workflowId);\n      stmt.setString(2, toJson(jobEvent));\n      stmt.executeUpdate();\n    }\n    return jobEvent;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "logToTimeline", "index": 1825, "label": 0}
{"input": "@Override\n    public int getNextRetryDelayForUserError(long errorRetries) {\n      return errorRetryBackoffInSecs.intValue();\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/RetryPolicy.java", "function_name": "getNextRetryDelayForUserError", "index": 1826, "label": 0}
{"input": "private void checkRowHeight(AnalysisCell analysisCell, FillConfig fillConfig, boolean isOriginalCell, Row row) {\n        if (!analysisCell.getFirstRow() || !WriteDirectionEnum.VERTICAL.equals(fillConfig.getDirection())) {\n            return;\n        }\n        \n        if (isOriginalCell && PoiUtils.customHeight(row)) {\n            collectionRowHeightCache.put(currentUniqueDataFlag, row.getHeight());\n            return;\n        }\n        if (fillConfig.getAutoStyle()) {\n            Short rowHeight = collectionRowHeightCache.get(currentUniqueDataFlag);\n            if (rowHeight != null) {\n                row.setHeight(rowHeight);\n            }\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48a8c2b36277eef512023b5f9fa6b2615833a274", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/executor/ExcelWriteFillExecutor.java", "function_name": "checkRowHeight", "index": 1827, "label": 0}
{"input": "private void wakeUpParentStep(UpstreamInitiator.Info parent, long groupInfo) {\n    if (parent == null) {\n      return;\n    }\n    try {\n      String flowReference = IdHelper.deriveFlowRef(parent.getWorkflowId(), parent.getInstanceId());\n      long groupId = IdHelper.deriveGroupId(flowReference, groupInfo);\n      flowOperation.wakeUp(groupId, flowReference, parent.getStepId());\n    } catch (RuntimeException e) {\n      LOG.info(\"Failed to wake up parent step {} and skip wakeup\", parent, e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/UpdateJobEventProcessor.java", "function_name": "wakeUpParentStep", "index": 1828, "label": 0}
{"input": "public void check(List<KnowledgeInfoVo> knowledgeInfoList) {\n    LoginUser loginUser = LoginHelper.getLoginUser();\n    for (KnowledgeInfoVo knowledgeInfoVo : knowledgeInfoList) {\n      if (!knowledgeInfoVo.getUid().equals(loginUser.getUserId())) {\n        throw new SecurityException(\"权限不足\");\n      }\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "check", "index": 1829, "label": 0}
{"input": "@Test\n  public void testValidField() {\n    SelType res = params.field(SelString.of(\"key1\"));\n    assertEquals(\"BOOLEAN: true\", res.type() + \": \" + res);\n    res = params.field(SelString.of(\"key2\"));\n    assertEquals(\"STRING: val\", res.type() + \": \" + res);\n    res = params.field(SelString.of(\"key3\"));\n    assertEquals(\"LONG_ARRAY: [1, 2, 3]\", res.type() + \": \" + res);\n    res = params.field(SelString.of(\"foo\"));\n    assertEquals(\"BOOLEAN: true\"0, res.type() + \": \" + res);\n    res = params.field(SelString.of(\"BOOLEAN: true\"2));\n    assertEquals(\"BOOLEAN: true\"0, res.type() + \": \" + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelParamsTest.java", "function_name": "testValidField", "index": 1830, "label": 0}
{"input": "public WorkflowInstanceActionResponse stopLatest(\n      String workflowId, long workflowInstanceId, User caller) {\n    return terminate(\n        workflowId,\n        workflowInstanceId,\n        Constants.LATEST_ONE,\n        Actions.WorkflowInstanceAction.STOP,\n        caller);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandler.java", "function_name": "stopLatest", "index": 1831, "label": 0}
{"input": "@Test(expected = ParseException.class)\n  public void testInvalidFor() throws Exception {\n    run(\"x=1; for(i=2, j=1; i<10; i+=1) x+=1; return x;\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testInvalidFor", "index": 1832, "label": 0}
{"input": "@Override\n    public void createSplitPane(int i, int i1, int i2, int i3, PaneType paneType) {\n    \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvSheet.java", "function_name": "createSplitPane", "index": 1833, "label": 0}
{"input": "public static String saveContentToFile(String content, String filePath) {\n\t\ttry {\n\t\t\t\n\t\t\tPath path = Paths.get(filePath);\n\t\t\tcreateParentDirectories(path);\n\n\t\t\t\n\t\t\tFiles.writeString(path, content);\n\t\t\tlogger.info(\"Content saved to file: {}\", filePath);\n\t\t\treturn filePath;\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"Failed to save content to file: {}\", filePath, e);\n\t\t\tthrow new RuntimeException(\"Failed to save content to file: \" + filePath, e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FileOperationUtil.java", "function_name": "saveContentToFile", "index": 1834, "label": 0}
{"input": "private float[] getColumnWidths(Sheet sheet) {\n        short lastCellNum = sheet.getRow(0).getLastCellNum();\n        float[] widths = new float[lastCellNum];\n        for (int i = 0; i < lastCellNum; i++) {\n            widths[i] = sheet.getColumnWidthInPixels(i);\n        }\n        return widths;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java", "function_name": "getColumnWidths", "index": 1835, "label": 0}
{"input": "@Test\n    public void synchronousRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.xlsx\";\n        \n        List<DemoData> list = EasyExcel.read(fileName).head(DemoData.class).sheet().doReadSync();\n        for (DemoData data : list) {\n            log.info(\"读取到数据:{}\", JSON.toJSONString(data));\n        }\n        \n        \n        List<Map<Integer, String>> listMap = EasyExcel.read(fileName).sheet().doReadSync();\n        for (Map<Integer, String> data : listMap) {\n            \n            log.info(\"读取到数据:{}\", JSON.toJSONString(data));\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "synchronousRead", "index": 1836, "label": 0}
{"input": "@Test\n  public void testDecodeStepOverview() throws Exception {\n    WorkflowRuntimeOverview overview =\n        loadObject(\n            \"fixtures/instances/sample-workflow-runtime-overview.json\",\n            WorkflowRuntimeOverview.class);\n    assertFalse(overview.existsNotCreatedStep());\n\n    WorkflowInstance instance =\n        loadObject(\n            \"fixtures/instances/sample-workflow-instance-created.json\", WorkflowInstance.class);\n\n    Map<String, StepRuntimeState> actual = overview.decodeStepOverview(instance.getRuntimeDag());\n    assertEquals(1, overview.decodeStepOverview(instance.getRuntimeDag()).size());\n    assertEquals(StepInstance.Status.RUNNING, actual.get(\"job3\").getStatus());\n    assertEquals(1647977244273L, actual.get(\"job3\").getStartTime().longValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/WorkflowRuntimeOverviewTest.java", "function_name": "testDecodeStepOverview", "index": 1837, "label": 0}
{"input": "@Test\n  public void testCallNextUniqueId() {\n    assertEquals(\"12345\", extension.call(\"nextUniqueId\", new SelType[0]).toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallNextUniqueId", "index": 1838, "label": 0}
{"input": "@Test(expected = NumberFormatException.class)\n  public void testInvalidCallDateIntsBetweenBadNumber() {\n    SelType res =\n        SelUtilFunc.INSTANCE.call(\n            \"dateIntsBetween\",\n            new SelType[] {SelLong.of(\"20181228\"), SelString.of(\"20191002\"), SelLong.of(\"abc\")});\n    assertEquals(\"LONG_ARRAY: []\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testInvalidCallDateIntsBetweenBadNumber", "index": 1839, "label": 0}
{"input": "@Test\n  public void testCalculateEmptyPlannedExecutions() {\n    var triggers = generateTriggers(\"5 2 * * *\", \"2021-05-17T00:00:00-07:00\", US_PACIFIC, null);\n\n    Date endDate = parseDate(triggers, Duration.ofHours(1));\n    List<PlannedTimeTriggerExecution> planned =\n        executionPlanner.calculatePlannedExecutions(triggers, endDate, \"test-workflow\");\n    assertTrue(planned.isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculateEmptyPlannedExecutions", "index": 1840, "label": 0}
{"input": "boolean updateTriggerCheckpoints(\n      Connection conn, String workflowId, String triggerUuid, Long[] checkpoints)\n      throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(UPDATE_SIGNAL_TRIGGER_CHECKPOINTS_QUERY)) {\n      int idx = 0;\n      stmt.setArray(++idx, conn.createArrayOf(ARRAY_TYPE_NAME, checkpoints));\n      stmt.setString(++idx, workflowId);\n      stmt.setString(++idx, triggerUuid);\n      return stmt.executeUpdate() == SUCCESS_WRITE_SIZE;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalTriggerDao.java", "function_name": "updateTriggerCheckpoints", "index": 1841, "label": 0}
{"input": "default int getDbMaxRetryDelay() {\n    return getIntProperty(DB_MAX_RETRY_DELAY_PROPERTY_NAME, DB_MAX_RETRY_DELAY_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getDbMaxRetryDelay", "index": 1842, "label": 0}
{"input": "public static List<MapParameter> getSignalOutputsParameters(SignalOutputsDefinition outputs) {\n    if (outputs == null || outputs.definitions() == null) {\n      return new ArrayList<>();\n    }\n    return outputs.definitions().stream()\n        .map(SignalTransformer::transform)\n        .collect(Collectors.toList());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getSignalOutputsParameters", "index": 1843, "label": 0}
{"input": "public static Optional<RestartConfig.RestartNode> getNextNode(RestartConfig config) {\n    if (config == null) {\n      return Optional.empty();\n    }\n    List<RestartConfig.RestartNode> path = config.getRestartPath();\n    if (path != null && path.size() > 1) {\n      return Optional.of(path.get(path.size() - 2));\n    }\n    return Optional.empty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunRequest.java", "function_name": "getNextNode", "index": 1844, "label": 0}
{"input": "public EditSheet(Context context, String title, String sharedPrefKey, SheetsCallBack sheetsCallBack) {\n        this.context = context;\n        fileManager = FileManager.getInstance(context);\n\n        this.title = context.getString(R.string.editSheetEndpoint).replace(\"Endpoint\",title);\n        this.sharedPrefKey = sharedPrefKey;\n\n        this.sheetsCallBack = sheetsCallBack;\n\n        init();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "2f3b84a45acbf027ab617f69cb6bdd3f251bcd76", "file_path": "app/src/main/java/org/bepass/oblivion/EditSheet.java", "function_name": "EditSheet", "index": 1845, "label": 0}
{"input": "public void changeColor(int color) {\n        if (color != 0) {\n            setColorFilter(color, PorterDuff.Mode.SRC_ATOP);\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/component/Icon.java", "function_name": "changeColor", "index": 1846, "label": 0}
{"input": "private static Map<Integer, FieldWrapper> buildSortedAllFieldMap(Map<Integer, List<FieldWrapper>> orderFieldMap,\n            Map<Integer, FieldWrapper> indexFieldMap) {\n        \n        Map<Integer, FieldWrapper> sortedAllFieldMap = new HashMap<>(\n                (orderFieldMap.size() + indexFieldMap.size()) * 4 / 3 + 1);\n        \n        Map<Integer, FieldWrapper> tempIndexFieldMap = new HashMap<>(indexFieldMap);\n        int index = 0;\n        for (List<FieldWrapper> fieldList : orderFieldMap.values()) {\n            for (FieldWrapper field : fieldList) {\n                while (tempIndexFieldMap.containsKey(index)) {\n                    sortedAllFieldMap.put(index, tempIndexFieldMap.get(index));\n                    tempIndexFieldMap.remove(index);\n                    index++;\n                }\n                sortedAllFieldMap.put(index, field);\n                index++;\n            }\n        }\n        sortedAllFieldMap.putAll(tempIndexFieldMap);\n        return sortedAllFieldMap;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/ClassUtils.java", "function_name": "buildSortedAllFieldMap", "index": 1847, "label": 0}
{"input": "private boolean jj_3R_77() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_80()) {\n      jj_scanpos = xsp;\n      if (jj_3R_81()) {\n        jj_scanpos = xsp;\n        if (jj_3R_82()) {\n          jj_scanpos = xsp;\n          if (jj_3R_83()) {\n            jj_scanpos = xsp;\n            if (jj_3R_84()) {\n              jj_scanpos = xsp;\n              if (jj_3R_85()) return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_77", "index": 1848, "label": 0}
{"input": "public QualifiedAccessExpr(\n        Expr expr,\n        Identifier identifier,\n        boolean isNullable,\n        @Nullable ArgumentList argumentList,\n        Span span) {\n      super(span, Arrays.asList(expr, identifier, argumentList));\n      this.isNullable = isNullable;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "QualifiedAccessExpr", "index": 1849, "label": 0}
{"input": "@Test\n  public void testTryExecuteTrigger() throws Exception {\n    SignalTriggerMatch triggerMatch =\n        loadObject(\"fixtures/sample-signal-trigger-match.json\", SignalTriggerMatch.class);\n    String def = loadJson(\"fixtures/signal_triggers/signal_trigger_simple.json\");\n    when(triggerDao.getTriggerForUpdate(any(), any(), any()))\n        .thenReturn(\n            new SignalTriggerDto(\n                \"sample-workflow-1\",\n                \"test-uuid-1\",\n                def,\n                new String[] {\"signal_a\", \"signal_b\"},\n                new Long[] {0L, 2L}));\n    when(triggerDao.updateTriggerCheckpoints(any(), any(), any(), any())).thenReturn(true);\n    assertEquals(1, brokerDao.tryExecuteTrigger(triggerMatch));\n    verify(queueProducer, times(1)).push(any(SignalTriggerExecution.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testTryExecuteTrigger", "index": 1850, "label": 0}
{"input": "private static String determineContentType(String fileName) {\n    String extension = \"\";\n    int i = fileName.lastIndexOf('.');\n    if (i > 0) {\n      extension = fileName.substring(i + 1).toLowerCase();\n    }\n\n    switch (extension) {\n      case \"txt\":\n        return \"text/plain\";\n      case \"html\":\n      case \"htm\":\n        return \"text/html\";\n      case \"pdf\":\n        return \"application/pdf\";\n      case \"jpg\":\n      case '.'0:\n        return '.'1;\n      case '.'2:\n        return '.'3;\n      case '.'4:\n        return '.'5;\n      case '.'6:\n      case '.'7:\n        return '.'8;\n      case '.'9:\n      case \"txt\"0:\n        return \"txt\"1;\n      case \"txt\"2:\n        return \"txt\"3;\n      case \"txt\"4:\n        return \"txt\"5;\n      default:\n        return \"txt\"6;\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/utils/ZipUtils.java", "function_name": "determineContentType", "index": 1851, "label": 0}
{"input": "private String joinLocales(String[] locales) {\n        StringBuilder joinedLocales = new StringBuilder();\n        for (int i = 0; i < locales.length; i++) {\n            joinedLocales.append(locales[i]);\n            if (i < locales.length - 1) {\n                joinedLocales.append(\",\");\n            }\n        }\n        return joinedLocales.toString();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef6efe71d9095aa3bac552c6499646d9eeba6263", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocaleHandler.java", "function_name": "joinLocales", "index": 1852, "label": 0}
{"input": "@Bean\n\tpublic Map<String, McpAssignNodeProperties.McpServerConfig> mcpAgentConfigs() {\n\t\ttry {\n\t\t\tResource resource = resourceLoader.getResource(mcpAssignNodeProperties.getConfigLocation());\n\t\t\tif (!resource.exists()) {\n\t\t\t\treturn new HashMap<>();\n\t\t\t}\n\n\t\t\ttry (InputStream inputStream = resource.getInputStream()) {\n\t\t\t\tTypeReference<Map<String, McpAssignNodeProperties.McpServerConfig>> typeRef = new TypeReference<Map<String, McpAssignNodeProperties.McpServerConfig>>() {\n\t\t\t\t};\n\t\t\t\tMap<String, McpAssignNodeProperties.McpServerConfig> configs = objectMapper.readValue(inputStream,\n\t\t\t\t\t\ttypeRef);\n\t\t\t\tlogger.info(\"加载MCP配置: {} 个代理\", configs.size());\n\t\t\t\treturn configs;\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"读取MCP配置失败\", e);\n\t\t\treturn new HashMap<>();\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cbed5bdb8a096b49ce533dee99795750da26fd10", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/McpAssignNodeAutoConfiguration.java", "function_name": "mcpAgentConfigs", "index": 1853, "label": 0}
{"input": "public Expr parseExpressionInput(String source) {\n    init(source);\n    var expr = parseExpr();\n    expect(Token.EOF, \"unexpectedToken\", \"end of file\");\n    return expr;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseExpressionInput", "index": 1854, "label": 0}
{"input": "public static <T> T notNull(T input, String template, Object... args) {\n    if (input == null) {\n      throw new NullPointerException(String.format(template, args));\n    }\n    return input;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/Checks.java", "function_name": "notNull", "index": 1855, "label": 0}
{"input": "private StepInstance getStepInstanceAndValidateBypassStepDependencyConditions(\n      WorkflowInstance instance, String stepId) {\n    StepInstance stepInstance =\n        stepInstanceDao.getStepInstance(\n            instance.getWorkflowId(),\n            instance.getWorkflowInstanceId(),\n            instance.getWorkflowRunId(),\n            stepId,\n            Constants.LATEST_INSTANCE_RUN);\n\n    if (stepInstance.getRuntimeState().getStatus() != StepInstance.Status.WAITING_FOR_SIGNALS) {\n      throw new MaestroInvalidStatusException(\n          \"Cannot manually bypass-step-dependencies the step as its status [%s] is not waiting for signals\",\n          stepInstance.getRuntimeState().getStatus());\n    }\n    return stepInstance;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDao.java", "function_name": "getStepInstanceAndValidateBypassStepDependencyConditions", "index": 1856, "label": 0}
{"input": "@JsonCreator\n    public SignalStepOutput(\n        @JsonProperty(\"param\") MapParameter param,\n        @JsonProperty(\"output_signal_instance\") OutputSignalInstance outputSignalInstance) {\n      this.param = param;\n      this.outputSignalInstance = outputSignalInstance;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/SignalStepOutputs.java", "function_name": "SignalStepOutput", "index": 1857, "label": 0}
{"input": "@Test\n  public void unbox() {\n    assertArrayEquals(new String[] {\"foo\", \"bar\"}, (String[]) one.unbox());\n    assertArrayEquals(new long[] {1, 2, 3}, (long[]) another.unbox());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelArrayTest.java", "function_name": "unbox", "index": 1858, "label": 0}
{"input": "public final void ConditionalExpression() throws ParseException {\n    ConditionalOrExpression();\n    switch (jj_nt.kind) {\n      case HOOK:\n        {\n          jj_consume_token(HOOK);\n          Expression();\n          jj_consume_token(COLON);\n          Expression();\n          ASTTernary jjtn001 = new ASTTernary(this, JJTTERNARY);\n          boolean jjtc001 = true;\n          jjtree.openNodeScope(jjtn001);\n          jjtn001.jjtSetFirstToken(getToken(1));\n          try {\n            jjtree.closeNodeScope(jjtn001, 3);\n            jjtc001 = false;\n            jjtn001.jjtSetLastToken(getToken(0));\n            jjtn001.value = SelOp.TERNARY;\n          } finally {\n            if (jjtc001) {\n              jjtree.closeNodeScope(jjtn001, 3);\n              jjtn001.jjtSetLastToken(getToken(0));\n            }\n          }\n          break;\n        }\n      default:\n        jj_la1[13] = jj_gen;\n        ;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "ConditionalExpression", "index": 1859, "label": 0}
{"input": "@Test\n  public void testRestartRoundTripSerde() throws Exception {\n    StepAction expected =\n        loadObject(\"fixtures/db/sample-step-action-restart.json\", StepAction.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    StepAction actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), StepAction.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(expected, actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/db/StepActionTest.java", "function_name": "testRestartRoundTripSerde", "index": 1860, "label": 0}
{"input": "protected SourceSection shrinkLeft(SourceSection section, int length) {\n    return source.createSection(section.getCharIndex() + length, section.getCharLength() - length);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AbstractAstBuilder.java", "function_name": "shrinkLeft", "index": 1861, "label": 0}
{"input": "private ImportClause parseImportDecl() {\n    Span start;\n    boolean isGlob = false;\n    if (lookahead == Token.IMPORT_STAR) {\n      start = next().span;\n      isGlob = true;\n    } else {\n      start = expect(Token.IMPORT, \"unexpectedToken2\", \"import\", \"import*\").span;\n    }\n    var str = parseStringConstant();\n    var end = str.span();\n    Identifier alias = null;\n    if (lookahead == Token.AS) {\n      next();\n      alias = parseIdentifier();\n      end = alias.span();\n    }\n    return new ImportClause(str, isGlob, alias, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseImportDecl", "index": 1862, "label": 0}
{"input": "@Test\n  public void isValidParamMap() {\n    Set<ConstraintViolation<TestRunParams>> violations =\n        validator.validate(new TestRunParams(\"foo\", \"bar\"));\n    assertEquals(0, violations.size());\n    violations = validator.validate(new TestRunParams(null));\n    assertEquals(0, violations.size());\n    violations = validator.validate(new TestRunParams(Collections.emptyMap()));\n    assertEquals(0, violations.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/RunParamsConstraintTest.java", "function_name": "isValidParamMap", "index": 1863, "label": 0}
{"input": "@Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/**\").addResourceLocations(\"file:../html/\");\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "fb64277fcd0164b7aae4e86515152b70a5117fae", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/config/UseStaticResourceConfig.java", "function_name": "addResourceHandlers", "index": 1864, "label": 0}
{"input": "public TypeParameter(@Nullable Variance variance, Identifier identifier, Span span) {\n    super(span, List.of(identifier));\n    this.variance = variance;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeParameter.java", "function_name": "TypeParameter", "index": 1865, "label": 0}
{"input": "@Test(expected = IllegalStateException.class)\n  public void testRunWithoutSecurityManager() {\n    t1.run();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelThreadTest.java", "function_name": "testRunWithoutSecurityManager", "index": 1866, "label": 0}
{"input": "@PutMapping(\n      value = \"/{workflowId}/instances/{workflowInstanceId}/steps/{stepId}/actions/kill\",\n      consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Kill a given step instance's current attempt\")\n  public StepInstanceActionResponse killStepInstance(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId,\n      @PathVariable(\"workflowInstanceId\") long workflowInstanceId,\n      @Valid @NotNull @PathVariable(\"stepId\") String stepId) {\n    return stepActionHandler.terminate(\n        workflowId,\n        workflowInstanceId,\n        stepId,\n        callerBuilder.build(),\n        Actions.StepInstanceAction.KILL,\n        false);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepInstanceActionController.java", "function_name": "killStepInstance", "index": 1867, "label": 0}
{"input": "private void setStepInstanceDefinition(StepType type) {\n    Mockito.when(stepDefinition.getType()).thenReturn(type);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "setStepInstanceDefinition", "index": 1868, "label": 0}
{"input": "public MaestroSignalTriggerDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      DatabaseConfiguration config,\n      MaestroMetrics metrics) {\n    super(dataSource, objectMapper, config, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalTriggerDao.java", "function_name": "MaestroSignalTriggerDao", "index": 1869, "label": 0}
{"input": "public void evaluateStepDependenciesOrOutputsParameters(\n      Map<String, Map<String, Object>> allStepOutputData,\n      Map<String, Parameter> workflowParams,\n      Map<String, Parameter> stepParams,\n      Collection<List<MapParameter>> parameters,\n      String stepId) {\n    parameters.stream()\n        .flatMap(Collection::stream)\n        .forEach(v -> parseStepParameter(allStepOutputData, workflowParams, stepParams, v, stepId));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ParamEvaluator.java", "function_name": "evaluateStepDependenciesOrOutputsParameters", "index": 1870, "label": 0}
{"input": "@Test\n  public void testHashKey() {\n    Assert.assertEquals(\"29C4\", IdHelper.hashKey(1000000L));\n    Assert.assertEquals(\"o9oZ9l1\", IdHelper.hashKey(100000000000L));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/IdHelperTest.java", "function_name": "testHashKey", "index": 1871, "label": 0}
{"input": "@Test\n  public void testGetStepInstanceStepDependenciesSummary() {\n    Map<StepDependencyType, StepDependencies> dependencies =\n        stepDao.getStepDependencies(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    StepDependencies stepDependencies = dependencies.get(StepDependencyType.SIGNAL);\n    assertFalse(stepDependencies.isSatisfied());\n    Map<StepDependencyType, StepDependencies> latest =\n        stepDao.getStepDependencies(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"latest\");\n    assertEquals(dependencies, latest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstanceStepDependenciesSummary", "index": 1872, "label": 0}
{"input": "@Test\n    public void json3() {\n        String json = \"{\\\"SS1\\\":\\\"11\\\",\\\"sS2\\\":\\\"22\\\",\\\"ss3\\\":\\\"33\\\"}\";\n        \n        JsonData jsonData = JSON.parseObject(json, JsonData.class);\n        System.out.println(JSON.toJSONString(jsonData));\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/Write.java", "function_name": "json3", "index": 1873, "label": 0}
{"input": "public static Theme fromNightMode(@AppCompatDelegate.NightMode int nightMode) {\n            for (Theme theme : values()) {\n                if (theme.getNightMode() == nightMode) {\n                    return theme;\n                }\n            }\n            return LIGHT; \n        }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "fromNightMode", "index": 1874, "label": 0}
{"input": "@Test\n  public void testProcessWithExecute() {\n    SignalTriggerMatch instance = new SignalTriggerMatch();\n    Supplier<SignalTriggerMatch> messageSupplier = () -> instance;\n    when(brokerDao.tryExecuteTrigger(any())).thenReturn(1);\n    processor.process(messageSupplier);\n    verify(brokerDao, times(0)).deleteTrigger(any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_MATCH_SUCCESS,\n                SignalTriggerMatchProcessor.class,\n                MetricConstants.TYPE_TAG,\n                \"1\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerMatchProcessorTest.java", "function_name": "testProcessWithExecute", "index": 1875, "label": 0}
{"input": "@Test\n  public void testStartWorkflowJobEventPublisher() throws Exception {\n    sqsMaestroJobEventPublisher.publish(startWorkflowJobEvent, 2000);\n\n    String startWorkflowJobEventStr = MAPPER.writeValueAsString(startWorkflowJobEvent);\n    verify(amazonSqs, times(1))\n        .sendMessage(\n            new SendMessageRequest()\n                .withQueueUrl(START_WORKFLOW_JOB_QUEUE_URL)\n                .withMessageBody(startWorkflowJobEventStr)\n                .withDelaySeconds(2));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_JOB_EVENT_PUBLISH_SUCCESS_METRIC,\n                SqsMaestroJobEventPublisher.class,\n                AwsMetricConstants.JOB_TYPE_TAG,\n                StartWorkflowJobEvent.class.getSimpleName())\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisherTest.java", "function_name": "testStartWorkflowJobEventPublisher", "index": 1876, "label": 0}
{"input": "private boolean jj_3R_78() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3_5()) {\n      jj_scanpos = xsp;\n      if (jj_3R_86()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_78", "index": 1877, "label": 0}
{"input": "private TypeParameter parseTypeParameter() {\n    TypeParameter.Variance variance = null;\n    var start = spanLookahead;\n    if (lookahead == Token.IN) {\n      next();\n      variance = TypeParameter.Variance.IN;\n    } else if (lookahead == Token.OUT) {\n      next();\n      variance = TypeParameter.Variance.OUT;\n    }\n    var identifier = parseIdentifier();\n    return new TypeParameter(variance, identifier, start.endWith(identifier.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseTypeParameter", "index": 1878, "label": 0}
{"input": "@Override\n  public void checkPackageAccess(String pkg) {\n    if (accs.get() != null) {\n      super.checkPackageAccess(pkg);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkPackageAccess", "index": 1879, "label": 0}
{"input": "private String escapeString(String input) {\n        if (input == null) return \"\";\n        \n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (c >= 32 && c < 127) {\n                sb.append(c);\n            } else if (c == '\\n') {\n                sb.append(\"\\\\n\");\n            } else if (c == '\\r') {\n                sb.append(\"\\\\r\");\n            } else if (c == '\\t') {\n                sb.append(\"\\\\t\");\n            } else {\n                sb.append(String.format(\"\\\\x%02x\", (int)c & 0xFF));\n            }\n        }\n        return sb.toString();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "d770d44e8ae2cf5f485a984d4a7c46737d5e058c", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "escapeString", "index": 1880, "label": 0}
{"input": "@Bean(MAESTRO_AWS_SQS_SYNC)\n  @ConditionalOnProperty(value = \"triggers.time-trigger.type\", havingValue = \"sqs\")\n  public SqsTemplate sqsTemplate(SqsAsyncClient sqsAsyncClient) {\n    return SqsTemplate.builder().sqsAsyncClient(sqsAsyncClient).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "62a8197050c9797237738f106f91a2ed1c25e4fd", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsTemplate", "index": 1881, "label": 0}
{"input": "@ExplodeLoop\n  private ObjectData executeChildren(VirtualFrame frame, Object parent, int parentLength) {\n    var data = new ObjectData(parentLength);\n    for (var memberNode : memberNodes) {\n      memberNode.execute(frame, parent, data);\n    }\n    return data;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorObjectLiteralNode.java", "function_name": "executeChildren", "index": 1882, "label": 0}
{"input": "@Test\n  public void testBeforeRunning() {\n    taskActor.beforeRunning();\n    verify(context, times(1)).getMetrics();\n    verify(metrics, times(1)).counter(\"num_of_running_tasks\", TaskActor.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testBeforeRunning", "index": 1883, "label": 0}
{"input": "private void readAndWriteTable(File file) {\n        try (ExcelWriter excelWriter = EasyExcel.write(file, RepetitionData.class).build()) {\n            WriteSheet writeSheet = EasyExcel.writerSheet(0).build();\n            WriteTable writeTable = EasyExcel.writerTable(0).relativeHeadRowIndex(0).build();\n            excelWriter.write(data(), writeSheet, writeTable).write(data(), writeSheet, writeTable);\n        }\n        try (ExcelReader excelReader = EasyExcel.read(file, RepetitionData.class, new RepetitionDataListener())\n                .build()) {\n            ReadSheet readSheet = EasyExcel.readSheet(0).headRowNumber(2).build();\n            excelReader.read(readSheet);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/repetition/RepetitionDataTest.java", "function_name": "readAndWriteTable", "index": 1884, "label": 0}
{"input": "private ExpressionNode doVisitMapLiteral(Expr expr, ArgumentList argList) {\n    var keyAndValueNodes = createCollectionArgumentNodes(argList);\n\n    if (keyAndValueNodes.first.length == 0) {\n      return new ConstantValueNode(VmMap.EMPTY);\n    }\n\n    if (keyAndValueNodes.first.length % 2 != 0) {\n      throw exceptionBuilder()\n          .evalError(\"missingMapValue\")\n          .withSourceSection(createSourceSection(argList.span().stopSpan()))\n          .build();\n    }\n\n    return keyAndValueNodes.second\n        ? new ConstantValueNode(\n            createSourceSection(expr), VmMap.createFromConstantNodes(keyAndValueNodes.first))\n        : new MapLiteralNode(createSourceSection(expr), keyAndValueNodes.first);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitMapLiteral", "index": 1885, "label": 0}
{"input": "@Test\n\tvoid testCreateWithPromptTemplate() {\n\t\tMap<String, Object> model = new HashMap<>();\n\t\tmodel.put(\"name\", \"John\");\n\t\t\n\t\tPromptTemplate promptTemplate = PromptTemplate.builder()\n\t\t\t.template(TEST_TEMPLATE_CONTENT)\n\t\t\t.variables(model)\n\t\t\t.build();\n\n\t\tConfigurablePromptTemplate template = factory.create(TEST_TEMPLATE_NAME, promptTemplate);\n\n\t\t\n\t\tassertThat(template).isNotNull();\n\t\tassertThat(template.render()).isEqualTo(\"Hello, John!\");\n\t\tassertThat(factory.getTemplate(TEST_TEMPLATE_NAME)).isEqualTo(template);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57c9ddbb8f0c222fa73a69fa8ca0cd63deace926", "file_path": "spring-ai-alibaba-prompt/spring-ai-alibaba-prompt-nacos/src/test/java/com/alibaba/cloud/ai/prompt/ConfigurablePromptTemplateFactoryTests.java", "function_name": "testCreateWithPromptTemplate", "index": 1886, "label": 0}
{"input": "@Test\n  public void testRestartIncomplete() {\n    Map<String, Boolean> idStatusMap = new LinkedHashMap<>();\n    idStatusMap.put(\"job_3\", Boolean.FALSE);\n    idStatusMap.put(\"job_9\", Boolean.TRUE);\n    Assert.assertFalse(\n        DagHelper.isDone(\n            runtimeDag1,\n            idStatusMap,\n            RestartConfig.builder().addRestartNode(\"sample-dag-test-1\", 1, \"job_3\").build()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testRestartIncomplete", "index": 1887, "label": 0}
{"input": "public Builder setRoomCapacity(int value) {\n\n                roomCapacity_ = value;\n                bitField0_ |= 0x00000010;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setRoomCapacity", "index": 1888, "label": 0}
{"input": "@Bean\n  public ExternalPayloadStorage externalPayloadStorage() {\n    LOG.info(\"Creating externalPayloadStorage within Spring boot...\");\n    return new DummyPayloadStorage();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "externalPayloadStorage", "index": 1889, "label": 0}
{"input": "@Override\n  public Boolean updateByBo(KnowledgeInfoBo bo) {\n    KnowledgeInfo update = MapstructUtils.convert(bo, KnowledgeInfo.class);\n    validEntityBeforeSave(update);\n    return baseMapper.updateById(update) > 0;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/knowledge/KnowledgeInfoServiceImpl.java", "function_name": "updateByBo", "index": 1890, "label": 0}
{"input": "@Override\n    public void afterRowDispose(RowWriteHandlerContext context) {\n        if (BooleanUtils.isTrue(context.getHead())) {\n            Sheet sheet = context.getWriteSheetHolder().getSheet();\n            Drawing<?> drawingPatriarch = sheet.createDrawingPatriarch();\n            \n            Comment comment = drawingPatriarch.createCellComment(\n                    new XSSFClientAnchor(0, 0, 0, 0, (short) 1, 0, (short) 2, 1));\n            \n            comment.setString(new XSSFRichTextString(\"创建批注!\"));\n            \n            sheet.getRow(0).getCell(1).setCellComment(comment);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/CommentWriteHandler.java", "function_name": "afterRowDispose", "index": 1891, "label": 0}
{"input": "public boolean tryTerminateQueuedInstance(\n      WorkflowInstance instance, WorkflowInstance.Status status, String reason) {\n    return withMetricLogError(\n        () ->\n            withRetryableTransaction(\n                conn -> {\n                  int res = terminateQueuedInstance(conn, instance, status, reason);\n                  if (res == SUCCESS_WRITE_SIZE) {\n                    publisher.publishOrThrow(\n                        WorkflowInstanceUpdateJobEvent.create(\n                            instance, status, System.currentTimeMillis()),\n                        \"Failed sending job events when terminating queued instance\");\n                    return true;\n                  }\n                  return false;\n                }),\n        \"tryTerminateQueuedInstance\",\n        \"Failed to terminate the queued workflow instance {}\",\n        instance.getIdentity());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "tryTerminateQueuedInstance", "index": 1892, "label": 0}
{"input": "@Test\n  public void testUpsertStepInstance() {\n    si.setArtifacts(Collections.emptyMap());\n    si.setTimeline(new Timeline(Collections.emptyList()));\n    stepDao.insertOrUpsertStepInstance(si, true);\n    StepInstance instance = stepDao.getStepInstance(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    Assertions.assertThat(instance).usingRecursiveComparison().isEqualTo(si);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testUpsertStepInstance", "index": 1893, "label": 0}
{"input": "@Test\n  public void testInvalidRunId() {\n    when(instance.getWorkflowRunId()).thenReturn(2L);\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    AssertHelper.assertThrows(\n        \"run id has to be the latest one\",\n        MaestroBadRequestException.class,\n        \"Cannot STOP the workflow instance run [1] as it is not the latest run [2]\",\n        () -> actionHandler.stop(\"test-workflow\", 1, 1, user));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandlerTest.java", "function_name": "testInvalidRunId", "index": 1894, "label": 0}
{"input": "@Test\n  public void testTerminateWorkflowInstancesNullPointerException() {\n    when(instance1.getStatus()).thenReturn(WorkflowInstance.Status.CREATED);\n    when(instance1.getWorkflowUuid()).thenReturn(\"uuid1\");\n    when(instance1.getExecutionId()).thenReturn(null);\n    AssertHelper.assertThrows(\n        \"Something is null\",\n        MaestroInternalError.class,\n        \"Something is null\",\n        () -> processor.process(() -> jobEvent1));\n\n    when(instance1.getStatus()).thenThrow(new NullPointerException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Something is null\",\n        MaestroInternalError.class,\n        \"Something is null\",\n        () -> processor.process(() -> jobEvent1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/TerminateThenRunInstanceJobProcessorTest.java", "function_name": "testTerminateWorkflowInstancesNullPointerException", "index": 1895, "label": 0}
{"input": "private void maintenance() {\n    LOG.trace(\"[{}] tries to claim a group...\", address);\n    try {\n      FlowGroup group = context.claimGroup();\n      if (group != null) {\n        LOG.info(\"[{}] claimed a group [{}]\", address, group);\n        try {\n          readLock.lock();\n          groupActors.computeIfAbsent(group.groupId(), id -> Actor.startGroupActor(group, context));\n        } finally {\n          readLock.unlock();\n        }\n      }\n    } catch (RuntimeException e) {\n      LOG.warn(\"[{}] failed to claim a group due to an error, will try again\", address, e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/FlowExecutor.java", "function_name": "maintenance", "index": 1896, "label": 0}
{"input": "@Test\n  public void testGetLargestForeachRunIdFromAncestors() throws Exception {\n    assertEquals(1L, instanceDao.getLargestForeachRunIdFromRuns(TEST_WORKFLOW_ID));\n\n    WorkflowInstance wfi2 = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n    wfi2.setWorkflowUuid(\"wfi2-uuid\");\n    wfi2.setWorkflowInstanceId(101L);\n    wfi2.setWorkflowRunId(2L);\n    wfi2.setInitiator(new ForeachInitiator());\n    Optional<Details> ret =\n        instanceDao.runWorkflowInstances(TEST_WORKFLOW_ID, Collections.singletonList(wfi2), 2);\n    assertFalse(ret.isPresent());\n\n    assertEquals(2L, instanceDao.getLargestForeachRunIdFromRuns(TEST_WORKFLOW_ID));\n    MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, 101);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetLargestForeachRunIdFromAncestors", "index": 1897, "label": 0}
{"input": "public void handleStepStatus(MaestroTracingContext tracingContext, StepInstance.Status status) {\n    handleStepStatus(tracingContext, status, null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tracing/MaestroTracingManager.java", "function_name": "handleStepStatus", "index": 1898, "label": 0}
{"input": "@Operation(summary = \"Add a breakpoint corresponding to a step definition\")\n  @PostMapping(value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE)\n  public StepBreakpoint addBreakpoint(\n      @Valid @NotNull @RequestBody StepBreakpointCreateRequest request) {\n    validateStepBreakpointRequest(request);\n    return stepBreakpointDao.addStepBreakpoint(\n        request.getWorkflowId(),\n        Constants.MATCH_ALL_WORKFLOW_VERSIONS,\n        Constants.MATCH_ALL_WORKFLOW_INSTANCES,\n        Constants.MATCH_ALL_RUNS,\n        request.getStepId(),\n        Constants.MATCH_ALL_STEP_ATTEMPTS,\n        callerBuilder.build());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8e3a6f4fa3173239c2832015f499f6768146f25d", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepBreakpointController.java", "function_name": "addBreakpoint", "index": 1899, "label": 0}
{"input": "public WorkflowOverviewResponse getWorkflowOverview(@NotNull String workflowId) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_WORKFLOW_OVERVIEW_QUERY,\n                stmt -> {\n                  stmt.setString(1, workflowId);\n                  stmt.setString(2, workflowId);\n                },\n                result -> {\n                  if (result.next()) {\n                    return workflowOverviewFromResult(workflowId, result);\n                  }\n                  throw new MaestroNotFoundException(\n                      \"Cannot find workflow [%s], which is either not created or has been deleted.\",\n                      workflowId);\n                }),\n        \"getWorkflowOverview\",\n        \"Failed to get the workflow overview for [{}]\",\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "getWorkflowOverview", "index": 1900, "label": 0}
{"input": "private String getStepId(ResultSet rs) throws SQLException {\n    return Checks.notNull(\n        rs.getString(StepInstanceField.STEP_ID.field), \"step_id column cannot be null\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepId", "index": 1901, "label": 0}
{"input": "@Override\n    public ResolvedModuleKey resolve(SecurityManager securityManager)\n        throws IOException, SecurityManagerException {\n      securityManager.checkResolveModule(uri);\n      var url = IoUtils.toUrl(uri);\n      var conn = url.openConnection();\n      conn.connect();\n      if (conn instanceof JarURLConnection && IoUtils.isWindows()) {\n        \n        \n        \n        conn.setUseCaches(false);\n      }\n      try (InputStream stream = conn.getInputStream()) {\n        URI redirected;\n        try {\n          redirected = conn.getURL().toURI();\n        } catch (URISyntaxException e1) {\n          \n          throw new AssertionError(e1);\n        }\n        securityManager.checkResolveModule(redirected);\n        var text = IoUtils.readString(stream);\n        \n        return ResolvedModuleKeys.virtual(this, uri, text, true);\n      }\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d9c65d484a95316736712f0e0db91c45b7fe8a78", "file_path": "pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java", "function_name": "resolve", "index": 1902, "label": 0}
{"input": "public void backup(int amount) {\n\n    inBuf += amount;\n    if ((bufpos -= amount) < 0) bufpos += bufsize;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JavaCharStream.java", "function_name": "backup", "index": 1903, "label": 0}
{"input": "@Test\n  public void testConsumeDeleteWorkflowJobEvent() {\n    when(jobEvent4.toMaestroEvent(clusterName)).thenReturn(null);\n    Assert.assertTrue(processor.process(NotificationJobEvent.create(jobEvent4)).isEmpty());\n    verify(jobEvent4, times(1)).getType();\n    verify(eventClient, times(1)).send(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/processors/NotificationJobEventProcessorTest.java", "function_name": "testConsumeDeleteWorkflowJobEvent", "index": 1904, "label": 0}
{"input": "@UpdateScript(version = 30)\n    public void addGuiSettings() {\n        conf.set(\"gui\", \"auto\");\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "bdc585b204889b8dca085ed38187a328957f55e6", "file_path": "src/main/java/com/ghostchu/peerbanhelper/config/MainConfigUpdateScript.java", "function_name": "addGuiSettings", "index": 1905, "label": 0}
{"input": "private ChatCompletionRequestParameter toDashScopeRequestParameter(DashScopeChatOptions options, boolean stream) {\n\n\t\tif (options == null) {\n\t\t\treturn new ChatCompletionRequestParameter();\n\t\t}\n\n\t\tBoolean incrementalOutput = stream && options.getIncrementalOutput();\n\t\treturn new ChatCompletionRequestParameter(\"message\", options.getSeed(), options.getMaxTokens(),\n\t\t\t\toptions.getTopP(), options.getTopK(), options.getRepetitionPenalty(), options.getPresencePenalty(),\n\t\t\t\toptions.getTemperature(), options.getStop(), options.getEnableSearch(), options.getResponseFormat(),\n\t\t\t\tincrementalOutput, options.getTools(), options.getToolChoice(), stream,\n\t\t\t\toptions.getVlHighResolutionImages(), options.getEnableThinking(), options.getSearchOptions(),\n\t\t\t\toptions.getParallelToolCalls());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatModel.java", "function_name": "toDashScopeRequestParameter", "index": 1906, "label": 0}
{"input": "@Override\n    public void endSheet(AnalysisContext analysisContext) {\n        ReadSheetHolder readSheetHolder = analysisContext.readSheetHolder();\n        if (BooleanUtils.isTrue(readSheetHolder.getEnded())) {\n            return;\n        }\n        readSheetHolder.setEnded(Boolean.TRUE);\n        \n        for (ReadListener readListener : analysisContext.currentReadHolder().readListenerList()) {\n            readListener.doAfterAllAnalysed(analysisContext);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/processor/DefaultAnalysisEventProcessor.java", "function_name": "endSheet", "index": 1907, "label": 0}
{"input": "@Test\n  public void testStateIsTerminal() {\n    Assert.assertFalse(StepRuntime.State.CONTINUE.isTerminal());\n    Assert.assertTrue(StepRuntime.State.DONE.isTerminal());\n    Assert.assertTrue(StepRuntime.State.USER_ERROR.isTerminal());\n    Assert.assertTrue(StepRuntime.State.PLATFORM_ERROR.isTerminal());\n    Assert.assertTrue(StepRuntime.State.FATAL_ERROR.isTerminal());\n    Assert.assertTrue(StepRuntime.State.STOPPED.isTerminal());\n    Assert.assertTrue(StepRuntime.State.TIMED_OUT.isTerminal());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/steps/StepRuntimeTest.java", "function_name": "testStateIsTerminal", "index": 1908, "label": 0}
{"input": "public FrameDescriptor buildMemberDescriptor() {\n      return memberDescriptorBuilder.build();\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "buildMemberDescriptor", "index": 1909, "label": 0}
{"input": "private POIFSFileSystem openFileSystemAndEncrypt(File file) throws Exception {\n        POIFSFileSystem fileSystem = new POIFSFileSystem();\n        Encryptor encryptor = new EncryptionInfo(EncryptionMode.standard).getEncryptor();\n        encryptor.confirmPassword(writeWorkbookHolder.getPassword());\n        try (OPCPackage opcPackage = OPCPackage.open(file, PackageAccess.READ_WRITE);\n                OutputStream outputStream = encryptor.getDataStream(fileSystem)) {\n            opcPackage.save(outputStream);\n        }\n        return fileSystem;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/WriteContextImpl.java", "function_name": "openFileSystemAndEncrypt", "index": 1910, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidEscapeArgLengthCall() {\n    SelType res =\n        SelString.of(\"{\\\"foo\\\"}\")\n            .call(\"escape\", new SelType[] {SelString.of(\"{\\\"foo\\\"}\"), SelString.of(\"{\\\"bar\\\"}\")});\n    assertEquals(\"STRING: {\\\\\\\"bar\\\\\\\"}\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidEscapeArgLengthCall", "index": 1911, "label": 0}
{"input": "@GetMapping(\"/list\")\n  public TableDataInfo<KnowledgeInfoVo> list(KnowledgeInfoBo bo, PageQuery pageQuery) {\n    if (!StpUtil.isLogin()) {\n      throw new SecurityException(\"请先去登录!\");\n    }\n    bo.setUid(LoginHelper.getUserId());\n    return knowledgeInfoService.queryPageList(bo, pageQuery);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "list", "index": 1912, "label": 0}
{"input": "public int queueId() {\n    if (isInternal()) {\n      return 0;\n    }\n    return event.getType().getQueueId();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/models/MessageDto.java", "function_name": "queueId", "index": 1913, "label": 0}
{"input": "@Test\n    public void t01Read07() {\n        read(file07, null);\n        read(file07, Boolean.FALSE);\n        read(file07, Boolean.TRUE);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/hiddensheets/HiddenSheetsTest.java", "function_name": "t01Read07", "index": 1914, "label": 0}
{"input": "@Test\n  public void testStringInterpolationWithKeyValueParamInStringMap() {\n    Parameter param =\n        StringMapParameter.builder().value(Collections.singletonMap(\"$var\", \"$var2\")).build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Arrays.asList(\"var\", \"var2\")), paramNames);\n\n    \n    Object result = LiteralEvaluator.eval(param, params);\n    Assert.assertEquals(Collections.singletonMap(\"0\", \"2\"), result);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d806f867065a50f424833bfc501c773567595d", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testStringInterpolationWithKeyValueParamInStringMap", "index": 1915, "label": 0}
{"input": "public static String isLocalPortInUse(String bindAddress) {\n        Map<String, Integer> result = splitHostAndPort(bindAddress);\n        if (result == null) {\n            return \"exception\";\n        }\n        int socksPort = result.values().iterator().next();\n        if (socksPort == -1) {\n            return \"false\"; \n        }\n        try {\n            \n            new ServerSocket(socksPort).close();\n            \n            return \"false\";\n        } catch (IOException e) {\n            \n            return \"true\";\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/service/OblivionVpnService.java", "function_name": "isLocalPortInUse", "index": 1916, "label": 0}
{"input": "private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {\n    switch (hiByte) {\n      case 0:\n        return ((jjbitVec2[i2] & l2) != 0L);\n      default:\n        if ((jjbitVec0[i1] & l1) != 0L) return true;\n        return false;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjCanMove_0", "index": 1917, "label": 0}
{"input": "@Test\n  public void testTryTerminateQueuedInstanceNoOp() {\n    WorkflowSummary summary = new WorkflowSummary();\n    summary.setWorkflowId(wfi.getWorkflowId());\n    summary.setWorkflowInstanceId(wfi.getWorkflowInstanceId());\n    summary.setWorkflowRunId(wfi.getWorkflowRunId());\n    Optional<Details> details = instanceDao.executeWorkflowInstance(summary, \"test-execution-id\");\n    assertFalse(details.isPresent());\n    boolean res =\n        instanceDao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.STOPPED, \"test-reason\");\n    assertFalse(res);\n    verify(publisher, times(0)).publishOrThrow(any(), any());\n    WorkflowInstance updated =\n        instanceDao.getLatestWorkflowInstanceRun(wfi.getWorkflowId(), wfi.getWorkflowInstanceId());\n    assertEquals(WorkflowInstance.Status.CREATED, updated.getStatus());\n    assertNull(updated.getTimeline());\n    assertNull(updated.getEndTime());\n    assertNotNull(updated.getModifyTime());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testTryTerminateQueuedInstanceNoOp", "index": 1918, "label": 0}
{"input": "public User getRequester() {\n    if (initiator.getType() == Initiator.Type.MANUAL) {\n      return ((ManualInitiator) initiator).getUser();\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunRequest.java", "function_name": "getRequester", "index": 1919, "label": 0}
{"input": "public ReadSheet(Integer sheetNo, String sheetName,Integer numRows) {\n        this.sheetNo = sheetNo;\n        this.sheetName = sheetName;\n        this.numRows = numRows;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/metadata/ReadSheet.java", "function_name": "ReadSheet", "index": 1920, "label": 0}
{"input": "@Test\n  public void testGetChild() {\n    assertNull(groupActor.getChild(\"test-flow-ref\"));\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    assertEquals(flowActor, groupActor.getChild(\"test-flow-ref\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testGetChild", "index": 1921, "label": 0}
{"input": "public static JSONObject getChatroomMemberList(String appId,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/getChatroomMemberList\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "getChatroomMemberList", "index": 1922, "label": 0}
{"input": "@Override\n  public void updateWorkflow(String workflowInstanceId, String[] keys, Object[] values) {\n    \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "updateWorkflow", "index": 1923, "label": 0}
{"input": "@Test\n  public void testCreateAndUpsertArtifacts() {\n    addOutputData(null, artifacts);\n\n    Optional<OutputData> outputDataOpt = dao.getOutputDataForExternalJob(EXT_JOB_ID, JOB_TYPE);\n    assertTrue(outputDataOpt.isPresent());\n    OutputData created = outputDataOpt.get();\n    assertEquals(EXT_JOB_ID, created.getExternalJobId());\n    assertEquals(JOB_TYPE, created.getExternalJobType());\n    assertEquals(WORKFLOW_ID, created.getWorkflowId());\n    assertEquals(1, created.getArtifacts().size());\n    assertNotNull(created.getCreateTime());\n    assertNotNull(created.getModifyTime());\n\n    \n    dao.insertOrUpdateOutputData(created);\n\n    OutputData updated = dao.getOutputDataForExternalJob(EXT_JOB_ID, JOB_TYPE).get();\n    assertEquals(created.getCreateTime(), updated.getCreateTime());\n    assertNotEquals(created.getModifyTime(), updated.getModifyTime());\n    assertEquals(created.getArtifacts(), updated.getArtifacts());\n    assertNull(updated.getParams());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "fd3b451055d66fecc4f8f311f849e8cf4c07b174", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/OutputDataDaoTest.java", "function_name": "testCreateAndUpsertArtifacts", "index": 1924, "label": 0}
{"input": "@Bean\n  public ExecutionDAO executionDAO(\n      DataSource crdbDataSource,\n      IndexDAO indexDAO,\n      @Qualifier(ConductorConfiguration.CONDUCTOR_QUALIFIER) ObjectMapper objectMapper,\n      StringCodec stringCodec,\n      ConductorProperties props) {\n    LOG.info(\"Creating executionDAO within Spring boot...\");\n    return new MaestroCockroachDBExecutionDao(\n        crdbDataSource, objectMapper, stringCodec, indexDAO, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "executionDAO", "index": 1925, "label": 0}
{"input": "public static @Nullable List<Entry> parse(\n      ModuleKey moduleKey, ResolvedModuleKey resolvedModuleKey) throws IOException {\n    var parser = new Parser();\n    var text = resolvedModuleKey.loadSource();\n    var source = VmUtils.createSource(moduleKey, text);\n    var importListParser = new ImportsAndReadsParser(source);\n    try {\n      return parser.parseModule(text).accept(importListParser);\n    } catch (ParserError e) {\n      var moduleName = IoUtils.inferModuleName(moduleKey);\n      throw VmUtils.toVmException(e, source, moduleName);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/ImportsAndReadsParser.java", "function_name": "parse", "index": 1926, "label": 0}
{"input": "private StepInstance.Status getPlatformErrorStatus(StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary.getStepRetry().hasReachedPlatformRetryLimit()) {\n      return StepInstance.Status.FATALLY_FAILED;\n    } else {\n      return StepInstance.Status.PLATFORM_FAILED;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeManager.java", "function_name": "getPlatformErrorStatus", "index": 1927, "label": 0}
{"input": "private void completeInstanceInit(Connection conn, long nextInstanceId, WorkflowInstance instance)\n      throws SQLException {\n    if (instance.isFreshRun()) { \n      instance.setWorkflowInstanceId(nextInstanceId);\n      instance.setWorkflowRunId(1L);\n    } else {\n      \n      long latestRunId =\n          getLatestRunId(conn, instance.getWorkflowId(), instance.getWorkflowInstanceId());\n      if (latestRunId < 0) { \n        throw new MaestroInvalidStatusException(\n            \"There is already a workflow instance run [%s][%s][%s] and cannot restart another run.\",\n            instance.getWorkflowId(), instance.getWorkflowInstanceId(), -latestRunId);\n      }\n      instance.setWorkflowRunId(latestRunId + 1);\n      tryUpdateAncestorStatus(conn, instance);\n    }\n    instance.fillCorrelationIdIfNull();\n    instance.setCreateTime(System.currentTimeMillis());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "completeInstanceInit", "index": 1928, "label": 0}
{"input": "public boolean hasMessage1() {\n                return ((bitField0_ & 0x00000001) != 0);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "hasMessage1", "index": 1929, "label": 0}
{"input": "public static JSONObject postImage(String appId, String toWxid, String imgUrl) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"imgUrl\", imgUrl);\r\n        return OkhttpUtil.postJSON(\"/message/postImage\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postImage", "index": 1930, "label": 0}
{"input": "@Test\n  public void testInValidCron() {\n    Set<ConstraintViolation<DummyWorkflow>> violations =\n        validator.validate(new DummyWorkflow(\"*/1 * * * *\"));\n    Assert.assertEquals(1, violations.size());\n    Assert.assertEquals(\n        \"[time-trigger] the interval between time triggers is less than the minimal value [120000] millis\",\n        violations.iterator().next().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "5d653d55b617f5d70df8eee169a7a62a28c7d017", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/TimeTriggerConstraintTest.java", "function_name": "testInValidCron", "index": 1931, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(\n      value = \"triggers.time-trigger.type\",\n      havingValue = \"noop\",\n      matchIfMissing = true)\n  public TimeTriggerProducer noopTimeTriggerProducer() {\n    LOG.info(\"Creating noopTimeTriggerProducer within Spring boot...\");\n    return (execution, delay) ->\n        LOG.info(\"[NoOp] push time trigger execution [{}] with delay [{}]\", execution, delay);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "noopTimeTriggerProducer", "index": 1932, "label": 0}
{"input": "@Test\n    public void t01ReadTest() throws Exception {\n        \n        readFileWithMap(headFile01, 6);\n        readFileWithPOJO(headFile01);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "8ad28c2464fd7d057dcd4a27ed5fb044c874078a", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/head/MaxHeadSizeTest.java", "function_name": "t01ReadTest", "index": 1933, "label": 0}
{"input": "@Test\n\t@Order(6)\n\t@DisplayName(\"Test Baidu homepage elements\")\n\tvoid testBaiduElements() {\n\t\t\n\t\tToolExecuteResult navigateResult = executeAction(\"navigate\", \"https://www.baidu.com\");\n\t\tAssertions.assertEquals(\"Navigated to https://www.baidu.com\", navigateResult.getOutput(),\n\t\t\t\t\"Failed to navigate to Baidu\");\n\n\t\tPage page = browserUseTool.getDriver().getCurrentPage();\n\t\tMap<String, Object> state = browserUseTool.getCurrentState(page);\n\t\tString elements = (String) state.get(\"interactive_elements\");\n\t\tAssertions.assertNotNull(elements, \"Failed to get Baidu interactive elements\");\n\t\tlog.info(\"Baidu interactive elements: {}\", elements);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/test/java/com/alibaba/cloud/ai/example/manus/tool/BrowserUseToolSpringTest.java", "function_name": "testBaiduElements", "index": 1934, "label": 0}
{"input": "@Test\n    public void xlsxTest3() throws IOException {\n        try (ExcelReader reader = EasyExcel.read(\n                Files.newInputStream(Paths.get(\"src/test/resources/repeat/repeat.xlsx\")), LockData.class,\n                new RepeatListener()).headRowNumber(0).build()) {\n            ReadSheet r2 = EasyExcel.readSheet(0).build();\n            reader.read(r2);\n            reader.finish();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "179dca17c46b409b27904d552e011f733fcea33e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "xlsxTest3", "index": 1935, "label": 0}
{"input": "@Override\n  public MultipartFile downloadByFile(Long ossId) throws IOException {\n    SysOssVo sysOss = SpringUtils.getAopProxy(this).getById(ossId);\n    if (ObjectUtil.isNull(sysOss)) {\n      throw new ServiceException(\"文件数据不存在!\");\n    }\n\n    OssClient storage = OssFactory.instance();\n    try (InputStream inputStream = storage.getObjectContent(sysOss.getUrl())) {\n      byte[] content = IoUtil.readBytes(inputStream);\n      return new MockMultipartFile(\n          sysOss.getFileName(),\n          sysOss.getOriginalName(),\n          MediaType.APPLICATION_OCTET_STREAM_VALUE,\n          content\n      );\n    } catch (Exception e) {\n      throw new ServiceException(e.getMessage());\n    }\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOssServiceImpl.java", "function_name": "downloadByFile", "index": 1936, "label": 0}
{"input": "private ObjectMember addModuleProperty(UnresolvedPropertyNode propertyNode) {\n    var needToCreateNewModuleToEnforceLateBinding =\n        !propertyNode.isLocal() && replState.module.hasMember(propertyNode.getName());\n\n    if (needToCreateNewModuleToEnforceLateBinding) {\n      replState.module = createEmptyReplModule(replState.module);\n    }\n\n    var resolveNode =\n        new ResolveClassMemberNode(\n            language, new FrameDescriptor(), propertyNode, replState.module.getVmClass());\n\n    var property =\n        (org.pkl.core.ast.member.ClassProperty)\n            callNode.call(resolveNode.getCallTarget(), replState.module, replState.module);\n\n    replState.module.getVmClass().addProperty(property);\n    return property.getInitializer();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/repl/ReplServer.java", "function_name": "addModuleProperty", "index": 1937, "label": 0}
{"input": "private JsonConverter jsonConverter(boolean compressionEnabled, String compressorName) {\n    return new JsonConverter(objectMapper, stringCodec, compressionEnabled, compressorName);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/JsonConverterTest.java", "function_name": "jsonConverter", "index": 1938, "label": 0}
{"input": "private Pair<List<File>, List<URI>> splitFilesAndUris(List<Object> modules) {\n    var files = new ArrayList<File>();\n    var uris = new ArrayList<URI>();\n    for (var m : modules) {\n      var parsed = PluginUtils.parseModuleNotation(m);\n      if (parsed instanceof File file) {\n        files.add(file);\n      } else if (parsed instanceof URI uri) {\n        uris.add(uri);\n      }\n    }\n    return Pair.of(files, uris);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b93cb9b32237760e357d9229b87686b81390a519", "file_path": "pkl-gradle/src/main/java/org/pkl/gradle/task/ModulesTask.java", "function_name": "splitFilesAndUris", "index": 1939, "label": 0}
{"input": "@Test\n  public void testInvalidUnblock() {\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.FAILED);\n    when(workflowDao.getRunStrategy(\"test-workflow\"))\n        .thenReturn(RunStrategy.create(\"STRICT_SEQUENTIAL\"));\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.STOPPED);\n    AssertHelper.assertThrows(\n        \"can only unblock failed instance\",\n        MaestroInvalidStatusException.class,\n        \"from status [STOPPED] as it is not FAILED status\",\n        () -> actionHandler.unblock(\"test-workflow\", 1, 1, user));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandlerTest.java", "function_name": "testInvalidUnblock", "index": 1940, "label": 0}
{"input": "@Test\n  public void testGetFlowsFrom() {\n    when(flowDao.getFlows(group, 10, \"\")).thenReturn(List.of());\n    assertEquals(List.of(), context.getFlowsFrom(group, 10, \"\"));\n    verify(flowDao, times(1)).getFlows(group, 10, \"\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testGetFlowsFrom", "index": 1941, "label": 0}
{"input": "public MaestroDatabaseError(Throwable cause, String msg) {\n    super(Code.INTERNAL_ERROR, msg, cause);\n    this.details = Details.create(cause, false, msg);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroDatabaseError.java", "function_name": "MaestroDatabaseError", "index": 1942, "label": 0}
{"input": "public Stream<Task> getStreamOfAllTasks() {\n    return Stream.concat(finishedTasks.values().stream(), runningTasks.values().stream());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/models/Flow.java", "function_name": "getStreamOfAllTasks", "index": 1943, "label": 0}
{"input": "@Test\n  public void testStartWithRunStrategyForStartWithRunId() {\n    wfi.setWorkflowInstanceId(0L);\n    wfi.setWorkflowRunId(2L);\n    wfi.setWorkflowUuid(\"test-uuid\");\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(1, res);\n    assertEquals(2, wfi.getWorkflowInstanceId());\n    assertEquals(1, wfi.getWorkflowRunId()); \n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n    WorkflowInstance latestRun =\n        dao.getLatestWorkflowInstanceRun(wfi.getWorkflowId(), wfi.getWorkflowInstanceId());\n    assertEquals(2, latestRun.getWorkflowInstanceId());\n    assertEquals(\"test-uuid\", latestRun.getWorkflowUuid());\n    verifyPublish(1, 0, 0, 0, 0);\n    MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, 2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "testStartWithRunStrategyForStartWithRunId", "index": 1944, "label": 0}
{"input": "@Test\n  public void testDisallowMergeModifyInternalModeNonSystem() {\n    \n            ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testDisallowMergeModifyInternalModeNonSystem", "index": 1945, "label": 0}
{"input": "@Test\n  public void testTerminateQueuedInstancesNoOp() {\n    WorkflowSummary summary = new WorkflowSummary();\n    summary.setWorkflowId(wfi.getWorkflowId());\n    summary.setWorkflowInstanceId(wfi.getWorkflowInstanceId());\n    summary.setWorkflowRunId(wfi.getWorkflowRunId());\n    instanceDao.executeWorkflowInstance(summary, \"test_execution_id\");\n    int cnt =\n        instanceDao.terminateQueuedInstances(\n            TEST_WORKFLOW_ID, 2, WorkflowInstance.Status.STOPPED, \"test-reason\");\n    assertEquals(0, cnt);\n    verify(publisher, times(0)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testTerminateQueuedInstancesNoOp", "index": 1946, "label": 0}
{"input": "public static int copy(final InputStream input, final OutputStream output) throws IOException {\n        long count = 0;\n        int n;\n        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n        while (EOF != (n = input.read(buffer))) {\n            output.write(buffer, 0, n);\n            count += n;\n        }\n        if (count > Integer.MAX_VALUE) {\n            return -1;\n        }\n        return (int) count;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/IoUtils.java", "function_name": "copy", "index": 1947, "label": 0}
{"input": "public HorizontalCellStyleStrategy(WriteCellStyle headWriteCellStyle,\n            List<WriteCellStyle> contentWriteCellStyleList) {\n        this.headWriteCellStyle = headWriteCellStyle;\n        this.contentWriteCellStyleList = contentWriteCellStyleList;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/style/HorizontalCellStyleStrategy.java", "function_name": "HorizontalCellStyleStrategy", "index": 1948, "label": 0}
{"input": "private Format getDefaultFormat(double cellValue) {\n        localeChangedObservable.checkForLocaleChange();\n        \n        \n        if (defaultNumFormat != null) {\n            return defaultNumFormat;\n            \n            \n        }\n        return generalNumberFormat;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatter1.java", "function_name": "getDefaultFormat", "index": 1949, "label": 0}
{"input": "@Test\n    public void t04() {\n        \n        List<Map<Integer, Object>> list = EasyExcel.read(TestFileUtil.getPath() + \"compatibility/t04.xlsx\").sheet()\n                .doReadSync();\n        log.info(\"data:{}\", JSON.toJSONString(list));\n        Assertions.assertEquals(56, list.size());\n        Map<Integer, Object> row0 = list.get(0);\n        Assertions.assertEquals(\"QQSJK28F152A012242S0081\", row0.get(5));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t04", "index": 1950, "label": 0}
{"input": "@Override\n    public Interval deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n      JsonNode value = p.getCodec().readTree(p);\n      Checks.checkTrue(\n          value.isNumber() || (value.isArray() && value.size() == 2),\n          \"Interval value only supports Long or Array[2] and not support the type: \"\n              + value.getClass());\n      if (value.isArray()) {\n        Iterator<JsonNode> itr = value.elements();\n        return new Interval(itr.next().asLong(), itr.next().asLong());\n      }\n      return new Interval(value.asLong(), value.asLong());\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachDetails.java", "function_name": "deserialize", "index": 1951, "label": 0}
{"input": "@Override\n  public void removeEventHandler(String name) {\n    withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                REMOVE_EVENT_HANDLER_STATEMENT, statement -> statement.setString(1, name)),\n        \"removeEventHandler\",\n        \"Failed removing an event handler with name {}\",\n        name);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBEventHandlerDAO.java", "function_name": "removeEventHandler", "index": 1952, "label": 0}
{"input": "private long getWorkflowVersionId(ResultSet rs) throws SQLException {\n    return Checks.notNull(\n        rs.getLong(StepInstanceField.WORKFLOW_VERSION_ID.field),\n        \"step workflow_version_id column cannot be null\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getWorkflowVersionId", "index": 1953, "label": 0}
{"input": "public int tryUnblockFailedWorkflowInstances(String workflowId, int limit, TimelineEvent event) {\n    return withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                UNBLOCK_INSTANCES_FAILED_STATUS,\n                stmt -> {\n                  int idx = 0;\n                  stmt.setString(++idx, toJson(event));\n                  stmt.setString(++idx, workflowId);\n                  stmt.setInt(++idx, limit);\n                }),\n        \"tryUnblockFailedWorkflowInstances\",\n        \"Failed to try to unblock the failed workflow instances for workflow id[{}]\",\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "tryUnblockFailedWorkflowInstances", "index": 1954, "label": 0}
{"input": "public PlanningInput(String command, String planId, String title, List<String> steps) {\n\t\t\tthis.command = command;\n\t\t\tthis.planId = planId;\n\t\t\tthis.title = title;\n\t\t\tthis.steps = steps;\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b519b7c9cc1f88dafec21315dbc4bc5cb5ac4fe1", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/PlanningTool.java", "function_name": "PlanningInput", "index": 1955, "label": 0}
{"input": "@Test\n  public void testToTriggerUuids() {\n    Workflow workflow =\n        Workflow.builder()\n            .id(\"test-wf-id\")\n            .timeTriggers(Collections.singletonList(new CronTimeTrigger()))\n            .signalTriggers(Collections.singletonList(new SignalTrigger()))\n            .build();\n    TriggerUuids triggerUuids = IdHelper.toTriggerUuids(workflow);\n    Assert.assertEquals(\"399e992f-bca3-3cf1-9e1c-f04e7f9ee6f4\", triggerUuids.getTimeTriggerUuid());\n    Assert.assertEquals(\n        Collections.singletonMap(\"ae3fd022-76e8-3322-b657-0db619b4575f\", 0),\n        triggerUuids.getSignalTriggerUuids());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/IdHelperTest.java", "function_name": "testToTriggerUuids", "index": 1956, "label": 0}
{"input": "@Override\n  public List<WorkflowDef> getAllWorkflowDefs() {\n    return withMetricLogError(\n        () ->\n            getPayloads(\n                GET_WORKFLOW_DEFINITIONS_STATEMENT, StatementPreparer.NO_OP, WorkflowDef.class),\n        \"getAllWorkflowDefs\",\n        \"Failed getting all workflow definitions\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "getAllWorkflowDefs", "index": 1957, "label": 0}
{"input": "private boolean isTimeout(StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary.getRuntimeState() != null\n        && runtimeSummary.getRuntimeState().getStartTime() != null) {\n      if (runtimeSummary.getRuntimeState().getStatus() == StepInstance.Status.TIMED_OUT) {\n        return true;\n      }\n      long timeoutInMillis =\n          ObjectHelper.valueOrDefault(\n              runtimeSummary.getTimeoutInMillis(), Defaults.DEFAULT_TIME_OUT_LIMIT_IN_MILLIS);\n      return System.currentTimeMillis() - runtimeSummary.getRuntimeState().getStartTime()\n          >= timeoutInMillis;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "isTimeout", "index": 1958, "label": 0}
{"input": "private void validateNode(Nodes nodes) throws GraphStateException {\n\t\tList<CommandNode> commandNodeList = nodes.elements.stream().filter(node -> {\n\t\t\treturn node instanceof CommandNode commandNode;\n\t\t}).map(node -> (CommandNode) node).toList();\n\t\tfor (CommandNode commandNode : commandNodeList) {\n\t\t\tfor (String key : commandNode.getMappings().keySet()) {\n\t\t\t\tif (!nodes.anyMatchById(key)) {\n\t\t\t\t\tthrow Errors.missingNodeInEdgeMapping.exception(commandNode.id(), key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b96b23a5859c99b4b9f1e8895d9eee02ff7069d5", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/StateGraph.java", "function_name": "validateNode", "index": 1959, "label": 0}
{"input": "default DoubleParamDefinition asDoubleParamDef() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as DOUBLE\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/ParamDefinition.java", "function_name": "asDoubleParamDef", "index": 1960, "label": 0}
{"input": "@Test\n  public void testSundayField() {\n    SelLong res = SelMiscFunc.INSTANCE.field(SelString.of(\"SUNDAY\"));\n    assertEquals(7, res.longVal());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMiscFuncTest.java", "function_name": "testSundayField", "index": 1961, "label": 0}
{"input": "public static SplitTunnelMode getSplitTunnelMode(FileManager fm) {\n        SplitTunnelMode splitTunnelMode;\n        try {\n            splitTunnelMode = SplitTunnelMode.valueOf(fm.getString(\"splitTunnelMode\", SplitTunnelMode.DISABLED.toString()));\n        } catch (Exception e) {\n            splitTunnelMode = SplitTunnelMode.DISABLED;\n        }\n        return splitTunnelMode;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/SplitTunnelMode.java", "function_name": "getSplitTunnelMode", "index": 1962, "label": 0}
{"input": "@Test\n  public void testTryExecuteTriggerWithError() throws Exception {\n    SignalTriggerMatch triggerMatch =\n        loadObject(\"fixtures/sample-signal-trigger-match.json\", SignalTriggerMatch.class);\n    String def = loadJson(\"fixtures/signal_triggers/signal_trigger_simple.json\");\n    when(triggerDao.getTriggerForUpdate(any(), any(), any()))\n        .thenReturn(\n            new SignalTriggerDto(\n                \"sample-workflow-1\",\n                \"test-uuid-1\",\n                def,\n                new String[] {\"signal_a\", \"signal_b\"},\n                new Long[] {0L, 2L}));\n    AssertHelper.assertThrows(\n        \"Failed to update the checkpoint\",\n        MaestroRetryableError.class,\n        \"Failed to update the checkpoint for\",\n        () -> brokerDao.tryExecuteTrigger(triggerMatch));\n    verify(queueProducer, times(0)).push(any(SignalTriggerExecution.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testTryExecuteTriggerWithError", "index": 1963, "label": 0}
{"input": "public static void main(String[] args) {\n    SpringApplication.run(MaestroApp.class, args);\n    LOG.info(\"========== Maestro app started. ==========\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/MaestroApp.java", "function_name": "main", "index": 1964, "label": 0}
{"input": "private WorkflowRollupOverview getAggregatedRollupFromIterations(\n      String foreachWorkflowId, Set<Long> iterationsIds) {\n    WorkflowRollupOverview aggregated = new WorkflowRollupOverview();\n\n    if (ObjectHelper.isCollectionEmptyOrNull(iterationsIds)\n        || Checks.isNullOrEmpty(foreachWorkflowId)) {\n      return aggregated;\n    }\n\n    List<Long> iterationsList = new ArrayList<>(iterationsIds);\n\n    for (int i = 0; i < iterationsList.size(); i += properties.getGetRollupBatchLimit()) {\n      List<Long> batch =\n          iterationsList.subList(\n              i, Math.min(i + properties.getGetRollupBatchLimit(), iterationsList.size()));\n\n      List<WorkflowRollupOverview> rollups =\n          instanceDao.getBatchForeachLatestRunRollupForIterations(foreachWorkflowId, batch);\n\n      rollups.forEach(aggregated::aggregate);\n    }\n\n    return aggregated;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "getAggregatedRollupFromIterations", "index": 1965, "label": 0}
{"input": "@JsonIgnore\n  void segregate(WorkflowRollupOverview rollup) {\n    if (rollup == null) {\n      return;\n    }\n    this.totalLeafCount -= rollup.totalLeafCount;\n    if (rollup.overview == null) {\n      return;\n    }\n\n    rollup.overview.forEach(\n        (k, v) -> {\n          Checks.notNull(\n                  this.overview.get(k),\n                  \"Invalid: full overview should include the segregation rollup\")\n              .segregate(v);\n          if (this.overview.get(k).cnt == 0) {\n            this.overview.remove(k);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowRollupOverview.java", "function_name": "segregate", "index": 1966, "label": 0}
{"input": "@JsonCreator\n  public ForeachDetails(EnumMap<WorkflowInstance.Status, List<Interval>> input) {\n    this.info = input;\n    this.pendingInfo = new EnumMap<>(WorkflowInstance.Status.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachDetails.java", "function_name": "ForeachDetails", "index": 1967, "label": 0}
{"input": "@Override\n  public SearchResult<String> searchWorkflows(\n      String workflowName, String status, int start, int count, List<String> options) {\n    return withMetricLogError(\n        () ->\n            getSearchIds(\n                GET_WORKFLOW_INSTANCE_IDS_STATEMENT_TEMPLATE,\n                workflowName,\n                status,\n                start,\n                count,\n                options),\n        \"searchWorkflows\",\n        \"Failed searching workflows by workflow name {} with status {}\",\n        workflowName,\n        status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "searchWorkflows", "index": 1968, "label": 0}
{"input": "@Test\n  public void testLaunchWorkflowInstanceRuntimeException() {\n    when(instance1.getStatus()).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Failed to run\",\n        MaestroRetryableError.class,\n        \"Failed to run a workflow and will retry to run it.\",\n        () -> workflowRunner.run(instance1, \"uuid1\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowRunnerTest.java", "function_name": "testLaunchWorkflowInstanceRuntimeException", "index": 1969, "label": 0}
{"input": "@ApiOperation(value = \"提交局部重绘任务\")\n    @PostMapping(\"/modal\")\n    public String modal(@RequestBody SubmitModalDTO submitModalDTO) {\n        chatCostService.taskDeduct(\"mj\",\"repaint \", 0.0);\n        String jsonStr = JSONUtil.toJsonStr(submitModalDTO);\n        String url = \"mj/submit/modal\";\n        Request request = mjOkHttpUtil.createPostRequest(url, jsonStr);\n        return mjOkHttpUtil.executeRequest(request);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/tripartite/SubmitController.java", "function_name": "modal", "index": 1970, "label": 0}
{"input": "@Test\n  public void testStartShutdownFromRootWithoutChildActors() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    assertTrue(groupActor.isRunning());\n\n    groupActor.schedule(Action.GROUP_START, 10000);\n    assertEquals(Set.of(Action.GROUP_START), groupActor.getScheduledActions().keySet());\n\n    groupActor.startShutdown(Action.FLOW_SHUTDOWN);\n    verify(future, times(1)).cancel(true);\n    assertFalse(groupActor.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testStartShutdownFromRootWithoutChildActors", "index": 1971, "label": 0}
{"input": "@Test\n  public void testBuildNotebookParamsWithStepTimeoutSpecified() {\n    TypedStep step = new TypedStep();\n    step.setTimeout(ParsableLong.of(\"1 day 1 hour\"));\n    String notebookParams =\n        notebookParamsBuilder.buildNotebookParams(workflowSummary, stepRuntimeSummary, step);\n    assertEquals(\n        \"{\\\"owner\\\":\\\"paramuser\\\",\\\"notebook\\\":{\\\"input_path\\\":\\\"owner/mynotebook.ipynb\\\",\\\"run_id\\\":\\\"MyWorkflow_123_2_mystepid_3\\\"},\\\"StepTimeout\\\":\\\"1 day 1 hour\\\",\\\"criticality\\\":\\\"medium\\\",\\\"attempt_number\\\":2}\",\n        notebookParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilderTest.java", "function_name": "testBuildNotebookParamsWithStepTimeoutSpecified", "index": 1972, "label": 0}
{"input": "public Short createDataFormat(DataFormatData dataFormatData, boolean useCache) {\n        if (dataFormatData == null) {\n            return null;\n        }\n        if (!useCache) {\n            return StyleUtil.buildDataFormat(workbook, dataFormatData);\n        }\n        DataFormatData tempDataFormatData = new DataFormatData();\n        DataFormatData.merge(dataFormatData, tempDataFormatData);\n        \n        Short dataFormat = dataFormatMap.get(tempDataFormatData);\n        if (dataFormat != null) {\n            return dataFormat;\n        }\n        dataFormat = StyleUtil.buildDataFormat(workbook, tempDataFormatData);\n        dataFormatMap.put(tempDataFormatData, dataFormat);\n        return dataFormat;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/metadata/holder/WriteWorkbookHolder.java", "function_name": "createDataFormat", "index": 1973, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testTypeMisMatch() {\n    SelTypeUtil.checkTypeMatch(SelTypes.NULL, SelTypes.VOID);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypeUtilTest.java", "function_name": "testTypeMisMatch", "index": 1974, "label": 0}
{"input": "private boolean jj_3_5() {\n    if (jj_scan_token(NEW)) return true;\n    if (jj_3R_20()) return true;\n    if (jj_3R_88()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_5", "index": 1975, "label": 0}
{"input": "public Builder setMessage2(\n                    int index, SubMessage2.Builder builderForValue) {\n                if (message2Builder_ == null) {\n                    ensureMessage2IsMutable();\n                    message2_.set(index, builderForValue.build());\n                    onChanged();\n                } else {\n                    message2Builder_.setMessage(index, builderForValue.build());\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "setMessage2", "index": 1976, "label": 0}
{"input": "public Object jjtAccept(SelParserVisitor visitor, Object data) {\n    return visitor.visit(this, data);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SimpleNode.java", "function_name": "jjtAccept", "index": 1977, "label": 0}
{"input": "@Test\n  public void testParseWithNullParam() {\n    String input = \"Hello ${name}\";\n    String expected = \"Hello ${name}\";\n    String actual = StringParser.parseWithParam(input, paramDefinition -> null);\n    assertEquals(expected, actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/StringParserTest.java", "function_name": "testParseWithNullParam", "index": 1978, "label": 0}
{"input": "@Test\n  public void testBypassDependenciesWithBlockingAfterTimeout() {\n    MaestroStepInstanceActionDao spyDao = prepareActionDaoForBypassDependencies(300);\n\n    AssertHelper.assertThrows(\n        \"Should timeout the action\",\n        MaestroTimeoutException.class,\n        \"bypass-step-dependencies action for the step [sample-dag-test-3][1][1][job1] is timed out\",\n        () -> spyDao.bypassStepDependencies(instance, \"job1\", user, true));\n    verify(publisher, timeout(3000).times(1)).publish(any(StepInstanceWakeUpEvent.class));\n    verify(spyDao, timeout(3000).times(1)).deleteAction(any(), any());\n    Assert.assertTrue(spyDao.tryGetAction(summary, \"job1\").isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "testBypassDependenciesWithBlockingAfterTimeout", "index": 1979, "label": 0}
{"input": "@JsonAnySetter\n    public B addMetaField(String name, Object value) {\n      \n      if (meta == null) {\n        meta = new LinkedHashMap<>();\n      }\n      meta.put(name, value);\n      return self();\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/AbstractParameter.java", "function_name": "addMetaField", "index": 1980, "label": 0}
{"input": "@Test\n  public void testAddExtraTasksAndInputWithFreshRun() {\n    when(workflowSummary.isFreshRun()).thenReturn(true);\n\n    executionPreparer.addExtraTasksAndInput(flow, task);\n    assertTrue(task.getOutputData().isEmpty());\n    verify(stepInstanceDao, times(0)).getAllStepDependencies(any(), anyLong(), anyLong());\n    verify(stepInstanceDao, times(0)).getAllLatestStepFromAncestors(any(), anyLong(), any());\n    assertTrue(flow.getFinishedTasks().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/MaestroExecutionPreparerTest.java", "function_name": "testAddExtraTasksAndInputWithFreshRun", "index": 1981, "label": 0}
{"input": "@Test(expected = ParseException.class)\n  public void testInvalidate() throws Exception {\n    t1.validate(\"invalid();\", new HashSet<>());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelThreadTest.java", "function_name": "testInvalidate", "index": 1982, "label": 0}
{"input": "public static Map<String, Task> getTaskMap(Workflow workflow) {\n    return workflow.getTasks().stream()\n        .filter(t -> !TaskType.TASK_TYPE_EXCLUSIVE_JOIN.equals(t.getTaskType()) && t.getSeq() >= 0)\n        .collect(\n            Collectors.toMap(\n                Task::getReferenceTaskName,\n                Function.identity(),\n                \n                (task1, task2) -> task2));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "getTaskMap", "index": 1983, "label": 0}
{"input": "public final void StatementExpression() throws ParseException {\n    if (jj_2_8(2147483647)) {\n      Assignment();\n    } else {\n      switch (jj_nt.kind) {\n        case FALSE:\n        case NEW:\n        case NULL:\n        case TRUE:\n        case INTEGER_LITERAL:\n        case FLOATING_POINT_LITERAL:\n        case STRING_LITERAL:\n        case IDENTIFIER:\n        case LPAREN:\n          {\n            PrimaryExpression();\n            break;\n          }\n        default:\n          jj_la1[39] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "StatementExpression", "index": 1984, "label": 0}
{"input": "@Override\n    public void afterWorkbookDispose(WriteWorkbookHolder writeWorkbookHolder) {\n        Assertions.assertEquals(1L, beforeCellCreate);\n        Assertions.assertEquals(1L, afterCellCreate);\n        Assertions.assertEquals(1L, afterCellDataConverted);\n        Assertions.assertEquals(1L, afterCellDispose);\n        Assertions.assertEquals(1L, beforeRowCreate);\n        Assertions.assertEquals(1L, afterRowCreate);\n        Assertions.assertEquals(1L, afterRowDispose);\n        Assertions.assertEquals(1L, beforeSheetCreate);\n        Assertions.assertEquals(1L, afterSheetCreate);\n        Assertions.assertEquals(1L, beforeWorkbookCreate);\n        Assertions.assertEquals(1L, afterWorkbookCreate);\n        Assertions.assertEquals(0L, afterWorkbookDispose);\n        afterWorkbookDispose++;\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/handler/WriteHandler.java", "function_name": "afterWorkbookDispose", "index": 1985, "label": 0}
{"input": "private boolean jj_3R_68() {\n    if (jj_scan_token(MINUS)) return true;\n    if (jj_3R_59()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_68", "index": 1986, "label": 0}
{"input": "private void initializeOutputSignals(\n      Map<String, Map<String, Object>> allStepOutputData,\n      Step stepDefinition,\n      WorkflowSummary workflowSummary,\n      StepRuntimeSummary runtimeSummary) {\n    Map<String, Parameter> allStepParams = runtimeSummary.getParams();\n    Map<StepOutputsDefinition.StepOutputType, StepOutputsDefinition> stepOutputs =\n        stepDefinition.getOutputs();\n    if (stepOutputs != null) {\n      Map<StepOutputsDefinition.StepOutputType, List<MapParameter>> stepOutputsParameters =\n          ParamsManager.getStepOutputsParameters(stepOutputs.values());\n      if (!stepOutputsParameters.isEmpty()) {\n        paramEvaluator.evaluateStepDependenciesOrOutputsParameters(\n            allStepOutputData,\n            workflowSummary.getParams(),\n            allStepParams,\n            stepOutputsParameters.values(),\n            runtimeSummary.getStepId());\n        runtimeSummary.initializeOutputs(stepOutputsParameters);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "initializeOutputSignals", "index": 1987, "label": 0}
{"input": "private String createOrUpdateWorkflow(Workflow workflow, String stmt, String methodName) {\n    validateWorkflow(workflow);\n    List<Task> tasks = workflow.getTasks();\n    workflow.setTasks(Collections.emptyList());\n\n    withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                stmt,\n                statement -> {\n                  statement.setString(1, workflow.getWorkflowId());\n                  statement.setString(2, toJson(workflow));\n                }),\n        methodName,\n        \"Failed {} with workflow instance id {}\",\n        methodName,\n        workflow.getWorkflowId());\n\n    workflow.setTasks(tasks);\n    return workflow.getWorkflowId();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "createOrUpdateWorkflow", "index": 1988, "label": 0}
{"input": "public static JSONObject downloadEmojiMd5(String appId, String emojiMd5){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"emojiMd5\",emojiMd5);\r\n        return OkhttpUtil.postJSON(\"/message/downloadEmojiMd5\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/DownloadApi.java", "function_name": "downloadEmojiMd5", "index": 1989, "label": 0}
{"input": "@Override\n    public Map<String, String> queryContactLabelAsMap() {\n        \n        return Optional.ofNullable(queryContactLabelAsList())\n                .map(headImgUrls -> headImgUrls.stream().collect(Collectors.toMap(ContactLabel::getLabelId, ContactLabel::getLabelName)))\n                .orElse(Collections.emptyMap());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ContactLabelRepositoryImpl.java", "function_name": "queryContactLabelAsMap", "index": 1990, "label": 0}
{"input": "@Test\n  public void isNameUsingReservedSuffix() {\n    Set<ConstraintViolation<TestName>> violations = validator.validate(new TestName(\"foo_maestro\"));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestName> violation = violations.iterator().next();\n    assertEquals(\"foo_maestro\", violation.getInvalidValue());\n    assertEquals(\n        \"[maestro name] cannot end with reserved suffix: _maestro - rejected value is [foo_maestro]\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/MaestroNameConstraintTest.java", "function_name": "isNameUsingReservedSuffix", "index": 1991, "label": 0}
{"input": "public Long save() {\n\t\t\n\t\tif (this.id == null) {\n\t\t\t\n\t\t\tlong timestamp = System.currentTimeMillis();\n\t\t\tint random = (int) (Math.random() * 1000000);\n\t\t\tthis.id = timestamp * 1000 + random;\n\t\t}\n\t\treturn this.id;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/recorder/entity/ThinkActRecord.java", "function_name": "save", "index": 1992, "label": 0}
{"input": "@Test\n  public void testWorkflowWithWorkflowTimeSubscriptionsFailsOnCronService() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID4);\n    Mockito.doThrow(\n            new MaestroRuntimeException(\n                MaestroRuntimeException.Code.INTERNAL_ERROR, \"test error message\"))\n        .when(triggerClient)\n        .upsertTriggerSubscription(Mockito.eq(wfd.getWorkflow()), any(), any());\n    AssertHelper.assertThrows(\n        \"expects mockito test error\",\n        MaestroRuntimeException.class,\n        \"test error message\",\n        () ->\n            workflowDao.addWorkflowDefinition(\n                wfd, wfd.getPropertiesSnapshot().extractProperties()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testWorkflowWithWorkflowTimeSubscriptionsFailsOnCronService", "index": 1993, "label": 0}
{"input": "public final void ArgumentList() throws ParseException {\n    Expression();\n    label_12:\n    while (true) {\n      switch (jj_nt.kind) {\n        case COMMA:\n          {;\n            break;\n          }\n        default:\n          jj_la1[31] = jj_gen;\n          break label_12;\n      }\n      jj_consume_token(COMMA);\n      Expression();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "ArgumentList", "index": 1994, "label": 0}
{"input": "private ExpressionNode doVisitNewExprWithExplicitParent(NewExpr newExpr, Type type) {\n    var parentType = visitType(type);\n    var expr =\n        doVisitObjectBody(\n            newExpr.getBody(),\n            new GetParentForTypeNode(\n                createSourceSection(newExpr),\n                parentType,\n                symbolTable.getCurrentScope().getQualifiedName()));\n    if (type instanceof DeclaredType declaredType && !declaredType.getArgs().isEmpty()) {\n      return new TypeCastNode(parentType.getSourceSection(), expr, parentType);\n    }\n    return expr;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitNewExprWithExplicitParent", "index": 1995, "label": 0}
{"input": "@Test\n  public void testValidateIdentityForForeachRun() {\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .initiator(UpstreamInitiator.withType(Initiator.Type.FOREACH))\n            .build();\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setWorkflowId(\"foo\");\n    instance.setWorkflowInstanceId(2);\n    runRequest.validateIdentity(instance);\n\n    instance.setWorkflowId(\"foo1\");\n    AssertHelper.assertThrows(\n        \"Mismatch instance identity\",\n        IllegalArgumentException.class,\n        \"Cannot restart a FOREACH iteration \",\n        () -> runRequest.validateIdentity(instance));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testValidateIdentityForForeachRun", "index": 1996, "label": 0}
{"input": "private ParserError unexpectedChar(String got, String option1, String option2, String option3) {\n    return lexError(\"unexpectedCharacter3\", got, option1, option2, option3);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "unexpectedChar", "index": 1997, "label": 0}
{"input": "@Test\n  public void testExtendOwnership() {\n    MessageDto enqueued = dao.enqueue(jobEvent, 123456789L);\n    MessageDto extended = dao.extendOwnership(enqueued, 223456789L);\n    assertEquals(223456789L, extended.ownedUntil());\n    dao.remove(extended);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/dao/MaestroQueueDaoTest.java", "function_name": "testExtendOwnership", "index": 1998, "label": 0}
{"input": "private void syncPendingUpdates(\n      Task task,\n      WorkflowSummary workflowSummary,\n      StepRuntimeSummary runtimeSummary,\n      boolean thrown) {\n    StepInstance stepInstance = createStepInstance(task, workflowSummary, runtimeSummary);\n    Optional<Details> result = stepSyncManager.sync(stepInstance, workflowSummary, runtimeSummary);\n    if (result.isPresent()) {\n      runtimeSummary.addTimeline(\n          TimelineLogEvent.warn(\"Failed to sync due to error: \" + result.get()));\n      if (thrown) {\n        throw new MaestroRetryableError(\n            \"Failed to sync data when the step %s is terminating due to error %s.\",\n            runtimeSummary.getIdentity(), result.get());\n      }\n    } else {\n      runtimeSummary.cleanUp();\n      \n      deriveTaskStatus(task, runtimeSummary);\n    }\n    task.getOutputData().put(Constants.STEP_RUNTIME_SUMMARY_FIELD, runtimeSummary);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "syncPendingUpdates", "index": 1999, "label": 0}
{"input": "private boolean isMatchingPrefix(String version1, String version2) {\n        return version1.substring(0, 7).equals(version2.substring(0, 7));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "aa9e59e82a10caab66c0d90f586f8c00f5aa95e7", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/WeChatServiceImpl.java", "function_name": "isMatchingPrefix", "index": 2000, "label": 0}
{"input": "public RewriteAndMultiQueryNode(ChatClient.Builder rewriteAndMultiQueryAgentBuilder) {\n\t\t\n\t\tthis.queryTransformer = RewriteQueryTransformer.builder()\n\t\t\t.chatClientBuilder(rewriteAndMultiQueryAgentBuilder)\n\t\t\t.build();\n\n\t\t\n\t\tthis.queryExpander = MultiQueryExpander.builder()\n\t\t\t.chatClientBuilder(rewriteAndMultiQueryAgentBuilder)\n\t\t\t.includeOriginal(true)\n\t\t\t.numberOfQueries(3)\n\t\t\t.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "781dd77480081b3a51f41ca6d6c8778b97867ea8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/node/RewriteAndMultiQueryNode.java", "function_name": "RewriteAndMultiQueryNode", "index": 2001, "label": 0}
{"input": "@Test\n  public void testGetRequester() {\n    RunRequest runRequest =\n        RunRequest.builder()\n            .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n            .requester(User.create(\"tester\"))\n            .build();\n    Assert.assertEquals(\"tester\", runRequest.getRequester().getName());\n\n    runRequest =\n        RunRequest.builder()\n            .initiator(UpstreamInitiator.withType(Initiator.Type.FOREACH))\n            .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n            .build();\n    Assert.assertNull(runRequest.getRequester());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testGetRequester", "index": 2002, "label": 0}
{"input": "public PropertiesUpdate(WorkflowPropertiesUpdateRequest request) {\n    this.resetRunStrategyRule = request.isResetRunStrategyRule();\n    this.resetWorkflowConcurrency = request.isResetWorkflowConcurrency();\n    this.resetStepConcurrency = request.isResetStepConcurrency();\n    this.type = Type.UPDATE_PROPERTIES;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d806f867065a50f424833bfc501c773567595d", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/PropertiesUpdate.java", "function_name": "PropertiesUpdate", "index": 2003, "label": 0}
{"input": "@Test\n  public void testGetWorkflowInstanceView() {\n    instanceDao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.FAILED, \"kill the test\");\n    wfi.setWorkflowUuid(\"test-uuid\");\n    wfi.setWorkflowRunId(0L);\n    wfi.setRunConfig(new RunConfig());\n    wfi.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_INCOMPLETE);\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(1, res);\n    assertEquals(1, wfi.getWorkflowInstanceId());\n    assertEquals(2, wfi.getWorkflowRunId());\n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n\n    WorkflowInstance instanceRun =\n        instanceDao.getWorkflowInstance(\n            wfi.getWorkflowId(), wfi.getWorkflowInstanceId(), Constants.LATEST_INSTANCE_RUN, true);\n    instanceRun.setModifyTime(null);\n    WorkflowInstanceAggregatedInfo aggregatedInfo =\n        AggregatedViewHelper.computeAggregatedView(wfi, true);\n    wfi.setAggregatedInfo(aggregatedInfo);\n    assertEquals(wfi, instanceRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetWorkflowInstanceView", "index": 2004, "label": 0}
{"input": "protected void simulateHumanBehavior(ElementHandle element) {\n\t\ttry {\n\t\t\t\n\t\t\tThread.sleep(new Random().nextInt(500) + 200);\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/actions/BrowserAction.java", "function_name": "simulateHumanBehavior", "index": 2005, "label": 0}
{"input": "public List<Annotation> getAnnotations() {\n    return (List<Annotation>) children.subList(1, modifiersOffset);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeAlias.java", "function_name": "getAnnotations", "index": 2006, "label": 0}
{"input": "public void setDouble(String name, double value) {\n        sharedPreferences.edit().putLong(name, Double.doubleToRawLongBits(value)).apply();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/FileManager.java", "function_name": "setDouble", "index": 2007, "label": 0}
{"input": "protected <T> EnumMap<WorkflowInstance.Status, T> singletonEnumMap(\n      WorkflowInstance.Status status, T val) {\n    EnumMap<WorkflowInstance.Status, T> map = new EnumMap<>(WorkflowInstance.Status.class);\n    map.put(status, val);\n    return map;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/testFixtures/java/com/netflix/maestro/MaestroBaseTest.java", "function_name": "singletonEnumMap", "index": 2008, "label": 0}
{"input": "private void validateStepBreakpointRequest(StepBreakpointCreateRequest request) {\n    Checks.checkTrue(\n        request.getWorkflowVersion() == null\n            && request.getWorkflowInstanceId() == null\n            && request.getWorkflowRun() == null\n            && request.getStepAttemptId() == null,\n        \"workflowVersion, workflowInstanceId, workflowRunId or stepAttemptId can't be specified for\"\n            + \" step breakpoint. Request [%s]\",\n        request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8e3a6f4fa3173239c2832015f499f6768146f25d", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepBreakpointController.java", "function_name": "validateStepBreakpointRequest", "index": 2009, "label": 0}
{"input": "@Override\n    public Row createRow(int rownum) {\n        \n        initSheet();\n        \n        lastRowIndex++;\n        assert rownum == lastRowIndex : \"csv create row must be in order.\";\n        printData();\n        CsvRow csvRow = new CsvRow(csvWorkbook, this, rownum);\n        rowCache.add(csvRow);\n        return csvRow;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvSheet.java", "function_name": "createRow", "index": 2010, "label": 0}
{"input": "@Bean(initMethod = \"init\", destroyMethod = \"shutdown\")\n  public FlowExecutor flowExecutor(ExecutionContext executionContext) {\n    LOG.info(\"Creating maestro flowExecutor within Spring boot...\");\n    return new FlowExecutor(executionContext);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroFlowConfiguration.java", "function_name": "flowExecutor", "index": 2011, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallGetInvalidArgs() {\n    orig.call(\"get\", new SelType[] {});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallGetInvalidArgs", "index": 2012, "label": 0}
{"input": "public void addFinishedTask(Task task) {\n    Checks.checkTrue(task.isTerminal(), \"task [%s] must be in the terminal state\", task);\n    try {\n      writeLock.lock();\n      finishedTasks.put(task.referenceTaskName(), task);\n    } finally {\n      writeLock.unlock();\n    }\n    runningTasks.remove(task.referenceTaskName());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/models/Flow.java", "function_name": "addFinishedTask", "index": 2013, "label": 0}
{"input": "@Test\n  public void testProcessWithMatch() {\n    SignalInstance instance = new SignalInstance();\n    instance.setSeqId(12);\n    Supplier<SignalInstance> messageSupplier = () -> instance;\n    when(brokerDao.getSubscribedTriggers(any())).thenReturn(List.of(new SignalTriggerMatch()));\n    processor.process(messageSupplier);\n    verify(producer, times(1)).push(any(SignalTriggerMatch.class));\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(MetricConstants.SIGNAL_TRIGGER_MATCH_FOUND, SignalInstanceProcessor.class)\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalInstanceProcessorTest.java", "function_name": "testProcessWithMatch", "index": 2014, "label": 0}
{"input": "private void setStylesTable(XlsxReadWorkbookHolder xlsxReadWorkbookHolder, XSSFReader xssfReader) {\n        try {\n            xlsxReadWorkbookHolder.setStylesTable(xssfReader.getStylesTable());\n        } catch (Exception e) {\n            log.warn(\n                    \"Currently excel cannot get style information, but it doesn't affect the data analysis.You can try to\"\n                            + \" save the file with office again or ignore the current error.\", e);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/XlsxSaxAnalyser.java", "function_name": "setStylesTable", "index": 2015, "label": 0}
{"input": "private int jjStopAtPos(int pos, int kind) {\n    jjmatchedKind = kind;\n    jjmatchedPos = pos;\n    return pos + 1;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjStopAtPos", "index": 2016, "label": 0}
{"input": "public static JSONObject setFriendRemark(String appId,String wxid,String remark){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxid\",wxid);\r\n        param.put(\"onlyChat\",remark);\r\n        return OkhttpUtil.postJSON(\"/contacts/setFriendRemark\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/ContactApi.java", "function_name": "setFriendRemark", "index": 2017, "label": 0}
{"input": "private TypeNode getTypeNode() {\n      if (typeNode == null) {\n        CompilerDirectives.transferToInterpreterAndInvalidate();\n        typeNode = new UInt8TypeAliasTypeNode();\n      }\n      return typeNode;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/base/ListNodes.java", "function_name": "getTypeNode", "index": 2018, "label": 0}
{"input": "private static Expr parseExpressionNode(String expression, Source source) {\n    try {\n      return new Parser().parseExpressionInput(expression);\n    } catch (ParserError e) {\n      throw VmUtils.toVmException(e, source, REPL_TEXT);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java", "function_name": "parseExpressionNode", "index": 2019, "label": 0}
{"input": "@Override\n  public ExternalModuleResolver getModuleResolver(long evaluatorId)\n      throws ExternalReaderProcessException {\n    return ExternalModuleResolver.of(getTransport(), evaluatorId);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "52a86d3f329d264b9b9a8e0f9f3a6df39165bbfb", "file_path": "pkl-core/src/main/java/org/pkl/core/externalreader/ExternalReaderProcessImpl.java", "function_name": "getModuleResolver", "index": 2020, "label": 0}
{"input": "private Map<String, ParamDefinition> createSubworkflowRunParam(\n      WorkflowSummary workflowSummary, Step step, StepRuntimeSummary runtimeSummary) {\n    Map<String, ParamDefinition> runParams = new LinkedHashMap<>();\n\n    if (!ObjectHelper.valueOrDefault(\n        ((SubworkflowStep) step).getExplicitParams(), Defaults.DEFAULT_SUBWORKFLOW_EXPLICIT_FLAG)) {\n      \n      workflowSummary.getParams().forEach((k, v) -> runParams.put(k, v.toDefinition()));\n    } else {\n      \n      alwaysPassDownParamNames.forEach(\n          name -> {\n            Parameter param = workflowSummary.getParams().get(name);\n            if (param != null) {\n              runParams.put(name, param.toDefinition());\n            }\n          });\n    }\n    \n    step.getParams()\n        .forEach((k, v) -> runParams.put(k, runtimeSummary.getParams().get(k).toDefinition()));\n    \n    runParams.remove(SUBWORKFLOW_ID_PARAM_NAME);\n    runParams.remove(SUBWORKFLOW_VERSION_PARAM_NAME);\n    return runParams;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/SubworkflowStepRuntime.java", "function_name": "createSubworkflowRunParam", "index": 2021, "label": 0}
{"input": "public void resetConfig(String configPath) {\n\t\tConfigEntity entity = configRepository.findByConfigPath(configPath)\n\t\t\t.orElseThrow(() -> new IllegalArgumentException(\"Config not found: \" + configPath));\n\n\t\tentity.setConfigValue(entity.getDefaultValue());\n\t\tconfigRepository.save(entity);\n\n\t\t\n\t\tMap<String, Object> configBeans = applicationContext.getBeansWithAnnotation(ConfigurationProperties.class);\n\t\tconfigBeans.values().forEach(bean -> updateBeanConfig(bean, configPath, entity.getDefaultValue()));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/config/ConfigService.java", "function_name": "resetConfig", "index": 2022, "label": 0}
{"input": "public ReadRowHolder(Integer rowIndex, RowTypeEnum rowType, GlobalConfiguration globalConfiguration,\n            Map<Integer, Cell> cellMap) {\n        this.rowIndex = rowIndex;\n        this.rowType = rowType;\n        this.globalConfiguration = globalConfiguration;\n        this.cellMap = cellMap;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/metadata/holder/ReadRowHolder.java", "function_name": "ReadRowHolder", "index": 2023, "label": 0}
{"input": "public static String getImgDirWithName(String wxId, String fileName) {\n        \n        String userDir = System.getProperty(\"user.dir\");\n        \n        String separator = FileSystems.getDefault().getSeparator();\n        \n        return userDir + separator + DATA + separator + DB + separator + wxId + separator + IMG + separator + fileName;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "54daa418d08cc5ecc407dc99081979090b75c6e9", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getImgDirWithName", "index": 2024, "label": 0}
{"input": "public static String getDSName(String wxId, String dbName) {\n        return wxId + \"#\" + dbName;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a65dda542a30d994605d8dc1d48cb35ce663d41", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DSNameUtil.java", "function_name": "getDSName", "index": 2025, "label": 0}
{"input": "private String listNamespaces() {\n        Program program = getCurrentProgram();\n        Set<String> namespaces = new HashSet<>();\n        for (Symbol symbol : program.getSymbolTable().getAllSymbols(true)) {\n            Namespace ns = symbol.getParentNamespace();\n            if (ns != null && !(ns instanceof GlobalNamespace)) {\n                namespaces.add(ns.getName());\n            }\n        }\n        return String.join(\"\\n\", namespaces);\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "listNamespaces", "index": 2026, "label": 0}
{"input": "@Test\n  public void testMergeUpstreamRestartWithMutableOnStart() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'default_value','mode': 'MUTABLE_ON_START', 'meta': {'source': 'SYSTEM_DEFAULT'}}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'workflow_default_param': {'type': 'STRING','value': 'parent_wf_defined_value', 'mode': 'MUTABLE', 'meta': {'source': 'DEFINITION'}}}\");\n\n    AssertHelper.assertThrows(\n        \"throws exception when a non-upstream source tries to merge param with less strict mode\",\n        MaestroValidationException.class,\n        \"Cannot modify param with mode [MUTABLE_ON_START] for parameter [workflow_default_param]\",\n        () -> ParamsMergeHelper.mergeParams(allParams, paramsToMerge, upstreamRestartMergeContext));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeUpstreamRestartWithMutableOnStart", "index": 2027, "label": 0}
{"input": "public GoogleSearchInput(String query, Integer numResults) {\n\t\t\tthis.query = query;\n\t\t\tthis.numResults = numResults;\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b519b7c9cc1f88dafec21315dbc4bc5cb5ac4fe1", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/searchAPI/GoogleSearch.java", "function_name": "GoogleSearchInput", "index": 2028, "label": 0}
{"input": "@Override\n    public void onClick() {\n        Tile tile = getQsTile();\n        if (tile == null) {\n            return; \n        }\n\n        if (tile.getState() == Tile.STATE_ACTIVE) {\n            OblivionVpnService.stopVpnService(this);\n            return;\n        }\n\n        if (OblivionVpnService.prepare(this) != null) {\n            Toast.makeText(this, \"لطفا یک‌بار از درون اپلیکیشن متصل شوید\", Toast.LENGTH_LONG).show();\n            return;\n        }\n\n        OblivionVpnService.startVpnService(this);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "35cda066c19f70d130a9bc5ff4737de5c55f1b59", "file_path": "app/src/main/java/org/bepass/oblivion/QuickStartService.java", "function_name": "onClick", "index": 2029, "label": 0}
{"input": "@Test\n    public void cglib() {\n        TempWriteData tempWriteData = new TempWriteData();\n        tempWriteData.setName(\"1\");\n        tempWriteData.setName1(\"2\");\n        BeanMap beanMap = BeanMapUtils.create(tempWriteData);\n        \n        log.info(\"d1{}\", beanMap.get(\"name\"));\n        log.info(\"d2{}\", beanMap.get(\"name1\"));\n        \n        TempWriteData tempWriteData2 = new TempWriteData();\n        \n        Map<String, String> map = new HashMap<>();\n        map.put(\"name\", \"zs\");\n        BeanMap beanMap2 = BeanMapUtils.create(tempWriteData2);\n        beanMap2.putAll(map);\n        log.info(\"3{}\", tempWriteData2.getName());\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/write/TempWriteTest.java", "function_name": "cglib", "index": 2030, "label": 0}
{"input": "public UnresolvedPropertyNode(\n      VmLanguage language,\n      SourceSection sourceSection,\n      SourceSection headerSection,\n      SourceSection propertyNameSection,\n      FrameDescriptor descriptor,\n      SourceSection @Nullable [] docComment,\n      ExpressionNode[] annotationNodes,\n      int modifiers,\n      Identifier name,\n      String qualifiedName,\n      @Nullable UnresolvedTypeNode unresolvedTypeNode,\n      @Nullable ExpressionNode bodyNode) {\n\n    super(\n        language,\n        sourceSection,\n        headerSection,\n        descriptor,\n        docComment,\n        annotationNodes,\n        modifiers,\n        name,\n        qualifiedName);\n    this.propertyNameSection = propertyNameSection;\n    this.unresolvedTypeNode = unresolvedTypeNode;\n    this.bodyNode = bodyNode;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/member/UnresolvedPropertyNode.java", "function_name": "UnresolvedPropertyNode", "index": 2031, "label": 0}
{"input": "public RrfHybridElasticsearchRetriever(RestClient restClient, EmbeddingModel embeddingModel, String indexName,\n\t\t\tRagProperties.Elasticsearch.Hybrid hybrid) {\n\t\tthis.restClient = restClient;\n\t\tthis.embeddingModel = embeddingModel;\n\t\tthis.indexName = indexName;\n\t\tthis.windowSize = hybrid.getRrfWindowSize();\n\t\tthis.rrfK = hybrid.getRrfRankConstant();\n\t\tthis.bm25Boost = hybrid.getBm25Boost();\n\t\tthis.knnBoost = hybrid.getKnnBoost();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "7533675a36b363cfb0ec6e6ad9adb75a2f6c29f6", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/rag/retriever/RrfHybridElasticsearchRetriever.java", "function_name": "RrfHybridElasticsearchRetriever", "index": 2032, "label": 0}
{"input": "@Override\n  public CompletableFuture<Void> asyncIndexTask(Task task) {\n    \n    return CompletableFuture.completedFuture(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "asyncIndexTask", "index": 2033, "label": 0}
{"input": "@Test\n  public void testExceedsRateLimitWhenNoRateLimitSet() {\n    TaskDef taskDef = createTaskDef(0, 0);\n    Task task = createRunningTestTask(TEST_TASK_ID_1);\n    assertFalse(dao.exceedsRateLimitPerFrequency(task, taskDef));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBRateLimitingDAOTest.java", "function_name": "testExceedsRateLimitWhenNoRateLimitSet", "index": 2034, "label": 0}
{"input": "private FullToken expect(Token type, String errorKey, Object... messageArgs) {\n    if (lookahead != type) {\n      var span = spanLookahead;\n      if (lookahead == Token.EOF || _lookahead.newLinesBetween > 0) {\n        \n        span = prev.span.stopSpan().move(1);\n      }\n      var args = messageArgs;\n      if (errorKey.startsWith(\"unexpectedToken\")) {\n        args = new Object[messageArgs.length + 1];\n        args[0] = lookahead == Token.EOF ? \"EOF\" : _lookahead.text(lexer);\n        System.arraycopy(messageArgs, 0, args, 1, messageArgs.length);\n      }\n      throw new ParserError(ErrorMessages.create(errorKey, args), span);\n    }\n    return next();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "expect", "index": 2035, "label": 0}
{"input": "@Override\n  public Map<String, Map<String, Map<String, Long>>> queuesDetailVerbose() {\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBQueueDAO.java", "function_name": "queuesDetailVerbose", "index": 2036, "label": 0}
{"input": "private static SqsProperties getSqsProperties() {\n    SqsProperties sqsProperties = new SqsProperties();\n    sqsProperties.setTerminateInstancesJobQueueUrl(TERMINATE_INSTANCES_JOB_QUEUE_URL);\n    sqsProperties.setTerminateThenRunInstanceJobQueueUrl(TERMINATE_THEN_RUN_INSTANCE_JOB_QUEUE_URL);\n    sqsProperties.setPublishJobQueueUrl(PUBLISH_JOB_QUEUE_URL);\n    sqsProperties.setStartWorkflowJobQueueUrl(START_WORKFLOW_JOB_QUEUE_URL);\n    sqsProperties.setRunWorkflowInstancesJobQueueUrl(RUN_WORKFLOW_INSTANCES_JOB_QUEUE_URL);\n    sqsProperties.setDeleteWorkflowJobQueueUrl(DELETE_WORKFLOW_JOB_QUEUE_URL);\n    sqsProperties.setStepWakeUpJobQueueUrl(STEP_INSTANCE_ACTION_JOB_QUEUE_URL);\n    return sqsProperties;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisherTest.java", "function_name": "getSqsProperties", "index": 2037, "label": 0}
{"input": "@Specialization\n  protected Object evalMapping(\n      VirtualFrame frame,\n      VmMapping receiver,\n      @Cached(\"create()\") @Shared(\"callNode\") IndirectCallNode callNode) {\n    var result = executeBody(frame);\n    return VmUtils.shouldRunTypeCheck(frame)\n        ? receiver.executeTypeCasts(result, VmUtils.getOwner(frame), callNode, null, null)\n        : result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/member/ElementOrEntryNode.java", "function_name": "evalMapping", "index": 2038, "label": 0}
{"input": "private Step getStepDefinition(String stepId, WorkflowSummary workflowSummary) {\n    return workflowSummary.getStepMap().get(stepId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "getStepDefinition", "index": 2039, "label": 0}
{"input": "public BraveSearchService(WebClientTool webClientTool, JsonParseTool jsonParseTool) {\n\t\tthis.webClientTool = webClientTool;\n\t\tthis.jsonParseTool = jsonParseTool;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-bravesearch/src/main/java/com/alibaba/cloud/ai/toolcalling/bravesearch/BraveSearchService.java", "function_name": "BraveSearchService", "index": 2040, "label": 0}
{"input": "private static void putAllConverter(Converter<?> converter) {\n        allConverter.put(ConverterKeyBuild.buildKey(converter.supportJavaTypeKey(), converter.supportExcelTypeKey()),\n                converter);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/converters/DefaultConverterLoader.java", "function_name": "putAllConverter", "index": 2041, "label": 0}
{"input": "public LogsTab(SwingMainWindow parent) {\n            this.parent = parent;\n\n            parent.loggerTextList.setModel(new DefaultListModel<>());\n            parent.loggerTextList.setFont(parent.loggerTextList.getFont().deriveFont(14f));\n            parent.loggerTextList.setCellRenderer(new LogEntryRenderer());\n            parent.loggerTextList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n            parent.loggerTextList.setLayoutOrientation(JList.VERTICAL);\n            parent.loggerTextList.setFixedCellHeight(-1);\n        }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swing/SwingMainWindow.java", "function_name": "LogsTab", "index": 2042, "label": 0}
{"input": "@Test\n  public void testAddForEachBreakpoint() {\n    when(workflowDao.getWorkflowDefinition(anyString(), anyString())).thenReturn(wfd);\n    String hashedInternalId = IdHelper.hashKey(INTERNAL_ID);\n    StepBreakpoint bp =\n        maestroStepBreakpointDao.addStepBreakpoint(\n            TEST_WORKFLOW_ID2,\n            TEST_WORKFLOW_VERSION1,\n            TEST_WORKFLOW_INSTANCE1,\n            Constants.MATCH_ALL_RUNS,\n            TEST_FOREACH_STEP_ID4,\n            Constants.MATCH_ALL_STEP_ATTEMPTS,\n            TEST_USER);\n    assertEquals(\n        String.format(\"%s_%s_\", Constants.FOREACH_INLINE_WORKFLOW_PREFIX, hashedInternalId),\n        bp.getWorkflowId());\n    assertEquals(TEST_FOREACH_STEP_ID4, bp.getStepId());\n    assertEquals(TEST_WORKFLOW_INSTANCE1, bp.getWorkflowInstanceId().longValue());\n    assertEquals(TEST_WORKFLOW_VERSION1, bp.getWorkflowVersionId().longValue());\n    assertNull(bp.getWorkflowRunId());\n    assertNull(bp.getStepAttemptId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDaoTest.java", "function_name": "testAddForEachBreakpoint", "index": 2043, "label": 0}
{"input": "@Test\n  public void testCalls() {\n    SelType res = orig.call(\"toString\", new SelType[0]);\n    assertEquals(\"STRING: 1\", res.type() + \": \" + res);\n    res = orig.call(\"toString\", new SelType[] {SelLong.of(12)});\n    assertEquals(\"STRING: 12\", res.type() + \": \" + res);\n    res = orig.call(\"valueOf\", new SelType[] {SelLong.of(123)});\n    assertEquals(\"LONG: 123\", res.type() + \": \" + res);\n    res = orig.call(\"valueOf\", new SelType[] {SelString.of(\"STRING: 1\"0)});\n    assertEquals(\"LONG: 123\", res.type() + \": \" + res);\n    res = orig.call(\"STRING: 1\"3, new SelType[] {SelString.of(\"STRING: 1\"0)});\n    assertEquals(\"LONG: 123\", res.type() + \": \" + res);\n    res = orig.call(\"STRING: 1\"7, new SelType[0]);\n    assertEquals(\"STRING: 1\"8, res.type() + \": \" + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelLongTest.java", "function_name": "testCalls", "index": 2044, "label": 0}
{"input": "@JsonIgnore\n    public boolean isInline() {\n      return workflowId.startsWith(Constants.MAESTRO_PREFIX);\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/initiator/UpstreamInitiator.java", "function_name": "isInline", "index": 2045, "label": 0}
{"input": "@Test\n\t@DisplayName(\"Tool-Calling Test\")\n\t@EnabledIfEnvironmentVariable(named = AliyunAiSearchConstants.API_KEY_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\t@EnabledIfEnvironmentVariable(named = AliyunAiSearchConstants.BASE_URL_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\tpublic void testAliyunAiSearch() {\n\t\tvar resp = aliyunAiSearchService.apply(AliyunAiSearchService.Request.simplyQuery(\"Spring AI Alibaba\"));\n\t\tassert resp != null && resp.results() != null;\n\t\tlog.info(\"results: \" + resp.results());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-aliyunaisearch/src/test/java/com/alibaba/cloud/ai/toolcalling/aliyunaisearch/AliyunAiSearchTest.java", "function_name": "testAliyunAiSearch", "index": 2046, "label": 0}
{"input": "private StepRuntime.State customizeArtifactsForJobStatus(KubernetesStepContext context) {\n    if (context.getJobResult().jobStatus().isTerminal()) {\n      KubernetesArtifact artifact = context.getKubernetesArtifact();\n      if (artifact != null) {\n        artifact.setExecutionOutput(runtimeExecutor.getJobLog(artifact.getJobId()));\n        context.getPendingArtifacts().put(Artifact.Type.KUBERNETES.key(), artifact);\n      }\n    }\n    return context.getJobResult().jobStatus();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntime.java", "function_name": "customizeArtifactsForJobStatus", "index": 2047, "label": 0}
{"input": "@Override\n    public Map<String, String> getContactNickname(List<String> userNames) {\n        \n        LambdaQueryWrapper<Contact> wrapper = Wrappers.<Contact>lambdaQuery()\n                .select(Contact::getUserName, Contact::getNickName, Contact::getRemark)\n                .in(Contact::getUserName, userNames);\n        \n        Map<String, String> contactMap = Optional.ofNullable(super.list(wrapper))\n                .map(contacts -> contacts.stream().collect(Collectors.toMap(Contact::getUserName, contact -> StrUtil.isNotBlank(contact.getRemark()) ? contact.getRemark() : contact.getNickName())))\n                .orElse(Collections.emptyMap());\n\n        return userNames.stream().collect(Collectors.toMap(item -> item, item -> {\n            String nickName = contactMap.get(item);\n            \n            if (StrUtil.isBlank(nickName)) {\n                return \"未知用户\";\n            }\n            \n            return nickName;\n        }));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ContactRepositoryImpl.java", "function_name": "getContactNickname", "index": 2048, "label": 0}
{"input": "@Test\n  public void testSerdeWithSuccessWithin() throws Exception {\n    AlertingTypeConfig config = new AlertingTypeConfig();\n    expected.getTypeConfigs().put(SUCCESS_WITHIN, config);\n    config.setDurationMinutes(2400);\n    config.setEmails(Collections.singleton(\"alertconfig_successwithin@netflix.com\"));\n    config.setPagerduties(Collections.singleton(\"successwithin_pd\"));\n\n    final Alerting reparsed = MAPPER.readValue(MAPPER.writeValueAsString(expected), Alerting.class);\n    assertEquals(expected, reparsed);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/AlertingTest.java", "function_name": "testSerdeWithSuccessWithin", "index": 2049, "label": 0}
{"input": "boolean dequeRetryAction(String taskRef) {\n    var action = new Action.FlowTaskRetry(taskRef);\n    return scheduledActions.containsKey(action)\n        && !scheduledActions.get(action).isDone()\n        && scheduledActions.get(action).cancel(false);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "dequeRetryAction", "index": 2050, "label": 0}
{"input": "private int[] startFirstOnlyInstances(\n      Connection conn, String workflowId, List<WorkflowInstance> instances) throws SQLException {\n    InstanceRunUuid runningOne = getNonTerminalInstance(conn, workflowId);\n    return startFirstOrLastOnlyInstances(conn, runningOne, instances, null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "startFirstOnlyInstances", "index": 2051, "label": 0}
{"input": "public ReadExpr(Expr expr, ReadType readType, Span span) {\n      super(span, List.of(expr));\n      this.readType = readType;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "ReadExpr", "index": 2052, "label": 0}
{"input": "public TimelineEvent toTimelineEvent() {\n    if (reason == null) {\n      return TimelineLogEvent.info(\n          \"User [%s] take action [%s] on the step\", user.getName(), action.name());\n    }\n    return TimelineLogEvent.info(\n        \"User [%s] take action [%s] on the step due to reason: [%s]\",\n        user.getName(), action.name(), reason);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/StepAction.java", "function_name": "toTimelineEvent", "index": 2053, "label": 0}
{"input": "@Override\n  public void checkSetFactory() {\n    if (accs.get() != null) {\n      super.checkSetFactory();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkSetFactory", "index": 2054, "label": 0}
{"input": "public static String getInlineWorkflowPrefixId(long workflowInternalId) {\n    return String.format(\n        \"%s_%s_\", Constants.FOREACH_INLINE_WORKFLOW_PREFIX, hashKey(workflowInternalId));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/IdHelper.java", "function_name": "getInlineWorkflowPrefixId", "index": 2055, "label": 0}
{"input": "@Test\n  public void isTransitionPredecessorValid() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    StepTransition transition = new StepTransition();\n    transition.setPredecessors(Collections.singletonList(\"bar\"));\n    step.setTransition(transition);\n    Workflow workflow = Workflow.builder().steps(Collections.singletonList(step)).build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\n        \"[workflow step transition] is invalid for step [foo]'s predecessors list [[bar]], which does match computed one [null] based on the DAG\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isTransitionPredecessorValid", "index": 2056, "label": 0}
{"input": "public static String getPermissionPrefix(String moduleName, String businessName) {\n    return StringUtils.format(\"{}:{}\", moduleName, businessName);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "getPermissionPrefix", "index": 2057, "label": 0}
{"input": "@Test\n  public void testRunStatus() throws Exception {\n    WorkflowInstance instance =\n        loadObject(\n            \"fixtures/instances/sample-workflow-instance-succeeded.json\", WorkflowInstance.class);\n    assertEquals(WorkflowInstance.Status.SUCCEEDED, instance.getStatus());\n    assertEquals(WorkflowInstance.Status.SUCCEEDED, instance.getRunStatus());\n    instance.setStatus(WorkflowInstance.Status.FAILED);\n    instance.getRuntimeOverview().setRunStatus(WorkflowInstance.Status.SUCCEEDED);\n    assertEquals(WorkflowInstance.Status.FAILED, instance.getStatus());\n    assertEquals(WorkflowInstance.Status.SUCCEEDED, instance.getRunStatus());\n    assertEquals(12345, instance.getInternalId().longValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/WorkflowInstanceTest.java", "function_name": "testRunStatus", "index": 2058, "label": 0}
{"input": "@Test\n  public void testFlowTerminated() {\n    when(flow.getStatus()).thenReturn(Flow.Status.FAILED);\n    statusListener.onFlowTerminated(flow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowTerminated\",\n                \"status\",\n                \"FAILED\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testFlowTerminated", "index": 2059, "label": 0}
{"input": "@Test\n  public void testTerminateWorkflowInstancesUuidNotMatchException() {\n    when(instance1.getStatus()).thenReturn(WorkflowInstance.Status.CREATED);\n    when(instance1.getExecutionId()).thenReturn(\"exe1\");\n    when(instance1.getWorkflowUuid()).thenReturn(\"uuid2\");\n    AssertHelper.assertThrows(\n        \"Instance uuid mismatch\",\n        MaestroInternalError.class,\n        \"in job event does not match DB row uuid [uuid2]\",\n        () -> processor.process(() -> jobEvent1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/TerminateThenRunInstanceJobProcessorTest.java", "function_name": "testTerminateWorkflowInstancesUuidNotMatchException", "index": 2060, "label": 0}
{"input": "@Override\n    public String exportChatRoom() {\n        \n        String separator = System.getProperty(\"file.separator\");\n        \n        String filePath = System.getProperty(\"user.dir\") + separator + \"export\";\n        \n        FileUtil.mkdir(filePath);\n        \n        String pathName = filePath + separator + DateUtil.format(DateUtil.date(), \"yyyyMMddHHmmss\") + \"群聊\" + \".xlsx\";\n        \n        EasyExcel.write(pathName, ExportChatRoomVO.class)\n                .sheet(\"sheet1\")\n                .doWrite(() -> {\n                    List<ExportChatRoomVO> exportChatRoomVOS = chatRoomRepository.exportChatRoom();\n                    \n                    for (ExportChatRoomVO exportChatRoomVO : exportChatRoomVOS) {\n                        exportChatRoomVO.setMemberCount(handleMembersCount(exportChatRoomVO.getRoomData()));\n                    }\n                    return exportChatRoomVOS;\n                });\n        \n        return pathName;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ChatRoomServiceImpl.java", "function_name": "exportChatRoom", "index": 2061, "label": 0}
{"input": "public DashscopeChatOptionsBuilder withHttpHeaders(Map<String, String> httpHeaders) {\n      this.options.httpHeaders = httpHeaders;\n      return this;\n    }", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatOptions.java", "function_name": "withHttpHeaders", "index": 2062, "label": 0}
{"input": "@Specialization\n  protected Object evalListing(\n      VirtualFrame frame,\n      VmListing receiver,\n      @Cached(\"create()\") @Shared(\"callNode\") IndirectCallNode callNode) {\n    var result = executeBody(frame);\n    return VmUtils.shouldRunTypeCheck(frame)\n        ? receiver.executeTypeCasts(result, VmUtils.getOwner(frame), callNode, null, null)\n        : result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/member/ElementOrEntryNode.java", "function_name": "evalListing", "index": 2063, "label": 0}
{"input": "@Test\n  public void testPartitionEmptyList() {\n    Assert.assertTrue(ObjectHelper.partitionList(new ArrayList<>(), 3).isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ObjectHelperTest.java", "function_name": "testPartitionEmptyList", "index": 2064, "label": 0}
{"input": "public static JSONObject forwardUrl(String appId, String toWxid, String xml) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"xml\", xml);\r\n        return OkhttpUtil.postJSON(\"/message/forwardUrl\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "forwardUrl", "index": 2065, "label": 0}
{"input": "@Test\n  public void testPushSignalTriggerMatch() {\n    signalTriggerProducer.push(signalTriggerMatch);\n    verify(amazonSqs, times(1)).sendMessage(any());\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_SIGNAL_PUBLISH_SUCCESS_METRIC,\n                SqsSignalQueueProducer.class,\n                \"type\",\n                \"SignalTriggerMatch\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsSignalQueueProducerTest.java", "function_name": "testPushSignalTriggerMatch", "index": 2066, "label": 0}
{"input": "@Test\n\t@DisplayName(\"Tool-Calling Test\")\n\tpublic void testBaiduSearch() {\n\t\tvar resp = baiduSearchService.apply(new BaiduSearchService.Request(\"Spring AI Alibaba\", 10));\n\t\tassert resp != null && resp.results() != null;\n\t\tlog.info(\"results: \" + resp.results());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-baidusearch/src/test/java/com/alibaba/cloud/ai/toolcalling/baidusearch/BaiduSearchTest.java", "function_name": "testBaiduSearch", "index": 2067, "label": 0}
{"input": "private StepInstanceActionResponse createActionResponseFrom(\n      StepInstance instance, StepRuntimeState state, TimelineEvent event) {\n    return StepInstanceActionResponse.builder()\n        .workflowId(instance.getWorkflowId())\n        .workflowInstanceId(instance.getWorkflowInstanceId())\n        .workflowRunId(instance.getWorkflowRunId())\n        .stepId(instance.getStepId())\n        .stepAttemptId(instance.getStepAttemptId())\n        .stepRuntimeState(state)\n        .timelineEvent(event)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDao.java", "function_name": "createActionResponseFrom", "index": 2068, "label": 0}
{"input": "public static JSONObject logOut(String appId) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        return OkhttpUtil.postJSON(\"/login/logout\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "logOut", "index": 2069, "label": 0}
{"input": "private void jjCheckNAdd(int state) {\n    if (jjrounds[state] != jjround) {\n      jjstateSet[jjnewStateCnt++] = state;\n      jjrounds[state] = jjround;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjCheckNAdd", "index": 2070, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidCallArg() {\n    one.call(\"minusYears\", new SelType[] {SelType.NULL});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelJodaDateTimeTest.java", "function_name": "testInvalidCallArg", "index": 2071, "label": 0}
{"input": "@JsonIgnore\n  @VisibleForTesting\n  boolean latestMatched(TimelineEvent event) {\n    if (timelineEvents == null || timelineEvents.isEmpty()) {\n      return false;\n    }\n    return timelineEvents.get(timelineEvents.size() - 1).isIdentical(event);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/Timeline.java", "function_name": "latestMatched", "index": 2072, "label": 0}
{"input": "@Test\n  public void testGetFromStepThrowsErrorWhenInvokedFromWorkflowExecContext() {\n    when(instanceWrapper.isWorkflowParam()).thenReturn(true);\n    AssertHelper.assertThrows(\n        \"Invalid field\",\n        MaestroInternalError.class,\n        \"getFromStep throws an exception fieldName=[step_id]\",\n        () -> paramExtension.getFromStep(Constants.STEP_ID_PARAM));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionTest.java", "function_name": "testGetFromStepThrowsErrorWhenInvokedFromWorkflowExecContext", "index": 2073, "label": 0}
{"input": "public int getMessage2Count() {\n                if (message2Builder_ == null) {\n                    return message2_.size();\n                } else {\n                    return message2Builder_.getCount();\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage2Count", "index": 2074, "label": 0}
{"input": "@Test(expected = UnrecognizedPropertyException.class)\n  public void testInvalidWorkflowDefinition() throws Exception {\n    loadObject(\"fixtures/workflows/definition/sample-invalid-wf.json\", WorkflowDefinition.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowDefinitionTest.java", "function_name": "testInvalidWorkflowDefinition", "index": 2075, "label": 0}
{"input": "public static ReferenceEntity decode(String refKey, String refVal) {\n      String[] part1 = refKey.split(Constants.REFERENCE_DELIMITER);\n      String[] part2 = refVal.split(Constants.REFERENCE_DELIMITER);\n      Checks.checkTrue(\n          part1.length == 2 && part2.length == 1 + part1.length,\n          \"Invalid reference <key, value>: [%s][%s]\",\n          refKey,\n          refVal);\n      return new ReferenceEntity(\n          part1[0],\n          Long.parseLong(part2[0]),\n          Long.parseLong(part1[1]),\n          part2[1],\n          Long.parseLong(part2[2]));\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowRollupOverview.java", "function_name": "decode", "index": 2076, "label": 0}
{"input": "@Test\n    public void encryptExcel() throws Exception {\n        EasyExcel.write(TestFileUtil.createNewFile(\"encryptv2\" + System.currentTimeMillis() + \".xlsx\"),\n                EncryptData.class).password(\"123456\").sheet().doWrite(data());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiEncryptTest.java", "function_name": "encryptExcel", "index": 2077, "label": 0}
{"input": "@Override\n    public CellDataTypeEnum supportExcelTypeKey() {\n        return CellDataTypeEnum.STRING;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "0c6612fbae50f1a40ea26a78875e3903dd10e8bb", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/converter/TimestampStringConverter.java", "function_name": "supportExcelTypeKey", "index": 2078, "label": 0}
{"input": "@Override\n  public String getMessageKey() {\n    if (this.entityType == EntityType.WORKFLOW) {\n      return HashHelper.md5(\n          String.format(\n              \"[%s]_[%s]_[%s]_[%s]_[%s]\",\n              entityType.name(),\n              workflowId,\n              workflowInstanceId,\n              workflowRunId,\n              workflowAction.name()));\n    }\n    return HashHelper.md5(\n        String.format(\n            \"[%s]_[%s]_[%s]_[%s]_[%s]_[%s]_[%s]\",\n            entityType.name(),\n            workflowId,\n            workflowInstanceId,\n            workflowRunId,\n            stepId,\n            stepAttemptId == null ? Constants.LATEST_INSTANCE_RUN : stepAttemptId,\n            stepAction.name()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/jobevents/StepInstanceWakeUpEvent.java", "function_name": "getMessageKey", "index": 2079, "label": 0}
{"input": "@PostMapping(value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE)\n  @Operation(summary = \"Announce a signal\")\n  public SignalInstance announceSignal(@Valid @NotNull @RequestBody SignalCreateRequest request)\n      throws Throwable {\n    SignalInstance instance = brokerDao.addSignal(request);\n    if (instance.getDetails() != null) {\n      throw instance.getDetails().getCause();\n    }\n    return instance;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/SignalController.java", "function_name": "announceSignal", "index": 2080, "label": 0}
{"input": "public static String getDicts(GenTable genTable) {\n    List<GenTableColumn> columns = genTable.getColumns();\n    Set<String> dicts = new HashSet<>();\n    addDicts(dicts, columns);\n    return StringUtils.join(dicts, \", \");\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "getDicts", "index": 2081, "label": 0}
{"input": "@Test\n  public void testGetWorkflowInstanceRun() {\n    WorkflowInstance instanceRun =\n        instanceDao.getWorkflowInstanceRun(\n            wfi.getWorkflowId(), wfi.getWorkflowInstanceId(), wfi.getWorkflowRunId());\n    instanceRun.setModifyTime(null);\n    assertEquals(wfi, instanceRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testGetWorkflowInstanceRun", "index": 2082, "label": 0}
{"input": "private float calculateImageWidth(XSSFClientAnchor clientAnchor, float widthRate) {\n        float width = 0f;\n        for (int j = clientAnchor.getCol1(); j < clientAnchor.getCol2(); j++) {\n            width += sheet.getColumnWidth(j);\n        }\n        return Math.abs(width - clientAnchor.getDx1() + clientAnchor.getDx2()) * widthRate;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxImageTableRenderer.java", "function_name": "calculateImageWidth", "index": 2083, "label": 0}
{"input": "void addProperty(VirtualFrame frame, ObjectMember member, GeneratorMemberNode node) {\n    addMember(frame, member.getName(), member, node);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/ObjectData.java", "function_name": "addProperty", "index": 2084, "label": 0}
{"input": "public MaestroExecutionPreparer(\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      WorkflowTranslator translator,\n      WorkflowHelper workflowHelper,\n      RollupAggregationHelper rollupAggregationHelper,\n      ObjectMapper objectMapper) {\n    this.instanceDao = instanceDao;\n    this.stepInstanceDao = stepInstanceDao;\n    this.translator = translator;\n    this.workflowHelper = workflowHelper;\n    this.aggregationHelper = rollupAggregationHelper;\n    this.objectMapper = objectMapper;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/MaestroExecutionPreparer.java", "function_name": "MaestroExecutionPreparer", "index": 2085, "label": 0}
{"input": "@Test\n  public void testGetParamsVarName() throws Exception {\n    Map<String, Boolean> res = run(\"params.get('foo');\");\n    assertEquals(\"{params=true}\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserValidationVisitorTest.java", "function_name": "testGetParamsVarName", "index": 2086, "label": 0}
{"input": "@JsonIgnore\n  public static TimelineLogEvent info(String template, Object... args) {\n    return TimelineLogEvent.builder().level(Level.INFO).message(template, args).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineLogEvent.java", "function_name": "info", "index": 2087, "label": 0}
{"input": "private <R> R withTransaction(final TransactionalFunction<R> function) throws SQLException {\n    try (Connection connection = dataSource.getConnection()) {\n      connection.setAutoCommit(false); \n      try {\n        R result = function.apply(connection);\n        connection.commit();\n        return result;\n      } catch (SQLException e) {\n        connection.rollback();\n        throw e;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d806f867065a50f424833bfc501c773567595d", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "withTransaction", "index": 2088, "label": 0}
{"input": "private static SelType callJavaMethod0(Object obj, MethodHandle m) throws Throwable {\n    if (obj == null) {\n      return box(m.invoke());\n    } else {\n      return box(m.invoke(obj));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypeUtil.java", "function_name": "callJavaMethod0", "index": 2089, "label": 0}
{"input": "@Test\n  public void testDeactivationChangeEventRoundTripSerde() throws Exception {\n    WorkflowVersionUpdateJobEvent sampleEvent =\n        loadObject(\n            \"fixtures/jobevents/sample-workflow-deactivation-job-event.json\",\n            WorkflowVersionUpdateJobEvent.class);\n    assertEquals(\n        sampleEvent,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(sampleEvent), WorkflowVersionUpdateJobEvent.class));\n\n    MaestroEvent event = sampleEvent.toMaestroEvent(\"test-cluster\");\n    assertEquals(MaestroEvent.Type.WORKFLOW_DEACTIVATION_CHANGE_EVENT, event.getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/jobevents/WorkflowVersionUpdateJobEventTest.java", "function_name": "testDeactivationChangeEventRoundTripSerde", "index": 2090, "label": 0}
{"input": "@Test\n  public void isStepListSizeTooLarge() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    Workflow workflow =\n        Workflow.builder()\n            .steps(Collections.nCopies(Constants.STEP_LIST_SIZE_LIMIT + 1, step))\n            .build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\n        \"[workflow step list] is too large [301] and over the size limit [300]\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isStepListSizeTooLarge", "index": 2091, "label": 0}
{"input": "public DashscopeChatOptionsBuilder withParallelToolCalls(Boolean parallelToolCalls) {\n      this.options.parallelToolCalls = parallelToolCalls;\n      return this;\n    }", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatOptions.java", "function_name": "withParallelToolCalls", "index": 2092, "label": 0}
{"input": "protected String doVisitStringConstantPart(StringConstantPart part) {\n    if (part instanceof ConstantPart cp) {\n      return cp.getStr();\n    }\n    if (part instanceof StringUnicodeEscape ue) {\n      var codePoint = parseUnicodeEscapeSequence(ue);\n      return Character.toString(codePoint);\n    }\n    if (part instanceof StringEscape se) {\n      return switch (se.getType()) {\n        case NEWLINE -> \"\\n\";\n        case QUOTE -> \"\\\"\";\n        case BACKSLASH -> \"\\\\\";\n        case TAB -> \"\\t\";\n        case RETURN -> \"\\r\";\n      };\n    }\n    throw PklBugException.unreachableCode();\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AbstractAstBuilder.java", "function_name": "doVisitStringConstantPart", "index": 2093, "label": 0}
{"input": "@Test\n  public void testConcurrencyValidation() throws Exception {\n    ForeachStep def =\n        (ForeachStep) loadObject(\"fixtures/foreachsteps/sample-foreach-step.json\", Step.class);\n    def.setConcurrency(5L);\n    Set<ConstraintViolation<ForeachStep>> violations = validator.validate(def);\n    Assert.assertEquals(0, violations.size());\n\n    def.setConcurrency(5000L);\n    Assert.assertNotNull(def);\n    violations = validator.validate(def);\n    Assert.assertFalse(violations.isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/ForeachStepTest.java", "function_name": "testConcurrencyValidation", "index": 2094, "label": 0}
{"input": "@Override\n    public void setAllowCancel(boolean allowCancel) {\n        display.asyncExec(() -> {\n            if (!stopButton.isDisposed()) {\n                stopButton.setEnabled(allowCancel);\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtProgressDialog.java", "function_name": "setAllowCancel", "index": 2095, "label": 0}
{"input": "Stream<String> dequeRetryActions() {\n    return scheduledActions.entrySet().stream()\n        .filter(\n            e ->\n                e.getKey() instanceof Action.FlowTaskRetry\n                    && !e.getValue().isDone()\n                    && e.getValue().cancel(false))\n        .map(e -> ((Action.FlowTaskRetry) e.getKey()).taskRefName());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "dequeRetryActions", "index": 2096, "label": 0}
{"input": "@Test\n  public void testFlowRefreshTerminatedFlow() {\n    flow.setPrepareTask(flow.newTask(new TaskDef(\"prepare\", \"noop\", null, null), true));\n    flow.setMonitorTask(flow.newTask(new TaskDef(\"monitor\", \"noop\", null, null), true));\n    flow.getMonitorTask().setStatus(Task.Status.COMPLETED);\n\n    flowActor.runForAction(Action.FLOW_REFRESH);\n    verify(context, times(1)).refresh(flow);\n    verify(context, times(1)).finalCall(flow);\n    assertEquals(Flow.Status.COMPLETED, flow.getStatus());\n    assertFalse(flowActor.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testFlowRefreshTerminatedFlow", "index": 2097, "label": 0}
{"input": "@Test\n  public void testGtRestartInstanceId() {\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .build();\n    Assert.assertEquals(1, runRequest.getRestartInstanceId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testGtRestartInstanceId", "index": 2098, "label": 0}
{"input": "@Test\n  public void testMergeAllowSystemChanges() throws JsonProcessingException {\n    for (ParamMode mode :\n        Arrays.asList(ParamMode.MUTABLE_ON_START, ParamMode.CONSTANT, ParamMode.IMMUTABLE)) {\n      Map<String, ParamDefinition> allParams =\n          parseParamDefMap(\n              String.format(\n                  \"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': '%s'}}\",\n                  mode.toString()));\n      Map<String, ParamDefinition> paramsToMerge =\n          parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye'}}\");\n      ParamsMergeHelper.mergeParams(allParams, paramsToMerge, systemMergeContext);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeAllowSystemChanges", "index": 2099, "label": 0}
{"input": "@Test\n  public void testCalculateBaseRollup() throws IOException {\n    WorkflowInstance sampleInstance =\n        loadObject(\n            \"fixtures/instances/sample-workflow-instance-created-foreach-subworkflow-1.json\",\n            WorkflowInstance.class);\n    sampleInstance.setRunConfig(new RunConfig());\n    sampleInstance.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_INCOMPLETE);\n    WorkflowRollupOverview rollupBase = rollupAggregationHelper.calculateRollupBase(sampleInstance);\n    assertNotNull(rollupBase.getOverview().get(StepInstance.Status.SUCCEEDED));\n    assertEquals(1, rollupBase.getOverview().get(StepInstance.Status.SUCCEEDED).getCnt());\n\n    rollupBase = rollupAggregationHelper.calculateRollupBase(null);\n    assertNull(rollupBase);\n\n    WorkflowInstance wi = new WorkflowInstance();\n    rollupBase = rollupAggregationHelper.calculateRollupBase(wi);\n    assertNull(rollupBase);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/RollupAggregationHelperTest.java", "function_name": "testCalculateBaseRollup", "index": 2100, "label": 0}
{"input": "public MaestroEndTask(\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroJobEventPublisher publisher,\n      ObjectMapper objectMapper,\n      RollupAggregationHelper rollupAggregationHelper,\n      MaestroMetrics metricRepo) {\n    \n    super(SystemTaskType.JOIN.name());\n    this.instanceDao = instanceDao;\n    this.publisher = publisher;\n    this.objectMapper = objectMapper;\n    this.rollupAggregationHelper = rollupAggregationHelper;\n    this.metrics = metricRepo;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroEndTask.java", "function_name": "MaestroEndTask", "index": 2101, "label": 0}
{"input": "private SignalParamValue(long longValue, String stringValue) {\n    this.longValue = longValue;\n    this.stringValue = stringValue;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/signal/SignalParamValue.java", "function_name": "SignalParamValue", "index": 2102, "label": 0}
{"input": "@Bean\n  public MaestroFlowDao maestroFlowDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroEngineProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating IndexDAO within Spring boot...\");\n    return new MaestroFlowDao(crdbDataSource, objectMapper, props, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroFlowDao", "index": 2103, "label": 0}
{"input": "public static RetryPolicy tryMergeWithDefault(RetryPolicy policy) {\n    RetryPolicy defaultRetryPolicy = Defaults.DEFAULT_RETRY_POLICY;\n    RetryPolicy.RetryPolicyBuilder retryPolicyBuilder;\n    if (policy != null) {\n      retryPolicyBuilder = policy.toBuilder();\n      \n      if (retryPolicyBuilder.errorRetryLimit == null) {\n        retryPolicyBuilder.errorRetryLimit = defaultRetryPolicy.errorRetryLimit;\n      }\n      \n      if (retryPolicyBuilder.platformRetryLimit == null) {\n        retryPolicyBuilder.platformRetryLimit = defaultRetryPolicy.platformRetryLimit;\n      }\n      if (retryPolicyBuilder.backoff == null) {\n        retryPolicyBuilder.backoff = defaultRetryPolicy.backoff;\n      } else {\n        retryPolicyBuilder.backoff = retryPolicyBuilder.backoff.mergeWithDefault();\n      }\n    } else {\n      retryPolicyBuilder = defaultRetryPolicy.toBuilder();\n    }\n    return retryPolicyBuilder.build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/RetryPolicy.java", "function_name": "tryMergeWithDefault", "index": 2104, "label": 0}
{"input": "default long getConnectionIdleTimeout() {\n    return getLongProperty(\n        CONNECTION_IDLE_TIMEOUT_PROPERTY_NAME, CONNECTION_IDLE_TIMEOUT_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getConnectionIdleTimeout", "index": 2105, "label": 0}
{"input": "private MaestroWorkflowVersion queryMaestroWorkflowVersionWithConn(\n      Connection conn, String workflowId, long versionId) throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(GET_MAESTRO_WORKFLOW_VERSION)) {\n      stmt.setString(1, workflowId);\n      stmt.setLong(2, versionId);\n      try (ResultSet result = stmt.executeQuery()) {\n        if (result.next()) {\n          return maestroWorkflowVersionFromResult(result);\n        }\n        throw new MaestroNotFoundException(\n            \"Cannot find workflow [%s] with version [%s]\", workflowId, versionId);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "queryMaestroWorkflowVersionWithConn", "index": 2106, "label": 0}
{"input": "@Test\n    public void hh5() throws IOException {\n        URL url = new URL(\"http://hotelcontractfil.oss-cn-beijing.aliyuncs\"\n                + \".com/2019/%E5%98%89%E6%83%A0-%E4%B8%AD%E4%BA%A4%E5%BB%BA_2019-09-01_2019-09-30_1569055677522\"\n                + \".xlsx?Expires=1884415681&OSSAccessKeyId=LTAIGZDkqZfPArBr&Signature=Rf0gbO8vl3l%2Brj1KdyzHHMsUhCE\"\n                + \"%3D\");\n        InputStream is = url.openStream();\n        List<Object> list = EasyExcel.read(is).headRowNumber(0).sheet().doReadSync();\n        for (Object data : list) {\n            LOGGER.info(\"返回数据：{}\", JSON.toJSONString(data));\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/HgTest.java", "function_name": "hh5", "index": 2107, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.listener.type\", havingValue = \"sqs\")\n  public SqsRunWorkflowInstancesJobListener sqsRunWorkflowInstancesJobListener(\n      RunWorkflowInstancesJobProcessor runWorkflowInstancesJobProcessor,\n      SqsProcessorFinalizer sqsProcessorFinalizer) {\n    LOG.info(\"Creating runWorkflowInstancesJobListener within Spring boot...\");\n    return new SqsRunWorkflowInstancesJobListener(\n        runWorkflowInstancesJobProcessor, sqsProcessorFinalizer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsRunWorkflowInstancesJobListener", "index": 2108, "label": 0}
{"input": "@PutMapping(value = \"/{workflowId}/actions/deactivate\", consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Deactivate a workflow based on the given workflow id\")\n  public WorkflowActionResponse deactivateWorkflow(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId) {\n    return actionHandler.deactivate(workflowId, callerBuilder.build());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowActionController.java", "function_name": "deactivateWorkflow", "index": 2109, "label": 0}
{"input": "@Override\n    public ChatRoomDetailVO queryChatRoomDetail(String chatRoomName) {\n        \n        return Opt.ofNullable(chatRoomRepository.queryChatRoomDetail(chatRoomName))\n                \n                .map(chatRoomMapping::convert)\n                \n                .ifPresent(this::populateChatRoomDetails)\n                \n                .ifPresent(this::populateChatRoomInfo)\n                \n                .ifPresent(this::populateChatRoomMember)\n                \n                .orElse(null);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ChatRoomServiceImpl.java", "function_name": "queryChatRoomDetail", "index": 2110, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testFailedCreateSelArray() {\n    SelTypes.DATETIME.newSelTypeObjArray(3);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypesTest.java", "function_name": "testFailedCreateSelArray", "index": 2111, "label": 0}
{"input": "private void addListingEntry(VirtualFrame frame, ObjectData data, int parentLength) {\n    long index;\n    try {\n      index = keyNode.executeInt(frame);\n    } catch (UnexpectedResultException e) {\n      CompilerDirectives.transferToInterpreter();\n      throw exceptionBuilder()\n          .evalError(\"wrongListingKeyType\", new ProgramValue(\"\", VmUtils.getClass(e.getResult())))\n          .withLocation(keyNode)\n          .build();\n    }\n\n    \n    if (index < 0 || index >= parentLength) {\n      CompilerDirectives.transferToInterpreter();\n      throw exceptionBuilder()\n          .evalError(\"elementIndexOutOfRange\", index, 0, parentLength - 1)\n          .withLocation(keyNode)\n          .build();\n    }\n\n    data.addMember(frame, index, member, this);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorEntryNode.java", "function_name": "addListingEntry", "index": 2112, "label": 0}
{"input": "private String validateAndToJson(OutputData data) {\n    Checks.notNull(data, \"data object cannot be null\");\n    Checks.notNull(data.getExternalJobId(), \"External job id cannot be null\");\n    Checks.notNull(data.getExternalJobType(), \"External Job Type cannot be null\");\n    Checks.notNull(data.getWorkflowId(), \"Workflow id cannot be null\");\n    Checks.notNull(data.getParams(), \"Output data cannot be null\");\n    Checks.checkTrue(!data.getParams().isEmpty(), \"Output data cannot be empty\");\n    String dataStr = toJson(data);\n    Checks.checkTrue(\n        dataStr.length() <= Constants.JSONIFIED_PARAMS_STRING_SIZE_LIMIT,\n        \"Output data's total size [%s] is larger than system param size limit [%s]\",\n        dataStr.length(),\n        Constants.JSONIFIED_PARAMS_STRING_SIZE_LIMIT);\n    return dataStr;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d806f867065a50f424833bfc501c773567595d", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/OutputDataDao.java", "function_name": "validateAndToJson", "index": 2113, "label": 0}
{"input": "@Override\n  public void checkExit(int status) {\n    if (accs.get() != null) {\n      super.checkExit(status);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkExit", "index": 2114, "label": 0}
{"input": "@Override\n  public List<Message> pollMessages(\n      String queueName, int count, int timeout, long leaseDurationSeconds) {\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBQueueDAO.java", "function_name": "pollMessages", "index": 2115, "label": 0}
{"input": "void checkForLocaleChange(Locale newLocale) {\n            if (!localeIsAdapting) {\n                return;\n            }\n            if (newLocale.equals(locale)) {\n                return;\n            }\n            super.setChanged();\n            notifyObservers(newLocale);\n        }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatter1.java", "function_name": "checkForLocaleChange", "index": 2116, "label": 0}
{"input": "public SwtTrayManager(Display display, Shell shell, Image iconImage, List<TabComponent> tabComponents) {\n        this.display = display;\n        this.shell = shell;\n        this.iconImage = iconImage;\n        this.tabComponents = tabComponents;\n\n        \n        createTrayIcon();\n\n        \n        setupCloseListener();\n        \n        \n        Main.getEventBus().register(this);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtTrayManager.java", "function_name": "SwtTrayManager", "index": 2117, "label": 0}
{"input": "@Test\n  public void testStateIsFailed() {\n    Assert.assertFalse(StepRuntime.State.CONTINUE.isFailed());\n    Assert.assertFalse(StepRuntime.State.DONE.isFailed());\n    Assert.assertTrue(StepRuntime.State.USER_ERROR.isFailed());\n    Assert.assertTrue(StepRuntime.State.PLATFORM_ERROR.isFailed());\n    Assert.assertTrue(StepRuntime.State.FATAL_ERROR.isFailed());\n    Assert.assertFalse(StepRuntime.State.STOPPED.isFailed());\n    Assert.assertTrue(StepRuntime.State.TIMED_OUT.isFailed());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/steps/StepRuntimeTest.java", "function_name": "testStateIsFailed", "index": 2118, "label": 0}
{"input": "private Map<String, StepInstance> getStepIdInstanceMap(ResultSet result) throws SQLException {\n    Map<String, StepInstance> ret = new HashMap<>();\n    while (result.next()) {\n      StepInstance stepInstance = maestroStepFromResult(result);\n      ret.put(stepInstance.getStepId(), stepInstance);\n    }\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepIdInstanceMap", "index": 2119, "label": 0}
{"input": "public <T> T enterForGenerator(\n      FrameDescriptor.Builder frameDescriptorBuilder,\n      FrameDescriptor.Builder memberDescriptorBuilder,\n      Function<ForGeneratorScope, T> nodeFactory) {\n    return doEnter(\n        new ForGeneratorScope(\n            currentScope,\n            currentScope.qualifiedName,\n            frameDescriptorBuilder,\n            memberDescriptorBuilder),\n        nodeFactory);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "enterForGenerator", "index": 2120, "label": 0}
{"input": "private WorkflowDefinition buildPartialWorkflowDefinition(\n      WorkflowCreateRequest request, User author) {\n    WorkflowDefinition workflowDef = new WorkflowDefinition();\n    workflowDef.setWorkflow(request.getWorkflow());\n\n    \n    Metadata metadata = new Metadata();\n    metadata.setWorkflowId(request.getWorkflow().getId());\n    \n    metadata.setCreateTime(System.currentTimeMillis());\n    metadata.setVersionAuthor(author);\n    metadata.setGitInfo(request.getGitInfo());\n    metadata.setExtraInfo(request.getExtraInfo());\n\n    workflowDef.setMetadata(metadata);\n    \n    workflowDef.setIsActive(request.getIsActive());\n    if (workflowDef.getIsActive()) {\n      workflowDef.setActivateTime(metadata.getCreateTime());\n      workflowDef.setActivatedBy(metadata.getVersionAuthor());\n    }\n    return workflowDef;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowController.java", "function_name": "buildPartialWorkflowDefinition", "index": 2121, "label": 0}
{"input": "@NotNull\n    public TokenAuthResult isContextAuthorized(Context ctx) {\n        var tk = \"\";\n        String authToken = ctx.header(\"Authorization\");\n        if (authToken != null) {\n            if (authToken.startsWith(\"Bearer \")) {\n                tk = authToken.substring(7);\n            }\n        } else {\n            tk = ctx.queryParam(\"token\");\n        }\n        if (StringUtils.isEmpty(tk)) {\n            return TokenAuthResult.NO_AUTH_TOKEN_PROVIDED;\n        }\n        return token.equals(tk) ? TokenAuthResult.SUCCESS : TokenAuthResult.FAILED;\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "5d43333c5e90aa85fb039014b99e850e73c9f024", "file_path": "src/main/java/com/ghostchu/peerbanhelper/web/JavalinWebContainer.java", "function_name": "isContextAuthorized", "index": 2122, "label": 0}
{"input": "@JsonCreator\n    public WorkflowTimelineEvent(\n        @JsonProperty(\"author\") User author,\n        @JsonProperty(\"log\") String log,\n        @JsonProperty(\"timestamp\") long timestamp) {\n      this.author = author;\n      this.log = log;\n      this.timestamp = timestamp;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/WorkflowTimeline.java", "function_name": "WorkflowTimelineEvent", "index": 2123, "label": 0}
{"input": "private final int jjStartNfa_0(int pos, long active0, long active1) {\n    return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjStartNfa_0", "index": 2124, "label": 0}
{"input": "@Test\n  public void testMismatchedOutputParameterType() {\n    setupOutputDataDao();\n    runtimeSummary =\n        runtimeSummaryBuilder()\n            .artifacts(artifacts)\n            .params(\n                Collections.singletonMap(\n                    \"str_param\",\n                    LongParameter.builder()\n                        .name(\"str_param\")\n                        .value(1L)\n                        .evaluatedResult(1L)\n                        .evaluatedTime(System.currentTimeMillis())\n                        .build()))\n            .build();\n    AssertHelper.assertThrows(\n        \"throws validation error if mismatched types\",\n        MaestroValidationException.class,\n        \"ParameterDefinition type mismatch name [str_param] from [STRING] != to [LONG]\",\n        () -> outputDataManager.validateAndMergeOutputParams(runtimeSummary));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "testMismatchedOutputParameterType", "index": 2125, "label": 0}
{"input": "@Test\n    public void t08() {\n        \n        \n        File file = TestFileUtil.createNewFile(\"compatibility/t08.xlsx\");\n        EasyExcel.write(file, SimpleData.class)\n            .sheet()\n            .doWrite(data());\n\n        List<Map<Integer, Object>> list = EasyExcel.read(file)\n            .readCache(new Ehcache(null, 20))\n            .sheet()\n            .doReadSync();\n        Assertions.assertEquals(10L, list.size());\n\n        FileUtils.delete(new File(System.getProperty(TempFile.JAVA_IO_TMPDIR)));\n\n        list = EasyExcel.read(file)\n            .readCache(new Ehcache(null, 20))\n            .sheet()\n            .doReadSync();\n        Assertions.assertEquals(10L, list.size());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48a8c2b36277eef512023b5f9fa6b2615833a274", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t08", "index": 2126, "label": 0}
{"input": "@Test\n  public void testSignalTriggerDeserialization() throws Exception {\n    SignalTrigger def =\n        loadObject(\"fixtures/signal_triggers/signal_trigger_simple.json\", SignalTrigger.class);\n    Assert.assertEquals(\"updated_by\", def.getJoinKeys()[0]);\n    Assert.assertEquals(2, def.getDefinition().size());\n    Assert.assertEquals(\"foo\", def.getDefinition().get(\"signal_a\").get(\"foo\").getName());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/trigger/SignalTriggerTest.java", "function_name": "testSignalTriggerDeserialization", "index": 2127, "label": 0}
{"input": "static SelString create(SelType[] args) {\n    if (args.length == 1) {\n      return create(args[0]);\n    } else if (args.length == 0) { \n      return new SelString(\"\");\n    }\n    throw new IllegalArgumentException(\n        \"Invalid input arguments (\" + Arrays.toString(args) + \") for String constructor\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelString.java", "function_name": "create", "index": 2128, "label": 0}
{"input": "private Object getSignalParam(String signalName, Long signalId, String paramName) {\n    if (signalId != null) {\n      var instance = signalHandler.getSignalInstance(signalName, signalId);\n      if (instance != null && instance.getParams() != null) {\n        var param = instance.getParams().get(paramName);\n        if (param != null) {\n          return param.isLong() ? param.getLong() : param.getString();\n        }\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "getSignalParam", "index": 2129, "label": 0}
{"input": "@Bean\n  public TerminateInstancesJobProcessor terminateInstancesJobProcessor(\n      MaestroWorkflowInstanceDao maestroWorkflowInstanceDao,\n      MaestroStepInstanceActionDao maestroStepInstanceActionDao) {\n    LOG.info(\"Creating terminateInstancesJobProcessor within Spring boot...\");\n    return new TerminateInstancesJobProcessor(\n        maestroWorkflowInstanceDao, maestroStepInstanceActionDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "terminateInstancesJobProcessor", "index": 2130, "label": 0}
{"input": "public static String getWorkflowNameOrDefault(Workflow workflow) {\n    return workflow.getName() != null ? workflow.getName() : workflow.getId();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/WorkflowHelper.java", "function_name": "getWorkflowNameOrDefault", "index": 2131, "label": 0}
{"input": "@JsonIgnore\n  public StepDependencies getSignalDependencies() {\n    return dependencies != null ? dependencies.get(StepDependencyType.SIGNAL) : null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepInstance.java", "function_name": "getSignalDependencies", "index": 2132, "label": 0}
{"input": "public static WorkflowInstance.Status deriveAggregatedStatus(\n      MaestroWorkflowInstanceDao instanceDao,\n      WorkflowSummary summary,\n      WorkflowInstance.Status runStatus,\n      WorkflowRuntimeOverview overviewToUpdate) {\n    if (!summary.isFreshRun() && runStatus == WorkflowInstance.Status.SUCCEEDED) {\n      WorkflowInstance instance =\n          instanceDao.getWorkflowInstanceRun(\n              summary.getWorkflowId(), summary.getWorkflowInstanceId(), summary.getWorkflowRunId());\n      instance.setRuntimeOverview(overviewToUpdate);\n      instance.setStatus(runStatus);\n      WorkflowInstance.Status aggStatus =\n          AggregatedViewHelper.computeAggregatedView(instance, false).getWorkflowInstanceStatus();\n      if (aggStatus != runStatus) {\n        overviewToUpdate.setRunStatus(runStatus);\n        return aggStatus;\n      }\n    }\n    return runStatus;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/AggregatedViewHelper.java", "function_name": "deriveAggregatedStatus", "index": 2133, "label": 0}
{"input": "public void removeByFilter(Filter filter) {\n        List<Float> dummyVector = new ArrayList<>();\n        \n        int dimension = 1024;\n        for (int i = 0; i < dimension; i++) {\n            dummyVector.add(0.0f);\n        }\n        Embedding dummyEmbedding = Embedding.from(dummyVector);\n        EmbeddingSearchRequest request = EmbeddingSearchRequest.builder()\n                .queryEmbedding(dummyEmbedding)\n                .filter(filter)\n                .maxResults(10000)\n                .build();\n        \n        List<String> idsToDelete = embeddingStore.search(request)\n                .matches().stream()\n                .map(EmbeddingMatch::embeddingId)\n                .collect(Collectors.toList());\n        \n        if (!idsToDelete.isEmpty()) {\n            embeddingStore.removeAll(idsToDelete);\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "d18e307e10687ecdeacbec63935de262e5af0ae1", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/service/impl/VectorStoreServiceImpl.java", "function_name": "removeByFilter", "index": 2134, "label": 0}
{"input": "@JsonCreator\n  public SignalOutputsDefinition(\n      @JsonProperty(\"definitions\") List<MapParamDefinition> definitions) {\n    this.definitions = definitions;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/SignalOutputsDefinition.java", "function_name": "SignalOutputsDefinition", "index": 2135, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallNonexistingMethod() {\n    extension.call(\"foo\", new SelType[] {SelString.of(\"bar\"), SelString.of(\"bar\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallNonexistingMethod", "index": 2136, "label": 0}
{"input": "public MaestroWorkflowInstanceDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      CockroachDBConfiguration config,\n      MaestroJobEventPublisher publisher) {\n    super(dataSource, objectMapper, config);\n    this.publisher = publisher;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "MaestroWorkflowInstanceDao", "index": 2137, "label": 0}
{"input": "@Override\n    public void afterSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {\n        log.info(\"锁住\");\n        writeSheetHolder.getSheet().protectSheet(\"edit\");\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/WriteHandler.java", "function_name": "afterSheetCreate", "index": 2138, "label": 0}
{"input": "private String deriveSqlQuery(WorkflowInstance.Status status) {\n    if (status == null) {\n      return UPDATE_WORKFLOW_INSTANCE_TIMELINE_QUERY;\n    } else if (status == WorkflowInstance.Status.IN_PROGRESS) {\n      return UPDATE_WORKFLOW_INSTANCE_START_QUERY;\n    } else {\n      return UPDATE_WORKFLOW_INSTANCE_END_QUERY;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "deriveSqlQuery", "index": 2139, "label": 0}
{"input": "public Builder clearField8() {\n                bitField0_ = (bitField0_ & ~0x00000080);\n                field8_ = 0L;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "clearField8", "index": 2140, "label": 0}
{"input": "@Test\n  public void testMergeNotAllowUpdateInternalMode() {\n    \n            ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeNotAllowUpdateInternalMode", "index": 2141, "label": 0}
{"input": "public Keyword getTypealiasKeyword() {\n    assert children != null;\n    return (Keyword) children.get(nameOffset);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d270829ed3d344cf72964e00c582c527274d5cbd", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeAlias.java", "function_name": "getTypealiasKeyword", "index": 2142, "label": 0}
{"input": "@Test\n  public void testClearRestartFor() {\n    RestartConfig config =\n        RestartConfig.builder()\n            .addRestartNode(\"foo\", 1, \"bar\")\n            .restartPolicy(RunPolicy.RESTART_FROM_BEGINNING)\n            .downstreamPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .build();\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.RESTART_FROM_INCOMPLETE)\n            .restartConfig(config)\n            .build();\n    runRequest.clearRestartFor(RunPolicy.RESTART_FROM_SPECIFIC);\n    Assert.assertNull(runRequest.getRestartConfig());\n    Assert.assertEquals(RunPolicy.RESTART_FROM_SPECIFIC, runRequest.getCurrentPolicy());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testClearRestartFor", "index": 2143, "label": 0}
{"input": "public MultiLineStringLiteralExpr(\n        List<StringPart> parts, Span startDelimiterSpan, Span endDelimiterSpan, Span span) {\n      super(span, parts);\n      this.startDelimiterSpan = startDelimiterSpan;\n      this.endDelimiterSpan = endDelimiterSpan;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "MultiLineStringLiteralExpr", "index": 2144, "label": 0}
{"input": "@Override\n\tpublic OverAllState deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n\t\tObjectNode node = objectMapper.readTree(p);\n\n\t\tMap<String, Object> data = objectMapper.convertValue(node.get(\"data\"), new TypeReference<>() {\n\t\t});\n\t\tMap<String, Object> newData = new HashMap<>();\n\n\t\t\n\t\tPlan currentPlan = objectMapper.convertValue(data.get(\"current_plan\"), Plan.class);\n\t\tnewData.put(\"current_plan\", currentPlan);\n\n\t\t\n\t\tSearchEnum searchEnum = objectMapper.convertValue(data.get(\"search_engine\"), SearchEnum.class);\n\t\tnewData.put(\"search_engine\", searchEnum);\n\n\t\t\n\t\tdata.forEach((key, value) -> {\n\t\t\tif (!newData.containsKey(key)) {\n\t\t\t\tnewData.put(key, value);\n\t\t\t}\n\t\t});\n\n\t\treturn new OverAllState(newData);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "781dd77480081b3a51f41ca6d6c8778b97867ea8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/serializer/DeepResearchDeserializer.java", "function_name": "deserialize", "index": 2145, "label": 0}
{"input": "public String restart(WorkflowInstance instance) {\n    return workflowExecutor.startWorkflow(\n        translator.translate(instance),\n        Collections.singletonMap(\n            Constants.WORKFLOW_SUMMARY_FIELD,\n            workflowHelper.createWorkflowSummaryFromInstance(instance)),\n        null,\n        null,\n        String.valueOf(System.currentTimeMillis()), \n        Collections.emptyMap());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowRunner.java", "function_name": "restart", "index": 2146, "label": 0}
{"input": "@Test\n  public void testDoubleParameter() {\n    DoubleParameter param =\n        DoubleParameter.builder()\n            .name(\"doubleParam\")\n            .expression(\"return 12.3;\")\n            .evaluatedResult(12.3)\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asDoubleParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(\n        new BigDecimal(param.getEvaluatedResult().toString()), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testDoubleParameter", "index": 2147, "label": 0}
{"input": "private boolean jj_3R_92() {\n    if (jj_scan_token(LBRACKET)) return true;\n    if (jj_scan_token(RBRACKET)) return true;\n    if (jj_3R_94()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_92", "index": 2148, "label": 0}
{"input": "@SuppressWarnings(\"unchecked\")\n  public List<TypeParameter> getParameters() {\n    assert children != null;\n    return (List<TypeParameter>) children;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeParameterList.java", "function_name": "getParameters", "index": 2149, "label": 0}
{"input": "@Override\n    public File createTempDirectory(String prefix) throws IOException {\n        \n        createPOIFilesDirectory();\n        \n        \n        File newDirectory = Files.createTempDirectory(dir.toPath(), prefix).toFile();\n        \n        \n        newDirectory.deleteOnExit();\n        \n        \n        return newDirectory;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/EasyExcelTempFileCreationStrategy.java", "function_name": "createTempDirectory", "index": 2150, "label": 0}
{"input": "private void tryTerminate() {\n    \n    var status = flow.getMonitorTask().getStatus();\n    LOG.info(\"Monitor task for [{}]'s status is [{}]\", reference(), status);\n    if (status.isTerminal()) {\n      if (status.isSuccessful()) {\n        flow.setStatus(Flow.Status.COMPLETED);\n      } else {\n        flow.setStatus(Flow.Status.FAILED);\n      }\n      flow.markUpdate();\n\n      try {\n        getContext().finalCall(flow);\n        finalized = true;\n        terminateNow();\n        \n        \n        if (flow.getRunningTasks().values().stream().anyMatch(Task::isActive)) {\n          LOG.debug(\n              \"Flow [{}] have active tasks after final callback. Please check it if unexpected\",\n              flow);\n        }\n        \n        wakeUpChildActors(Action.TASK_PING);\n      } catch (RuntimeException e) {\n        LOG.warn(\n            \"Got an exception during final callback, ignore it and reconciliation will retry ...\",\n            e);\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/FlowActor.java", "function_name": "tryTerminate", "index": 2151, "label": 0}
{"input": "public void markWaitPermit(MaestroTracingManager tracingManager) {\n    runtimeState.setWaitPermitTime(\n        updateStatus(StepInstance.Status.WAITING_FOR_PERMITS, tracingManager));\n    dbOperation = DbOperation.UPSERT; \n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markWaitPermit", "index": 2152, "label": 0}
{"input": "@Test\n  public void testInvalidTerminate() throws Exception {\n    StepRuntimeSummary summary =\n        loadObject(\n            \"fixtures/execution/sample-step-runtime-summary-1.json\", StepRuntimeSummary.class);\n    AssertHelper.assertThrows(\n        \"Cannot terminate the step\",\n        IllegalArgumentException.class,\n        \"Cannot terminate step [foo][2][bar] to a non-terminal state [RUNNING]\",\n        () -> summary.markTerminated(StepInstance.Status.RUNNING, null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepRuntimeSummaryTest.java", "function_name": "testInvalidTerminate", "index": 2153, "label": 0}
{"input": "public EmbeddingModel getEmbeddingModel(String modelName,String apiKey,String baseUrl) {\n        EmbeddingModel embeddingModel = OpenAiEmbeddingModel.builder().build();\n        if(TEXT_EMBEDDING_3_SMALL.toString().equals(modelName)) {\n             embeddingModel = OpenAiEmbeddingModel.builder()\n                    .apiKey(apiKey)\n                    .baseUrl(baseUrl)\n                    .modelName(TEXT_EMBEDDING_3_SMALL)\n                    .build();\n        \n        }else if(\"quentinz/bge-large-zh-v1.5\".equals(modelName)) {\n            embeddingModel = OllamaEmbeddingModel.builder()\n                    .baseUrl(baseUrl)\n                    .modelName(modelName)\n                    .build();\n        }\n        return embeddingModel;\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "aa92d232bb49a275838a74ba9d28d9448ad188c6", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/service/impl/WeaviateVectorStoreImpl.java", "function_name": "getEmbeddingModel", "index": 2154, "label": 0}
{"input": "public static String getStepNameOrDefault(Step step) {\n    if (step.getName() != null) {\n      return step.getName();\n    } else {\n      return step.getId();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "getStepNameOrDefault", "index": 2155, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallOtherMethods() {\n    SelMiscFunc.INSTANCE.call(\"nonExisting\", new SelType[0]);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMiscFuncTest.java", "function_name": "testCallOtherMethods", "index": 2156, "label": 0}
{"input": "@VisibleForTesting\n  void startWorkflowInstance(String workflowId) {\n    RunStrategy runStrategy = workflowDao.getRunStrategy(workflowId);\n    int res = runStrategyDao.dequeueWithRunStrategy(workflowId, runStrategy);\n    LOG.info(\"Run [{}] dequeued workflow instance(s) for workflow {}\", res, workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/StartWorkflowJobProcessor.java", "function_name": "startWorkflowInstance", "index": 2157, "label": 0}
{"input": "public StepInstanceActionResponse toStepInstanceActionResponse() {\n    return StepInstanceActionResponse.builder()\n        .workflowId(this.workflowId)\n        .workflowInstanceId(this.workflowInstanceId)\n        .workflowRunId(this.workflowRunId)\n        .stepId(this.stepId)\n        .stepAttemptId(this.stepAttemptId)\n        .timelineEvent(this.timelineEvent)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunResponse.java", "function_name": "toStepInstanceActionResponse", "index": 2158, "label": 0}
{"input": "public Drawable getBackgroundDrawable(Context context) {\n        if (currentTheme == Theme.LIGHT) {\n            return ContextCompat.getDrawable(context, R.drawable.background_gradient);\n        } else {\n            return ContextCompat.getDrawable(context, R.color.background);\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "getBackgroundDrawable", "index": 2159, "label": 0}
{"input": "private String getStepBreakPointWorkflowId(String workflowId) {\n    String revisedWorkflowId = workflowId;\n    if (IdHelper.isInlineWorkflowId(workflowId)) {\n      final String[] components = workflowId.split(\"_\");\n      if (components.length < Constants.INLINE_WORKFLOW_ID_SPLIT_COMPONENT_COUNT) {\n        throw new MaestroBadRequestException(\n            Collections.emptyList(),\n            \"workflowId [%s] is started as an inline id but is formatted incorrectly.\",\n            workflowId);\n      }\n      final String hashedInternalId = components[2];\n      revisedWorkflowId =\n          String.format(\"%s_%s_\", Constants.FOREACH_INLINE_WORKFLOW_PREFIX, hashedInternalId);\n    }\n\n    return revisedWorkflowId;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDao.java", "function_name": "getStepBreakPointWorkflowId", "index": 2160, "label": 0}
{"input": "@Test\n    public void dynamicHeadWrite() {\n        String fileName = TestFileUtil.getPath() + \"dynamicHeadWrite\" + System.currentTimeMillis() + \".xlsx\";\n        EasyExcel.write(fileName)\n                \n                .head(head()).sheet(\"模板\")\n                \n                .doWrite(data());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "dynamicHeadWrite", "index": 2161, "label": 0}
{"input": "@Test\n  public void testParseWithParam() {\n    String input = \"Hello ${name}\";\n    String expected = \"Hello World\";\n    String actual =\n        StringParser.parseWithParam(\n            input,\n            paramDefinition -> {\n              Parameter param = paramDefinition.toParameter();\n              param.setEvaluatedResult(\"Hello World\");\n              param.setEvaluatedTime(1L);\n              return param;\n            });\n    assertEquals(expected, actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/StringParserTest.java", "function_name": "testParseWithParam", "index": 2162, "label": 0}
{"input": "public List<ChatModelVo> modelList(ChatModelBo bo) {\n        bo.setModelShow(DisplayType.VISIBLE.getCode());\n        return chatModelService.queryList(bo);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "84b8d6f675c2f3aed83e0503e79cf1fa05e888e5", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/chat/UserModelService.java", "function_name": "modelList", "index": 2163, "label": 0}
{"input": "public Builder clearMessage2() {\n                if (message2Builder_ == null) {\n                    message2_ = java.util.Collections.emptyList();\n                    bitField0_ = (bitField0_ & ~0x00000002);\n                    onChanged();\n                } else {\n                    message2Builder_.clear();\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "clearMessage2", "index": 2164, "label": 0}
{"input": "public MaestroStartTask(\n      MaestroWorkflowInstanceDao instanceDao,\n      MaestroStepInstanceDao stepInstanceDao,\n      ExecutionDAO executionDao,\n      ObjectMapper objectMapper) {\n    super(Constants.DEFAULT_START_STEP_NAME);\n    this.instanceDao = instanceDao;\n    this.stepInstanceDao = stepInstanceDao;\n    this.executionDao = executionDao;\n    this.objectMapper = objectMapper;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroStartTask.java", "function_name": "MaestroStartTask", "index": 2165, "label": 0}
{"input": "@Test\n  public void testSupportedOneArgCalls() {\n    String[] methods =\n        new String[] {\"lastIndexOf\", \"equals\", \"compareTo\", \"startsWith\", \"endsWith\", \"contains\"};\n    String[] expected =\n        new String[] {\n          \"LONG: 2\",\n          \"BOOLEAN: false\",\n          \"LONG: -41\",\n          \"BOOLEAN: false\",\n          \"BOOLEAN: false\",\n          \"equals\"1\n        };\n    for (int i = 0; i < methods.length; ++i) {\n      SelType res = SelString.of(\"equals\"2).call(methods[i], new SelType[] {SelString.of(\"equals\"3)});\n      assertEquals(expected[i], res.type() + \"equals\"4 + res.toString());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testSupportedOneArgCalls", "index": 2166, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testInvalidIndexAccess2() throws Exception {\n    run(\"params[1];\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testInvalidIndexAccess2", "index": 2167, "label": 0}
{"input": "public static String generateFilename(String threadId, String extension) {\n\t\t\n\t\tString cleanThreadId = INVALID_FILENAME_CHARS.matcher(threadId).replaceAll(\"\").trim();\n\n\t\tcleanThreadId = WHITESPACE.matcher(cleanThreadId).replaceAll(\"_\");\n\n\t\t\n\t\tif (cleanThreadId.isEmpty()) {\n\t\t\tcleanThreadId = DEFAULT_FILENAME;\n\t\t}\n\n\t\treturn cleanThreadId + \".\" + extension;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FileOperationUtil.java", "function_name": "generateFilename", "index": 2168, "label": 0}
{"input": "public SubMessage2OrBuilder getMessage2OrBuilder(\n                    int index) {\n                if (message2Builder_ == null) {\n                    return message2_.get(index);\n                } else {\n                    return message2Builder_.getMessageOrBuilder(index);\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage2OrBuilder", "index": 2169, "label": 0}
{"input": "private void verifyNonNullMap(Map<String, ParamDefinition> defaultWorkflowParams) {\n    defaultWorkflowParams.forEach(\n        (k, v) -> {\n          if (v.getType() == ParamType.MAP) {\n            assertNotNull(\n                String.format(\"Default MAP param value for [%s] cannot be null\", k), v.getValue());\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "verifyNonNullMap", "index": 2170, "label": 0}
{"input": "private void writeJournal() {\n        for (Downloader downloader : getServer().getDownloaders()) {\n            try {\n                if (downloader.login().success()) {\n                    var stats = downloader.getStatistics();\n                    trafficJournalDao.updateData(downloader.getName(), stats.totalDownloaded(), stats.totalUploaded(), 0, 0);\n                }\n            } catch (Throwable e) {\n                log.error(\"Unable to write hourly traffic journal to database\", e);\n            }\n        }\n        updateTrafficMonitoringService();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "acadaae4a1d5350c1f723c8ec5f34660e1f38a27", "file_path": "src/main/java/com/ghostchu/peerbanhelper/module/impl/rule/ActiveMonitoringModule.java", "function_name": "writeJournal", "index": 2171, "label": 0}
{"input": "public static JSONObject revokeMsg(String appId, String toWxid, String msgId, String newMsgId,String createTime) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"msgId\", msgId);\r\n        param.put(\"newMsgId\", newMsgId);\r\n        param.put(\"createTime\", createTime);\r\n        return OkhttpUtil.postJSON(\"/message/revokeMsg\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "revokeMsg", "index": 2172, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidTypeNullValue() {\n    SelMap.of(Collections.singletonMap(\"bar\", null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testInvalidTypeNullValue", "index": 2173, "label": 0}
{"input": "@Test\n  public void testTerminateWorkflowInstancesRuntimeException() {\n    when(instance1.getStatus()).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Failed to run\",\n        MaestroRetryableError.class,\n        \"Failed to terminate a workflow and will retry to terminate it.\",\n        () -> processor.process(() -> jobEvent1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/TerminateThenRunInstanceJobProcessorTest.java", "function_name": "testTerminateWorkflowInstancesRuntimeException", "index": 2174, "label": 0}
{"input": "private void readHiddenList(File file) {\n        try (ExcelReader excelReader = FastExcel.read(file, HiddenSheetsData.class, new HiddenSheetsListener()).build()) {\n            List<ReadSheet> allSheetList = excelReader.excelExecutor().sheetList();\n            Assertions.assertEquals(2, allSheetList.stream().filter(ReadSheet::isHidden).count());\n            Assertions.assertEquals(1, allSheetList.stream().filter(ReadSheet::isVeryHidden).count());\n            Assertions.assertEquals(\"Sheet5\", allSheetList.stream().filter(ReadSheet::isVeryHidden)\n                .findFirst().get().getSheetName());\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/hiddensheets/HiddenSheetsTest.java", "function_name": "readHiddenList", "index": 2175, "label": 0}
{"input": "public long getFlowReconciliationIntervalInMillis() {\n    return getLongProperty(\n        FLOW_RECONCILIATION_INTERVAL_PROPERTY_NAME, FLOW_RECONCILIATION_INTERVAL_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getFlowReconciliationIntervalInMillis", "index": 2176, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidCallStatic() {\n    SelString.of(null).call(\"split\", new SelType[] {SelString.of(\"\\\\ \")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidCallStatic", "index": 2177, "label": 0}
{"input": "private void addPrototypeComment(Program program, Function func, String prototype) {\n        int txComment = program.startTransaction(\"Add prototype comment\");\n        try {\n            program.getListing().setComment(\n                func.getEntryPoint(), \n                CodeUnit.PLATE_COMMENT, \n                \"Setting prototype: \" + prototype\n            );\n        } finally {\n            program.endTransaction(txComment, true);\n        }\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "addPrototypeComment", "index": 2178, "label": 0}
{"input": "public static synchronized void resetToDefault() {\n        checkInitialized();\n        mmkv.clearAll();\n        mmkv.encode(KeyHolder.DARK_MODE, false);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/utils/FileManager.java", "function_name": "resetToDefault", "index": 2179, "label": 0}
{"input": "private int jjMoveStringLiteralDfa9_0(long old0, long active0) {\n    if (((active0 &= old0)) == 0L) return jjStartNfa_0(7, old0, 0L);\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      jjStopStringLiteralDfa_0(8, active0, 0L);\n      return 9;\n    }\n    switch (curChar) {\n      case 102:\n        if ((active0 & 0x1000000000L) != 0L) return jjStartNfaWithStates_0(9, 36, 28);\n        break;\n      case 115:\n        if ((active0 & 0x400000000L) != 0L) return jjStartNfaWithStates_0(9, 34, 28);\n        break;\n      case 122:\n        return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);\n      default:\n        break;\n    }\n    return jjStartNfa_0(8, active0, 0L);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa9_0", "index": 2180, "label": 0}
{"input": "@Override\n  protected ResponseEntity<Object> handleMethodArgumentNotValid(\n      MethodArgumentNotValidException e,\n      HttpHeaders headers,\n      HttpStatus status,\n      WebRequest request) {\n    LOG.info(\"Handle MethodArgumentNotValidException with a message: {}\", e.getMessage());\n    List<String> errors =\n        e.getBindingResult().getFieldErrors().stream()\n            .map(error -> error.getField() + \" \" + error.getDefaultMessage())\n            .collect(Collectors.toList());\n    return buildDetailedResponse(e, errors, headers, request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleMethodArgumentNotValid", "index": 2181, "label": 0}
{"input": "public WorkflowInstance getLatestWorkflowInstanceRun(String workflowId, long workflowInstanceId) {\n    return getWorkflowInstanceRun(workflowId, workflowInstanceId, Constants.LATEST_ONE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "getLatestWorkflowInstanceRun", "index": 2182, "label": 0}
{"input": "@Test\n  public void testCreateWithoutStackTrace() {\n    Exception exception = new Exception(new Exception(new Exception(\"test\")));\n    Details details = Details.create(exception, true, \"test-msg\");\n    assertEquals(MaestroRuntimeException.Code.INTERNAL_ERROR, details.getStatus());\n    assertEquals(\"test-msg\", details.getMessage());\n    assertEquals(3, details.getErrors().size());\n    assertTrue(details.isRetryable());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/error/DetailsTest.java", "function_name": "testCreateWithoutStackTrace", "index": 2183, "label": 0}
{"input": "@Test\n  public void addTaskExecutionLogsTest() {\n    List<TaskExecLog> logs = new ArrayList<>();\n    logs.add(createLog(TEST_TASK_ID_1, \"log1\"));\n    logs.add(createLog(TEST_TASK_ID_1, \"log2\"));\n    logs.add(createLog(TEST_TASK_ID_1, \"log3\"));\n\n    dao.addTaskExecutionLogs(logs);\n\n    List<TaskExecLog> indexedLogs =\n        tryFindResults(() -> dao.getTaskExecutionLogs(TEST_TASK_ID_1), 3);\n\n    assertEquals(3, indexedLogs.size());\n\n    assertTrue(\"Not all logs was indexed\", indexedLogs.containsAll(logs));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAOTest.java", "function_name": "addTaskExecutionLogsTest", "index": 2184, "label": 0}
{"input": "private TypeParameterList parseTypeParameterList() {\n    var start = expect(Token.LT, \"unexpectedToken\", \"<\").span;\n    var pars = parseListOf(Token.COMMA, this::parseTypeParameter);\n    var end = expect(Token.GT, \"unexpectedToken2\", \",\", \">\").span;\n    return new TypeParameterList(pars, start.endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseTypeParameterList", "index": 2185, "label": 0}
{"input": "@Test\n  public void testContainChild() {\n    assertFalse(groupActor.containsChild(\"test-flow-ref\"));\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    assertTrue(groupActor.containsChild(\"test-flow-ref\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testContainChild", "index": 2186, "label": 0}
{"input": "private int publishRunInstancesJobEvents(\n      String workflowId, List<WorkflowInstance> instances, int batchSize) {\n    RunWorkflowInstancesJobEvent startInstances = RunWorkflowInstancesJobEvent.init(workflowId);\n    int idx = 0;\n    for (WorkflowInstance instance : instances) {\n      startInstances.addOneRun(\n          instance.getWorkflowInstanceId(),\n          instance.getWorkflowRunId(),\n          instance.getWorkflowUuid());\n      idx++;\n      if (idx % batchSize == 0) {\n        publishRunInstancesJobEvent(startInstances);\n      }\n    }\n    if (startInstances.size() > 0) {\n      publishRunInstancesJobEvent(startInstances);\n    }\n    return idx;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "publishRunInstancesJobEvents", "index": 2187, "label": 0}
{"input": "public void wakeUp(Long groupId, String flowReference, String taskReference) {\n    Actor groupActor = groupActors.get(groupId);\n    if (groupActor != null && groupActor.isRunning()) {\n      groupActor.post(new Action.FlowWakeUp(flowReference, taskReference));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/FlowExecutor.java", "function_name": "wakeUp", "index": 2188, "label": 0}
{"input": "@Test\n\t@Order(5)\n\t@DisplayName(\"Test GitHub search page elements\")\n\tvoid testGitHubSearch() {\n\t\t\n\t\tToolExecuteResult navigateResult = executeAction(\"navigate\", \"https://github.com\");\n\t\tAssertions.assertEquals(\"Navigated to https://github.com\", navigateResult.getOutput(),\n\t\t\t\t\"Failed to navigate to GitHub\");\n\n\t\tPage page = browserUseTool.getDriver().getCurrentPage();\n\t\tMap<String, Object> state = browserUseTool.getCurrentState(page);\n\t\tString elements = (String) state.get(\"interactive_elements\");\n\t\tAssertions.assertNotNull(elements, \"Failed to get GitHub interactive elements\");\n\t\tlog.info(\"GitHub interactive elements: {}\", elements);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/test/java/com/alibaba/cloud/ai/example/manus/tool/BrowserUseToolSpringTest.java", "function_name": "testGitHubSearch", "index": 2189, "label": 0}
{"input": "private void doEvalTyped(VirtualFrame frame, VmClass clazz, ObjectData data, VmObject iterable) {\n    iterable.forceAndIterateMemberValues(\n        (key, member, value) -> {\n          if (member.isElement() || member.isEntry()) {\n            cannotHaveMember(clazz, member);\n          }\n          checkIsValidTypedProperty(clazz, member);\n          data.addProperty(frame, createMember(member, value), this);\n          return true;\n        });\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "doEvalTyped", "index": 2190, "label": 0}
{"input": "@PostMapping(\"/translationByFile\")\n  @ResponseBody\n  public String translationByFile(@RequestParam(\"file\") MultipartFile file, String targetLanguage) {\n    return attachService.translationByFile(file, targetLanguage);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "translationByFile", "index": 2191, "label": 0}
{"input": "@Test\n  public void testIsNullOrEmpty() {\n    Assert.assertTrue(ObjectHelper.isNullOrEmpty(null));\n    Assert.assertTrue(ObjectHelper.isNullOrEmpty(\"\"));\n    Assert.assertFalse(ObjectHelper.isNullOrEmpty(\"foo\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ObjectHelperTest.java", "function_name": "testIsNullOrEmpty", "index": 2192, "label": 0}
{"input": "@Test\n  public void testCallJavaMethodWithoutArg() throws Throwable {\n    m1 =\n        MethodHandles.lookup()\n            .findStatic(MockType.class, \"staticNoArg\", MethodType.methodType(void.class));\n    m2 =\n        MethodHandles.lookup()\n            .findVirtual(MockType.class, \"noArg\", MethodType.methodType(String.class));\n    SelType res = SelTypeUtil.callJavaMethod(null, new SelType[0], m1, \"staticNoArg\");\n    assertEquals(SelType.NULL, res);\n    res = SelTypeUtil.callJavaMethod(new MockType(), new SelType[0], m2, \"noArg\");\n    assertEquals(SelTypes.STRING, res.type());\n    assertEquals(\"noArg\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypeUtilTest.java", "function_name": "testCallJavaMethodWithoutArg", "index": 2193, "label": 0}
{"input": "@Test\n  public void testMergeNestedTags() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'tagmap': {'type': 'MAP','value': {'withtag': {'type': 'STRING','tags': ['tag1']}}}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'tagmap': {'type': 'MAP','value': {'withtag': {'type': 'STRING','tags': ['tag2']}}}}\");\n    ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext);\n    assertEquals(1, allParams.size());\n    assertEquals(\n        2,\n        allParams\n            .get(\"tagmap\")\n            .asMapParamDef()\n            .getValue()\n            .get(\"withtag\")\n            .getTags()\n            .getTags()\n            .size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeNestedTags", "index": 2194, "label": 0}
{"input": "public void markPaused(MaestroTracingManager tracingManager) {\n    runtimeState.setPauseTime(updateStatus(StepInstance.Status.PAUSED, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markPaused", "index": 2195, "label": 0}
{"input": "public boolean requeueSweep(String workflowId) {\n    return queueDAO.pushIfNotExists(WorkflowExecutor.DECIDER_QUEUE, workflowId, 0L);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/conductor/core/execution/MaestroWorkflowExecutor.java", "function_name": "requeueSweep", "index": 2196, "label": 0}
{"input": "@Override\n    public void cancel(Workflow workflow, Task task, WorkflowExecutor executor) {\n      if (shouldThrow) {\n        throw new MaestroRetryableError(\"test-exception\");\n      }\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/conductor/core/execution/MaestroWorkflowExecutorTest.java", "function_name": "cancel", "index": 2197, "label": 0}
{"input": "@Bean\n  public NotebookParamsBuilder notebookParamsBuilder(\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating notebookParamsBuilder within Spring boot...\");\n    return new NotebookParamsBuilder(objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroStepRuntimeConfiguration.java", "function_name": "notebookParamsBuilder", "index": 2198, "label": 0}
{"input": "default void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/handler/SheetWriteHandler.java", "function_name": "beforeSheetCreate", "index": 2199, "label": 0}
{"input": "@Test\n  public void call() {\n    SelType res = SelJavaMath.INSTANCE.call(\"min\", new SelType[] {SelLong.of(1), SelLong.of(2)});\n    assertEquals(\"LONG: 1\", res.type() + \": \" + res);\n    res = SelJavaMath.INSTANCE.call(\"max\", new SelType[] {SelLong.of(1), SelLong.of(2)});\n    assertEquals(\"LONG: 2\", res.type() + \": \" + res);\n    res = SelJavaMath.INSTANCE.call(\"pow\", new SelType[] {SelLong.of(3), SelLong.of(2)});\n    assertEquals(SelTypes.DOUBLE, res.type());\n    assertEquals(9.0, ((SelDouble) res).doubleVal(), 0.01);\n    res = SelJavaMath.INSTANCE.call(\"random\", new SelType[] {});\n    assertEquals(SelTypes.DOUBLE, res.type());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelJavaMathTest.java", "function_name": "call", "index": 2200, "label": 0}
{"input": "public Map<String, Parameter> toParameters(Map<String, ParamDefinition> paramDefinitions) {\n    Map<String, Parameter> params = new LinkedHashMap<>();\n    paramDefinitions.forEach((name, def) -> params.put(name, def.toParameter()));\n    return params;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/testFixtures/java/com/netflix/maestro/MaestroBaseTest.java", "function_name": "toParameters", "index": 2201, "label": 0}
{"input": "@Test\n  public void testGetCompletedByTsParam() {\n    Tct tct = new Tct();\n    tct.setCompletedByTs(123L);\n    tct.setTz(\"UTC\");\n    LongParamDefinition expected =\n        LongParamDefinition.builder().name(\"completed_by_ts\").value(123L).build();\n\n    LongParamDefinition actual = tct.getCompletedByTsParam();\n    assertEquals(expected, actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/TctTest.java", "function_name": "testGetCompletedByTsParam", "index": 2202, "label": 0}
{"input": "@Test\n  public void testCreateWorkflowInstance() {\n    RunRequest request =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n            .build();\n    Workflow workflow = definition.getWorkflow();\n    WorkflowInstance instance =\n        workflowHelper.createWorkflowInstance(workflow, 12345L, 1, new RunProperties(), request);\n    assertEquals(workflow.getId(), instance.getWorkflowId());\n    assertEquals(WorkflowInstance.Status.CREATED, instance.getStatus());\n    assertEquals(12345L, instance.getInternalId().longValue());\n    assertNotNull(instance.getParams());\n    assertNotNull(instance.getWorkflowUuid());\n    Mockito.verify(paramsManager, Mockito.times(1)).generateMergedWorkflowParams(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/WorkflowHelperTest.java", "function_name": "testCreateWorkflowInstance", "index": 2203, "label": 0}
{"input": "private WorkflowInfo(MaestroWorkflow workflow) {\n      this(\n          workflow.getActiveVersionId(),\n          workflow.getPropertiesSnapshot(),\n          workflow.getLatestVersionId());\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "WorkflowInfo", "index": 2204, "label": 0}
{"input": "private String connectedClientName(String clientName, String serverConnectionName) {\n\t\treturn clientName + \" - \" + serverConnectionName;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "7acd7d08d4f9f0a01815d4e5f0e77514a1ed7167", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/McpAssignNodeConfiguration.java", "function_name": "connectedClientName", "index": 2205, "label": 0}
{"input": "@Override\n    public short getLastCellNum() {\n        if (CollectionUtils.isEmpty(cellList)) {\n            return -1;\n        }\n        return (short) cellList.size();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvRow.java", "function_name": "getLastCellNum", "index": 2206, "label": 0}
{"input": "String getFirstTimeTriggerTimeZone() {\n    if (timeTriggers != null && !timeTriggers.isEmpty()) {\n      return timeTriggers.get(0).getTimezone();\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/InstanceWrapper.java", "function_name": "getFirstTimeTriggerTimeZone", "index": 2207, "label": 0}
{"input": "public DataFormatData dataFormatData(int dateFormatIndexInteger) {\n        return dataFormatDataCache.computeIfAbsent(dateFormatIndexInteger, key -> {\n            DataFormatData dataFormatData = new DataFormatData();\n            if (stylesTable == null) {\n                return null;\n            }\n            XSSFCellStyle xssfCellStyle = stylesTable.getStyleAt(dateFormatIndexInteger);\n            if (xssfCellStyle == null) {\n                return null;\n            }\n            dataFormatData.setIndex(xssfCellStyle.getDataFormat());\n            dataFormatData.setFormat(\n                    BuiltinFormats.getBuiltinFormat(dataFormatData.getIndex(), xssfCellStyle.getDataFormatString(),\n                            globalConfiguration().getLocale()));\n            return dataFormatData;\n        });\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/metadata/holder/xlsx/XlsxReadWorkbookHolder.java", "function_name": "dataFormatData", "index": 2208, "label": 0}
{"input": "@Test\n  public void testMissingOutputParams() {\n    runtimeSummary = runtimeSummaryBuilder().artifacts(artifacts).build();\n    outputDataManager.validateAndMergeOutputParams(runtimeSummary);\n    assertTrue(runtimeSummary.getParams().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/OutputDataManagerTest.java", "function_name": "testMissingOutputParams", "index": 2209, "label": 0}
{"input": "private boolean jj_3R_48() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_51()) {\n      jj_scanpos = xsp;\n      if (jj_3R_52()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_48", "index": 2210, "label": 0}
{"input": "@Test\n  public void testCollectionsNullOrEmpty() {\n    Assert.assertTrue(ObjectHelper.isCollectionEmptyOrNull(null));\n    Assert.assertTrue(ObjectHelper.isCollectionEmptyOrNull(Collections.emptyList()));\n    Assert.assertFalse(ObjectHelper.isCollectionEmptyOrNull(Collections.singletonList(\"abc\")));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/ObjectHelperTest.java", "function_name": "testCollectionsNullOrEmpty", "index": 2211, "label": 0}
{"input": "@Test\n  public void testStartWithInvalidStepRunParams() {\n    RunRequest request =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n            .requestId(UUID.fromString(\"41f0281e-41a2-468d-b830-56141b2f768b\"))\n            .stepRunParams(Collections.singletonMap(\"job1\", Collections.emptyMap()))\n            .build();\n    AssertHelper.assertThrows(\n        \"caller cannot be null to activate workflow\",\n        IllegalArgumentException.class,\n        \"non-existing step id detected in step param overrides: inputs [job1] vs dag\",\n        () -> actionHandler.start(\"sample-minimal-wf\", \"active\", request));\n\n    verify(workflowDao, times(1)).getWorkflowDefinition(\"sample-minimal-wf\", \"active\");\n    verify(dagTranslator, times(1)).translate(any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testStartWithInvalidStepRunParams", "index": 2212, "label": 0}
{"input": "void delete(String workflowId, String triggerUuid) {\n    withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                DELETE_SIGNAL_TRIGGER_QUERY,\n                stmt -> {\n                  stmt.setString(1, workflowId);\n                  stmt.setString(2, triggerUuid);\n                }),\n        \"delete\",\n        \"Failed to delete the workflow signal trigger for [{}][{}]\",\n        workflowId,\n        triggerUuid);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalTriggerDao.java", "function_name": "delete", "index": 2213, "label": 0}
{"input": "private PausedStepAttempt pausedStepAttemptFromResultSet(ResultSet rs) throws SQLException {\n    return PausedStepAttempt.builder()\n        .workflowId(rs.getString(WORKFLOW_ID))\n        .workflowVersionId(rs.getLong(VERSION))\n        .workflowInstanceId(rs.getLong(INSTANCE_ID))\n        .workflowRunId(rs.getLong(RUN_ID))\n        .stepId(rs.getString(STEP_ID))\n        .stepAttemptId(rs.getLong(STEP_ATTEMPT_ID))\n        .createTime(getTimestampIfPresent(rs, CREATE_TS))\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDao.java", "function_name": "pausedStepAttemptFromResultSet", "index": 2214, "label": 0}
{"input": "public double getDouble(String name) {\n        return Double.longBitsToDouble(sharedPreferences.getLong(name, 0));\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/FileManager.java", "function_name": "getDouble", "index": 2215, "label": 0}
{"input": "private void doEvalIntSeq(\n      VirtualFrame frame, VmClass parent, ObjectData data, VmIntSeq iterable) {\n    if (isTypedObjectClass(parent) || parent == getMappingClass()) {\n      CompilerDirectives.transferToInterpreter();\n      throw exceptionBuilder()\n          .evalError(\"cannotSpreadObject\", iterable.getVmClass(), parent)\n          .withHint(\"`IntSeq` can only be spread into objects of type `Dynamic` and `Listing`.\")\n          .withProgramValue(\"Value\", iterable)\n          .build();\n    }\n    spreadIterable(frame, data, iterable);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "doEvalIntSeq", "index": 2216, "label": 0}
{"input": "@Test\n  public void testDequeueUnownedMessage() {\n    MessageDto enqueued = dao.enqueue(jobEvent, 12345L);\n    List<MessageDto> owned = dao.dequeueUnownedMessages(jobEvent.getType().getQueueId(), 12345L, 1);\n    assertEquals(1, owned.size());\n    assertEquals(enqueued.msgId(), owned.getFirst().msgId());\n    assertTrue(owned.getFirst().ownedUntil() > System.currentTimeMillis());\n    assertEquals(enqueued.event(), owned.getFirst().event());\n    assertEquals(enqueued.createTime(), owned.getFirst().createTime());\n    dao.remove(owned.getFirst());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/dao/MaestroQueueDaoTest.java", "function_name": "testDequeueUnownedMessage", "index": 2217, "label": 0}
{"input": "private void prepareTimestampField(\n      StringBuilder fields, String fieldName, List<StatementPreparer> preparers, Long data) {\n    final int idx = getIndex(fields, fieldName, preparers, data);\n    if (idx > 0) {\n      preparers.add(stmt -> stmt.setTimestamp(idx, new Timestamp(data)));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "prepareTimestampField", "index": 2218, "label": 0}
{"input": "@Test\n\tvoid testChatModelEnum() {\n\t\tSystem.out.println(\"output: \" + dashScopeApi.getApiKey());\n\t\t\n\t\tassertEquals(\"qwen-max\", ChatModel.QWEN_MAX.getValue(), \"ChatModel.QWEN_MAX should have value 'qwen-max'\");\n\t\tassertEquals(\"qwen-max-longcontext\", ChatModel.QWEN_MAX_LONGCONTEXT.getValue(),\n\t\t\t\t\"ChatModel.QWEN_MAX_LONGCONTEXT should have value 'qwen-max-longcontext'\");\n\t\tassertEquals(\"qwen-plus\", ChatModel.QWEN_PLUS.getValue(), \"ChatModel.QWEN_PLUS should have value 'qwen-plus'\");\n\t\tassertEquals(\"qwen-turbo\", ChatModel.QWEN_TURBO.getValue(),\n\t\t\t\t\"ChatModel.QWEN_TURBO should have value 'qwen-turbo'\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/test/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApiTests.java", "function_name": "testChatModelEnum", "index": 2219, "label": 0}
{"input": "private String paginateList(List<String> items, int offset, int limit) {\n        int start = Math.max(0, offset);\n        int end   = Math.min(items.size(), offset + limit);\n\n        if (start >= items.size()) {\n            return \"\"; \n        }\n        List<String> sub = items.subList(start, end);\n        return String.join(\"\\n\", sub);\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "bc3579d4753ffdd37a6a3635727268908104387e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "paginateList", "index": 2220, "label": 0}
{"input": "@JsonIgnore\n  public Stream<RunWorkflowInstancesJobEvent> singletonStream() {\n    return instanceRunUuids.stream()\n        .map(\n            instanceRunUuid -> {\n              RunWorkflowInstancesJobEvent jobEvent = new RunWorkflowInstancesJobEvent();\n              jobEvent.workflowId = workflowId;\n              jobEvent.instanceRunUuids = Collections.singletonList(instanceRunUuid);\n              return jobEvent;\n            });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/jobevents/RunWorkflowInstancesJobEvent.java", "function_name": "singletonStream", "index": 2221, "label": 0}
{"input": "@Test\n  public void testNotEvaluatedParam() {\n    Parameter param = StringParameter.builder().name(\"test\").value(\"test $notEvaluated\").build();\n\n    \n    Set<String> paramNames = LiteralEvaluator.getReferencedParamNames(param);\n    Assert.assertEquals(new LinkedHashSet<>(Collections.singletonList(\"notEvaluated\")), paramNames);\n\n    AssertHelper.assertThrows(\n        \"Throw an error if there is an unevaluated parameter\",\n        MaestroInternalError.class,\n        \"Cannot interpolate [test $notEvaluated] as param [notEvaluated] is not evaluated yet\",\n        () -> LiteralEvaluator.eval(param, params));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/LiteralEvaluatorTest.java", "function_name": "testNotEvaluatedParam", "index": 2222, "label": 0}
{"input": "@Test\n  public void testRemove() {\n    String queueName = \"test-queue\";\n    String id = \"abcd-1234-defg-5678\";\n    assertEquals(0, queueDao.getSize(queueName));\n    queueDao.pushIfNotExists(queueName, id, 123);\n    assertEquals(1, queueDao.getSize(queueName));\n    queueDao.remove(queueName, id);\n    assertEquals(0, queueDao.getSize(queueName));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "465feefeb15bf57091641f75d9eed7875aefe5d7", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/InMemoryQueueDaoTest.java", "function_name": "testRemove", "index": 2223, "label": 0}
{"input": "@Test\n  public void testSupportedNoArgCalls() {\n    String[] methods = new String[] {\"toUpperCase\", \"toLowerCase\", \"length\", \"isEmpty\", \"trim\"};\n    String[] expected =\n        new String[] {\n          \"STRING: FOOBAR \", \"STRING: foobar \", \"LONG: 7\", \"BOOLEAN: false\", \"STRING: FooBar\"\n        };\n    for (int i = 0; i < methods.length; ++i) {\n      SelType res = SelString.of(\"toLowerCase\"0).call(methods[i], new SelType[0]);\n      assertEquals(expected[i], res.type() + \"toLowerCase\"1 + res.toString());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testSupportedNoArgCalls", "index": 2224, "label": 0}
{"input": "@Test\n    public void testSimple() {\n\n        csvFile = TestFileUtil.readFile(CSV_BASE + \"simple.csv\");\n        doTest(false, csvFile, null, null, null, null, null);\n\n        csvFile = TestFileUtil.createNewFile(CSV_BASE + \"csv-simple.csv\");\n        doTest(true, csvFile, null, null, null, null, null);\n\n        \n        csvFile = TestFileUtil.createNewFile(CSV_BASE + \"csv-sheet-simple.csv\");\n        FastExcel.write(csvFile, CsvData.class)\n            .sheet().doWrite(csvDataList);\n        List<CsvData> dataList = FastExcel.read(csvFile, CsvData.class, new CsvDataListener())\n            .sheet().doReadSync();\n        Assertions.assertEquals(10, dataList.size());\n        Assertions.assertNotNull(dataList.get(0).getString());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "testSimple", "index": 2225, "label": 0}
{"input": "public MaestroInvalidExpressionException(String template, Object... args) {\n    super(Code.BAD_REQUEST, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroInvalidExpressionException.java", "function_name": "MaestroInvalidExpressionException", "index": 2226, "label": 0}
{"input": "public void setPromptTemplateBuilderCustomizers(List<PromptTemplateCustomizer> customizers) {\n\t\tthis.customizers = customizers;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57c9ddbb8f0c222fa73a69fa8ca0cd63deace926", "file_path": "spring-ai-alibaba-prompt/spring-ai-alibaba-prompt-nacos/src/main/java/com/alibaba/cloud/ai/prompt/PromptTemplateBuilderConfigure.java", "function_name": "setPromptTemplateBuilderCustomizers", "index": 2227, "label": 0}
{"input": "@Override\n  protected Optional<String> uniqueKeyForFifoDeduplication(\n      MaestroJobEvent event, String messageBody) {\n    if (event.getType() == Type.RUN_WORKFLOW_INSTANCES_JOB_EVENT) {\n      return Optional.of(event.getMessageKey());\n    } else if (event.getType() == Type.STEP_INSTANCE_WAKE_UP_JOB_EVENT) {\n      return Optional.of(event.getMessageKey());\n    }\n    return Optional.empty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisher.java", "function_name": "uniqueKeyForFifoDeduplication", "index": 2228, "label": 0}
{"input": "public static long getDurationInMillis(Duration duration) {\n    JsonNode value = duration.getValue();\n    if (value.isNumber()) {\n      return value.asLong();\n    } else {\n      return parseDuration(value.asText());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/DurationParser.java", "function_name": "getDurationInMillis", "index": 2229, "label": 0}
{"input": "public RagNode(RetrievalAugmentationAdvisor retrievalAugmentationAdvisor, ChatClient chatClient) {\n\t\tthis.retrievalAugmentationAdvisor = retrievalAugmentationAdvisor;\n\t\tthis.chatClient = chatClient;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/node/RagNode.java", "function_name": "RagNode", "index": 2230, "label": 0}
{"input": "private List<String> getJoinStepIds(String stepId) {\n    return stepMap.get(stepId).getTransition().getPredecessors();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/WorkflowGraph.java", "function_name": "getJoinStepIds", "index": 2231, "label": 0}
{"input": "@Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj instanceof SelString) {\n      return Objects.equals(val, ((SelString) obj).val);\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelString.java", "function_name": "equals", "index": 2232, "label": 0}
{"input": "public static MessageBytesExtra getDefaultInstance() {\n            return DEFAULT_INSTANCE;\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getDefaultInstance", "index": 2233, "label": 0}
{"input": "public static JSONObject getProfile(String appId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        return OkhttpUtil.postJSON(\"/personal/getProfile\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/PersonalApi.java", "function_name": "getProfile", "index": 2234, "label": 0}
{"input": "@Bean\n\tpublic ChatClient coordinatorAgent(ChatClient.Builder coordinatorChatClientBuilder, PlannerTool plannerTool) {\n\t\treturn coordinatorChatClientBuilder\n\t\t\t.defaultOptions(ToolCallingChatOptions.builder()\n\t\t\t\t.internalToolExecutionEnabled(false) \n\t\t\t\t.build())\n\t\t\t\n\t\t\t.defaultTools(plannerTool)\n\t\t\t.build();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "coordinatorAgent", "index": 2235, "label": 0}
{"input": "private void ensureEmptyHeaders(MemberHeader header, String messageArg) {\n    if (header.isNotEmpty()) {\n      throw new ParserError(\n          ErrorMessages.create(\"wrongHeaders\", messageArg), header.span(spanLookahead));\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "ensureEmptyHeaders", "index": 2236, "label": 0}
{"input": "@Test\n  public void testIsFreshRun() {\n    RunRequest runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RestartPolicy.RESTART_FROM_BEGINNING)\n            .build();\n    Assert.assertFalse(runRequest.isFreshRun());\n    runRequest =\n        RunRequest.builder()\n            .initiator(new ManualInitiator())\n            .currentPolicy(RunPolicy.START_FRESH_NEW_RUN)\n            .build();\n    Assert.assertTrue(runRequest.isFreshRun());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testIsFreshRun", "index": 2237, "label": 0}
{"input": "@Test\n  public void testQueuesDetail() {\n    String queueName = \"test-queue\";\n    String id = \"abcd-1234-defg-5678\";\n    queueDao.pushIfNotExists(queueName, id, 123);\n    assertEquals(Collections.singletonMap(queueName, 1L), queueDao.queuesDetail());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "465feefeb15bf57091641f75d9eed7875aefe5d7", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/InMemoryQueueDaoTest.java", "function_name": "testQueuesDetail", "index": 2238, "label": 0}
{"input": "private GeneratorObjectLiteralNode doVisitGeneratorObjectBody(\n      ObjectBody body, ExpressionNode parentNode) {\n    var parametersDescriptor = createFrameDescriptorBuilder(body);\n    var parameterTypes = doVisitParameterTypes(body);\n    var memberNodes = doVisitGeneratorMemberNodes(body.getMembers());\n    var currentScope = symbolTable.getCurrentScope();\n    \n    return GeneratorObjectLiteralNodeGen.create(\n        createSourceSection(body.parent()),\n        language,\n        currentScope.getQualifiedName(),\n        currentScope.isCustomThisScope(),\n        parametersDescriptor == null ? null : parametersDescriptor.build(),\n        parameterTypes,\n        memberNodes,\n        parentNode);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitGeneratorObjectBody", "index": 2239, "label": 0}
{"input": "@Test\n  public void testAddRestartNode() {\n    RestartConfig config =\n        RestartConfig.builder()\n            .addRestartNode(\"foo\", 1, \"bar\")\n            .addRestartNode(\"foo\", 2, \"bar\")\n            .build();\n    assertEquals(2, config.getRestartPath().size());\n    assertEquals(Defaults.DEFAULT_RESTART_POLICY, config.getRestartPolicy());\n    assertEquals(Defaults.DEFAULT_RESTART_POLICY, config.getDownstreamPolicy());\n    assertEquals(1, config.getRestartPath().get(0).getInstanceId());\n    assertEquals(2, config.getRestartPath().get(1).getInstanceId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/RestartConfigTest.java", "function_name": "testAddRestartNode", "index": 2240, "label": 0}
{"input": "private void validateStepId(\n      WorkflowInstance instance, String stepId, Actions.StepInstanceAction action) {\n    if (instance.getStatus().isTerminal()) {\n      throw new MaestroInvalidStatusException(\n          \"Cannot manually %s the step [%s] as its workflow instance status [%s] is terminal\",\n          action.name(), stepId, instance.getStatus());\n    }\n    if (!instance.getRuntimeDag().containsKey(stepId)) {\n      throw new MaestroBadRequestException(\n          Collections.emptyList(),\n          \"Cannot manually %s the step [%s] because the latest workflow run %s \"\n              + \"with status [%s] does not contain it in the runtime dag.\",\n          action.name(),\n          stepId,\n          instance.getIdentity(),\n          instance.getStatus());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDao.java", "function_name": "validateStepId", "index": 2241, "label": 0}
{"input": "private static RestartConfig copyRestartConfigWithClonedPath(RestartConfig toCopy) {\n    if (toCopy != null) {\n      return toCopy.toBuilder().restartPath(new ArrayList<>(toCopy.getRestartPath())).build();\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "copyRestartConfigWithClonedPath", "index": 2242, "label": 0}
{"input": "@Test\n  public void testGetRestartRunPolicyWithUpstreamRestartMode() {\n    StepInstanceRestartRequest request = new StepInstanceRestartRequest();\n    request.setRestartPolicy(RestartPolicy.RESTART_FROM_BEGINNING);\n    assertEquals(\n        RunPolicy.RESTART_FROM_SPECIFIC, request.getRestartRunPolicyWithUpstreamRestartMode());\n    request.setUpstreamRestartMode(UpstreamRestartMode.RESTART_FROM_STEP);\n    assertEquals(\n        RunPolicy.RESTART_FROM_SPECIFIC, request.getRestartRunPolicyWithUpstreamRestartMode());\n    request.setUpstreamRestartMode(UpstreamRestartMode.RESTART_FROM_INLINE_ROOT);\n    assertEquals(\n        RunPolicy.RESTART_FROM_BEGINNING, request.getRestartRunPolicyWithUpstreamRestartMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/api/StepInstanceRestartRequestTest.java", "function_name": "testGetRestartRunPolicyWithUpstreamRestartMode", "index": 2243, "label": 0}
{"input": "private int startLastOnlyInstance(Connection conn, WorkflowInstance instance)\n      throws SQLException {\n    InstanceRunUuid toTerminate = stopLastOnlyRunningInstance(conn, instance.getWorkflowId());\n    return insertInstance(conn, instance, false, toTerminate);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "startLastOnlyInstance", "index": 2244, "label": 0}
{"input": "@JsonIgnore\n  public static TimelineLogEvent error(String template, Object... args) {\n    return TimelineLogEvent.builder().level(Level.ERROR).message(template, args).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineLogEvent.java", "function_name": "error", "index": 2245, "label": 0}
{"input": "@Deprecated\n\t\tpublic EmbeddingRequestInputParameters(String textType) {\n\t\t\tthis(textType, null);\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57d0b6295b47a9bc0de24bbad89345bf03251a7f", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "EmbeddingRequestInputParameters", "index": 2246, "label": 0}
{"input": "public static ReportResponse error(String threadId, String message) {\n\t\treturn new ReportResponse(threadId, \"error\", message, null);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/model/response/ReportResponse.java", "function_name": "error", "index": 2247, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidCallGet() {\n    params.call(\"get\", new SelType[] {});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelParamsTest.java", "function_name": "testInvalidCallGet", "index": 2248, "label": 0}
{"input": "private String exportReport(String threadId, String format) {\n\t\tif (\"markdown\".equals(format) || \"md\".equals(format)) {\n\t\t\tString filePath = exportService.saveAsMarkdown(threadId);\n\t\t\treturn filePath;\n\t\t}\n\t\telse if (\"pdf\".equals(format)) {\n\t\t\treturn exportService.saveAsPdf(threadId);\n\t\t}\n\t\treturn null;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/controller/ExportController.java", "function_name": "exportReport", "index": 2249, "label": 0}
{"input": "@Test\n  public void testMergeSubworkflowRestartWithMutableOnStart() throws IOException {\n    DefaultParamManager defaultParamManager =\n        new DefaultParamManager(JsonHelper.objectMapperWithYaml());\n    defaultParamManager.init();\n    Map<String, ParamDefinition> allParams =\n        defaultParamManager.getDefaultParamsForType(StepType.SUBWORKFLOW).get();\n\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\n            \"{'subworkflow_version': {'value': 'active', 'type': 'STRING', 'mode': 'MUTABLE'}}\");\n\n    AssertHelper.assertThrows(\n        \"throws exception when a subworkflow source restarts and tries to mutate params with MUTABLE_ON_START mode\",\n        MaestroValidationException.class,\n        \"Cannot modify param with mode [MUTABLE_ON_START] for parameter [subworkflow_version]\",\n        () -> ParamsMergeHelper.mergeParams(allParams, paramsToMerge, upstreamRestartMergeContext));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeSubworkflowRestartWithMutableOnStart", "index": 2250, "label": 0}
{"input": "@Test\n  public void testEvalLiterals() {\n    assertEquals(Boolean.TRUE, evaluator.eval(\"1 + 1 == 2\", Collections.emptyMap()));\n    assertEquals(Boolean.TRUE, evaluator.eval(\"1 + 1 > 1;\", Collections.emptyMap()));\n    assertEquals(Boolean.FALSE, evaluator.eval(\"1 + 1 < 1\", Collections.emptyMap()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorTest.java", "function_name": "testEvalLiterals", "index": 2251, "label": 0}
{"input": "@Test\n  public void testCalculateEarliestExecutionDate() {\n    var triggers =\n        generateTriggers(\"0 30 2 7 5 ? 2021\", \"2021-01-01T00:00:00-00:00\", US_PACIFIC, null);\n    Optional<Date> earliestDate =\n        executionPlanner.calculateEarliestExecutionDate(triggers, \"test-workflow\");\n    assertEquals(parseDate(\"2021-05-07T02:30:00-07:00\"), earliestDate.get());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculateEarliestExecutionDate", "index": 2252, "label": 0}
{"input": "private Identifier parseIdentifier() {\n    if (lookahead != Token.IDENTIFIER) {\n      if (lookahead.isKeyword()) {\n        throw parserError(\"keywordNotAllowedHere\", lookahead.text());\n      }\n      throw parserError(\"unexpectedToken\", _lookahead.text(lexer), \"identifier\");\n    }\n    var tk = next();\n    var text = tk.text(lexer);\n    return new Identifier(text, tk.span);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseIdentifier", "index": 2253, "label": 0}
{"input": "@Override\n    public void afterRowCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,\n            Integer relativeRowIndex, Boolean isHead) {\n        if (isHead) {\n            Assertions.assertEquals(0L, beforeCellCreate);\n            Assertions.assertEquals(0L, afterCellCreate);\n            Assertions.assertEquals(0L, afterCellDataConverted);\n            Assertions.assertEquals(0L, afterCellDispose);\n            Assertions.assertEquals(1L, beforeRowCreate);\n            Assertions.assertEquals(0L, afterRowCreate);\n            Assertions.assertEquals(0L, afterRowDispose);\n            Assertions.assertEquals(1L, beforeSheetCreate);\n            Assertions.assertEquals(1L, afterSheetCreate);\n            Assertions.assertEquals(1L, beforeWorkbookCreate);\n            Assertions.assertEquals(1L, afterWorkbookCreate);\n            Assertions.assertEquals(0L, afterWorkbookDispose);\n            afterRowCreate++;\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/handler/WriteHandler.java", "function_name": "afterRowCreate", "index": 2254, "label": 0}
{"input": "@Override\n    public int getNextRetryDelayForPlatformError(long platformRetries) {\n      return platformRetryBackoffInSecs.intValue();\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/RetryPolicy.java", "function_name": "getNextRetryDelayForPlatformError", "index": 2255, "label": 0}
{"input": "public static long getTimeoutWithParamInMillis(\n      ParsableLong duration, Function<ParamDefinition, Parameter> paramParser) {\n    long timeout =\n        duration.parseLongWithParam(\n            paramParser, TimeUnit.SECONDS::toMillis, DurationParser::parseDuration);\n    Checks.checkTrue(\n        timeout > 0 && timeout <= Constants.MAX_TIME_OUT_LIMIT_IN_MILLIS,\n        \"timeout [%s ms]/[%s] cannot be non-positive or more than system limit: %s days\",\n        timeout,\n        duration,\n        TimeUnit.MILLISECONDS.toDays(Constants.MAX_TIME_OUT_LIMIT_IN_MILLIS));\n    return timeout;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/DurationParser.java", "function_name": "getTimeoutWithParamInMillis", "index": 2256, "label": 0}
{"input": "public void validateAndGetAbsolutePath(String workingDirectoryPath, String filePath) throws IOException {\n\t\tPath workingDir = Paths.get(workingDirectoryPath).toAbsolutePath().normalize();\n\t\tPath absolutePath = workingDir.resolve(filePath).normalize();\n\n\t\t\n\t\tif (!absolutePath.startsWith(workingDir)) {\n\t\t\tthrow new IOException(\"Access denied: File path must be within working directory\");\n\t\t}\n\n\t\t\n\t\tif (Files.exists(absolutePath) && Files.size(absolutePath) > 10 * 1024 * 1024) { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tthrow new IOException(\"File is too large (>10MB). For safety reasons, please use a smaller file.\");\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/textOperator/TextFileService.java", "function_name": "validateAndGetAbsolutePath", "index": 2257, "label": 0}
{"input": "public void evaluateWorkflowParameters(Map<String, Parameter> workflowParams, String workflowId) {\n    for (Parameter param : workflowParams.values()) {\n      parseWorkflowParameter(workflowParams, param, workflowId);\n    }\n    paramsSizeCheck(workflowParams, \"workflow id: \" + workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ParamEvaluator.java", "function_name": "evaluateWorkflowParameters", "index": 2258, "label": 0}
{"input": "@Test\n  public void testToMaestroEventStream() throws Exception {\n    WorkflowInstanceUpdateJobEvent sampleEvent =\n        loadObject(\n            \"fixtures/jobevents/sample-workflow-instance-job-event.json\",\n            WorkflowInstanceUpdateJobEvent.class);\n    List<WorkflowInstanceStatusChangeEvent> res =\n        sampleEvent.toMaestroEventStream(\"test-cluster\").collect(Collectors.toList());\n    assertEquals(2, res.size());\n    assertEquals(\"sample-dag-test-3\", res.get(0).getWorkflowId());\n    assertEquals(1L, res.get(0).getWorkflowInstanceId());\n    assertEquals(1, res.get(0).getDepth());\n    assertEquals(\"sample-dag-test-3\", res.get(1).getWorkflowId());\n    assertEquals(2L, res.get(1).getWorkflowInstanceId());\n    assertEquals(0, res.get(1).getDepth());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/jobevents/WorkflowInstanceUpdateJobEventTest.java", "function_name": "testToMaestroEventStream", "index": 2259, "label": 0}
{"input": "public static void createDirectoryIfNotExists(String directoryPath) {\n\t\tif (directoryPath == null) {\n\t\t\tlogger.error(\"Directory path is null\");\n\t\t\tthrow new IllegalArgumentException(\"Directory path cannot be null\");\n\t\t}\n\n\t\ttry {\n\t\t\tPath path = Paths.get(directoryPath);\n\t\t\tif (!Files.exists(path)) {\n\t\t\t\tFiles.createDirectories(path);\n\t\t\t\tlogger.info(\"Created directory: {}\", directoryPath);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlogger.error(\"Failed to create directory: {}\", directoryPath, e);\n\t\t\tthrow new RuntimeException(\"Failed to create directory: \" + directoryPath, e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FileOperationUtil.java", "function_name": "createDirectoryIfNotExists", "index": 2260, "label": 0}
{"input": "private void readAndWrite7(File file, ExcelTypeEnum type) {\n        EasyExcel.write(file, ParameterData.class).registerConverter(new StringStringConverter()).sheet()\n                .registerConverter(new StringStringConverter()).needHead(Boolean.FALSE).table(0).needHead(Boolean.TRUE)\n                .doWrite(data());\n        EasyExcel.read(file.getPath()).head(ParameterData.class).registerReadListener(new ParameterDataListener())\n                .sheet().registerConverter(new StringStringConverter()).doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/parameter/ParameterDataTest.java", "function_name": "readAndWrite7", "index": 2261, "label": 0}
{"input": "@RequestMapping(value = {\n            \"/\",\n            \"/wechat\",\n            \"/wechat/**\",\n    })\n    public String index() {\n        return \"index\";\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "fb64277fcd0164b7aae4e86515152b70a5117fae", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/controller/IndexController.java", "function_name": "index", "index": 2262, "label": 0}
{"input": "@Test\n  public void testRetrieveStepRuntimeStateObject() {\n    Assert.assertEquals(\n        state,\n        StepHelper.retrieveStepRuntimeState(\n            singletonMap(Constants.STEP_RUNTIME_SUMMARY_FIELD, summary), MAPPER));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/StepHelperTest.java", "function_name": "testRetrieveStepRuntimeStateObject", "index": 2263, "label": 0}
{"input": "@Override\n  public void checkPrintJobAccess() {\n    if (accs.get() != null) {\n      super.checkPrintJobAccess();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkPrintJobAccess", "index": 2264, "label": 0}
{"input": "private boolean jj_3_7() {\n    if (jj_3R_22()) return true;\n    if (jj_scan_token(IDENTIFIER)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_7", "index": 2265, "label": 0}
{"input": "@Test\n  public void testParseRetryPolicyWithNotFoundParamFallback() throws Exception {\n    WorkflowSummary workflowSummary = new WorkflowSummary();\n    workflowSummary.setParams(Map.of());\n    StepInstance.StepRetry actual = initializeStepRetry(true, workflowSummary);\n\n    \n    Assert.assertEquals(2, actual.getErrorRetryLimit());\n    Assert.assertEquals(10, actual.getPlatformRetryLimit());\n    Assert.assertEquals(0, actual.getTimeoutRetryLimit());\n    Assert.assertEquals(Defaults.DEFAULT_EXPONENTIAL_BACK_OFF, actual.getBackoff());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tasks/MaestroTaskTest.java", "function_name": "testParseRetryPolicyWithNotFoundParamFallback", "index": 2266, "label": 0}
{"input": "@Override\n        public Builder toBuilder() {\n            return this == DEFAULT_INSTANCE\n                    ? new Builder() : new Builder().mergeFrom(this);\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "toBuilder", "index": 2267, "label": 0}
{"input": "@Bean\n  public MetadataMapperService metadataMapperService(MetadataDAO metadataDAO) {\n    LOG.info(\"Creating metadataMapperService within Spring boot...\");\n    return new MetadataMapperService(metadataDAO);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "metadataMapperService", "index": 2268, "label": 0}
{"input": "public ResolveMethodNode(\n      SourceSection sourceSection,\n      Identifier methodName,\n      ExpressionNode[] argumentNodes,\n      boolean isBaseModule,\n      boolean isCustomThisScope,\n      ConstLevel constLevel,\n      int constDepth) {\n\n    super(sourceSection);\n\n    this.methodName = methodName;\n    this.argumentNodes = argumentNodes;\n    this.isBaseModule = isBaseModule;\n    this.isCustomThisScope = isCustomThisScope;\n    this.constLevel = constLevel;\n    this.constDepth = constDepth;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/member/ResolveMethodNode.java", "function_name": "ResolveMethodNode", "index": 2269, "label": 0}
{"input": "@Override\n  public void checkListen(int port) {\n    if (accs.get() != null) {\n      super.checkListen(port);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkListen", "index": 2270, "label": 0}
{"input": "private void backtrack() {\n    assert !backtracking;\n    lookahead = prev.token;\n    spanLookahead = prev.span;\n    backtracking = true;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "backtrack", "index": 2271, "label": 0}
{"input": "default TimelineActionEvent asAction() {\n    throw new MaestroInternalError(\n        \"TimelineEvent with type [%s] cannot be treated as ACTION event\", getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineEvent.java", "function_name": "asAction", "index": 2272, "label": 0}
{"input": "@Override\n    public List<Msg> queryMsgBySequence(String poolName, Long nextSequence) {\n        log.info(\"开始查询数据:[{}][{}]\", poolName, nextSequence);\n        \n        DynamicDataSourceContextHolder.push(poolName);\n        \n        List<Msg> msgs = getBaseMapper().queryMsgBySequence(nextSequence);\n        \n        DynamicDataSourceContextHolder.clear();\n        log.info(\"结束查询数据:[{}][{}]\", poolName, nextSequence);\n        \n        return msgs;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/MsgRepositoryImpl.java", "function_name": "queryMsgBySequence", "index": 2273, "label": 0}
{"input": "public static JSONObject getQrCode(String appId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        return OkhttpUtil.postJSON(\"/personal/getQrCode\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/PersonalApi.java", "function_name": "getQrCode", "index": 2274, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"triggers.signal-trigger.type\", havingValue = \"sqs\")\n  public SqsSignalTriggerExecutionListener sqsSignalTriggerExecutionListener(\n      SignalTriggerExecutionProcessor processor, ObjectMapper mapper) {\n    LOG.info(\"Creating sqsSignalTriggerExecutionListener within Spring boot...\");\n    return new SqsSignalTriggerExecutionListener(processor, mapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsSignalTriggerExecutionListener", "index": 2275, "label": 0}
{"input": "@Test\n  public void testCallArraysAsList() {\n    SelType res =\n        SelMiscFunc.INSTANCE.call(\n            \"asList\", new SelType[] {SelArray.of(new long[] {1}, SelTypes.LONG_ARRAY)});\n    assertEquals(SelTypes.LONG_ARRAY, res.type());\n    assertEquals(\"[1]\", (res).toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMiscFuncTest.java", "function_name": "testCallArraysAsList", "index": 2276, "label": 0}
{"input": "private String buildInputPath(MapParameter notebookParams) {\n    return notebookParams.getEvaluatedParam(NotebookConstants.NOTEBOOK_INPUT_PARAM).asString();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/main/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilder.java", "function_name": "buildInputPath", "index": 2277, "label": 0}
{"input": "private TypedIdentifier parseTypedIdentifier() {\n    var identifier = parseIdentifier();\n    TypeAnnotation typeAnnotation = null;\n    var end = identifier.span();\n    if (lookahead == Token.COLON) {\n      typeAnnotation = parseTypeAnnotation();\n      end = typeAnnotation.span();\n    }\n    return new TypedIdentifier(identifier, typeAnnotation, identifier.span().endWith(end));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseTypedIdentifier", "index": 2278, "label": 0}
{"input": "public final Token getToken(int index) {\n    Token t = token;\n    for (int i = 0; i < index; i++) {\n      if (t.next != null) t = t.next;\n      else t = t.next = token_source.getNextToken();\n    }\n    return t;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "getToken", "index": 2279, "label": 0}
{"input": "public TypeAlias(List<Node> children, int modifiersOffset, int nameOffset, Span span) {\n    super(span, children);\n    this.modifiersOffset = modifiersOffset;\n    this.nameOffset = nameOffset;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeAlias.java", "function_name": "TypeAlias", "index": 2280, "label": 0}
{"input": "public static Calendar getJavaCalendar(double date, boolean use1904windowing, TimeZone timeZone,\n            boolean roundSeconds) {\n        if (!isValidExcelDate(date)) {\n            return null;\n        }\n        int wholeDays = (int) Math.floor(date);\n        int millisecondsInDay = (int) ((date - wholeDays) * DAY_MILLISECONDS + 0.5);\n        Calendar calendar;\n        if (timeZone != null) {\n            calendar = LocaleUtil.getLocaleCalendar(timeZone);\n        } else {\n            calendar = LocaleUtil.getLocaleCalendar(); \n        }\n        setCalendar(calendar, wholeDays, millisecondsInDay, use1904windowing, roundSeconds);\n        return calendar;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/DateUtils.java", "function_name": "getJavaCalendar", "index": 2281, "label": 0}
{"input": "private void addRegularEntry(VirtualFrame frame, ObjectData data) {\n    var key = keyNode.executeGeneric(frame);\n    data.addMember(frame, key, member, this);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorEntryNode.java", "function_name": "addRegularEntry", "index": 2282, "label": 0}
{"input": "@Override\n    protected String getNextEntryName(@Nullable ExpressionNode keyNode) {\n      var parent = getParent();\n      assert parent != null;\n      return parent.getNextEntryName(keyNode);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java", "function_name": "getNextEntryName", "index": 2283, "label": 0}
{"input": "private void dealOnceAbsoluteMerge(List<WriteHandler> handlerList) {\n        OnceAbsoluteMergeProperty onceAbsoluteMergeProperty = getExcelWriteHeadProperty().getOnceAbsoluteMergeProperty();\n        if (onceAbsoluteMergeProperty == null) {\n            return;\n        }\n        handlerList.add(new OnceAbsoluteMergeStrategy(onceAbsoluteMergeProperty));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/metadata/holder/AbstractWriteHolder.java", "function_name": "dealOnceAbsoluteMerge", "index": 2284, "label": 0}
{"input": "private boolean jj_2_5(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_5();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(4, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_5", "index": 2285, "label": 0}
{"input": "public static Optional<Double> toDouble(String input) {\n    if (input == null) {\n      return Optional.empty();\n    }\n    try {\n      return Optional.of(Double.parseDouble(input));\n    } catch (NumberFormatException nfe) {\n      return Optional.empty();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/Checks.java", "function_name": "toDouble", "index": 2286, "label": 0}
{"input": "private String escapeNonAscii(String input) {\n        if (input == null) return \"\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : input.toCharArray()) {\n            if (c >= 32 && c < 127) {\n                sb.append(c);\n            }\n            else {\n                sb.append(\"\\\\x\");\n                sb.append(Integer.toHexString(c & 0xFF));\n            }\n        }\n        return sb.toString();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "bc3579d4753ffdd37a6a3635727268908104387e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "escapeNonAscii", "index": 2287, "label": 0}
{"input": "@Test\n    public void t22SheetNoRead07() {\n        List<Map<Integer, Object>> list = EasyExcel.read(\n                TestFileUtil.readFile(\"simple\" + File.separator + \"simple07.xlsx\"))\n            \n            .sheet(1)\n            .doReadSync();\n        Assertions.assertEquals(1, list.size());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "a58eb2fbe032b79f9012cb8f0af034c47183f723", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/simple/SimpleDataTest.java", "function_name": "t22SheetNoRead07", "index": 2288, "label": 0}
{"input": "public static boolean fileExists(String filePath) {\n\t\treturn filePath != null && Files.exists(Paths.get(filePath));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FileOperationUtil.java", "function_name": "fileExists", "index": 2289, "label": 0}
{"input": "public void evaluateSignalDependenciesOrOutputsParameters(\n      Map<String, Map<String, Object>> allStepOutputData,\n      Map<String, Parameter> workflowParams,\n      Map<String, Parameter> stepParams,\n      List<MapParameter> parameters,\n      String stepId) {\n    parameters.forEach(\n        v -> parseStepParameter(allStepOutputData, workflowParams, stepParams, v, stepId));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ParamEvaluator.java", "function_name": "evaluateSignalDependenciesOrOutputsParameters", "index": 2290, "label": 0}
{"input": "@SuppressWarnings({\"PMD.AvoidInstantiatingObjectsInLoops\"})\n  private static Map<String, GraphNode> computeNodeMap(\n      String workflowId, Map<String, Step> stepMap) {\n    Map<String, GraphNode> nodeMap = new HashMap<>();\n    for (Step step : stepMap.values()) {\n      String parent = step.getId();\n      if (!nodeMap.containsKey(parent)) {\n        nodeMap.put(parent, new GraphNode(parent));\n      }\n      for (String child : step.getTransition().getSuccessors().keySet()) {\n        if (!nodeMap.containsKey(child)) {\n          nodeMap.put(child, new GraphNode(child));\n        }\n        nodeMap.get(parent).addChild(nodeMap.get(child));\n        nodeMap.get(child).addParent(nodeMap.get(parent));\n      }\n    }\n    Checks.checkTrue(\n        nodeMap.size() == stepMap.size(),\n        \"Invalid workflow definition [%s], step number mismatch between steps [%s] and dag definition [%s]\",\n        workflowId,\n        stepMap.size(),\n        nodeMap.size());\n    return nodeMap;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/transformation/WorkflowGraph.java", "function_name": "computeNodeMap", "index": 2291, "label": 0}
{"input": "private void roundTripSerde(String fileName) throws Exception {\n    RestartConfig config = loadObject(fileName, RestartConfig.class);\n    assertEquals(config, MAPPER.readValue(MAPPER.writeValueAsString(config), RestartConfig.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/RestartConfigTest.java", "function_name": "roundTripSerde", "index": 2292, "label": 0}
{"input": "private void emitStepDelayMetric(StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary.getRuntimeState() == null) {\n      return;\n    }\n\n    Long stepInitTime = runtimeSummary.getRuntimeState().getInitializeTime();\n    Long stepCreateTime = runtimeSummary.getRuntimeState().getCreateTime();\n\n    if (stepInitTime == null || stepCreateTime == null) {\n      return;\n    }\n\n    long stepInitDelay = stepInitTime - stepCreateTime;\n    metrics.timer(MetricConstants.STEP_INITIALIZE_DELAY_METRIC, stepInitDelay, getClass());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "emitStepDelayMetric", "index": 2293, "label": 0}
{"input": "@Test\n    public void customHandlerWrite() {\n        String fileName = TestFileUtil.getPath() + \"customHandlerWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        EasyExcel.write(fileName, DemoData.class).registerWriteHandler(new CustomSheetWriteHandler())\n                .registerWriteHandler(new CustomCellWriteHandler()).sheet(\"模板\").doWrite(data());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "customHandlerWrite", "index": 2294, "label": 0}
{"input": "public final boolean isValueTypeKnownSubtypeOf(TypeNode typeNode) {\n    if (typeNode.isNoopTypeCheck()) {\n      return true;\n    }\n    if (typeCastNode == null) {\n      return false;\n    }\n    return typeCastNode.getTypeNode().isEquivalentTo(typeNode);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmListingOrMapping.java", "function_name": "isValueTypeKnownSubtypeOf", "index": 2295, "label": 0}
{"input": "private void setCheckBoxWithoutTriggeringListener(CheckBox checkBox, boolean isChecked, CheckBox.OnCheckedChangeListener listener) {\n        checkBox.setOnCheckedChangeListener(null); \n        checkBox.setChecked(isChecked); \n        checkBox.setOnCheckedChangeListener(listener); \n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/ui/SettingsActivity.java", "function_name": "setCheckBoxWithoutTriggeringListener", "index": 2296, "label": 0}
{"input": "@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tthis.agentModels().forEach(registerConsumer);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "a50eb99d4edfc442e0248b9a6fad4d69ebc0aef1", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentModelsConfiguration.java", "function_name": "afterPropertiesSet", "index": 2297, "label": 0}
{"input": "@ExceptionHandler({MaestroRuntimeException.class})\n  protected ResponseEntity<Object> handleMaestroRuntimeException(\n      MaestroRuntimeException e, WebRequest request) {\n    LOG.info(\"Handle [{}] with a message: {}\", e.getClass().getSimpleName(), e.getMessage());\n    return buildDetailedResponse(e, HttpStatus.valueOf(e.getHttpStatusCode()), request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleMaestroRuntimeException", "index": 2298, "label": 0}
{"input": "static long parseDurationInSecs(String duration) {\n    return TimeUnit.MILLISECONDS.toSeconds(parseDuration(duration));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/DurationParser.java", "function_name": "parseDurationInSecs", "index": 2299, "label": 0}
{"input": "@Test\n  public void isTransitionSuccessorValid() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    StepTransition transition = new StepTransition();\n    transition.setSuccessors(Collections.singletonMap(\"bar\", \"true\"));\n    step.setTransition(transition);\n    Workflow workflow = Workflow.builder().steps(Collections.singletonList(step)).build();\n    Set<ConstraintViolation<TestWorkflow>> violations =\n        validator.validate(new TestWorkflow(workflow));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestWorkflow> violation = violations.iterator().next();\n    assertEquals(\"workflow.steps\", violation.getPropertyPath().toString());\n    assertEquals(\n        \"[workflow step transition] is invalid for step [foo]'s successor step id [bar], which does not exist in steps\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/WorkflowConstraintTest.java", "function_name": "isTransitionSuccessorValid", "index": 2300, "label": 0}
{"input": "FieldCacheKey(Class<?> clazz, ConfigurationHolder configurationHolder) {\n            this.clazz = clazz;\n            if (configurationHolder instanceof WriteHolder) {\n                WriteHolder writeHolder = (WriteHolder) configurationHolder;\n                this.excludeColumnFieldNames = writeHolder.excludeColumnFieldNames();\n                this.excludeColumnIndexes = writeHolder.excludeColumnIndexes();\n                this.includeColumnFieldNames = writeHolder.includeColumnFieldNames();\n                this.includeColumnIndexes = writeHolder.includeColumnIndexes();\n            }\n        }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/ClassUtils.java", "function_name": "FieldCacheKey", "index": 2301, "label": 0}
{"input": "public AppInfo(String name, IconLoader iconLoader, String packageName, boolean isSelected) {\n            this.appName = name;\n            this.packageName = packageName;\n            this.iconLoader = iconLoader;\n            this.isSelected = isSelected;\n        }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/BypassListAppsAdapter.java", "function_name": "AppInfo", "index": 2302, "label": 0}
{"input": "@Test\n  public void testSerialization() throws Exception {\n    Numbers numbers = new Numbers();\n    numbers.setNumber1(ParsableLong.of(1L));\n    numbers.setNumber2(ParsableLong.of(0L));\n    numbers.setNumber3(ParsableLong.of(\"4\"));\n\n    String serialized = MAPPER.writeValueAsString(numbers);\n    String expected = \"{\\\"number1\\\":1,\\\"number2\\\":0,\\\"number3\\\":\\\"4\\\"}\";\n\n    assertEquals(expected, serialized);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/ParsableLongTest.java", "function_name": "testSerialization", "index": 2303, "label": 0}
{"input": "public ClassMethod(\n      List<Node> nodes, int modifiersOffset, int nameOffset, Span headerSpan, Span span) {\n    super(span, nodes);\n    this.headerSpan = headerSpan;\n    this.modifiersOffset = modifiersOffset;\n    this.nameOffset = nameOffset;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ClassMethod.java", "function_name": "ClassMethod", "index": 2304, "label": 0}
{"input": "@Test\n  public void testValidDefaultDryRunParams() {\n    assertFalse(defaultParamManager.getDefaultDryRunParams().isEmpty());\n    assertNotNull(defaultParamManager.getDefaultDryRunParams().get(\"FROM_DATE\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testValidDefaultDryRunParams", "index": 2305, "label": 0}
{"input": "public static float getDimensionPixelSize(int resource) {\n        return ApplicationLoader.getAppCtx().getResources().getDimensionPixelSize(resource);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocalController.java", "function_name": "getDimensionPixelSize", "index": 2306, "label": 0}
{"input": "void wakeUpChildActor(String ref, Action action) {\n    BaseActor actor = childActors.get(ref);\n    if (actor != null && actor.isRunning()) {\n      actor.post(action);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "wakeUpChildActor", "index": 2307, "label": 0}
{"input": "private boolean updateBlockList() {\n        RqBlockList updateBlockList = new RqBlockList();\n        TypedResponse<RsBlockList> updateBlockListResp = client.execute(updateBlockList);\n        if (!updateBlockListResp.isSuccess()) {\n            setBlockListUrl(\"http://peerbanhelper-blocklist-update-failed.com/check-peerbanhelper-webui-prefix-settings\");\n            return false;\n        }\n        return true;\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "802dc1084e54f7c59c02aedc7f8cd8b4fb4ffd83", "file_path": "src/main/java/com/ghostchu/peerbanhelper/downloader/impl/transmission/Transmission.java", "function_name": "updateBlockList", "index": 2308, "label": 0}
{"input": "@Override\n    public void createMainWindow() {\n        mainWindow = new SwingMainWindow(this);\n        swingTaskbarControl = new SwingTaskbarControl(mainWindow);\n        initLoggerRedirection();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swing/SwingGuiImpl.java", "function_name": "createMainWindow", "index": 2309, "label": 0}
{"input": "public TypeParameterList(List<TypeParameter> parameters, Span span) {\n    super(span, parameters);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeParameterList.java", "function_name": "TypeParameterList", "index": 2310, "label": 0}
{"input": "private StringBuilder prepareProperties(\n      List<StatementPreparer> preparers, String workflowId, PropertiesSnapshot snapshot) {\n    StringBuilder fields = new StringBuilder();\n    prepareStringField(fields, WORKFLOW_ID_COLUMN, preparers, workflowId);\n    if (snapshot != null) {\n      prepareJsonbField(fields, \",properties_snapshot\", preparers, snapshot);\n    }\n    return fields;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "prepareProperties", "index": 2311, "label": 0}
{"input": "@Test\n  public void testValidateParamAndDeriveDirection() {\n    AssertHelper.assertThrows(\n        \"should fail as both params are null\",\n        MaestroValidationException.class,\n        \"Either first or last need to be provided, both cannot be null\",\n        () -> PaginationHelper.validateParamAndDeriveDirection(null, null));\n    AssertHelper.assertThrows(\n        \"should fail as both params are provided\",\n        MaestroValidationException.class,\n        \"Either first or last need to be provided, but not both\",\n        () -> PaginationHelper.validateParamAndDeriveDirection(1L, 10L));\n    PaginationDirection direction = PaginationHelper.validateParamAndDeriveDirection(1L, null);\n    assertEquals(PaginationDirection.NEXT, direction);\n    direction = PaginationHelper.validateParamAndDeriveDirection(null, 10L);\n    assertEquals(PaginationDirection.PREV, direction);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9f6ef6ad453085e3c04ab55405fc7b256c5a9c9b", "file_path": "maestro-server/src/test/java/com/netflix/maestro/server/utils/PaginationHelperTest.java", "function_name": "testValidateParamAndDeriveDirection", "index": 2312, "label": 0}
{"input": "public static String getCountryCode(String name) {\n        for (String code : Locale.getISOCountries()) {\n            Locale locale = new Locale(\"en\", code); \n            if (locale.getDisplayCountry(Locale.ENGLISH).equalsIgnoreCase(name)) {\n                return code;\n            }\n        }\n        return \"\";\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "c5da2639ff2e87ab6ccffa3371940923892cca84", "file_path": "app/src/main/java/org/bepass/oblivion/CountryUtils.java", "function_name": "getCountryCode", "index": 2313, "label": 0}
{"input": "private RunWorkflowInstancesJobEvent getRunWorkflowInstances(\n      Connection conn, String workflowId, long concurrency, long limit) throws SQLException {\n    RunWorkflowInstancesJobEvent startInstances = RunWorkflowInstancesJobEvent.init(workflowId);\n    try (PreparedStatement stmt = conn.prepareStatement(GET_QUEUED_WORKFLOW_INSTANCES_QUERY)) {\n      int idx = 0;\n      stmt.setString(++idx, workflowId);\n      stmt.setLong(++idx, concurrency);\n      stmt.setLong(++idx, limit);\n      stmt.setLong(++idx, concurrency);\n      stmt.setString(++idx, workflowId);\n      try (ResultSet result = stmt.executeQuery()) {\n        while (result.next()) {\n          startInstances.addOneRun(readInstanceRunUuidFromResult(result));\n        }\n      }\n      return startInstances;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "getRunWorkflowInstances", "index": 2314, "label": 0}
{"input": "public static OpenAiStreamClient createOpenAiStreamClient(String apiHost, String apiKey,String url) {\n        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor(new OpenAILogger());\n        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.HEADERS);\n        OkHttpClient okHttpClient = new OkHttpClient.Builder()\n            .addInterceptor(httpLoggingInterceptor)\n            .connectTimeout(30, TimeUnit.SECONDS)\n            .writeTimeout(600, TimeUnit.SECONDS)\n            .readTimeout(600, TimeUnit.SECONDS)\n            .build();\n        return OpenAiStreamClient.builder()\n            .apiHost(apiHost)\n            .apiUrl(url)\n            .apiKey(Collections.singletonList(apiKey))\n            .keyStrategy(new KeyRandomStrategy())\n            .okHttpClient(okHttpClient)\n            .build();\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "1bddf5df3b77e505a9f41a1efa7b081cde32f931", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/config/ChatConfig.java", "function_name": "createOpenAiStreamClient", "index": 2315, "label": 0}
{"input": "public void getChatGptResponse(String prompt) throws IOException {\n        RequestBody body = RequestBody.create(MediaType.get(\"application/json; charset=utf-8\"),\n            \"{\\\"model\\\": \\\"gpt-3.5-turbo\\\", \\\"messages\\\": [{\\\"role\\\": \\\"system\\\", \\\"content\\\": \\\"You are a helpful assistant.\\\"}, {\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"\" + prompt + \"\\\"}]}\");\n\n        Request request = new Request.Builder()\n            .url(URL)\n            .post(body)\n            .addHeader(\"Authorization\", \"Bearer \" + API_KEY)\n            .build();\n\n        try (Response response = client.newCall(request).execute()) {\n\n        }\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "e3da640737feb920dd8b0d589f37b6d3db282aa0", "file_path": "ruoyi-common/ruoyi-common-chat/src/main/java/org/ruoyi/common/chat/openai/TestOpenAIAPI.java", "function_name": "getChatGptResponse", "index": 2316, "label": 0}
{"input": "private void includeIndex(File file) {\n        Set<Integer> includeColumnIndexes = new HashSet<Integer>();\n        includeColumnIndexes.add(1);\n        includeColumnIndexes.add(2);\n        EasyExcel.write(file, ExcludeOrIncludeData.class).includeColumnIndexes(includeColumnIndexes).sheet()\n            .doWrite(data());\n        List<Map<Integer, String>> dataMap = EasyExcel.read(file).sheet().doReadSync();\n        Assertions.assertEquals(1, dataMap.size());\n        Map<Integer, String> record = dataMap.get(0);\n        Assertions.assertEquals(2, record.size());\n        Assertions.assertEquals(\"column2\", record.get(0));\n        Assertions.assertEquals(\"column3\", record.get(1));\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "f92c3168bd3a9d3d4d1c64348601b2300f39b89d", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/excludeorinclude/ExcludeOrIncludeDataTest.java", "function_name": "includeIndex", "index": 2317, "label": 0}
{"input": "@Bean\n  public KubernetesStepRuntime kubernetes(\n      @Qualifier(STEP_RUNTIME_QUALIFIER) Map<StepType, StepRuntime> stepRuntimeMap,\n      KubernetesRuntimeExecutor runtimeExecutor,\n      KubernetesCommandGenerator commandGenerator,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating kubernetes step within Spring boot...\");\n    KubernetesStepRuntime step =\n        new KubernetesStepRuntime(runtimeExecutor, commandGenerator, metrics);\n    stepRuntimeMap.put(StepType.KUBERNETES, step);\n    return step;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "kubernetes", "index": 2318, "label": 0}
{"input": "public void validateAndMergeOutputParams(StepRuntimeSummary runtimeSummary) {\n    Optional<String> externalJobId = extractExternalJobId(runtimeSummary);\n    if (externalJobId.isPresent()) {\n      Optional<OutputData> outputDataOpt =\n          outputDataDao.getOutputDataForExternalJob(externalJobId.get(), ExternalJobType.TITUS);\n      outputDataOpt.ifPresent(\n          outputData -> {\n            ParamsMergeHelper.mergeOutputDataParams(\n                runtimeSummary.getParams(), outputData.getParams());\n          });\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/OutputDataManager.java", "function_name": "validateAndMergeOutputParams", "index": 2319, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsAndEndStepIds() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(),\n                Arrays.asList(\"job.5\", \"job.3\"),\n                Collections.singletonList(\"job.6\")));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(2, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.3\", \"#job.6\", \"job.6\"), paths.get(0));\n    Assert.assertEquals(Collections.singletonList(\"job.5\"), paths.get(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsAndEndStepIds", "index": 2320, "label": 0}
{"input": "@Test\n  public void testStartFlow() {\n    var id = executor.startFlow(1, \"test-id\", \"wf-1\", new FlowDef(), Map.of());\n    verify(context, times(1)).trySaveGroup(any());\n    var actorCaptor = ArgumentCaptor.forClass(Actor.class);\n    verify(context, times(1)).run(actorCaptor.capture());\n    var flowCaptor = ArgumentCaptor.forClass(Flow.class);\n    verify(context, times(1)).saveFlow(flowCaptor.capture());\n    assertEquals(\"test-id\", id);\n    assertTrue(actorCaptor.getValue().isRunning());\n    assertEquals(\"wf-1\", flowCaptor.getValue().getReference());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/FlowExecutorTest.java", "function_name": "testStartFlow", "index": 2321, "label": 0}
{"input": "@Test\n  public void testDoneWithFailedStep() {\n    Map<String, Boolean> idStatusMap = new LinkedHashMap<>();\n    idStatusMap.put(\"job_5\", Boolean.TRUE);\n    idStatusMap.put(\"job_2\", Boolean.TRUE);\n    idStatusMap.put(\"job_3\", Boolean.FALSE);\n    Assert.assertTrue(DagHelper.isDone(runtimeDag2, idStatusMap, null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testDoneWithFailedStep", "index": 2322, "label": 0}
{"input": "private String getEscapeText(FullToken tk) {\n    return switch (tk.token) {\n      case STRING_ESCAPE_NEWLINE -> \"\\n\";\n      case STRING_ESCAPE_QUOTE -> \"\\\"\";\n      case STRING_ESCAPE_BACKSLASH -> \"\\\\\";\n      case STRING_ESCAPE_TAB -> \"\\t\";\n      case STRING_ESCAPE_RETURN -> \"\\r\";\n      case STRING_ESCAPE_UNICODE -> parseUnicodeEscape(tk);\n      default -> throw PklBugException.unreachableCode();\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2ffd201172a2416d00fbfba9de2ada7feb39ea65", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "getEscapeText", "index": 2323, "label": 0}
{"input": "@Override\n  public GeneratorMemberNode visitObjectEntry(ObjectEntryContext ctx) {\n    var keyNodeAndMember = doVisitObjectEntry(ctx);\n    var keyNode = keyNodeAndMember.first;\n    var member = keyNodeAndMember.second;\n    var isFrameStored =\n        member.getMemberNode() != null && symbolTable.getCurrentScope().isForGeneratorScope();\n    return GeneratorEntryNodeGen.create(keyNode, member, isFrameStored);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "visitObjectEntry", "index": 2324, "label": 0}
{"input": "private List<StringPart> validateMultiLineString(List<TempNode> nodes, Span span) {\n    var firstNode = nodes.isEmpty() ? null : nodes.get(0);\n    if (firstNode == null\n        || firstNode.token == null\n        || firstNode.token.token != Token.STRING_NEWLINE) {\n      var errorSpan = firstNode == null ? span : firstNode.span();\n      throw new ParserError(ErrorMessages.create(\"stringContentMustBeginOnNewLine\"), errorSpan);\n    }\n    \n    if (nodes.size() == 1) {\n      return List.of(new StringChars(\"\", firstNode.span()));\n    }\n    var indent = getCommonIndent(nodes, span);\n    return renderString(nodes, indent);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2ffd201172a2416d00fbfba9de2ada7feb39ea65", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "validateMultiLineString", "index": 2325, "label": 0}
{"input": "public static Drawable getDrawable(int resource) {\n        return ContextCompat.getDrawable(ApplicationLoader.getAppCtx(), resource);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocalController.java", "function_name": "getDrawable", "index": 2326, "label": 0}
{"input": "@Test\n  public void testDefaultNonLeafStepNoAction() {\n    event.setEntityType(StepInstanceWakeUpEvent.EntityType.STEP);\n    setStepInstanceDefinition(StepType.TEMPLATE);\n    setStepInstanceRuntimeState(StepInstance.Status.PLATFORM_FAILED);\n    event.setStepAction(Actions.StepInstanceAction.STOP);\n    subject.process(() -> event);\n\n    Mockito.verify(stepInstanceDao, Mockito.times(1))\n        .getStepInstance(workflowId, workflowInstanceId, workflowRunId, stepId, stepAttemptId);\n    Mockito.verifyNoInteractions(workflowInstanceDao);\n    Mockito.verifyNoInteractions(workflowExecutor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "testDefaultNonLeafStepNoAction", "index": 2327, "label": 0}
{"input": "private void createMenuBar() {\n        Menu menuBar = new Menu(shell, SWT.BAR);\n        shell.setMenuBar(menuBar);\n\n        \n        createProgramMenu(menuBar);\n\n        \n        createWebUIMenu(menuBar);\n\n        \n        createHelpAboutMenu(menuBar);\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtMainWindow.java", "function_name": "createMenuBar", "index": 2328, "label": 0}
{"input": "Task createRunningTestTask(String taskId) {\n    Task task = new Task();\n    task.setTaskId(taskId);\n    task.setTaskDefName(TEST_TASK_DEF_NAME);\n    task.setStatus(Task.Status.IN_PROGRESS);\n    task.setStartTime(System.currentTimeMillis());\n    task.setWorkflowInstanceId(TEST_WORKFLOW_ID);\n    return task;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseTest.java", "function_name": "createRunningTestTask", "index": 2329, "label": 0}
{"input": "private void connecting() {\n        stateText.setText(\"در حال اتصال...\");\n        publicIP.setVisibility(View.GONE);\n        ipDetails.setVisibility(View.GONE);\n        switchButton.setChecked(true, false);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef0fcfd4c01010bae03a588b4a50ce4b33749f7d", "file_path": "app/src/main/java/org/bepass/oblivion/MainActivity.java", "function_name": "connecting", "index": 2330, "label": 0}
{"input": "private boolean setDecompilerComment(String addressStr, String comment) {\n        return setCommentAtAddress(addressStr, comment, CodeUnit.PRE_COMMENT, \"Set decompiler comment\");\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "setDecompilerComment", "index": 2331, "label": 0}
{"input": "@Test\n  public void testFlowFinalizedForDedup() {\n    when(flow.getStatus()).thenReturn(Flow.Status.FAILED);\n    when(flow.getReasonForIncompletion())\n        .thenReturn(MaestroStartTask.DEDUP_FAILURE_PREFIX + \"test-reason\");\n    statusListener.onFlowFinalized(flow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowFinalized\",\n                \"status\",\n                \"FAILED\")\n            .count());\n    verify(instanceDao, times(0)).updateWorkflowInstance(any(), any(), any(), any(), anyLong());\n    verify(publisher, times(0)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testFlowFinalizedForDedup", "index": 2332, "label": 0}
{"input": "public static Map<StepDependencyType, StepDependencies> getStepDependencies(\n      Workflow workflow, String stepId, ObjectMapper objectMapper) {\n    if (workflow\n        .getTaskByRefName(Constants.DEFAULT_START_STEP_NAME)\n        .getOutputData()\n        .containsKey(MaestroStartTask.ALL_STEP_DEPENDENCIES)) {\n      Map<String, Map<StepDependencyType, StepDependencies>> allStepDependencies =\n          convertField(\n              objectMapper,\n              workflow.getTaskByRefName(Constants.DEFAULT_START_STEP_NAME).getOutputData(),\n              MaestroStartTask.ALL_STEP_DEPENDENCIES,\n              ALL_STEP_DEPENDENCIES_REFERENCE);\n      if (allStepDependencies != null) {\n        return allStepDependencies.get(stepId);\n      }\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "getStepDependencies", "index": 2333, "label": 0}
{"input": "private void saveStartupAgent(StartupAgentConfigLoader.AgentConfig agentConfig) {\n\t\t\n\t\tDynamicAgentEntity existingEntity = repository.findByAgentName(agentConfig.getAgentName());\n\n\t\t\n\t\tDynamicAgentEntity entity = (existingEntity != null) ? existingEntity : new DynamicAgentEntity();\n\n\t\t\n\t\tentity.setAgentName(agentConfig.getAgentName());\n\t\tentity.setAgentDescription(agentConfig.getAgentDescription());\n\t\tentity.setNextStepPrompt(agentConfig.getNextStepPrompt());\n\t\tentity.setAvailableToolKeys(agentConfig.getAvailableToolKeys());\n\t\tentity.setClassName(\"\"); \n\n\t\t\n\t\trepository.save(entity);\n\t\tString action = (existingEntity != null) ? \"更新\" : \"创建\";\n\t\tlog.info(\"已{}基于配置文件的动态代理: {}\", action, entity.getAgentName());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/service/DynamicAgentScanner.java", "function_name": "saveStartupAgent", "index": 2334, "label": 0}
{"input": "@Autowired\n  public StepInstanceActionController(\n      StepInstanceActionHandler stepActionHandler, User.UserBuilder callerBuilder) {\n    this.stepActionHandler = stepActionHandler;\n    this.callerBuilder = callerBuilder;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepInstanceActionController.java", "function_name": "StepInstanceActionController", "index": 2335, "label": 0}
{"input": "public static Typeface getFont(String fontName) {\n        try {\n            return Typeface.createFromAsset(ApplicationLoader.getAppCtx().getAssets(), \"fonts/\" + fontName + \".ttf\");\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n            \n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/LocalController.java", "function_name": "getFont", "index": 2336, "label": 0}
{"input": "@Test\n  public void testParseLiteralStepParameterWithStepId() {\n    StringParameter bar = StringParameter.builder().name(\"bar\").value(\"test ${step1__foo}\").build();\n    paramEvaluator.parseStepParameter(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        Collections.singletonMap(\"foo\", StringParameter.builder().value(\"123\").build()),\n        bar,\n        \"step1\");\n    assertEquals(\"test 123\", bar.getEvaluatedResult());\n\n    bar = StringParameter.builder().name(\"bar\").value(\"test ${step1__foo}\").build();\n    paramEvaluator.parseStepParameter(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        Collections.singletonMap(\n            \"foo\", StringParameter.builder().evaluatedResult(\"123\").evaluatedTime(123L).build()),\n        bar,\n        \"step1\");\n    assertEquals(\"test 123\", bar.getEvaluatedResult());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseLiteralStepParameterWithStepId", "index": 2337, "label": 0}
{"input": "private Map<String, Object> getSubProperties(PropertySources propertySources, PropertyResolver propertyResolver,\n\t\t\tString prefix) {\n\n\t\tMap<String, Object> subProperties = new LinkedHashMap<String, Object>();\n\n\t\tfor (PropertySource<?> source : propertySources) {\n\t\t\tfor (String name : getPropertyNames(source)) {\n\t\t\t\tif (!subProperties.containsKey(name) && name.startsWith(prefix)) {\n\t\t\t\t\tString subName = name.substring(prefix.length() + 1);\n\t\t\t\t\tif (!subProperties.containsKey(subName)) { \n\t\t\t\t\t\tObject value = source.getProperty(name);\n\t\t\t\t\t\tif (value instanceof String) {\n\t\t\t\t\t\t\tvalue = propertyResolver.resolvePlaceholders((String) value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubProperties.put(subName, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Collections.unmodifiableMap(subProperties);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "442bb2a794e6e258541f5ae07eebbd135201dc3a", "file_path": "spring-ai-alibaba-mcp/spring-ai-alibaba-mcp-nacos2/src/main/java/com/alibaba/cloud/ai/mcp/nacos2/NacosMcpProperties.java", "function_name": "getSubProperties", "index": 2338, "label": 0}
{"input": "@Test\n  public void testNoConstraintViolations() {\n    Map<String, ParamDefinition> paramDefMap = new LinkedHashMap<>();\n    paramDefMap.put(\"name\", StringParamDefinition.builder().name(\"name\").value(\"foo\").build());\n    paramDefMap.put(\"bar\", StringParamDefinition.builder().name(\"bar\").value(\"123\").build());\n    MapParamDefinition mapParamDefinition = MapParamDefinition.builder().value(paramDefMap).build();\n\n    StepOutputsDefinition definition =\n        new SignalOutputsDefinition(Collections.singletonList(mapParamDefinition));\n    Set<ConstraintViolation<TestStep>> constraintViolations =\n        validator.validate(\n            new TestStepImpl(\n                Collections.singletonMap(StepOutputsDefinition.StepOutputType.SIGNAL, definition)));\n    Assertions.assertThat(constraintViolations).isEmpty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/StepOutputsDefinitionConstraintTest.java", "function_name": "testNoConstraintViolations", "index": 2339, "label": 0}
{"input": "@Test\n  public void testCallPut() {\n    SelType res = orig.call(\"put\", new SelType[] {SelString.of(\"foo\"), SelBoolean.of(true)});\n    assertEquals(\"STRING: bar\", res.type() + \": \" + res.toString());\n    res = orig.call(\"get\", new SelType[] {SelString.of(\"foo\")});\n    assertEquals(\"BOOLEAN: true\", res.type() + \": \" + res.toString());\n    res = orig.call(\"put\", new SelType[] {SelString.of(\"foo\"), SelType.NULL});\n    assertEquals(\"BOOLEAN: true\", res.type() + \": \" + res.toString());\n    res = orig.call(\"get\", new SelType[] {SelString.of(\"foo\")});\n    assertEquals(\"foo\"4, res.type() + \": \" + res.toString());\n    res = orig.call(\"put\", new SelType[] {SelString.of(\"foo\"7), SelString.of(\"foo\"8)});\n    assertEquals(SelType.NULL, res);\n    res = orig.call(\"get\", new SelType[] {SelString.of(\"foo\"7)});\n    assertEquals(\"STRING: bar\"1, res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallPut", "index": 2340, "label": 0}
{"input": "@Test\n  public void testGetStreamOfAllTasks() {\n    assertEquals(1, flow.getStreamOfAllTasks().count());\n    task.setStatus(Task.Status.FAILED);\n    flow.addFinishedTask(task);\n    assertEquals(1, flow.getStreamOfAllTasks().count());\n    flow.updateRunningTask(task);\n    assertEquals(2, flow.getStreamOfAllTasks().count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/models/FlowTest.java", "function_name": "testGetStreamOfAllTasks", "index": 2341, "label": 0}
{"input": "public Head(Integer columnIndex, Field field, String fieldName, List<String> headNameList, Boolean forceIndex,\n            Boolean forceName) {\n        this.columnIndex = columnIndex;\n        this.field = field;\n        this.fieldName = fieldName;\n        if (headNameList == null) {\n            this.headNameList = new ArrayList<>();\n        } else {\n            this.headNameList = headNameList;\n            for (String headName : headNameList) {\n                if (headName == null) {\n                    throw new ExcelGenerateException(\"head name can not be null.\");\n                }\n            }\n        }\n        this.forceIndex = forceIndex;\n        this.forceName = forceName;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/Head.java", "function_name": "Head", "index": 2342, "label": 0}
{"input": "@RequiresApi(api = Build.VERSION_CODES.M)\n    public static void setStatusBarColor(Activity activity, int color, boolean isDark) {\n        try {\n            int statusBarColor = ContextCompat.getColor(activity, color);\n            activity.getWindow().setStatusBarColor(statusBarColor);\n\n            \n            changeStatusBarIconColor(activity, isDark);\n        } catch (Resources.NotFoundException e) {\n            Log.e(\"ThemeHelper\", \"Failed to find color resource for status bar\", e);\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/SystemUtils.java", "function_name": "setStatusBarColor", "index": 2343, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase8() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(request.getWorkflow(), Arrays.asList(\"job.3\", \"job.2\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(2, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.2\", \"job.3\", \"#job.6\", \"job.6\", \"job.7\"), paths.get(0));\n    Assert.assertEquals(Arrays.asList(\"#job.5\", \"job.5\"), paths.get(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase8", "index": 2344, "label": 0}
{"input": "public BraveSearchProperties() {\n\t\tsuper(BraveSearchConstants.BASE_URL);\n\t\tthis.setPropertiesFromEnv(BraveSearchConstants.API_KEY_ENV, null, null, null);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-bravesearch/src/main/java/com/alibaba/cloud/ai/toolcalling/bravesearch/BraveSearchProperties.java", "function_name": "BraveSearchProperties", "index": 2345, "label": 0}
{"input": "private void isDate(Cell cell) {\n        System.out.println(\n                DateUtil.isADateFormat(cell.getCellStyle().getDataFormat(), cell.getCellStyle().getDataFormatString()));\n        \n        DataFormatter f = new DataFormatter();\n        System.out.println(f.formatCellValue(cell));\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/StyleTest.java", "function_name": "isDate", "index": 2346, "label": 0}
{"input": "@JsonIgnore\n  public static TimelineLogEvent trace(String template, Object... args) {\n    return TimelineLogEvent.builder().level(Level.TRACE).message(template, args).build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineLogEvent.java", "function_name": "trace", "index": 2347, "label": 0}
{"input": "@Bean\n    public MailAccount mailAccount() {\n        account = new MailAccount();\n        updateMailAccount();\n        return account;\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "bedffffd8673cf62a5e4530bda584fc714c61731", "file_path": "ruoyi-common/ruoyi-common-mail/src/main/java/org/ruoyi/common/mail/config/MailConfig.java", "function_name": "mailAccount", "index": 2348, "label": 0}
{"input": "@Test\n  public void testRestartDirectlyWithBlocking() {\n    RunResponse restartStepInfo = setupRestartStepInfoForRestartDirectly();\n    RunRequest runRequest = setupRestartRunRequest();\n    MaestroStepInstanceActionDao spyDao = getSpyActionDao(10000);\n    Thread.ofVirtual().start(() -> spyDao.restartDirectly(restartStepInfo, runRequest, true));\n\n    verify(publisher, timeout(3000).times(1)).publish(any(StepInstanceWakeUpEvent.class));\n    \n    Assert.assertTrue(actionDao.tryGetAction(summary, \"job1\").isPresent());\n    Assert.assertEquals(RESTART, actionDao.tryGetAction(summary, \"job1\").get().getAction());\n\n    stepInstance.getRuntimeState().setStatus(StepInstance.Status.RUNNING);\n    stepInstanceDao.insertOrUpsertStepInstance(stepInstance, true);\n    verify(spyDao, timeout(3000).times(1)).deleteAction(any(), any());\n    Assert.assertTrue(spyDao.tryGetAction(summary, \"job1\").isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "testRestartDirectlyWithBlocking", "index": 2349, "label": 0}
{"input": "private void setBorders(com.itextpdf.layout.element.Cell pdfCell, XSSFCellStyle cellStyle) {\n        pdfCell.setBorderBottom(getBorder(cellStyle.getBorderBottom(), cellStyle.getBottomBorderXSSFColor()));\n        pdfCell.setBorderLeft(getBorder(cellStyle.getBorderLeft(), cellStyle.getLeftBorderXSSFColor()));\n        pdfCell.setBorderRight(getBorder(cellStyle.getBorderRight(), cellStyle.getRightBorderXSSFColor()));\n        pdfCell.setBorderTop(getBorder(cellStyle.getBorderTop(), cellStyle.getTopBorderXSSFColor()));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "setBorders", "index": 2350, "label": 0}
{"input": "private void initColumnProperties(ConfigurationHolder configurationHolder) {\n        if (headClazz == null) {\n            return;\n        }\n        FieldCache fieldCache = ClassUtils.declaredFields(headClazz, configurationHolder);\n        \n        for (Map.Entry<Integer, FieldWrapper> entry : fieldCache.getSortedFieldMap().entrySet()) {\n            initOneColumnProperty(entry.getKey(), entry.getValue(),\n                    fieldCache.getIndexFieldMap().containsKey(entry.getKey()));\n        }\n        headKind = HeadKindEnum.CLASS;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/property/ExcelHeadProperty.java", "function_name": "initColumnProperties", "index": 2351, "label": 0}
{"input": "private String renderVariables(List<List<String>> variables) {\n\t\tif (variables == null || variables.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tfor (int i = 0; i < variables.size(); i++) {\n\t\t\tList<String> path = variables.get(i);\n\t\t\tString listStr = \"        List.of(\"\n\t\t\t\t\t+ path.stream().map(s -> \"\\\"\" + s.replace(\"\\\"\", \"\\\\\\\"\") + \"\\\"\").collect(Collectors.joining(\", \"))\n\t\t\t\t\t+ \")\";\n\t\t\tsb.append(listStr);\n\n\t\t\tif (i < variables.size() - 1) {\n\t\t\t\tsb.append(\",\\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsb.append(\"\\n\");\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "ae7a9ee08c5ca8051fa88b54df8b5046053c1cdd", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/generator/workflow/sections/VariableAggregatorNodeSection.java", "function_name": "renderVariables", "index": 2352, "label": 0}
{"input": "@Test\n  public void testCloneTask() {\n    Task task = flow.newTask(new TaskDef(\"task\", \"noop\", null, null), false);\n    context.cloneTask(task);\n    verify(executionPreparer, times(1)).cloneTask(task);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testCloneTask", "index": 2353, "label": 0}
{"input": "@Test\n  public void testPushSignalInstance() {\n    signalTriggerProducer.push(signalInstance);\n    verify(amazonSqs, times(1)).sendMessage(any());\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_SIGNAL_PUBLISH_SUCCESS_METRIC,\n                SqsSignalQueueProducer.class,\n                \"type\",\n                \"SignalInstance\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsSignalQueueProducerTest.java", "function_name": "testPushSignalInstance", "index": 2354, "label": 0}
{"input": "public Identifier getIdentifier() {\n    assert children != null;\n    return (Identifier) children.get(0);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/TypeParameter.java", "function_name": "getIdentifier", "index": 2355, "label": 0}
{"input": "private SelString incrementDateInt(SelType dateInt, SelType days) {\n    String newDateInt =\n        dateIntFormatter.print(\n            dateIntFormatter\n                .parseDateTime(SelString.create(dateInt).getInternalVal())\n                .plusDays(((SelLong) days).intVal()));\n    return SelString.of(newDateInt);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "incrementDateInt", "index": 2356, "label": 0}
{"input": "private void recordStepEnd(ExecutionStep step, ExecutionContext context) {\n\t\t\n\t\tPlanExecutionRecord record = getOrCreatePlanExecutionRecord(context);\n\t\tif (record != null) {\n\t\t\tint currentStepIndex = step.getStepIndex();\n\t\t\trecord.setCurrentStepIndex(currentStepIndex);\n\t\t\t\n\t\t\tretrieveExecutionSteps(context, record);\n\t\t\tgetRecorder().recordPlanExecution(record);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/executor/PlanExecutor.java", "function_name": "recordStepEnd", "index": 2357, "label": 0}
{"input": "private void getAllStepIds(List<Step> stepList, List<String> stepIds) {\n    stepList.forEach(\n        step -> {\n          stepIds.add(step.getId());\n          if (step.getType() == StepType.FOREACH) {\n            getAllStepIds(((ForeachStep) step).getSteps(), stepIds);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/Workflow.java", "function_name": "getAllStepIds", "index": 2358, "label": 0}
{"input": "@Test\n\t@DisplayName(\"Tool-Calling Test\")\n\t@EnabledIfEnvironmentVariable(named = BraveSearchConstants.API_KEY_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\tpublic void testBraveSearch() {\n\t\tvar resp = braveSearchService.apply(new BraveSearchService.Request(\"Spring AI Alibaba\"));\n\t\tassert resp != null && resp.web() != null && resp.web().results() != null && !resp.web().results().isEmpty();\n\t\tlog.info(\"results: \" + resp.web().results());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-bravesearch/src/test/java/com/alibaba/cloud/ai/toolcalling/bravesearch/BraveSearchTest.java", "function_name": "testBraveSearch", "index": 2359, "label": 0}
{"input": "@Test\n  public void testCleanUp() {\n    testRestartDirectly();\n    StepInstanceUpdateJobEvent event = new StepInstanceUpdateJobEvent();\n    event.setWorkflowId(stepInstance.getWorkflowId());\n    event.setWorkflowInstanceId(stepInstance.getWorkflowInstanceId());\n    event.setWorkflowRunId(stepInstance.getWorkflowRunId());\n    event.setStepId(stepInstance.getStepId());\n    Assert.assertEquals(1, actionDao.cleanUp(event));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "testCleanUp", "index": 2360, "label": 0}
{"input": "@Test\n  public void testCheckTrimEmpty() {\n    Assert.assertTrue(StringUtils.checkTrimEmpty(\"\"));\n    Assert.assertTrue(StringUtils.checkTrimEmpty(\" \"));\n    Assert.assertTrue(StringUtils.checkTrimEmpty(\"   \"));\n    Assert.assertFalse(StringUtils.checkTrimEmpty(\"a b\"));\n    Assert.assertFalse(StringUtils.checkTrimEmpty(\"ab \"));\n    Assert.assertFalse(StringUtils.checkTrimEmpty(\"abc\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/StringUtilsTest.java", "function_name": "testCheckTrimEmpty", "index": 2361, "label": 0}
{"input": "@Test\n  public void testAddInvalidWorkflowDefinition() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(\"sample-active-wf-without-props\");\n    AssertHelper.assertThrows(\n        \"initial version must contains properties info, e.g. owner\",\n        IllegalArgumentException.class,\n        \"workflow properties and also owner must be set when creating the first version of a workflow\",\n        () -> workflowDao.addWorkflowDefinition(wfd, null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testAddInvalidWorkflowDefinition", "index": 2362, "label": 0}
{"input": "@Override\n    public void onDestroy() {\n        super.onDestroy();\n        handler.removeCallbacks(logRunnable);\n        if (wLock != null && wLock.isHeld()) {\n            wLock.release();\n            wLock = null;\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "b87aff63c2734f672d1d0993db2ff1df1b2d2fc6", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "onDestroy", "index": 2363, "label": 0}
{"input": "public ModuleDecl(List<Node> nodes, int modifiersOffset, int nameOffset, Span span) {\n    super(span, nodes);\n    this.modifiersOffset = modifiersOffset;\n    this.nameOffset = nameOffset;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ModuleDecl.java", "function_name": "ModuleDecl", "index": 2364, "label": 0}
{"input": "public Font createFont(WriteFont writeFont, Font originFont, boolean useCache) {\n        if (!useCache) {\n            return StyleUtil.buildFont(workbook, originFont, writeFont);\n        }\n        WriteFont tempWriteFont = new WriteFont();\n        WriteFont.merge(writeFont, tempWriteFont);\n        \n        Font font = fontMap.get(tempWriteFont);\n        if (font != null) {\n            return font;\n        }\n        font = StyleUtil.buildFont(workbook, originFont, tempWriteFont);\n        fontMap.put(tempWriteFont, font);\n        return font;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/metadata/holder/WriteWorkbookHolder.java", "function_name": "createFont", "index": 2365, "label": 0}
{"input": "public TimelineLogEventBuilder message(String message) {\n      this.message = message;\n      return this;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineLogEvent.java", "function_name": "message", "index": 2366, "label": 0}
{"input": "private int stopLastOnlyQueuedInstance(Connection conn, String workflowId) throws SQLException {\n    try (PreparedStatement wfiStmt = conn.prepareStatement(STOP_QUEUED_INSTANCES_QUERY)) {\n      wfiStmt.setString(1, toJson(TimelineLogEvent.info(LAST_ONLY_TIMELINE_TEMPLATE)));\n      wfiStmt.setString(2, workflowId);\n      try (ResultSet result = wfiStmt.executeQuery()) {\n        if (result.next()) {\n          WorkflowInstance instance = fromJson(result.getString(1), WorkflowInstance.class);\n          publishInstanceStopJobEvent(instance, System.currentTimeMillis());\n          Checks.checkTrue(\n              !result.next(),\n              \"Invalid case: finding more than 1 pending runs beside [%s][%s] with LAST_ONLY run strategy.\",\n              workflowId,\n              instance.getWorkflowInstanceId());\n          return 1;\n        }\n        return 0;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "stopLastOnlyQueuedInstance", "index": 2367, "label": 0}
{"input": "public Builder setRemark(\n                    String value) {\n                if (value == null) {\n                    throw new NullPointerException();\n                }\n                remark_ = value;\n                bitField0_ |= 0x00000002;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setRemark", "index": 2368, "label": 0}
{"input": "@Override\n    public String queryHardLinkImage(byte[] md5) {\n        return getBaseMapper().queryHardLinkImage(md5);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/HardLinkImageAttributeRepositoryImpl.java", "function_name": "queryHardLinkImage", "index": 2369, "label": 0}
{"input": "public MaestroNotFoundException(String template, Object... args) {\n    super(Code.NOT_FOUND, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroNotFoundException.java", "function_name": "MaestroNotFoundException", "index": 2370, "label": 0}
{"input": "@Test\n    public void t21SheetNameRead07() {\n        List<Map<Integer, Object>> list = EasyExcel.read(\n                TestFileUtil.readFile(\"simple\" + File.separator + \"simple07.xlsx\"))\n            \n            .sheet(\"simple\")\n            .doReadSync();\n        Assertions.assertEquals(1, list.size());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "a58eb2fbe032b79f9012cb8f0af034c47183f723", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/simple/SimpleDataTest.java", "function_name": "t21SheetNameRead07", "index": 2371, "label": 0}
{"input": "@Override\n    public List<UserVO> allUser() {\n        \n        List<UserVO> userVOList = new ArrayList<>();\n        \n        List<String> wxIds = getWxIds();\n        \n        for (String wxId : wxIds) {\n            \n            boolean current = wxId.equals(currentUser());\n            \n            String avatar = getAvatar(wxId);\n            \n            String nickName = getNickName(wxId);\n            \n            userVOList.add(new UserVO(wxId, nickName, avatar, current));\n        }\n        return userVOList;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "allUser", "index": 2372, "label": 0}
{"input": "public static StepDependencyStatus createWithPendingStatus(MapParameter params) {\n    return new StepDependencyStatus(params, StepDependencyMatchStatus.PENDING, null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepDependencyStatus.java", "function_name": "createWithPendingStatus", "index": 2373, "label": 0}
{"input": "@Test\n  public void testIsForeachIterationRestartable() throws Exception {\n    TestDetails testDetails =\n        loadObject(\"fixtures/instances/sample-foreach-details.json\", TestDetails.class);\n\n    assertFalse(testDetails.test1.isForeachIterationRestartable(1));\n    assertFalse(testDetails.test1.isForeachIterationRestartable(2));\n    assertFalse(testDetails.test1.isForeachIterationRestartable(5));\n    assertTrue(testDetails.test1.isForeachIterationRestartable(6));\n    assertTrue(testDetails.test1.isForeachIterationRestartable(7));\n    assertTrue(testDetails.test1.isForeachIterationRestartable(10));\n    assertTrue(testDetails.test1.isForeachIterationRestartable(17));\n    assertTrue(testDetails.test1.isForeachIterationRestartable(12));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/ForeachDetailsTest.java", "function_name": "testIsForeachIterationRestartable", "index": 2374, "label": 0}
{"input": "public TimelineActionEventBuilder action(String action) {\n      this.action = action;\n      return this;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineActionEvent.java", "function_name": "action", "index": 2375, "label": 0}
{"input": "private MediaType getMediaTypeForFormat(String format) {\n\t\treturn switch (format) {\n\t\t\tcase \"markdown\", \"md\" -> MediaType.TEXT_MARKDOWN;\n\t\t\tcase \"pdf\" -> MediaType.APPLICATION_PDF;\n\t\t\tdefault -> MediaType.APPLICATION_OCTET_STREAM;\n\t\t};\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/service/ExportService.java", "function_name": "getMediaTypeForFormat", "index": 2376, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.listener.type\", havingValue = \"sqs\")\n  public SqsPublishJobEventListener sqsPublishJobEventListener(\n      PublishJobEventProcessor publishJobEventProcessor,\n      SqsProcessorFinalizer sqsProcessorFinalizer) {\n    LOG.info(\"Creating sqsPublishJobEventListener within Spring boot...\");\n    return new SqsPublishJobEventListener(publishJobEventProcessor, sqsProcessorFinalizer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsPublishJobEventListener", "index": 2377, "label": 0}
{"input": "@Override\n    public ChatRoomInfo queryChatRoomInfo(String chatRoomName) {\n        return super.getById(chatRoomName);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ChatRoomInfoRepositoryImpl.java", "function_name": "queryChatRoomInfo", "index": 2378, "label": 0}
{"input": "private boolean initializeAndSendOutputSignals(\n      Workflow workflow,\n      Step stepDefinition,\n      WorkflowSummary workflowSummary,\n      StepRuntimeSummary runtimeSummary) {\n    try {\n      Map<String, Map<String, Object>> allStepOutputData =\n          TaskHelper.getAllStepOutputData(workflow);\n\n      initializeOutputSignals(allStepOutputData, stepDefinition, workflowSummary, runtimeSummary);\n\n      return runtimeSummary.getOutputs() == null\n          || signalHandler.sendOutputSignals(workflowSummary, runtimeSummary);\n    } catch (Exception e) {\n      LOG.error(\n          \"Failed to evaluate Maestro params for output signals for {}{} due to error:\",\n          workflowSummary.getIdentity(),\n          runtimeSummary.getIdentity(),\n          e);\n      throw e;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tasks/MaestroTask.java", "function_name": "initializeAndSendOutputSignals", "index": 2379, "label": 0}
{"input": "@Test\n  public void testDecimalArrayToDecimalArray() {\n    BigDecimal[] val =\n        new BigDecimal[] {new BigDecimal(\"1.2\"), new BigDecimal(\"3.4\"), new BigDecimal(\"5.6\")};\n    BigDecimal[] actual = ParamHelper.toDecimalArray(\"foo\", val);\n    assertArrayEquals(val, actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ParamHelperTest.java", "function_name": "testDecimalArrayToDecimalArray", "index": 2380, "label": 0}
{"input": "public EmbeddingRequest build() {\n\t\t\t\treturn new EmbeddingRequest(model, new EmbeddingRequestInput(texts),\n\t\t\t\t\t\tEmbeddingRequestInputParameters.builder().textType(textType).dimension(dimension).build());\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57d0b6295b47a9bc0de24bbad89345bf03251a7f", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "build", "index": 2381, "label": 0}
{"input": "private List<ObjectBody> parseBodyList() {\n    if (lookahead != Token.LBRACE) {\n      throw parserError(\"unexpectedToken2\", _lookahead.text(lexer), \"{\", \"=\");\n    }\n    var bodies = new ArrayList<ObjectBody>();\n    do {\n      bodies.add(parseObjectBody());\n    } while (lookahead == Token.LBRACE);\n    return bodies;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseBodyList", "index": 2382, "label": 0}
{"input": "@Test\n    public void test3() throws IOException {\n        \n        File file = TestFileUtil.readFile(\"dataformat\" + File.separator + \"dataformat.xlsx\");\n        XSSFWorkbook xssfWorkbook = new XSSFWorkbook(file.getAbsoluteFile().getAbsolutePath());\n        Sheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        Cell cell = xssfSheet.getRow(0).getCell(0);\n        DataFormatter d = new DataFormatter();\n        System.out.println(d.formatCellValue(cell));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1a4e679cf85fc045d0a90267c32f6b5fb06f06a5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatTest.java", "function_name": "test3", "index": 2383, "label": 0}
{"input": "private Map<String, ParamDefinition> parseParamDefMap(String json)\n      throws JsonProcessingException {\n    TypeReference<Map<String, ParamDefinition>> paramDefMap =\n        new TypeReference<Map<String, ParamDefinition>>() {};\n    return MAPPER.readValue(json.replaceAll(\"\\'\", \"\\\"\"), paramDefMap);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "parseParamDefMap", "index": 2384, "label": 0}
{"input": "@Test\n    public void simpleWrite() {\n        \n        \n        \n        \n        String fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        EasyExcel.write(fileName, DemoData.class).sheet(\"模板\").doWrite(() -> {\n            \n            return data();\n        });\n        \n        \n        fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        EasyExcel.write(fileName, DemoData.class).sheet(\"模板\").doWrite(data());\n        \n        \n        fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".xlsx\";\n        \n        try (ExcelWriter excelWriter = EasyExcel.write(fileName, DemoData.class).build()) {\n            WriteSheet writeSheet = EasyExcel.writerSheet(\"模板\").build();\n            excelWriter.write(data(), writeSheet);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "simpleWrite", "index": 2385, "label": 0}
{"input": "public TypeCastExpr(Expr expr, Type type, Span span) {\n      super(span, List.of(expr, type));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "TypeCastExpr", "index": 2386, "label": 0}
{"input": "private FullToken next() {\n    if (backtracking) {\n      backtracking = false;\n      lookahead = _lookahead.token;\n      spanLookahead = _lookahead.span;\n      return prev;\n    }\n    prev = _lookahead;\n    _lookahead = forceNext();\n    lookahead = _lookahead.token;\n    spanLookahead = _lookahead.span;\n    return prev;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "next", "index": 2387, "label": 0}
{"input": "public static boolean isHexDigitOrUnderscore(char ch) {\n    return switch (ch) {\n      case '0',\n          '1',\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          '1'0,\n          '1'1,\n          '1'2,\n          '1'3,\n          '1'4,\n          '1'5,\n          '1'6,\n          '1'7,\n          '1'8,\n          '1'9,\n          '2'0,\n          '2'1,\n          '2'2 ->\n          true;\n      default -> false;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/IoUtils.java", "function_name": "isHexDigitOrUnderscore", "index": 2388, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeForUnblock() throws Exception {\n    WorkflowInstanceActionResponse response =\n        loadObject(\n            \"fixtures/api/sample-workflow-instance-unblock-response.json\",\n            WorkflowInstanceActionResponse.class);\n    assertEquals(\n        response,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(response), WorkflowInstanceActionResponse.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/api/WorkflowInstanceActionResponseTest.java", "function_name": "testRoundTripSerdeForUnblock", "index": 2389, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeForKill() throws Exception {\n    WorkflowInstanceActionResponse response =\n        loadObject(\n            \"fixtures/api/sample-workflow-instance-kill-response.json\",\n            WorkflowInstanceActionResponse.class);\n    assertEquals(\n        response,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(response), WorkflowInstanceActionResponse.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/api/WorkflowInstanceActionResponseTest.java", "function_name": "testRoundTripSerdeForKill", "index": 2390, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidEscapeArgTypeCall() {\n    SelType res = SelString.of(\"{\\\"foo\\\"}\").call(\"escape\", new SelType[] {SelLong.of(123)});\n    assertEquals(\"STRING: {\\\\\\\"bar\\\\\\\"}\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidEscapeArgTypeCall", "index": 2391, "label": 0}
{"input": "public void setEndpointSelectionListener(EndpointSelectionListener listener) {\n        this.selectionListener = listener;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/EndpointsBottomSheet.java", "function_name": "setEndpointSelectionListener", "index": 2392, "label": 0}
{"input": "public String toJson() {\n\t\tStringBuilder json = new StringBuilder();\n\t\tjson.append(\"{\\n\");\n\t\tjson.append(\"  \\\"planId\\\": \\\"\").append(planId).append(\"\\\",\\n\");\n\t\tjson.append(\"  \\\"title\\\": \\\"\").append(title).append(\"\\\",\\n\");\n\n\t\t\n\t\tjson.append(\"  \\\"steps\\\": [\\n\");\n\t\tfor (int i = 0; i < steps.size(); i++) {\n\t\t\tjson.append(steps.get(i).toJson());\n\t\t\tif (i < steps.size() - 1) {\n\t\t\t\tjson.append(\",\");\n\t\t\t}\n\t\t\tjson.append(\"\\n\");\n\t\t}\n\t\tjson.append(\"  ]\\n\");\n\n\t\tjson.append(\"}\");\n\t\treturn json.toString();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/model/vo/ExecutionPlan.java", "function_name": "toJson", "index": 2393, "label": 0}
{"input": "@Test\n    public void testEscapeHex() {\n        String fileName = TestFileUtil.getPath() + \"simpleWrite\" + System.currentTimeMillis() + \".xlsx\";\n        EasyExcel.write(fileName, DemoData.class).sheet(\"template\")\n                .registerWriteHandler(new EscapeHexCellWriteHandler()).doWrite(() -> {\n                    return dataHex();\n                });\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "58ae8159d317290e2c442ef7ab0cf86f9d3b9b00", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java", "function_name": "testEscapeHex", "index": 2394, "label": 0}
{"input": "@Test\n  public void testNoJobOnTerminate() {\n    StepRuntime.Result res = stepRuntime.terminate(new WorkflowSummary(), runtimeSummary);\n    assertEquals(StepRuntime.State.STOPPED, res.getState());\n    assertTrue(res.getArtifacts().isEmpty());\n    assertEquals(1, res.getTimeline().size());\n    assertEquals(\n        \"Job terminating, no kubernetes job found\", res.getTimeline().getFirst().getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntimeTest.java", "function_name": "testNoJobOnTerminate", "index": 2395, "label": 0}
{"input": "private ParsableLong(Long longValue, String stringValue) {\n    this.longValue = longValue;\n    this.stringValue = stringValue;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "be2101afcc9689725049fbb7041f4e685cfffc48", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/ParsableLong.java", "function_name": "ParsableLong", "index": 2396, "label": 0}
{"input": "public ScheduledFuture<?> schedule(Runnable action, long delayInMillis) {\n    return scheduler.schedule(action, delayInMillis, TimeUnit.MILLISECONDS);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "schedule", "index": 2397, "label": 0}
{"input": "@Test\n  public void isIdUsingReservedSuffix() {\n    Set<ConstraintViolation<TestId>> violations = validator.validate(new TestId(\"foo_maestro\"));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestId> violation = violations.iterator().next();\n    assertEquals(\"foo_maestro\", violation.getInvalidValue());\n    assertEquals(\n        \"[maestro id] cannot end with reserved suffix: _maestro - rejected value is [foo_maestro]\",\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/MaestroIdConstraintTest.java", "function_name": "isIdUsingReservedSuffix", "index": 2398, "label": 0}
{"input": "public SwtAboutWindow(Display display, Map<String, String> replaces) {\n        this.display = display;\n        this.replaces = replaces;\n        initializeUI();\n        String content = \"Missing no\";\n        try {\n            @Cleanup var is = Main.class.getResourceAsStream(\"/assets/credit.txt\");\n            if (is != null) {\n                content = new String(is.readAllBytes(), StandardCharsets.UTF_8);\n            }\n        } catch (IOException e) {\n            log.error(\"Failed to load credit.txt\", e);\n        }\n        loadContent(content);\n        setupTimers();\n        try {\n            playMidi();\n        } catch (Exception ignored) {\n            ignored.printStackTrace();\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "334564c4c414aa37077c7e481ee42c96f27163be", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtAboutWindow.java", "function_name": "SwtAboutWindow", "index": 2399, "label": 0}
{"input": "private int[] enqueueInstances(\n      Connection conn, String workflowId, List<WorkflowInstance> instances) throws SQLException {\n    int[] ret = new int[instances.size()];\n    int idx = 0;\n    try (PreparedStatement wfiStmt = conn.prepareStatement(INSERT_WORKFLOW_INSTANCE_QUERY)) {\n      for (WorkflowInstance instance : instances) {\n        if (instance.getWorkflowInstanceId() != DO_NOTHING_CODE) {\n          prepareCreateInstanceStatement(wfiStmt, instance);\n          wfiStmt.addBatch();\n          ret[idx] = SUCCESS_WRITE_SIZE;\n        }\n        ++idx;\n      }\n      int[] res = wfiStmt.executeBatch();\n      if (res.length > DO_NOTHING_CODE) {\n        Checks.checkTrue(\n            Arrays.stream(res).allMatch(i -> i == SUCCESS_WRITE_SIZE),\n            \"executeBatch in enqueueInstances should return all 1s.\");\n        publishStartWorkflowJobEvent(workflowId);\n      }\n    }\n    return ret;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "enqueueInstances", "index": 2400, "label": 0}
{"input": "public static JSONObject postFile(String appId, String toWxid, String fileUrl, String fileName) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"fileUrl\", fileUrl);\r\n        param.put(\"fileName\", fileName);\r\n        return OkhttpUtil.postJSON(\"/message/postFile\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postFile", "index": 2401, "label": 0}
{"input": "public static URI fixTripleSlashUri(URI baseUri, URI newUri) {\n    \n    \n    if (baseUri.getScheme() != null\n        && baseUri.getScheme().equalsIgnoreCase(newUri.getScheme())\n        && baseUri.getSchemeSpecificPart().startsWith(\"///\")\n        && newUri.getHost() == null) {\n      try {\n        return new URI(\n            newUri.getScheme(),\n            newUri.getUserInfo(),\n            \"\",\n            newUri.getPort(),\n            newUri.getPath(),\n            newUri.getQuery(),\n            newUri.getFragment());\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e.getMessage(), e);\n      }\n    }\n\n    return newUri;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "d9c65d484a95316736712f0e0db91c45b7fe8a78", "file_path": "pkl-core/src/main/java/org/pkl/core/util/IoUtils.java", "function_name": "fixTripleSlashUri", "index": 2402, "label": 0}
{"input": "public static WorkflowSummary retrieveWorkflowSummary(\n      ObjectMapper objectMapper, Map<String, Object> data) {\n    return convertField(\n        objectMapper, data, Constants.WORKFLOW_SUMMARY_FIELD, WorkflowSummary.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "retrieveWorkflowSummary", "index": 2403, "label": 0}
{"input": "private static String applyMapper(\n      ApplyVmFunction1Node applyNode, Matcher matcher, VmFunction mapper) {\n    \n    var regexMatch = RegexMatchFactory.create(Pair.of(matcher.toMatchResult(), -1));\n    var replacement = applyNode.executeString(mapper, regexMatch);\n    return Matcher.quoteReplacement(replacement);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "3b6fbdff15b1ad8361830d12cbb8888613ce96ad", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/base/StringNodes.java", "function_name": "applyMapper", "index": 2404, "label": 0}
{"input": "@ApiOperation(value = \"提交图生文任务\")\n    @PostMapping(\"/describe\")\n    public String describe(@RequestBody SubmitDescribeDTO describeDTO) {\n        chatCostService.taskDeduct(\"mj\",\"describe\",0.0);\n        String jsonStr = JSONUtil.toJsonStr(describeDTO);\n        String url = \"mj/submit/describe\";\n        Request request = mjOkHttpUtil.createPostRequest(url, jsonStr);\n        return mjOkHttpUtil.executeRequest(request);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/tripartite/SubmitController.java", "function_name": "describe", "index": 2405, "label": 0}
{"input": "@Test\n  public void testWakeUpChildActors() {\n    groupActor.wakeUpChildActors(Action.FLOW_TIMEOUT);\n    verifyEmptyAction(flowActor);\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    groupActor.wakeUpChildActors(Action.FLOW_TIMEOUT);\n    verifyActions(flowActor, Action.FLOW_START, Action.FLOW_TIMEOUT);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testWakeUpChildActors", "index": 2406, "label": 0}
{"input": "@Test\n  public void testToStepRestartResponse() {\n    RunResponse res = RunResponse.from(stepInstance, TimelineLogEvent.info(\"bar\"));\n    StepInstanceRestartResponse response = res.toStepRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.CREATED, response.getStatus());\n    res = RunResponse.from(instance, \"foo\");\n    response = res.toStepRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.INTERNAL_ERROR, response.getStatus());\n    res = RunResponse.from(instance, 0);\n    response = res.toStepRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.DUPLICATED, response.getStatus());\n    res = RunResponse.from(instance, -1);\n    response = res.toStepRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.STOPPED, response.getStatus());\n    res = RunResponse.from(instance, 1);\n    response = res.toStepRestartResponse();\n    Assert.assertEquals(InstanceRunStatus.CREATED, response.getStatus());\n    Assert.assertEquals(12L, response.getWorkflowVersionId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunResponseTest.java", "function_name": "testToStepRestartResponse", "index": 2407, "label": 0}
{"input": "public ChatCompletionRequestParameter() {\n\t\t\tthis(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n\t\t\t\t\tnull, null);\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "ChatCompletionRequestParameter", "index": 2408, "label": 0}
{"input": "@Test\n  public void testUpdateRuntimeState() {\n    WorkflowRuntimeSummary summary = new WorkflowRuntimeSummary();\n    summary.updateRuntimeState(WorkflowInstance.Status.IN_PROGRESS, null, 123456L);\n    assertEquals(123456L, summary.getStartTime().longValue());\n    assertNull(summary.getEndTime());\n    assertEquals(WorkflowInstance.Status.IN_PROGRESS, summary.getInstanceStatus());\n    assertNull(summary.getRuntimeOverview());\n\n    WorkflowRuntimeOverview overview =\n        WorkflowRuntimeOverview.of(\n            1,\n            singletonEnumMap(StepInstance.Status.SUCCEEDED, WorkflowStepStatusSummary.of(1L)),\n            null);\n    summary.updateRuntimeState(WorkflowInstance.Status.SUCCEEDED, overview, 654321L);\n    assertEquals(123456L, summary.getStartTime().longValue());\n    assertEquals(654321L, summary.getEndTime().longValue());\n    assertEquals(WorkflowInstance.Status.SUCCEEDED, summary.getInstanceStatus());\n    assertEquals(overview, summary.getRuntimeOverview());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/WorkflowRuntimeSummaryTest.java", "function_name": "testUpdateRuntimeState", "index": 2409, "label": 0}
{"input": "public static JSONObject downloadVoice(String appId, String xml, Long msgId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"xml\",xml);\r\n        param.put(\"msgId\",msgId);\r\n        return OkhttpUtil.postJSON(\"/message/downloadVoice\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/DownloadApi.java", "function_name": "downloadVoice", "index": 2410, "label": 0}
{"input": "File(URI uri) throws URISyntaxException {\n      IoUtils.validateFileUri(uri);\n      this.uri = uri;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2bc9c2f42416ba122557a8a3d7c162c902ba362a", "file_path": "pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java", "function_name": "File", "index": 2411, "label": 0}
{"input": "private org.pkl.core.runtime.Identifier toIdentifier(String text) {\n    return org.pkl.core.runtime.Identifier.get(text);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "toIdentifier", "index": 2412, "label": 0}
{"input": "@Override\n    public com.itextpdf.layout.element.Cell convertCell(Cell cell, int rowspan, int colspan, float maxWidth, String fontPath) throws IOException {\n        String value = Excel2PdfUtils.getValue(cell);\n        com.itextpdf.layout.element.Cell pdfCell = createPdfCell(rowspan, colspan, cell, value, maxWidth, fontPath);\n        return pdfCell;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "convertCell", "index": 2413, "label": 0}
{"input": "public void setHttpHeaders(Map<String, String> httpHeaders) {\n    this.httpHeaders = httpHeaders;\n  }", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatOptions.java", "function_name": "setHttpHeaders", "index": 2414, "label": 0}
{"input": "public ReActAgent(LlmService llmService, PlanExecutionRecorder planExecutionRecorder,\n\t\t\tManusProperties manusProperties, Map<String, Object> initialAgentSetting, PromptLoader promptLoader) {\n\t\tsuper(llmService, planExecutionRecorder, manusProperties, initialAgentSetting, promptLoader);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/agent/ReActAgent.java", "function_name": "ReActAgent", "index": 2415, "label": 0}
{"input": "private static List<CsvData> dataList(int size, String prefix) {\n        List<CsvData> dataList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            CsvData data = new CsvData();\n            data.setString(prefix + i);\n            data.setDate(i < 6 ? new Date() : null);\n            data.setDoubleData(99.001000D);\n            dataList.add(data);\n        }\n        return dataList;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "dataList", "index": 2416, "label": 0}
{"input": "private boolean setLocalVariableType(String functionAddrStr, String variableName, String newType) {\n        \n        Program program = getCurrentProgram();\n        if (program == null) return false;\n        if (functionAddrStr == null || functionAddrStr.isEmpty() || \n            variableName == null || variableName.isEmpty() ||\n            newType == null || newType.isEmpty()) {\n            return false;\n        }\n        \n        AtomicBoolean success = new AtomicBoolean(false);\n        \n        try {\n            SwingUtilities.invokeAndWait(() -> \n                applyVariableType(program, functionAddrStr, variableName, newType, success));\n        } catch (InterruptedException | InvocationTargetException e) {\n            Msg.error(this, \"Failed to execute set variable type on Swing thread\", e);\n        }\n        \n        return success.get();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "setLocalVariableType", "index": 2417, "label": 0}
{"input": "public SwtGuiImpl(String[] args) {\n        super(args);\n        System.setProperty(\"java.awt.headless\", \"true\");\n        DPIUtil.setAutoScaleForMonitorSpecificScaling();\n        this.silentStart = Arrays.stream(args).anyMatch(s -> s.equalsIgnoreCase(\"silent\"));\n        this.display = new Display();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "fbda67d5ccb79112fbf1412d202e149fa9fdb969", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtGuiImpl.java", "function_name": "SwtGuiImpl", "index": 2418, "label": 0}
{"input": "@Test\n    public void numberforamt3() throws Exception {\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n\n        List<Map<Integer, ReadCellData>> list = EasyExcel.read(\"src/test/resources/temp/number_format.xlsx\")\n            .useDefaultListener(false)\n            .sheet(0)\n            .headRowNumber(0).doReadSync();\n        LOGGER.info(\"数据：{}\", list.size());\n        for (Map<Integer, ReadCellData> readCellDataMap : list) {\n            ReadCellData data = readCellDataMap.get(0);\n            LOGGER.info(\"data:{}\", format.format(\n                DateUtil.getJavaDate(data.getNumberValue().setScale(10, RoundingMode.HALF_UP).doubleValue(), false)));\n\n        }\n        \n        \n        \n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/Lock2Test.java", "function_name": "numberforamt3", "index": 2419, "label": 0}
{"input": "public StringChars(String string, Span span) {\n      super(span, null);\n      this.string = string;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2ffd201172a2416d00fbfba9de2ada7feb39ea65", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringPart.java", "function_name": "StringChars", "index": 2420, "label": 0}
{"input": "public static String getDbDir(String wxId) {\n        return USER_DIR + SEPARATOR + DATA + SEPARATOR + DB + SEPARATOR + wxId + SEPARATOR;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a65dda542a30d994605d8dc1d48cb35ce663d41", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getDbDir", "index": 2421, "label": 0}
{"input": "private static Set<ParamMode> getAllowedModes(MergeContext context) {\n    final Set<ParamMode> allowedModesFromMergeSource =\n        new HashSet<>(\n            ALLOWED_UPDATE_MODES.getOrDefault(context.getMergeSource(), DEFAULT_UPDATE_MODES));\n    if (!context.isRestartMerge()) {\n      return allowedModesFromMergeSource;\n    }\n\n    allowedModesFromMergeSource.retainAll(RESTART_UPDATE_MODES);\n    return allowedModesFromMergeSource;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "getAllowedModes", "index": 2422, "label": 0}
{"input": "private void applyCustomizers(PromptTemplate.Builder promptTemplateBuilder) {\n\t\tif (customizers != null) {\n\t\t\tcustomizers.forEach(customizer -> customizer.customize(promptTemplateBuilder));\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57c9ddbb8f0c222fa73a69fa8ca0cd63deace926", "file_path": "spring-ai-alibaba-prompt/spring-ai-alibaba-prompt-nacos/src/main/java/com/alibaba/cloud/ai/prompt/PromptTemplateBuilderConfigure.java", "function_name": "applyCustomizers", "index": 2423, "label": 0}
{"input": "private boolean jj_3R_58() {\n    if (jj_scan_token(GE)) return true;\n    if (jj_3R_49()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_58", "index": 2424, "label": 0}
{"input": "@Test\n  public void testJoin() {\n    SelType res =\n        SelString.of(null)\n            .call(\"join\", new SelType[] {SelString.of(\",\"), SelString.of(\"ab\"), SelString.of(\"c\")});\n    assertEquals(\"STRING: ab,c\", res.type() + \": \" + res.toString());\n    res = SelString.of(null).call(\"join\", new SelType[] {SelString.of(\",\")});\n    assertEquals(\"STRING: \", res.type() + \": \" + res.toString());\n    res =\n        SelString.of(\",\"0)\n            .call(\"join\", new SelType[] {SelString.of(\",\"), SelString.of(\"ab\"), SelString.of(\"c\")});\n    assertEquals(\"STRING: ab,c\", res.type() + \": \" + res.toString());\n    res =\n        SelString.of(\",\"0)\n            .call(\n                \"join\",\n                new SelType[] {\n                  SelString.of(\",\"),\n                  SelArray.of(new String[] {\"ab\"0, \"ab\", \"c\"}, SelTypes.STRING_ARRAY)\n                });\n    assertEquals(\"ab\"3, res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testJoin", "index": 2425, "label": 0}
{"input": "private SwitchButton.OnCheckedChangeListener createSwitchCheckedChangeListener() {\n        return (view, isChecked) -> {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && !canShowNotification) {\n                pushNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);\n                return;\n            }\n\n            if (lastKnownConnectionState == ConnectionState.DISCONNECTED && isChecked) {\n                \n                Intent vpnIntent = OblivionVpnService.prepare(this);\n                if (vpnIntent != null) {\n                    vpnPermissionLauncher.launch(vpnIntent);\n                } else {\n                    OblivionVpnService.startVpnService(this);\n                }\n            } else if (lastKnownConnectionState == ConnectionState.CONNECTED || lastKnownConnectionState == ConnectionState.CONNECTING) {\n                OblivionVpnService.stopVpnService(this);\n            }\n        };\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "4cd48025097947f8b94dc8a76d30abc97f106a5e", "file_path": "app/src/main/java/org/bepass/oblivion/MainActivity.java", "function_name": "createSwitchCheckedChangeListener", "index": 2426, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeNested() throws Exception {\n    User user = loadObject(\"fixtures/workflows/definition/sample-user-nested.json\", User.class);\n    assertEquals(user, MAPPER.readValue(MAPPER.writeValueAsString(user), User.class));\n    assertEquals(\"demo\", user.getName());\n    assertEquals(3, user.getExtraInfo().size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/UserTest.java", "function_name": "testRoundTripSerdeNested", "index": 2427, "label": 0}
{"input": "@GetMapping(\"/getPPT\")\n    public R<ChatModel> getPPT() {\n        return R.ok(chatModelService.getPPT());\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "147b3fd8f5e68c7161adec491ce9cba154a9451e", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/chat/ChatModelController.java", "function_name": "getPPT", "index": 2428, "label": 0}
{"input": "@Override\n    public XlsxReadSheetHolder xlsxReadSheetHolder() {\n        return (XlsxReadSheetHolder) readSheetHolder();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/context/xlsx/DefaultXlsxReadContext.java", "function_name": "xlsxReadSheetHolder", "index": 2429, "label": 0}
{"input": "@Test\n  public void testInitiatorAncestors() throws Exception {\n    Initiators initiators =\n        loadObject(\"fixtures/initiator/sample-initiators.json\", Initiators.class);\n    assertEquals(\n        \"test-parent\",\n        ((SubworkflowInitiator) initiators.getSubworkflow()).getNonInlineParent().getWorkflowId());\n    assertEquals(\n        \"test-parent\",\n        ((ForeachInitiator) initiators.getForeach()).getNonInlineParent().getWorkflowId());\n    assertEquals(\n        \"test-parent\",\n        ((TemplateInitiator) initiators.getTemplate()).getNonInlineParent().getWorkflowId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/initiator/InitiatorTest.java", "function_name": "testInitiatorAncestors", "index": 2430, "label": 0}
{"input": "@Override\n  public ExpressionNode visitUnqualifiedAccessExpr(UnqualifiedAccessExprContext ctx) {\n    var identifier = toIdentifier(ctx.Identifier());\n    var argListCtx = ctx.argumentList();\n\n    if (argListCtx == null) {\n      return createResolveVariableNode(createSourceSection(ctx), identifier);\n    }\n\n    \n    \n    \n    if (identifier == Identifier.LIST) {\n      return doVisitListLiteral(ctx, argListCtx);\n    }\n\n    if (identifier == Identifier.SET) {\n      return doVisitSetLiteral(ctx, argListCtx);\n    }\n\n    if (identifier == Identifier.MAP) {\n      return doVisitMapLiteral(ctx, argListCtx);\n    }\n\n    var scope = symbolTable.getCurrentScope();\n\n    return new ResolveMethodNode(\n        createSourceSection(ctx),\n        identifier,\n        visitArgumentList(argListCtx),\n        isBaseModule,\n        scope.isCustomThisScope(),\n        scope.getConstLevel(),\n        scope.getConstDepth());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "visitUnqualifiedAccessExpr", "index": 2431, "label": 0}
{"input": "@Bean\n  public WorkflowEnrichmentHelper workflowEnrichmentHelper(\n      ParamsManager paramsManager,\n      @Qualifier(STEP_RUNTIME_QUALIFIER) Map<StepType, StepRuntime> stepRuntimeMap) {\n    LOG.info(\"Creating WorkflowEnrichmentHelper within Spring boot...\");\n    return new WorkflowEnrichmentHelper(paramsManager, stepRuntimeMap);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "workflowEnrichmentHelper", "index": 2432, "label": 0}
{"input": "public static boolean isRegularIdentifier(String identifier) {\n    if (identifier.isEmpty()) return false;\n\n    if (isKeyword(identifier)) return false;\n\n    var firstCp = identifier.codePointAt(0);\n    return (firstCp == '$' || firstCp == '_' || Character.isUnicodeIdentifierStart(firstCp))\n        && identifier\n            .codePoints()\n            .skip(1)\n            .allMatch(cp -> cp == '$' || Character.isUnicodeIdentifierPart(cp));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "isRegularIdentifier", "index": 2433, "label": 0}
{"input": "@Test\n  public void testWorkflowFinalizedTerminatedForKilled() {\n    when(workflow.getStatus()).thenReturn(Workflow.WorkflowStatus.TERMINATED);\n    when(instanceDao.getWorkflowInstanceStatus(eq(\"test-workflow-id\"), anyLong(), anyLong()))\n        .thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    when(workflow.getReasonForIncompletion()).thenReturn(\"FAILED-test-reason\");\n    statusListener.onWorkflowFinalized(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowFinalized\",\n                \"status\",\n                \"TERMINATED\")\n            .count());\n    verify(instanceDao, times(1))\n        .updateWorkflowInstance(any(), any(), any(), eq(WorkflowInstance.Status.FAILED), anyLong());\n    verify(publisher, times(1)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowFinalizedTerminatedForKilled", "index": 2434, "label": 0}
{"input": "public List<Map<String, Artifact>> getBatchStepInstancesArtifactsFromList(\n      String workflowId, long workflowInstanceId, Map<String, Long> stepIdToRunId) {\n    List<Map<String, Long>> batches = splitMap(stepIdToRunId);\n\n    List<Map<String, Artifact>> results = new ArrayList<>();\n\n    for (Map<String, Long> batch : batches) {\n      results.addAll(\n          getBatchStepInstancesArtifactsFromListLimited(workflowId, workflowInstanceId, batch));\n    }\n\n    return results;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getBatchStepInstancesArtifactsFromList", "index": 2435, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeSimple() throws Exception {\n    User user = loadObject(\"fixtures/workflows/definition/sample-user-simple.json\", User.class);\n    assertEquals(user, MAPPER.readValue(MAPPER.writeValueAsString(user), User.class));\n    assertEquals(\"demo\", user.getName());\n    assertEquals(0, user.getExtraInfo().size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/UserTest.java", "function_name": "testRoundTripSerdeSimple", "index": 2436, "label": 0}
{"input": "private int[] insertMaestroWorkflowInstances(Connection conn, List<WorkflowInstance> instances)\n      throws SQLException {\n    String sql =\n        String.format(\n            CREATE_WORKFLOW_INSTANCE_QUERY_TEMPLATE,\n            String.join(\",\", Collections.nCopies(instances.size(), VALUE_PLACE_HOLDER)));\n    try (PreparedStatement wfiStmt = conn.prepareStatement(sql)) {\n      int idx = 0;\n      for (WorkflowInstance instance : instances) {\n        wfiStmt.setString(++idx, toJson(instance));\n        wfiStmt.setString(++idx, instance.getStatus().name());\n      }\n      try (ResultSet result = wfiStmt.executeQuery()) {\n        int[] res = new int[instances.size()];\n        idx = 0;\n        while (result.next()) {\n          res[idx++] = result.getInt(1);\n        }\n        return res;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "insertMaestroWorkflowInstances", "index": 2437, "label": 0}
{"input": "@Test\n    public void lastRowNum233() throws IOException {\n        String sourceFile = \"src/test/resources/poi/last_row_number_xssf_date_test.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        try(XSSFWorkbook xx = new XSSFWorkbook(file);\n            SXSSFWorkbook xssfWorkbook = new SXSSFWorkbook(xx);\n            FileOutputStream fileout = new FileOutputStream(tempDir.resolve(System.currentTimeMillis() + \".xlsx\").toFile());){\n            System.out.println(new File(file).exists());\n            Sheet xssfSheet = xssfWorkbook.getXSSFWorkbook().getSheetAt(0);\n            Cell cell = xssfSheet.getRow(0).createCell(9);\n            cell.setCellValue(\"testssdf是士大夫否t\");\n            xssfWorkbook.write(fileout);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "lastRowNum233", "index": 2438, "label": 0}
{"input": "@Test\n  public void shouldSerDeTaskWhenInputAndOutputDataAreEmptyAndCompressionIsEnabled()\n      throws JsonProcessingException {\n    JsonConverter jsonConverter = jsonConverter(true, \"gzip\");\n\n    Task task = new Task();\n    task.setTaskId(\"testTaskId\");\n    String json = jsonConverter.toJson(task);\n\n    JsonNode root = objectMapper.readTree(json);\n    assertEquals(\"{}\", root.get(\"inputData\").toString());\n    assertEquals(\"{}\", root.get(\"outputData\").toString());\n\n    Task convertedTask = jsonConverter.fromJson(json, Task.class);\n    assertEquals(task, convertedTask);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/JsonConverterTest.java", "function_name": "shouldSerDeTaskWhenInputAndOutputDataAreEmptyAndCompressionIsEnabled", "index": 2439, "label": 0}
{"input": "public void releaseGroup(FlowGroup group) {\n    LOG.info(\"Release the flow group: [{}]\", group);\n    flowDao.releaseGroup(group);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "releaseGroup", "index": 2440, "label": 0}
{"input": "@Test\n  public void testMergeAllowUpstreamChanges() throws JsonProcessingException {\n    for (ParamMode mode :\n        Arrays.asList(ParamMode.MUTABLE_ON_START, ParamMode.CONSTANT, ParamMode.IMMUTABLE)) {\n      Map<String, ParamDefinition> allParams =\n          parseParamDefMap(\n              String.format(\n                  \"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': '%s'}}\",\n                  mode.toString()));\n      Map<String, ParamDefinition> paramsToMerge =\n          parseParamDefMap(\n              \"{'tomerge': {'type': 'STRING', 'value': 'goodbye', 'source': 'SYSTEM_INJECTED'}}\");\n      ParamsMergeHelper.mergeParams(allParams, paramsToMerge, upstreamMergeContext);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeAllowUpstreamChanges", "index": 2441, "label": 0}
{"input": "@SuppressWarnings(\"DataFlowIssue\")\n  public List<Entry> doVisitReadExpr(Expr expr, boolean isGlob) {\n    if (!(expr instanceof SingleLineStringLiteralExpr slStr)) {\n      return Collections.emptyList();\n    }\n    \n    String importString;\n    var singleParts = slStr.getParts();\n    if (singleParts.isEmpty()) {\n      importString = \"\";\n    } else if (singleParts.size() == 1\n        && singleParts.get(0) instanceof StringConstantParts cparts\n        && !cparts.getParts().isEmpty()) {\n      importString = doVisitStringConstant(cparts.getParts());\n    } else {\n      return Collections.emptyList();\n    }\n\n    return Collections.singletonList(\n        new Entry(false, isGlob, false, false, importString, createSourceSection(slStr)));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/ImportsAndReadsParser.java", "function_name": "doVisitReadExpr", "index": 2442, "label": 0}
{"input": "@Override\n    public void drawChildren(DrawContext drawContext) {\n        super.drawChildren(drawContext);\n        renderExcelImages(drawContext);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxImageTableRenderer.java", "function_name": "drawChildren", "index": 2443, "label": 0}
{"input": "public static boolean isReservedWindowsFilenameChar(char character) {\n    return switch (character) {\n      case 0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16,\n          17,\n          18,\n          19,\n          20,\n          21,\n          22,\n          23,\n          24,\n          25,\n          26,\n          27,\n          28,\n          29,\n          30,\n          31,\n          '<',\n          '>',\n          ':',\n          '\"',\n          '\\\\',\n          '/',\n          '|',\n          '?',\n          '*' ->\n          true;\n      default -> false;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "28b128f86f3db657fe5a81eec0b4ad69a0fd7bcc", "file_path": "pkl-core/src/main/java/org/pkl/core/util/IoUtils.java", "function_name": "isReservedWindowsFilenameChar", "index": 2444, "label": 0}
{"input": "@Test\n  public void testNewTaskInline() {\n    assertEquals(1, flow.getRunningTasks().size());\n    assertEquals(Set.of(\"task1\"), flow.getRunningTasks().keySet());\n\n    var taskDef = new TaskDef(\"task2\", \"noop\", null, null);\n    var task2 = flow.newTask(taskDef, true);\n    assertEquals(taskDef, task2.getTaskDef());\n    assertTrue(task2.isActive());\n    assertFalse(task2.isTerminal());\n    assertEquals(1, flow.getRunningTasks().size());\n    assertEquals(Set.of(\"task1\"), flow.getRunningTasks().keySet());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/models/FlowTest.java", "function_name": "testNewTaskInline", "index": 2445, "label": 0}
{"input": "Object getFromSignalDependency(String signalDependencyName, String paramName) {\n    try {\n      return executor\n          .submit(() -> fromSignalDependency(signalDependencyName, paramName))\n          .get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS);\n    } catch (Exception e) {\n      throw new MaestroInternalError(\n          e,\n          \"getFromSignalDependency throws an exception for signalDependencyName=[%s], paramName=[%s]\",\n          signalDependencyName,\n          paramName);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "getFromSignalDependency", "index": 2446, "label": 0}
{"input": "@Test\n  public void testParseStepParameterWith3Underscore() {\n    StringParameter bar =\n        StringParameter.builder().name(\"bar\").expression(\"_step1___foo + '-1';\").build();\n    paramEvaluator.parseStepParameter(\n        Collections.singletonMap(\"_step1\", Collections.emptyMap()),\n        Collections.emptyMap(),\n        Collections.singletonMap(\"_foo\", StringParameter.builder().value(\"123\").build()),\n        bar,\n        \"_step1\");\n    assertEquals(\"123-1\", bar.getEvaluatedResult());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ParamEvaluatorTest.java", "function_name": "testParseStepParameterWith3Underscore", "index": 2447, "label": 0}
{"input": "@Test\n    public void TestFillNullPoint() {\n        String templateFileName = TestFileUtil.getPath() + \"temp/issue1663\" + File.separator + \"template.xlsx\";\n        \n        String fileName = TestFileUtil.getPath() + \"temp/issue1663\" + File.separator + \"issue1663.xlsx\";\n        ExcelWriter excelWriter = EasyExcel.write(fileName).withTemplate(templateFileName).build();\n        WriteSheet writeSheet = EasyExcel.writerSheet().build();\n        FillConfig fillConfig = FillConfig.builder().direction(WriteDirectionEnum.VERTICAL).build();\n        excelWriter.fill(new FillWrapper(\"data1\", data()), fillConfig, writeSheet);\n        \n        Map<String, Object> map = new HashMap<String, Object>();\n        \n        map.put(\"date\", \"2019年10月9日13:28:28\");\n        excelWriter.fill(map, writeSheet);\n        excelWriter.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/issue1663/FillTest.java", "function_name": "TestFillNullPoint", "index": 2448, "label": 0}
{"input": "@Override\n  public List<Task> getTasksForWorkflow(String workflowId) {\n    List<Task> tasks =\n        withMetricLogError(\n            () ->\n                getPayloads(\n                    GET_TASKS_BY_WORKFLOW_INSTANCE_ID_STATEMENT,\n                    statement -> statement.setString(1, workflowId),\n                    Task.class),\n            \"getTasksForWorkflow\",\n            \"Failed getting tasks for workflow with id {}\",\n            workflowId);\n    tasks.sort(Comparator.comparingInt(Task::getSeq));\n    return tasks;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getTasksForWorkflow", "index": 2449, "label": 0}
{"input": "public ExcelWriteDataConvertException(CellWriteHandlerContext cellWriteHandlerContext, String message,\n            Throwable cause) {\n        super(cellWriteHandlerContext.getRowIndex(), cellWriteHandlerContext.getColumnIndex(),\n                cellWriteHandlerContext.getFirstCellData(), cellWriteHandlerContext.getExcelContentProperty(), message,\n                cause);\n        this.cellWriteHandlerContext = cellWriteHandlerContext;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/exception/ExcelWriteDataConvertException.java", "function_name": "ExcelWriteDataConvertException", "index": 2450, "label": 0}
{"input": "@Override\n    public List<SessionVO> querySession() {\n        \n        return Opt.ofNullable(sessionRepository.querySession())\n                \n                .ifPresent(sessionVos -> sessionVos.forEach(sessionVo -> sessionVo.setShortTime(DateFormatUtil.formatTimestamp(sessionVo.getTime()))))\n                \n                .orElse(Collections.emptyList());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/SessionServiceImpl.java", "function_name": "querySession", "index": 2451, "label": 0}
{"input": "@Test\n  public void testSupportedCallSplits() {\n    SelType res = SelString.of(\"a b c\").call(\"split\", new SelType[] {SelString.of(\"\\\\ \")});\n    assertEquals(SelTypes.STRING_ARRAY, res.type());\n    assertEquals(3, ((SelLong) res.field(SelString.of(\"length\"))).intVal());\n    assertEquals(\"[a, b, c]\", res.toString());\n\n    res = SelString.of(\"a b c\").call(\"split\", new SelType[] {SelString.of(\"\\\\ \"), SelLong.of(2)});\n    assertEquals(SelTypes.STRING_ARRAY, res.type());\n    assertEquals(2, ((SelLong) res.field(SelString.of(\"length\"))).intVal());\n    assertEquals(\"[a, b c]\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testSupportedCallSplits", "index": 2452, "label": 0}
{"input": "default Optional<String> getFlywayTable() {\n    return Optional.ofNullable(getProperty(FLYWAY_TABLE_PROPERTY_NAME, null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getFlywayTable", "index": 2453, "label": 0}
{"input": "@BeforeEach\n\tvoid setUp() {\n\t\t\n\t\tdashScopeApi = Mockito.mock(DashScopeApi.class);\n\t\tdefaultOptions = DashScopeEmbeddingOptions.builder()\n\t\t\t.withModel(TEST_MODEL)\n\t\t\t.withTextType(TEST_TEXT_TYPE)\n\t\t\t.withDimensions(TEST_DIMENSION)\n\t\t\t.build();\n\t\tembeddingModel = new DashScopeEmbeddingModel(dashScopeApi, MetadataMode.EMBED, defaultOptions);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57d0b6295b47a9bc0de24bbad89345bf03251a7f", "file_path": "spring-ai-alibaba-core/src/test/java/com/alibaba/cloud/ai/dashscope/embedding/DashScopeEmbeddingModelTests.java", "function_name": "setUp", "index": 2454, "label": 0}
{"input": "@Test\n  public void testStart() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setWorkflowId(\"test-workflow\");\n    instance.setWorkflowVersionId(1);\n    instance.setRuntimeWorkflow(mock(Workflow.class));\n    instance.setRuntimeDag(Collections.singletonMap(\"step1\", new StepTransition()));\n    Map<String, Map<String, ParamDefinition>> stepRunParams =\n        Collections.singletonMap(\n            \"stepid\",\n            Collections.singletonMap(\"p1\", ParamDefinition.buildParamDefinition(\"p1\", \"d1\")));\n    instance.setStepRunParams(stepRunParams);\n    assertEquals(\"test-uuid\", runner.start(instance));\n    verify(translator, times(1)).translate(instance);\n    verify(workflowExecutor, times(1))\n        .startWorkflow(any(), anyMap(), any(), any(), anyString(), anyMap());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowRunnerTest.java", "function_name": "testStart", "index": 2455, "label": 0}
{"input": "public Optional<Date> calculateEarliestExecutionDate(\n      List<TimeTriggerWithWatermark> timeTriggers, String workflowId) {\n    return timeTriggers.stream()\n        .map(\n            t ->\n                TriggerHelper.nextExecutionDate(\n                    t.getTimeTrigger(), new Date(t.getLastTriggerTimestamp()), workflowId))\n        .filter(Optional::isPresent)\n        .map(Optional::get)\n        .min(Comparator.naturalOrder());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlanner.java", "function_name": "calculateEarliestExecutionDate", "index": 2456, "label": 0}
{"input": "@Override\n  public void checkExec(String cmd) {\n    if (accs.get() != null) {\n      super.checkExec(cmd);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkExec", "index": 2457, "label": 0}
{"input": "public MaestroSignalInstanceDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      DatabaseConfiguration config,\n      MaestroMetrics metrics) {\n    super(dataSource, objectMapper, config, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalInstanceDao.java", "function_name": "MaestroSignalInstanceDao", "index": 2458, "label": 0}
{"input": "private StepAggregatedView generateStepAggregated(\n      StepInstance.Status status, Long startTime, Long endTime) {\n    return StepAggregatedView.builder()\n        .workflowRunId(1L)\n        .status(status)\n        .startTime(startTime)\n        .endTime(endTime)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/AggregatedViewHelperTest.java", "function_name": "generateStepAggregated", "index": 2459, "label": 0}
{"input": "public static CronExpression buildCron(String cron, TimeZone timezone) throws ParseException {\n    String cronStr = cron;\n    CronParser unixParser =\n        new CronParser(CronDefinitionBuilder.instanceDefinitionFor(CronType.UNIX));\n    try {\n      Cron parsedCron = unixParser.parse(cron);\n      cronStr = CronMapper.fromUnixToQuartz().map(parsedCron).asString();\n    } catch (IllegalArgumentException e) {\n      LOG.debug(\"Unix cron parsing not successful for \" + cron, e);\n    }\n    CronExpression cronExpression = new CronExpression(cronStr);\n    cronExpression.setTimeZone(timezone);\n    return cronExpression;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/TriggerHelper.java", "function_name": "buildCron", "index": 2460, "label": 0}
{"input": "public Set<String> getStringSet(String name, Set<String> def) {\n        return sharedPreferences.getStringSet(name, def);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/FileManager.java", "function_name": "getStringSet", "index": 2461, "label": 0}
{"input": "private @Nullable Operator getOperator() {\n    return switch (lookahead) {\n      case POW -> Operator.POW;\n      case STAR -> Operator.MULT;\n      case DIV -> Operator.DIV;\n      case INT_DIV -> Operator.INT_DIV;\n      case MOD -> Operator.MOD;\n      case PLUS -> Operator.PLUS;\n      case MINUS -> Operator.MINUS;\n      case GT -> Operator.GT;\n      case GTE -> Operator.GTE;\n      case LT -> Operator.LT;\n      case LTE -> Operator.LTE;\n      case IS -> Operator.IS;\n      case AS -> Operator.AS;\n      case EQUAL -> Operator.EQ_EQ;\n      case NOT_EQUAL -> Operator.NOT_EQ;\n      case AND -> Operator.AND;\n      case OR -> Operator.OR;\n      case PIPE -> Operator.PIPE;\n      case COALESCE -> Operator.NULL_COALESCE;\n      case DOT -> Operator.DOT;\n      case QDOT -> Operator.QDOT;\n      default -> null;\n    };\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "getOperator", "index": 2462, "label": 0}
{"input": "private boolean jj_3R_37() {\n    if (jj_3R_16()) return true;\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_41()) jj_scanpos = xsp;\n    if (jj_3R_18()) return true;\n    if (jj_3R_21()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_37", "index": 2463, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(\n      value = \"triggers.signal-trigger.type\",\n      havingValue = \"noop\",\n      matchIfMissing = true)\n  public SignalQueueProducer noopSignalQueueProducer() {\n    LOG.info(\"Creating noopSignalQueueProducer within Spring boot...\");\n    return new SignalQueueProducer() {\n      @Override\n      public void push(SignalInstance signalInstance) {}\n\n      @Override\n      public void push(SignalTriggerMatch triggerMatch) {}\n\n      @Override\n      public void push(SignalTriggerExecution triggerExecution) {}\n    };\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "noopSignalQueueProducer", "index": 2464, "label": 0}
{"input": "public static com.itextpdf.layout.property.VerticalAlignment getVerticalAlignment(VerticalAlignment verticalAlignment) {\n        switch (verticalAlignment) {\n            case TOP:\n                return com.itextpdf.layout.property.VerticalAlignment.TOP;\n            case BOTTOM:\n                return com.itextpdf.layout.property.VerticalAlignment.BOTTOM;\n            case JUSTIFY:\n            case CENTER:\n                return com.itextpdf.layout.property.VerticalAlignment.MIDDLE;\n        }\n        return com.itextpdf.layout.property.VerticalAlignment.MIDDLE;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java", "function_name": "getVerticalAlignment", "index": 2465, "label": 0}
{"input": "@Test\n    public void hh() throws IOException {\n        ExcelReader reader = EasyExcel.read(new FileInputStream(\"D:\\\\test\\\\hg2.xls\"), LockData.class,\n                new RepeatListener()).headRowNumber(0).build();\n        ReadSheet r1 = EasyExcel.readSheet(0).build();\n        ReadSheet r2 = EasyExcel.readSheet(2).build();\n        reader.read(r1);\n        reader.read(r2);\n        reader.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "hh", "index": 2466, "label": 0}
{"input": "@Override\n    public List<RecoverContactVO> queryRecoverContact(RecoverContactDTO recoverContactDTO) {\n        List<FTSContactContent> ftsContactContents = ftsContactContentRepository.queryContactContent(recoverContactDTO);\n        Set<String> set = contactRepository.getContactWithMp();\n        return ftsContactContents.stream()\n                .filter(ftsContent -> !set.contains(ftsContent.getAlias()))\n                .map(recoverContactMapping::convert)\n                .collect(Collectors.toList());\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "e8526ae8bec20c379510005ef2b6ea9bfa796382", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/RecoverContactServiceImpl.java", "function_name": "queryRecoverContact", "index": 2467, "label": 0}
{"input": "private void includeFieldNameOrder(File file) {\n        List<String> includeColumnFieldNames = new ArrayList<>();\n        includeColumnFieldNames.add(\"column4\");\n        includeColumnFieldNames.add(\"column2\");\n        includeColumnFieldNames.add(\"column3\");\n        EasyExcel.write(file, ExcludeOrIncludeData.class)\n            .includeColumnFieldNames(includeColumnFieldNames)\n            .orderByIncludeColumn(true).\n            sheet()\n            .doWrite(data());\n        List<Map<Integer, String>> dataMap = EasyExcel.read(file).sheet().doReadSync();\n        Assertions.assertEquals(1, dataMap.size());\n        Map<Integer, String> record = dataMap.get(0);\n        Assertions.assertEquals(3, record.size());\n        Assertions.assertEquals(\"column4\", record.get(0));\n        Assertions.assertEquals(\"column2\", record.get(1));\n        Assertions.assertEquals(\"column3\", record.get(2));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "f92c3168bd3a9d3d4d1c64348601b2300f39b89d", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/excludeorinclude/ExcludeOrIncludeDataTest.java", "function_name": "includeFieldNameOrder", "index": 2468, "label": 0}
{"input": "@Test\n  public void testGetAllStepIdsInNestedForeach() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    ForeachStep foreachStep = new ForeachStep();\n    foreachStep.setId(\"foreach-step\");\n    foreachStep.setSteps(Collections.nCopies(Constants.STEP_LIST_SIZE_LIMIT - 1, step));\n\n    Workflow workflow = Workflow.builder().steps(Collections.singletonList(foreachStep)).build();\n    assertEquals(Constants.STEP_LIST_SIZE_LIMIT, workflow.getAllStepIds().size());\n    List<String> expected = new ArrayList<>();\n    expected.add(\"foreach-step\");\n    expected.addAll(Collections.nCopies(Constants.STEP_LIST_SIZE_LIMIT - 1, \"foo\"));\n    assertEquals(expected, workflow.getAllStepIds());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowTest.java", "function_name": "testGetAllStepIdsInNestedForeach", "index": 2469, "label": 0}
{"input": "@Test\n    public void lastRowNum() throws IOException {\n        String file = \"src/test/resources/poi/last_row_number_test.xlsx\";\n        SXSSFWorkbook xssfWorkbook = new SXSSFWorkbook(new XSSFWorkbook(file));\n        SXSSFSheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n        SXSSFRow row = xssfSheet.getRow(0);\n        LOGGER.info(\"第一行数据:{}\", row);\n        xssfSheet.createRow(20);\n        LOGGER.info(\"一共行数:{}\", xssfSheet.getLastRowNum());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "7b1fce1dc917f8b846bcda772bfd5586d3d079de", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiFormatTest.java", "function_name": "lastRowNum", "index": 2470, "label": 0}
{"input": "@Test\n  public void testWorkflowInstanceMetadataForWorkflowInstancesLatestRun() {\n    instanceDao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.FAILED, \"kill the test\");\n    wfi.setWorkflowUuid(\"test-uuid\");\n    wfi.setWorkflowRunId(0L);\n    wfi.setRunConfig(new RunConfig());\n    wfi.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_INCOMPLETE);\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(1, res);\n    assertEquals(1, wfi.getWorkflowInstanceId());\n    assertEquals(2, wfi.getWorkflowRunId());\n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n\n    List<WorkflowInstance> workflowInstances =\n        instanceDao.getWorkflowInstancesWithLatestRun(wfi.getWorkflowId(), 1, 1, false);\n    WorkflowInstance instanceRun = workflowInstances.get(0);\n    instanceRun.setModifyTime(null);\n    assertEquals(wfi, instanceRun);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testWorkflowInstanceMetadataForWorkflowInstancesLatestRun", "index": 2471, "label": 0}
{"input": "@Bean\n  public WorkflowTranslator workflowTranslator(StepTranslator stepTranslator) {\n    LOG.info(\"Creating Maestro workflowTranslator within Spring boot...\");\n    return new WorkflowTranslator(stepTranslator);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "workflowTranslator", "index": 2472, "label": 0}
{"input": "public static void insertStackFrame(\n      ObjectMember member, CallTarget location, VmException exception) {\n    var sourceSection = member.getBodySection();\n    if (!sourceSection.isAvailable()) {\n      sourceSection = member.getSourceSection();\n    }\n    if (sourceSection.isAvailable()) {\n      exception\n          .getInsertedStackFrames()\n          .put(location, createStackFrame(sourceSection, member.getQualifiedName()));\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java", "function_name": "insertStackFrame", "index": 2473, "label": 0}
{"input": "@Test\n  public void testTaskUpdateForRunningTask() {\n    Task task1 = flow.newTask(new TaskDef(\"task1\", \"noop\", null, null), false);\n    task1.setStatus(Task.Status.FAILED);\n    flow.addFinishedTask(task1);\n    flowActor.runForAction(new Action.FlowTaskRetry(\"task1\"));\n\n    Task task2 = flow.newTask(new TaskDef(\"task1\", \"noop\", Map.of(), null), false);\n    task2.setStatus(Task.Status.IN_PROGRESS);\n\n    flowActor.runForAction(new Action.TaskUpdate(task2));\n    assertEquals(Set.of(Action.FLOW_REFRESH), flowActor.getScheduledActions().keySet());\n    assertEquals(task2, flow.getRunningTasks().get(\"task1\"));\n    verifyEmptyAction(flowActor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testTaskUpdateForRunningTask", "index": 2474, "label": 0}
{"input": "@Test\n\tvoid testErrorHandling() {\n\t\t\n\t\twhen(dashScopeApi.chatCompletionEntity(any(), any())).thenThrow(new RuntimeException(\"API Error\"));\n\n\t\tMessage message = new UserMessage(\"Test message\");\n\t\tPrompt prompt = new Prompt(List.of(message));\n\n\t\tassertThatThrownBy(() -> chatModel.call(prompt)).isInstanceOf(RuntimeException.class).hasMessage(\"API Error\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/test/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatModelTests.java", "function_name": "testErrorHandling", "index": 2475, "label": 0}
{"input": "private State deriveStepStateOnceDone(ForeachArtifact artifact) {\n    refreshIterationOverview(artifact);\n    Checks.checkTrue(\n        artifact.getForeachOverview().getRunningStatsCount(false) == 0,\n        \"Invalid running stats in foreach artifact overview: \",\n        artifact.getForeachOverview());\n    if (artifact.getForeachOverview().statusExistInIterations(WorkflowInstance.Status.FAILED)) {\n      return State.FATAL_ERROR;\n    } else if (artifact\n        .getForeachOverview()\n        .statusExistInIterations(WorkflowInstance.Status.TIMED_OUT)) {\n      return State.TIMED_OUT;\n    } else if (artifact\n        .getForeachOverview()\n        .statusExistInIterations(WorkflowInstance.Status.STOPPED)) {\n      return State.STOPPED;\n    } else {\n      return State.DONE;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/steps/ForeachStepRuntime.java", "function_name": "deriveStepStateOnceDone", "index": 2476, "label": 0}
{"input": "private void publishRunInstancesJobEvent(RunWorkflowInstancesJobEvent startInstances) {\n    publisher.publishOrThrow(\n        startInstances, \"Failed sending job events to run workflow instances, will retry.\");\n    startInstances.getInstanceRunUuids().clear();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "publishRunInstancesJobEvent", "index": 2477, "label": 0}
{"input": "@TruffleBoundary\n  public static ImportGraph analyze(URI[] moduleUris, VmContext context)\n      throws IOException, SecurityManagerException {\n    var imports = new TreeMap<URI, Set<ImportGraph.Import>>();\n    var resolvedImports = new TreeMap<URI, URI>();\n    for (var moduleUri : moduleUris) {\n      var moduleKey = context.getModuleResolver().resolve(moduleUri);\n      var resolvedModuleKey = moduleKey.resolve(context.getSecurityManager());\n      analyzeSingle(moduleUri, resolvedModuleKey, context, imports, resolvedImports);\n    }\n    return new ImportGraph(imports, resolvedImports);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1a4f9ee72e5dfa9b9678ffafe51de93d4dd65128", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmImportAnalyzer.java", "function_name": "analyze", "index": 2478, "label": 0}
{"input": "public static JSONObject addGroupMemberAsFriend(String appId, String memberWxid,String chatroomId,String content){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"memberWxid\",memberWxid);\r\n        param.put(\"content\",content);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/addGroupMemberAsFriend\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "addGroupMemberAsFriend", "index": 2479, "label": 0}
{"input": "public void clearNodeScope(Node n) {\n    while (sp > mk) {\n      popNode();\n    }\n    mk = marks.remove(marks.size() - 1);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/JJTSelParserState.java", "function_name": "clearNodeScope", "index": 2480, "label": 0}
{"input": "@Test\n  public void testDefaultReturn() {\n    assertEquals(1L, evaluator.eval(\"x = 1\", Collections.singletonMap(\"x\", 10)));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorTest.java", "function_name": "testDefaultReturn", "index": 2481, "label": 0}
{"input": "@Test\n  public void testPartitionList() {\n    List<String> list = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n      list.add(\"i\" + i);\n    }\n    Assert.assertEquals(2, ObjectHelper.partitionList(list, 3).size());\n    Assert.assertEquals(List.of(\"i0\", \"i1\", \"i2\"), ObjectHelper.partitionList(list, 3).get(0));\n    Assert.assertEquals(List.of(\"i3\", \"i4\"), ObjectHelper.partitionList(list, 3).get(1));\n    Assert.assertTrue(ObjectHelper.partitionList(null, 5).isEmpty());\n    Assert.assertEquals(List.of(list), ObjectHelper.partitionList(list, 5));\n    Assert.assertEquals(5, ObjectHelper.partitionList(list, 1).size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ObjectHelperTest.java", "function_name": "testPartitionList", "index": 2482, "label": 0}
{"input": "@Test\n  public void testWorkflowFinalizedTerminated() {\n    when(workflow.getStatus()).thenReturn(Workflow.WorkflowStatus.TERMINATED);\n    when(instanceDao.getWorkflowInstanceStatus(eq(\"test-workflow-id\"), anyLong(), anyLong()))\n        .thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    statusListener.onWorkflowFinalized(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowFinalized\",\n                \"status\",\n                \"TERMINATED\")\n            .count());\n    verify(instanceDao, times(1))\n        .updateWorkflowInstance(\n            any(), any(), any(), eq(WorkflowInstance.Status.STOPPED), anyLong());\n    verify(publisher, times(1)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowFinalizedTerminated", "index": 2483, "label": 0}
{"input": "@Bean\n  public StartWorkflowJobProcessor startWorkflowJobProcessor(\n      MaestroWorkflowDao maestroWorkflowDao, MaestroRunStrategyDao maestroRunStrategyDao) {\n    LOG.info(\"Creating startWorkflowJobProcessor within Spring boot...\");\n    return new StartWorkflowJobProcessor(maestroWorkflowDao, maestroRunStrategyDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "startWorkflowJobProcessor", "index": 2484, "label": 0}
{"input": "public DocLoaderInput(String fileType, String filePath) {\n\t\t\tthis.fileType = fileType;\n\t\t\tthis.filePath = filePath;\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b519b7c9cc1f88dafec21315dbc4bc5cb5ac4fe1", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/DocLoaderTool.java", "function_name": "DocLoaderInput", "index": 2485, "label": 0}
{"input": "public static byte[] convertHtmlToPdfBytes(String htmlContent) {\n\t\ttry (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n\t\t\tPdfRendererBuilder builder = createPdfRendererBuilder();\n\t\t\tconfigureFont(builder);\n\t\t\tconfigureBaseUri(builder);\n\n\t\t\tbuilder.withHtmlContent(htmlContent, getBaseUri());\n\t\t\tbuilder.toStream(baos);\n\t\t\tbuilder.run();\n\n\t\t\treturn baos.toByteArray();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.error(\"Failed to convert HTML to PDF\", e);\n\t\t\tthrow new RuntimeException(\"Failed to convert HTML to PDF\", e);\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FormatConversionUtil.java", "function_name": "convertHtmlToPdfBytes", "index": 2486, "label": 0}
{"input": "private PropertiesSnapshot propertiesSnapshotFromResult(ResultSet rs, String workflowId)\n      throws SQLException {\n    return fromJson(\n        Checks.notNull(\n            rs.getString(PROPERTIES_COLUMN),\n            \"Properties in DB cannot be null for workflow [%s]\",\n            workflowId),\n        PropertiesSnapshot.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "propertiesSnapshotFromResult", "index": 2487, "label": 0}
{"input": "public StringConstantParts getStrParts() {\n    assert children != null;\n    return (StringConstantParts) children.get(0);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringConstant.java", "function_name": "getStrParts", "index": 2488, "label": 0}
{"input": "private void configureStatusBar(Activity activity) {\n        if (activity == null) return;\n\n        activity.getWindow().setStatusBarColor(Color.TRANSPARENT);\n        activity.getWindow().getDecorView().setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "configureStatusBar", "index": 2489, "label": 0}
{"input": "public boolean existsReportByThreadId(String threadId) {\n\t\treturn reportService.existsReport(threadId);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/service/ExportService.java", "function_name": "existsReportByThreadId", "index": 2490, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidSet() {\n    another.set(1, SelString.of(\"baz\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelArrayTest.java", "function_name": "testInvalidSet", "index": 2491, "label": 0}
{"input": "@Test\n    public void t01ReadAndWrite() throws Exception {\n        Field field = FieldUtils.getField(ClassUtils.class, \"FIELD_THREAD_LOCAL\", true);\n        ThreadLocal<Map<Class<?>, FieldCache>> fieldThreadLocal = (ThreadLocal<Map<Class<?>, FieldCache>>) field.get(\n                ClassUtils.class.newInstance());\n        Assertions.assertNull(fieldThreadLocal.get());\n        EasyExcel.write(file07, CacheData.class).sheet().doWrite(data());\n        EasyExcel.read(file07, CacheData.class, new PageReadListener<DemoData>(dataList -> {\n            Assertions.assertNotNull(fieldThreadLocal.get());\n        })).sheet().doRead();\n        Assertions.assertNull(fieldThreadLocal.get());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/cache/CacheDataTest.java", "function_name": "t01ReadAndWrite", "index": 2492, "label": 0}
{"input": "@Test\n  public void testNonNullMapTypes() {\n    verifyNonNullMap(defaultParamManager.getDefaultWorkflowParams());\n    verifyNonNullMap(defaultParamManager.getDefaultStepParams());\n    verifyNonNullMap(defaultParamManager.getDefaultParamsForType(StepType.SUBWORKFLOW).get());\n    verifyNonNullMap(defaultParamManager.getDefaultParamsForType(StepType.FOREACH).get());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testNonNullMapTypes", "index": 2493, "label": 0}
{"input": "@Test\n  public void testCreateSelArray() {\n    SelType res = SelTypes.LONG.newSelTypeObjArray(3);\n    assertEquals(SelTypes.LONG_ARRAY, res.type());\n    assertEquals(\"[0, 0, 0]\", res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelTypesTest.java", "function_name": "testCreateSelArray", "index": 2494, "label": 0}
{"input": "@JsonAnySetter\n  public void addAttribute(String key, Object attribute) {\n    this.attributes.put(key, attribute);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/Tag.java", "function_name": "addAttribute", "index": 2495, "label": 0}
{"input": "private void addEmptyCells(Table table, int numberOfCells) {\n        for (int j = 0; j < numberOfCells; j++) {\n            addEmptyCell(table);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java", "function_name": "addEmptyCells", "index": 2496, "label": 0}
{"input": "public Builder addMembers(\n                    int index, Member.Builder builderForValue) {\n                if (membersBuilder_ == null) {\n                    ensureMembersIsMutable();\n                    members_.add(index, builderForValue.build());\n                    onChanged();\n                } else {\n                    membersBuilder_.addMessage(index, builderForValue.build());\n                }\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "addMembers", "index": 2497, "label": 0}
{"input": "@Test\n  public void testStartWithRunStrategyForRestart() {\n    dao.tryTerminateQueuedInstance(wfi, WorkflowInstance.Status.FAILED, \"kill the test\");\n    verifyPublish(0, 0, 0, 0, 1);\n    wfi.setWorkflowRunId(0L);\n    wfi.setWorkflowUuid(\"test-uuid\");\n    wfi.setRunConfig(new RunConfig());\n    wfi.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_INCOMPLETE);\n    int res = runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY);\n    assertEquals(1, res);\n    assertEquals(1, wfi.getWorkflowInstanceId());\n    assertEquals(2, wfi.getWorkflowRunId());\n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n    WorkflowInstance latestRun =\n        dao.getLatestWorkflowInstanceRun(wfi.getWorkflowId(), wfi.getWorkflowInstanceId());\n    assertEquals(1, latestRun.getWorkflowInstanceId());\n    assertEquals(\"test-uuid\", latestRun.getWorkflowUuid());\n    verifyPublish(1, 0, 0, 0, 0);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "testStartWithRunStrategyForRestart", "index": 2498, "label": 0}
{"input": "@Test\n  public void testTaskDown() {\n    flowActor.runForAction(Action.TASK_DOWN);\n    verifyActions(groupActor, Action.FLOW_DOWN);\n    assertFalse(flowActor.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/FlowActorTest.java", "function_name": "testTaskDown", "index": 2499, "label": 0}
{"input": "@PostMapping(value = \"/attach/upload\")\n  public R<String> upload(KnowledgeInfoUploadBo bo) {\n    knowledgeInfoService.upload(bo);\n    return R.ok(\"上传知识库附件成功!\");\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "32da85daabbb0e574f12bc7f1e0af6ff5b0cee6a", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/knowledge/KnowledgeController.java", "function_name": "upload", "index": 2500, "label": 0}
{"input": "@Bean\n  public ExecutionDAOFacade executionDAOFacade(\n      ExecutionDAO executionDAO,\n      QueueDAO queueDAO,\n      IndexDAO indexDAO,\n      RateLimitingDAO rateLimitingDao,\n      PollDataDAO pollDataDAO,\n      @Qualifier(CONDUCTOR_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props) {\n    LOG.info(\"Creating executionDAOFacade within Spring boot...\");\n    return new ExecutionDAOFacade(\n        executionDAO, queueDAO, indexDAO, rateLimitingDao, pollDataDAO, objectMapper, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/ConductorConfiguration.java", "function_name": "executionDAOFacade", "index": 2501, "label": 0}
{"input": "public MaestroFlowDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      FlowEngineProperties properties,\n      MaestroMetrics metrics) {\n    super(dataSource, objectMapper, properties, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/dao/MaestroFlowDao.java", "function_name": "MaestroFlowDao", "index": 2502, "label": 0}
{"input": "@Test\n  public void testGetSize() {\n    String queueName = \"test-queue\";\n    String id = \"abcd-1234-defg-5678\";\n    assertEquals(0, queueDao.getSize(queueName));\n    queueDao.pushIfNotExists(queueName, id, 123);\n    assertEquals(1, queueDao.getSize(queueName));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "465feefeb15bf57091641f75d9eed7875aefe5d7", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/InMemoryQueueDaoTest.java", "function_name": "testGetSize", "index": 2503, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testInvalidCallArgType() {\n    SelJavaMath.INSTANCE.call(\"min\", new SelType[] {SelType.NULL, SelType.NULL});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelJavaMathTest.java", "function_name": "testInvalidCallArgType", "index": 2504, "label": 0}
{"input": "public TableRelationNode(ChatClient.Builder chatClientBuilder, BaseSchemaService baseSchemaService,\n\t\t\tBaseNl2SqlService baseNl2SqlService) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t\tthis.baseSchemaService = baseSchemaService;\n\t\tthis.baseNl2SqlService = baseNl2SqlService;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/TableRelationNode.java", "function_name": "TableRelationNode", "index": 2505, "label": 0}
{"input": "public SearchBeanUtil(ApplicationContext context, DeepResearchProperties properties) {\n\t\tthis.context = context;\n\t\tthis.searchList = properties.getSearchList();\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/tool/SearchBeanUtil.java", "function_name": "SearchBeanUtil", "index": 2506, "label": 0}
{"input": "public static JSONObject agreeJoinRoom(String appId, String url){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomName\",url);\r\n        return OkhttpUtil.postJSON(\"/group/agreeJoinRoom\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "agreeJoinRoom", "index": 2507, "label": 0}
{"input": "private void handleTrafficClassic(Context ctx) throws Exception {\n        var timeQueryModel = WebUtil.parseTimeQueryModel(ctx);\n        String downloader = ctx.queryParam(\"downloader\");\n        var records = trafficJournalDao.getDayOffsetData(downloader,\n                timeQueryModel.startAt(),\n                timeQueryModel.endAt());\n        ctx.json(new StdResp(true, null, fixTimezone(ctx, records)));\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "acadaae4a1d5350c1f723c8ec5f34660e1f38a27", "file_path": "src/main/java/com/ghostchu/peerbanhelper/module/impl/webapi/PBHChartController.java", "function_name": "handleTrafficClassic", "index": 2508, "label": 0}
{"input": "public XlsxReadSheetHolder(ReadSheet readSheet, ReadWorkbookHolder readWorkbookHolder) {\n        super(readSheet, readWorkbookHolder);\n        this.tagDeque = new LinkedList<String>();\n        packageRelationshipCollection = ((XlsxReadWorkbookHolder) readWorkbookHolder).getPackageRelationshipCollectionMap()\n                .get(readSheet.getSheetNo());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/metadata/holder/xlsx/XlsxReadSheetHolder.java", "function_name": "XlsxReadSheetHolder", "index": 2509, "label": 0}
{"input": "public static Map<String, Task> getUserDefinedRealTaskMap(Workflow workflow) {\n    return workflow.getTasks().stream()\n        .filter(TaskHelper::isUserDefinedRealTask)\n        .collect(\n            Collectors.toMap(\n                Task::getReferenceTaskName,\n                Function.identity(),\n                \n                (task1, task2) -> task2));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/TaskHelper.java", "function_name": "getUserDefinedRealTaskMap", "index": 2510, "label": 0}
{"input": "public FlowGroup claimExpiredGroup(String address, long expiration) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                CLAIM_FLOW_GROUP_QUERY,\n                stmt -> {\n                  stmt.setString(1, address);\n                  stmt.setLong(2, expiration);\n                },\n                result -> {\n                  if (result.next()) {\n                    return new FlowGroup(result.getLong(1), result.getLong(2), address);\n                  }\n                  return null;\n                }),\n        \"claimGroup\",\n        \"Failed to claim a group by an owner with an address [{}]\",\n        address);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/dao/MaestroFlowDao.java", "function_name": "claimExpiredGroup", "index": 2511, "label": 0}
{"input": "public VmBytes concatenate(VmBytes right) {\n    if (bytes.length == 0) return right;\n    if (right.bytes.length == 0) return this;\n\n    var newBytes = new byte[bytes.length + right.bytes.length];\n    System.arraycopy(bytes, 0, newBytes, 0, bytes.length);\n    System.arraycopy(right.bytes, 0, newBytes, bytes.length, right.bytes.length);\n    return new VmBytes(newBytes);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/runtime/VmBytes.java", "function_name": "concatenate", "index": 2512, "label": 0}
{"input": "@Test\n    public void testread() throws IOException {\n        String sourceFile = \"src/test/resources/simple/simple07.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        try(SXSSFWorkbook xssfWorkbook = new SXSSFWorkbook(new XSSFWorkbook(file));){\n            Sheet xssfSheet = xssfWorkbook.getXSSFWorkbook().getSheetAt(0);\n            \n            \n        }\n\n        String file1 = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file1));\n\n        try(SXSSFWorkbook xssfWorkbook1 = new SXSSFWorkbook(new XSSFWorkbook(file1));){\n            Sheet xssfSheet1 = xssfWorkbook1.getXSSFWorkbook().getSheetAt(0);\n            \n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "testread", "index": 2513, "label": 0}
{"input": "public static JSONObject getQr(String appId, String proxyIp) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"proxyIp\", proxyIp);\r\n        param.put(\"regionId\", \"\");\r\n        return OkhttpUtil.postJSON(\"/login/getLoginQrCode\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "getQr", "index": 2514, "label": 0}
{"input": "@Test\n  public void testResetWithInputAndGet() {\n    assertTrue(state.isStackEmpty());\n    assertEquals(SelType.NULL, state.get(\"foo\"));\n    state.resetWithInput(params, null);\n    assertEquals(SelString.of(\"bar\"), state.get(\"foo\"));\n    assertEquals(SelType.NULL, state.get(\"bar\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "testResetWithInputAndGet", "index": 2515, "label": 0}
{"input": "Object getFromInstance(String fieldName) {\n    try {\n      Object ret =\n          executor\n              .submit(() -> fromInstance(fieldName))\n              .get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS);\n      \n      return ret == null ? \"\" : ret;\n    } catch (Exception e) {\n      throw new MaestroInternalError(\n          e, \"getFromInstance throws an exception for fieldName=[%s]\", fieldName);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "getFromInstance", "index": 2516, "label": 0}
{"input": "@Autowired\n  public SignalController(MaestroSignalBrokerDao brokerDao) {\n    this.brokerDao = brokerDao;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/SignalController.java", "function_name": "SignalController", "index": 2517, "label": 0}
{"input": "@Test\n  public void testNullStepTypeParams() {\n    assertFalse(defaultParamManager.getDefaultParamsForType(StepType.TITUS).isPresent());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testNullStepTypeParams", "index": 2518, "label": 0}
{"input": "public java.util.List<? extends SubMessage2OrBuilder>\n            getMessage2OrBuilderList() {\n                if (message2Builder_ != null) {\n                    return message2Builder_.getMessageOrBuilderList();\n                } else {\n                    return java.util.Collections.unmodifiableList(message2_);\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage2OrBuilderList", "index": 2519, "label": 0}
{"input": "@Test\n  public void testLeafStepNotEnoughInfo() {\n    event.setEntityType(StepInstanceWakeUpEvent.EntityType.STEP);\n    setStepInstanceDefinition(StepType.NOTEBOOK);\n    setStepInstanceRuntimeState(StepInstance.Status.PLATFORM_FAILED);\n    subject.process(() -> event);\n\n    Mockito.verify(workflowExecutor, Mockito.times(1)).resetTaskOffset(stepUuid);\n    Mockito.verify(stepInstanceDao, Mockito.times(1))\n        .getStepInstance(workflowId, workflowInstanceId, workflowRunId, stepId, stepAttemptId);\n    Mockito.verifyNoInteractions(workflowInstanceDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "testLeafStepNotEnoughInfo", "index": 2520, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeOutputSignals() throws Exception {\n    WorkflowDefinition wfd =\n        loadObject(\n            \"fixtures/workflows/definition/sample-active-wf-with-output-signals.json\",\n            WorkflowDefinition.class);\n    Assertions.assertThat(wfd)\n        .usingRecursiveComparison()\n        .isEqualTo(MAPPER.readValue(MAPPER.writeValueAsString(wfd), WorkflowDefinition.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowDefinitionTest.java", "function_name": "testRoundTripSerdeOutputSignals", "index": 2521, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.listener.type\", havingValue = \"sqs\")\n  public SimpleMessageListenerContainerFactory simpleMessageListenerContainerFactory(\n      AmazonSQSAsync amazonSqs, AwsProperties props) {\n    LOG.info(\"Creating simpleMessageListenerContainerFactory within Spring boot...\");\n    SimpleMessageListenerContainerFactory factory = new SimpleMessageListenerContainerFactory();\n    factory.setAmazonSqs(amazonSqs);\n    factory.setTaskExecutor(createDefaultTaskExecutor(props.getSqs()));\n    factory.setMaxNumberOfMessages(props.getSqs().getListenerMaxNumberOfMessages());\n    factory.setWaitTimeOut(props.getSqs().getListenerWaitTimeoutInSecs());\n    factory.setAutoStartup(true);\n    return factory;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "simpleMessageListenerContainerFactory", "index": 2522, "label": 0}
{"input": "public static JSONObject getChatroomInfo(String appId,String chatroomId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/getChatroomInfo\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "getChatroomInfo", "index": 2523, "label": 0}
{"input": "public GeneratorMemberNode visitObjectMember(org.pkl.core.parser.ast.ObjectMember member) {\n    return (GeneratorMemberNode) member.accept(this);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "visitObjectMember", "index": 2524, "label": 0}
{"input": "@Test\n  public void testDeactivateError() {\n    AssertHelper.assertThrows(\n        \"caller cannot be null to deactivate workflow\",\n        NullPointerException.class,\n        \"caller cannot be null to deactivate workflow [sample-minimal-wf]\",\n        () -> actionHandler.deactivate(\"sample-minimal-wf\", null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testDeactivateError", "index": 2525, "label": 0}
{"input": "public static Step retrieveStepDefinition(ObjectMapper objectMapper, Map<String, Object> data) {\n    return convertField(objectMapper, data, Constants.STEP_DEFINITION_FIELD, Step.class);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "retrieveStepDefinition", "index": 2526, "label": 0}
{"input": "@Test\n    public void write1() {\n        System.out.println(JSON.toJSONString(long2Bytes(-999999999999999L)));\n        System.out.println(JSON.toJSONString(long2Bytes(-9999999999999999L)));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "4f6d154fb74d7d5de0c54b00da48ea63d800184c", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiWriteTest.java", "function_name": "write1", "index": 2527, "label": 0}
{"input": "private void initPermissionLauncher() {\n        pushNotificationPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {\n            if (isGranted) {\n                canShowNotification = true;\n            } else {\n                disconnected();\n                Toast.makeText(this, \"Permission denied\", Toast.LENGTH_LONG).show();\n            }\n        });\n        vpnPermissionLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n            if (result.getResultCode() == RESULT_OK) {\n                OblivionVpnService.startVpnService(this);\n            } else {\n                OblivionVpnService.stopVpnService(this);\n                Toast.makeText(this, \"Really!?\", Toast.LENGTH_LONG).show();\n            }\n        });\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "4cd48025097947f8b94dc8a76d30abc97f106a5e", "file_path": "app/src/main/java/org/bepass/oblivion/MainActivity.java", "function_name": "initPermissionLauncher", "index": 2528, "label": 0}
{"input": "@JsonIgnore\n  public void addRunAfter(long instanceId, long runId, String uuid) {\n    this.runAfter = new InstanceRunUuid(instanceId, runId, uuid);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/jobevents/TerminateThenRunInstanceJobEvent.java", "function_name": "addRunAfter", "index": 2529, "label": 0}
{"input": "@Test\n  public void testReleaseTagPermitAndCleanUpStepActionIfTerminal() {\n    when(jobEvent1.toMaestroEvent(clusterName)).thenReturn(changeEvent1);\n    when(jobEvent1.hasTerminal()).thenReturn(true);\n    processor.process(() -> jobEvent1);\n    verify(tagPermitManager, times(1)).releaseTagPermits(jobEvent1.getStepUuid());\n    verify(actionDao, times(1)).cleanUp(jobEvent1);\n    verify(jobEvent1, times(1)).getType();\n    verify(eventClient, times(1)).send(changeEvent1);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/PublishJobEventProcessorTest.java", "function_name": "testReleaseTagPermitAndCleanUpStepActionIfTerminal", "index": 2530, "label": 0}
{"input": "private void handleSpeedCommand(String line) {\n        Matcher m = Pattern.compile(\"\\\\[speed:(\\\\d+)\\\\]\").matcher(line);\n        if (m.find()) {\n            contentItems.add(new SpeedCommand(Integer.parseInt(m.group(1))));\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "334564c4c414aa37077c7e481ee42c96f27163be", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtAboutWindow.java", "function_name": "handleSpeedCommand", "index": 2531, "label": 0}
{"input": "@Test\n  public void testRetrieveStepRuntimeStateJson() {\n    StepRuntimeState expected = new StepRuntimeState();\n    expected.setStatus(StepInstance.Status.RUNNING);\n    Assert.assertEquals(\n        expected,\n        StepHelper.retrieveStepRuntimeState(\n            singletonMap(\n                Constants.STEP_RUNTIME_SUMMARY_FIELD,\n                singletonMap(\"runtime_state\", singletonMap(\"status\", \"RUNNING\"))),\n            MAPPER));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/StepHelperTest.java", "function_name": "testRetrieveStepRuntimeStateJson", "index": 2532, "label": 0}
{"input": "@Override\n    public List<AllContactVO> queryAllContact() {\n        return contactRepository.queryAllContact();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "f7cc1d6c48df9bcba3787c9f97c639dd4caf22e3", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ContactServiceImpl.java", "function_name": "queryAllContact", "index": 2533, "label": 0}
{"input": "@Test\n  public void testGetUserDefinedRealTaskMap() {\n    when(workflow.getTasks()).thenReturn(Collections.singletonList(task));\n    when(task.getTaskType()).thenReturn(Constants.MAESTRO_TASK_NAME);\n    when(task.getReferenceTaskName()).thenReturn(\"test-job\");\n    Assert.assertEquals(\n        Collections.singletonMap(\"test-job\", task), TaskHelper.getUserDefinedRealTaskMap(workflow));\n    when(task.getSeq()).thenReturn(-1);\n    Assert.assertEquals(Collections.emptyMap(), TaskHelper.getUserDefinedRealTaskMap(workflow));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/TaskHelperTest.java", "function_name": "testGetUserDefinedRealTaskMap", "index": 2534, "label": 0}
{"input": "private void enrichParams(\n      WorkflowDefinition workflowDefinition, WorkflowDefinitionExtras enrichedWorkflowDefinition) {\n    Map<String, ParamDefinition> staticParams =\n        paramsManager.generatedStaticWorkflowParamDefs(workflowDefinition.getWorkflow());\n    enrichedWorkflowDefinition.setWorkflowParams(staticParams);\n    Map<String, Map<String, ParamDefinition>> stepParams = new LinkedHashMap<>();\n    enrichedWorkflowDefinition.setStepParams(stepParams);\n    WorkflowSummary workflowSummary = new WorkflowSummary();\n    workflowSummary.setParams(new LinkedHashMap<>());\n    for (Step step : workflowDefinition.getWorkflow().getSteps()) {\n      Map<String, ParamDefinition> params =\n          paramsManager.generateStaticStepParamDefs(\n              workflowSummary, step, stepRuntimeMap.get(step.getType()));\n      stepParams.put(step.getId(), params);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/WorkflowEnrichmentHelper.java", "function_name": "enrichParams", "index": 2535, "label": 0}
{"input": "@Test\n  public void testTrySaveGroupWithException() {\n    Mockito.doThrow(new MaestroInternalError(\"test\")).when(flowDao).insertGroup(group);\n    AssertHelper.assertThrows(\n        \"should throw and retry\",\n        MaestroRetryableError.class,\n        \"insertGroup is failed and please retry\",\n        () -> context.trySaveGroup(group));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testTrySaveGroupWithException", "index": 2536, "label": 0}
{"input": "public static Request simplyQuery(String query) {\n\t\t\treturn new Request(query, \"fast\", true, 5, null, \"snippet\");\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-aliyunaisearch/src/main/java/com/alibaba/cloud/ai/toolcalling/aliyunaisearch/AliyunAiSearchService.java", "function_name": "simplyQuery", "index": 2537, "label": 0}
{"input": "@Test\n  public void field() {\n    SelLong res = one.field(SelString.of(\"length\"));\n    assertEquals(2, res.longVal());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelArrayTest.java", "function_name": "field", "index": 2538, "label": 0}
{"input": "@Test\n  public void testStringMD5() {\n    String digest = HashHelper.md5(\"hello world\");\n    assertEquals(\"5eb63bbbe01eeed093cb22bb8f5acdc3\", digest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/HashHelperTest.java", "function_name": "testStringMD5", "index": 2539, "label": 0}
{"input": "@Test\n  public void testHeartbeatGroup() {\n    when(flowDao.heartbeatGroup(group)).thenReturn(true);\n    context.heartbeatGroup(group);\n    verify(flowDao, times(1)).heartbeatGroup(group);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/ExecutionContextTest.java", "function_name": "testHeartbeatGroup", "index": 2540, "label": 0}
{"input": "@Test\n  public void testIsSatisfiedForString() {\n    var val =\n        SignalMatchParam.builder()\n            .value(SignalParamValue.of(\"foo\"))\n            .operator(SignalOperator.LESS_THAN)\n            .build();\n    Assert.assertFalse(val.isSatisfied(SignalParamValue.of(\"zzz\")));\n    Assert.assertTrue(val.isSatisfied(SignalParamValue.of(\"bar\")));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/signal/SignalMatchParamTest.java", "function_name": "testIsSatisfiedForString", "index": 2541, "label": 0}
{"input": "private static Set<String> getSplitTunnelApps(FileManager fm) {\n        return fm.getStringSet(\"splitTunnelApps\", new HashSet<>());\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "getSplitTunnelApps", "index": 2542, "label": 0}
{"input": "default SignalStepOutputs asSignalStepOutputs() {\n    throw new MaestroInternalError(\n        \"StepOutputs is a [%s] type and cannot be used as SignalStepOutput\", getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepOutputs.java", "function_name": "asSignalStepOutputs", "index": 2543, "label": 0}
{"input": "private String getNickName(String wxId) {\n        DynamicDataSourceContextHolder.push(wxId + \"#\" + DataSourceType.MICRO_MSG_DB);\n        String nickName = contactRepository.getNickName(wxId);\n        DynamicDataSourceContextHolder.clear();\n        return nickName;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "getNickName", "index": 2544, "label": 0}
{"input": "@Test\n  public void shouldSerDeTaskWhenInputAndOutputDataAreNotSetAndCompressionEnabled()\n      throws JsonProcessingException {\n    JsonConverter jsonConverter = jsonConverter(true, \"gzip\");\n\n    Task task = new Task();\n    task.setTaskId(\"testTaskId\");\n\n    String json = jsonConverter.toJson(task);\n    Task convertedTask = jsonConverter.fromJson(json, Task.class);\n    assertEquals(task, convertedTask);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/JsonConverterTest.java", "function_name": "shouldSerDeTaskWhenInputAndOutputDataAreNotSetAndCompressionEnabled", "index": 2545, "label": 0}
{"input": "@Test\n  public void testInvalidCases() {\n    for (String[] s : invalidCases) {\n      AssertHelper.assertThrows(\n          \"those are invalid cases\",\n          MaestroInternalError.class,\n          s[1],\n          () -> JsonHelper.fromJson(MAPPER, s[0], TestClass.class));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/RunStrategyTest.java", "function_name": "testInvalidCases", "index": 2546, "label": 0}
{"input": "@Test\n    public void t04WriteExcel() throws Exception {\n        IntStream.rangeClosed(0, 100).forEach(index -> {\n            ExcelWriter excelWriter = EasyExcel.write(fileWriteTemp07, cn.idev.excel.test.core.large.LargeData.class)\n                    .build();\n            WriteSheet writeSheet = EasyExcel.writerSheet().build();\n            for (int j = 0; j < 5000; j++) {\n                excelWriter.write(data(), writeSheet);\n            }\n            excelWriter.finish();\n            LOGGER.info(\"{} 完成\", index);\n        });\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/large/TempLargeDataTest.java", "function_name": "t04WriteExcel", "index": 2547, "label": 0}
{"input": "public OutputData(Map<String, Parameter> params, Map<String, Artifact> artifacts) {\n    this.params = params;\n    this.artifacts = artifacts;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dto/OutputData.java", "function_name": "OutputData", "index": 2548, "label": 0}
{"input": "@Test\n  public void testDefaultWorkflowParamsMutate() {\n    defaultParamManager\n        .getDefaultWorkflowParams()\n        .put(\"TEST\", ParamDefinition.buildParamDefinition(\"TEST\", \"123\"));\n    assertNull(defaultParamManager.getDefaultWorkflowParams().get(\"TEST\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testDefaultWorkflowParamsMutate", "index": 2549, "label": 0}
{"input": "@Override\n  public List<String> pop(String queueName, int count, int timeout, long leaseDurationSeconds) {\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBQueueDAO.java", "function_name": "pop", "index": 2550, "label": 0}
{"input": "private static int index(List<Expr> exprs, Associativity associativity, Operator op) {\n    if (associativity == Associativity.LEFT) {\n      for (var i = 0; i < exprs.size(); i++) {\n        if (exprs.get(i) instanceof OperatorExpr operator && operator.getOp() == op) {\n          return i;\n        }\n      }\n    } else {\n      for (var i = exprs.size() - 1; i >= 0; i--) {\n        if (exprs.get(i) instanceof OperatorExpr operator && operator.getOp() == op) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/OperatorResolver.java", "function_name": "index", "index": 2551, "label": 0}
{"input": "public ListingTypeNode(\n        SourceSection sourceSection, VmLanguage language, TypeNode valueTypeNode) {\n      super(sourceSection, language, null, valueTypeNode);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "ListingTypeNode", "index": 2552, "label": 0}
{"input": "@Test\n  public void compressShouldThrowExceptionIfDecompressedStringIsNull() {\n    AssertHelper.assertThrows(\n        \"compress should throw exception if decompressed string is null\",\n        NullPointerException.class,\n        \"uncompressedString cannot be null\",\n        () -> stringCodec.compress(\"abcd\", null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/StringCodecTest.java", "function_name": "compressShouldThrowExceptionIfDecompressedStringIsNull", "index": 2553, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testCallGetNullKey() {\n    orig.call(\"get\", new SelType[] {SelType.NULL});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallGetNullKey", "index": 2554, "label": 0}
{"input": "public static WorkbookWriteHandlerContext createWorkbookWriteHandlerContext(WriteContext writeContext) {\n        WorkbookWriteHandlerContext context = new WorkbookWriteHandlerContext(writeContext,\n                writeContext.writeWorkbookHolder());\n        writeContext.writeWorkbookHolder().setWorkbookWriteHandlerContext(context);\n        return context;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/util/WriteHandlerUtils.java", "function_name": "createWorkbookWriteHandlerContext", "index": 2555, "label": 0}
{"input": "@Bean\n\tpublic RestClient.Builder createRestClient() {\n\t\t\n\t\tint connectionTimeout = 600000; \n\t\tint readTimeout = 600000; \n\t\tint writeTimeout = 600000; \n\n\t\t\n\t\tRequestConfig requestConfig = RequestConfig.custom()\n\t\t\t.setConnectTimeout(Timeout.of(10, TimeUnit.MINUTES)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t.setResponseTimeout(Timeout.of(10, TimeUnit.MINUTES))\n\t\t\t.setConnectionRequestTimeout(Timeout.of(10, TimeUnit.MINUTES))\n\t\t\t.build();\n\n\t\t\n\t\tHttpClient httpClient = HttpClients.custom().setDefaultRequestConfig(requestConfig).build();\n\n\t\t\n\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n\n\t\t\n\t\treturn RestClient.builder().requestFactory(requestFactory);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/PlanningFactory.java", "function_name": "createRestClient", "index": 2556, "label": 0}
{"input": "public StringConstantParts(List<StringConstantPart> parts, Span span) {\n      super(span, parts);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringPart.java", "function_name": "StringConstantParts", "index": 2557, "label": 0}
{"input": "@Bean\n\tpublic WebClient.Builder webClientBuilder() {\n\n\t\treturn WebClient.builder()\n\t\t\t.clientConnector(new ReactorClientHttpConnector(\n\t\t\t\t\tHttpClient.create().responseTimeout(Duration.of(600, ChronoUnit.SECONDS))));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "87eb78ddf42e0f04ee2e3e9d2983c4c68f3393aa", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/config/RestConfiguration.java", "function_name": "webClientBuilder", "index": 2558, "label": 0}
{"input": "@Test\n  public void testPushSignalTriggerExecution() {\n    signalTriggerProducer.push(signalTriggerExecution);\n    verify(amazonSqs, times(1)).sendMessage(any());\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_SIGNAL_PUBLISH_SUCCESS_METRIC,\n                SqsSignalQueueProducer.class,\n                \"type\",\n                \"SignalTriggerExecution\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsSignalQueueProducerTest.java", "function_name": "testPushSignalTriggerExecution", "index": 2559, "label": 0}
{"input": "@Test\n  public void testGetAllStepIds() {\n    TypedStep step = new TypedStep();\n    step.setId(\"foo\");\n    Workflow workflow =\n        Workflow.builder().steps(Collections.nCopies(Constants.STEP_LIST_SIZE_LIMIT, step)).build();\n    assertEquals(Constants.STEP_LIST_SIZE_LIMIT, workflow.getAllStepIds().size());\n    assertEquals(\n        Collections.nCopies(Constants.STEP_LIST_SIZE_LIMIT, \"foo\"), workflow.getAllStepIds());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowTest.java", "function_name": "testGetAllStepIds", "index": 2560, "label": 0}
{"input": "public Parameter parseAttribute(\n      ParamDefinition paramDef,\n      Map<String, Parameter> evaluatedParams,\n      String workflowId,\n      boolean ignoreError) {\n    try {\n      Parameter param = paramDef.toParameter();\n      parseWorkflowParameter(evaluatedParams, param, workflowId);\n      return param;\n    } catch (MaestroRuntimeException error) {\n      if (ignoreError) {\n        LOG.warn(\n            \"Ignore the error while parsing attribute [{}] for workflow [{}] due to \",\n            paramDef.getName(),\n            workflowId,\n            error);\n        return null;\n      }\n      throw new MaestroUnprocessableEntityException(\n          \"Failed to parse attribute [%s] for workflow [%s] due to %s\",\n          paramDef.getName(), workflowId, error);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ParamEvaluator.java", "function_name": "parseAttribute", "index": 2561, "label": 0}
{"input": "public Builder forcedSearch(Boolean forcedSearch) {\n\t\t\t\tthis.forcedSearch = forcedSearch;\n\t\t\t\treturn this;\n\t\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/api/DashScopeApi.java", "function_name": "forcedSearch", "index": 2562, "label": 0}
{"input": "@Bean\n  @ConditionalOnProperty(value = \"maestro.listener.type\", havingValue = \"sqs\")\n  public SqsStartWorkflowJobListener sqsStartWorkflowJobListener(\n      StartWorkflowJobProcessor startWorkflowJobProcessor,\n      SqsProcessorFinalizer sqsProcessorFinalizer) {\n    LOG.info(\"Creating sqsStartWorkflowJobListener within Spring boot...\");\n    return new SqsStartWorkflowJobListener(startWorkflowJobProcessor, sqsProcessorFinalizer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/autoconfigure/AwsConfiguration.java", "function_name": "sqsStartWorkflowJobListener", "index": 2563, "label": 0}
{"input": "private Builder(\n                    BuilderParent parent) {\n                super(parent);\n                maybeForceBuilderInitialization();\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "Builder", "index": 2564, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeForRestart() throws Exception {\n    WorkflowInstanceRestartResponse response =\n        loadObject(\n            \"fixtures/api/sample-workflow-restart-response.json\",\n            WorkflowInstanceRestartResponse.class);\n    assertEquals(\n        response,\n        MAPPER.readValue(\n            MAPPER.writeValueAsString(response), WorkflowInstanceRestartResponse.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/api/WorkflowInstanceRestartResponseTest.java", "function_name": "testRoundTripSerdeForRestart", "index": 2565, "label": 0}
{"input": "@Override\n  protected Optional<Details> detailsToPublishOnException(Exception ex) {\n    return Optional.of(\n        Details.create(ex, false, \"Failed to process a MaestroJobEvent while publishing to SQS\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/main/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisher.java", "function_name": "detailsToPublishOnException", "index": 2566, "label": 0}
{"input": "@Test\n  public void testThrowOnExecute() {\n    AssertHelper.assertThrows(\n        \"invalid case that kubernetes job id is missing\",\n        MaestroUnprocessableEntityException.class,\n        \"Invalid: JobId is null\",\n        () -> stepRuntime.execute(new WorkflowSummary(), null, runtimeSummary));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "74336c9ae00294ef4c75a4862230ef89d6a3a337", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/stepruntime/KubernetesStepRuntimeTest.java", "function_name": "testThrowOnExecute", "index": 2567, "label": 0}
{"input": "@Test\n  public void testRunForActionStartGroupWithoutNewFlow() {\n    when(context.getFlowsFrom(any(), anyLong(), any())).thenReturn(List.of());\n    groupActor.runForAction(Action.GROUP_START);\n\n    verify(context, times(1)).getFlowsFrom(any(), anyLong(), any());\n    verify(context, times(0)).schedule(any(), anyLong());\n    assertTrue(groupActor.getScheduledActions().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/GroupActorTest.java", "function_name": "testRunForActionStartGroupWithoutNewFlow", "index": 2568, "label": 0}
{"input": "@Test\n  public void testStartShutdownFromChildWithoutChildActors() {\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    assertTrue(groupActor.isRunning());\n    assertTrue(flowActor.isRunning());\n\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    flowActor.schedule(Action.FLOW_REFRESH, 10000);\n    assertEquals(Set.of(Action.FLOW_REFRESH), flowActor.getScheduledActions().keySet());\n\n    flowActor.startShutdown(Action.TASK_SHUTDOWN);\n    verify(future, times(1)).cancel(true);\n    assertFalse(flowActor.isRunning());\n    assertTrue(groupActor.isRunning());\n    verifyActions(groupActor, Action.FLOW_DOWN);\n\n    groupActor.startShutdown(Action.FLOW_SHUTDOWN);\n    assertFalse(groupActor.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testStartShutdownFromChildWithoutChildActors", "index": 2569, "label": 0}
{"input": "public Builder setField2(\n                    String value) {\n                if (value == null) {\n                    throw new NullPointerException();\n                }\n                field2_ = value;\n                bitField0_ |= 0x00000002;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "setField2", "index": 2570, "label": 0}
{"input": "private static ParamSource generateParamSource(\n      String name, ParamDefinition target, ParamDefinition previousDef, MergeContext context) {\n    \n    String source;\n    if (isUnchangedParamDef(target, previousDef)\n        && previousDef.getSource() != null\n        && (context.isSystem() || context.isUpstreamMerge())) {\n      \n      \n      source = previousDef.getSource().name();\n    } else if (previousDef == null && context.isSystem() && target.getSource() != null) {\n      \n      \n      source = target.getSource().name();\n    } else {\n      source = context.getMergeSource().name();\n    }\n\n    \n    if (!context.isSystem() && !context.isUpstreamMerge()) {\n      if (isChangedParamDef(target, previousDef) && target.getSource() != null) {\n        throw new MaestroValidationException(\"Cannot modify source for parameter [%s]\", name);\n      }\n    }\n    return ParamSource.create(source);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsMergeHelper.java", "function_name": "generateParamSource", "index": 2571, "label": 0}
{"input": "private FlowGroup loadFlowGroup(long groupId) {\n    FlowGroup group = addressCache.get(groupId);\n    if (group != null && group.heartbeatTs() + expirationDuration > System.currentTimeMillis()) {\n      return group;\n    }\n    group = flowDao.getGroup(groupId);\n    if (group == null) {\n      return group;\n    }\n    if (group.heartbeatTs() + expirationDuration > System.currentTimeMillis()) {\n      addressCache.put(groupId, group);\n      return group;\n    }\n    throw new MaestroRetryableError(\"Group [%s] is expired and will retry\", group);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "99d8099864635165dccea2728325a4d699bd9a71", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/runtime/RestBasedFlowOperation.java", "function_name": "loadFlowGroup", "index": 2572, "label": 0}
{"input": "public TrafficDataDto getTodayData(String downloader) throws Exception {\n        Timestamp startOfToday = new Timestamp(MiscUtil.getStartOfToday(System.currentTimeMillis()));\n        List<TrafficDataDto> results;\n        if (downloader == null || downloader.isBlank()) {\n            results = getAllDownloadersOverallData(startOfToday, startOfToday).stream().toList();\n        } else {\n            results = getSpecificDownloaderOverallData(downloader, startOfToday, startOfToday).stream().toList();\n        }\n        if (results.isEmpty()) {\n            return new TrafficDataDto(startOfToday, 0, 0);\n        } else {\n            return new TrafficDataDto(startOfToday, results.getFirst().getDataOverallUploaded(), results.getFirst().getDataOverallDownloaded());\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "acadaae4a1d5350c1f723c8ec5f34660e1f38a27", "file_path": "src/main/java/com/ghostchu/peerbanhelper/database/dao/impl/TrafficJournalDao.java", "function_name": "getTodayData", "index": 2573, "label": 0}
{"input": "@Test\n  public void testVisitedContinueNode() {\n    root.jjtAddChild(continueNode, 2);\n    root.jjtAddChild(continueNode, 1);\n    root.jjtAddChild(continueNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.CONTINUE, res);\n    assertArrayEquals(new int[] {0, 1, 0, 0, 0}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedContinueNode", "index": 2574, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallCurrentTimeMillisWithWrongArgs() {\n    SelMiscFunc.INSTANCE.call(\"currentTimeMillis\", new SelType[1]);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMiscFuncTest.java", "function_name": "testCallCurrentTimeMillisWithWrongArgs", "index": 2575, "label": 0}
{"input": "@Override\n    public void process(MsgVO msgVO) {\n        Opt.ofNullable(msgVO.getStrContent())\n                .map(xmlContent -> XmlUtil.parseXml(xmlContent, VoipMsgBO.class))\n                .ifPresent(voipMsgBO -> msgVO.setStrContent(voipMsgBO.getVoIPBubbleMsg().getMsg()));\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/msg/impl/VoipMsgStrategy.java", "function_name": "process", "index": 2576, "label": 0}
{"input": "@Test\n  public void testIncludedMethods() {\n    assertArrayEquals(\n        new long[] {20210101, 20210108, 20210115},\n        (long[])\n            evaluator.eval(\n                \"return Util.dateIntsBetween(startDateTime, startDateTime + 15, 7);\",\n                Collections.singletonMap(\"startDateTime\", 20210101)));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorTest.java", "function_name": "testIncludedMethods", "index": 2577, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeEnriched() throws Exception {\n    WorkflowDefinition wfd =\n        loadObject(\n            \"fixtures/workflows/definition/sample-active-wf-with-enriched-extras.json\",\n            WorkflowDefinition.class);\n    assertEquals(wfd, MAPPER.readValue(MAPPER.writeValueAsString(wfd), WorkflowDefinition.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/WorkflowDefinitionTest.java", "function_name": "testRoundTripSerdeEnriched", "index": 2578, "label": 0}
{"input": "@Bean(destroyMethod = \"shutdown\")\n  public MaestroQueueWorkerService maestroQueueWorkerService(\n      @Qualifier(EVENT_QUEUES_QUALIFIER)\n          EnumMap<MaestroJobEvent.Type, BlockingQueue<MessageDto>> eventQueues,\n      MaestroJobEventDispatcher maestroJobEventDispatcher,\n      MaestroQueueDao queueDao,\n      MaestroProperties properties,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating maestroQueueWorkerService within Spring boot...\");\n    return new MaestroQueueWorkerService(\n        eventQueues, maestroJobEventDispatcher, queueDao, properties.getQueue(), metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "maestroQueueWorkerService", "index": 2579, "label": 0}
{"input": "@Test\n  public void testCreateWithStackTrace() {\n    Exception exception = new Exception(new Exception(new Exception(\"test\")));\n    Details details = Details.create(exception, false, \"test-msg\");\n    assertEquals(MaestroRuntimeException.Code.INTERNAL_ERROR, details.getStatus());\n    assertEquals(\"test-msg\", details.getMessage());\n    assertEquals(6, details.getErrors().size());\n    assertFalse(details.isRetryable());\n\n    exception.setStackTrace(new StackTraceElement[0]);\n    details = Details.create(exception, false, \"test-msg\");\n    assertEquals(MaestroRuntimeException.Code.INTERNAL_ERROR, details.getStatus());\n    assertEquals(\"test-msg\", details.getMessage());\n    assertEquals(3, details.getErrors().size());\n    assertFalse(details.isRetryable());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/error/DetailsTest.java", "function_name": "testCreateWithStackTrace", "index": 2580, "label": 0}
{"input": "public void setAgentDescription(String agentDescription) {\n\t\t\tthis.agentDescription = agentDescription;\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/startupAgent/StartupAgentConfigLoader.java", "function_name": "setAgentDescription", "index": 2581, "label": 0}
{"input": "public static String mixSqlGeneratorSystemCheckPrompt(String question, DbConfig dbConfig, SchemaDTO schemaDTO,\n\t\t\tList<String> evidenceList) {\n\t\tString evidence = StringUtils.join(evidenceList, \";\\n\");\n\t\tString schemaInfo = buildMixMacSqlDbPrompt(schemaDTO, true);\n\t\tString dialect = BizDataSourceTypeEnum.fromTypeName(dbConfig.getDialectType()).getDialect();\n\t\tMap<String, Object> params = new HashMap<>();\n\t\tparams.put(\"dialect\", dialect);\n\t\tparams.put(\"question\", question);\n\t\tparams.put(\"schema_info\", schemaInfo);\n\t\tparams.put(\"evidence\", evidence);\n\t\treturn PromptConstant.MIX_SQL_GENERATOR_SYSTEM_PROMPT_CHECK_TEMPLATE.render(params);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/prompt/PromptHelper.java", "function_name": "mixSqlGeneratorSystemCheckPrompt", "index": 2582, "label": 0}
{"input": "@Test\n    public void t01Read() throws Exception {\n        long start = System.currentTimeMillis();\n        EasyExcel.read(TestFileUtil.getPath() + \"large\" + File.separator + \"large07.xlsx\", LargeData.class,\n                new LargeDataListener()).headRowNumber(2).sheet().doRead();\n        LOGGER.info(\"Large data total time spent:{}\", System.currentTimeMillis() - start);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/large/LargeDataTest.java", "function_name": "t01Read", "index": 2583, "label": 0}
{"input": "@Test\n  public void testPop() {\n    assertTrue(state.isStackEmpty());\n    state.push(SelString.of(\"foo\"));\n    state.push(SelString.of(\"bar\"));\n    assertFalse(state.isStackEmpty());\n    SelType res = state.pop();\n    assertEquals(\"STRING: bar\", res.type() + \": \" + res);\n    res = state.pop();\n    assertEquals(\"STRING: foo\", res.type() + \": \" + res);\n    assertTrue(state.isStackEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "testPop", "index": 2584, "label": 0}
{"input": "@Test\n  public void testSkipRunningStepInRunningInstance() {\n    when(instanceDao.getWorkflowInstance(\n            \"sample-minimal-wf\", 1, Constants.LATEST_INSTANCE_RUN, true))\n        .thenReturn(instance);\n    WorkflowInstanceAggregatedInfo aggregatedInfo = mock(WorkflowInstanceAggregatedInfo.class);\n    when(instance.getAggregatedInfo()).thenReturn(aggregatedInfo);\n    StepAggregatedView aggregatedView = mock(StepAggregatedView.class);\n    when(aggregatedInfo.getStepAggregatedViews()).thenReturn(singletonMap(\"job1\", aggregatedView));\n    when(instance.getStatus()).thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    when(aggregatedView.getStatus()).thenReturn(StepInstance.Status.RUNNING);\n    stepActionHandler.skip(\"sample-minimal-wf\", 1, \"job1\", user, null);\n    verify(actionDao, times(1)).terminate(instance, \"job1\", user, Actions.StepInstanceAction.SKIP);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/StepInstanceActionHandlerTest.java", "function_name": "testSkipRunningStepInRunningInstance", "index": 2585, "label": 0}
{"input": "@ExceptionHandler(RuntimeException.class)\n    public ResponseVO<String> handleException(RuntimeException e) {\n        e.printStackTrace();\n        return ResponseVO.error(-1, \"系统异常\");\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/config/ExceptionAdviceConfig.java", "function_name": "handleException", "index": 2586, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidBinaryOpType() {\n    orig.binaryOps(SelOp.ADD, SelType.NULL);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelLongTest.java", "function_name": "testInvalidBinaryOpType", "index": 2587, "label": 0}
{"input": "protected <T> T withMetricLogError(\n      Supplier<T> supplier, String methodName, String log, Object... args) {\n    try {\n      return supplier.get();\n    } catch (Exception e) {\n      Object[] combinedArgs;\n      if (args != null) {\n        combinedArgs = new Object[args.length + 1];\n        System.arraycopy(args, 0, combinedArgs, 0, args.length);\n      } else {\n        combinedArgs = new Object[1];\n      }\n      combinedArgs[combinedArgs.length - 1] = e.getMessage();\n      Monitors.error(this.getClass().getName(), methodName);\n      LOG.error(log + \" due to {}\", combinedArgs);\n      throw e;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "withMetricLogError", "index": 2588, "label": 0}
{"input": "@PutMapping(value = \"/{workflowId}/actions/kill\", consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Kill all workflow instances of a given workflow id asynchronously\")\n  public ResponseEntity<TimelineEvent> killWorkflow(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId) {\n    TimelineEvent timeline = actionHandler.kill(workflowId, callerBuilder.build());\n    return ResponseEntity.accepted().body(timeline);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowActionController.java", "function_name": "killWorkflow", "index": 2589, "label": 0}
{"input": "public void applyTheme() {\n        AppCompatDelegate.setDefaultNightMode(currentTheme.getNightMode());\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "68078c769c67e5e1a49e4c6ec1e1a9739ed78b77", "file_path": "app/src/main/java/org/bepass/oblivion/utils/ThemeHelper.java", "function_name": "applyTheme", "index": 2590, "label": 0}
{"input": "@Test\n  public void testPushWithError() {\n    when(amazonSqs.sendMessage(any())).thenThrow(new RuntimeException(\"test\"));\n    AssertHelper.assertThrows(\n        \"Should throw the error\",\n        RuntimeException.class,\n        \"java.lang.RuntimeException: test\",\n        () -> timeTriggerProducer.push(execution, 0));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_TIME_TRIGGER_PUBLISH_FAILURE_METRIC,\n                SqsTimeTriggerProducer.class)\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsTimeTriggerProducerTest.java", "function_name": "testPushWithError", "index": 2591, "label": 0}
{"input": "@Test\n  public void testTerminate() {\n    runner.terminate(\"test-uuid\", WorkflowInstance.Status.STOPPED, \"test-reason\");\n    verify(workflowExecutor, times(1)).terminateWorkflow(\"test-uuid\", \"STOPPED-test-reason\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowRunnerTest.java", "function_name": "testTerminate", "index": 2592, "label": 0}
{"input": "public void set(String name, Set<String> value) {\n        sharedPreferences.edit().putStringSet(name, value).apply();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/FileManager.java", "function_name": "set", "index": 2593, "label": 0}
{"input": "@Test\n  public void testGetWorkflowTimeline() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID1);\n    WorkflowDefinition definition =\n        workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    assertNotNull(wfd.getInternalId());\n    assertEquals(wfd, definition);\n    WorkflowTimeline results = workflowDao.getWorkflowTimeline(TEST_WORKFLOW_ID1);\n    assertEquals(TEST_WORKFLOW_ID1, results.getWorkflowId());\n    assertEquals(1, results.getTimelineEvents().size());\n    assertEquals(\n        \"Created a new workflow version [1] for workflow id [sample-active-wf-with-props]\",\n        results.getTimelineEvents().get(0).getLog());\n    assertEquals(1598399975650L, results.getTimelineEvents().get(0).getTimestamp());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testGetWorkflowTimeline", "index": 2594, "label": 0}
{"input": "protected ListingOrMappingTypeCastNode getValueTypeCastNode() {\n      if (valueTypeCastNode == null) {\n        CompilerDirectives.transferToInterpreterAndInvalidate();\n        valueTypeCastNode =\n            new ListingOrMappingTypeCastNode(\n                language, new FrameDescriptor(), valueTypeNode, getRootNode().getName());\n      }\n      return valueTypeCastNode;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "getValueTypeCastNode", "index": 2595, "label": 0}
{"input": "private String escapeHex(String originalString) {\n        Matcher matcher = HEX_PATTERN.matcher(originalString);\n        StringBuffer sb = new StringBuffer();\n        while (matcher.find()) {\n            \n            matcher.appendReplacement(sb, \"_x005F_x\" + matcher.group(1) + \"_\");\n        }\n        matcher.appendTail(sb);\n        return sb.toString();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "58ae8159d317290e2c442ef7ab0cf86f9d3b9b00", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/handler/EscapeHexCellWriteHandler.java", "function_name": "escapeHex", "index": 2596, "label": 0}
{"input": "@Override\n    public void characters(XlsxReadContext xlsxReadContext, char[] ch, int start, int length) {\n    \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/handlers/AbstractXlsxTagHandler.java", "function_name": "characters", "index": 2597, "label": 0}
{"input": "@Test(expected = ParseException.class)\n  public void testInvalidExpr1() throws Exception {\n    run(\"1+1\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testInvalidExpr1", "index": 2598, "label": 0}
{"input": "private List<FeedsMediaVO> getMedia(TimelineObjectBO timelineObjectBO) {\n        List<FeedsMediaVO> feedsMediaVos = new ArrayList<>();\n\n        \n        List<TimelineObjectBO.ContentObject.Media> mediaList = timelineObjectBO.getContentObject().getMediaList();\n\n        if (CollUtil.isEmpty(mediaList)) {\n            return feedsMediaVos;\n        }\n\n        for (TimelineObjectBO.ContentObject.Media media : mediaList) {\n            FeedsMediaVO feedsMediaVo = new FeedsMediaVO();\n            feedsMediaVo.setUrl(media.getUrl());\n            feedsMediaVo.setThumb(media.getThumb());\n            feedsMediaVos.add(feedsMediaVo);\n        }\n\n        return feedsMediaVos;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/FeedsServiceImpl.java", "function_name": "getMedia", "index": 2599, "label": 0}
{"input": "private int parseIntOrDefault(String val, int defaultValue) {\n        if (val == null) return defaultValue;\n        try {\n            return Integer.parseInt(val);\n        }\n        catch (NumberFormatException e) {\n            return defaultValue;\n        }\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "bc3579d4753ffdd37a6a3635727268908104387e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "parseIntOrDefault", "index": 2600, "label": 0}
{"input": "@Test\n  public void testGetFromForeach() throws Exception {\n    StepRuntimeSummary summary = loadObject(TEST_STEP_RUNTIME_SUMMARY, StepRuntimeSummary.class);\n    when(allStepOutputData.get(\"foreach-job\"))\n        .thenReturn(Collections.singletonMap(\"maestro_step_runtime_summary\", summary));\n    when(stepInstanceDao.getForeachParamType(any(), any(), any())).thenReturn(ParamType.LONG);\n    when(stepInstanceDao.getEvaluatedResultsFromForeach(any(), any(), any()))\n        .thenReturn(Collections.singletonMap(1L, \"12\"));\n    long[] res = (long[]) paramExtension.getFromForeach(\"foreach-job\", \"job1\", \"sleep_seconds\");\n    assertArrayEquals(new long[] {12, 0, 0, 0, 0, 0}, res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MaestroParamExtensionTest.java", "function_name": "testGetFromForeach", "index": 2601, "label": 0}
{"input": "public void deleteTrigger(String workflowId, String triggerUuid) {\n    try {\n      triggerDao.delete(workflowId, triggerUuid);\n    } catch (RuntimeException e) {\n      LOG.warn(\n          \"Failed to delete the workflow signal trigger and skip it for now. Will delete it in the future.\",\n          e);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "deleteTrigger", "index": 2602, "label": 0}
{"input": "private boolean dedupAndCheckIfAllDuplicated(\n      Connection conn, String workflowId, Set<String> uuids) throws SQLException {\n    try (PreparedStatement wfiStmt = conn.prepareStatement(CHECK_EXISTING_UUIDS_QUERY)) {\n      wfiStmt.setString(1, workflowId);\n      wfiStmt.setArray(2, conn.createArrayOf(ARRAY_TYPE_NAME, uuids.toArray(new String[0])));\n      try (ResultSet result = wfiStmt.executeQuery()) {\n        while (result.next()) {\n          uuids.remove(result.getString(ID_COLUMN));\n        }\n      }\n    }\n    return uuids.isEmpty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "dedupAndCheckIfAllDuplicated", "index": 2603, "label": 0}
{"input": "private WorkflowInstance workflowInstanceFromResult(ResultSet rs) throws SQLException {\n    WorkflowInstance instance =\n        Checks.notNull(\n            getJsonObjectIfPresent(rs, \"instance\", WorkflowInstance.class),\n            \"workflow instance column cannot be null\");\n    instance.setStatus(WorkflowInstance.Status.create(rs.getString(STATUS_COLUMN)));\n    instance.setExecutionId(rs.getString(\"execution_id\"));\n    instance.setStartTime(getTimestampIfPresent(rs, \"start_ts\"));\n    instance.setEndTime(getTimestampIfPresent(rs, \"end_ts\"));\n    instance.setModifyTime(getTimestampIfPresent(rs, \"modify_ts\"));\n    instance.setRuntimeOverview(\n        getJsonObjectIfPresent(rs, \"runtime_overview\", WorkflowRuntimeOverview.class));\n    instance.setTimeline(getTimelineIfPresent(rs));\n    return instance;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "workflowInstanceFromResult", "index": 2604, "label": 0}
{"input": "@Test\n  public void testRunWithInterruption() throws InterruptedException {\n    when(messageQueue.take()).thenThrow(new InterruptedException(\"test\"));\n    when(dispatcher.processJobEvent(any())).thenReturn(Optional.empty());\n    queueWorker.run();\n    verify(dispatcher, times(0)).processJobEvent(any());\n    verify(queueDao, times(0)).remove(message);\n    verify(messageQueue, times(1)).drainTo(any(), anyInt());\n    verify(queueDao, times(1)).release(anyInt(), anyLong(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/test/java/com/netflix/maestro/queue/worker/MaestroQueueWorkerTest.java", "function_name": "testRunWithInterruption", "index": 2605, "label": 0}
{"input": "@Override\n  public boolean containsMessage(String queueName, String messageId) {\n    if (!queues.containsKey(queueName)) {\n      queues.put(queueName, new ConcurrentLinkedDeque<>());\n    }\n    return queues.get(queueName).contains(messageId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "465feefeb15bf57091641f75d9eed7875aefe5d7", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/InMemoryQueueDao.java", "function_name": "containsMessage", "index": 2606, "label": 0}
{"input": "@Test\n  public void testStartGroupActor() {\n    FlowGroup group = new FlowGroup(1, 2, \"testAddress\");\n    GroupActor actor = (GroupActor) Actor.startGroupActor(group, context);\n    verify(context, times(1)).run(any());\n    \n    assertTrue(actor.isRunning());\n    assertEquals(2, actor.generation());\n    verifyActions(actor, Action.GROUP_START);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/ActorTest.java", "function_name": "testStartGroupActor", "index": 2607, "label": 0}
{"input": "public static void initializeObjectMap(ChatRequest chatRequest, Map<String, Object> objectMap) {\n\t\tobjectMap.put(\"thread_id\", chatRequest.threadId());\n\t\tobjectMap.put(\"enable_background_investigation\", chatRequest.enableBackgroundInvestigation());\n\t\tobjectMap.put(\"auto_accepted_plan\", chatRequest.autoAcceptPlan());\n\t\tobjectMap.put(\"query\", chatRequest.query());\n\t\tobjectMap.put(\"max_step_num\", chatRequest.maxStepNum());\n\t\tobjectMap.put(\"max_plan_iterations\", chatRequest.maxPlanIterations());\n\t\tobjectMap.put(\"mcp_settings\", chatRequest.mcpSettings());\n\t\tobjectMap.put(\"search_engine\", chatRequest.searchEngine());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/controller/request/ChatRequestProcess.java", "function_name": "initializeObjectMap", "index": 2608, "label": 0}
{"input": "private boolean jj_3R_55() {\n    if (jj_scan_token(LT)) return true;\n    if (jj_3R_49()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_55", "index": 2609, "label": 0}
{"input": "public static boolean isReservedParamName(String param) {\n    return param.equals(STEP_DEPENDENCY_NAME) || param.equals(STEP_DEPENDENCY_SUB_TYPE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/StepDependenciesDefinition.java", "function_name": "isReservedParamName", "index": 2610, "label": 0}
{"input": "@Test\n  public void testExceedsRateLimitOutOfLimit() {\n    TaskDef taskDef = createTaskDef(1, 0);\n    Task task = createRunningTestTask(TEST_TASK_ID_1);\n    executionDAO.updateTask(task);\n    assertFalse(dao.exceedsRateLimitPerFrequency(task, taskDef));\n    task = createRunningTestTask(TEST_TASK_ID_2);\n    executionDAO.updateTask(task);\n    assertTrue(dao.exceedsRateLimitPerFrequency(task, taskDef));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBRateLimitingDAOTest.java", "function_name": "testExceedsRateLimitOutOfLimit", "index": 2611, "label": 0}
{"input": "public List<TrafficDataDto> getSpecificDownloaderOverallData(String downloadName, Timestamp start, Timestamp end) throws Exception {\n        return queryBuilder().orderBy(\"timestamp\", true)\n                .where()\n                .eq(\"downloader\", downloadName)\n                .and()\n                .ge(\"timestamp\", start.getTime())\n                .and()\n                .le(\"timestamp\", end.getTime())\n                .queryBuilder()\n                .query().stream().map(e -> new TrafficData(\n                        new Timestamp(e.getTimestamp()),\n                        e.getDataOverallUploadedAtStart(),\n                        e.getDataOverallUploaded(),\n                        e.getDataOverallDownloadedAtStart(),\n                        e.getDataOverallDownloaded()))\n                .map(data -> new TrafficDataDto(data.getTimestamp(), data.getDataOverallUploaded(), data.getDataOverallDownloaded()))\n                .toList();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "acadaae4a1d5350c1f723c8ec5f34660e1f38a27", "file_path": "src/main/java/com/ghostchu/peerbanhelper/database/dao/impl/TrafficJournalDao.java", "function_name": "getSpecificDownloaderOverallData", "index": 2612, "label": 0}
{"input": "@JsonIgnore\n  public void merge(@Nullable List<Tag> input) {\n    if (input == null) {\n      return;\n    }\n    tags.addAll(input);\n    Checks.checkTrue(\n        !containsDuplicate(), \"Invalid tag list as there are duplicate tag names: %s\", tags);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/TagList.java", "function_name": "merge", "index": 2613, "label": 0}
{"input": "public static MaestroTracingContext fromTraceContext(TraceContext from) {\n    MaestroTracingContextBuilder builder =\n        MaestroTracingContext.builder().traceIdLow(from.traceId()).spanId(from.spanId());\n    if (from.traceIdHigh() > 0) {\n      builder.traceIdHigh(from.traceIdHigh());\n    }\n    if (from.parentId() != null) {\n      builder.parentSpanId(from.parentId());\n    }\n    if (from.sampled() != null) {\n      builder.sampled(from.sampled());\n    }\n    return builder.build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/tracing/MaestroTracingContext.java", "function_name": "fromTraceContext", "index": 2614, "label": 0}
{"input": "@Override\n    public void invokeHeadMap(Map<Integer, String> headMap, AnalysisContext context) {\n        headTitleMap = headMap;\n        headList.add(headMap);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "8ad28c2464fd7d057dcd4a27ed5fb044c874078a", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/head/MaxHeadReadListener.java", "function_name": "invokeHeadMap", "index": 2615, "label": 0}
{"input": "public boolean existWorkflowWithSameUuid(String uuid) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_WORKFLOW_WITH_SAME_UUID_QUERY,\n                stmt -> stmt.setString(1, uuid),\n                ResultSet::next),\n        \"existWorkflowWithSameUuid\",\n        \"Failed to check the existence of the workflow instance for uuid [{}]\",\n        uuid);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "existWorkflowWithSameUuid", "index": 2616, "label": 0}
{"input": "public SwtTaskbarControl(Object parent, Display display) {\n        this.parent = (Shell) parent;\n        this.display = display;\n        initializeTaskItem();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtTaskbarControl.java", "function_name": "SwtTaskbarControl", "index": 2617, "label": 0}
{"input": "@Test\n  public void testMultipleFieldsSet() {\n    Tct tct = new Tct();\n    tct.setDurationMinutes(60);\n    tct.setCompletedByHour(1);\n    tct.setTz(\"UTC\");\n    tct.setCompletedByTs(1612485805477L);\n\n    Set<ConstraintViolation<TestTct>> violations = validator.validate(new TestTct(tct));\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestTct> violation = violations.iterator().next();\n    assertEquals(\"tct\", violation.getPropertyPath().toString());\n    assertEquals(\n        \"[TCT definition] is invalid, one and only one time field has to be set: \" + tct,\n        violation.getMessage());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/TctConstraintTest.java", "function_name": "testMultipleFieldsSet", "index": 2618, "label": 0}
{"input": "private boolean jj_3R_36() {\n    if (jj_scan_token(LBRACKET)) return true;\n    if (jj_scan_token(RBRACKET)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_36", "index": 2619, "label": 0}
{"input": "public WorkflowInstanceRestartResponse toWorkflowRestartResponse() {\n    return WorkflowInstanceRestartResponse.builder()\n        .workflowId(this.workflowId)\n        .workflowVersionId(this.workflowVersionId)\n        .workflowInstanceId(this.workflowInstanceId)\n        .workflowRunId(this.workflowRunId)\n        .workflowUuid(this.workflowUuid)\n        .status(this.status.runStatus)\n        .timelineEvent(this.timelineEvent)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunResponse.java", "function_name": "toWorkflowRestartResponse", "index": 2620, "label": 0}
{"input": "@Async\n    @EventListener\n    @Override\n    public void recordOper(OperLogEvent operLogEvent) {\n        SysOperLogBo operLog = MapstructUtils.convert(operLogEvent, SysOperLogBo.class);\n        \n        operLog.setOperLocation(AddressUtils.getRealAddressByIP(operLog.getOperIp()));\n        insertOperlog(operLog);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "c6ffbcb3cf9b014c7b99170e5dd1c97317e9c4a5", "file_path": "ruoyi-modules-api/ruoyi-system-api/src/main/java/org/ruoyi/system/service/impl/SysOperLogServiceImpl.java", "function_name": "recordOper", "index": 2621, "label": 0}
{"input": "public static String getDirWithoutUser(String... dirs) {\n        \n        String separator = FileSystems.getDefault().getSeparator();\n        \n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < dirs.length; i++) {\n            sb.append(dirs[i]);\n            if ((i + 1) < dirs.length) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/DirUtil.java", "function_name": "getDirWithoutUser", "index": 2622, "label": 0}
{"input": "@Test\n  public void testUpdateRunningTask() {\n    var updatedTask = flow.newTask(new TaskDef(\"task1\", \"noop1\", null, null), true);\n    assertEquals(Set.of(\"task1\"), flow.getRunningTasks().keySet());\n    flow.updateRunningTask(updatedTask);\n    assertEquals(Map.of(\"task1\", updatedTask), flow.getRunningTasks());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/models/FlowTest.java", "function_name": "testUpdateRunningTask", "index": 2623, "label": 0}
{"input": "public ObjectSpread(Expr expr, boolean isNullable, Span span) {\n      super(span, List.of(expr));\n      this.isNullable = isNullable;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectMember.java", "function_name": "ObjectSpread", "index": 2624, "label": 0}
{"input": "@Test\n  public void testRetrieveStepRuntimeStateNotExists() {\n    StepRuntimeState expected = new StepRuntimeState();\n    Assert.assertEquals(\n        expected,\n        StepHelper.retrieveStepRuntimeState(\n            singletonMap(Constants.STEP_RUNTIME_SUMMARY_FIELD, Collections.emptyMap()), MAPPER));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/StepHelperTest.java", "function_name": "testRetrieveStepRuntimeStateNotExists", "index": 2625, "label": 0}
{"input": "private static String json(String url, Map<String, Object> header, String json, OkHttpClient client) throws IOException {\r\n        \n        Request.Builder builder = new Request.Builder();\r\n        \n        Request request = builder.url(url).build();\r\n\r\n        \n        Headers.Builder headerBuilder = request.headers().newBuilder();\r\n\r\n        \n        Iterator<Map.Entry<String, Object>> headerIterator = header.entrySet().iterator();\r\n        headerIterator.forEachRemaining(e -> {\r\n            headerBuilder.add(e.getKey(), (String) e.getValue());\r\n        });\r\n        headerBuilder.add(\"Content-Type\", \"application/json\");\r\n\r\n        \n        RequestBody requestBody = FormBody.create(MediaType.parse(\"application/json\"), json);\r\n\r\n        \n        builder.headers(headerBuilder.build()).post(requestBody);\r\n\r\n        try (Response execute = client.newCall(builder.build()).execute()) {\r\n            return execute.body().string();\r\n        }\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/util/OkhttpUtil.java", "function_name": "json", "index": 2626, "label": 0}
{"input": "private boolean jj_3_1() {\n    if (jj_scan_token(DOT)) return true;\n    if (jj_scan_token(IDENTIFIER)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_1", "index": 2627, "label": 0}
{"input": "@Test\n  public void testNestedStepReachDesiredState() {\n    event.setEntityType(StepInstanceWakeUpEvent.EntityType.STEP);\n    setStepInstanceDefinition(StepType.SUBWORKFLOW);\n    setStepInstanceRuntimeState(StepInstance.Status.STOPPED);\n    event.setStepAction(Actions.StepInstanceAction.STOP);\n    subject.process(() -> event);\n\n    Mockito.verify(stepInstanceDao, Mockito.times(1))\n        .getStepInstance(workflowId, workflowInstanceId, workflowRunId, stepId, stepAttemptId);\n    Mockito.verifyNoInteractions(workflowInstanceDao);\n    Mockito.verifyNoInteractions(workflowExecutor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/StepInstanceWakeUpEventProcessorTest.java", "function_name": "testNestedStepReachDesiredState", "index": 2628, "label": 0}
{"input": "@Test\n  public void isNameInvalid() {\n    TestRunParams invalid = new TestRunParams(\"util\", \"bar\");\n    Set<ConstraintViolation<TestRunParams>> violations = validator.validate(invalid);\n    assertEquals(1, violations.size());\n    ConstraintViolation<TestRunParams> violation = violations.iterator().next();\n    assertEquals(invalid.runParams, violation.getInvalidValue());\n    assertTrue(\n        violation\n            .getMessage()\n            .startsWith(\"[param definition] cannot use any of reserved param names\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/RunParamsConstraintTest.java", "function_name": "isNameInvalid", "index": 2629, "label": 0}
{"input": "@Test\n    public void t23PageReadListener07() {\n        \n        EasyExcel.read(file07, SimpleData.class,\n                new PageReadListener<SimpleData>(dataList -> {\n                    Assertions.assertEquals(5, dataList.size());\n                }, 5))\n            .sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "a58eb2fbe032b79f9012cb8f0af034c47183f723", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/simple/SimpleDataTest.java", "function_name": "t23PageReadListener07", "index": 2630, "label": 0}
{"input": "public UserInputWaitState createUserInputWaitState(String planId, String message, FormInputTool formInputTool) {\n\t\tUserInputWaitState waitState = new UserInputWaitState(planId, message, true);\n\t\tif (formInputTool != null) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tFormInputTool.UserFormInput latestFormInput = formInputTool.getLatestUserFormInput();\n\t\t\tif (latestFormInput != null) {\n\t\t\t\twaitState.setFormDescription(latestFormInput.getDescription());\n\t\t\t\tif (latestFormInput.getInputs() != null) {\n\t\t\t\t\tList<Map<String, String>> formInputsForState = latestFormInput.getInputs()\n\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t.map(inputItem -> Map.of(\"label\", inputItem.getLabel(), \"value\",\n\t\t\t\t\t\t\t\tinputItem.getValue() != null ? inputItem.getValue() : \"\"))\n\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\t\twaitState.setFormInputs(formInputsForState);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn waitState;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/service/UserInputService.java", "function_name": "createUserInputWaitState", "index": 2631, "label": 0}
{"input": "private static String getUserPath() {\n        \n        String userDir = System.getProperty(\"user.dir\");\n        \n        String separator = System.getProperty(\"file.separator\");\n        \n        return userDir + separator + \"config\" + separator + \"user.json\";\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/UserUtil.java", "function_name": "getUserPath", "index": 2632, "label": 0}
{"input": "public static <T> ResponseVO<T> error(Integer errorCode, String errorMessage) {\n        ResponseVO<T> wrapper = new ResponseVO();\n        wrapper.setSuccess(false);\n        wrapper.setErrorCode(errorCode);\n        wrapper.setShowType(2);\n        wrapper.setErrorMessage(errorMessage);\n        return wrapper;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/domain/vo/ResponseVO.java", "function_name": "error", "index": 2633, "label": 0}
{"input": "@Test\n  public void testGetAllLatestStepStatusFromAncestors() throws Exception {\n    si = loadObject(\"fixtures/instances/sample-step-instance-finishing.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    si = loadObject(\"fixtures/instances/sample-step-instance-failed.json\", StepInstance.class);\n    stepDao.insertOrUpsertStepInstance(si, true);\n    Map<String, StepInstance.Status> res =\n        stepDao.getAllLatestStepStatusFromRuns(\"sample-dag-test-3\", 1L);\n    assertEquals(Collections.singletonMap(\"job1\", StepInstance.Status.FINISHING), res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetAllLatestStepStatusFromAncestors", "index": 2634, "label": 0}
{"input": "public AliyunAiSearchService(WebClientTool webClientTool, JsonParseTool jsonParseTool,\n\t\t\tAliyunAiSearchProperties properties) {\n\t\tthis.webClientTool = webClientTool;\n\t\tthis.jsonParseTool = jsonParseTool;\n\t\tthis.properties = properties;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "dba4987d396ebc0b354cd2da935bce8708364974", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-aliyunaisearch/src/main/java/com/alibaba/cloud/ai/toolcalling/aliyunaisearch/AliyunAiSearchService.java", "function_name": "AliyunAiSearchService", "index": 2635, "label": 0}
{"input": "@Override\n  public CompletableFuture<Void> asyncAddTaskExecutionLogs(List<TaskExecLog> logs) {\n    return CompletableFuture.runAsync(() -> addTaskExecutionLogs(logs));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "asyncAddTaskExecutionLogs", "index": 2636, "label": 0}
{"input": "@Internal\n  @Override\n  protected List<URI> getSourceModulesAsUris() {\n    return getSourceModules().get().stream()\n        .map(PluginUtils::parseModuleNotationToUri)\n        .collect(Collectors.toList());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b93cb9b32237760e357d9229b87686b81390a519", "file_path": "pkl-gradle/src/main/java/org/pkl/gradle/task/ModulesTask.java", "function_name": "getSourceModulesAsUris", "index": 2637, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase9() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(request.getWorkflow(), Arrays.asList(\"job.5\", \"job.3\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(2, paths.size());\n    Assert.assertEquals(Arrays.asList(\"job.3\", \"#job.6\", \"job.6\", \"job.7\"), paths.get(0));\n    Assert.assertEquals(Collections.singletonList(\"job.5\"), paths.get(1));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase9", "index": 2638, "label": 0}
{"input": "@Override\n  public TaskDef getTaskDef(String name) {\n    return withMetricLogError(\n        () ->\n            getPayload(\n                GET_TASK_DEFINITION_STATEMENT,\n                statement -> statement.setString(1, name),\n                TaskDef.class),\n        \"getTaskDef\",\n        \"Failed getting a task definition with name {}\",\n        name);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "getTaskDef", "index": 2639, "label": 0}
{"input": "private void handleTraffic(Context ctx) throws Exception {\n        var timeQueryModel = WebUtil.parseTimeQueryModel(ctx);\n        String downloader = ctx.queryParam(\"downloader\");\n        if (downloader == null || downloader.isBlank()) {\n            ctx.json(new StdResp(true, null, fixTimezone(ctx, trafficJournalDao.getAllDownloadersOverallData(timeQueryModel.startAt(), timeQueryModel.endAt()))));\n        } else {\n            ctx.json(new StdResp(true, null, fixTimezone(ctx, trafficJournalDao.getSpecificDownloaderOverallData(downloader, timeQueryModel.startAt(), timeQueryModel.endAt()))));\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "acadaae4a1d5350c1f723c8ec5f34660e1f38a27", "file_path": "src/main/java/com/ghostchu/peerbanhelper/module/impl/webapi/PBHChartController.java", "function_name": "handleTraffic", "index": 2640, "label": 0}
{"input": "@Test\n  public void testAnnotate() {\n    MaestroTracingManager tm = new TestTracingManager(mockTracer);\n    String value = \"blah\";\n    tm.annotate(defaultContext, value);\n    verify(mockSpan, times(1)).annotate(value);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/tracing/MaestroTracingManagerTest.java", "function_name": "testAnnotate", "index": 2641, "label": 0}
{"input": "private void initSheet() {\n        if (csvPrinter != null) {\n            return;\n        }\n        rowCache = ListUtils.newArrayListWithExpectedSize(rowCacheCount);\n        try {\n            if (csvWorkbook.getWithBom()) {\n                ByteOrderMarkEnum byteOrderMark = ByteOrderMarkEnum.valueOfByCharsetName(\n                        csvWorkbook.getCharset().name());\n                if (byteOrderMark != null) {\n                    out.append(byteOrderMark.getStringPrefix());\n                }\n            }\n            csvPrinter = csvFormat.print(out);\n        } catch (IOException e) {\n            throw new ExcelGenerateException(e);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/metadata/csv/CsvSheet.java", "function_name": "initSheet", "index": 2642, "label": 0}
{"input": "private void parseStepParameter(\n      Map<String, Map<String, Object>> allStepOutputData,\n      Map<String, Parameter> workflowParams,\n      Map<String, Parameter> stepParams,\n      Parameter param,\n      String stepId,\n      Set<String> visited) {\n    if (!param.isEvaluated()) {\n      Checks.checkTrue(\n          visited.add(param.getName()),\n          \"In step [%s], param [%s] definition contains a cyclic reference chain\",\n          stepId,\n          param.getName());\n      Object result =\n          evaluateStepParam(allStepOutputData, workflowParams, stepParams, param, stepId, visited);\n      visited.remove(param.getName());\n      setEvaluatedParam(param, result);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/ParamEvaluator.java", "function_name": "parseStepParameter", "index": 2643, "label": 0}
{"input": "private boolean jj_3R_45() {\n    if (jj_3R_47()) return true;\n    Token xsp;\n    while (true) {\n      xsp = jj_scanpos;\n      if (jj_3R_48()) {\n        jj_scanpos = xsp;\n        break;\n      }\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_45", "index": 2644, "label": 0}
{"input": "public static JSONObject checkQr(String appId, String proxyIp, String uuid, String captchCode) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"proxyIp\", proxyIp);\r\n        param.put(\"uuid\", uuid);\r\n        param.put(\"captchCode\", captchCode);\r\n        return OkhttpUtil.postJSON(\"/login/checkLogin\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "checkQr", "index": 2645, "label": 0}
{"input": "public void initializeStepDependenciesSummaries(\n      Map<StepDependencyType, List<MapParameter>> dependenciesParameters) {\n    this.dependencies =\n        dependenciesParameters.entrySet().stream()\n            .collect(\n                MapHelper.toListMap(\n                    Map.Entry::getKey, e -> new StepDependencies(e.getKey(), e.getValue())));\n    synced = false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "initializeStepDependenciesSummaries", "index": 2646, "label": 0}
{"input": "@Test\n  public void testComputePathsWithStartStepIdsCase4() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    WorkflowGraph graph =\n        WorkflowGraph.build(\n            request.getWorkflow(),\n            WorkflowGraph.computeDag(\n                request.getWorkflow(), Collections.singletonList(\"job.4\"), null));\n    List<List<String>> paths = graph.computePaths(new TestTranslator());\n    Assert.assertEquals(1, paths.size());\n    Assert.assertEquals(Collections.singletonList(\"job.4\"), paths.get(0));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputePathsWithStartStepIdsCase4", "index": 2647, "label": 0}
{"input": "@Test\n    public void testNoHead() {\n        csvFile = TestFileUtil.createNewFile(CSV_BASE + \"csv-no-head.csv\");\n        FastExcel.write(csvFile, CsvData.class)\n            .needHead(false)\n            .csv()\n            .doWrite(csvDataList);\n        List<Object> dataList = FastExcel.read(csvFile, new CsvDataListener())\n            .headRowNumber(0)\n            .csv()\n            .doReadSync();\n        Assertions.assertEquals(10, dataList.size());\n        Assertions.assertNotNull(dataList.get(0));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "testNoHead", "index": 2648, "label": 0}
{"input": "@PutMapping(value = \"/{workflowId}/actions/stop\", consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Stop all workflow instances of a given workflow id asynchronously\")\n  public ResponseEntity<TimelineEvent> stopWorkflow(\n      @Valid @NotNull @PathVariable(\"workflowId\") String workflowId) {\n    TimelineEvent timeline = actionHandler.stop(workflowId, callerBuilder.build());\n    return ResponseEntity.accepted().body(timeline);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/WorkflowActionController.java", "function_name": "stopWorkflow", "index": 2649, "label": 0}
{"input": "public static void checkTrue(boolean condition, Supplier<String> errorMessage) {\n    if (!condition) {\n      throw new IllegalArgumentException(errorMessage.get());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/Checks.java", "function_name": "checkTrue", "index": 2650, "label": 0}
{"input": "@GetMapping(value = \"\", consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Get step breakpoints corresponding to an identifier\")\n  public List<StepBreakpoint> getBreakpoints(\n      @RequestParam(name = \"workflowId\") String workflowId,\n      @RequestParam(name = \"stepId\") String stepId) {\n    return stepBreakpointDao.getStepBreakPoints(\n        workflowId,\n        Constants.MATCH_ALL_WORKFLOW_VERSIONS,\n        Constants.MATCH_ALL_WORKFLOW_INSTANCES,\n        Constants.MATCH_ALL_RUNS,\n        stepId,\n        Constants.MATCH_ALL_STEP_ATTEMPTS);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8e3a6f4fa3173239c2832015f499f6768146f25d", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepBreakpointController.java", "function_name": "getBreakpoints", "index": 2651, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testCallPutInvalidTypeKey() {\n    orig.call(\"put\", new SelType[] {SelLong.of(1), SelLong.of(1)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallPutInvalidTypeKey", "index": 2652, "label": 0}
{"input": "private void sendResponse(HttpExchange exchange, String response) throws IOException {\n        byte[] bytes = response.getBytes(StandardCharsets.UTF_8);\n        exchange.getResponseHeaders().set(\"Content-Type\", \"text/plain; charset=utf-8\");\n        exchange.sendResponseHeaders(200, bytes.length);\n        try (OutputStream os = exchange.getResponseBody()) {\n            os.write(bytes);\n        }\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "sendResponse", "index": 2653, "label": 0}
{"input": "@Bean\n  public TimeTriggerExecutionProcessor timeTriggerExecutionProcessor(\n      TimeTriggerProducer timeTriggerProducer,\n      MaestroWorkflowLauncher maestroWorkflowLauncher,\n      TimeTriggerExecutionPlanner executionPlanner,\n      TriggersProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating timeTriggerExecutionProcessor within Spring boot...\");\n    return new TimeTriggerExecutionProcessor(\n        timeTriggerProducer,\n        maestroWorkflowLauncher,\n        executionPlanner,\n        props.getTimeTrigger(),\n        metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroTriggersConfiguration.java", "function_name": "timeTriggerExecutionProcessor", "index": 2654, "label": 0}
{"input": "public <T> List<T> doReadSync() {\n        if (excelReader == null) {\n            throw new ExcelAnalysisException(\"Must use 'FastExcelFactory.read().sheet()' to call this method\");\n        }\n        SyncReadListener syncReadListener = new SyncReadListener();\n        registerReadListener(syncReadListener);\n        excelReader.read(build());\n        excelReader.finish();\n        return (List<T>) syncReadListener.getList();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/builder/ExcelReaderSheetBuilder.java", "function_name": "doReadSync", "index": 2655, "label": 0}
{"input": "public static StepInstancePendingRecord createRecord(\n      StepInstance.Status oldStatus, StepInstance.Status newStatus, long markTime) {\n    StepInstancePendingRecord record = new StepInstancePendingRecord();\n    record.setOldStatus(oldStatus);\n    record.setNewStatus(newStatus);\n    record.setEventTime(markTime);\n    return record;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/jobevents/StepInstanceUpdateJobEvent.java", "function_name": "createRecord", "index": 2656, "label": 0}
{"input": "public final void ClassType() throws ParseException {\n    \n    ASTClassType jjtn000 = new ASTClassType(this, JJTCLASSTYPE);\n    boolean jjtc000 = true;\n    jjtree.openNodeScope(jjtn000);\n    jjtn000.jjtSetFirstToken(getToken(1));\n    Token t;\n    try {\n      t = jj_consume_token(IDENTIFIER);\n      jjtree.closeNodeScope(jjtn000, true);\n      jjtc000 = false;\n      jjtn000.jjtSetLastToken(getToken(0));\n      jjtn000.value = t.image;\n    } finally {\n      if (jjtc000) {\n        jjtree.closeNodeScope(jjtn000, true);\n        jjtn000.jjtSetLastToken(getToken(0));\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "ClassType", "index": 2657, "label": 0}
{"input": "private Object convertOutput(List<Object> values, String type) {\n\t\treturn switch (type) {\n\t\t\tcase \"list\" -> new ArrayList<>(values);\n\t\t\tcase \"string\" -> String.join(\"\\n\", values.stream().map(Object::toString).collect(Collectors.toList()));\n\t\t\tdefault -> values;\n\t\t};\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "4db47ffe34d685ee07c907ac185b430ab16bd55e", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/node/VariableAggregatorNode.java", "function_name": "convertOutput", "index": 2658, "label": 0}
{"input": "private boolean jj_2_6(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_6();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(5, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_6", "index": 2659, "label": 0}
{"input": "@Test\n  public void testMergeStepRunParamFromWorkflowSummary() {\n    Map<String, Map<String, ParamDefinition>> stepRunParams =\n        singletonMap(\n            \"stepid\", singletonMap(\"p1\", ParamDefinition.buildParamDefinition(\"p1\", \"d1\")));\n    workflowSummary.setStepRunParams(stepRunParams);\n    Map<String, Parameter> stepParams =\n        paramsManager.generateMergedStepParams(workflowSummary, step, stepRuntime, runtimeSummary);\n    Assert.assertFalse(stepParams.isEmpty());\n    Assert.assertEquals(\"d1\", stepParams.get(\"p1\").asStringParam().getValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsManagerTest.java", "function_name": "testMergeStepRunParamFromWorkflowSummary", "index": 2660, "label": 0}
{"input": "@Test\n  public void testCompress() throws IOException {\n    assertEquals(\"H4sIAAAAAAAAAEtMBAMAdCCLWwcAAAA=\", stringCodec.compress(\"gzip\", \"aaaaaaa\"));\n    assertEquals(\"H4sIAAAAAAAAAEtMBAMAdCCLWwcAAAA=\", stringCodec.compress(null, \"aaaaaaa\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/StringCodecTest.java", "function_name": "testCompress", "index": 2661, "label": 0}
{"input": "@Test\n  public void testMergeTimeline() throws Exception {\n    StepRuntimeSummary summary =\n        loadObject(\n            \"fixtures/execution/sample-step-runtime-summary-1.json\", StepRuntimeSummary.class);\n    assertTrue(summary.isSynced());\n    TimelineEvent curEvent = summary.getTimeline().getTimelineEvents().get(0);\n    TimelineEvent newEvent = TimelineLogEvent.builder().message(\"world\").build();\n    summary.mergeRuntimeUpdate(Collections.singletonList(newEvent), null);\n    assertFalse(summary.isSynced());\n    assertEquals(new Timeline(Arrays.asList(curEvent, newEvent)), summary.getTimeline());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepRuntimeSummaryTest.java", "function_name": "testMergeTimeline", "index": 2662, "label": 0}
{"input": "@SuppressWarnings({\"PMD.AvoidInstantiatingObjectsInLoops\"})\n  @JsonIgnore\n  public WorkflowRollupOverview aggregate(WorkflowRollupOverview rollup) {\n    if (rollup == null) {\n      return this;\n    }\n    this.totalLeafCount += rollup.totalLeafCount;\n    if (rollup.overview == null) {\n      return this;\n    }\n\n    if (this.overview == null) {\n      this.overview = new EnumMap<>(StepInstance.Status.class);\n    }\n    for (Map.Entry<StepInstance.Status, CountReference> entry : rollup.overview.entrySet()) {\n      if (!this.overview.containsKey(entry.getKey())) {\n        this.overview.put(entry.getKey(), new CountReference());\n      }\n      this.overview.get(entry.getKey()).aggregate(entry.getValue());\n    }\n    return this;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/WorkflowRollupOverview.java", "function_name": "aggregate", "index": 2663, "label": 0}
{"input": "public List<StepInstance> getAllStepInstances(\n      String workflowId, long workflowInstanceId, long workflowRunId) {\n    return getStepInstancesByIds(\n        workflowId, workflowInstanceId, workflowRunId, null, this::maestroStepFromResult);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getAllStepInstances", "index": 2664, "label": 0}
{"input": "private static boolean nameParamIsAbsent(\n        StepOutputsDefinition stepOutputsDefinition, ConstraintValidatorContext context) {\n      if (stepOutputsDefinition.getType() == StepOutputsDefinition.StepOutputType.SIGNAL) {\n        SignalOutputsDefinition def = stepOutputsDefinition.asSignalOutputsDefinition();\n        if (def.getDefinitions().stream()\n            .anyMatch(\n                d -> !d.getValue().containsKey(StepDependenciesDefinition.STEP_DEPENDENCY_NAME))) {\n          context\n              .buildConstraintViolationWithTemplate(\n                  \"step outputs definition doesn't contain mandatory name parameter definition\")\n              .addConstraintViolation();\n          return true;\n        }\n      }\n      return false;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/StepOutputsDefinitionConstraint.java", "function_name": "nameParamIsAbsent", "index": 2665, "label": 0}
{"input": "@Override\n\tpublic OverAllState read(ObjectInput in) throws IOException {\n\n\t\t\n\t\tint length = in.readInt();\n\t\tbyte[] jsonBytes = new byte[length];\n\t\tin.readFully(jsonBytes);\n\t\tString json = new String(jsonBytes, StandardCharsets.UTF_8);\n\t\treturn objectMapper.readValue(json, OverAllState.class);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cbed5bdb8a096b49ce533dee99795750da26fd10", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/serializer/DeepResearchStateSerializer.java", "function_name": "read", "index": 2666, "label": 0}
{"input": "public Task newTask(TaskDef def, boolean inline) {\n    Task task = new Task();\n    task.setTaskId(UUID.randomUUID().toString());\n    task.setTaskDef(def);\n    task.setSeq(++seq);\n    task.setStatus(Task.Status.IN_PROGRESS);\n    task.setReasonForIncompletion(null);\n    task.setOutputData(new HashMap<>());\n    task.setStartDelayInSeconds(0);\n    task.setRetryCount(0);\n    \n    if (!inline) {\n      runningTasks.put(def.taskReferenceName(), task);\n    }\n    return task;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/models/Flow.java", "function_name": "newTask", "index": 2667, "label": 0}
{"input": "private boolean jj_2_7(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_7();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(6, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_7", "index": 2668, "label": 0}
{"input": "public void setOnAppSelectListener(OnAppSelectListener onAppSelectListener) {\n        this.onAppSelectListener = onAppSelectListener;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "66790a62d346756b5a66b99eee26e177529a5691", "file_path": "app/src/main/java/org/bepass/oblivion/BypassListAppsAdapter.java", "function_name": "setOnAppSelectListener", "index": 2669, "label": 0}
{"input": "String getInitiatorTimeZone() {\n    if (initiator.getType() == Initiator.Type.TIME) {\n      return ((TimeInitiator) initiator).getTimezone();\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/InstanceWrapper.java", "function_name": "getInitiatorTimeZone", "index": 2670, "label": 0}
{"input": "private int jjMoveStringLiteralDfa11_0(long old0, long active0) {\n    if (((active0 &= old0)) == 0L) return jjStartNfa_0(9, old0, 0L);\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      jjStopStringLiteralDfa_0(10, active0, 0L);\n      return 11;\n    }\n    switch (curChar) {\n      case 100:\n        if ((active0 & 0x10000000000000L) != 0L) return jjStartNfaWithStates_0(11, 52, 28);\n        break;\n      default:\n        break;\n    }\n    return jjStartNfa_0(10, active0, 0L);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa11_0", "index": 2671, "label": 0}
{"input": "@Override\n        public com.google.protobuf.Parser<MessageBytesExtra> getParserForType() {\n            return PARSER;\n        }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getParserForType", "index": 2672, "label": 0}
{"input": "@Test\n  public void testExtractCurrentNodeFromRestartConfig() {\n    AssertHelper.assertThrows(\n        \"Invalid get\",\n        IllegalArgumentException.class,\n        \"Cannot get restart info in empty restart configuration\",\n        () -> RunRequest.getCurrentNode(RestartConfig.builder().build()));\n    RestartConfig config = RestartConfig.builder().addRestartNode(\"foo\", 1, \"bar\").build();\n    Assert.assertEquals(\n        new RestartConfig.RestartNode(\"foo\", 1, \"bar\"), RunRequest.getCurrentNode(config));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunRequestTest.java", "function_name": "testExtractCurrentNodeFromRestartConfig", "index": 2673, "label": 0}
{"input": "private String createOrUpdateTaskDefinition(TaskDef taskDef, String methodName) {\n    withMetricLogError(\n        () ->\n            withRetryableUpdate(\n                UPSERT_TASK_DEFINITION_STATEMENT,\n                statement -> {\n                  statement.setString(1, taskDef.getName());\n                  statement.setString(2, toJson(taskDef));\n                }),\n        methodName,\n        \"Failed {} with task definition name {}\",\n        methodName,\n        taskDef.getName());\n    return taskDef.getName();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "createOrUpdateTaskDefinition", "index": 2674, "label": 0}
{"input": "public OnceAbsoluteMergeStrategy(OnceAbsoluteMergeProperty onceAbsoluteMergeProperty) {\n        this(onceAbsoluteMergeProperty.getFirstRowIndex(), onceAbsoluteMergeProperty.getLastRowIndex(),\n                onceAbsoluteMergeProperty.getFirstColumnIndex(), onceAbsoluteMergeProperty.getLastColumnIndex());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/merge/OnceAbsoluteMergeStrategy.java", "function_name": "OnceAbsoluteMergeStrategy", "index": 2675, "label": 0}
{"input": "@Test\n  public void testCalculatePlannedExecutionsMultiple() {\n    var triggers =\n        List.of(\n            generateTrigger(\"5 2 * * *\", \"2021-05-17T00:00:00-07:00\", US_PACIFIC, null),\n            generateTrigger(\"5,15 2,3 * * *\", \"2021-05-18T00:00:00-07:00\", US_PACIFIC, null));\n    Date endDate = parseDate(triggers, Duration.ofDays(2));\n    List<PlannedTimeTriggerExecution> planned =\n        executionPlanner.calculatePlannedExecutions(triggers, endDate, \"test-workflow\");\n    assertEquals(\n        Arrays.asList(\n            \"2021-05-17T02:05:00-07\",\n            \"2021-05-18T02:05:00-07\",\n            \"2021-05-18T02:05:00-07\",\n            \"2021-05-18T02:15:00-07\",\n            \"2021-05-18T03:05:00-07\",\n            \"2021-05-17T00:00:00-07:00\"0),\n        planned.stream().map(p -> strFormat(p.executionDate())).collect(Collectors.toList()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculatePlannedExecutionsMultiple", "index": 2676, "label": 0}
{"input": "public static String restoreText(Context context, String text) {\n        if (originalLocale != null) {\n            Resources resources = context.getResources();\n            \n            String[] englishNames = resources.getStringArray(R.array.englishCountries);\n            restoreLocale(context);\n            \n            String[] translatedNames = resources.getStringArray(R.array.countries);\n\n            \n            for (int i = 0; i < englishNames.length; i++) {\n                if (englishNames[i].equalsIgnoreCase(text)) {\n                    return translatedNames[i];\n                }\n            }\n        }\n        return text; \n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "abcf26c693e386d31c730746b915c346087b18de", "file_path": "app/src/main/java/org/bepass/oblivion/LocaleHelper.java", "function_name": "restoreText", "index": 2677, "label": 0}
{"input": "public List<StringConstantPart> getParts() {\n      return (List<StringConstantPart>) children;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/StringPart.java", "function_name": "getParts", "index": 2678, "label": 0}
{"input": "private @Nullable SymbolTable.Scope getParentLexicalScope() {\n    var parent = symbolTable.getCurrentScope().getLexicalScope().getParent();\n    if (parent != null) return parent.getLexicalScope();\n    return null;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "getParentLexicalScope", "index": 2679, "label": 0}
{"input": "public static String convertStreamToString(InputStream is) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder sb = new StringBuilder();\n\n        String line;\n        try {\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append('\\n');\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return sb.toString();\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "ef0fcfd4c01010bae03a588b4a50ce4b33749f7d", "file_path": "app/src/main/java/org/bepass/oblivion/PublicIPUtils.java", "function_name": "convertStreamToString", "index": 2680, "label": 0}
{"input": "default TimelineDetailsEvent asDetails() {\n    throw new MaestroInternalError(\n        \"TimelineEvent with type [%s] cannot be treated as DETAILS event\", getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/timeline/TimelineEvent.java", "function_name": "asDetails", "index": 2681, "label": 0}
{"input": "@JsonIgnore\n  public int getTotalStepCount() {\n    return runtimeDag == null ? 0 : runtimeDag.size();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/WorkflowSummary.java", "function_name": "getTotalStepCount", "index": 2682, "label": 0}
{"input": "public MaestroRetryableError(Throwable cause, String template, Object... args) {\n    this(cause, String.format(template, args));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/exceptions/MaestroRetryableError.java", "function_name": "MaestroRetryableError", "index": 2683, "label": 0}
{"input": "@Test(expected = ArrayIndexOutOfBoundsException.class)\n  public void testInvalidPop() {\n    state.pop();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelVisitorStateTest.java", "function_name": "testInvalidPop", "index": 2684, "label": 0}
{"input": "public StepInstanceActionResponse bypassStepDependencies(\n      String workflowId, long workflowInstanceId, String stepId, User user) {\n    WorkflowInstance instance =\n        instanceDao.getLatestWorkflowInstanceRun(workflowId, workflowInstanceId);\n    return actionDao.bypassStepDependencies(instance, stepId, user);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/StepInstanceActionHandler.java", "function_name": "bypassStepDependencies", "index": 2685, "label": 0}
{"input": "@Bean\n  @Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)\n  public User.UserBuilder callerBuilder() {\n    return User.builder();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroInterceptorMvcConfig.java", "function_name": "callerBuilder", "index": 2686, "label": 0}
{"input": "private void spreadIterable(VirtualFrame frame, ObjectData data, Iterable<?> iterable) {\n    var iterator = new TruffleIterator<>(iterable);\n    while (iterator.hasNext()) {\n      var elem = iterator.next();\n      var member = VmUtils.createSyntheticObjectElement(String.valueOf(data.length()), elem);\n      data.addElement(frame, member, this);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "spreadIterable", "index": 2687, "label": 0}
{"input": "public List<String> scanAvailableAgents() {\n\t\ttry {\n\t\t\tClassPathResource baseResource = new ClassPathResource(CONFIG_BASE_PATH);\n\t\t\tif (!baseResource.exists()) {\n\t\t\t\tlog.warn(\"StartupAgent配置基础目录不存在: {}\", CONFIG_BASE_PATH);\n\t\t\t\treturn List.of();\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\treturn Arrays.asList(\"default_agent\", \"text_file_agent\", \"browser_agent\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error(\"扫描Agent配置目录失败\", e);\n\t\t\treturn List.of();\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/startupAgent/StartupAgentConfigLoader.java", "function_name": "scanAvailableAgents", "index": 2688, "label": 0}
{"input": "@Bean\n  public EventHandlerDAO eventHandlerDAO(\n      DataSource crdbDataSource,\n      @Qualifier(ConductorConfiguration.CONDUCTOR_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props) {\n    LOG.info(\"Creating eventHandlerDAO within Spring boot...\");\n    return new CockroachDBEventHandlerDAO(crdbDataSource, objectMapper, props);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "eventHandlerDAO", "index": 2689, "label": 0}
{"input": "@GetMapping(value = \"/steps/instances/action-map\", consumes = MediaType.ALL_VALUE)\n  @Operation(summary = \"Get step instance status to step instance action mapping\")\n  public Map<StepInstance.Status, List<Actions.StepInstanceAction>> getStepInstanceActionMap() {\n    return Actions.STEP_INSTANCE_STATUS_TO_ACTION_MAP;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/controllers/StepInstanceController.java", "function_name": "getStepInstanceActionMap", "index": 2690, "label": 0}
{"input": "public ExcelConverter getExcelConverter() {\n        if (excelTypeEnum == ExcelTypeEnum.XLSX) {\n            return new cn.idev.excel.fileconvertor.v07.XlsxConverter(this);\n        } else if (excelTypeEnum == ExcelTypeEnum.XLS) {\n            return new cn.idev.excel.fileconvertor.v03.XlsConverter(this);\n        }\n        throw new IllegalArgumentException(\"Not supported excel type\");\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/FileConverterContext.java", "function_name": "getExcelConverter", "index": 2691, "label": 0}
{"input": "@Override\n  public boolean isRunning() {\n    if (parent == null) {\n      return running;\n    }\n    return running && parent.isRunning();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/BaseActor.java", "function_name": "isRunning", "index": 2692, "label": 0}
{"input": "public CockroachDBIndexDAO(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "CockroachDBIndexDAO", "index": 2693, "label": 0}
{"input": "Object getFromSignalOrDefault(String signalName, String paramName, Object defaultValue) {\n    try {\n      return getFromSignal(signalName, paramName);\n    } catch (Exception e) {\n      return defaultValue;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtension.java", "function_name": "getFromSignalOrDefault", "index": 2694, "label": 0}
{"input": "@Override\n  public void checkPackageDefinition(String pkg) {\n    if (accs.get() != null) {\n      super.checkPackageDefinition(pkg);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkPackageDefinition", "index": 2695, "label": 0}
{"input": "private Pair<ExpressionNode[], Boolean> createCollectionArgumentBytesNodes(ArgumentList exprs) {\n    var args = exprs.getArguments();\n    var expressionNodes = new ExpressionNode[args.size()];\n    var isAllByteLiterals = true;\n\n    for (var i = 0; i < args.size(); i++) {\n      var expr = args.get(i);\n      if (expr instanceof IntLiteralExpr intLiteralExpr && isAllByteLiterals) {\n        try {\n          var byt = parseNumber(intLiteralExpr, Byte::parseByte);\n          expressionNodes[i] = new ByteConstantValueNode(byt);\n        } catch (NumberFormatException e) {\n          \n          \n          isAllByteLiterals = false;\n          expressionNodes[i] = visitExpr(expr);\n        }\n      } else {\n        isAllByteLiterals = false;\n        expressionNodes[i] = visitExpr(expr);\n      }\n    }\n\n    return Pair.of(expressionNodes, isAllByteLiterals);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "createCollectionArgumentBytesNodes", "index": 2696, "label": 0}
{"input": "public MaestroQueueWorker(\n      String name,\n      int queueId,\n      QueueProperties.QueueWorkerProperties properties,\n      MaestroQueueDao queueDao,\n      ScheduledExecutorService scheduler,\n      BlockingQueue<MessageDto> messageQueue,\n      MaestroJobEventDispatcher dispatcher,\n      MaestroMetrics metrics) {\n    this.name = name;\n    this.queueId = queueId;\n    this.batchLimit = properties.getBatchLimit();\n    this.messageLimit = properties.getMessageLimit();\n    this.timeout = properties.getOwnershipTimeout();\n    this.executionBudget = properties.getExecutionBudget();\n    this.scanInterval = properties.getScanInterval();\n    this.retryInterval = properties.getRetryInterval();\n    this.queueDao = queueDao;\n    this.scheduler = scheduler;\n    this.messageQueue = messageQueue;\n    this.dispatcher = dispatcher;\n    this.metrics = metrics;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/worker/MaestroQueueWorker.java", "function_name": "MaestroQueueWorker", "index": 2697, "label": 0}
{"input": "default long getConnectionMaxLifetime() {\n    return getLongProperty(\n        CONNECTION_MAX_LIFETIME_PROPERTY_NAME, CONNECTION_MAX_LIFETIME_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getConnectionMaxLifetime", "index": 2698, "label": 0}
{"input": "private int jjMoveStringLiteralDfa1_1(long active0) {\n    try {\n      curChar = input_stream.readChar();\n    } catch (java.io.IOException e) {\n      return 1;\n    }\n    switch (curChar) {\n      case 47:\n        if ((active0 & 0x200L) != 0L) return jjStopAtPos(1, 9);\n        break;\n      default:\n        return 2;\n    }\n    return 2;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa1_1", "index": 2699, "label": 0}
{"input": "@JsonCreator\n    public RestartNode(\n        @JsonProperty(\"workflow_id\") String workflowId,\n        @JsonProperty(\"instance_id\") long instanceId,\n        @Nullable @JsonProperty(\"step_id\") String stepId) {\n      this.workflowId = workflowId;\n      this.instanceId = instanceId;\n      this.stepId = stepId;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/RestartConfig.java", "function_name": "RestartNode", "index": 2700, "label": 0}
{"input": "@Test\n    public void testformat() {\n        DecimalFormat decimalFormat = new DecimalFormat(\"0.00\");\n        decimalFormat.setRoundingMode(RoundingMode.HALF_UP);\n        BigDecimal bigDecimal = new BigDecimal(\"0.105\");\n        \n        System.out.println(decimalFormat.format(bigDecimal));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/encrypt/EncryptDataTest.java", "function_name": "testformat", "index": 2701, "label": 0}
{"input": "@Test\n  public void testRestartCreatedWithAggregatedView() {\n    RunRequest request =\n        RunRequest.builder()\n            .currentPolicy(RunPolicy.RESTART_FROM_BEGINNING)\n            .initiator(new ManualInitiator())\n            .requestId(UUID.fromString(\"41f0281e-41a2-468d-b830-56141b2f768b\"))\n            .build();\n    instance.setStatus(WorkflowInstance.Status.FAILED);\n    workflowHelper.updateWorkflowInstance(instance, request);\n    assertEquals(WorkflowInstance.Status.CREATED, instance.getStatus());\n    assertEquals(WorkflowInstance.Status.CREATED, instance.getRunStatus());\n    assertEquals(\n        Collections.singletonMap(\n            \"job1\", StepAggregatedView.builder().status(StepInstance.Status.NOT_CREATED).build()),\n        instance.getAggregatedInfo().getStepAggregatedViews());\n    assertEquals(\n        WorkflowInstance.Status.FAILED, instance.getAggregatedInfo().getWorkflowInstanceStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/WorkflowHelperTest.java", "function_name": "testRestartCreatedWithAggregatedView", "index": 2702, "label": 0}
{"input": "@Bean(name = JsonProcessorConstants.INSERT_TOOL_NAME)\n\t@Description(\"Use Gson to insert a jsonObject property field .\")\n\t@ConditionalOnMissingBean\n\tpublic JsonProcessorInsertService jsonInsertPropertyField(JsonParseTool jsonParseTool) {\n\t\treturn new JsonProcessorInsertService(jsonParseTool);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "0fe2aa6ca3186a580f39e38ee7a97ab74ba0664f", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-jsonprocessor/src/main/java/com/alibaba/cloud/ai/toolcalling/jsonprocessor/JsonProcessorAutoConfiguration.java", "function_name": "jsonInsertPropertyField", "index": 2703, "label": 0}
{"input": "public List<SignalInstance> getSignalInstances(List<SignalInstanceRef> refs) {\n    return refs.stream().map(instanceDao::getSignalInstance).toList();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/main/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDao.java", "function_name": "getSignalInstances", "index": 2704, "label": 0}
{"input": "@Test\n  public void testNotReleaseTagPermitOrCleanUpStepActionIfRunning() {\n    when(jobEvent1.toMaestroEvent(clusterName)).thenReturn(changeEvent1);\n    when(jobEvent1.getPendingRecords())\n        .thenReturn(\n            Collections.singletonList(\n                StepInstanceUpdateJobEvent.createRecord(\n                    StepInstance.Status.RUNNING, StepInstance.Status.RUNNING, 12345L)));\n    processor.process(() -> jobEvent1);\n    verify(tagPermitManager, times(0)).releaseTagPermits(anyString());\n    verify(actionDao, times(0)).cleanUp(any());\n    verify(jobEvent1, times(1)).getType();\n    verify(eventClient, times(1)).send(changeEvent1);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/PublishJobEventProcessorTest.java", "function_name": "testNotReleaseTagPermitOrCleanUpStepActionIfRunning", "index": 2705, "label": 0}
{"input": "private void heartbeat() {\n    LOG.debug(\"Heartbeat the group: [{}]\", group);\n    cleanupChildActors(); \n    getContext().heartbeatGroup(group);\n    schedule(Action.GROUP_HEARTBEAT, heartbeatInterval);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/actor/GroupActor.java", "function_name": "heartbeat", "index": 2706, "label": 0}
{"input": "@Test\n  public void testGetFirstRestartIterationId() throws Exception {\n    ForeachStepOverview overview =\n        loadObject(\n            \"fixtures/instances/sample-foreach-step-overview.json\", ForeachStepOverview.class);\n    assertEquals(0, overview.getFirstRestartIterationId());\n\n    overview.addOne(23L, WorkflowInstance.Status.FAILED, null);\n    overview.addOne(123L, WorkflowInstance.Status.FAILED, null);\n    overview.refreshDetail();\n    overview.updateForRestart(\n        23L, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED, null);\n    overview.updateForRestart(\n        123L, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED, null);\n\n    assertEquals(23L, overview.getFirstRestartIterationId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/ForeachStepOverviewTest.java", "function_name": "testGetFirstRestartIterationId", "index": 2707, "label": 0}
{"input": "private int jjMoveStringLiteralDfa0_2() {\n    switch (curChar) {\n      case 42:\n        return jjMoveStringLiteralDfa1_2(0x400L);\n      default:\n        return 1;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjMoveStringLiteralDfa0_2", "index": 2708, "label": 0}
{"input": "@Test\n  public void testStringsMD5() {\n    String digest = HashHelper.md5(\"hello\", \"world\");\n    assertEquals(\"6c6df59fc9a6c8523031238265cba829\", digest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/HashHelperTest.java", "function_name": "testStringsMD5", "index": 2709, "label": 0}
{"input": "private static <T> T convertField(\n      ObjectMapper objectMapper,\n      Map<String, Object> data,\n      String fieldName,\n      TypeReference<T> typeReference) {\n    return objectMapper.convertValue(\n        Checks.notNull(data.get(fieldName), CONVERT_FIELD_ERROR, fieldName), typeReference);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/utils/StepHelper.java", "function_name": "convertField", "index": 2710, "label": 0}
{"input": "@Test\n    public void xlsTest1() throws IOException {\n        try (ExcelReader reader = EasyExcel.read(\n                Files.newInputStream(Paths.get(\"src/test/resources/repeat/repeat.xls\")), LockData.class,\n                new RepeatListener()).headRowNumber(0).build()) {\n            ReadSheet r1 = EasyExcel.readSheet(0).build();\n            ReadSheet r2 = EasyExcel.readSheet(2).build();\n            reader.read(r1);\n            reader.read(r2);\n            reader.finish();\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "179dca17c46b409b27904d552e011f733fcea33e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "xlsTest1", "index": 2711, "label": 0}
{"input": "@Override\n    public Object executeEagerlyAndSet(VirtualFrame frame, Object value) {\n      var prevOwner = VmUtils.getOwner(frame);\n      var prevReceiver = VmUtils.getReceiver(frame);\n      setOwner(frame, VmUtils.getOwner(typeAlias.getEnclosingFrame()));\n      setReceiver(frame, VmUtils.getReceiver(typeAlias.getEnclosingFrame()));\n\n      try {\n        return aliasedTypeNode.executeEagerlyAndSet(frame, value);\n      } finally {\n        setOwner(frame, prevOwner);\n        setReceiver(frame, prevReceiver);\n      }\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "executeEagerlyAndSet", "index": 2712, "label": 0}
{"input": "public long getHeartbeatIntervalInMillis() {\n    return getLongProperty(\n        GROUP_HEARTBEAT_INTERVAL_PROPERTY_NAME, GROUP_HEARTBEAT_INTERVAL_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getHeartbeatIntervalInMillis", "index": 2713, "label": 0}
{"input": "@Test\n    public void t03() {\n        \n        List<Map<Integer, Object>> list = EasyExcel.read(TestFileUtil.getPath() + \"compatibility/t03.xlsx\").sheet()\n                .doReadSync();\n        log.info(\"data:{}\", JSON.toJSONString(list));\n        Assertions.assertEquals(1, list.size());\n        Map<Integer, Object> row0 = list.get(0);\n        Assertions.assertEquals(12, row0.size());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t03", "index": 2714, "label": 0}
{"input": "@Test\n  public void testBuildNotebookParamsWithConflictingWorkflowAndStepParams() {\n    workflowParams.put(\"k1\", buildParam(\"k1\", \"workflowvalue\"));\n    params.put(\"k1\", buildParam(\"k1\", \"stepvalue\"));\n    String notebookParams =\n        notebookParamsBuilder.buildNotebookParams(workflowSummary, stepRuntimeSummary, null);\n    assertEquals(\n        \"{\\\"owner\\\":\\\"paramuser\\\",\\\"k1\\\":\\\"stepvalue\\\",\\\"notebook\\\":{\\\"input_path\\\":\\\"owner/mynotebook.ipynb\\\",\\\"run_id\\\":\\\"MyWorkflow_123_2_mystepid_3\\\"},\\\"criticality\\\":\\\"medium\\\",\\\"attempt_number\\\":2}\",\n        notebookParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilderTest.java", "function_name": "testBuildNotebookParamsWithConflictingWorkflowAndStepParams", "index": 2715, "label": 0}
{"input": "public DynamicAgentLoader(DynamicAgentRepository repository, @Lazy LlmService llmService,\n\t\t\tPlanExecutionRecorder recorder, ManusProperties properties, @Lazy ToolCallingManager toolCallingManager,\n\t\t\tUserInputService userInputService, PromptLoader promptLoader) {\n\t\tthis.repository = repository;\n\t\tthis.llmService = llmService;\n\t\tthis.recorder = recorder;\n\t\tthis.properties = properties;\n\t\tthis.toolCallingManager = toolCallingManager;\n\t\tthis.userInputService = userInputService;\n\t\tthis.promptLoader = promptLoader;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/service/DynamicAgentLoader.java", "function_name": "DynamicAgentLoader", "index": 2716, "label": 0}
{"input": "@Override\n    public List<ContactLabel> queryContactLabelAsList() {\n        LambdaQueryWrapper<ContactLabel> wrapper = Wrappers.<ContactLabel>lambdaQuery()\n                .select(ContactLabel::getLabelId,ContactLabel::getLabelName);\n        \n        return super.list(wrapper);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/repository/impl/ContactLabelRepositoryImpl.java", "function_name": "queryContactLabelAsList", "index": 2717, "label": 0}
{"input": "@Override\n    public String toString() {\n        return \"ReadSheet{\" + \"sheetNo=\" + sheetNo + \", sheetName='\" + sheetName\n            + \", sheetHidden='\" + sheetHidden + \", sheetVeryHidden='\" + sheetVeryHidden + '\\'' + \"} \" + super.toString();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/read/metadata/ReadSheet.java", "function_name": "toString", "index": 2718, "label": 0}
{"input": "private TimeTriggerWithWatermark generateTrigger(\n      String cronExpression, String triggerTs, String timezone, ParsableLong maxDelay) {\n    CronTimeTrigger trigger = new CronTimeTrigger();\n    trigger.setCron(cronExpression);\n    trigger.setTimezone(timezone);\n    if (maxDelay != null) {\n      trigger.setFuzzyMaxDelay(maxDelay);\n    }\n    return TimeTriggerWithWatermark.builder()\n        .timeTrigger(trigger)\n        .lastTriggerTimestamp(ZonedDateTime.parse(triggerTs).toInstant().toEpochMilli())\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "generateTrigger", "index": 2719, "label": 0}
{"input": "@Test\n  public void testBuildNotebookParamsWithExcludedParams() {\n    workflowParams.put(\"workflow_id\", buildParam(\"workflow_id\", \"efg\"));\n    params.put(\"step_attempt_id\", buildParam(\"step_attempt_id\", 123));\n    String notebookParams =\n        notebookParamsBuilder.buildNotebookParams(workflowSummary, stepRuntimeSummary, null);\n    assertEquals(\n        \"{\\\"owner\\\":\\\"paramuser\\\",\\\"notebook\\\":{\\\"input_path\\\":\\\"owner/mynotebook.ipynb\\\",\\\"run_id\\\":\\\"MyWorkflow_123_2_mystepid_3\\\"},\\\"criticality\\\":\\\"medium\\\",\\\"attempt_number\\\":2}\",\n        notebookParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilderTest.java", "function_name": "testBuildNotebookParamsWithExcludedParams", "index": 2720, "label": 0}
{"input": "@Override\n    public VmTypeAlias getVmTypeAlias() {\n      return BaseModule.getUInt8TypeAlias();\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "getVmTypeAlias", "index": 2721, "label": 0}
{"input": "private void excludeFieldName(File file) {\n        Set<String> excludeColumnFieldNames = new HashSet<String>();\n        excludeColumnFieldNames.add(\"column1\");\n        excludeColumnFieldNames.add(\"column3\");\n        excludeColumnFieldNames.add(\"column4\");\n        EasyExcel.write(file, ExcludeOrIncludeData.class).excludeColumnFieldNames(excludeColumnFieldNames).sheet()\n            .doWrite(data());\n        List<Map<Integer, String>> dataMap = EasyExcel.read(file).sheet().doReadSync();\n        Assertions.assertEquals(1, dataMap.size());\n        Map<Integer, String> record = dataMap.get(0);\n        Assertions.assertEquals(1, record.size());\n        Assertions.assertEquals(\"column2\", record.get(0));\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "f92c3168bd3a9d3d4d1c64348601b2300f39b89d", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/excludeorinclude/ExcludeOrIncludeDataTest.java", "function_name": "excludeFieldName", "index": 2722, "label": 0}
{"input": "@Test\n  public void decompressShouldThrowExceptionIfCompressorNotFound() {\n    AssertHelper.assertThrows(\n        \"decompress should throw exception if compressor not found\",\n        NullPointerException.class,\n        \"unknown compressorName: abcd\",\n        () -> stringCodec.decompress(\"abcd\", \"H4sIAAAAAAAAAEtMBAMAdCCLWwcAAAA=\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/StringCodecTest.java", "function_name": "decompressShouldThrowExceptionIfCompressorNotFound", "index": 2723, "label": 0}
{"input": "private static SelType callJavaMethod1(Object obj, SelType arg1, MethodHandle m)\n      throws Throwable {\n    Object obj1 = arg1.unbox();\n    if (obj == null) {\n      return box(m.invoke(obj1));\n    } else {\n      return box(m.invoke(obj, obj1));\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypeUtil.java", "function_name": "callJavaMethod1", "index": 2724, "label": 0}
{"input": "private List<WorkflowInstance> prepareBatch() throws Exception {\n    MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, 1);\n    WorkflowInstance wfi1 = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n    wfi1.setWorkflowUuid(\"wfi1-uuid\");\n    wfi1.setWorkflowInstanceId(0);\n    WorkflowInstance wfi2 = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n    wfi2.setWorkflowUuid(\"wfi1-uuid\");\n    wfi2.setWorkflowInstanceId(0);\n    WorkflowInstance wfi3 = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n    wfi3.setWorkflowUuid(\"wfi3-uuid\");\n    wfi3.setWorkflowInstanceId(0);\n    return Arrays.asList(wfi1, wfi2, wfi3);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "prepareBatch", "index": 2725, "label": 0}
{"input": "public Map<StepOutputsDefinition.StepOutputType, StepOutputs> getStepOutputs(\n      String workflowId,\n      long workflowInstanceId,\n      long workflowRunId,\n      String stepId,\n      String stepAttempt) {\n    try {\n      return getStepInstanceFieldByIds(\n          StepInstanceField.OUTPUTS,\n          workflowId,\n          workflowInstanceId,\n          workflowRunId,\n          stepId,\n          stepAttempt,\n          this::getOutputs);\n    } catch (MaestroNotFoundException ex) {\n      \n      return null;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepOutputs", "index": 2726, "label": 0}
{"input": "public GeneratorWhenNode(\n      SourceSection sourceSection,\n      ExpressionNode conditionNode,\n      GeneratorMemberNode[] thenNodes,\n      GeneratorMemberNode[] elseNodes) {\n\n    super(sourceSection, false);\n    this.conditionNode = conditionNode;\n    this.thenNodes = thenNodes;\n    this.elseNodes = elseNodes;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorWhenNode.java", "function_name": "GeneratorWhenNode", "index": 2727, "label": 0}
{"input": "@Override\n            public Builder setRepeatedField(\n                    com.google.protobuf.Descriptors.FieldDescriptor field,\n                    int index, Object value) {\n                return super.setRepeatedField(field, index, value);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "setRepeatedField", "index": 2728, "label": 0}
{"input": "@Override\n            protected FieldAccessorTable\n            internalGetFieldAccessorTable() {\n                return MsgProto.internal_static_MessageBytesExtra_fieldAccessorTable\n                        .ensureFieldAccessorsInitialized(\n                                MessageBytesExtra.class, Builder.class);\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "internalGetFieldAccessorTable", "index": 2729, "label": 0}
{"input": "public static void transformBorder(XSSFCell cell, com.itextpdf.layout.element.Cell pdfCell) {\n        XSSFCellStyle cellStyle = cell.getCellStyle();\n        BorderStyle borderBottom = cellStyle.getBorderBottom();\n        pdfCell.setBorderBottom(getBorder(borderBottom, cellStyle.getBottomBorderXSSFColor()));\n\n        BorderStyle borderLeft = cellStyle.getBorderLeft();\n        pdfCell.setBorderLeft(getBorder(borderLeft, cellStyle.getLeftBorderXSSFColor()));\n\n        BorderStyle borderRight = cellStyle.getBorderRight();\n        pdfCell.setBorderRight(getBorder(borderRight, cellStyle.getRightBorderXSSFColor()));\n\n        BorderStyle borderTop = cellStyle.getBorderTop();\n        pdfCell.setBorderTop(getBorder(borderTop, cellStyle.getTopBorderXSSFColor()));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/v07/XlsxConverter.java", "function_name": "transformBorder", "index": 2730, "label": 0}
{"input": "private SelLong dateIntToTs(SelType dateInt) {\n    return SelLong.of(\n        dateIntFormatter.parseDateTime(SelString.create(dateInt).getInternalVal()).getMillis());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelUtilFunc.java", "function_name": "dateIntToTs", "index": 2731, "label": 0}
{"input": "@SaCheckPermission(\"system:promptTemplate:query\")\n    @GetMapping(\"/{id}\")\n    public R<PromptTemplateVo> getInfo(@NotNull(message = \"主键不能为空\") @PathVariable Long id) {\n        return R.ok(promptTemplateService.queryById(id));\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "cc129801b9ee9e839f630de8a666414feeabcf12", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/chat/PromptTemplateController.java", "function_name": "getInfo", "index": 2732, "label": 0}
{"input": "@Test\n  public void testShouldDefaultTimeout() {\n    deleteNotebookParam(NotebookConstants.PAPERMILL_ARG_PARAM);\n    String entrypoint = papermillEntrypointBuilder.generatePapermillRuntime(context).entrypoint();\n    assertTrue(entrypoint.contains(\"'--start_timeout' '600'\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/PapermillEntrypointBuilderTest.java", "function_name": "testShouldDefaultTimeout", "index": 2733, "label": 0}
{"input": "private <T> T getJsonObjectIfPresent(ResultSet rs, String field, Class<T> clazz)\n      throws SQLException {\n    String json = rs.getString(field);\n    if (json != null) {\n      return fromJson(json, clazz);\n    }\n    return null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "getJsonObjectIfPresent", "index": 2734, "label": 0}
{"input": "@Test\n  public void testGetStepInstance() {\n    StepInstance instance = stepDao.getStepInstance(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"1\");\n    StepInstance latest = stepDao.getStepInstance(TEST_WORKFLOW_ID, 1, 1, \"job1\", \"latest\");\n    assertEquals(instance, latest);\n    assertEquals(StepInstance.Status.RUNNING, instance.getRuntimeState().getStatus());\n    assertFalse(instance.getSignalDependencies().isSatisfied());\n    assertEquals(\n        2,\n        instance\n            .getDefinition()\n            .getOutputs()\n            .get(StepOutputsDefinition.StepOutputType.SIGNAL)\n            .asSignalOutputsDefinition()\n            .getDefinitions()\n            .size());\n    assertTrue(instance.getArtifacts().isEmpty());\n    assertTrue(instance.getTimeline().isEmpty());\n    instance.setArtifacts(null);\n    instance.setTimeline(null);\n    Assertions.assertThat(instance).usingRecursiveComparison().isEqualTo(si);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetStepInstance", "index": 2735, "label": 0}
{"input": "default int getDbErrorRetries() {\n    return getIntProperty(DB_ERROR_RETRIES_PROPERTY_NAME, DB_ERROR_RETRIES_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBConfiguration.java", "function_name": "getDbErrorRetries", "index": 2736, "label": 0}
{"input": "@Test\n  public void testScheduleForNotRunningActor() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    groupActor.terminateNow();\n\n    groupActor.schedule(Action.GROUP_START, 10000);\n    verify(context, times(0)).schedule(any(), anyLong());\n    verifyEmptyAction(groupActor);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testScheduleForNotRunningActor", "index": 2737, "label": 0}
{"input": "@Override\n  public boolean removeWorkflowWithExpiry(String workflowId, int ttlSeconds) {\n    throw new UnsupportedOperationException(\n        \"This method is not implemented in CockroachDBExecutionDAO.\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "removeWorkflowWithExpiry", "index": 2738, "label": 0}
{"input": "public TypeCheckExpr(Expr expr, Type type, Span span) {\n      super(span, List.of(expr, type));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "TypeCheckExpr", "index": 2739, "label": 0}
{"input": "@Test\n  public void testGetBatchStepInstancesArtifactsFromList1Element() throws IOException {\n    MaestroStepInstanceDao stepDaoSpy = Mockito.spy(stepDao);\n    StepInstance siSubWf = loadObject(TEST_STEP_INSTANCE_SUBWORKFLOW, StepInstance.class);\n    Map<String, Long> stepIdToRunId = new LinkedHashMap<>();\n    siSubWf.setStepId(\"step_100\");\n    siSubWf.setWorkflowRunId(1);\n    stepIdToRunId.put(\"step_100\", 1L);\n    stepDaoSpy.insertOrUpsertStepInstance(siSubWf, false);\n\n    List<Map<String, Artifact>> artifacts =\n        stepDaoSpy.getBatchStepInstancesArtifactsFromList(\n            siSubWf.getWorkflowId(), siSubWf.getWorkflowInstanceId(), stepIdToRunId);\n\n    assertEquals(1, artifacts.size());\n    assertEquals(siSubWf.getArtifacts(), artifacts.get(0));\n    Mockito.verify(stepDaoSpy, Mockito.times(1))\n        .getBatchStepInstancesArtifactsFromListLimited(\n            eq(siSubWf.getWorkflowId()), eq(siSubWf.getWorkflowInstanceId()), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDaoTest.java", "function_name": "testGetBatchStepInstancesArtifactsFromList1Element", "index": 2740, "label": 0}
{"input": "public WriteTableHolder(WriteTable writeTable, WriteSheetHolder writeSheetHolder) {\n        super(writeTable, writeSheetHolder);\n        this.parentWriteSheetHolder = writeSheetHolder;\n        this.tableNo = writeTable.getTableNo();\n        this.writeTable = writeTable;\n        \n        \n        initHandler(writeTable, writeSheetHolder);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/metadata/holder/WriteTableHolder.java", "function_name": "WriteTableHolder", "index": 2741, "label": 0}
{"input": "public Builder setField6(int value) {\n\n                field6_ = value;\n                bitField0_ |= 0x00000020;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "setField6", "index": 2742, "label": 0}
{"input": "public java.util.List<? extends MemberOrBuilder>\n            getMembersOrBuilderList() {\n                if (membersBuilder_ != null) {\n                    return membersBuilder_.getMessageOrBuilderList();\n                } else {\n                    return java.util.Collections.unmodifiableList(members_);\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/ChatRoomProto.java", "function_name": "getMembersOrBuilderList", "index": 2743, "label": 0}
{"input": "private void readAll(File file, Boolean ignoreHidden) {\n        List<HiddenSheetsData> dataList = FastExcel.read(file, HiddenSheetsData.class, new HiddenSheetsListener())\n            .ignoreHiddenSheet(ignoreHidden)\n            .doReadAllSync();\n        if (Boolean.TRUE.equals(ignoreHidden)) {\n            Assertions.assertEquals(3, dataList.size());\n        } else {\n            Assertions.assertEquals(6, dataList.size());\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "1088d68464c1c3d5847b283aaeb81bf983349a54", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/hiddensheets/HiddenSheetsTest.java", "function_name": "readAll", "index": 2744, "label": 0}
{"input": "@Test(expected = AccessControlException.class)\n  public void testNoAccessSetSecurityManager() {\n    System.setSecurityManager(null);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelSecurityManagerTest.java", "function_name": "testNoAccessSetSecurityManager", "index": 2745, "label": 0}
{"input": "@Override\n    public void invoke(DemoCompatibleHeaderData data, AnalysisContext context) {\n        log.info(\"Parsed one data row:{}\", JSON.toJSONString(data));\n        cachedDataList.add(data);\n        \n        if (cachedDataList.size() >= BATCH_COUNT) {\n            saveData();\n            \n            cachedDataList = ListUtils.newArrayListWithExpectedSize(BATCH_COUNT);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "4e6111aeeb6c9a24c0b7fa208ec8ec9acf6719fa", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/DemoCompatibleHeaderDataListener.java", "function_name": "invoke", "index": 2746, "label": 0}
{"input": "public void refreshCache(Page page) {\n\t\t\n\t\telementRegistry.refresh(page);\n\t\tlog.info(\"Refreshed page elements, found {} interactive elements\", elementRegistry.size());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/InteractiveTextProcessor.java", "function_name": "refreshCache", "index": 2747, "label": 0}
{"input": "private boolean jj_2_9(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_9();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(8, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_9", "index": 2748, "label": 0}
{"input": "@Test\n    public void t01() {\n        \n        List<Map<Integer, Object>> list = EasyExcel.read(TestFileUtil.getPath() + \"compatibility/t01.xls\").sheet()\n            .doReadSync();\n        Assertions.assertEquals(2, list.size());\n        Map<Integer, Object> row1 = list.get(1);\n        Assertions.assertEquals(\"Q235(碳钢)\", row1.get(0));\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "48a8c2b36277eef512023b5f9fa6b2615833a274", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/compatibility/CompatibilityTest.java", "function_name": "t01", "index": 2749, "label": 0}
{"input": "public static void setMenuVelocityContext(VelocityContext context, GenTable genTable) {\n    String options = genTable.getOptions();\n    Dict paramsObj = JsonUtils.parseMap(options);\n    String parentMenuId = getParentMenuId(paramsObj);\n    context.put(\"parentMenuId\", parentMenuId);\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "setMenuVelocityContext", "index": 2750, "label": 0}
{"input": "private Workflow getWorkflow(String workflowId, String getStatement) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                getStatement,\n                statement -> {\n                  statement.setString(1, workflowId);\n                  statement.setString(2, workflowId);\n                },\n                this::workflowFromResult),\n        \"getWorkflow\",\n        \"Failed getting a workflow instance {}\",\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "getWorkflow", "index": 2751, "label": 0}
{"input": "@Override\n    public void setComment(String comment) {\n        display.asyncExec(() -> {\n            if (!commentLabel.isDisposed()) {\n                commentLabel.setText(comment != null ? comment : \"\");\n                shell.layout();\n            }\n        });\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "a8ee1325776cdd1d259c170973468fc412422e3d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/gui/impl/swt/SwtProgressDialog.java", "function_name": "setComment", "index": 2752, "label": 0}
{"input": "@Override\n    protected Object executeLazily(VirtualFrame frame, Object value) {\n      if (value instanceof Boolean) return value;\n\n      throw typeMismatch(value, BaseModule.getBooleanClass());\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "643c6f5a76d0a2b81b7f8e22e0013037826ce2b5", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java", "function_name": "executeLazily", "index": 2753, "label": 0}
{"input": "private void addTask(PreparedStatement statement, Task task) throws SQLException {\n    statement.setString(1, task.getWorkflowInstanceId());\n    statement.setString(2, task.getTaskId());\n    statement.setString(3, toJson(task));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBExecutionDAO.java", "function_name": "addTask", "index": 2754, "label": 0}
{"input": "public static JSONObject postVideo(String appId, String toWxid, String videoUrl, String thumbUrl,Integer videoDuration) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"videoUrl\", videoUrl);\r\n        param.put(\"thumbUrl\", thumbUrl);\r\n        param.put(\"videoDuration\", videoDuration);\r\n        return OkhttpUtil.postJSON(\"/message/postVideo\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postVideo", "index": 2755, "label": 0}
{"input": "@Test\n    public void read1() throws Exception {\n        Iterable<CSVRecord> records = CSVFormat.DEFAULT.withNullString(\"\").parse(\n            new FileReader(\"src/test/resources/poi/last_row_number_xssf_date_test.csv\"));\n        for (CSVRecord record : records) {\n            String lastName = record.get(0);\n            String firstName = record.get(1);\n            log.info(\"row:{},{}\", lastName, firstName);\n        }\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvReadTest.java", "function_name": "read1", "index": 2756, "label": 0}
{"input": "@Test\n  public void testPushWithDelay() {\n    timeTriggerProducer.push(execution, 100);\n    verify(amazonSqs, times(1)).sendMessage(any());\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_TIME_TRIGGER_PUBLISH_SUCCESS_METRIC,\n                SqsTimeTriggerProducer.class,\n                \"withDelay\",\n                \"true\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsTimeTriggerProducerTest.java", "function_name": "testPushWithDelay", "index": 2757, "label": 0}
{"input": "@BeforeAll\n    public static void init() {\n        headFile01 = TestFileUtil.getPath() + \"temp/issue220\" + File.separator + \"test01.xlsx\";\n        headFile02 = TestFileUtil.getPath() + \"temp/issue220\" + File.separator + \"test02.xlsx\";\n        headFile03 = TestFileUtil.getPath() + \"temp/issue220\" + File.separator + \"test03.xlsx\";\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "8ad28c2464fd7d057dcd4a27ed5fb044c874078a", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/core/head/MaxHeadSizeTest.java", "function_name": "init", "index": 2758, "label": 0}
{"input": "@Bean\n  public MaestroQueueDao maestroQueueDao(\n      DataSource maestroDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      MaestroEngineProperties props,\n      MaestroMetrics metrics) {\n    LOG.info(\"Creating maestroQueueDao within Spring boot...\");\n    return new MaestroQueueDao(maestroDataSource, objectMapper, props, metrics);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "maestroQueueDao", "index": 2759, "label": 0}
{"input": "@Test\n  public void testStringArrayParameter() {\n    StringArrayParameter param =\n        StringArrayParameter.builder()\n            .name(\"stringArrayParam\")\n            .expression(\"return ['abc'];\")\n            .evaluatedResult(new String[] {\"abc\"})\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asStringArrayParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertArrayEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testStringArrayParameter", "index": 2760, "label": 0}
{"input": "private ObjectMember.ForGenerator parseForGenerator() {\n    var start = next().span;\n    expect(Token.LPAREN, \"unexpectedToken\", \"(\");\n    var par1 = parseParameter();\n    Parameter par2 = null;\n    if (lookahead == Token.COMMA) {\n      next();\n      par2 = parseParameter();\n    }\n    expect(Token.IN, \"unexpectedToken\", \"in\");\n    var expr = parseExpr(\")\");\n    expect(Token.RPAREN, \"unexpectedToken\", \")\");\n    var body = parseObjectBody();\n    return new ObjectMember.ForGenerator(par1, par2, expr, body, start.endWith(body.span()));\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseForGenerator", "index": 2761, "label": 0}
{"input": "public Optional<String> titleToSnakeCase() {\n\t\t\treturn ofNullable(title).map(v -> v.replaceAll(\"[^a-zA-Z0-9]\", \"_\"));\n\t\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b96b23a5859c99b4b9f1e8895d9eee02ff7069d5", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-core/src/main/java/com/alibaba/cloud/ai/graph/DiagramGenerator.java", "function_name": "titleToSnakeCase", "index": 2762, "label": 0}
{"input": "public SelArray newSelTypeObjArray(int len) {\n    switch (this) {\n      case STRING:\n        return new SelArray(len, SelTypes.STRING_ARRAY);\n      case LONG:\n        return new SelArray(len, SelTypes.LONG_ARRAY);\n      case DOUBLE:\n        return new SelArray(len, SelTypes.DOUBLE_ARRAY);\n      case BOOLEAN:\n        return new SelArray(len, SelTypes.BOOLEAN_ARRAY);\n      default:\n        throw new UnsupportedOperationException(\n            \"NOT support creating an array with the element type \" + this.name());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/type/SelTypes.java", "function_name": "newSelTypeObjArray", "index": 2763, "label": 0}
{"input": "@Test\n  public void testComputeDag() throws Exception {\n    WorkflowCreateRequest request =\n        loadObject(\n            \"fixtures/workflows/request/sample-conditional-wf.json\", WorkflowCreateRequest.class);\n    Map<String, StepTransition> dag =\n        WorkflowGraph.computeDag(\n            request.getWorkflow(),\n            Collections.singletonList(\"job.6\"),\n            Collections.singletonList(\"job.6\"));\n    Assert.assertEquals(1, dag.size());\n    Assert.assertEquals(Collections.singletonMap(\"job.6\", new StepTransition()), dag);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/transformation/WorkflowGraphTest.java", "function_name": "testComputeDag", "index": 2764, "label": 0}
{"input": "@SuppressWarnings({\"PMD.NullAssignment\"})\n  void shutdown() {\n    LOG.info(\"Shutdown ExtensionRepo within Spring boot...\");\n    executor.shutdown();\n    executor = null;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/eval/MaestroParamExtensionRepo.java", "function_name": "shutdown", "index": 2765, "label": 0}
{"input": "@Bean\n  public MaestroNotificationPublisher notificationPublisher() {\n    LOG.info(\"Creating NoOp MaestroNotificationPublisher within Spring boot...\");\n    return new NoOpMaestroNotificationPublisher();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroServerConfiguration.java", "function_name": "notificationPublisher", "index": 2766, "label": 0}
{"input": "@Override\n  public SelResult childrenAccept(SelParserVisitor visitor, Object data) {\n    SelResult res = SelResult.NONE;\n    if (children != null) {\n      for (int i = 0; i < children.length; ++i) {\n        res = (SelResult) children[i].jjtAccept(visitor, data);\n        switch (res) {\n          case BREAK:\n            return SelResult.BREAK;\n          case CONTINUE:\n            return SelResult.CONTINUE;\n          case RETURN:\n            return SelResult.RETURN;\n        }\n      }\n    }\n    return res;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelBaseNode.java", "function_name": "childrenAccept", "index": 2767, "label": 0}
{"input": "@Override\n  public SearchResult<String> searchTasks(\n      String taskName, String status, int start, int count, List<String> options) {\n    return withMetricLogError(\n        () -> getSearchIds(GET_TASK_IDS_STATEMENT, taskName, status, start, count, options),\n        \"searchTasks\",\n        \"Failed searching tasks by task name {} with status {}\",\n        taskName,\n        status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAO.java", "function_name": "searchTasks", "index": 2768, "label": 0}
{"input": "static EnumMap<MaestroJobEvent.Type, BlockingQueue<MessageDto>> createQueuesForJobEvents() {\n    EnumMap<MaestroJobEvent.Type, BlockingQueue<MessageDto>> eventQueues =\n        new EnumMap<>(MaestroJobEvent.Type.class);\n    Map<Integer, BlockingQueue<MessageDto>> queues = new HashMap<>();\n    for (var entry : MaestroJobEvent.Type.values()) {\n      if (queues.containsKey(entry.getQueueId())) {\n        \n        eventQueues.put(entry, queues.get(entry.getQueueId()));\n      } else {\n        BlockingQueue<MessageDto> messageQueue = new LinkedBlockingQueue<>();\n        queues.put(entry.getQueueId(), messageQueue);\n        eventQueues.put(entry, messageQueue);\n      }\n    }\n    return eventQueues;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-queue/src/main/java/com/netflix/maestro/queue/jobevents/MaestroJobEvent.java", "function_name": "createQueuesForJobEvents", "index": 2769, "label": 0}
{"input": "public static String getTreeName(Dict paramsObj) {\n    if (CollUtil.isNotEmpty(paramsObj) && paramsObj.containsKey(GenConstants.TREE_NAME)) {\n      return StringUtils.toCamelCase(paramsObj.getStr(GenConstants.TREE_NAME));\n    }\n    return StringUtils.EMPTY;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "getTreeName", "index": 2770, "label": 0}
{"input": "default LongParameter asLongParam() {\n    throw new MaestroInternalError(\n        \"Param [%s] is a [%s] type and cannot be used as LONG\", getName(), getType());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/Parameter.java", "function_name": "asLongParam", "index": 2771, "label": 0}
{"input": "public MaestroWorkflowDao(\n      DataSource dataSource,\n      ObjectMapper objectMapper,\n      CockroachDBConfiguration config,\n      MaestroJobEventPublisher publisher,\n      TriggerSubscriptionClient subscriptionClient) {\n    super(dataSource, objectMapper, config);\n    this.publisher = publisher;\n    this.subscriptionClient = subscriptionClient;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "MaestroWorkflowDao", "index": 2772, "label": 0}
{"input": "@Test\n    public void lastRowNum233443() throws IOException, InvalidFormatException {\n        String sourceFile = \"src/test/resources/poi/last_row_number_xssf_date_test.xlsx\";\n        String file = tempDir.resolve(System.currentTimeMillis()+\".xlsx\").toString();\n        Files.copy(Paths.get(sourceFile), Paths.get(file));\n        XSSFWorkbook xssfWorkbook = new XSSFWorkbook(new File(file));\n        XSSFSheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        System.out.println(xssfSheet.getLastRowNum());\n        System.out.println(xssfSheet.getRow(0));\n\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "956838492ae6be92f10d45e4729c0e61eb1cfbf2", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/poi/PoiTest.java", "function_name": "lastRowNum233443", "index": 2773, "label": 0}
{"input": "@Test\n  public void compressShouldThrowExceptionIfCompressorNotFound() {\n    AssertHelper.assertThrows(\n        \"compress should throw exception if compressor not found\",\n        NullPointerException.class,\n        \"unknown compressorName: abcd\",\n        () -> stringCodec.compress(\"abcd\", \"testValue\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/compression/StringCodecTest.java", "function_name": "compressShouldThrowExceptionIfCompressorNotFound", "index": 2774, "label": 0}
{"input": "private String listSegments() {\n        Program program = getCurrentProgram();\n        StringBuilder sb = new StringBuilder();\n        for (MemoryBlock block : program.getMemory().getBlocks()) {\n            sb.append(String.format(\"%s: %s - %s\\n\", block.getName(), block.getStart(), block.getEnd()));\n        }\n        return sb.toString();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "listSegments", "index": 2775, "label": 0}
{"input": "public Program getCurrentProgram() {\n        ProgramManager programManager = tool.getService(ProgramManager.class);\n        return programManager != null ? programManager.getCurrentProgram() : null;\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "getCurrentProgram", "index": 2776, "label": 0}
{"input": "public FloatLiteralExpr(String number, Span span) {\n      super(span, null);\n      this.number = number;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "FloatLiteralExpr", "index": 2777, "label": 0}
{"input": "@Test\n  public void testGetWorkflowPropertiesSnapshot() throws Exception {\n    WorkflowDefinition wfd = loadWorkflow(TEST_WORKFLOW_ID1);\n    workflowDao.addWorkflowDefinition(wfd, wfd.getPropertiesSnapshot().extractProperties());\n    assertNotNull(wfd.getInternalId());\n    PropertiesSnapshot snapshot =\n        workflowDao.getWorkflowPropertiesSnapshot(TEST_WORKFLOW_ID1, \"latest\");\n    assertEquals(TEST_WORKFLOW_ID1, snapshot.getWorkflowId());\n    assertEquals(RunStrategy.Rule.PARALLEL, snapshot.getRunStrategy().getRule());\n    assertEquals(20, snapshot.getRunStrategy().getWorkflowConcurrency());\n    assertEquals(20, snapshot.getStepConcurrency().longValue());\n    assertEquals(1, snapshot.getAlerting().getTct().getCompletedByHour().intValue());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowDaoTest.java", "function_name": "testGetWorkflowPropertiesSnapshot", "index": 2778, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testCallTimeoutForDateIntDeadlineInvalidInput() {\n    SelUtilFunc.INSTANCE.call(\n        \"timeoutForDateIntDeadline\",\n        new SelType[] {SelString.of(\"2019010101\"), SelString.of(\"1 day\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallTimeoutForDateIntDeadlineInvalidInput", "index": 2779, "label": 0}
{"input": "private boolean jj_3_6() {\n    if (jj_scan_token(LBRACKET)) return true;\n    if (jj_3R_21()) return true;\n    if (jj_scan_token(RBRACKET)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3_6", "index": 2780, "label": 0}
{"input": "public long getInitialMaintenanceDelayInMillis() {\n    return getLongProperty(\n        INITIAL_MAINTENANCE_DELAY_PROPERTY_NAME, INITIAL_MAINTENANCE_DELAY_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getInitialMaintenanceDelayInMillis", "index": 2781, "label": 0}
{"input": "@Test\n  public void testRoundTripSerdeFixedDelay() throws Exception {\n    RetryPolicy retryPolicy =\n        loadObject(\"fixtures/retry_policy/sample-retry-fixed-delay-policy.json\", RetryPolicy.class);\n    assertEquals(\n        retryPolicy, MAPPER.readValue(MAPPER.writeValueAsString(retryPolicy), RetryPolicy.class));\n    assertEquals(RetryPolicy.BackoffPolicyType.FIXED_BACKOFF, retryPolicy.getBackoff().getType());\n    assertEquals(\n        ERROR_RETRY_DELAY_SECS,\n        ((RetryPolicy.FixedBackoff) retryPolicy.getBackoff()).getErrorRetryBackoffInSecs());\n    assertEquals(\n        PLATFORM_RETRY_DELAY_SECS,\n        ((RetryPolicy.FixedBackoff) retryPolicy.getBackoff()).getPlatformRetryBackoffInSecs());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/RetryPolicyTest.java", "function_name": "testRoundTripSerdeFixedDelay", "index": 2782, "label": 0}
{"input": "private MaestroWorkflowVersion maestroWorkflowVersionFromResult(ResultSet rs)\n      throws SQLException {\n    return MaestroWorkflowVersion.builder()\n        .metadata(convertJson(rs.getString(METADATA_COLUMN), Metadata.class))\n        .definition(convertJson(rs.getString(DEFINITION_COLUMN), Workflow.class))\n        .triggerUuids(convertJson(rs.getString(TRIGGER_UUIDS_COLUMN), TriggerUuids.class))\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowDao.java", "function_name": "maestroWorkflowVersionFromResult", "index": 2783, "label": 0}
{"input": "private MaestroStepInstanceActionDao prepareActionDaoForBypassDependencies(long timeout) {\n    setupStepInstanceForBypassDependencies();\n    return getSpyActionDao(timeout);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "6080d88d30c6be90a75b9afaf6be2985c742cbec", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepInstanceActionDaoTest.java", "function_name": "prepareActionDaoForBypassDependencies", "index": 2784, "label": 0}
{"input": "@Override\n\tpublic boolean support(NodeType nodeType) {\n\t\treturn NodeType.BRANCH.equals(nodeType);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "869092459902221b156926f54eac86afdd48b375", "file_path": "spring-ai-alibaba-graph/spring-ai-alibaba-graph-studio/src/main/java/com/alibaba/cloud/ai/service/generator/workflow/sections/BranchNodeSection.java", "function_name": "support", "index": 2785, "label": 0}
{"input": "public String generateSql(List<String> evidenceList, String query, SchemaDTO schemaDTO) throws Exception {\n\t\treturn generateSql(evidenceList, query, schemaDTO, null, null);\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseNl2SqlService.java", "function_name": "generateSql", "index": 2786, "label": 0}
{"input": "@Test\n  public void testCallTimeoutForDateIntDeadline() {\n    SelType res =\n        SelUtilFunc.INSTANCE.call(\n            \"timeoutForDateIntDeadline\",\n            new SelType[] {SelString.of(\"20190101\"), SelString.of(\"1 day\")});\n    assertEquals(\"STRING: 1546387187655 milliseconds\", res.type() + \": \" + res.toString());\n    res =\n        SelUtilFunc.INSTANCE.call(\n            \"timeoutForDateIntDeadline\",\n            new SelType[] {SelLong.of(20190101), SelString.of(\"1 day\")});\n    assertEquals(\"STRING: 1546387187655 milliseconds\", res.type() + \": \" + res.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelUtilFuncTest.java", "function_name": "testCallTimeoutForDateIntDeadline", "index": 2787, "label": 0}
{"input": "public static JSONObject downloadVideo(String appId, String xml){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"xml\",xml);\r\n        return OkhttpUtil.postJSON(\"/message/downloadVideo\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/DownloadApi.java", "function_name": "downloadVideo", "index": 2788, "label": 0}
{"input": "private Optional<Map<String, ParamDefinition>> getStepRunParams(\n      WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n    if (runtimeSummary.getStepRunParams() != null) {\n      return Optional.of(runtimeSummary.getStepRunParams());\n    } else if (workflowSummary.getStepRunParams() != null\n        && workflowSummary.getStepRunParams().containsKey(runtimeSummary.getStepId())) {\n      return Optional.of(workflowSummary.getStepRunParams().get(runtimeSummary.getStepId()));\n    } else {\n      return Optional.empty();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getStepRunParams", "index": 2789, "label": 0}
{"input": "private void jjCheckNAddStates(int start, int end) {\n    do {\n      jjCheckNAdd(jjnextStates[start]);\n    } while (start++ != end);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParserTokenManager.java", "function_name": "jjCheckNAddStates", "index": 2790, "label": 0}
{"input": "private void shutdownScheduler() {\n        if (scheduler != null && !scheduler.isShutdown()) {\n            scheduler.shutdown();\n            try {\n                if (!scheduler.awaitTermination(500, TimeUnit.MILLISECONDS)) {\n                    scheduler.shutdownNow();\n                }\n            } catch (InterruptedException e) {\n                scheduler.shutdownNow();\n                Thread.currentThread().interrupt();\n                Log.e(TAG, \"Scheduler termination interrupted\", e);\n            }\n        }\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "9e764c3cdf47f8726f4312638f875fe4ad14ab4e", "file_path": "app/src/main/java/org/bepass/oblivion/OblivionVpnService.java", "function_name": "shutdownScheduler", "index": 2791, "label": 0}
{"input": "private GeneratorMemberNode[] doVisitForWhenBody(ObjectBody body) {\n    if (!body.getParameters().isEmpty()) {\n      throw exceptionBuilder()\n          .evalError(\"forWhenBodyCannotHaveParameters\")\n          .withSourceSection(createSourceSection(body.getParameters().get(0)))\n          .build();\n    }\n    return doVisitGeneratorMemberNodes(body.getMembers());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitForWhenBody", "index": 2792, "label": 0}
{"input": "@Bean\n  public org.springframework.validation.Validator validatorFactory() {\n    \n    LOG.info(\"Creating validatorFactory within Spring boot...\");\n    return new LocalValidatorFactoryBean();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "validatorFactory", "index": 2793, "label": 0}
{"input": "private List<TimeTriggerWithWatermark> generateTriggers(\n      String cronExpression, String triggerTs, String timezone, ParsableLong maxDelay) {\n    return List.of(generateTrigger(cronExpression, triggerTs, timezone, maxDelay));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "generateTriggers", "index": 2794, "label": 0}
{"input": "public SubMessage1OrBuilder getMessage1OrBuilder() {\n                if (message1Builder_ != null) {\n                    return message1Builder_.getMessageOrBuilder();\n                } else {\n                    return message1_ == null ?\n                            SubMessage1.getDefaultInstance() : message1_;\n                }\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getMessage1OrBuilder", "index": 2795, "label": 0}
{"input": "public static int getExpandColumn(GenTable genTable) {\n    String options = genTable.getOptions();\n    Dict paramsObj = JsonUtils.parseMap(options);\n    String treeName = paramsObj.getStr(GenConstants.TREE_NAME);\n    int num = 0;\n    for (GenTableColumn column : genTable.getColumns()) {\n      if (column.isList()) {\n        num++;\n        String columnName = column.getColumnName();\n        if (columnName.equals(treeName)) {\n          break;\n        }\n      }\n    }\n    return num;\n  }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "dc9bf3e25d2bfeb736fc9801363cee9fea99910d", "file_path": "ruoyi-modules/ruoyi-generator/src/main/java/org/ruoyi/generator/util/VelocityUtils.java", "function_name": "getExpandColumn", "index": 2796, "label": 0}
{"input": "private ExpressionNode doVisitSetLiteral(Expr expr, ArgumentList argList) {\n    var elementNodes = createCollectionArgumentNodes(argList);\n\n    if (elementNodes.first.length == 0) {\n      return new ConstantValueNode(VmSet.EMPTY);\n    }\n\n    return elementNodes.second\n        ? new ConstantValueNode(\n            createSourceSection(expr), VmSet.createFromConstantNodes(elementNodes.first))\n        : new SetLiteralNode(createSourceSection(expr), elementNodes.first);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitSetLiteral", "index": 2797, "label": 0}
{"input": "public static HttpClient getHttpClient(boolean ignoreSSL, ProxySelector proxySelector) {\n        Methanol.Builder builder = Methanol\n                .newBuilder()\n                .followRedirects(HttpClient.Redirect.ALWAYS)\n                .connectTimeout(Duration.of(10, ChronoUnit.SECONDS))\n                .headersTimeout(Duration.of(15, ChronoUnit.SECONDS), CommonUtil.getScheduler())\n                .readTimeout(Duration.of(30, ChronoUnit.SECONDS), CommonUtil.getScheduler())\n                .cookieHandler(cookieManager);\n        if (ignoreSSL) {\n            builder.sslContext(ignoreSslContext);\n        }\n        if (proxySelector != null) {\n            builder.proxy(proxySelector);\n        }\n        return builder.build();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "b517576659c38ab1fccc76e54c6852a001898801", "file_path": "src/main/java/com/ghostchu/peerbanhelper/util/HTTPUtil.java", "function_name": "getHttpClient", "index": 2798, "label": 0}
{"input": "List<String> idsFromResult(ResultSet result, int version) throws SQLException {\n    List<String> ids = new ArrayList<>();\n    while (result.next()) {\n      if (version < 0 || version == result.getInt(VERSION_COLUMN)) {\n        ids.add(result.getString(ID_COLUMN));\n      }\n    }\n    return ids;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "idsFromResult", "index": 2799, "label": 0}
{"input": "public List<TypeAlias> getTypeAliases() {\n    var res = new ArrayList<TypeAlias>();\n    for (var child : children) {\n      if (child instanceof TypeAlias typeAlias) {\n        res.add(typeAlias);\n      }\n    }\n    return res;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Module.java", "function_name": "getTypeAliases", "index": 2800, "label": 0}
{"input": "@Test\n\t@DisplayName(\"Tool-Calling Test\")\n\t@EnabledIfEnvironmentVariable(named = Kuaidi100Constants.APP_ID_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\t@EnabledIfEnvironmentVariable(named = Kuaidi100Constants.API_KEY_ENV,\n\t\t\tmatches = CommonToolCallConstants.NOT_BLANK_REGEX)\n\tvoid testKuaidi100() {\n\t\tKuaidi100Service.QueryTrackResponse resp = kuaidi100Service\n\t\t\t.apply(new Kuaidi100Service.Request(\"YT2237659878059\"));\n\t\tlogger.info(\"kuaidi100 result: {}\", resp);\n\t\tAssertions.assertNotNull(resp, \"response body should not be null!\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "b5fde36b77e3a52de34ab5ae86465681c978fc37", "file_path": "community/tool-calls/spring-ai-alibaba-starter-tool-calling-kuaidi100/src/test/java/com/alibaba/cloud/ai/toolcalling/kuaidi100/Kuaidi100Test.java", "function_name": "testKuaidi100", "index": 2801, "label": 0}
{"input": "private void flywayMigrate(DataSource dataSource) {\n    boolean enabled = configuration.isFlywayEnabled();\n    if (!enabled) {\n      logger.debug(\"Flyway migrations are disabled\");\n      return;\n    }\n\n    Flyway flyway =\n        Flyway.configure()\n            .dataSource(dataSource)\n            .placeholderReplacement(false)\n            .baselineOnMigrate(configuration.isFlywayBaseLineMigrationEnabled())\n            .load();\n\n    flyway.migrate();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/CockroachDBDataSourceProvider.java", "function_name": "flywayMigrate", "index": 2802, "label": 0}
{"input": "private static TrustManager[] buildTrustManagers() {\r\n        return new TrustManager[]{\r\n                new X509TrustManager() {\r\n                    @Override\r\n                    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\r\n                    }\r\n\r\n                    @Override\r\n                    public void checkServerTrusted(X509Certificate[] chain, String authType) {\r\n                    }\r\n\r\n                    @Override\r\n                    public X509Certificate[] getAcceptedIssuers() {\r\n                        return new X509Certificate[]{};\r\n                    }\r\n                }\r\n        };\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/util/OkhttpUtil.java", "function_name": "buildTrustManagers", "index": 2803, "label": 0}
{"input": "@Bean\n  public StepSyncManager stepSyncManager(\n      MaestroStepInstanceDao instanceDao, MaestroJobEventPublisher publisher) {\n    LOG.info(\"Creating Maestro StepSyncManager within Spring boot...\");\n    return new StepSyncManager(instanceDao, publisher);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "stepSyncManager", "index": 2804, "label": 0}
{"input": "@Test\n  public void testTerminateRoundTripSerde() throws Exception {\n    StepAction expected = loadObject(\"fixtures/db/sample-step-action-stop.json\", StepAction.class);\n    String ser1 = MAPPER.writeValueAsString(expected);\n    StepAction actual = MAPPER.readValue(MAPPER.writeValueAsString(expected), StepAction.class);\n    String ser2 = MAPPER.writeValueAsString(actual);\n    assertEquals(expected, actual);\n    assertEquals(ser1, ser2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/db/StepActionTest.java", "function_name": "testTerminateRoundTripSerde", "index": 2805, "label": 0}
{"input": "@Test\n  public void testGetNotCreatedRootNodesInRestartRuntimeDag() {\n    RestartConfig config =\n        RestartConfig.builder().addRestartNode(\"sample-dag-test-1\", 1, \"job_3\").build();\n    Set<String> actual = DagHelper.getNotCreatedRootNodesInRestartRuntimeDag(runtimeDag1, config);\n    Assert.assertEquals(Collections.singleton(\"job_9\"), actual);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testGetNotCreatedRootNodesInRestartRuntimeDag", "index": 2806, "label": 0}
{"input": "protected GeneratorEntryNode(ExpressionNode keyNode, ObjectMember member, boolean isFrameStored) {\n    super(member.getSourceSection(), isFrameStored);\n    this.keyNode = keyNode;\n    this.member = member;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorEntryNode.java", "function_name": "GeneratorEntryNode", "index": 2807, "label": 0}
{"input": "public int dequeueWithRunStrategy(@NotNull String workflowId, @NotNull RunStrategy runStrategy) {\n    return withMetricLogError(\n        () -> {\n          switch (runStrategy.getRule()) {\n            case SEQUENTIAL:\n            case PARALLEL:\n            case STRICT_SEQUENTIAL:\n              return dequeueWorkflowInstances(\n                  workflowId,\n                  runStrategy.getWorkflowConcurrency(),\n                  runStrategy.getRule() == RunStrategy.Rule.STRICT_SEQUENTIAL);\n            case FIRST_ONLY:\n            case LAST_ONLY:\n              return 0; \n            default:\n              throw new MaestroInternalError(\n                  \"When dequeue, run strategy [%s] hasn't been implemented yet\", runStrategy);\n          }\n        },\n        \"runWithStrategy\",\n        \"Failed to run workflow [{}] with run strategy [{}]\",\n        workflowId,\n        runStrategy);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "dequeueWithRunStrategy", "index": 2808, "label": 0}
{"input": "public final void VariableDeclaratorId() throws ParseException {\n    \n    ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(this, JJTVARIABLEDECLARATORID);\n    boolean jjtc000 = true;\n    jjtree.openNodeScope(jjtn000);\n    jjtn000.jjtSetFirstToken(getToken(1));\n    Token t;\n    try {\n      t = jj_consume_token(IDENTIFIER);\n      jjtree.closeNodeScope(jjtn000, true);\n      jjtc000 = false;\n      jjtn000.jjtSetLastToken(getToken(0));\n      jjtn000.value = t.image;\n    } finally {\n      if (jjtc000) {\n        jjtree.closeNodeScope(jjtn000, true);\n        jjtn000.jjtSetLastToken(getToken(0));\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "VariableDeclaratorId", "index": 2809, "label": 0}
{"input": "public String extractTitleFromPlan(String planJson) {\n\t\ttry {\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tJsonNode rootNode = mapper.readTree(planJson);\n\t\t\tif (rootNode.has(\"title\")) {\n\t\t\t\treturn rootNode.get(\"title\").asText(\"Untitled Plan\");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Failed to extract title from plan JSON\", e);\n\t\t}\n\t\treturn \"Untitled Plan\";\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14d1fa74405b5ce6183e19c1e3aaa779873b9776", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/service/PlanTemplateService.java", "function_name": "extractTitleFromPlan", "index": 2810, "label": 0}
{"input": "private ObjectMember.ObjectElement parseObjectElement() {\n    var expr = parseExpr(\"}\");\n    return new ObjectMember.ObjectElement(expr, expr.span());\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseObjectElement", "index": 2811, "label": 0}
{"input": "@Test\n  public void testPushWithNegativeDelay() {\n    timeTriggerProducer.push(execution, -100);\n    verify(amazonSqs, times(1)).sendMessage(any());\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_TIME_TRIGGER_PUBLISH_SUCCESS_METRIC,\n                SqsTimeTriggerProducer.class,\n                \"withDelay\",\n                \"false\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/producer/SqsTimeTriggerProducerTest.java", "function_name": "testPushWithNegativeDelay", "index": 2812, "label": 0}
{"input": "public static ObjectMapper objectMapper() {\n    final ObjectMapper mapper = new ObjectMapper();\n    configureMapper(mapper);\n    return mapper;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/JsonHelper.java", "function_name": "objectMapper", "index": 2813, "label": 0}
{"input": "public static JSONObject postEmoji(String appId, String toWxid, String emojiMd5, String emojiSize) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"toWxid\", toWxid);\r\n        param.put(\"emojiMd5\", emojiMd5);\r\n        param.put(\"emojiSize\", emojiSize);\r\n        return OkhttpUtil.postJSON(\"/message/postEmoji\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/MessageApi.java", "function_name": "postEmoji", "index": 2814, "label": 0}
{"input": "@Test\n  public void testIsRunning() {\n    assertTrue(groupActor.isRunning());\n    assertTrue(flowActor.isRunning());\n\n    flowActor.terminateNow();\n    assertTrue(groupActor.isRunning());\n    assertFalse(flowActor.isRunning());\n\n    var actor3 = new FlowActor(createFlow(), groupActor, context);\n    assertTrue(groupActor.isRunning());\n    assertTrue(actor3.isRunning());\n\n    groupActor.terminateNow();\n    assertFalse(groupActor.isRunning());\n    assertFalse(actor3.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testIsRunning", "index": 2815, "label": 0}
{"input": "@JsonIgnore\n  @Override\n  public <T> T getEvaluatedResult() {\n    return parameter.getEvaluatedResult();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/SignalParameter.java", "function_name": "getEvaluatedResult", "index": 2816, "label": 0}
{"input": "@Test\n  public void testInvalidToDecimalArray() {\n    AssertHelper.assertThrows(\n        \"Invalid number format\",\n        MaestroInternalError.class,\n        \"Invalid number format for value: [true, 5.6]\",\n        () -> ParamHelper.toDecimalArray(\"foo\", Arrays.asList(true, 5.6)));\n\n    AssertHelper.assertThrows(\n        \"Invalid number format\",\n        MaestroInternalError.class,\n        \"Invalid number format for value: [3.4abc, 5.6]\",\n        () -> ParamHelper.toDecimalArray(\"foo\", Arrays.asList(\"3.4abc\", 5.6)));\n\n    AssertHelper.assertThrows(\n        \"Invalid number format\",\n        MaestroInternalError.class,\n        \"Invalid number format for value: [null, 5.6]\",\n        () -> ParamHelper.toDecimalArray(\"foo\", Arrays.asList(null, 5.6)));\n\n    AssertHelper.assertThrows(\n        \"Invalid number format\",\n        MaestroInternalError.class,\n        \"Invalid number format for value: [true, 5.6]\"1,\n        () -> ParamHelper.toDecimalArray(\"foo\", null));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/utils/ParamHelperTest.java", "function_name": "testInvalidToDecimalArray", "index": 2817, "label": 0}
{"input": "public static String decompress(byte[] compressedData) {\r\n        try (ByteArrayInputStream byteIn = new ByteArrayInputStream(compressedData);\r\n             BufferedInputStream bufferedIn = new BufferedInputStream(byteIn);\r\n             BlockLZ4CompressorInputStream lz4In = new BlockLZ4CompressorInputStream(bufferedIn)) {\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n            byte[] buffer = new byte[4096];\r\n            int n;\r\n            while ((n = lz4In.read(buffer)) != -1) {\r\n                String chunk = new String(buffer, 0, n, StandardCharsets.UTF_8);\r\n                sb.append(chunk);\r\n            }\r\n\r\n            \n            if (sb.length() > 0) {\r\n                sb.deleteCharAt(sb.length() - 1);\r\n            }\r\n            return sb.toString();\r\n        } catch (Exception e) {\r\n            log.error(\"LZ4解压数据失败\", e);\r\n        }\r\n        return null;\r\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/util/LZ4Util.java", "function_name": "decompress", "index": 2818, "label": 0}
{"input": "public static <T> ResponseVO<T> ok(T data, Long page, Long total) {\n        ResponseVO<T> wrapper = new ResponseVO();\n        wrapper.setSuccess(true);\n        wrapper.setData(data);\n        wrapper.setPage(page);\n        wrapper.setTotal(total);\n        return wrapper;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/domain/vo/ResponseVO.java", "function_name": "ok", "index": 2819, "label": 0}
{"input": "@Test\n  public void testGetFromSignalForDryRunValidatorWithInvalidSignal() {\n    SignalTrigger signalTrigger = new SignalTrigger();\n    signalTrigger.setDefinition(Collections.singletonMap(\"signal-name\", Collections.emptyMap()));\n    extensionRepo.reset(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        InstanceWrapper.builder()\n            .initiator(new DryRunValidator.ValidationInitiator())\n            .signalTriggers(Collections.singletonList(signalTrigger))\n            .build());\n\n    AssertHelper.assertThrows(\n        \"cannot get non-existing signal\",\n        MaestroInvalidExpressionException.class,\n        \"Expression evaluation throws an exception\",\n        () ->\n            exprEvaluator.eval(\n                \"return params.getFromSignal('signal-not-existing', 'param-name');\",\n                Collections.emptyMap()));\n    extensionRepo.clear();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorWithParamExtensionTest.java", "function_name": "testGetFromSignalForDryRunValidatorWithInvalidSignal", "index": 2820, "label": 0}
{"input": "public DocComment(List<Span> spans) {\n    super(spans.get(0).endWith(spans.get(spans.size() - 1)), null);\n    this.spans = spans;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/DocComment.java", "function_name": "DocComment", "index": 2821, "label": 0}
{"input": "public String getReportFilePath(String threadId, String format) {\n\t\tif (!isSupportedFormat(format)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString extension = \"markdown\".equals(format) || \"md\".equals(format) ? \"md\" : format;\n\t\tString filename = FileOperationUtil.generateFilename(threadId, extension);\n\t\treturn basePath + File.separator + filename;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/service/ExportService.java", "function_name": "getReportFilePath", "index": 2822, "label": 0}
{"input": "private boolean isWindows() {\n\t\tString os = System.getProperty(\"os.name\").toLowerCase();\n\t\tlogger.debug(\"Current operating system: {}\", os);\n\t\treturn os.contains(\"win\");\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/config/McpServerConfigurationLoader.java", "function_name": "isWindows", "index": 2823, "label": 0}
{"input": "@Test\n  public void testBooleanArrayParameter() {\n    BooleanArrayParameter param =\n        BooleanArrayParameter.builder()\n            .name(\"booleanArrayParam\")\n            .expression(\"return [true];\")\n            .evaluatedResult(new boolean[] {true})\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asBooleanArrayParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testBooleanArrayParameter", "index": 2824, "label": 0}
{"input": "@Test\n  public void testAddStepBreakpointForAllWorkflowVersionsInvalid() {\n    when(workflowDao.getWorkflowDefinition(anyString(), anyString())).thenReturn(wfd);\n    AssertHelper.assertThrows(\n        \"invalid step\",\n        MaestroBadRequestException.class,\n        \"Breakpoint can't be set as stepId [non-exist] is not present for the workflowId\"\n            + \" [sample-active-wf-with-props]\",\n        () ->\n            maestroStepBreakpointDao.addStepBreakpoint(\n                TEST_WORKFLOW_ID1,\n                Constants.MATCH_ALL_WORKFLOW_VERSIONS,\n                Constants.MATCH_ALL_WORKFLOW_INSTANCES,\n                Constants.MATCH_ALL_RUNS,\n                TEST_NON_EXIST_STEP_ID,\n                Constants.MATCH_ALL_RUNS,\n                TEST_USER));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDaoTest.java", "function_name": "testAddStepBreakpointForAllWorkflowVersionsInvalid", "index": 2825, "label": 0}
{"input": "private void prepareStopInstanceStatement(\n      PreparedStatement wfiStmt, WorkflowInstance instance, TimelineEvent timelineEvent)\n      throws SQLException {\n    int idx = 0;\n    wfiStmt.setString(++idx, toJson(instance));\n    wfiStmt.setString(++idx, WorkflowInstance.Status.STOPPED.name());\n    wfiStmt.setTimestamp(++idx, new Timestamp(instance.getCreateTime()));\n    wfiStmt.setTimestamp(++idx, new Timestamp(instance.getCreateTime()));\n    wfiStmt.setString(++idx, toJson(timelineEvent));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "prepareStopInstanceStatement", "index": 2826, "label": 0}
{"input": "private void reset() {\n        languageFilesManager.reset();\n        postProcessors.clear();\n        availableLanguages.clear();\n        loadedLanguages.clear();\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "00640fe4d10cb62782952a75d392f5ca0b48d193", "file_path": "src/main/java/com/ghostchu/peerbanhelper/text/TextManager.java", "function_name": "reset", "index": 2827, "label": 0}
{"input": "public PlanFinalizer(LlmService llmService, PlanExecutionRecorder recorder, PromptLoader promptLoader) {\n\t\tthis.llmService = llmService;\n\t\tthis.recorder = recorder;\n\t\tthis.promptLoader = promptLoader;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/finalizer/PlanFinalizer.java", "function_name": "PlanFinalizer", "index": 2828, "label": 0}
{"input": "@JsonAnySetter\n  public void addPayload(String key, Object value) {\n    this.payload.put(key, value);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/api/SignalCreateRequest.java", "function_name": "addPayload", "index": 2829, "label": 0}
{"input": "private void jj_save(int index, int xla) {\n    JJCalls p = jj_2_rtns[index];\n    while (p.gen > jj_gen) {\n      if (p.next == null) {\n        p = p.next = new JJCalls();\n        break;\n      }\n      p = p.next;\n    }\n    p.gen = jj_gen + xla - jj_la;\n    p.first = token;\n    p.arg = xla;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_save", "index": 2830, "label": 0}
{"input": "default void summarizeToPath(List<TestResults> allTestResults, Path path) throws IOException {\n    try (var writer = new FileWriter(path.toFile(), StandardCharsets.UTF_8)) {\n      summarize(allTestResults, writer);\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "3bd8a8850672c066c24d566f8ab41bf9a9320a3b", "file_path": "pkl-core/src/main/java/org/pkl/core/stdlib/test/report/TestReport.java", "function_name": "summarizeToPath", "index": 2831, "label": 0}
{"input": "@Test\n  public void testCallGetFromStep() {\n    assertEquals(\n        SelString.of(\"hello\"),\n        extension.call(\"getFromStep\", new SelType[] {SelString.of(\"foo\"), SelString.of(\"bar\")}));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallGetFromStep", "index": 2832, "label": 0}
{"input": "public static JSONObject a(String appId){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        return OkhttpUtil.postJSON(\"/login/checkOnline\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/ContactApi.java", "function_name": "a", "index": 2833, "label": 0}
{"input": "@Test\n  public void testCheckShutdownWithChildRunning() {\n    var future = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future);\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    assertTrue(groupActor.isRunning());\n    assertTrue(flowActor.isRunning());\n\n    flowActor.schedule(Action.FLOW_REFRESH, 10000);\n    assertEquals(Set.of(Action.FLOW_REFRESH), flowActor.getScheduledActions().keySet());\n\n    assertFalse(groupActor.checkShutdown());\n    verify(future, times(0)).cancel(true);\n    assertTrue(groupActor.isRunning());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testCheckShutdownWithChildRunning", "index": 2834, "label": 0}
{"input": "public boolean existWorkflowIdInInstances(String workflowId) {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                CHECK_WORKFLOW_ID_IN_INSTANCES_QUERY,\n                stmt -> stmt.setString(1, workflowId),\n                ResultSet::next),\n        \"existWorkflowIdInInstances\",\n        \"Failed to check the existence of the workflow instance for workflow id [{}]\",\n        workflowId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDao.java", "function_name": "existWorkflowIdInInstances", "index": 2835, "label": 0}
{"input": "public long getExpirationDurationInMillis() {\n    return getLongProperty(EXPIRATION_DURATION_PROPERTY_NAME, EXPIRATION_DURATION_DEFAULT_VALUE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9ff95edece16eb7de8ef6d3f7df720034dfe354a", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/properties/FlowEngineProperties.java", "function_name": "getExpirationDurationInMillis", "index": 2836, "label": 0}
{"input": "@Test\n  public void testGetFromSignalForDryRunValidator() {\n    SignalTrigger signalTrigger = new SignalTrigger();\n    signalTrigger.setDefinition(Collections.singletonMap(\"signal-name\", Collections.emptyMap()));\n    extensionRepo.reset(\n        Collections.emptyMap(),\n        Collections.emptyMap(),\n        InstanceWrapper.builder()\n            .initiator(new DryRunValidator.ValidationInitiator())\n            .signalTriggers(Collections.singletonList(signalTrigger))\n            .build());\n\n    Assert.assertEquals(\n        MaestroParamExtension.DUMMY_VALIDATION_VALUE,\n        exprEvaluator.eval(\n            \"return params.getFromSignal('signal-name', 'param-name');\", Collections.emptyMap()));\n    extensionRepo.clear();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/ExprEvaluatorWithParamExtensionTest.java", "function_name": "testGetFromSignalForDryRunValidator", "index": 2837, "label": 0}
{"input": "public static JSONObject deleteFriend(String appId,String wxid){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxid\",wxid);\r\n        return OkhttpUtil.postJSON(\"/contacts/deleteFriend\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/ContactApi.java", "function_name": "deleteFriend", "index": 2838, "label": 0}
{"input": "private String getAvatar(String wxId) {\n        DynamicDataSourceContextHolder.push(wxId + \"#\" + DataSourceType.MICRO_MSG_DB);\n        String avatar = contactHeadImgUrlRepository.queryHeadImgUrlByUserName(wxId);\n        DynamicDataSourceContextHolder.clear();\n        return avatar;\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "7c35aea944689d83bb7d0f97ff5ee4824d8b6862", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "getAvatar", "index": 2839, "label": 0}
{"input": "@Test(expected = IllegalStateException.class)\n  public void testVisitOverLimit() throws Exception {\n    visitor = new SelParserEvaluationVisitor(128, 10000, 10000, 10);\n    run(\"j=0; for (i = 0; i < 100; i += 1) j+=1; return j;\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelParserEvaluationVisitorTest.java", "function_name": "testVisitOverLimit", "index": 2840, "label": 0}
{"input": "public @Nullable ExtendsOrAmendsClause getExtendsOrAmendsDecl() {\n    return (ExtendsOrAmendsClause) children.get(nameOffset + 1);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ModuleDecl.java", "function_name": "getExtendsOrAmendsDecl", "index": 2841, "label": 0}
{"input": "private ToolCallback[] getMcpToolCallbacks(String agentName) {\n\t\tif (node2AsyncMcpToolCallbackProvider != null) {\n\t\t\tAsyncMcpToolCallbackProvider provider = node2AsyncMcpToolCallbackProvider.get(agentName);\n\t\t\tif (provider != null) {\n\t\t\t\treturn provider.getToolCallbacks();\n\t\t\t}\n\t\t}\n\t\treturn new ToolCallback[0];\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cbed5bdb8a096b49ce533dee99795750da26fd10", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/agents/AgentsConfiguration.java", "function_name": "getMcpToolCallbacks", "index": 2842, "label": 0}
{"input": "public @Nullable ArgumentList getArgumentList() {\n      return (ArgumentList) children.get(1);\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "getArgumentList", "index": 2843, "label": 0}
{"input": "public List<Expr> getExprs() {\n      return (List<Expr>) children.subList(1, children.size());\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Type.java", "function_name": "getExprs", "index": 2844, "label": 0}
{"input": "public ExecutionContext(\n      Map<String, FlowTask> flowTaskMap,\n      FinalFlowStatusCallback finalCallback,\n      ExecutionPreparer executionPreparer,\n      MaestroFlowDao flowDao,\n      FlowEngineProperties properties,\n      MaestroMetrics metrics) {\n    this.flowTaskMap = flowTaskMap;\n    this.finalCallback = finalCallback;\n    this.executionPreparer = executionPreparer;\n    this.flowDao = flowDao;\n    this.properties = properties;\n    this.metrics = metrics;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/ExecutionContext.java", "function_name": "ExecutionContext", "index": 2845, "label": 0}
{"input": "@Test\n  public void testTriggerExpiredError() {\n    ArrayList<PlannedTimeTriggerExecution> plannedList = new ArrayList<>();\n    plannedList.add(new PlannedTimeTriggerExecution(null, null));\n    when(executionPlanner.calculatePlannedExecutions(any(), any(), any())).thenReturn(plannedList);\n    Mockito.doThrow(new MaestroResourceConflictException(\"TriggerUUID Expired\"))\n        .when(workflowLauncher)\n        .startWorkflowBatchRuns(any(), Mockito.eq(\"ACTIVE\"), any(), any());\n\n    processor.process(() -> message);\n    Mockito.verifyNoInteractions(triggerProducer);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/messageprocessors/TimeTriggerExecutionProcessorTest.java", "function_name": "testTriggerExpiredError", "index": 2846, "label": 0}
{"input": "private static void putWriteStringConverter(Converter<?> converter) {\n        defaultWriteConverter.put(\n                ConverterKeyBuild.buildKey(converter.supportJavaTypeKey(), converter.supportExcelTypeKey()), converter);\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/converters/DefaultConverterLoader.java", "function_name": "putWriteStringConverter", "index": 2847, "label": 0}
{"input": "@ExceptionHandler(value = {MaestroInvalidStatusException.class})\n  protected ResponseEntity<Object> handleMaestroInvalidStatusException(\n      MaestroInvalidStatusException e, WebRequest request) {\n    LOG.info(\"Handle MaestroInvalidStatusException with a message: {}\", e.getMessage());\n    return buildDetailedResponse(\n        e, e.getErrors(), HttpStatus.valueOf(e.getHttpStatusCode()), request);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/handlers/MaestroRestExceptionHandler.java", "function_name": "handleMaestroInvalidStatusException", "index": 2848, "label": 0}
{"input": "InvokeMethodLexicalNode(\n      SourceSection sourceSection,\n      CallTarget callTarget,\n      int levelsUp,\n      ExpressionNode[] argumentNodes) {\n\n    super(sourceSection);\n    this.levelsUp = levelsUp;\n    this.argumentNodes = argumentNodes;\n\n    callNode = DirectCallNode.create(callTarget);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/member/InvokeMethodLexicalNode.java", "function_name": "InvokeMethodLexicalNode", "index": 2849, "label": 0}
{"input": "@Test\n  public void testCalculateEarliestExecutionDateMultiple() {\n    var triggers =\n        List.of(\n            generateTrigger(\"0 30 2 7 12 ? 2021\", \"2022-01-01T00:00:00-00:00\", US_PACIFIC, null),\n            generateTrigger(\"5 2 * * *\", \"2021-05-17T00:00:00-07:00\", US_PACIFIC, null),\n            generateTrigger(\"5,15 2,3 * * *\", \"2021-05-18T00:00:00-07:00\", US_PACIFIC, null));\n    Optional<Date> earliestDate =\n        executionPlanner.calculateEarliestExecutionDate(triggers, \"test-workflow\");\n    assertEquals(parseDate(\"2021-05-17T02:05:00-07\"), earliestDate.get());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculateEarliestExecutionDateMultiple", "index": 2850, "label": 0}
{"input": "@Test\n  public void testMergeDisallowLessRestrictiveMode() throws JsonProcessingException {\n    Map<String, ParamDefinition> allParams =\n        parseParamDefMap(\n            \"{'tomerge': {'type': 'STRING','value': 'hello', 'mode': 'MUTABLE_ON_START'}}\");\n    Map<String, ParamDefinition> paramsToMerge =\n        parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye', 'mode': 'MUTABLE'}}\");\n\n    AssertHelper.assertThrows(\n        \"Should not allow setting to less strict mode\",\n        MaestroValidationException.class,\n        \"Cannot modify param mode to be less strict for parameter [tomerge] from [MUTABLE_ON_START] to [MUTABLE]\",\n        () -> ParamsMergeHelper.mergeParams(allParams, paramsToMerge, definitionContext));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeDisallowLessRestrictiveMode", "index": 2851, "label": 0}
{"input": "@Test\n  public void testDeleteWorkflowInLateStage() {\n    when(deletionDao.isDeletionInitialized(workflowId, 12345)).thenReturn(false);\n    processor.process(() -> jobEvent);\n    verify(eventClient, times(0)).send(any());\n    verify(deletionDao, times(1)).deleteWorkflowData(eq(workflowId), eq(12345L), anyLong());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/messageprocessors/DeleteWorkflowJobProcessorTest.java", "function_name": "testDeleteWorkflowInLateStage", "index": 2852, "label": 0}
{"input": "private void checkWithData(Object data, SelBaseNode node, String description) {\n    if (data != SelResult.DATA) {\n      throw new RuntimeException(\n          \"Error, the \"\n              + description\n              + \" { \"\n              + getSubTreeImage(node)\n              + \" } returns invalid result \"\n              + data);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelParserEvaluationVisitor.java", "function_name": "checkWithData", "index": 2853, "label": 0}
{"input": "@Test\n    public void hh2() throws IOException {\n        ExcelReader reader = EasyExcel.read(new FileInputStream(\"D:\\\\test\\\\sheet.xls\"), LockData.class,\n                new RepeatListener()).headRowNumber(0).build();\n        ReadSheet r2 = EasyExcel.readSheet(1).build();\n        reader.read(r2);\n        reader.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/RepeatTest.java", "function_name": "hh2", "index": 2854, "label": 0}
{"input": "@Test\n    public void genericHeaderTypeRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"generic-demo.xlsx\";\n        \n        Class<?> excelHeaderClass = DemoDataAnother.class;\n        EasyExcel.read(fileName, excelHeaderClass, GenericHeaderTypeDataListener.build(excelHeaderClass)).sheet().doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "f68e28241181105d7551523b5334b68a27ef610e", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "genericHeaderTypeRead", "index": 2855, "label": 0}
{"input": "private StepBreakpoint stepBreakpointFromResultSet(ResultSet rs) throws SQLException {\n    StepBreakpoint.StepBreakpointBuilder builder = StepBreakpoint.builder();\n    builder\n        .workflowId(rs.getString(WORKFLOW_ID))\n        .stepId(rs.getString(STEP_ID))\n        .createTime(getTimestampIfPresent(rs, CREATE_TS))\n        .createdBy(fromJson(rs.getString(\"created_by\"), User.class));\n    updateStepBreakpointBuilderWithMatchAllHelper(rs, builder);\n    return builder.build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepBreakpointDao.java", "function_name": "stepBreakpointFromResultSet", "index": 2856, "label": 0}
{"input": "private void saveData() {\n        log.info(\"{} rows of data, starting to save to the database!\", cachedDataList.size());\n        log.info(\"Data saved successfully to the database!\");\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "4e6111aeeb6c9a24c0b7fa208ec8ec9acf6719fa", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/DemoCompatibleHeaderDataListener.java", "function_name": "saveData", "index": 2857, "label": 0}
{"input": "@Test\n    public void simpleWrite3() {\n        \n        String fileName = TestFileUtil.getPath() + \"t33\" + System.currentTimeMillis() + \".xlsx\";\n        \n        \n        EasyExcel.write(fileName).head(head()).inMemory(true).sheet(\"模板\").registerWriteHandler(new WriteCellHandler())\n                .doWrite(data1());\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/Write.java", "function_name": "simpleWrite3", "index": 2858, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testInvalidAssignOp() {\n    SelString.of(\"foo\").assignOps(SelOp.MUL_ASSIGN, SelString.of(\"bar\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidAssignOp", "index": 2859, "label": 0}
{"input": "protected Map<String, Object> getTableMetadata(String tableName) {\n\t\tList<Document> tableDocuments = getTableDocuments(tableName);\n\t\tfor (Document doc : tableDocuments) {\n\t\t\tMap<String, Object> metadata = doc.getMetadata();\n\t\t\tif (tableName.equals(metadata.get(\"name\"))) {\n\t\t\t\treturn metadata;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseSchemaService.java", "function_name": "getTableMetadata", "index": 2860, "label": 0}
{"input": "public IntLiteralExpr(String number, Span span) {\n      super(span, null);\n      this.number = number;\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Expr.java", "function_name": "IntLiteralExpr", "index": 2861, "label": 0}
{"input": "@Test\n  public void testRunForActionTaskStart() {\n    taskActor.runForAction(Action.TASK_START);\n    verify(context, times(1)).start(any(), any());\n    verifyActions(taskActor, Action.TASK_PING);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/TaskActorTest.java", "function_name": "testRunForActionTaskStart", "index": 2862, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallUncastForeachReturn() {\n    new UncastParamExtension()\n        .call(\n            \"getFromForeach\",\n            new SelType[] {SelString.of(\"foo\"), SelString.of(\"bar\"), SelString.of(\"bat\")});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/ext/ParamExtensionTest.java", "function_name": "testCallUncastForeachReturn", "index": 2863, "label": 0}
{"input": "public Parameter getEvaluatedParam(String paramName) {\n    if (isEvaluated()) {\n      Object result =\n          Checks.notNull(\n              evaluatedResult.get(paramName),\n              \"Cannot find param name key [%s] in the map param [%s]\",\n              paramName,\n              getName());\n      Parameter param;\n      if (isLiteral()) { \n        param = value.get(paramName).toParameter();\n      } else { \n        param =\n            ParamHelper.deriveTypedParameter(\n                paramName, getExpression(), result, getTags(), getMode(), getMeta());\n      }\n      param.setEvaluatedResult(result);\n      param.setEvaluatedTime(getEvaluatedTime());\n      return param;\n    }\n    throw new MaestroInternalError(\n        \"Param [{}] is not evaluated and cannot call getEvaluatedParam()\", getName());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/MapParameter.java", "function_name": "getEvaluatedParam", "index": 2864, "label": 0}
{"input": "public RestoreForBindingsNode(ExpressionNode child) {\n    super(child.getSourceSection());\n    this.child = child;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/RestoreForBindingsNode.java", "function_name": "RestoreForBindingsNode", "index": 2865, "label": 0}
{"input": "@Test\n  public void testCalculatePlannedExecutionsUTC() {\n    var triggers = generateTriggers(\"5 2 * * *\", \"2021-05-17T00:00:00Z\", \"UTC\", null);\n    Date endDate = parseDate(triggers, Duration.ofDays(3));\n    List<PlannedTimeTriggerExecution> planned =\n        executionPlanner.calculatePlannedExecutions(triggers, endDate, \"test-workflow\");\n    assertEquals(\n        Arrays.asList(\"2021-05-16T19:05:00-07\", \"2021-05-17T19:05:00-07\", \"2021-05-18T19:05:00-07\"),\n        planned.stream().map(p -> strFormat(p.executionDate())).collect(Collectors.toList()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/test/java/com/netflix/maestro/timetrigger/utils/TimeTriggerExecutionPlannerTest.java", "function_name": "testCalculatePlannedExecutionsUTC", "index": 2866, "label": 0}
{"input": "@Test\n  public void testBuildNotebookParamsWithBackupPropsUser() {\n    workflowParams.remove(\"owner\");\n    String notebookParams =\n        notebookParamsBuilder.buildNotebookParams(workflowSummary, stepRuntimeSummary, null);\n    assertEquals(\n        \"{\\\"notebook\\\":{\\\"input_path\\\":\\\"owner/mynotebook.ipynb\\\",\\\"run_id\\\":\\\"MyWorkflow_123_2_mystepid_3\\\"},\\\"criticality\\\":\\\"medium\\\",\\\"attempt_number\\\":2,\\\"owner\\\":\\\"propsuser\\\"}\",\n        notebookParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilderTest.java", "function_name": "testBuildNotebookParamsWithBackupPropsUser", "index": 2867, "label": 0}
{"input": "private Optional<Map<String, ParamDefinition>> getUserStepRestartParam(\n      WorkflowSummary workflowSummary, StepRuntimeSummary runtimeSummary) {\n    RestartConfig stepRestartConfig =\n        ObjectHelper.valueOrDefault(\n            runtimeSummary.getRestartConfig(), workflowSummary.getRestartConfig());\n    String stepId = runtimeSummary.getStepId();\n    \n    if (stepRestartConfig != null\n        && stepRestartConfig.getRestartPath() != null\n        && stepRestartConfig.getRestartPath().size() == 1\n        && stepRestartConfig.getStepRestartParams() != null) {\n      return Optional.ofNullable(stepRestartConfig.getStepRestartParams().get(stepId));\n    }\n    return Optional.empty();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/params/ParamsManager.java", "function_name": "getUserStepRestartParam", "index": 2868, "label": 0}
{"input": "@Test\n  public void testCleanupAllNestedPresentParams() throws JsonProcessingException {\n    for (ParamMode mode : ParamMode.values()) {\n      Map<String, ParamDefinition> allParams =\n          parseParamDefMap(\n              String.format(\n                  \"{'map': {'type': 'MAP','value': {'present': {'type': 'STRING', 'mode': '%s', 'value': 'hello'}}}}\",\n                  mode.toString()));\n      Map<String, ParamDefinition> cleanedParams = ParamsMergeHelper.cleanupParams(allParams);\n      assertEquals(1, cleanedParams.get(\"map\").asMapParamDef().getValue().size());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testCleanupAllNestedPresentParams", "index": 2869, "label": 0}
{"input": "private String listDefinedData() {\n        Program program = getCurrentProgram();\n        StringBuilder sb = new StringBuilder();\n        for (MemoryBlock block : program.getMemory().getBlocks()) {\n            DataIterator it = program.getListing().getDefinedData(block.getStart(), true);\n            while (it.hasNext()) {\n                Data data = it.next();\n                if (block.contains(data.getAddress())) {\n                    sb.append(String.format(\"%s: %s = %s\\n\",\n                        data.getAddress(),\n                        data.getLabel() != null ? data.getLabel() : \"(unnamed)\",\n                        data.getDefaultValueRepresentation()));\n                }\n            }\n        }\n        return sb.toString();\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "30ec90e650e15d750a549b25cf49e0475d6df90e", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "listDefinedData", "index": 2870, "label": 0}
{"input": "@Test\n  public void ex1() {\n    var ex1 = module.getProperty(\"ex1\");\n    var mapped = mapper.map(ex1, Types.arrayOf(byte.class));\n    assertThat(mapped).isEqualTo(new byte[] {});\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "e9320557b762f3574d3c91056556b19d6e78ce9e", "file_path": "pkl-config-java/src/test/java/org/pkl/config/java/mapper/BytesToByteArrayTest.java", "function_name": "ex1", "index": 2871, "label": 0}
{"input": "public static ModuleKey file(Path path) {\n    try {\n      return new File(path.toAbsolutePath().toUri());\n    } catch (URISyntaxException e) {\n      \n      throw PklBugException.unreachableCode();\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "2bc9c2f42416ba122557a8a3d7c162c902ba362a", "file_path": "pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java", "function_name": "file", "index": 2872, "label": 0}
{"input": "public void updateRunningTask(Task task) {\n    runningTasks.put(task.referenceTaskName(), task);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/models/Flow.java", "function_name": "updateRunningTask", "index": 2873, "label": 0}
{"input": "@JsonIgnore\n  public RunPolicy getRestartRunPolicyWithUpstreamRestartMode() {\n    if (upstreamRestartMode == UpstreamRestartMode.RESTART_FROM_INLINE_ROOT) {\n      return RunPolicy.valueOf(restartPolicy.name());\n    } else {\n      return RunPolicy.RESTART_FROM_SPECIFIC;\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/api/StepInstanceRestartRequest.java", "function_name": "getRestartRunPolicyWithUpstreamRestartMode", "index": 2874, "label": 0}
{"input": "@Test\n  public void testComputeStepIdsInRuntimeDagForStepRestart() {\n    WorkflowInstance instance = new WorkflowInstance();\n    instance.setRunConfig(new RunConfig());\n    instance.getRunConfig().setPolicy(RunPolicy.RESTART_FROM_SPECIFIC);\n    instance\n        .getRunConfig()\n        .setRestartConfig(\n            RestartConfig.builder().addRestartNode(\"sample-dag-test-1\", 1, \"job_9\").build());\n    instance.setRuntimeDag(runtimeDag1);\n    Set<String> actual =\n        DagHelper.computeStepIdsInRuntimeDag(instance, Collections.singleton(\"job_9\"));\n    Assert.assertEquals(\"[job_9, job_8]\", actual.toString());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/DagHelperTest.java", "function_name": "testComputeStepIdsInRuntimeDagForStepRestart", "index": 2875, "label": 0}
{"input": "private boolean isInstanceStepConcurrencyValid(\n        Long instanceStepConcurrency, ConstraintValidatorContext context) {\n      if (instanceStepConcurrency != null\n          && (instanceStepConcurrency < 1\n              || instanceStepConcurrency >= Constants.INSTANCE_STEP_CONCURRENCY_MAX_LIMIT)) {\n        context\n            .buildConstraintViolationWithTemplate(\n                String.format(\n                    \"[workflow definitions] instance_step_concurrency \"\n                        + \"should be positive and less than %s - rejected value is [%s]\",\n                    Constants.INSTANCE_STEP_CONCURRENCY_MAX_LIMIT, instanceStepConcurrency))\n            .addPropertyNode(\"instanceStepConcurrency\")\n            .addConstraintViolation();\n        return false;\n      }\n      return true;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/validations/WorkflowConstraint.java", "function_name": "isInstanceStepConcurrencyValid", "index": 2876, "label": 0}
{"input": "public SqlValidateNode(ChatClient.Builder chatClientBuilder, DbAccessor dbAccessor, DbConfig dbConfig) {\n\t\tthis.chatClient = chatClientBuilder.build();\n\t\tthis.dbAccessor = dbAccessor;\n\t\tthis.dbConfig = dbConfig;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/node/SqlValidateNode.java", "function_name": "SqlValidateNode", "index": 2877, "label": 0}
{"input": "@Test\n    public void complexHeaderRead() {\n        String fileName = TestFileUtil.getPath() + \"demo\" + File.separator + \"demo.xlsx\";\n        \n        EasyExcel.read(fileName, DemoData.class, new DemoDataListener()).sheet()\n                \n                .headRowNumber(1).doRead();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/demo/read/ReadTest.java", "function_name": "complexHeaderRead", "index": 2878, "label": 0}
{"input": "@Override\n  public void removeTaskDef(String name) {\n    LOG.info(\"Removing a task definition with name {}\", name);\n    withMetricLogError(\n        () -> {\n          int cnt =\n              withRetryableUpdate(\n                  REMOVE_TASK_DEFINITIONS_STATEMENT, statement -> statement.setString(1, name));\n          if (cnt != 1) {\n            throw new ApplicationException(\n                ApplicationException.Code.NOT_FOUND,\n                \"Cannot remove the task - no such task definition with name \" + name);\n          }\n          return cnt;\n        },\n        \"removeTaskDef\",\n        \"Failed removing a task definition with name {}\",\n        name);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "removeTaskDef", "index": 2879, "label": 0}
{"input": "@Bean\n  public DagTranslator dagTranslator(\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper) {\n    LOG.info(\"Creating Maestro dagTranslator within Spring boot...\");\n    return new DagTranslator(objectMapper);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroWorkflowConfiguration.java", "function_name": "dagTranslator", "index": 2880, "label": 0}
{"input": "public PlanningCoordinator createPlanningCoordinator(String planId) {\n\n\t\t\n\t\tList<DynamicAgentEntity> agentEntities = dynamicAgentLoader.getAllAgents();\n\n\t\tPlanningTool planningTool = new PlanningTool();\n\n\t\tPlanCreator planCreator = new PlanCreator(agentEntities, llmService, planningTool, recorder, promptLoader);\n\t\tPlanExecutor planExecutor = new PlanExecutor(agentEntities, recorder, agentService, llmService);\n\t\tPlanFinalizer planFinalizer = new PlanFinalizer(llmService, recorder, promptLoader);\n\n\t\tPlanningCoordinator planningCoordinator = new PlanningCoordinator(planCreator, planExecutor, planFinalizer);\n\n\t\treturn planningCoordinator;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/PlanningFactory.java", "function_name": "createPlanningCoordinator", "index": 2881, "label": 0}
{"input": "@Override\n  public Object defaultVisit(SimpleNode node, Object data) {\n    node.childrenAccept(this, data);\n    return SelResult.NONE;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/visitor/SelParserValidationVisitor.java", "function_name": "defaultVisit", "index": 2882, "label": 0}
{"input": "private boolean jj_3R_80() {\n    if (jj_scan_token(INTEGER_LITERAL)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_80", "index": 2883, "label": 0}
{"input": "public static ExcelReaderSheetBuilder readSheet(Integer sheetNo, String sheetName,Integer numRows) {\n        ExcelReaderSheetBuilder excelReaderSheetBuilder = new ExcelReaderSheetBuilder();\n        if (sheetNo != null) {\n            excelReaderSheetBuilder.sheetNo(sheetNo);\n        }\n        if (sheetName != null) {\n            excelReaderSheetBuilder.sheetName(sheetName);\n        }\n        if (numRows !=null) {\n            excelReaderSheetBuilder.numRows(numRows);\n        }\n        return excelReaderSheetBuilder;\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "587971c92154e6a3d821abd23c690818a609f3a6", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/FastExcelFactory.java", "function_name": "readSheet", "index": 2884, "label": 0}
{"input": "public static JSONObject adminOperate(String appId,String chatroomId,List<String> wxids,Integer operType){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxids\",wxids);\r\n        param.put(\"operType\",operType);\r\n        param.put(\"chatroomId\",chatroomId);\r\n        return OkhttpUtil.postJSON(\"/group/adminOperate\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "adminOperate", "index": 2885, "label": 0}
{"input": "private QualifiedIdentifier parseQualifiedIdentifier() {\n    var idents = parseListOf(Token.DOT, this::parseIdentifier);\n    return new QualifiedIdentifier(idents);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Parser.java", "function_name": "parseQualifiedIdentifier", "index": 2886, "label": 0}
{"input": "@SuppressWarnings(\"unused\")\n  @Specialization(guards = \"checkIsValidTypedProperty(parent.getVmClass(), member)\")\n  protected void evalTyped(VirtualFrame frame, VmTyped parent, ObjectData data) {\n    data.addProperty(frame, member, this);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPropertyNode.java", "function_name": "evalTyped", "index": 2887, "label": 0}
{"input": "@DeleteMapping(\"/details/{planId}\")\n\tpublic ResponseEntity<Map<String, String>> removeExecutionDetails(@PathVariable(\"planId\") String planId) {\n\t\tPlanExecutionRecord planRecord = planExecutionRecorder.getExecutionRecord(planId);\n\t\tif (planRecord == null) {\n\t\t\treturn ResponseEntity.notFound().build();\n\t\t}\n\n\t\ttry {\n\t\t\tplanExecutionRecorder.removeExecutionRecord(planId);\n\t\t\treturn ResponseEntity.ok(Map.of(\"message\", \"执行记录已成功删除\", \"planId\", planId));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn ResponseEntity.internalServerError()\n\t\t\t\t.body(Map.of(\"error\", \"Failed to delete record: \" + e.getMessage()));\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/planning/controller/ManusController.java", "function_name": "removeExecutionDetails", "index": 2888, "label": 0}
{"input": "@Test\n  public void testToStepStatusMap() throws Exception {\n    WorkflowSummary workflowSummary =\n        loadObject(\"fixtures/parameters/sample-wf-summary-params.json\", WorkflowSummary.class);\n    StepRuntimeState state = new StepRuntimeState();\n    state.setStatus(StepInstance.Status.RUNNING);\n    state.setStartTime(123L);\n    Assert.assertEquals(\n        singletonEnumMap(\n            StepInstance.Status.RUNNING,\n            WorkflowStepStatusSummary.of(0).addStep(Arrays.asList(2L, 123L, null))),\n        TaskHelper.toStepStatusMap(workflowSummary, singletonMap(\"job1\", state)));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/utils/TaskHelperTest.java", "function_name": "testToStepStatusMap", "index": 2889, "label": 0}
{"input": "@Override\n  public String updateTaskDef(TaskDef taskDef) {\n    LOG.info(\"Updating a task definition with the name: {}\", taskDef.getName());\n    return createOrUpdateTaskDefinition(taskDef, \"updateTaskDef\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBMetadataDAO.java", "function_name": "updateTaskDef", "index": 2890, "label": 0}
{"input": "private void writeWithCommonCsv(File csvFile, CSVFormat csvFormat, List<CsvData> dataList) {\n        try {\n            Appendable out = new PrintWriter(\n                new OutputStreamWriter(Files.newOutputStream(csvFile.toPath())));\n            CSVPrinter printer = csvFormat.print(out);\n            for (CsvData data : dataList) {\n                \n                printer.printRecord(data.getString(), DateUtils.format(data.getDate(), DateUtils.DATE_FORMAT_19),\n                    data.getDoubleData());\n            }\n            printer.flush();\n            printer.close();\n        } catch (IOException e) {\n            log.error(e.getMessage(), e);\n        }\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvFormatTest.java", "function_name": "writeWithCommonCsv", "index": 2891, "label": 0}
{"input": "private boolean isStringData(Data data) {\n        if (data == null) return false;\n        \n        DataType dt = data.getDataType();\n        String typeName = dt.getName().toLowerCase();\n        return typeName.contains(\"string\") || typeName.contains(\"char\") || typeName.equals(\"unicode\");\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "d770d44e8ae2cf5f485a984d4a7c46737d5e058c", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "isStringData", "index": 2892, "label": 0}
{"input": "public WhenGenerator(\n        Expr thenClause, ObjectBody body, @Nullable ObjectBody elseClause, Span span) {\n      super(span, Arrays.asList(thenClause, body, elseClause));\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/ObjectMember.java", "function_name": "WhenGenerator", "index": 2893, "label": 0}
{"input": "private void lexQuotedIdentifier() {\n    while (lookahead != '`' && lookahead != '\\n' && lookahead != '\\r') {\n      nextChar();\n    }\n    if (lookahead == '`') {\n      nextChar();\n    } else {\n      throw unexpectedChar(lookahead, \"backquote\");\n    }\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/Lexer.java", "function_name": "lexQuotedIdentifier", "index": 2894, "label": 0}
{"input": "@UpdateScript(version = 15)\n    public void addCitiesBanningRule() {\n        conf.set(\"module.ip-address-blocker.cities\", List.of(\"示例海南\"));\n        var section = conf.getConfigurationSection(\"module.ip-address-blocker-rules.rules\");\n        for (String key : section.getKeys(false)) {\n            var rule = section.getConfigurationSection(key);\n            var url = rule.getString(\"url\", \"\");\n            if (url.equals(\"https://cdn.jsdelivr.net/gh/PBH-BTN/BTN-Collected-Rules@master/combine/all.txt\") ||\n                    url.equals(\"https://fastly.jsdelivr.net/gh/PBH-BTN/BTN-Collected-Rules@master/combine/all.txt\")) {\n                rule.set(\"url\", \"https://bcr.pbh-btn.ghorg.ghostchu-services.top/combine/all.txt\");\n            }\n        }\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "c57007bbb4cd958de4b1c0a06b7d6173b609481d", "file_path": "src/main/java/com/ghostchu/peerbanhelper/config/ProfileUpdateScript.java", "function_name": "addCitiesBanningRule", "index": 2895, "label": 0}
{"input": "@Specialization(guards = {\"parent == getDynamicClass()\", \"!iterable.isTyped()\"})\n  @SuppressWarnings(\"unused\")\n  protected void evalDynamicClass(\n      VirtualFrame frame, VmClass parent, ObjectData data, VmObject iterable) {\n    doEvalDynamic(frame, data, iterable);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "90df0662afb8968dd8adb9c9d2260bc40fa04799", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java", "function_name": "evalDynamicClass", "index": 2896, "label": 0}
{"input": "@Test(expected = UnsupportedOperationException.class)\n  public void testCallPutInvalidArgs() {\n    orig.call(\"put\", new SelType[] {SelLong.of(1)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallPutInvalidArgs", "index": 2897, "label": 0}
{"input": "@Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.bottom_sheet_endpoints, container, false);\n\n        RecyclerView recyclerView = view.findViewById(R.id.recyclerView);\n        endpointsList = new ArrayList<>();\n        loadEndpoints();\n\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n        EndpointsAdapter adapter = new EndpointsAdapter(endpointsList, this::onEndpointSelected);\n        recyclerView.setAdapter(adapter);\n\n        return view;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "e686c693784ba10897d5ce69e7d00d2c31c27902", "file_path": "app/src/main/java/org/bepass/oblivion/EndpointsBottomSheet.java", "function_name": "onCreateView", "index": 2898, "label": 0}
{"input": "@Test\n  public void testCallGet() {\n    SelType res = params.call(\"get\", new SelType[] {SelString.of(\"key1\")});\n    assertEquals(\"BOOLEAN: true\", res.type() + \": \" + res);\n    res = params.call(\"get\", new SelType[] {SelString.of(\"key2\")});\n    assertEquals(\"STRING: val\", res.type() + \": \" + res);\n    res = params.call(\"get\", new SelType[] {SelString.of(\"key3\")});\n    assertEquals(\"key1\"0, res.type() + \": \" + res);\n    res = params.call(\"get\", new SelType[] {SelString.of(\"key1\"3)});\n    assertEquals(\"key1\"4, res.type() + \": \" + res);\n    res = params.call(\"get\", new SelType[] {SelString.of(\"key1\"7)});\n    assertEquals(\"key1\"4, res.type() + \": \" + res);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelParamsTest.java", "function_name": "testCallGet", "index": 2899, "label": 0}
{"input": "@Test\n  public void testGetSignalParamsEmpty() {\n    Assert.assertTrue(ParamsManager.getStepDependenciesParameters(null).isEmpty());\n    Assert.assertTrue(ParamsManager.getStepOutputsParameters(null).isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsManagerTest.java", "function_name": "testGetSignalParamsEmpty", "index": 2900, "label": 0}
{"input": "private AbstractImportNode doVisitImport(\n      boolean isGlobImport, Node node, StringConstant importUriNode) {\n    var section = createSourceSection(node);\n    var importUri = doVisitStringConstant(importUriNode);\n    if (isGlobImport && importUri.startsWith(\"...\")) {\n      throw exceptionBuilder().evalError(\"cannotGlobTripleDots\").withSourceSection(section).build();\n    }\n    var resolvedUri = resolveImport(importUri, importUriNode);\n    if (isGlobImport) {\n      return new ImportGlobNode(section, moduleInfo.getResolvedModuleKey(), resolvedUri, importUri);\n    }\n    return new ImportNode(language, section, moduleInfo.getResolvedModuleKey(), resolvedUri);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java", "function_name": "doVisitImport", "index": 2901, "label": 0}
{"input": "@Override\r\n    public String downloadImgFormLocal(String localPath) {\r\n        \n        String userDir = System.getProperty(\"user.dir\");\r\n        \n        String separator = System.getProperty(\"file.separator\");\r\n        \n        WeChatVO user = UserUtil.getUser();\r\n        \n        String filePath = user.getBasePath() + \"\\\\\" + localPath;\r\n        \n        if (!FileUtil.exist(filePath)) {\r\n            return userDir + separator + \"asset\" + separator + \"404.png\";\r\n        }\r\n        String outPath = userDir + separator + \"img\";\r\n        \n        return ImgDecoderUtil.decodeDat(filePath, outPath);\r\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "666b2d7255818c540eb5859adc11da1147fd14cb", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/ImageServiceImpl.java", "function_name": "downloadImgFormLocal", "index": 2902, "label": 0}
{"input": "private boolean jj_3R_59() {\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_63()) {\n      jj_scanpos = xsp;\n      if (jj_3R_64()) return true;\n    }\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_59", "index": 2903, "label": 0}
{"input": "public CsvWriterBuilder(WriteWorkbook writeWorkbook) {\n        writeWorkbook.setExcelType(ExcelTypeEnum.CSV);\n        this.writeWorkbook = writeWorkbook;\n        this.writeSheet = new WriteSheet();\n        this.csvFormatBuilder = CSVFormat.DEFAULT.builder();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "b4d94276de440a2e594fe759f846caefe4faecf9", "file_path": "fastexcel-core/src/main/java/cn/idev/excel/write/builder/CsvWriterBuilder.java", "function_name": "CsvWriterBuilder", "index": 2904, "label": 0}
{"input": "public void extractDatabaseName(SchemaDTO schemaDTO) {\n\t\tString pattern = \":\\\\d+/([^/?&]+)\";\n\t\tif (BizDataSourceTypeEnum.isMysqlDialect(dbConfig.getDialectType())) {\n\t\t\tPattern regex = Pattern.compile(pattern);\n\t\t\tMatcher matcher = regex.matcher(dbConfig.getUrl());\n\t\t\tif (matcher.find()) {\n\t\t\t\tschemaDTO.setName(matcher.group(1));\n\t\t\t}\n\t\t}\n\t\telse if (BizDataSourceTypeEnum.isPgDialect(dbConfig.getDialectType())) {\n\t\t\tschemaDTO.setName(dbConfig.getSchema());\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseSchemaService.java", "function_name": "extractDatabaseName", "index": 2905, "label": 0}
{"input": "@Test(expected = ClassCastException.class)\n  public void testCallGetInvalidTypeKey() {\n    orig.call(\"get\", new SelType[] {SelLong.of(1)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelMapTest.java", "function_name": "testCallGetInvalidTypeKey", "index": 2906, "label": 0}
{"input": "public void updateStatus(SignalReference signalRef, StepDependencyMatchStatus matchStatus) {\n    this.signalReference = signalRef;\n    this.status = matchStatus;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/StepDependencyStatus.java", "function_name": "updateStatus", "index": 2907, "label": 0}
{"input": "public void markWaitSignal(MaestroTracingManager tracingManager) {\n    runtimeState.setWaitSignalTime(\n        updateStatus(StepInstance.Status.WAITING_FOR_SIGNALS, tracingManager));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/StepRuntimeSummary.java", "function_name": "markWaitSignal", "index": 2908, "label": 0}
{"input": "private MultiValueMap<String, String> getAdditionalHttpHeaders(Prompt prompt) {\n\n\t\tMap<String, String> headers = new HashMap<>(this.defaultOptions.getHttpHeaders());\n\t\tif (prompt.getOptions() != null && prompt.getOptions() instanceof DashScopeChatOptions chatOptions) {\n\t\t\theaders.putAll(chatOptions.getHttpHeaders());\n\t\t}\n\t\treturn CollectionUtils.toMultiValueMap(\n\t\t\t\theaders.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> List.of(e.getValue()))));\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "abae01ebaa4a516ecd97e1486c64a364263b9a53", "file_path": "spring-ai-alibaba-core/src/main/java/com/alibaba/cloud/ai/dashscope/chat/DashScopeChatModel.java", "function_name": "getAdditionalHttpHeaders", "index": 2909, "label": 0}
{"input": "public CockroachDBPollDataDAO(\n      DataSource dataSource, ObjectMapper objectMapper, CockroachDBConfiguration config) {\n    super(dataSource, objectMapper, config);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBPollDataDAO.java", "function_name": "CockroachDBPollDataDAO", "index": 2910, "label": 0}
{"input": "@Test\n  public void testStepTypeParamsMutate() {\n    defaultParamManager\n        .getDefaultParamsForType(StepType.FOREACH)\n        .get()\n        .put(\"TEST\", ParamDefinition.buildParamDefinition(\"TEST\", \"123\"));\n    assertNull(defaultParamManager.getDefaultParamsForType(StepType.FOREACH).get().get(\"TEST\"));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/DefaultParamManagerTest.java", "function_name": "testStepTypeParamsMutate", "index": 2911, "label": 0}
{"input": "public static JSONObject logout(String appId) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        return OkhttpUtil.postJSON(\"/login/logout\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LoginApi.java", "function_name": "logout", "index": 2912, "label": 0}
{"input": "private String getChatAvatar(String wxId) {\n        return contactHeadImgUrlRepository.queryHeadImgUrlByUserName(wxId);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/MsgServiceImpl.java", "function_name": "getChatAvatar", "index": 2913, "label": 0}
{"input": "private Actor getOrCreateNewGroup(long groupId) {\n    FlowGroup group = new FlowGroup(groupId, Constants.INITIAL_GENERATION_NUMBER, address);\n    try {\n      readLock.lock();\n      return groupActors.computeIfAbsent(\n          group.groupId(),\n          id -> {\n            context.trySaveGroup(group);\n            return Actor.startGroupActor(group, context);\n          });\n    } finally {\n      readLock.unlock();\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4e258d1f64f23987911c3bddc4127b97ef28b8d7", "file_path": "maestro-flow/src/main/java/com/netflix/maestro/flow/engine/FlowExecutor.java", "function_name": "getOrCreateNewGroup", "index": 2914, "label": 0}
{"input": "private boolean jj_3R_91() {\n    if (jj_scan_token(LPAREN)) return true;\n    Token xsp;\n    xsp = jj_scanpos;\n    if (jj_3R_93()) jj_scanpos = xsp;\n    if (jj_scan_token(RPAREN)) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_91", "index": 2915, "label": 0}
{"input": "@Test\n  public void testCleanupAllPresentParams() throws JsonProcessingException {\n    for (ParamMode mode : ParamMode.values()) {\n      Map<String, ParamDefinition> allParams =\n          parseParamDefMap(\n              String.format(\n                  \"{'optional': {'type': 'STRING', 'mode': '%s', 'value': 'hello'}}\",\n                  mode.toString()));\n      Map<String, ParamDefinition> cleanedParams = ParamsMergeHelper.cleanupParams(allParams);\n      assertEquals(1, cleanedParams.size());\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testCleanupAllPresentParams", "index": 2916, "label": 0}
{"input": "@JsonIgnore\n  public void updateForRestart(\n      long iterationId,\n      WorkflowInstance.Status newStatus,\n      WorkflowInstance.Status oldStatus,\n      WorkflowRollupOverview oldOverview) {\n    Checks.checkTrue(\n        isForeachIterationRestartable(iterationId) && stats != null && stats.get(oldStatus) > 0,\n        \"Invalid: pending action tries to restart a non-restartable iteration: \" + iterationId);\n    long cnt = stats.get(oldStatus);\n    if (cnt > 1) {\n      stats.put(oldStatus, stats.get(oldStatus) - 1);\n    } else {\n      stats.remove(oldStatus);\n    }\n    addRunningOne(newStatus, null);\n    rollup.segregate(oldOverview);\n    details.resetIterationDetail(iterationId, newStatus, oldStatus);\n    if (restartInfo == null) {\n      restartInfo = new HashSet<>();\n    }\n    restartInfo.add(iterationId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "updateForRestart", "index": 2917, "label": 0}
{"input": "public static boolean isNoActiveWorkflowVersionException(MaestroNotFoundException exception) {\n    return exception.getMessage() != null\n        && exception.getMessage().contains(NO_ACTIVE_VERSION_MESSAGE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/ExceptionClassifier.java", "function_name": "isNoActiveWorkflowVersionException", "index": 2918, "label": 0}
{"input": "public Modifier(ModifierValue value, Span span) {\n    super(span, null);\n    this.value = value;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b526902bf0938837acbb17e7b5998bdda867a180", "file_path": "pkl-core/src/main/java/org/pkl/core/parser/ast/Modifier.java", "function_name": "Modifier", "index": 2919, "label": 0}
{"input": "private static String getBaseUri() {\n\t\ttry {\n\t\t\tURL resourceUrl = FormatConversionUtil.class.getClassLoader().getResource(\"\");\n\t\t\tif (resourceUrl != null) {\n\t\t\t\tString baseUri = resourceUrl.toString();\n\t\t\t\tlogger.info(\"Using base URI for PDF conversion: {}\", baseUri);\n\t\t\t\treturn baseUri;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error getting classpath base URL: {}\", e.getMessage());\n\t\t}\n\t\treturn null;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "113bd17890ad6558781b4ec61dbe642c0e43d7d8", "file_path": "spring-ai-alibaba-deepresearch/src/main/java/com/alibaba/cloud/ai/example/deepresearch/util/export/FormatConversionUtil.java", "function_name": "getBaseUri", "index": 2920, "label": 0}
{"input": "protected <R> R withRetryableStatement(\n      final String statement, final StatementFunction<R> function) {\n    return withRetryableTransaction(\n        conn -> {\n          try (PreparedStatement stmt = conn.prepareStatement(statement)) {\n            return function.apply(stmt);\n          }\n        });\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/main/java/com/netflix/conductor/cockroachdb/dao/CockroachDBBaseDAO.java", "function_name": "withRetryableStatement", "index": 2921, "label": 0}
{"input": "private void initializeForGetWorkflowInstancesLatestRun() throws IOException {\n    List<WorkflowInstance> instances = new ArrayList<>();\n\n    for (int i = 1; i < 10; i++) {\n      WorkflowInstance wfi = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n      wfi.setWorkflowUuid(\"wfi-uuid-\" + i);\n      wfi.setWorkflowInstanceId(i + 1);\n      instances.add(wfi);\n    }\n\n    \n    for (int i = 0; i < 10; i++) {\n      WorkflowInstance wfi = loadObject(TEST_WORKFLOW_INSTANCE, WorkflowInstance.class);\n      wfi.setWorkflowUuid(\"wfi-uuid2-\" + i);\n      wfi.setWorkflowInstanceId(i + 1);\n      wfi.setWorkflowRunId(100 + i);\n      instances.add(wfi);\n    }\n\n    instanceDao.runWorkflowInstances(TEST_WORKFLOW_ID, instances, instances.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "initializeForGetWorkflowInstancesLatestRun", "index": 2922, "label": 0}
{"input": "private long getWorkflowInstanceId(ResultSet rs) throws SQLException {\n    return Checks.notNull(\n        rs.getLong(StepInstanceField.WORKFLOW_INSTANCE_ID.field),\n        \"step workflow_instance_id column cannot be null\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getWorkflowInstanceId", "index": 2923, "label": 0}
{"input": "@Test\n  public void testWorkflowInstanceUpdateJobEventPublisher() throws Exception {\n    sqsMaestroJobEventPublisher.publish(workflowInstanceUpdateJobEvent, 2000);\n\n    String workflowInstanceUpdateJobEventStr =\n        MAPPER.writeValueAsString(workflowInstanceUpdateJobEvent);\n    verify(amazonSqs, times(1))\n        .sendMessage(\n            new SendMessageRequest()\n                .withQueueUrl(PUBLISH_JOB_QUEUE_URL)\n                .withMessageBody(workflowInstanceUpdateJobEventStr)\n                .withDelaySeconds(2));\n    assertEquals(\n        1,\n        metricRepo\n            .getCounter(\n                AwsMetricConstants.SQS_JOB_EVENT_PUBLISH_SUCCESS_METRIC,\n                SqsMaestroJobEventPublisher.class,\n                AwsMetricConstants.JOB_TYPE_TAG,\n                WorkflowInstanceUpdateJobEvent.class.getSimpleName())\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "92d2e8bca153f9b0fcaff9b912eb8aec8e4e789b", "file_path": "maestro-aws/src/test/java/com/netflix/maestro/engine/publisher/SqsMaestroJobEventPublisherTest.java", "function_name": "testWorkflowInstanceUpdateJobEventPublisher", "index": 2924, "label": 0}
{"input": "protected @Nullable Object getType(\n      VmTyped module, Identifier typeName, SourceSection typeNameSection) {\n    var member = module.getMember(typeName);\n    if (member == null) return null;\n\n    if (!member.isType()) {\n      throw exceptionBuilder()\n          .evalError(\"notAType\", typeName)\n          .withSourceSection(typeNameSection)\n          .build();\n    }\n\n    assert member.getConstantValue() == null;\n    var result = module.getCachedValue(typeName);\n    if (result == null) {\n      result = callNode.call(member.getCallTarget(), module, module, typeName);\n      module.setCachedValue(typeName, result);\n    }\n    return result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "1bc473ba545167af3a48f7f24048b3b1c42d139a", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/type/ResolveDeclaredTypeNode.java", "function_name": "getType", "index": 2925, "label": 0}
{"input": "public static JSONObject getDetailInfo(String appId, List<String> wxids){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxids\",wxids);\r\n        return OkhttpUtil.postJSON(\"/contacts/getDetailInfo\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/ContactApi.java", "function_name": "getDetailInfo", "index": 2926, "label": 0}
{"input": "@Bean\n  public MaestroStepBreakpointDao stepBreakpointDao(\n      DataSource crdbDataSource,\n      @Qualifier(Constants.MAESTRO_QUALIFIER) ObjectMapper objectMapper,\n      ConductorProperties props,\n      MaestroWorkflowDao workflowDao) {\n    LOG.info(\"Creating maestroStepBreakpointDao within Spring boot...\");\n    return new MaestroStepBreakpointDao(crdbDataSource, objectMapper, props, workflowDao);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/DatabaseConfiguration.java", "function_name": "stepBreakpointDao", "index": 2927, "label": 0}
{"input": "public List<StepInstance> getStepInstanceViews(\n      String workflowId, long workflowInstanceId, long workflowRunId) {\n    List<StepInstance> instances = new ArrayList<>();\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_STEP_INSTANCE_VIEWS_QUERY,\n                stmt -> {\n                  int idx = 0;\n                  stmt.setString(++idx, workflowId);\n                  stmt.setLong(++idx, workflowInstanceId);\n                  stmt.setLong(++idx, workflowRunId);\n                },\n                result -> {\n                  while (result.next()) {\n                    instances.add(maestroStepFromResult(result));\n                  }\n                  return instances;\n                }),\n        \"getStepInstanceViews\",\n        \"Failed to get latest step attempts for workflow instance [{}][{}][{}]\",\n        workflowId,\n        workflowInstanceId,\n        workflowRunId);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getStepInstanceViews", "index": 2928, "label": 0}
{"input": "private void waitForPageLoad(Page page) {\n\t\ttry {\n\t\t\tpage.waitForLoadState(LoadState.DOMCONTENTLOADED);\n\t\t\tlog.info(\"Page loaded\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.warn(\"Error waiting for page load: {}\", e.getMessage());\n\t\t}\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "cc06b309a8edb868ac4ae9630fbbbe90cff61424", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/tool/browser/InteractiveElementRegistry.java", "function_name": "waitForPageLoad", "index": 2929, "label": 0}
{"input": "@Override\n    public boolean push(String title, String content) throws Exception {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"title\", title);\n        map.put(\"body\", content);\n        map.put(\"device_key\", config.getDeviceKey());\n        HttpResponse<String> resp = HTTPUtil.retryableSend(HTTPUtil.getHttpClient(false, null),\n                MutableRequest.POST(config.getBackendUrl()\n                                , HttpRequest.BodyPublishers.ofString(JsonUtil.getGson().toJson(map)))\n                        .header(\"Content-Type\", \"application/json\")\n                , HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8)\n        ).join();\n        if (resp.statusCode() != 200) {\n            throw new IllegalStateException(\"HTTP Failed while sending push messages to Bark: \" + resp.body());\n        }\n        return true;\n    }", "repository_name": "PeerBanHelper", "repository_url": "https://github.com/PBH-BTN/PeerBanHelper", "commit_hash": "c62d32e5150dcfeafef2fd96b2cab7b061e39f33", "file_path": "src/main/java/com/ghostchu/peerbanhelper/push/impl/BarkPushProvider.java", "function_name": "push", "index": 2930, "label": 0}
{"input": "@Override\n    public UserInfoVO userInfo() {\n        \n        String wxId = currentUser();\n        \n        if (wxId == null) {\n            return null;\n        }\n        \n        String userDir = DirUtil.getUserDir(wxId);\n        \n        if (!FileUtil.exist(userDir)) {\n            return null;\n        }\n        \n        UserBO userBO = JSONUtil.toBean(FileUtil.readUtf8String(userDir), UserBO.class);\n        \n        if (StrUtil.NULL.equals(userBO.getNickname())) {\n            userBO.setNickname(getNickName(userBO.getWxId()));\n        }\n        return userMapping.convert(userBO);\n    }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "8a65dda542a30d994605d8dc1d48cb35ce663d41", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/service/impl/UserServiceImpl.java", "function_name": "userInfo", "index": 2931, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidArgs() {\n    SelString.of(\"a b c\").call(\"substring\", new SelType[] {SelLong.of(4), SelLong.of(3)});\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/type/SelStringTest.java", "function_name": "testInvalidArgs", "index": 2932, "label": 0}
{"input": "public static SignalOutputs.SignalOutput transform(MapParameter mapParam) {\n    var output = new SignalOutputs.SignalOutput();\n    Map<String, SignalParamValue> params = new LinkedHashMap<>();\n    Map<String, Object> payload = new LinkedHashMap<>();\n    mapParam\n        .getEvaluatedResult()\n        .forEach(\n            (k, v) -> {\n              if (NAME_FIELD.equals(k)) {\n                output.setName((String) v);\n              } else if (v instanceof String) {\n                params.put(k, SignalParamValue.of((String) v));\n              } else {\n                var val = Checks.toNumeric(String.valueOf(v));\n                if (val.isPresent()) {\n                  params.put(k, SignalParamValue.of(val.getAsLong()));\n                } else {\n                  payload.put(k, v);\n                }\n              }\n            });\n    if (!params.isEmpty()) {\n      output.setParams(params);\n    }\n    if (!payload.isEmpty()) {\n      output.setPayload(payload);\n    }\n    return output;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/signal/SignalTransformer.java", "function_name": "transform", "index": 2933, "label": 0}
{"input": "@Test\n  public void testWorkflowFinalizedForDedup() {\n    when(workflow.getStatus()).thenReturn(Workflow.WorkflowStatus.FAILED);\n    when(workflow.getReasonForIncompletion())\n        .thenReturn(MaestroStartTask.DEDUP_FAILURE_PREFIX + \"test-reason\");\n    statusListener.onWorkflowFinalized(workflow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.WORKFLOW_STATUS_LISTENER_CALL_BACK_METRIC,\n                MaestroWorkflowStatusListener.class,\n                \"type\",\n                \"onWorkflowFinalized\",\n                \"status\",\n                \"FAILED\")\n            .count());\n    verify(instanceDao, times(0)).updateWorkflowInstance(any(), any(), any(), any(), anyLong());\n    verify(publisher, times(0)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroWorkflowStatusListenerTest.java", "function_name": "testWorkflowFinalizedForDedup", "index": 2934, "label": 0}
{"input": "@Test\n\tvoid embedding() {\n\t\tthis.textEmbeddingDefaultContextRunner.run(context -> {\n\t\t\tDashScopeEmbeddingModel embeddingModel = context.getBean(DashScopeEmbeddingModel.class);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingModel\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingModel.dimensions()).isEqualTo(1536);\n\t\t});\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "57d0b6295b47a9bc0de24bbad89345bf03251a7f", "file_path": "auto-configurations/spring-ai-alibaba-autoconfigure-dashscope/src/test/java/com/alibaba/cloud/ai/autoconfigure/dashscope/DashScopeAutoConfigurationIT.java", "function_name": "embedding", "index": 2935, "label": 0}
{"input": "@Test\n  public void testBuildNotebookParamsWithNullCriticality() {\n    workflowSummary.setCriticality(null);\n    String notebookParams =\n        notebookParamsBuilder.buildNotebookParams(workflowSummary, stepRuntimeSummary, null);\n    assertEquals(\n        \"{\\\"owner\\\":\\\"paramuser\\\",\\\"notebook\\\":{\\\"input_path\\\":\\\"owner/mynotebook.ipynb\\\",\\\"run_id\\\":\\\"MyWorkflow_123_2_mystepid_3\\\"},\\\"attempt_number\\\":2}\",\n        notebookParams);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b54b981d1f6cdeb9354194c539290c46f4b3ea8b", "file_path": "maestro-kubernetes/src/test/java/com/netflix/maestro/engine/notebook/NotebookParamsBuilderTest.java", "function_name": "testBuildNotebookParamsWithNullCriticality", "index": 2936, "label": 0}
{"input": "private void scanAndSaveStartupAgents() {\n\t\tlog.info(\"开始扫描StartupAgent配置文件...\");\n\n\t\tList<String> agentDirs = startupAgentConfigLoader.scanAvailableAgents();\n\t\tfor (String agentDir : agentDirs) {\n\t\t\ttry {\n\t\t\t\tStartupAgentConfigLoader.AgentConfig agentConfig = startupAgentConfigLoader.loadAgentConfig(agentDir);\n\t\t\t\tif (agentConfig != null) {\n\t\t\t\t\tsaveStartupAgent(agentConfig);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlog.error(\"加载StartupAgent配置失败: {}\", agentDir, e);\n\t\t\t}\n\t\t}\n\n\t\tlog.info(\"StartupAgent配置文件扫描完成，共处理 {} 个agent\", agentDirs.size());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "14fa07aa3d6ca568a4cffcd7c6bcbd1c550ff091", "file_path": "spring-ai-alibaba-jmanus/src/main/java/com/alibaba/cloud/ai/example/manus/dynamic/agent/service/DynamicAgentScanner.java", "function_name": "scanAndSaveStartupAgents", "index": 2937, "label": 0}
{"input": "@Override\n    public Long getUserId() {\n        LoginUser loginUser = LoginHelper.getLoginUser();\n        if (loginUser == null) {\n            throw new BaseException(\"用户未登录！\");\n        }\n        return loginUser.getUserId();\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "4e2ec2dc82a79b96a000015482d73a52c2fb6bb1", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/service/chat/impl/ChatCostServiceImpl.java", "function_name": "getUserId", "index": 2938, "label": 0}
{"input": "default void publishOrThrow(MaestroJobEvent jobEvent, long invisibleMs, String msg) {\n    Optional<Details> error = publish(jobEvent, invisibleMs);\n    if (error.isPresent()) {\n      throw new MaestroRetryableError(error.get(), msg);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/publisher/MaestroJobEventPublisher.java", "function_name": "publishOrThrow", "index": 2939, "label": 0}
{"input": "@Test(expected = IllegalArgumentException.class)\n  public void testValidateExpressionTooLong() throws Exception {\n    t1.validate(\"x.IsInvalidExpression();\", new HashSet<>());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/security/SelThreadTest.java", "function_name": "testValidateExpressionTooLong", "index": 2940, "label": 0}
{"input": "@Test\n    public void json() {\n        JsonData jsonData = new JsonData();\n        jsonData.setSS1(\"11\");\n        jsonData.setSS2(\"22\");\n        jsonData.setSs3(\"33\");\n        System.out.println(JSON.toJSONString(jsonData));\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/simple/Write.java", "function_name": "json", "index": 2941, "label": 0}
{"input": "@SuppressWarnings(\"unused\")\n  @Specialization(guards = \"owner.getVmClass() == cachedOwnerClass\")\n  protected Object evalTypedObjectCached(\n      VirtualFrame frame,\n      VmTyped owner,\n      @Cached(\"owner.getVmClass()\") VmClass cachedOwnerClass,\n      @Cached(\"getProperty(cachedOwnerClass)\") ClassProperty property,\n      @Cached(\"createTypeCheckCallNode(property)\") @Nullable DirectCallNode callNode) {\n\n    var result = bodyNode.executeGeneric(frame);\n\n    \n    if (callNode != null && VmUtils.shouldRunTypeCheck(frame)) {\n      return callNode.call(\n          VmUtils.getReceiverOrNull(frame), property.getOwner(), result, member.isInIterable());\n    }\n\n    return result;\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "17f431370a9560776d7e23c5ebe3459d4273eb54", "file_path": "pkl-core/src/main/java/org/pkl/core/ast/member/TypeCheckedPropertyNode.java", "function_name": "evalTypedObjectCached", "index": 2942, "label": 0}
{"input": "public SchemaDTO mixRag(String query, List<String> keywords) {\n\t\tSchemaDTO schemaDTO = new SchemaDTO();\n\t\textractDatabaseName(schemaDTO); \n\n\t\tList<Document> tableDocuments = getTableDocuments(query); \n\t\tList<List<Document>> columnDocumentList = getColumnDocumentsByKeywords(keywords); \n\n\t\tbuildSchemaFromDocuments(columnDocumentList, tableDocuments, schemaDTO);\n\n\t\treturn schemaDTO;\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseSchemaService.java", "function_name": "mixRag", "index": 2943, "label": 0}
{"input": "@Test\n  public void testVisitedAllDataNode() {\n    root.jjtAddChild(dataNode, 2);\n    root.jjtAddChild(dataNode, 1);\n    root.jjtAddChild(dataNode, 0);\n    SelResult res = root.childrenAccept(null, null);\n    assertEquals(SelResult.DATA, res);\n    assertArrayEquals(new int[] {0, 0, 0, 3, 0}, visited);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/test/java/com/netflix/sel/visitor/SelBaseNodeTest.java", "function_name": "testVisitedAllDataNode", "index": 2944, "label": 0}
{"input": "@Test\n  public void testShutdown() {\n    executor.shutdown();\n    verify(context, times(1)).shutdown();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/engine/FlowExecutorTest.java", "function_name": "testShutdown", "index": 2945, "label": 0}
{"input": "@Override\n  public void checkPropertyAccess(String key) {\n    if (accs.get() != null) {\n      super.checkPropertyAccess(key);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelSecurityManager.java", "function_name": "checkPropertyAccess", "index": 2946, "label": 0}
{"input": "@Bean\n  public TriggerSubscriptionClient triggerSubscriptionClient() {\n    LOG.info(\"Creating noop triggerSubscriptionClient within Spring boot...\");\n    return (workflow, current, previous) ->\n        LOG.info(\n            \"[NoOp] upsert a new trigger subscription [{}] for workflow [{}]\",\n            current,\n            workflow.getId());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "17a5e2e3ddb41788458835c42290d2554bb8b218", "file_path": "maestro-server/src/main/java/com/netflix/maestro/server/config/MaestroEngineConfiguration.java", "function_name": "triggerSubscriptionClient", "index": 2947, "label": 0}
{"input": "@Test\n  public void testBooleanParameter() {\n    BooleanParameter param =\n        BooleanParameter.builder()\n            .name(\"booleanParam\")\n            .expression(\"return true;\")\n            .evaluatedResult(true)\n            .evaluatedTime(12345L)\n            .mode(ParamMode.IMMUTABLE)\n            .build();\n\n    assertNull(param.toDefinition().getValue());\n    assertEquals(param.getExpression(), param.toDefinition().getExpression());\n    assertEquals(ParamMode.IMMUTABLE, param.toDefinition().getMode());\n    assertNull(param.toDefinition().asBooleanParamDef().getMeta());\n\n    param = param.toBuilder().mode(ParamMode.CONSTANT).build();\n    assertEquals(param.getEvaluatedResult(), param.toDefinition().getValue());\n    assertNull(param.toBuilder().mode(ParamMode.CONSTANT).build().toDefinition().getExpression());\n    assertEquals(ParamMode.CONSTANT, param.toDefinition().getMode());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/parameter/ParameterTest.java", "function_name": "testBooleanParameter", "index": 2948, "label": 0}
{"input": "private <T> List<T> tryFindResults(Supplier<List<T>> searchFunction, int resultsCount) {\n    List<T> result = Collections.emptyList();\n    for (int i = 0; i < 20; i++) {\n      result = searchFunction.get();\n      if (result.size() == resultsCount) {\n        return result;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage(), e);\n      }\n    }\n    return result;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e4c5e1e72a6b987aef2667869178c51e9b4804a9", "file_path": "cockroachdb-persistence/src/test/java/com/netflix/conductor/cockroachdb/dao/CockroachDBIndexDAOTest.java", "function_name": "tryFindResults", "index": 2949, "label": 0}
{"input": "public TokenMgrError(\n      boolean EOFSeen,\n      int lexState,\n      int errorLine,\n      int errorColumn,\n      String errorAfter,\n      char curChar,\n      int reason) {\n    this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/TokenMgrError.java", "function_name": "TokenMgrError", "index": 2950, "label": 0}
{"input": "@Test\n  public void testFlowFinalizedTimedOut() {\n    when(flow.getStatus()).thenReturn(Flow.Status.TIMED_OUT);\n    when(instanceDao.getWorkflowInstanceStatus(eq(\"test-workflow-id\"), anyLong(), anyLong()))\n        .thenReturn(WorkflowInstance.Status.IN_PROGRESS);\n    statusListener.onFlowFinalized(flow);\n    Assert.assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.FINAL_FLOW_STATUS_CALL_BACK_METRIC,\n                MaestroFinalFlowStatusCallback.class,\n                \"type\",\n                \"onFlowFinalized\",\n                \"status\",\n                \"TIMED_OUT\")\n            .count());\n    verify(instanceDao, times(1))\n        .updateWorkflowInstance(\n            any(), any(), any(), eq(WorkflowInstance.Status.TIMED_OUT), anyLong());\n    verify(publisher, times(1)).publishOrThrow(any(), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "7a0d0b9fbededd447c70e57e7fe346191a9c31ce", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/listeners/MaestroFinalFlowStatusCallbackTest.java", "function_name": "testFlowFinalizedTimedOut", "index": 2951, "label": 0}
{"input": "public static JSONObject createChatroom(String appId, List<String> wxids){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxid\",wxids);\r\n        return OkhttpUtil.postJSON(\"/group/createChatroom\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/GroupApi.java", "function_name": "createChatroom", "index": 2952, "label": 0}
{"input": "@Test\n  public void testExecute() {\n    StepRuntimeSummary summary =\n        StepRuntimeSummary.builder()\n            .type(StepType.NOOP)\n            .stepRetry(StepInstance.StepRetry.from(Defaults.DEFAULT_RETRY_POLICY))\n            .build();\n    boolean ret = runtimeManager.execute(workflowSummary, null, summary);\n    assertTrue(ret);\n    assertEquals(StepInstance.Status.FINISHING, summary.getRuntimeState().getStatus());\n    assertNotNull(summary.getRuntimeState().getFinishTime());\n    assertNotNull(summary.getRuntimeState().getModifyTime());\n    assertEquals(1, summary.getPendingRecords().size());\n    assertEquals(\n        StepInstance.Status.NOT_CREATED, summary.getPendingRecords().get(0).getOldStatus());\n    assertEquals(StepInstance.Status.FINISHING, summary.getPendingRecords().get(0).getNewStatus());\n    assertEquals(artifact, summary.getArtifacts().get(\"test-artifact\"));\n    assertTrue(summary.getTimeline().isEmpty());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/StepRuntimeManagerTest.java", "function_name": "testExecute", "index": 2953, "label": 0}
{"input": "@Test\n  public void testScheduleForDuplicateDoneAction() {\n    var future1 = Mockito.mock(ScheduledFuture.class);\n    var future2 = Mockito.mock(ScheduledFuture.class);\n    when(context.schedule(any(), anyLong())).thenReturn(future1).thenReturn(future2);\n    when(future1.isDone()).thenReturn(true);\n\n    groupActor.runActionFor(flowActor, Action.FLOW_START);\n    groupActor.schedule(Action.GROUP_START, 10000);\n    groupActor.startShutdown(Action.FLOW_SHUTDOWN);\n    verify(future1, times(1)).cancel(true);\n    assertEquals(Map.of(Action.GROUP_START, future1), groupActor.getScheduledActions());\n    assertTrue(groupActor.isRunning());\n\n    groupActor.schedule(Action.GROUP_START, 10000);\n    verify(context, times(2)).schedule(any(), anyLong());\n    verify(future1, times(1)).cancel(true);\n    verify(future2, times(0)).cancel(true);\n    assertEquals(Map.of(Action.GROUP_START, future2), groupActor.getScheduledActions());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "9090b77192576f33911a6b75478daa4978c644ab", "file_path": "maestro-flow/src/test/java/com/netflix/maestro/flow/actor/BaseActorTest.java", "function_name": "testScheduleForDuplicateDoneAction", "index": 2954, "label": 0}
{"input": "@Test\n  public void testInvalidMapParamAsType() throws Exception {\n    WorkflowDefinition definition =\n        loadObject(\"fixtures/parameters/sample-wf-map-params.json\", WorkflowDefinition.class);\n    Workflow workflow = definition.getWorkflow();\n    Map<String, Parameter> params = toParameters(workflow.getParams());\n    paramEvaluator.evaluateWorkflowParameters(params, workflow.getId());\n    AssertHelper.assertThrows(\n        \"cannot cast a MAP param to STRING_MAP\",\n        MaestroInternalError.class,\n        \"Param [p1] is a [MAP] type and cannot be used as STRING_MAP\",\n        () -> params.get(\"p1\").asStringMapParam());\n\n    AssertHelper.assertThrows(\n        \"cannot cast a nested MAP param to DOUBLE_ARRAY\",\n        MaestroInternalError.class,\n        \"Param [l10] is a [MAP] type and cannot be used as DOUBLE_ARRAY\",\n        () -> params.get(\"p1\").asMapParam().getEvaluatedParam(\"l10\").asDoubleArrayParam());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/eval/MapParameterEvaluationTest.java", "function_name": "testInvalidMapParamAsType", "index": 2955, "label": 0}
{"input": "private String runWorkflowInstance(WorkflowInstance instance) {\n    if (instance.isFreshRun()) {\n      return workflowRunner.start(instance);\n    } else {\n      return workflowRunner.restart(instance);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/processors/RunWorkflowInstancesJobProcessor.java", "function_name": "runWorkflowInstance", "index": 2956, "label": 0}
{"input": "public <T> T getEvaluatedResultForParam(String paramName) {\n    return getEvaluatedParam(paramName).getEvaluatedResult();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/parameter/MapParameter.java", "function_name": "getEvaluatedResultForParam", "index": 2957, "label": 0}
{"input": "@Test\n  public void testMergeAllowSystemChangesInternalMode() throws JsonProcessingException {\n    for (InternalParamMode mode : Collections.singletonList(InternalParamMode.RESERVED)) {\n      Map<String, ParamDefinition> allParams =\n          parseParamDefMap(\n              String.format(\n                  \"{'tomerge': {'type': 'STRING','value': 'hello', 'internal_mode': '%s'}}\",\n                  mode.toString()));\n      Map<String, ParamDefinition> paramsToMerge =\n          parseParamDefMap(\"{'tomerge': {'type': 'STRING', 'value': 'goodbye'}}\");\n      ParamsMergeHelper.mergeParams(allParams, paramsToMerge, systemMergeContext);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/params/ParamsMergeHelperTest.java", "function_name": "testMergeAllowSystemChangesInternalMode", "index": 2958, "label": 0}
{"input": "private boolean jj_2_4(int xla) {\n    jj_la = xla;\n    jj_lastpos = jj_scanpos = token;\n    try {\n      return !jj_3_4();\n    } catch (LookaheadSuccess ls) {\n      return true;\n    } finally {\n      jj_save(3, xla);\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_2_4", "index": 2959, "label": 0}
{"input": "public static URI parseModuleNotationToUri(Object m) {\n    var parsed1 = PluginUtils.parseModuleNotation(m);\n    return parsedModuleNotationToUri(parsed1);\n  }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "b93cb9b32237760e357d9229b87686b81390a519", "file_path": "pkl-gradle/src/main/java/org/pkl/gradle/utils/PluginUtils.java", "function_name": "parseModuleNotationToUri", "index": 2960, "label": 0}
{"input": "@Test\n  public void testTryUnblockFailedWorkflowInstanceNoop() {\n    int cnt =\n        instanceDao.terminateQueuedInstances(\n            TEST_WORKFLOW_ID, 2, WorkflowInstance.Status.STOPPED, \"test-reason\");\n    assertEquals(1L, cnt);\n    String status = instanceDao.getWorkflowInstanceRawStatus(TEST_WORKFLOW_ID, 1L, 1L);\n    assertEquals(\"STOPPED\", status);\n    boolean ret = instanceDao.tryUnblockFailedWorkflowInstance(TEST_WORKFLOW_ID, 1L, 1L, null);\n    assertFalse(ret);\n    status = instanceDao.getWorkflowInstanceRawStatus(TEST_WORKFLOW_ID, 1L, 1L);\n    assertEquals(\"STOPPED\", status);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroWorkflowInstanceDaoTest.java", "function_name": "testTryUnblockFailedWorkflowInstanceNoop", "index": 2961, "label": 0}
{"input": "@Test\n  public void testStepReachDesiredState() {\n    event.setEntityType(InstanceActionJobEvent.EntityType.STEP);\n    setStepInstanceDefinition(StepType.SUBWORKFLOW);\n    setStepInstanceRuntimeState(StepInstance.Status.STOPPED);\n    event.setStepAction(Actions.StepInstanceAction.STOP);\n    Assert.assertTrue(processor.process(event).isEmpty());\n\n    Mockito.verify(stepInstanceDao, Mockito.times(1))\n        .getStepInstance(workflowId, workflowInstanceId, workflowRunId, stepId, stepAttemptId);\n    Mockito.verifyNoInteractions(instanceDao);\n    Mockito.verifyNoInteractions(flowOperation);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "bbab92e9908a273eec4bcc94a43d35787526b41c", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/processors/InstanceActionJobEventProcessorTest.java", "function_name": "testStepReachDesiredState", "index": 2962, "label": 0}
{"input": "public static StepAction createRestart(StepInstance stepInstance, RunRequest runRequest) {\n    return create(\n        Actions.StepInstanceAction.RESTART,\n        stepInstance,\n        runRequest.getRequester(),\n        null,\n        false,\n        runRequest);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/db/StepAction.java", "function_name": "createRestart", "index": 2963, "label": 0}
{"input": "public Builder setMessage1(\n                    SubMessage1.Builder builderForValue) {\n                if (message1Builder_ == null) {\n                    message1_ = builderForValue.build();\n                } else {\n                    message1Builder_.setMessage(builderForValue.build());\n                }\n                bitField0_ |= 0x00000001;\n                onChanged();\n                return this;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "setMessage1", "index": 2964, "label": 0}
{"input": "SelThread(\n      String name,\n      Runnable target,\n      int stackLimit,\n      int loopLimit,\n      int arrayLimit,\n      int lengthLimit,\n      long visitLimit) {\n    super(SEL_THREAD_GROUP, target, name);\n    this.selParser = new SelParser(new ByteArrayInputStream(\"\".getBytes()));\n    this.selEvaluator =\n        new SelParserEvaluationVisitor(stackLimit, loopLimit, arrayLimit, visitLimit);\n    this.validator = new SelParserValidationVisitor();\n    this.lengthLimit = lengthLimit;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/security/SelThread.java", "function_name": "SelThread", "index": 2965, "label": 0}
{"input": "public List<String> extractEvidences(String query) {\n\t\tList<Document> evidenceDocuments = vectorStoreService.getDocuments(query, \"evidence\");\n\t\treturn evidenceDocuments.stream().map(Document::getText).collect(Collectors.toList());\n\t}", "repository_name": "spring-ai-alibaba", "repository_url": "https://github.com/alibaba/spring-ai-alibaba", "commit_hash": "c437d8bc4f8cf20cdb69bc40c61199f2aba1d5e1", "file_path": "spring-ai-alibaba-nl2sql/chat/src/main/java/com/alibaba/cloud/ai/service/base/BaseNl2SqlService.java", "function_name": "extractEvidences", "index": 2966, "label": 0}
{"input": "public static JSONObject delete(String appId, String labelIds) {\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\", appId);\r\n        param.put(\"labelIds\", labelIds);\r\n        return OkhttpUtil.postJSON(\"/label/delete\", param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/LabelApi.java", "function_name": "delete", "index": 2967, "label": 0}
{"input": "public WorkflowInstanceActionResponse kill(\n      String workflowId, long workflowInstanceId, long workflowRunId, User caller) {\n    return terminate(\n        workflowId, workflowInstanceId, workflowRunId, Actions.WorkflowInstanceAction.KILL, caller);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowInstanceActionHandler.java", "function_name": "kill", "index": 2968, "label": 0}
{"input": "@Test\n    public void test3556() throws IOException, InvalidFormatException {\n        String file = \"D://test/dataformat1.xlsx\";\n        XSSFWorkbook xssfWorkbook = new XSSFWorkbook(file);\n        Sheet xssfSheet = xssfWorkbook.getSheetAt(0);\n        DataFormatter d = new DataFormatter(Locale.CHINA);\n        \n        for (int i = 0; i < xssfSheet.getLastRowNum(); i++) {\n            Row row = xssfSheet.getRow(i);\n            System.out.println(d.formatCellValue(row.getCell(0)));\n        }\n        \n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatTest.java", "function_name": "test3556", "index": 2969, "label": 0}
{"input": "@Test\n  public void testDecodeInvalidStepOverview() throws Exception {\n    WorkflowRuntimeOverview overview =\n        loadObject(\n            \"fixtures/instances/sample-workflow-runtime-overview.json\",\n            WorkflowRuntimeOverview.class);\n    assertFalse(overview.existsNotCreatedStep());\n    AssertHelper.assertThrows(\n        \"invalid dag or overview\",\n        NullPointerException.class,\n        \"cannot find step id for stepInfo\",\n        () -> overview.decodeStepOverview(Collections.emptyMap()));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/WorkflowRuntimeOverviewTest.java", "function_name": "testDecodeInvalidStepOverview", "index": 2970, "label": 0}
{"input": "@Override\n    public boolean execute(Workflow workflow, Task task, WorkflowExecutor executor) {\n      if (shouldThrow) {\n        throw new IllegalArgumentException(\"unexpected-exception\");\n      }\n      return true;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/conductor/core/execution/MaestroWorkflowExecutorTest.java", "function_name": "execute", "index": 2971, "label": 0}
{"input": "private boolean jj_3R_52() {\n    if (jj_scan_token(NE)) return true;\n    if (jj_3R_47()) return true;\n    return false;\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "8eacd5c4211d41b8fd26a47a35e409c0c16b5216", "file_path": "netflix-sel/src/main/java/com/netflix/sel/ast/SelParser.java", "function_name": "jj_3R_52", "index": 2972, "label": 0}
{"input": "@JsonIgnore\n  public Map<String, StepTransition> getDag() {\n    return steps.stream().collect(MapHelper.toListMap(Step::getId, Step::getTransition));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/definition/Workflow.java", "function_name": "getDag", "index": 2973, "label": 0}
{"input": "@Override\n            public com.google.protobuf.Descriptors.Descriptor\n            getDescriptorForType() {\n                return MsgProto.internal_static_MessageBytesExtra_descriptor;\n            }", "repository_name": "wx-dump-4j", "repository_url": "https://github.com/xuchengsheng/wx-dump-4j", "commit_hash": "6af27e834de12f37f0fc969bb2b191b579f45025", "file_path": "wx-dump-admin/src/main/java/com/xcs/wx/protobuf/MsgProto.java", "function_name": "getDescriptorForType", "index": 2974, "label": 0}
{"input": "@Test\n  public void testConcurrencyValidationNull() throws Exception {\n    ForeachStep def =\n        (ForeachStep) loadObject(\"fixtures/foreachsteps/sample-foreach-step.json\", Step.class);\n    def.setConcurrency(null);\n    Set<ConstraintViolation<ForeachStep>> violations = validator.validate(def);\n    Assert.assertEquals(0, violations.size());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/definition/ForeachStepTest.java", "function_name": "testConcurrencyValidationNull", "index": 2975, "label": 0}
{"input": "@Test\n  public void testStartRunStrategyWithQueue() {\n    wfi.setWorkflowInstanceId(0L);\n    wfi.setWorkflowRunId(0L);\n    wfi.setWorkflowUuid(\"test-uuid\");\n    int res = runStrategyDao.startWithRunStrategy(wfi, RunStrategy.create(\"PARALLEL\"));\n    assertEquals(1, res);\n    assertEquals(2, wfi.getWorkflowInstanceId());\n    assertEquals(1, wfi.getWorkflowRunId());\n    assertEquals(\"test-uuid\", wfi.getWorkflowUuid());\n    WorkflowInstance latestRun =\n        dao.getLatestWorkflowInstanceRun(wfi.getWorkflowId(), wfi.getWorkflowInstanceId());\n    assertEquals(2, latestRun.getWorkflowInstanceId());\n    assertEquals(\"test-uuid\", latestRun.getWorkflowUuid());\n    verifyPublish(1, 0, 0, 0, 0);\n    MaestroTestHelper.removeWorkflowInstance(dataSource, TEST_WORKFLOW_ID, 2);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "testStartRunStrategyWithQueue", "index": 2976, "label": 0}
{"input": "private int getIndexFromName(Spinner spinner, String name) {\n        String ccn = CountryUtils.getCountryName(name);\n        String newname = LocaleHelper.restoreText(this,ccn);\n        for (int i = 0; i < spinner.getCount(); i++) {\n            if (spinner.getItemAtPosition(i).toString().equalsIgnoreCase(newname)) {\n                return i;\n            }\n        }\n\n        return 0;\n    }", "repository_name": "oblivion", "repository_url": "https://github.com/bepass-org/oblivion", "commit_hash": "abcf26c693e386d31c730746b915c346087b18de", "file_path": "app/src/main/java/org/bepass/oblivion/SettingsActivity.java", "function_name": "getIndexFromName", "index": 2977, "label": 0}
{"input": "@Test\n  public void testBuildFromStepId() {\n    RunResponse res = RunResponse.from(instance, \"foo\");\n    Assert.assertEquals(RunResponse.Status.DELEGATED, res.getStatus());\n    res = RunResponse.from(instance, null);\n    Assert.assertEquals(RunResponse.Status.NON_TERMINAL_ERROR, res.getStatus());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/execution/RunResponseTest.java", "function_name": "testBuildFromStepId", "index": 2978, "label": 0}
{"input": "private String getCurrentAddress() {\n        CodeViewerService service = tool.getService(CodeViewerService.class);\n        if (service == null) return \"Code viewer service not available\";\n        \n        ProgramLocation location = service.getCurrentLocation();\n        return (location != null) ? location.getAddress().toString() : \"No current location\";\n    }", "repository_name": "GhidraMCP", "repository_url": "https://github.com/LaurieWired/GhidraMCP", "commit_hash": "4ce96a47b80dd69e2af90aa89ded8c697264e4d4", "file_path": "src/main/java/com/lauriewired/GhidraMCPPlugin.java", "function_name": "getCurrentAddress", "index": 2979, "label": 0}
{"input": "@Test(expected = NullPointerException.class)\n  public void testValidateParamEmpty() {\n    OutputData outputData = new OutputData(null, null);\n    dao.insertOrUpdateOutputData(outputData);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/OutputDataDaoTest.java", "function_name": "testValidateParamEmpty", "index": 2980, "label": 0}
{"input": "@Test\n  public void testAddDuplicateSignal() throws Exception {\n    SignalCreateRequest request =\n        loadObject(\"fixtures/api/sample-signal-create-request.json\", SignalCreateRequest.class);\n    var instance = brokerDao.addSignal(request);\n    assertEquals(\"signal_a\", instance.getName());\n    assertEquals(\"test-request-id\", instance.getInstanceId());\n    assertEquals(0, instance.getSeqId());\n    assertNotNull(instance.getDetails());\n    assertEquals(\"Duplicate signal instance\", instance.getDetails().getMessage());\n    verify(instanceDao, times(1)).addSignalInstance(any(), any(), any(), any());\n    verify(paramDao, times(0)).addSignalParams(any(), any(), anyLong());\n    verify(queueProducer, times(0)).push(any(SignalInstance.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/dao/MaestroSignalBrokerDaoTest.java", "function_name": "testAddDuplicateSignal", "index": 2981, "label": 0}
{"input": "@ApiOperation(value = \"提交文生图任务\")\n    @PostMapping(\"/imagine\")\n    public String imagine(@RequestBody SubmitImagineDTO imagineDTO) {\n        chatCostService.taskDeduct(\"mj\",imagineDTO.getPrompt(), 0.0);\n        String jsonStr = JSONUtil.toJsonStr(imagineDTO);\n        String url = \"mj/submit/imagine\";\n        Request request = mjOkHttpUtil.createPostRequest(url, jsonStr);\n        return mjOkHttpUtil.executeRequest(request);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "373424bd010cfae218570e602199e2ac6754a0ef", "file_path": "ruoyi-modules/ruoyi-chat/src/main/java/org/ruoyi/chat/controller/tripartite/SubmitController.java", "function_name": "imagine", "index": 2982, "label": 0}
{"input": "@Override\n    public void removeById(String id, String modelName) {\n        createSchema(id, modelName);\n        \n        embeddingStore.remove(id);\n    }", "repository_name": "ruoyi-ai", "repository_url": "https://github.com/ageerle/ruoyi-ai", "commit_hash": "70ae7ea8f1fe6e01839558f2bae60d2e80e517d9", "file_path": "ruoyi-modules-api/ruoyi-knowledge-api/src/main/java/org/ruoyi/service/impl/VectorStoreServiceImpl.java", "function_name": "removeById", "index": 2983, "label": 0}
{"input": "public Long getNextUniqueId() {\n    return withMetricLogError(\n        () ->\n            withRetryableQuery(\n                GET_UNIQUE_ROWID,\n                stmt -> {},\n                result -> {\n                  if (result.next()) {\n                    return result.getLong(ID_COLUMN);\n                  }\n                  throw new MaestroNotFoundException(\"crdb unique_rowid() does not return an id\");\n                }),\n        \"getNextUniqueId\",\n        \"Failed to get the next unique id\");\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroStepInstanceDao.java", "function_name": "getNextUniqueId", "index": 2984, "label": 0}
{"input": "private long getLatestRunId(Connection conn, String workflowId, long workflowInstanceId)\n      throws SQLException {\n    try (PreparedStatement stmt =\n        conn.prepareStatement(GET_LATEST_WORKFLOW_INSTANCE_RUN_ID_QUERY)) {\n      stmt.setString(1, workflowId);\n      stmt.setLong(2, workflowInstanceId);\n      try (ResultSet result = stmt.executeQuery()) { \n        if (result.next()) {\n          if (WorkflowInstance.Status.create(result.getString(STATUS_COLUMN)).isTerminal()) {\n            return result.getLong(ID_COLUMN);\n          } else {\n            return -result.getLong(ID_COLUMN); \n          }\n        }\n        return 0;\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "getLatestRunId", "index": 2985, "label": 0}
{"input": "public static String parseWithParam(\n      String value, Function<ParamDefinition, Parameter> paramParser) {\n    ParamDefinition paramDef = ParamDefinition.buildParamDefinition(PARAM_NAME, value);\n    Parameter param = paramParser.apply(paramDef);\n    return param == null ? value : param.asString();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e9bd41406e407ee9b90e5c6ac860f56b04aa7dee", "file_path": "maestro-common/src/main/java/com/netflix/maestro/utils/StringParser.java", "function_name": "parseWithParam", "index": 2986, "label": 0}
{"input": "private void addTerminalOne(WorkflowInstance.Status status, WorkflowRollupOverview overview) {\n    if (stats == null) {\n      stats = new EnumMap<>(WorkflowInstance.Status.class);\n    }\n    stats.put(status, stats.getOrDefault(status, 0L) + 1);\n\n    if (this.rollup == null) {\n      this.rollup = new WorkflowRollupOverview();\n    }\n    this.rollup.aggregate(overview);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/main/java/com/netflix/maestro/models/instance/ForeachStepOverview.java", "function_name": "addTerminalOne", "index": 2987, "label": 0}
{"input": "public String sourceCodeUrlScheme() {\n      return homepage + \"blob/\" + version + \"/stdlib%{path}#L%{line}-L%{endLine}\";\n    }", "repository_name": "pkl", "repository_url": "https://github.com/apple/pkl", "commit_hash": "51df2f3aa4c2d5a86bb66494e0e880e3568c80df", "file_path": "pkl-core/src/main/java/org/pkl/core/Release.java", "function_name": "sourceCodeUrlScheme", "index": 2988, "label": 0}
{"input": "TestWorkflowCreateRequest1KBLimit(WorkflowCreateRequest workflowCreateRequest) {\n      this.workflowCreateRequest = workflowCreateRequest;\n    }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/validations/JsonSizeConstraintTest.java", "function_name": "TestWorkflowCreateRequest1KBLimit", "index": 2989, "label": 0}
{"input": "@Test\n  public void testUnblockReachingLimit() {\n    when(instanceDao.tryUnblockFailedWorkflowInstances(eq(\"sample-minimal-wf\"), anyInt(), any()))\n        .thenReturn(Constants.UNBLOCK_BATCH_SIZE)\n        .thenReturn(10);\n    TimelineEvent event = actionHandler.unblock(\"sample-minimal-wf\", tester);\n    assertEquals(\"Unblocked [110] failed workflow instances.\", event.getMessage());\n    verify(maestroJobEventPublisher, times(1)).publishOrThrow(any(StartWorkflowJobEvent.class));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/handlers/WorkflowActionHandlerTest.java", "function_name": "testUnblockReachingLimit", "index": 2990, "label": 0}
{"input": "public StepInstanceRestartResponse toStepRestartResponse() {\n    return StepInstanceRestartResponse.builder()\n        .workflowId(this.workflowId)\n        .workflowVersionId(this.workflowVersionId)\n        .workflowInstanceId(this.workflowInstanceId)\n        .workflowRunId(this.workflowRunId)\n        .stepId(this.stepId)\n        .stepAttemptId(this.stepAttemptId)\n        .status(this.status.runStatus)\n        .timelineEvent(this.timelineEvent)\n        .build();\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/execution/RunResponse.java", "function_name": "toStepRestartResponse", "index": 2991, "label": 0}
{"input": "@Test\n  public void testGetAggregatedRollupFromIterationsNull() {\n    doReturn(Collections.singletonList(new WorkflowRollupOverview()))\n        .when(workflowInstanceDao)\n        .getBatchForeachLatestRunRollupForIterations(anyString(), any());\n    ForeachStepOverview stepOverview = mock(ForeachStepOverview.class);\n    ForeachStepOverview prevStepOverview = new ForeachStepOverview();\n    doReturn(null).when(stepOverview).getIterationsToRunFromDetails(any());\n    foreachStepRuntime.initializeForeachArtifactRollup(\n        stepOverview, prevStepOverview, \"myworkflowid\");\n    assertNull(stepOverview.getRollup());\n    Mockito.verify(workflowInstanceDao, times(0))\n        .getBatchForeachLatestRunRollupForIterations(eq(\"myworkflowid\"), any());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/steps/ForeachStepRuntimeTest.java", "function_name": "testGetAggregatedRollupFromIterationsNull", "index": 2992, "label": 0}
{"input": "private boolean existLastRunFailedInstance(Connection conn, String workflowId)\n      throws SQLException {\n    try (PreparedStatement stmt = conn.prepareStatement(CHECK_LAST_RUN_FAILED_INSTANCES_QUERY)) {\n      stmt.setString(1, workflowId);\n      try (ResultSet result = stmt.executeQuery()) {\n        return result.next();\n      }\n    }\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/main/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDao.java", "function_name": "existLastRunFailedInstance", "index": 2993, "label": 0}
{"input": "public static JSONObject uploadPhoneAddressList(String appId,List<String> phones,Integer opType){\r\n        JSONObject param = new JSONObject();\r\n        param.put(\"appId\",appId);\r\n        param.put(\"wxid\",phones);\r\n        param.put(\"opType\",opType);\r\n        return OkhttpUtil.postJSON(\"/contacts/uploadPhoneAddressList\",param);\r\n    }", "repository_name": "Gewechat", "repository_url": "https://github.com/Devo919/Gewechat", "commit_hash": "79a4d1638ea85047a1eae38c6c070252c9d6498e", "file_path": "src/main/java/api/base/ContactApi.java", "function_name": "uploadPhoneAddressList", "index": 2994, "label": 0}
{"input": "@Test\n  public void testProcessForInvalidMatch() {\n    SignalTriggerMatch instance = new SignalTriggerMatch();\n    Supplier<SignalTriggerMatch> messageSupplier = () -> instance;\n    when(brokerDao.tryExecuteTrigger(any())).thenReturn(-1);\n    processor.process(messageSupplier);\n    verify(brokerDao, times(1)).deleteTrigger(any(), any());\n    assertEquals(\n        1L,\n        metricRepo\n            .getCounter(\n                MetricConstants.SIGNAL_TRIGGER_MATCH_SUCCESS,\n                SignalTriggerMatchProcessor.class,\n                MetricConstants.TYPE_TAG,\n                \"-1\")\n            .count());\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "4a0691a6480b0a41ee4061a3a65ed4543bbe0abf", "file_path": "maestro-signal/src/test/java/com/netflix/maestro/signal/messageprocessors/SignalTriggerMatchProcessorTest.java", "function_name": "testProcessForInvalidMatch", "index": 2995, "label": 0}
{"input": "@Test\n  public void testisForeachIterationRestartable() throws Exception {\n    ForeachStepOverview overview =\n        loadObject(\n            \"fixtures/instances/sample-foreach-step-overview.json\", ForeachStepOverview.class);\n    assertFalse(overview.isForeachIterationRestartable(123L));\n    overview.addOne(123L, WorkflowInstance.Status.FAILED, null);\n    overview.refreshDetail();\n    assertTrue(overview.isForeachIterationRestartable(123L));\n    assertEquals(0, overview.getRunningStatsCount(true));\n    overview.updateForRestart(\n        123L, WorkflowInstance.Status.CREATED, WorkflowInstance.Status.FAILED, null);\n    overview.refreshDetail();\n    assertFalse(overview.isForeachIterationRestartable(123L));\n    assertEquals(79993, overview.getRunningStatsCount(true));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "b4cb5ebbd0014bd8c72f8054a07e5cab015dc8ec", "file_path": "maestro-common/src/test/java/com/netflix/maestro/models/instance/ForeachStepOverviewTest.java", "function_name": "testisForeachIterationRestartable", "index": 2996, "label": 0}
{"input": "public static void main(String[] args) throws FileNotFoundException {\n        List<DataType> data = getData();\n        ExcelWriter excelWriter = null;\n        excelWriter = EasyExcel.write(new FileOutputStream(\"all.xlsx\")).build();\n        WriteSheet writeSheet = EasyExcel.writerSheet(1, \"test\").head(HeadType.class).build();\n        excelWriter.write(data, writeSheet);\n        excelWriter.finish();\n    }", "repository_name": "fastexcel", "repository_url": "https://github.com/fast-excel/fastexcel", "commit_hash": "158b139eea4ce7f064a88337accb36efe0745fe5", "file_path": "fastexcel-test/src/test/java/cn/idev/excel/test/temp/bug/ExcelCreat.java", "function_name": "main", "index": 2997, "label": 0}
{"input": "@Test\n  public void testStartWithRunStrategyForDeletedWorkflow() {\n    MaestroTestHelper.removeWorkflow(dataSource, TEST_WORKFLOW_ID);\n    wfi.setWorkflowInstanceId(0L);\n    wfi.setWorkflowRunId(0L);\n    wfi.setWorkflowUuid(\"test-uuid\");\n    AssertHelper.assertThrows(\n        \"cannot start a deleted workflow\",\n        MaestroNotFoundException.class,\n        \"Cannot find workflow [sample-dag-test-3]\",\n        () -> runStrategyDao.startWithRunStrategy(wfi, Defaults.DEFAULT_RUN_STRATEGY));\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "e966142553d5b3a158ae9e04f6b0a9aed4d1a75f", "file_path": "maestro-engine/src/test/java/com/netflix/maestro/engine/dao/MaestroRunStrategyDaoTest.java", "function_name": "testStartWithRunStrategyForDeletedWorkflow", "index": 2998, "label": 0}
{"input": "public static boolean isWorkflowNotFoundException(MaestroNotFoundException exception) {\n    return exception.getMessage() != null && exception.getMessage().contains(NOT_FOUND_MESSAGE);\n  }", "repository_name": "maestro", "repository_url": "https://github.com/Netflix/maestro", "commit_hash": "24a5aaa7482b06a5a44448d5ee704cb7b9bdfa6e", "file_path": "maestro-timetrigger/src/main/java/com/netflix/maestro/timetrigger/utils/ExceptionClassifier.java", "function_name": "isWorkflowNotFoundException", "index": 2999, "label": 0}
